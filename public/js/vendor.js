/*
 AngularJS v1.3.1
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(N,U,t){'use strict';function w(b){return function(){var a=arguments[0],c;c="["+(b?b+":":"")+a+"] http://errors.angularjs.org/1.3.1/"+(b?b+"/":"")+a;for(a=1;a<arguments.length;a++){c=c+(1==a?"?":"&")+"p"+(a-1)+"=";var d=encodeURIComponent,e;e=arguments[a];e="function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?JSON.stringify(e):e;c+=d(e)}return Error(c)}}function Qa(b){if(null==b||Ra(b))return!1;var a=b.length;return b.nodeType===
ka&&a?!0:J(b)||H(b)||0===a||"number"===typeof a&&0<a&&a-1 in b}function s(b,a,c){var d,e;if(b)if(A(b))for(d in b)"prototype"==d||"length"==d||"name"==d||b.hasOwnProperty&&!b.hasOwnProperty(d)||a.call(c,b[d],d,b);else if(H(b)||Qa(b)){var f="object"!==typeof b;d=0;for(e=b.length;d<e;d++)(f||d in b)&&a.call(c,b[d],d,b)}else if(b.forEach&&b.forEach!==s)b.forEach(a,c,b);else for(d in b)b.hasOwnProperty(d)&&a.call(c,b[d],d,b);return b}function Cd(b,a,c){for(var d=Object.keys(b).sort(),e=0;e<d.length;e++)a.call(c,
b[d[e]],d[e]);return d}function jc(b){return function(a,c){b(c,a)}}function Dd(){return++gb}function kc(b,a){a?b.$$hashKey=a:delete b.$$hashKey}function F(b){for(var a=b.$$hashKey,c=1,d=arguments.length;c<d;c++){var e=arguments[c];if(e)for(var f=Object.keys(e),g=0,k=f.length;g<k;g++){var h=f[g];b[h]=e[h]}}kc(b,a);return b}function aa(b){return parseInt(b,10)}function lc(b,a){return F(new (F(function(){},{prototype:b})),a)}function y(){}function Sa(b){return b}function da(b){return function(){return b}}
function x(b){return"undefined"===typeof b}function z(b){return"undefined"!==typeof b}function P(b){return null!==b&&"object"===typeof b}function J(b){return"string"===typeof b}function X(b){return"number"===typeof b}function ea(b){return"[object Date]"===Ja.call(b)}function A(b){return"function"===typeof b}function hb(b){return"[object RegExp]"===Ja.call(b)}function Ra(b){return b&&b.window===b}function Ta(b){return b&&b.$evalAsync&&b.$watch}function Ua(b){return"boolean"===typeof b}function mc(b){return!(!b||
!(b.nodeName||b.prop&&b.attr&&b.find))}function Ed(b){var a={};b=b.split(",");var c;for(c=0;c<b.length;c++)a[b[c]]=!0;return a}function pa(b){return S(b.nodeName||b[0].nodeName)}function Va(b,a){var c=b.indexOf(a);0<=c&&b.splice(c,1);return a}function Ca(b,a,c,d){if(Ra(b)||Ta(b))throw Wa("cpws");if(a){if(b===a)throw Wa("cpi");c=c||[];d=d||[];if(P(b)){var e=c.indexOf(b);if(-1!==e)return d[e];c.push(b);d.push(a)}if(H(b))for(var f=a.length=0;f<b.length;f++)e=Ca(b[f],null,c,d),P(b[f])&&(c.push(b[f]),
d.push(e)),a.push(e);else{var g=a.$$hashKey;H(a)?a.length=0:s(a,function(b,c){delete a[c]});for(f in b)b.hasOwnProperty(f)&&(e=Ca(b[f],null,c,d),P(b[f])&&(c.push(b[f]),d.push(e)),a[f]=e);kc(a,g)}}else if(a=b)H(b)?a=Ca(b,[],c,d):ea(b)?a=new Date(b.getTime()):hb(b)?(a=new RegExp(b.source,b.toString().match(/[^\/]*$/)[0]),a.lastIndex=b.lastIndex):P(b)&&(e=Object.create(Object.getPrototypeOf(b)),a=Ca(b,e,c,d));return a}function qa(b,a){if(H(b)){a=a||[];for(var c=0,d=b.length;c<d;c++)a[c]=b[c]}else if(P(b))for(c in a=
a||{},b)if("$"!==c.charAt(0)||"$"!==c.charAt(1))a[c]=b[c];return a||b}function la(b,a){if(b===a)return!0;if(null===b||null===a)return!1;if(b!==b&&a!==a)return!0;var c=typeof b,d;if(c==typeof a&&"object"==c)if(H(b)){if(!H(a))return!1;if((c=b.length)==a.length){for(d=0;d<c;d++)if(!la(b[d],a[d]))return!1;return!0}}else{if(ea(b))return ea(a)?la(b.getTime(),a.getTime()):!1;if(hb(b)&&hb(a))return b.toString()==a.toString();if(Ta(b)||Ta(a)||Ra(b)||Ra(a)||H(a))return!1;c={};for(d in b)if("$"!==d.charAt(0)&&
!A(b[d])){if(!la(b[d],a[d]))return!1;c[d]=!0}for(d in a)if(!c.hasOwnProperty(d)&&"$"!==d.charAt(0)&&a[d]!==t&&!A(a[d]))return!1;return!0}return!1}function ib(b,a,c){return b.concat(Xa.call(a,c))}function nc(b,a){var c=2<arguments.length?Xa.call(arguments,2):[];return!A(a)||a instanceof RegExp?a:c.length?function(){return arguments.length?a.apply(b,c.concat(Xa.call(arguments,0))):a.apply(b,c)}:function(){return arguments.length?a.apply(b,arguments):a.call(b)}}function Fd(b,a){var c=a;"string"===typeof b&&
"$"===b.charAt(0)&&"$"===b.charAt(1)?c=t:Ra(a)?c="$WINDOW":a&&U===a?c="$DOCUMENT":Ta(a)&&(c="$SCOPE");return c}function ra(b,a){return"undefined"===typeof b?t:JSON.stringify(b,Fd,a?"  ":null)}function oc(b){return J(b)?JSON.parse(b):b}function sa(b){b=v(b).clone();try{b.empty()}catch(a){}var c=v("<div>").append(b).html();try{return b[0].nodeType===jb?S(c):c.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(a,b){return"<"+S(b)})}catch(d){return S(c)}}function pc(b){try{return decodeURIComponent(b)}catch(a){}}
function qc(b){var a={},c,d;s((b||"").split("&"),function(b){b&&(c=b.replace(/\+/g,"%20").split("="),d=pc(c[0]),z(d)&&(b=z(c[1])?pc(c[1]):!0,Hb.call(a,d)?H(a[d])?a[d].push(b):a[d]=[a[d],b]:a[d]=b))});return a}function Ib(b){var a=[];s(b,function(b,d){H(b)?s(b,function(b){a.push(Da(d,!0)+(!0===b?"":"="+Da(b,!0)))}):a.push(Da(d,!0)+(!0===b?"":"="+Da(b,!0)))});return a.length?a.join("&"):""}function kb(b){return Da(b,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Da(b,a){return encodeURIComponent(b).replace(/%40/gi,
"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,a?"%20":"+")}function Gd(b,a){var c,d,e=lb.length;b=v(b);for(d=0;d<e;++d)if(c=lb[d]+a,J(c=b.attr(c)))return c;return null}function Hd(b,a){var c,d,e={};s(lb,function(a){a+="app";!c&&b.hasAttribute&&b.hasAttribute(a)&&(c=b,d=b.getAttribute(a))});s(lb,function(a){a+="app";var e;!c&&(e=b.querySelector("["+a.replace(":","\\:")+"]"))&&(c=e,d=e.getAttribute(a))});c&&(e.strictDi=null!==Gd(c,"strict-di"),
a(c,d?[d]:[],e))}function rc(b,a,c){P(c)||(c={});c=F({strictDi:!1},c);var d=function(){b=v(b);if(b.injector()){var d=b[0]===U?"document":sa(b);throw Wa("btstrpd",d.replace(/</,"&lt;").replace(/>/,"&gt;"));}a=a||[];a.unshift(["$provide",function(a){a.value("$rootElement",b)}]);c.debugInfoEnabled&&a.push(["$compileProvider",function(a){a.debugInfoEnabled(!0)}]);a.unshift("ng");d=Jb(a,c.strictDi);d.invoke(["$rootScope","$rootElement","$compile","$injector",function(a,b,c,d){a.$apply(function(){b.data("$injector",
d);c(b)(a)})}]);return d},e=/^NG_ENABLE_DEBUG_INFO!/,f=/^NG_DEFER_BOOTSTRAP!/;N&&e.test(N.name)&&(c.debugInfoEnabled=!0,N.name=N.name.replace(e,""));if(N&&!f.test(N.name))return d();N.name=N.name.replace(f,"");ta.resumeBootstrap=function(b){s(b,function(b){a.push(b)});d()}}function Id(){N.name="NG_ENABLE_DEBUG_INFO!"+N.name;N.location.reload()}function Jd(b){return ta.element(b).injector().get("$$testability")}function Kb(b,a){a=a||"_";return b.replace(Kd,function(b,d){return(d?a:"")+b.toLowerCase()})}
function Ld(){var b;sc||((ma=N.jQuery)&&ma.fn.on?(v=ma,F(ma.fn,{scope:Ka.scope,isolateScope:Ka.isolateScope,controller:Ka.controller,injector:Ka.injector,inheritedData:Ka.inheritedData}),b=ma.cleanData,ma.cleanData=function(a){var c;if(Lb)Lb=!1;else for(var d=0,e;null!=(e=a[d]);d++)(c=ma._data(e,"events"))&&c.$destroy&&ma(e).triggerHandler("$destroy");b(a)}):v=Q,ta.element=v,sc=!0)}function Mb(b,a,c){if(!b)throw Wa("areq",a||"?",c||"required");return b}function mb(b,a,c){c&&H(b)&&(b=b[b.length-1]);
Mb(A(b),a,"not a function, got "+(b&&"object"===typeof b?b.constructor.name||"Object":typeof b));return b}function La(b,a){if("hasOwnProperty"===b)throw Wa("badname",a);}function tc(b,a,c){if(!a)return b;a=a.split(".");for(var d,e=b,f=a.length,g=0;g<f;g++)d=a[g],b&&(b=(e=b)[d]);return!c&&A(b)?nc(e,b):b}function nb(b){var a=b[0];b=b[b.length-1];var c=[a];do{a=a.nextSibling;if(!a)break;c.push(a)}while(a!==b);return v(c)}function wa(){return Object.create(null)}function Md(b){function a(a,b,c){return a[b]||
(a[b]=c())}var c=w("$injector"),d=w("ng");b=a(b,"angular",Object);b.$$minErr=b.$$minErr||w;return a(b,"module",function(){var b={};return function(f,g,k){if("hasOwnProperty"===f)throw d("badname","module");g&&b.hasOwnProperty(f)&&(b[f]=null);return a(b,f,function(){function a(c,d,e,f){f||(f=b);return function(){f[e||"push"]([c,d,arguments]);return n}}if(!g)throw c("nomod",f);var b=[],d=[],e=[],q=a("$injector","invoke","push",d),n={_invokeQueue:b,_configBlocks:d,_runBlocks:e,requires:g,name:f,provider:a("$provide",
"provider"),factory:a("$provide","factory"),service:a("$provide","service"),value:a("$provide","value"),constant:a("$provide","constant","unshift"),animation:a("$animateProvider","register"),filter:a("$filterProvider","register"),controller:a("$controllerProvider","register"),directive:a("$compileProvider","directive"),config:q,run:function(a){e.push(a);return this}};k&&q(k);return n})}})}function Nd(b){F(b,{bootstrap:rc,copy:Ca,extend:F,equals:la,element:v,forEach:s,injector:Jb,noop:y,bind:nc,toJson:ra,
fromJson:oc,identity:Sa,isUndefined:x,isDefined:z,isString:J,isFunction:A,isObject:P,isNumber:X,isElement:mc,isArray:H,version:Od,isDate:ea,lowercase:S,uppercase:ob,callbacks:{counter:0},getTestability:Jd,$$minErr:w,$$csp:Ya,reloadWithDebugInfo:Id});Za=Md(N);try{Za("ngLocale")}catch(a){Za("ngLocale",[]).provider("$locale",Pd)}Za("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:Qd});a.provider("$compile",uc).directive({a:Rd,input:vc,textarea:vc,form:Sd,script:Td,select:Ud,style:Vd,
option:Wd,ngBind:Xd,ngBindHtml:Yd,ngBindTemplate:Zd,ngClass:$d,ngClassEven:ae,ngClassOdd:be,ngCloak:ce,ngController:de,ngForm:ee,ngHide:fe,ngIf:ge,ngInclude:he,ngInit:ie,ngNonBindable:je,ngPluralize:ke,ngRepeat:le,ngShow:me,ngStyle:ne,ngSwitch:oe,ngSwitchWhen:pe,ngSwitchDefault:qe,ngOptions:re,ngTransclude:se,ngModel:te,ngList:ue,ngChange:ve,pattern:wc,ngPattern:wc,required:xc,ngRequired:xc,minlength:yc,ngMinlength:yc,maxlength:zc,ngMaxlength:zc,ngValue:we,ngModelOptions:xe}).directive({ngInclude:ye}).directive(pb).directive(Ac);
a.provider({$anchorScroll:ze,$animate:Ae,$browser:Be,$cacheFactory:Ce,$controller:De,$document:Ee,$exceptionHandler:Fe,$filter:Bc,$interpolate:Ge,$interval:He,$http:Ie,$httpBackend:Je,$location:Ke,$log:Le,$parse:Me,$rootScope:Ne,$q:Oe,$$q:Pe,$sce:Qe,$sceDelegate:Re,$sniffer:Se,$templateCache:Te,$templateRequest:Ue,$$testability:Ve,$timeout:We,$window:Xe,$$rAF:Ye,$$asyncCallback:Ze})}])}function $a(b){return b.replace($e,function(a,b,d,e){return e?d.toUpperCase():d}).replace(af,"Moz$1")}function Cc(b){b=
b.nodeType;return b===ka||!b||9===b}function Dc(b,a){var c,d,e=a.createDocumentFragment(),f=[];if(Nb.test(b)){c=c||e.appendChild(a.createElement("div"));d=(bf.exec(b)||["",""])[1].toLowerCase();d=ha[d]||ha._default;c.innerHTML=d[1]+b.replace(cf,"<$1></$2>")+d[2];for(d=d[0];d--;)c=c.lastChild;f=ib(f,c.childNodes);c=e.firstChild;c.textContent=""}else f.push(a.createTextNode(b));e.textContent="";e.innerHTML="";s(f,function(a){e.appendChild(a)});return e}function Q(b){if(b instanceof Q)return b;var a;
J(b)&&(b=T(b),a=!0);if(!(this instanceof Q)){if(a&&"<"!=b.charAt(0))throw Ob("nosel");return new Q(b)}if(a){a=U;var c;b=(c=df.exec(b))?[a.createElement(c[1])]:(c=Dc(b,a))?c.childNodes:[]}Ec(this,b)}function Pb(b){return b.cloneNode(!0)}function qb(b,a){a||rb(b);if(b.querySelectorAll)for(var c=b.querySelectorAll("*"),d=0,e=c.length;d<e;d++)rb(c[d])}function Fc(b,a,c,d){if(z(d))throw Ob("offargs");var e=(d=sb(b))&&d.events,f=d&&d.handle;if(f)if(a)s(a.split(" "),function(a){if(z(c)){var d=e[a];Va(d||
[],c);if(d&&0<d.length)return}b.removeEventListener(a,f,!1);delete e[a]});else for(a in e)"$destroy"!==a&&b.removeEventListener(a,f,!1),delete e[a]}function rb(b,a){var c=b.ng339,d=c&&tb[c];d&&(a?delete d.data[a]:(d.handle&&(d.events.$destroy&&d.handle({},"$destroy"),Fc(b)),delete tb[c],b.ng339=t))}function sb(b,a){var c=b.ng339,c=c&&tb[c];a&&!c&&(b.ng339=c=++ef,c=tb[c]={events:{},data:{},handle:t});return c}function Qb(b,a,c){if(Cc(b)){var d=z(c),e=!d&&a&&!P(a),f=!a;b=(b=sb(b,!e))&&b.data;if(d)b[a]=
c;else{if(f)return b;if(e)return b&&b[a];F(b,a)}}}function Rb(b,a){return b.getAttribute?-1<(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+a+" "):!1}function Sb(b,a){a&&b.setAttribute&&s(a.split(" "),function(a){b.setAttribute("class",T((" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+T(a)+" "," ")))})}function Tb(b,a){if(a&&b.setAttribute){var c=(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");s(a.split(" "),function(a){a=T(a);-1===
c.indexOf(" "+a+" ")&&(c+=a+" ")});b.setAttribute("class",T(c))}}function Ec(b,a){if(a)if(a.nodeType)b[b.length++]=a;else{var c=a.length;if("number"===typeof c&&a.window!==a){if(c)for(var d=0;d<c;d++)b[b.length++]=a[d]}else b[b.length++]=a}}function Gc(b,a){return ub(b,"$"+(a||"ngController")+"Controller")}function ub(b,a,c){9==b.nodeType&&(b=b.documentElement);for(a=H(a)?a:[a];b;){for(var d=0,e=a.length;d<e;d++)if((c=v.data(b,a[d]))!==t)return c;b=b.parentNode||11===b.nodeType&&b.host}}function Hc(b){for(qb(b,
!0);b.firstChild;)b.removeChild(b.firstChild)}function Ic(b,a){a||qb(b);var c=b.parentNode;c&&c.removeChild(b)}function ff(b,a){a=a||N;if("complete"===a.document.readyState)a.setTimeout(b);else v(a).on("load",b)}function Jc(b,a){var c=vb[a.toLowerCase()];return c&&Kc[pa(b)]&&c}function gf(b,a){var c=b.nodeName;return("INPUT"===c||"TEXTAREA"===c)&&Lc[a]}function hf(b,a){var c=function(c,e){c.isDefaultPrevented=function(){return c.defaultPrevented};var f=a[e||c.type],g=f?f.length:0;if(g){if(x(c.immediatePropagationStopped)){var k=
c.stopImmediatePropagation;c.stopImmediatePropagation=function(){c.immediatePropagationStopped=!0;c.stopPropagation&&c.stopPropagation();k&&k.call(c)}}c.isImmediatePropagationStopped=function(){return!0===c.immediatePropagationStopped};1<g&&(f=qa(f));for(var h=0;h<g;h++)c.isImmediatePropagationStopped()||f[h].call(b,c)}};c.elem=b;return c}function Ma(b,a){var c=b&&b.$$hashKey;if(c)return"function"===typeof c&&(c=b.$$hashKey()),c;c=typeof b;return c="function"==c||"object"==c&&null!==b?b.$$hashKey=
c+":"+(a||Dd)():c+":"+b}function ab(b,a){if(a){var c=0;this.nextUid=function(){return++c}}s(b,this.put,this)}function jf(b){return(b=b.toString().replace(Mc,"").match(Nc))?"function("+(b[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Ub(b,a,c){var d;if("function"===typeof b){if(!(d=b.$inject)){d=[];if(b.length){if(a)throw J(c)&&c||(c=b.name||jf(b)),Ea("strictdi",c);a=b.toString().replace(Mc,"");a=a.match(Nc);s(a[1].split(kf),function(a){a.replace(lf,function(a,b,c){d.push(c)})})}b.$inject=d}}else H(b)?
(a=b.length-1,mb(b[a],"fn"),d=b.slice(0,a)):mb(b,"fn",!0);return d}function Jb(b,a){function c(a){return function(b,c){if(P(b))s(b,jc(a));else return a(b,c)}}function d(a,b){La(a,"service");if(A(b)||H(b))b=q.instantiate(b);if(!b.$get)throw Ea("pget",a);return p[a+"Provider"]=b}function e(a,b){return function(){var c=r.invoke(b,this,t,a);if(x(c))throw Ea("undef",a);return c}}function f(a,b,c){return d(a,{$get:!1!==c?e(a,b):b})}function g(a){var b=[],c;s(a,function(a){function d(a){var b,c;b=0;for(c=
a.length;b<c;b++){var e=a[b],f=q.get(e[0]);f[e[1]].apply(f,e[2])}}if(!m.get(a)){m.put(a,!0);try{J(a)?(c=Za(a),b=b.concat(g(c.requires)).concat(c._runBlocks),d(c._invokeQueue),d(c._configBlocks)):A(a)?b.push(q.invoke(a)):H(a)?b.push(q.invoke(a)):mb(a,"module")}catch(e){throw H(a)&&(a=a[a.length-1]),e.message&&e.stack&&-1==e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),Ea("modulerr",a,e.stack||e.message||e);}}});return b}function k(b,c){function d(a){if(b.hasOwnProperty(a)){if(b[a]===h)throw Ea("cdep",
a+" <- "+l.join(" <- "));return b[a]}try{return l.unshift(a),b[a]=h,b[a]=c(a)}catch(e){throw b[a]===h&&delete b[a],e;}finally{l.shift()}}function e(b,c,f,g){"string"===typeof f&&(g=f,f=null);var h=[];g=Ub(b,a,g);var k,l,n;l=0;for(k=g.length;l<k;l++){n=g[l];if("string"!==typeof n)throw Ea("itkn",n);h.push(f&&f.hasOwnProperty(n)?f[n]:d(n))}H(b)&&(b=b[k]);return b.apply(c,h)}return{invoke:e,instantiate:function(a,b,c){var d=function(){};d.prototype=(H(a)?a[a.length-1]:a).prototype;d=new d;a=e(a,d,b,
c);return P(a)||A(a)?a:d},get:d,annotate:Ub,has:function(a){return p.hasOwnProperty(a+"Provider")||b.hasOwnProperty(a)}}}a=!0===a;var h={},l=[],m=new ab([],!0),p={$provide:{provider:c(d),factory:c(f),service:c(function(a,b){return f(a,["$injector",function(a){return a.instantiate(b)}])}),value:c(function(a,b){return f(a,da(b),!1)}),constant:c(function(a,b){La(a,"constant");p[a]=b;n[a]=b}),decorator:function(a,b){var c=q.get(a+"Provider"),d=c.$get;c.$get=function(){var a=r.invoke(d,c);return r.invoke(b,
null,{$delegate:a})}}}},q=p.$injector=k(p,function(){throw Ea("unpr",l.join(" <- "));}),n={},r=n.$injector=k(n,function(a){var b=q.get(a+"Provider");return r.invoke(b.$get,b,t,a)});s(g(b),function(a){r.invoke(a||y)});return r}function ze(){var b=!0;this.disableAutoScrolling=function(){b=!1};this.$get=["$window","$location","$rootScope",function(a,c,d){function e(a){var b=null;Array.prototype.some.call(a,function(a){if("a"===pa(a))return b=a,!0});return b}function f(b){if(b){b.scrollIntoView();var c;
c=g.yOffset;A(c)?c=c():mc(c)?(c=c[0],c="fixed"!==a.getComputedStyle(c).position?0:c.getBoundingClientRect().bottom):X(c)||(c=0);c&&(b=b.getBoundingClientRect().top,a.scrollBy(0,b-c))}else a.scrollTo(0,0)}function g(){var a=c.hash(),b;a?(b=k.getElementById(a))?f(b):(b=e(k.getElementsByName(a)))?f(b):"top"===a&&f(null):f(null)}var k=a.document;b&&d.$watch(function(){return c.hash()},function(a,b){a===b&&""===a||ff(function(){d.$evalAsync(g)})});return g}]}function Ze(){this.$get=["$$rAF","$timeout",
function(b,a){return b.supported?function(a){return b(a)}:function(b){return a(b,0,!1)}}]}function mf(b,a,c,d){function e(a){try{a.apply(null,Xa.call(arguments,1))}finally{if(C--,0===C)for(;D.length;)try{D.pop()()}catch(b){c.error(b)}}}function f(a,b){(function xa(){s(G,function(a){a()});u=b(xa,a)})()}function g(){k();h()}function k(){I=b.history.state;I=x(I)?null:I;la(I,R)&&(I=R);R=I}function h(){if(E!==m.url()||K!==I)E=m.url(),K=I,s(V,function(a){a(m.url(),I)})}function l(a){try{return decodeURIComponent(a)}catch(b){return a}}
var m=this,p=a[0],q=b.location,n=b.history,r=b.setTimeout,O=b.clearTimeout,B={};m.isMock=!1;var C=0,D=[];m.$$completeOutstandingRequest=e;m.$$incOutstandingRequestCount=function(){C++};m.notifyWhenNoOutstandingRequests=function(a){s(G,function(a){a()});0===C?a():D.push(a)};var G=[],u;m.addPollFn=function(a){x(u)&&f(100,r);G.push(a);return a};var I,K,E=q.href,ca=a.find("base"),M=null;k();K=I;m.url=function(a,c,e){x(e)&&(e=null);q!==b.location&&(q=b.location);n!==b.history&&(n=b.history);if(a){var f=
K===e;if(E!==a||d.history&&!f){var g=E&&Fa(E)===Fa(a);E=a;K=e;!d.history||g&&f?(g||(M=a),c?q.replace(a):q.href=a):(n[c?"replaceState":"pushState"](e,"",a),k(),K=I);return m}}else return M||q.href.replace(/%27/g,"'")};m.state=function(){return I};var V=[],W=!1,R=null;m.onUrlChange=function(a){if(!W){if(d.history)v(b).on("popstate",g);v(b).on("hashchange",g);W=!0}V.push(a);return a};m.$$checkUrlChange=h;m.baseHref=function(){var a=ca.attr("href");return a?a.replace(/^(https?\:)?\/\/[^\/]*/,""):""};
var ba={},z="",fa=m.baseHref();m.cookies=function(a,b){var d,e,f,g;if(a)b===t?p.cookie=encodeURIComponent(a)+"=;path="+fa+";expires=Thu, 01 Jan 1970 00:00:00 GMT":J(b)&&(d=(p.cookie=encodeURIComponent(a)+"="+encodeURIComponent(b)+";path="+fa).length+1,4096<d&&c.warn("Cookie '"+a+"' possibly not set or overflowed because it was too large ("+d+" > 4096 bytes)!"));else{if(p.cookie!==z)for(z=p.cookie,d=z.split("; "),ba={},f=0;f<d.length;f++)e=d[f],g=e.indexOf("="),0<g&&(a=l(e.substring(0,g)),ba[a]===
t&&(ba[a]=l(e.substring(g+1))));return ba}};m.defer=function(a,b){var c;C++;c=r(function(){delete B[c];e(a)},b||0);B[c]=!0;return c};m.defer.cancel=function(a){return B[a]?(delete B[a],O(a),e(y),!0):!1}}function Be(){this.$get=["$window","$log","$sniffer","$document",function(b,a,c,d){return new mf(b,d,a,c)}]}function Ce(){this.$get=function(){function b(b,d){function e(a){a!=p&&(q?q==a&&(q=a.n):q=a,f(a.n,a.p),f(a,p),p=a,p.n=null)}function f(a,b){a!=b&&(a&&(a.p=b),b&&(b.n=a))}if(b in a)throw w("$cacheFactory")("iid",
b);var g=0,k=F({},d,{id:b}),h={},l=d&&d.capacity||Number.MAX_VALUE,m={},p=null,q=null;return a[b]={put:function(a,b){if(l<Number.MAX_VALUE){var c=m[a]||(m[a]={key:a});e(c)}if(!x(b))return a in h||g++,h[a]=b,g>l&&this.remove(q.key),b},get:function(a){if(l<Number.MAX_VALUE){var b=m[a];if(!b)return;e(b)}return h[a]},remove:function(a){if(l<Number.MAX_VALUE){var b=m[a];if(!b)return;b==p&&(p=b.p);b==q&&(q=b.n);f(b.n,b.p);delete m[a]}delete h[a];g--},removeAll:function(){h={};g=0;m={};p=q=null},destroy:function(){m=
k=h=null;delete a[b]},info:function(){return F({},k,{size:g})}}}var a={};b.info=function(){var b={};s(a,function(a,e){b[e]=a.info()});return b};b.get=function(b){return a[b]};return b}}function Te(){this.$get=["$cacheFactory",function(b){return b("templates")}]}function uc(b,a){function c(a,b){var c=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,d={};s(a,function(a,e){var f=a.match(c);if(!f)throw ia("iscp",b,e,a);d[e]={mode:f[1][0],collection:"*"===f[2],optional:"?"===f[3],attrName:f[4]||e}});return d}var d=
{},e=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,f=/(([\w\-]+)(?:\:([^;]+))?;?)/,g=Ed("ngSrc,ngSrcset,src,srcset"),k=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,h=/^(on[a-z]+|formaction)$/;this.directive=function p(a,e){La(a,"directive");J(a)?(Mb(e,"directiveFactory"),d.hasOwnProperty(a)||(d[a]=[],b.factory(a+"Directive",["$injector","$exceptionHandler",function(b,e){var f=[];s(d[a],function(d,g){try{var h=b.invoke(d);A(h)?h={compile:da(h)}:!h.compile&&h.link&&(h.compile=da(h.link));h.priority=h.priority||0;h.index=
g;h.name=h.name||a;h.require=h.require||h.controller&&h.name;h.restrict=h.restrict||"EA";P(h.scope)&&(h.$$isolateBindings=c(h.scope,h.name));f.push(h)}catch(k){e(k)}});return f}])),d[a].push(e)):s(a,jc(p));return this};this.aHrefSanitizationWhitelist=function(b){return z(b)?(a.aHrefSanitizationWhitelist(b),this):a.aHrefSanitizationWhitelist()};this.imgSrcSanitizationWhitelist=function(b){return z(b)?(a.imgSrcSanitizationWhitelist(b),this):a.imgSrcSanitizationWhitelist()};var l=!0;this.debugInfoEnabled=
function(a){return z(a)?(l=a,this):l};this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(a,b,c,r,O,B,C,D,G,u,I){function K(a,b){try{a.addClass(b)}catch(c){}}function E(a,b,c,d,e){a instanceof v||(a=v(a));s(a,function(b,c){b.nodeType==jb&&b.nodeValue.match(/\S+/)&&(a[c]=v(b).wrap("<span></span>").parent()[0])});var f=ca(a,b,a,c,d,e);E.$$addScopeClass(a);var g=null;return function(b,
c,d,e,h){Mb(b,"scope");g||(g=(h=h&&h[0])?"foreignobject"!==pa(h)&&h.toString().match(/SVG/)?"svg":"html":"html");h="html"!==g?v(N(g,v("<div>").append(a).html())):c?Ka.clone.call(a):a;if(d)for(var k in d)h.data("$"+k+"Controller",d[k].instance);E.$$addScopeInfo(h,b);c&&c(h,b);f&&f(b,h,h,e);return h}}function ca(a,b,c,d,e,f){function g(a,c,d,e){var f,k,l,q,n,r,D;if(p)for(D=Array(c.length),q=0;q<h.length;q+=3)f=h[q],D[f]=c[f];else D=c;q=0;for(n=h.length;q<n;)k=D[h[q++]],c=h[q++],f=h[q++],c?(c.scope?
(l=a.$new(),E.$$addScopeInfo(v(k),l)):l=a,r=c.transcludeOnThisElement?M(a,c.transclude,e,c.elementTranscludeOnThisElement):!c.templateOnThisElement&&e?e:!e&&b?M(a,b):null,c(f,l,k,d,r)):f&&f(a,k.childNodes,t,e)}for(var h=[],k,l,q,n,p,r=0;r<a.length;r++){k=new X;l=V(a[r],[],k,0===r?d:t,e);(f=l.length?ba(l,a[r],k,b,c,null,[],[],f):null)&&f.scope&&E.$$addScopeClass(k.$$element);k=f&&f.terminal||!(q=a[r].childNodes)||!q.length?null:ca(q,f?(f.transcludeOnThisElement||!f.templateOnThisElement)&&f.transclude:
b);if(f||k)h.push(r,f,k),n=!0,p=p||f;f=null}return n?g:null}function M(a,b,c,d){return function(d,e,f,g,h){d||(d=a.$new(!1,h),d.$$transcluded=!0);return b(d,e,f,c,g)}}function V(b,c,g,h,k){var l=g.$attr,q;switch(b.nodeType){case ka:fa(c,ua(pa(b)),"E",h,k);for(var n,r,D,B=b.attributes,O=0,G=B&&B.length;O<G;O++){var I=!1,E=!1;n=B[O];q=n.name;n=T(n.value);r=ua(q);if(D=ya.test(r))q=Kb(r.substr(6),"-");var K=r.replace(/(Start|End)$/,""),u;a:{var C=K;if(d.hasOwnProperty(C)){u=void 0;for(var C=a.get(C+"Directive"),
s=0,ca=C.length;s<ca;s++)if(u=C[s],u.multiElement){u=!0;break a}}u=!1}u&&r===K+"Start"&&(I=q,E=q.substr(0,q.length-5)+"end",q=q.substr(0,q.length-6));r=ua(q.toLowerCase());l[r]=q;if(D||!g.hasOwnProperty(r))g[r]=n,Jc(b,r)&&(g[r]=!0);Q(b,c,n,r,D);fa(c,r,"A",h,k,I,E)}b=b.className;if(J(b)&&""!==b)for(;q=f.exec(b);)r=ua(q[2]),fa(c,r,"C",h,k)&&(g[r]=T(q[3])),b=b.substr(q.index+q[0].length);break;case jb:Y(c,b.nodeValue);break;case 8:try{if(q=e.exec(b.nodeValue))r=ua(q[1]),fa(c,r,"M",h,k)&&(g[r]=T(q[2]))}catch(V){}}c.sort(w);
return c}function W(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw ia("uterdir",b,c);a.nodeType==ka&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return v(d)}function R(a,b,c){return function(d,e,f,g,h){e=W(e[0],b,c);return a(d,e,f,g,h)}}function ba(a,d,e,f,g,h,l,r,p){function D(a,b,c,d){if(a){c&&(a=R(a,c,d));a.require=L.require;a.directiveName=ga;if(M===L||L.$$isolateScope)a=Z(a,{isolateScope:!0});l.push(a)}if(b){c&&
(b=R(b,c,d));b.require=L.require;b.directiveName=ga;if(M===L||L.$$isolateScope)b=Z(b,{isolateScope:!0});r.push(b)}}function I(a,b,c,d){var e,f="data",g=!1,h=c,l;if(J(b)){l=b.match(k);b=b.substring(l[0].length);l[3]&&(l[1]?l[3]=null:l[1]=l[3]);"^"===l[1]?f="inheritedData":"^^"===l[1]&&(f="inheritedData",h=c.parent());"?"===l[2]&&(g=!0);e=null;d&&"data"===f&&(e=d[b])&&(e=e.instance);e=e||h[f]("$"+b+"Controller");if(!e&&!g)throw ia("ctreq",b,a);return e||null}H(b)&&(e=[],s(b,function(b){e.push(I(a,b,
c,d))}));return e}function G(a,c,f,g,h){function k(a,b,c){var d;Ta(a)||(c=b,b=a,a=t);F&&(d=u);c||(c=F?V.parent():V);return h(a,b,d,c,Vb)}var n,p,D,K,u,xb,V,R;d===f?(R=e,V=e.$$element):(V=v(f),R=new X(V,e));M&&(K=c.$new(!0));xb=h&&k;C&&(ca={},u={},s(C,function(a){var b={$scope:a===M||a.$$isolateScope?K:c,$element:V,$attrs:R,$transclude:xb};D=a.controller;"@"==D&&(D=R[a.name]);b=B(D,b,!0,a.controllerAs);u[a.name]=b;F||V.data("$"+a.name+"Controller",b.instance);ca[a.name]=b}));if(M){E.$$addScopeInfo(V,
K,!0,!(ba&&(ba===M||ba===M.$$originalDirective)));E.$$addScopeClass(V,!0);g=ca&&ca[M.name];var W=K;g&&g.identifier&&!0===M.bindToController&&(W=g.instance);s(K.$$isolateBindings=M.$$isolateBindings,function(a,d){var e=a.attrName,f=a.optional,g,h,k,l;switch(a.mode){case "@":R.$observe(e,function(a){W[d]=a});R.$$observers[e].$$scope=c;R[e]&&(W[d]=b(R[e])(c));break;case "=":if(f&&!R[e])break;h=O(R[e]);l=h.literal?la:function(a,b){return a===b||a!==a&&b!==b};k=h.assign||function(){g=W[d]=h(c);throw ia("nonassign",
R[e],M.name);};g=W[d]=h(c);f=function(a){l(a,W[d])||(l(a,g)?k(c,a=W[d]):W[d]=a);return g=a};f.$stateful=!0;f=a.collection?c.$watchCollection(R[e],f):c.$watch(O(R[e],f),null,h.literal);K.$on("$destroy",f);break;case "&":h=O(R[e]),W[d]=function(a){return h(c,a)}}})}ca&&(s(ca,function(a){a()}),ca=null);g=0;for(n=l.length;g<n;g++)p=l[g],$(p,p.isolateScope?K:c,V,R,p.require&&I(p.directiveName,p.require,V,u),xb);var Vb=c;M&&(M.template||null===M.templateUrl)&&(Vb=K);a&&a(Vb,f.childNodes,t,h);for(g=r.length-
1;0<=g;g--)p=r[g],$(p,p.isolateScope?K:c,V,R,p.require&&I(p.directiveName,p.require,V,u),xb)}p=p||{};for(var K=-Number.MAX_VALUE,u,C=p.controllerDirectives,ca,M=p.newIsolateScopeDirective,ba=p.templateDirective,fa=p.nonTlbTranscludeDirective,y=!1,Na=!1,F=p.hasElementTranscludeDirective,Y=e.$$element=v(d),L,ga,w,Ga=f,S,Q=0,ya=a.length;Q<ya;Q++){L=a[Q];var wb=L.$$start,aa=L.$$end;wb&&(Y=W(d,wb,aa));w=t;if(K>L.priority)break;if(w=L.scope)L.templateUrl||(P(w)?(xa("new/isolated scope",M||u,L,Y),M=L):xa("new/isolated scope",
M,L,Y)),u=u||L;ga=L.name;!L.templateUrl&&L.controller&&(w=L.controller,C=C||{},xa("'"+ga+"' controller",C[ga],L,Y),C[ga]=L);if(w=L.transclude)y=!0,L.$$tlb||(xa("transclusion",fa,L,Y),fa=L),"element"==w?(F=!0,K=L.priority,w=Y,Y=e.$$element=v(U.createComment(" "+ga+": "+e[ga]+" ")),d=Y[0],yb(g,Xa.call(w,0),d),Ga=E(w,f,K,h&&h.name,{nonTlbTranscludeDirective:fa})):(w=v(Pb(d)).contents(),Y.empty(),Ga=E(w,f));if(L.template)if(Na=!0,xa("template",ba,L,Y),ba=L,w=A(L.template)?L.template(Y,e):L.template,w=
Pc(w),L.replace){h=L;w=Nb.test(w)?Qc(N(L.templateNamespace,T(w))):[];d=w[0];if(1!=w.length||d.nodeType!==ka)throw ia("tplrt",ga,"");yb(g,Y,d);ya={$attr:{}};w=V(d,[],ya);var nf=a.splice(Q+1,a.length-(Q+1));M&&z(w);a=a.concat(w).concat(nf);Oc(e,ya);ya=a.length}else Y.html(w);if(L.templateUrl)Na=!0,xa("template",ba,L,Y),ba=L,L.replace&&(h=L),G=x(a.splice(Q,a.length-Q),Y,e,g,y&&Ga,l,r,{controllerDirectives:C,newIsolateScopeDirective:M,templateDirective:ba,nonTlbTranscludeDirective:fa}),ya=a.length;else if(L.compile)try{S=
L.compile(Y,e,Ga),A(S)?D(null,S,wb,aa):S&&D(S.pre,S.post,wb,aa)}catch(da){c(da,sa(Y))}L.terminal&&(G.terminal=!0,K=Math.max(K,L.priority))}G.scope=u&&!0===u.scope;G.transcludeOnThisElement=y;G.elementTranscludeOnThisElement=F;G.templateOnThisElement=Na;G.transclude=Ga;p.hasElementTranscludeDirective=F;return G}function z(a){for(var b=0,c=a.length;b<c;b++)a[b]=lc(a[b],{$$isolateScope:!0})}function fa(b,e,f,g,h,k,l){if(e===h)return null;h=null;if(d.hasOwnProperty(e)){var q;e=a.get(e+"Directive");for(var r=
0,D=e.length;r<D;r++)try{q=e[r],(g===t||g>q.priority)&&-1!=q.restrict.indexOf(f)&&(k&&(q=lc(q,{$$start:k,$$end:l})),b.push(q),h=q)}catch(B){c(B)}}return h}function Oc(a,b){var c=b.$attr,d=a.$attr,e=a.$$element;s(a,function(d,e){"$"!=e.charAt(0)&&(b[e]&&b[e]!==d&&(d+=("style"===e?";":" ")+b[e]),a.$set(e,d,!0,c[e]))});s(b,function(b,f){"class"==f?(K(e,b),a["class"]=(a["class"]?a["class"]+" ":"")+b):"style"==f?(e.attr("style",e.attr("style")+";"+b),a.style=(a.style?a.style+";":"")+b):"$"==f.charAt(0)||
a.hasOwnProperty(f)||(a[f]=b,d[f]=c[f])})}function x(a,b,c,d,e,f,g,h){var k=[],l,q,n=b[0],p=a.shift(),D=F({},p,{templateUrl:null,transclude:null,replace:null,$$originalDirective:p}),B=A(p.templateUrl)?p.templateUrl(b,c):p.templateUrl,O=p.templateNamespace;b.empty();r(G.getTrustedResourceUrl(B)).then(function(r){var G,I;r=Pc(r);if(p.replace){r=Nb.test(r)?Qc(N(O,T(r))):[];G=r[0];if(1!=r.length||G.nodeType!==ka)throw ia("tplrt",p.name,B);r={$attr:{}};yb(d,b,G);var u=V(G,[],r);P(p.scope)&&z(u);a=u.concat(a);
Oc(c,r)}else G=n,b.html(r);a.unshift(D);l=ba(a,G,c,e,b,p,f,g,h);s(d,function(a,c){a==G&&(d[c]=b[0])});for(q=ca(b[0].childNodes,e);k.length;){r=k.shift();I=k.shift();var E=k.shift(),C=k.shift(),u=b[0];if(!r.$$destroyed){if(I!==n){var R=I.className;h.hasElementTranscludeDirective&&p.replace||(u=Pb(G));yb(E,v(I),u);K(v(u),R)}I=l.transcludeOnThisElement?M(r,l.transclude,C):C;l(q,r,u,d,I)}}k=null});return function(a,b,c,d,e){a=e;b.$$destroyed||(k?(k.push(b),k.push(c),k.push(d),k.push(a)):(l.transcludeOnThisElement&&
(a=M(b,l.transclude,e)),l(q,b,c,d,a)))}}function w(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function xa(a,b,c,d){if(b)throw ia("multidir",b.name,c.name,a,sa(d));}function Y(a,c){var d=b(c,!0);d&&a.push({priority:0,compile:function(a){a=a.parent();var b=!!a.length;b&&E.$$addBindingClass(a);return function(a,c){var e=c.parent();b||E.$$addBindingClass(e);E.$$addBindingInfo(e,d.expressions);a.$watch(d,function(a){c[0].nodeValue=a})}}})}function N(a,
b){a=S(a||"html");switch(a){case "svg":case "math":var c=U.createElement("div");c.innerHTML="<"+a+">"+b+"</"+a+">";return c.childNodes[0].childNodes;default:return b}}function Ga(a,b){if("srcdoc"==b)return G.HTML;var c=pa(a);if("xlinkHref"==b||"form"==c&&"action"==b||"img"!=c&&("src"==b||"ngSrc"==b))return G.RESOURCE_URL}function Q(a,c,d,e,f){var k=b(d,!0);if(k){if("multiple"===e&&"select"===pa(a))throw ia("selmulti",sa(a));c.push({priority:100,compile:function(){return{pre:function(c,d,l){d=l.$$observers||
(l.$$observers={});if(h.test(e))throw ia("nodomevents");l[e]&&(k=b(l[e],!0,Ga(a,e),g[e]||f))&&(l[e]=k(c),(d[e]||(d[e]=[])).$$inter=!0,(l.$$observers&&l.$$observers[e].$$scope||c).$watch(k,function(a,b){"class"===e&&a!=b?l.$updateClass(a,b):l.$set(e,a)}))}}}})}}function yb(a,b,c){var d=b[0],e=b.length,f=d.parentNode,g,h;if(a)for(g=0,h=a.length;g<h;g++)if(a[g]==d){a[g++]=c;h=g+e-1;for(var k=a.length;g<k;g++,h++)h<k?a[g]=a[h]:delete a[g];a.length-=e-1;a.context===d&&(a.context=c);break}f&&f.replaceChild(c,
d);a=U.createDocumentFragment();a.appendChild(d);v(c).data(v(d).data());ma?(Lb=!0,ma.cleanData([d])):delete v.cache[d[v.expando]];d=1;for(e=b.length;d<e;d++)f=b[d],v(f).remove(),a.appendChild(f),delete b[d];b[0]=c;b.length=1}function Z(a,b){return F(function(){return a.apply(null,arguments)},a,b)}function $(a,b,d,e,f,g){try{a(b,d,e,f,g)}catch(h){c(h,sa(d))}}var X=function(a,b){if(b){var c=Object.keys(b),d,e,f;d=0;for(e=c.length;d<e;d++)f=c[d],this[f]=b[f]}else this.$attr={};this.$$element=a};X.prototype=
{$normalize:ua,$addClass:function(a){a&&0<a.length&&u.addClass(this.$$element,a)},$removeClass:function(a){a&&0<a.length&&u.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=Rc(a,b);c&&c.length&&u.addClass(this.$$element,c);(c=Rc(b,a))&&c.length&&u.removeClass(this.$$element,c)},$set:function(a,b,d,e){var f=this.$$element[0],g=Jc(f,a),h=gf(f,a),f=a;g?(this.$$element.prop(a,b),e=g):h&&(this[h]=b,f=h);this[a]=b;e?this.$attr[a]=e:(e=this.$attr[a])||(this.$attr[a]=e=Kb(a,"-"));g=pa(this.$$element);
if("a"===g&&"href"===a||"img"===g&&"src"===a)this[a]=b=I(b,"src"===a);else if("img"===g&&"srcset"===a){for(var g="",h=T(b),k=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,k=/\s/.test(h)?k:/(,)/,h=h.split(k),k=Math.floor(h.length/2),l=0;l<k;l++)var q=2*l,g=g+I(T(h[q]),!0),g=g+(" "+T(h[q+1]));h=T(h[2*l]).split(/\s/);g+=I(T(h[0]),!0);2===h.length&&(g+=" "+T(h[1]));this[a]=b=g}!1!==d&&(null===b||b===t?this.$$element.removeAttr(e):this.$$element.attr(e,b));(a=this.$$observers)&&s(a[f],function(a){try{a(b)}catch(d){c(d)}})},
$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers=wa()),e=d[a]||(d[a]=[]);e.push(b);C.$evalAsync(function(){!e.$$inter&&c.hasOwnProperty(a)&&b(c[a])});return function(){Va(e,b)}}};var Na=b.startSymbol(),ga=b.endSymbol(),Pc="{{"==Na||"}}"==ga?Sa:function(a){return a.replace(/\{\{/g,Na).replace(/}}/g,ga)},ya=/^ngAttr[A-Z]/;E.$$addBindingInfo=l?function(a,b){var c=a.data("$binding")||[];H(b)?c=c.concat(b):c.push(b);a.data("$binding",c)}:y;E.$$addBindingClass=l?function(a){K(a,"ng-binding")}:
y;E.$$addScopeInfo=l?function(a,b,c,d){a.data(c?d?"$isolateScopeNoTemplate":"$isolateScope":"$scope",b)}:y;E.$$addScopeClass=l?function(a,b){K(a,b?"ng-isolate-scope":"ng-scope")}:y;return E}]}function ua(b){return $a(b.replace(of,""))}function Rc(b,a){var c="",d=b.split(/\s+/),e=a.split(/\s+/),f=0;a:for(;f<d.length;f++){for(var g=d[f],k=0;k<e.length;k++)if(g==e[k])continue a;c+=(0<c.length?" ":"")+g}return c}function Qc(b){b=v(b);var a=b.length;if(1>=a)return b;for(;a--;)8===b[a].nodeType&&pf.call(b,
a,1);return b}function De(){var b={},a=!1,c=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(a,c){La(a,"controller");P(a)?F(b,a):b[a]=c};this.allowGlobals=function(){a=!0};this.$get=["$injector","$window",function(d,e){function f(a,b,c,d){if(!a||!P(a.$scope))throw w("$controller")("noscp",d,b);a.$scope[b]=c}return function(g,k,h,l){var m,p,q;h=!0===h;l&&J(l)&&(q=l);J(g)&&(l=g.match(c),p=l[1],q=q||l[3],g=b.hasOwnProperty(p)?b[p]:tc(k.$scope,p,!0)||(a?tc(e,p,!0):t),mb(g,p,!0));if(h)return h=function(){},
h.prototype=(H(g)?g[g.length-1]:g).prototype,m=new h,q&&f(k,q,m,p||g.name),F(function(){d.invoke(g,m,k,p);return m},{instance:m,identifier:q});m=d.instantiate(g,k,p);q&&f(k,q,m,p||g.name);return m}}]}function Ee(){this.$get=["$window",function(b){return v(b.document)}]}function Fe(){this.$get=["$log",function(b){return function(a,c){b.error.apply(b,arguments)}}]}function Wb(b,a){if(J(b)){b=b.replace(qf,"");var c=a("Content-Type");if(c&&0===c.indexOf(Sc)||rf.test(b)&&sf.test(b))b=oc(b)}return b}function Tc(b){var a=
{},c,d,e;if(!b)return a;s(b.split("\n"),function(b){e=b.indexOf(":");c=S(T(b.substr(0,e)));d=T(b.substr(e+1));c&&(a[c]=a[c]?a[c]+", "+d:d)});return a}function Uc(b){var a=P(b)?b:t;return function(c){a||(a=Tc(b));return c?a[S(c)]||null:a}}function Vc(b,a,c){if(A(c))return c(b,a);s(c,function(c){b=c(b,a)});return b}function Ie(){var b=this.defaults={transformResponse:[Wb],transformRequest:[function(a){return P(a)&&"[object File]"!==Ja.call(a)&&"[object Blob]"!==Ja.call(a)?ra(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},
post:qa(Xb),put:qa(Xb),patch:qa(Xb)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"},a=!1;this.useApplyAsync=function(b){return z(b)?(a=!!b,this):a};var c=this.interceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(d,e,f,g,k,h){function l(a){function c(a){var b=F({},a);b.data=a.data?Vc(a.data,a.headers,d.transformResponse):a.data;a=a.status;return 200<=a&&300>a?b:k.reject(b)}var d={method:"get",transformRequest:b.transformRequest,transformResponse:b.transformResponse},
e=function(a){var c=b.headers,d=F({},a.headers),e,f,c=F({},c.common,c[S(a.method)]);a:for(e in c){a=S(e);for(f in d)if(S(f)===a)continue a;d[e]=c[e]}(function(a){var b;s(a,function(c,d){A(c)&&(b=c(),null!=b?a[d]=b:delete a[d])})})(d);return d}(a);F(d,a);d.headers=e;d.method=ob(d.method);var f=[function(a){e=a.headers;var d=Vc(a.data,Uc(e),a.transformRequest);x(d)&&s(e,function(a,b){"content-type"===S(b)&&delete e[b]});x(a.withCredentials)&&!x(b.withCredentials)&&(a.withCredentials=b.withCredentials);
return m(a,d,e).then(c,c)},t],g=k.when(d);for(s(n,function(a){(a.request||a.requestError)&&f.unshift(a.request,a.requestError);(a.response||a.responseError)&&f.push(a.response,a.responseError)});f.length;){a=f.shift();var h=f.shift(),g=g.then(a,h)}g.success=function(a){g.then(function(b){a(b.data,b.status,b.headers,d)});return g};g.error=function(a){g.then(null,function(b){a(b.data,b.status,b.headers,d)});return g};return g}function m(c,f,h){function n(b,c,d,e){function f(){m(c,b,d,e)}K&&(200<=b&&
300>b?K.put(s,[b,c,Tc(d),e]):K.remove(s));a?g.$applyAsync(f):(f(),g.$$phase||g.$apply())}function m(a,b,d,e){b=Math.max(b,0);(200<=b&&300>b?u.resolve:u.reject)({data:a,status:b,headers:Uc(d),config:c,statusText:e})}function G(){var a=l.pendingRequests.indexOf(c);-1!==a&&l.pendingRequests.splice(a,1)}var u=k.defer(),I=u.promise,K,E,s=p(c.url,c.params);l.pendingRequests.push(c);I.then(G,G);!c.cache&&!b.cache||!1===c.cache||"GET"!==c.method&&"JSONP"!==c.method||(K=P(c.cache)?c.cache:P(b.cache)?b.cache:
q);if(K)if(E=K.get(s),z(E)){if(E&&A(E.then))return E.then(G,G),E;H(E)?m(E[1],E[0],qa(E[2]),E[3]):m(E,200,{},"OK")}else K.put(s,I);x(E)&&((E=Wc(c.url)?e.cookies()[c.xsrfCookieName||b.xsrfCookieName]:t)&&(h[c.xsrfHeaderName||b.xsrfHeaderName]=E),d(c.method,s,f,n,h,c.timeout,c.withCredentials,c.responseType));return I}function p(a,b){if(!b)return a;var c=[];Cd(b,function(a,b){null===a||x(a)||(H(a)||(a=[a]),s(a,function(a){P(a)&&(a=ea(a)?a.toISOString():ra(a));c.push(Da(b)+"="+Da(a))}))});0<c.length&&
(a+=(-1==a.indexOf("?")?"?":"&")+c.join("&"));return a}var q=f("$http"),n=[];s(c,function(a){n.unshift(J(a)?h.get(a):h.invoke(a))});l.pendingRequests=[];(function(a){s(arguments,function(a){l[a]=function(b,c){return l(F(c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){s(arguments,function(a){l[a]=function(b,c,d){return l(F(d||{},{method:a,url:b,data:c}))}})})("post","put","patch");l.defaults=b;return l}]}function tf(){return new N.XMLHttpRequest}function Je(){this.$get=["$browser",
"$window","$document",function(b,a,c){return uf(b,tf,b.defer,a.angular.callbacks,c[0])}]}function uf(b,a,c,d,e){function f(a,b,c){var f=e.createElement("script"),m=null;f.type="text/javascript";f.src=a;f.async=!0;m=function(a){f.removeEventListener("load",m,!1);f.removeEventListener("error",m,!1);e.body.removeChild(f);f=null;var g=-1,n="unknown";a&&("load"!==a.type||d[b].called||(a={type:"error"}),n=a.type,g="error"===a.type?404:200);c&&c(g,n)};f.addEventListener("load",m,!1);f.addEventListener("error",
m,!1);e.body.appendChild(f);return m}return function(e,k,h,l,m,p,q,n){function r(){C&&C();D&&D.abort()}function O(a,d,e,f,g){u&&c.cancel(u);C=D=null;a(d,e,f,g);b.$$completeOutstandingRequest(y)}b.$$incOutstandingRequestCount();k=k||b.url();if("jsonp"==S(e)){var B="_"+(d.counter++).toString(36);d[B]=function(a){d[B].data=a;d[B].called=!0};var C=f(k.replace("JSON_CALLBACK","angular.callbacks."+B),B,function(a,b){O(l,a,d[B].data,"",b);d[B]=y})}else{var D=a();D.open(e,k,!0);s(m,function(a,b){z(a)&&D.setRequestHeader(b,
a)});D.onload=function(){var a=D.statusText||"",b="response"in D?D.response:D.responseText,c=1223===D.status?204:D.status;0===c&&(c=b?200:"file"==za(k).protocol?404:0);O(l,c,b,D.getAllResponseHeaders(),a)};e=function(){O(l,-1,null,null,"")};D.onerror=e;D.onabort=e;q&&(D.withCredentials=!0);if(n)try{D.responseType=n}catch(G){if("json"!==n)throw G;}D.send(h||null)}if(0<p)var u=c(r,p);else p&&A(p.then)&&p.then(r)}}function Ge(){var b="{{",a="}}";this.startSymbol=function(a){return a?(b=a,this):b};this.endSymbol=
function(b){return b?(a=b,this):a};this.$get=["$parse","$exceptionHandler","$sce",function(c,d,e){function f(a){return"\\\\\\"+a}function g(f,g,n,r){function O(c){return c.replace(l,b).replace(m,a)}function B(a){try{var b;var c=n?e.getTrusted(n,a):e.valueOf(a);if(null==c)b="";else{switch(typeof c){case "string":break;case "number":c=""+c;break;default:c=ra(c)}b=c}return b}catch(g){a=Yb("interr",f,g.toString()),d(a)}}r=!!r;for(var C,D,G=0,u=[],I=[],K=f.length,E=[],s=[];G<K;)if(-1!=(C=f.indexOf(b,G))&&
-1!=(D=f.indexOf(a,C+k)))G!==C&&E.push(O(f.substring(G,C))),G=f.substring(C+k,D),u.push(G),I.push(c(G,B)),G=D+h,s.push(E.length),E.push("");else{G!==K&&E.push(O(f.substring(G)));break}if(n&&1<E.length)throw Yb("noconcat",f);if(!g||u.length){var M=function(a){for(var b=0,c=u.length;b<c;b++){if(r&&x(a[b]))return;E[s[b]]=a[b]}return E.join("")};return F(function(a){var b=0,c=u.length,e=Array(c);try{for(;b<c;b++)e[b]=I[b](a);return M(e)}catch(g){a=Yb("interr",f,g.toString()),d(a)}},{exp:f,expressions:u,
$$watchDelegate:function(a,b,c){var d;return a.$watchGroup(I,function(c,e){var f=M(c);A(b)&&b.call(this,f,c!==e?d:f,a);d=f},c)}})}}var k=b.length,h=a.length,l=new RegExp(b.replace(/./g,f),"g"),m=new RegExp(a.replace(/./g,f),"g");g.startSymbol=function(){return b};g.endSymbol=function(){return a};return g}]}function He(){this.$get=["$rootScope","$window","$q","$$q",function(b,a,c,d){function e(e,k,h,l){var m=a.setInterval,p=a.clearInterval,q=0,n=z(l)&&!l,r=(n?d:c).defer(),O=r.promise;h=z(h)?h:0;O.then(null,
null,e);O.$$intervalId=m(function(){r.notify(q++);0<h&&q>=h&&(r.resolve(q),p(O.$$intervalId),delete f[O.$$intervalId]);n||b.$apply()},k);f[O.$$intervalId]=r;return O}var f={};e.cancel=function(b){return b&&b.$$intervalId in f?(f[b.$$intervalId].reject("canceled"),a.clearInterval(b.$$intervalId),delete f[b.$$intervalId],!0):!1};return e}]}function Pd(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",
negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"\u00a4",posSuf:"",negPre:"(\u00a4",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January February March April May June July August September October November December".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a",
"short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a"},pluralCat:function(b){return 1===b?"one":"other"}}}}function Zb(b){b=b.split("/");for(var a=b.length;a--;)b[a]=kb(b[a]);return b.join("/")}function Xc(b,a,c){b=za(b,c);a.$$protocol=b.protocol;a.$$host=b.hostname;a.$$port=aa(b.port)||vf[b.protocol]||null}function Yc(b,a,c){var d="/"!==b.charAt(0);d&&(b="/"+b);b=za(b,c);a.$$path=decodeURIComponent(d&&
"/"===b.pathname.charAt(0)?b.pathname.substring(1):b.pathname);a.$$search=qc(b.search);a.$$hash=decodeURIComponent(b.hash);a.$$path&&"/"!=a.$$path.charAt(0)&&(a.$$path="/"+a.$$path)}function va(b,a){if(0===a.indexOf(b))return a.substr(b.length)}function Fa(b){var a=b.indexOf("#");return-1==a?b:b.substr(0,a)}function $b(b){return b.substr(0,Fa(b).lastIndexOf("/")+1)}function ac(b,a){this.$$html5=!0;a=a||"";var c=$b(b);Xc(b,this,b);this.$$parse=function(a){var e=va(c,a);if(!J(e))throw bb("ipthprfx",
a,c);Yc(e,this,b);this.$$path||(this.$$path="/");this.$$compose()};this.$$compose=function(){var a=Ib(this.$$search),b=this.$$hash?"#"+kb(this.$$hash):"";this.$$url=Zb(this.$$path)+(a?"?"+a:"")+b;this.$$absUrl=c+this.$$url.substr(1)};this.$$parseLinkUrl=function(d,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;(f=va(b,d))!==t?(g=f,g=(f=va(a,f))!==t?c+(va("/",f)||f):b+g):(f=va(c,d))!==t?g=c+f:c==d+"/"&&(g=c);g&&this.$$parse(g);return!!g}}function bc(b,a){var c=$b(b);Xc(b,this,b);this.$$parse=
function(d){var e=va(b,d)||va(c,d),e="#"==e.charAt(0)?va(a,e):this.$$html5?e:"";if(!J(e))throw bb("ihshprfx",d,a);Yc(e,this,b);d=this.$$path;var f=/^\/[A-Z]:(\/.*)/;0===e.indexOf(b)&&(e=e.replace(b,""));f.exec(e)||(d=(e=f.exec(d))?e[1]:d);this.$$path=d;this.$$compose()};this.$$compose=function(){var c=Ib(this.$$search),e=this.$$hash?"#"+kb(this.$$hash):"";this.$$url=Zb(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=b+(this.$$url?a+this.$$url:"")};this.$$parseLinkUrl=function(a,c){return Fa(b)==Fa(a)?(this.$$parse(a),
!0):!1}}function Zc(b,a){this.$$html5=!0;bc.apply(this,arguments);var c=$b(b);this.$$parseLinkUrl=function(d,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;b==Fa(d)?f=d:(g=va(c,d))?f=b+a+g:c===d+"/"&&(f=c);f&&this.$$parse(f);return!!f};this.$$compose=function(){var c=Ib(this.$$search),e=this.$$hash?"#"+kb(this.$$hash):"";this.$$url=Zb(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=b+a+this.$$url}}function zb(b){return function(){return this[b]}}function $c(b,a){return function(c){if(x(c))return this[b];
this[b]=a(c);this.$$compose();return this}}function Ke(){var b="",a={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(a){return z(a)?(b=a,this):b};this.html5Mode=function(b){return Ua(b)?(a.enabled=b,this):P(b)?(Ua(b.enabled)&&(a.enabled=b.enabled),Ua(b.requireBase)&&(a.requireBase=b.requireBase),Ua(b.rewriteLinks)&&(a.rewriteLinks=b.rewriteLinks),this):a};this.$get=["$rootScope","$browser","$sniffer","$rootElement",function(c,d,e,f){function g(a,b,c){var e=h.url(),f=h.$$state;
try{d.url(a,b,c),h.$$state=d.state()}catch(g){throw h.url(e),h.$$state=f,g;}}function k(a,b){c.$broadcast("$locationChangeSuccess",h.absUrl(),a,h.$$state,b)}var h,l;l=d.baseHref();var m=d.url(),p;if(a.enabled){if(!l&&a.requireBase)throw bb("nobase");p=m.substring(0,m.indexOf("/",m.indexOf("//")+2))+(l||"/");l=e.history?ac:Zc}else p=Fa(m),l=bc;h=new l(p,"#"+b);h.$$parseLinkUrl(m,m);h.$$state=d.state();var q=/^\s*(javascript|mailto):/i;f.on("click",function(b){if(a.rewriteLinks&&!b.ctrlKey&&!b.metaKey&&
2!=b.which){for(var e=v(b.target);"a"!==pa(e[0]);)if(e[0]===f[0]||!(e=e.parent())[0])return;var g=e.prop("href"),k=e.attr("href")||e.attr("xlink:href");P(g)&&"[object SVGAnimatedString]"===g.toString()&&(g=za(g.animVal).href);q.test(g)||!g||e.attr("target")||b.isDefaultPrevented()||!h.$$parseLinkUrl(g,k)||(b.preventDefault(),h.absUrl()!=d.url()&&(c.$apply(),N.angular["ff-684208-preventDefault"]=!0))}});h.absUrl()!=m&&d.url(h.absUrl(),!0);var n=!0;d.onUrlChange(function(a,b){c.$evalAsync(function(){var d=
h.absUrl(),e=h.$$state;h.$$parse(a);h.$$state=b;c.$broadcast("$locationChangeStart",a,d,b,e).defaultPrevented?(h.$$parse(d),h.$$state=e,g(d,!1,e)):(n=!1,k(d,e))});c.$$phase||c.$digest()});c.$watch(function(){var a=d.url(),b=d.state(),f=h.$$replace,l=a!==h.absUrl()||h.$$html5&&e.history&&b!==h.$$state;if(n||l)n=!1,c.$evalAsync(function(){c.$broadcast("$locationChangeStart",h.absUrl(),a,h.$$state,b).defaultPrevented?(h.$$parse(a),h.$$state=b):(l&&g(h.absUrl(),f,b===h.$$state?null:h.$$state),k(a,b))});
h.$$replace=!1});return h}]}function Le(){var b=!0,a=this;this.debugEnabled=function(a){return z(a)?(b=a,this):b};this.$get=["$window",function(c){function d(a){a instanceof Error&&(a.stack?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:a.stack:a.sourceURL&&(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=c.console||{},e=b[a]||b.log||y;a=!1;try{a=!!e.apply}catch(h){}return a?function(){var a=[];s(arguments,function(b){a.push(d(b))});return e.apply(b,
a)}:function(a,b){e(a,null==b?"":b)}}return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){b&&c.apply(a,arguments)}}()}}]}function na(b,a){if("__defineGetter__"===b||"__defineSetter__"===b||"__lookupGetter__"===b||"__lookupSetter__"===b||"__proto__"===b)throw oa("isecfld",a);return b}function Aa(b,a){if(b){if(b.constructor===b)throw oa("isecfn",a);if(b.window===b)throw oa("isecwindow",a);if(b.children&&(b.nodeName||b.prop&&b.attr&&b.find))throw oa("isecdom",
a);if(b===Object)throw oa("isecobj",a);}return b}function cc(b){return b.constant}function Oa(b,a,c,d){Aa(b,d);a=a.split(".");for(var e,f=0;1<a.length;f++){e=na(a.shift(),d);var g=Aa(b[e],d);g||(g={},b[e]=g);b=g}e=na(a.shift(),d);Aa(b[e],d);return b[e]=c}function ad(b,a,c,d,e,f){na(b,f);na(a,f);na(c,f);na(d,f);na(e,f);return function(f,k){var h=k&&k.hasOwnProperty(b)?k:f;if(null==h)return h;h=h[b];if(!a)return h;if(null==h)return t;h=h[a];if(!c)return h;if(null==h)return t;h=h[c];if(!d)return h;if(null==
h)return t;h=h[d];return e?null==h?t:h=h[e]:h}}function bd(b,a,c){var d=cd[b];if(d)return d;var e=b.split("."),f=e.length;if(a.csp)d=6>f?ad(e[0],e[1],e[2],e[3],e[4],c):function(a,b){var d=0,g;do g=ad(e[d++],e[d++],e[d++],e[d++],e[d++],c)(a,b),b=t,a=g;while(d<f);return g};else{var g="";s(e,function(a,b){na(a,c);g+="if(s == null) return undefined;\ns="+(b?"s":'((l&&l.hasOwnProperty("'+a+'"))?l:s)')+"."+a+";\n"});g+="return s;";a=new Function("s","l",g);a.toString=da(g);d=a}d.sharedGetter=!0;d.assign=
function(a,c){return Oa(a,b,c,b)};return cd[b]=d}function dc(b){return A(b.valueOf)?b.valueOf():wf.call(b)}function Me(){var b=wa(),a={csp:!1};this.$get=["$filter","$sniffer",function(c,d){function e(a){var b=a;a.sharedGetter&&(b=function(b,c){return a(b,c)},b.literal=a.literal,b.constant=a.constant,b.assign=a.assign);return b}function f(a,b){for(var c=0,d=a.length;c<d;c++){var e=a[c];e.constant||(e.inputs?f(e.inputs,b):-1===b.indexOf(e)&&b.push(e))}return b}function g(a,b){return null==a||null==
b?a===b:"object"===typeof a&&(a=dc(a),"object"===typeof a)?!1:a===b||a!==a&&b!==b}function k(a,b,c,d){var e=d.$$inputs||(d.$$inputs=f(d.inputs,[])),h;if(1===e.length){var k=g,e=e[0];return a.$watch(function(a){var b=e(a);g(b,k)||(h=d(a),k=b&&dc(b));return h},b,c)}for(var l=[],m=0,p=e.length;m<p;m++)l[m]=g;return a.$watch(function(a){for(var b=!1,c=0,f=e.length;c<f;c++){var k=e[c](a);if(b||(b=!g(k,l[c])))l[c]=k&&dc(k)}b&&(h=d(a));return h},b,c)}function h(a,b,c,d){var e,f;return e=a.$watch(function(a){return d(a)},
function(a,c,d){f=a;A(b)&&b.apply(this,arguments);z(a)&&d.$$postDigest(function(){z(f)&&e()})},c)}function l(a,b,c,d){function e(a){var b=!0;s(a,function(a){z(a)||(b=!1)});return b}var f,g;return f=a.$watch(function(a){return d(a)},function(a,c,d){g=a;A(b)&&b.call(this,a,c,d);e(a)&&d.$$postDigest(function(){e(g)&&f()})},c)}function m(a,b,c,d){var e;return e=a.$watch(function(a){return d(a)},function(a,c,d){A(b)&&b.apply(this,arguments);e()},c)}function p(a,b){if(!b)return a;var c=function(c,d){var e=
a(c,d),f=b(e,c,d);return z(e)?f:e};a.$$watchDelegate&&a.$$watchDelegate!==k?c.$$watchDelegate=a.$$watchDelegate:b.$stateful||(c.$$watchDelegate=k,c.inputs=[a]);return c}a.csp=d.csp;return function(d,f){var g,O,B;switch(typeof d){case "string":return B=d=d.trim(),g=b[B],g||(":"===d.charAt(0)&&":"===d.charAt(1)&&(O=!0,d=d.substring(2)),g=new ec(a),g=(new cb(g,c,a)).parse(d),g.constant?g.$$watchDelegate=m:O?(g=e(g),g.$$watchDelegate=g.literal?l:h):g.inputs&&(g.$$watchDelegate=k),b[B]=g),p(g,f);case "function":return p(d,
f);default:return p(y,f)}}}]}function Oe(){this.$get=["$rootScope","$exceptionHandler",function(b,a){return dd(function(a){b.$evalAsync(a)},a)}]}function Pe(){this.$get=["$browser","$exceptionHandler",function(b,a){return dd(function(a){b.defer(a)},a)}]}function dd(b,a){function c(a,b,c){function d(b){return function(c){e||(e=!0,b.call(a,c))}}var e=!1;return[d(b),d(c)]}function d(){this.$$state={status:0}}function e(a,b){return function(c){b.call(a,c)}}function f(c){!c.processScheduled&&c.pending&&
(c.processScheduled=!0,b(function(){var b,d,e;e=c.pending;c.processScheduled=!1;c.pending=t;for(var f=0,g=e.length;f<g;++f){d=e[f][0];b=e[f][c.status];try{A(b)?d.resolve(b(c.value)):1===c.status?d.resolve(c.value):d.reject(c.value)}catch(h){d.reject(h),a(h)}}}))}function g(){this.promise=new d;this.resolve=e(this,this.resolve);this.reject=e(this,this.reject);this.notify=e(this,this.notify)}var k=w("$q",TypeError);d.prototype={then:function(a,b,c){var d=new g;this.$$state.pending=this.$$state.pending||
[];this.$$state.pending.push([d,a,b,c]);0<this.$$state.status&&f(this.$$state);return d.promise},"catch":function(a){return this.then(null,a)},"finally":function(a,b){return this.then(function(b){return l(b,!0,a)},function(b){return l(b,!1,a)},b)}};g.prototype={resolve:function(a){this.promise.$$state.status||(a===this.promise?this.$$reject(k("qcycle",a)):this.$$resolve(a))},$$resolve:function(b){var d,e;e=c(this,this.$$resolve,this.$$reject);try{if(P(b)||A(b))d=b&&b.then;A(d)?(this.promise.$$state.status=
-1,d.call(b,e[0],e[1],this.notify)):(this.promise.$$state.value=b,this.promise.$$state.status=1,f(this.promise.$$state))}catch(g){e[1](g),a(g)}},reject:function(a){this.promise.$$state.status||this.$$reject(a)},$$reject:function(a){this.promise.$$state.value=a;this.promise.$$state.status=2;f(this.promise.$$state)},notify:function(c){var d=this.promise.$$state.pending;0>=this.promise.$$state.status&&d&&d.length&&b(function(){for(var b,e,f=0,g=d.length;f<g;f++){e=d[f][0];b=d[f][3];try{e.notify(A(b)?
b(c):c)}catch(h){a(h)}}})}};var h=function(a,b){var c=new g;b?c.resolve(a):c.reject(a);return c.promise},l=function(a,b,c){var d=null;try{A(c)&&(d=c())}catch(e){return h(e,!1)}return d&&A(d.then)?d.then(function(){return h(a,b)},function(a){return h(a,!1)}):h(a,b)},m=function(a,b,c,d){var e=new g;e.resolve(a);return e.promise.then(b,c,d)},p=function n(a){if(!A(a))throw k("norslvr",a);if(!(this instanceof n))return new n(a);var b=new g;a(function(a){b.resolve(a)},function(a){b.reject(a)});return b.promise};
p.defer=function(){return new g};p.reject=function(a){var b=new g;b.reject(a);return b.promise};p.when=m;p.all=function(a){var b=new g,c=0,d=H(a)?[]:{};s(a,function(a,e){c++;m(a).then(function(a){d.hasOwnProperty(e)||(d[e]=a,--c||b.resolve(d))},function(a){d.hasOwnProperty(e)||b.reject(a)})});0===c&&b.resolve(d);return b.promise};return p}function Ye(){this.$get=["$window","$timeout",function(b,a){var c=b.requestAnimationFrame||b.webkitRequestAnimationFrame||b.mozRequestAnimationFrame,d=b.cancelAnimationFrame||
b.webkitCancelAnimationFrame||b.mozCancelAnimationFrame||b.webkitCancelRequestAnimationFrame,e=!!c,f=e?function(a){var b=c(a);return function(){d(b)}}:function(b){var c=a(b,16.66,!1);return function(){a.cancel(c)}};f.supported=e;return f}]}function Ne(){var b=10,a=w("$rootScope"),c=null,d=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$injector","$exceptionHandler","$parse","$browser",function(e,f,g,k){function h(){this.$id=++gb;this.$$phase=this.$parent=this.$$watchers=
this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this.$root=this;this.$$destroyed=!1;this.$$listeners={};this.$$listenerCount={};this.$$isolateBindings=null}function l(b){if(r.$$phase)throw a("inprog",r.$$phase);r.$$phase=b}function m(a,b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function p(){}function q(){for(;C.length;)try{C.shift()()}catch(a){f(a)}d=null}function n(){null===d&&(d=k.defer(function(){r.$apply(q)}))}
h.prototype={constructor:h,$new:function(a,b){function c(){d.$$destroyed=!0}var d;b=b||this;a?(d=new h,d.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=function(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$id=++gb;this.$$ChildScope=null},this.$$ChildScope.prototype=this),d=new this.$$ChildScope);d.$parent=b;d.$$prevSibling=b.$$childTail;b.$$childHead?(b.$$childTail.$$nextSibling=d,b.$$childTail=d):b.$$childHead=
b.$$childTail=d;(a||b!=this)&&d.$on("$destroy",c);return d},$watch:function(a,b,d){var e=g(a);if(e.$$watchDelegate)return e.$$watchDelegate(this,b,d,e);var f=this.$$watchers,h={fn:b,last:p,get:e,exp:a,eq:!!d};c=null;A(b)||(h.fn=y);f||(f=this.$$watchers=[]);f.unshift(h);return function(){Va(f,h);c=null}},$watchGroup:function(a,b){function c(){h=!1;k?(k=!1,b(e,e,g)):b(e,d,g)}var d=Array(a.length),e=Array(a.length),f=[],g=this,h=!1,k=!0;if(!a.length){var l=!0;g.$evalAsync(function(){l&&b(e,e,g)});return function(){l=
!1}}if(1===a.length)return this.$watch(a[0],function(a,c,f){e[0]=a;d[0]=c;b(e,a===c?e:d,f)});s(a,function(a,b){var k=g.$watch(a,function(a,f){e[b]=a;d[b]=f;h||(h=!0,g.$evalAsync(c))});f.push(k)});return function(){for(;f.length;)f.shift()()}},$watchCollection:function(a,b){function c(a){e=a;var b,d,g,h;if(P(e))if(Qa(e))for(f!==p&&(f=p,r=f.length=0,l++),a=e.length,r!==a&&(l++,f.length=r=a),b=0;b<a;b++)h=f[b],g=e[b],d=h!==h&&g!==g,d||h===g||(l++,f[b]=g);else{f!==q&&(f=q={},r=0,l++);a=0;for(b in e)e.hasOwnProperty(b)&&
(a++,g=e[b],h=f[b],b in f?(d=h!==h&&g!==g,d||h===g||(l++,f[b]=g)):(r++,f[b]=g,l++));if(r>a)for(b in l++,f)e.hasOwnProperty(b)||(r--,delete f[b])}else f!==e&&(f=e,l++);return l}c.$stateful=!0;var d=this,e,f,h,k=1<b.length,l=0,m=g(a,c),p=[],q={},n=!0,r=0;return this.$watch(m,function(){n?(n=!1,b(e,e,d)):b(e,h,d);if(k)if(P(e))if(Qa(e)){h=Array(e.length);for(var a=0;a<e.length;a++)h[a]=e[a]}else for(a in h={},e)Hb.call(e,a)&&(h[a]=e[a]);else h=e})},$digest:function(){var e,g,h,m,n,s,C=b,M,t=[],W,R,z;
l("$digest");k.$$checkUrlChange();this===r&&null!==d&&(k.defer.cancel(d),q());c=null;do{s=!1;for(M=this;O.length;){try{z=O.shift(),z.scope.$eval(z.expression)}catch(w){f(w)}c=null}a:do{if(m=M.$$watchers)for(n=m.length;n--;)try{if(e=m[n])if((g=e.get(M))!==(h=e.last)&&!(e.eq?la(g,h):"number"===typeof g&&"number"===typeof h&&isNaN(g)&&isNaN(h)))s=!0,c=e,e.last=e.eq?Ca(g,null):g,e.fn(g,h===p?g:h,M),5>C&&(W=4-C,t[W]||(t[W]=[]),R=A(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,R+="; newVal: "+ra(g)+
"; oldVal: "+ra(h),t[W].push(R));else if(e===c){s=!1;break a}}catch(v){f(v)}if(!(m=M.$$childHead||M!==this&&M.$$nextSibling))for(;M!==this&&!(m=M.$$nextSibling);)M=M.$parent}while(M=m);if((s||O.length)&&!C--)throw r.$$phase=null,a("infdig",b,ra(t));}while(s||O.length);for(r.$$phase=null;B.length;)try{B.shift()()}catch(y){f(y)}},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;if(this!==r){for(var b in this.$$listenerCount)m(this,this.$$listenerCount[b],
b);a.$$childHead==this&&(a.$$childHead=this.$$nextSibling);a.$$childTail==this&&(a.$$childTail=this.$$prevSibling);this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling);this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling);this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=y;this.$on=this.$watch=this.$watchGroup=function(){return y};this.$$listeners={};this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=
this.$root=this.$$watchers=null}}},$eval:function(a,b){return g(a)(this,b)},$evalAsync:function(a){r.$$phase||O.length||k.defer(function(){O.length&&r.$digest()});O.push({scope:this,expression:a})},$$postDigest:function(a){B.push(a)},$apply:function(a){try{return l("$apply"),this.$eval(a)}catch(b){f(b)}finally{r.$$phase=null;try{r.$digest()}catch(c){throw f(c),c;}}},$applyAsync:function(a){function b(){c.$eval(a)}var c=this;a&&C.push(b);n()},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=
c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||(d.$$listenerCount[a]=0),d.$$listenerCount[a]++;while(d=d.$parent);var e=this;return function(){var d=c.indexOf(b);-1!==d&&(c[d]=null,m(e,1,a))}},$emit:function(a,b){var c=[],d,e=this,g=!1,h={name:a,targetScope:e,stopPropagation:function(){g=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},k=ib([h],arguments,1),l,m;do{d=e.$$listeners[a]||c;h.currentScope=e;l=0;for(m=d.length;l<m;l++)if(d[l])try{d[l].apply(null,k)}catch(p){f(p)}else d.splice(l,
1),l--,m--;if(g)return h.currentScope=null,h;e=e.$parent}while(e);h.currentScope=null;return h},$broadcast:function(a,b){var c=this,d=this,e={name:a,targetScope:this,preventDefault:function(){e.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[a])return e;for(var g=ib([e],arguments,1),h,k;c=d;){e.currentScope=c;d=c.$$listeners[a]||[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,g)}catch(l){f(l)}else d.splice(h,1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&
c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}e.currentScope=null;return e}};var r=new h,O=r.$$asyncQueue=[],B=r.$$postDigestQueue=[],C=r.$$applyAsyncQueue=[];return r}]}function Qd(){var b=/^\s*(https?|ftp|mailto|tel|file):/,a=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(a){return z(a)?(b=a,this):b};this.imgSrcSanitizationWhitelist=function(b){return z(b)?(a=b,this):a};this.$get=function(){return function(c,d){var e=d?a:b,f;f=za(c).href;
return""===f||f.match(e)?c:"unsafe:"+f}}}function xf(b){if("self"===b)return b;if(J(b)){if(-1<b.indexOf("***"))throw Ba("iwcard",b);b=ed(b).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*");return new RegExp("^"+b+"$")}if(hb(b))return new RegExp("^"+b.source+"$");throw Ba("imatcher");}function fd(b){var a=[];z(b)&&s(b,function(b){a.push(xf(b))});return a}function Re(){this.SCE_CONTEXTS=ja;var b=["self"],a=[];this.resourceUrlWhitelist=function(a){arguments.length&&(b=fd(a));return b};this.resourceUrlBlacklist=
function(b){arguments.length&&(a=fd(b));return a};this.$get=["$injector",function(c){function d(a,b){return"self"===a?Wc(b):!!a.exec(b.href)}function e(a){var b=function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var f=function(a){throw Ba("unsafe");};c.has("$sanitize")&&(f=c.get("$sanitize"));var g=e(),k={};k[ja.HTML]=
e(g);k[ja.CSS]=e(g);k[ja.URL]=e(g);k[ja.JS]=e(g);k[ja.RESOURCE_URL]=e(k[ja.URL]);return{trustAs:function(a,b){var c=k.hasOwnProperty(a)?k[a]:null;if(!c)throw Ba("icontext",a,b);if(null===b||b===t||""===b)return b;if("string"!==typeof b)throw Ba("itype",a);return new c(b)},getTrusted:function(c,e){if(null===e||e===t||""===e)return e;var g=k.hasOwnProperty(c)?k[c]:null;if(g&&e instanceof g)return e.$$unwrapTrustedValue();if(c===ja.RESOURCE_URL){var g=za(e.toString()),p,q,n=!1;p=0;for(q=b.length;p<q;p++)if(d(b[p],
g)){n=!0;break}if(n)for(p=0,q=a.length;p<q;p++)if(d(a[p],g)){n=!1;break}if(n)return e;throw Ba("insecurl",e.toString());}if(c===ja.HTML)return f(e);throw Ba("unsafe");},valueOf:function(a){return a instanceof g?a.$$unwrapTrustedValue():a}}}]}function Qe(){var b=!0;this.enabled=function(a){arguments.length&&(b=!!a);return b};this.$get=["$parse","$sceDelegate",function(a,c){if(b&&8>Ha)throw Ba("iequirks");var d=qa(ja);d.isEnabled=function(){return b};d.trustAs=c.trustAs;d.getTrusted=c.getTrusted;d.valueOf=
c.valueOf;b||(d.trustAs=d.getTrusted=function(a,b){return b},d.valueOf=Sa);d.parseAs=function(b,c){var e=a(c);return e.literal&&e.constant?e:a(c,function(a){return d.getTrusted(b,a)})};var e=d.parseAs,f=d.getTrusted,g=d.trustAs;s(ja,function(a,b){var c=S(b);d[$a("parse_as_"+c)]=function(b){return e(a,b)};d[$a("get_trusted_"+c)]=function(b){return f(a,b)};d[$a("trust_as_"+c)]=function(b){return g(a,b)}});return d}]}function Se(){this.$get=["$window","$document",function(b,a){var c={},d=aa((/android (\d+)/.exec(S((b.navigator||
{}).userAgent))||[])[1]),e=/Boxee/i.test((b.navigator||{}).userAgent),f=a[0]||{},g,k=/^(Moz|webkit|ms)(?=[A-Z])/,h=f.body&&f.body.style,l=!1,m=!1;if(h){for(var p in h)if(l=k.exec(p)){g=l[0];g=g.substr(0,1).toUpperCase()+g.substr(1);break}g||(g="WebkitOpacity"in h&&"webkit");l=!!("transition"in h||g+"Transition"in h);m=!!("animation"in h||g+"Animation"in h);!d||l&&m||(l=J(f.body.style.webkitTransition),m=J(f.body.style.webkitAnimation))}return{history:!(!b.history||!b.history.pushState||4>d||e),hasEvent:function(a){if("input"==
a&&9==Ha)return!1;if(x(c[a])){var b=f.createElement("div");c[a]="on"+a in b}return c[a]},csp:Ya(),vendorPrefix:g,transitions:l,animations:m,android:d}}]}function Ue(){this.$get=["$templateCache","$http","$q",function(b,a,c){function d(e,f){d.totalPendingRequests++;var g=a.defaults&&a.defaults.transformResponse;if(H(g))for(var k=g,g=[],h=0;h<k.length;++h){var l=k[h];l!==Wb&&g.push(l)}else g===Wb&&(g=null);return a.get(e,{cache:b,transformResponse:g}).then(function(a){a=a.data;d.totalPendingRequests--;
b.put(e,a);return a},function(){d.totalPendingRequests--;if(!f)throw ia("tpload",e);return c.reject()})}d.totalPendingRequests=0;return d}]}function Ve(){this.$get=["$rootScope","$browser","$location",function(b,a,c){return{findBindings:function(a,b,c){a=a.getElementsByClassName("ng-binding");var g=[];s(a,function(a){var d=ta.element(a).data("$binding");d&&s(d,function(d){c?(new RegExp("(^|\\s)"+ed(b)+"(\\s|\\||$)")).test(d)&&g.push(a):-1!=d.indexOf(b)&&g.push(a)})});return g},findModels:function(a,
b,c){for(var g=["ng-","data-ng-","ng\\:"],k=0;k<g.length;++k){var h=a.querySelectorAll("["+g[k]+"model"+(c?"=":"*=")+'"'+b+'"]');if(h.length)return h}},getLocation:function(){return c.url()},setLocation:function(a){a!==c.url()&&(c.url(a),b.$digest())},whenStable:function(b){a.notifyWhenNoOutstandingRequests(b)}}}]}function We(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(b,a,c,d,e){function f(f,h,l){var m=z(l)&&!l,p=(m?d:c).defer(),q=p.promise;h=a.defer(function(){try{p.resolve(f())}catch(a){p.reject(a),
e(a)}finally{delete g[q.$$timeoutId]}m||b.$apply()},h);q.$$timeoutId=h;g[h]=p;return q}var g={};f.cancel=function(b){return b&&b.$$timeoutId in g?(g[b.$$timeoutId].reject("canceled"),delete g[b.$$timeoutId],a.defer.cancel(b.$$timeoutId)):!1};return f}]}function za(b,a){var c=b;Ha&&(Z.setAttribute("href",c),c=Z.href);Z.setAttribute("href",c);return{href:Z.href,protocol:Z.protocol?Z.protocol.replace(/:$/,""):"",host:Z.host,search:Z.search?Z.search.replace(/^\?/,""):"",hash:Z.hash?Z.hash.replace(/^#/,
""):"",hostname:Z.hostname,port:Z.port,pathname:"/"===Z.pathname.charAt(0)?Z.pathname:"/"+Z.pathname}}function Wc(b){b=J(b)?za(b):b;return b.protocol===gd.protocol&&b.host===gd.host}function Xe(){this.$get=da(N)}function Bc(b){function a(c,d){if(P(c)){var e={};s(c,function(b,c){e[c]=a(c,b)});return e}return b.factory(c+"Filter",d)}this.register=a;this.$get=["$injector",function(a){return function(b){return a.get(b+"Filter")}}];a("currency",hd);a("date",id);a("filter",yf);a("json",zf);a("limitTo",
Af);a("lowercase",Bf);a("number",jd);a("orderBy",kd);a("uppercase",Cf)}function yf(){return function(b,a,c){if(!H(b))return b;var d=typeof c,e=[];e.check=function(a,b){for(var c=0;c<e.length;c++)if(!e[c](a,b))return!1;return!0};"function"!==d&&(c="boolean"===d&&c?function(a,b){return ta.equals(a,b)}:function(a,b){if(a&&b&&"object"===typeof a&&"object"===typeof b){for(var d in a)if("$"!==d.charAt(0)&&Hb.call(a,d)&&c(a[d],b[d]))return!0;return!1}b=(""+b).toLowerCase();return-1<(""+a).toLowerCase().indexOf(b)});
var f=function(a,b){if("string"===typeof b&&"!"===b.charAt(0))return!f(a,b.substr(1));switch(typeof a){case "boolean":case "number":case "string":return c(a,b);case "object":switch(typeof b){case "object":return c(a,b);default:for(var d in a)if("$"!==d.charAt(0)&&f(a[d],b))return!0}return!1;case "array":for(d=0;d<a.length;d++)if(f(a[d],b))return!0;return!1;default:return!1}};switch(typeof a){case "boolean":case "number":case "string":a={$:a};case "object":for(var g in a)(function(b){"undefined"!==
typeof a[b]&&e.push(function(c){return f("$"==b?c:c&&c[b],a[b])})})(g);break;case "function":e.push(a);break;default:return b}d=[];for(g=0;g<b.length;g++){var k=b[g];e.check(k,g)&&d.push(k)}return d}}function hd(b){var a=b.NUMBER_FORMATS;return function(b,d,e){x(d)&&(d=a.CURRENCY_SYM);x(e)&&(e=2);return null==b?b:ld(b,a.PATTERNS[1],a.GROUP_SEP,a.DECIMAL_SEP,e).replace(/\u00A4/g,d)}}function jd(b){var a=b.NUMBER_FORMATS;return function(b,d){return null==b?b:ld(b,a.PATTERNS[0],a.GROUP_SEP,a.DECIMAL_SEP,
d)}}function ld(b,a,c,d,e){if(!isFinite(b)||P(b))return"";var f=0>b;b=Math.abs(b);var g=b+"",k="",h=[],l=!1;if(-1!==g.indexOf("e")){var m=g.match(/([\d\.]+)e(-?)(\d+)/);m&&"-"==m[2]&&m[3]>e+1?(g="0",b=0):(k=g,l=!0)}if(l)0<e&&-1<b&&1>b&&(k=b.toFixed(e));else{g=(g.split(md)[1]||"").length;x(e)&&(e=Math.min(Math.max(a.minFrac,g),a.maxFrac));b=+(Math.round(+(b.toString()+"e"+e)).toString()+"e"+-e);0===b&&(f=!1);b=(""+b).split(md);g=b[0];b=b[1]||"";var m=0,p=a.lgSize,q=a.gSize;if(g.length>=p+q)for(m=g.length-
p,l=0;l<m;l++)0===(m-l)%q&&0!==l&&(k+=c),k+=g.charAt(l);for(l=m;l<g.length;l++)0===(g.length-l)%p&&0!==l&&(k+=c),k+=g.charAt(l);for(;b.length<e;)b+="0";e&&"0"!==e&&(k+=d+b.substr(0,e))}h.push(f?a.negPre:a.posPre);h.push(k);h.push(f?a.negSuf:a.posSuf);return h.join("")}function Ab(b,a,c){var d="";0>b&&(d="-",b=-b);for(b=""+b;b.length<a;)b="0"+b;c&&(b=b.substr(b.length-a));return d+b}function $(b,a,c,d){c=c||0;return function(e){e=e["get"+b]();if(0<c||e>-c)e+=c;0===e&&-12==c&&(e=12);return Ab(e,a,d)}}
function Bb(b,a){return function(c,d){var e=c["get"+b](),f=ob(a?"SHORT"+b:b);return d[f][e]}}function nd(b){var a=(new Date(b,0,1)).getDay();return new Date(b,0,(4>=a?5:12)-a)}function od(b){return function(a){var c=nd(a.getFullYear());a=+new Date(a.getFullYear(),a.getMonth(),a.getDate()+(4-a.getDay()))-+c;a=1+Math.round(a/6048E5);return Ab(a,b)}}function id(b){function a(a){var b;if(b=a.match(c)){a=new Date(0);var f=0,g=0,k=b[8]?a.setUTCFullYear:a.setFullYear,h=b[8]?a.setUTCHours:a.setHours;b[9]&&
(f=aa(b[9]+b[10]),g=aa(b[9]+b[11]));k.call(a,aa(b[1]),aa(b[2])-1,aa(b[3]));f=aa(b[4]||0)-f;g=aa(b[5]||0)-g;k=aa(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||0)));h.call(a,f,g,k,b)}return a}var c=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,e,f){var g="",k=[],h,l;e=e||"mediumDate";e=b.DATETIME_FORMATS[e]||e;J(c)&&(c=Df.test(c)?aa(c):a(c));X(c)&&(c=new Date(c));if(!ea(c))return c;for(;e;)(l=Ef.exec(e))?(k=ib(k,l,1),e=k.pop()):
(k.push(e),e=null);f&&"UTC"===f&&(c=new Date(c.getTime()),c.setMinutes(c.getMinutes()+c.getTimezoneOffset()));s(k,function(a){h=Ff[a];g+=h?h(c,b.DATETIME_FORMATS):a.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return g}}function zf(){return function(b){return ra(b,!0)}}function Af(){return function(b,a){X(b)&&(b=b.toString());if(!H(b)&&!J(b))return b;a=Infinity===Math.abs(Number(a))?Number(a):aa(a);if(J(b))return a?0<=a?b.slice(0,a):b.slice(a,b.length):"";var c=[],d,e;a>b.length?a=b.length:a<-b.length&&
(a=-b.length);0<a?(d=0,e=a):(d=b.length+a,e=b.length);for(;d<e;d++)c.push(b[d]);return c}}function kd(b){return function(a,c,d){function e(a,b){return b?function(b,c){return a(c,b)}:a}function f(a,b){var c=typeof a,d=typeof b;return c==d?(ea(a)&&ea(b)&&(a=a.valueOf(),b=b.valueOf()),"string"==c&&(a=a.toLowerCase(),b=b.toLowerCase()),a===b?0:a<b?-1:1):c<d?-1:1}if(!Qa(a))return a;c=H(c)?c:[c];0===c.length&&(c=["+"]);c=c.map(function(a){var c=!1,d=a||Sa;if(J(a)){if("+"==a.charAt(0)||"-"==a.charAt(0))c=
"-"==a.charAt(0),a=a.substring(1);if(""===a)return e(function(a,b){return f(a,b)},c);d=b(a);if(d.constant){var g=d();return e(function(a,b){return f(a[g],b[g])},c)}}return e(function(a,b){return f(d(a),d(b))},c)});for(var g=[],k=0;k<a.length;k++)g.push(a[k]);return g.sort(e(function(a,b){for(var d=0;d<c.length;d++){var e=c[d](a,b);if(0!==e)return e}return 0},d))}}function Ia(b){A(b)&&(b={link:b});b.restrict=b.restrict||"AC";return da(b)}function pd(b,a,c,d,e){var f=this,g=[],k=f.$$parentForm=b.parent().controller("form")||
Cb;f.$error={};f.$$success={};f.$pending=t;f.$name=e(a.name||a.ngForm||"")(c);f.$dirty=!1;f.$pristine=!0;f.$valid=!0;f.$invalid=!1;f.$submitted=!1;k.$addControl(f);f.$rollbackViewValue=function(){s(g,function(a){a.$rollbackViewValue()})};f.$commitViewValue=function(){s(g,function(a){a.$commitViewValue()})};f.$addControl=function(a){La(a.$name,"input");g.push(a);a.$name&&(f[a.$name]=a)};f.$$renameControl=function(a,b){var c=a.$name;f[c]===a&&delete f[c];f[b]=a;a.$name=b};f.$removeControl=function(a){a.$name&&
f[a.$name]===a&&delete f[a.$name];s(f.$pending,function(b,c){f.$setValidity(c,null,a)});s(f.$error,function(b,c){f.$setValidity(c,null,a)});Va(g,a)};qd({ctrl:this,$element:b,set:function(a,b,c){var d=a[b];d?-1===d.indexOf(c)&&d.push(c):a[b]=[c]},unset:function(a,b,c){var d=a[b];d&&(Va(d,c),0===d.length&&delete a[b])},parentForm:k,$animate:d});f.$setDirty=function(){d.removeClass(b,Pa);d.addClass(b,Db);f.$dirty=!0;f.$pristine=!1;k.$setDirty()};f.$setPristine=function(){d.setClass(b,Pa,Db+" ng-submitted");
f.$dirty=!1;f.$pristine=!0;f.$submitted=!1;s(g,function(a){a.$setPristine()})};f.$setUntouched=function(){s(g,function(a){a.$setUntouched()})};f.$setSubmitted=function(){d.addClass(b,"ng-submitted");f.$submitted=!0;k.$setSubmitted()}}function fc(b){b.$formatters.push(function(a){return b.$isEmpty(a)?a:a.toString()})}function db(b,a,c,d,e,f){var g=a[0].placeholder,k={},h=S(a[0].type);if(!e.android){var l=!1;a.on("compositionstart",function(a){l=!0});a.on("compositionend",function(){l=!1;m()})}var m=
function(b){if(!l){var e=a.val(),f=b&&b.type;Ha&&"input"===(b||k).type&&a[0].placeholder!==g?g=a[0].placeholder:("password"===h||c.ngTrim&&"false"===c.ngTrim||(e=T(e)),(d.$viewValue!==e||""===e&&d.$$hasNativeValidators)&&d.$setViewValue(e,f))}};if(e.hasEvent("input"))a.on("input",m);else{var p,q=function(a){p||(p=f.defer(function(){m(a);p=null}))};a.on("keydown",function(a){var b=a.keyCode;91===b||15<b&&19>b||37<=b&&40>=b||q(a)});if(e.hasEvent("paste"))a.on("paste cut",q)}a.on("change",m);d.$render=
function(){a.val(d.$isEmpty(d.$modelValue)?"":d.$viewValue)}}function Eb(b,a){return function(c,d){var e,f;if(ea(c))return c;if(J(c)){'"'==c.charAt(0)&&'"'==c.charAt(c.length-1)&&(c=c.substring(1,c.length-1));if(Gf.test(c))return new Date(c);b.lastIndex=0;if(e=b.exec(c))return e.shift(),f=d?{yyyy:d.getFullYear(),MM:d.getMonth()+1,dd:d.getDate(),HH:d.getHours(),mm:d.getMinutes(),ss:d.getSeconds(),sss:d.getMilliseconds()/1E3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},s(e,function(b,c){c<a.length&&
(f[a[c]]=+b)}),new Date(f.yyyy,f.MM-1,f.dd,f.HH,f.mm,f.ss||0,1E3*f.sss||0)}return NaN}}function eb(b,a,c,d){return function(e,f,g,k,h,l,m){function p(a){return z(a)?ea(a)?a:c(a):t}rd(e,f,g,k);db(e,f,g,k,h,l);var q=k&&k.$options&&k.$options.timezone,n;k.$$parserName=b;k.$parsers.push(function(b){return k.$isEmpty(b)?null:a.test(b)?(b=c(b,n),"UTC"===q&&b.setMinutes(b.getMinutes()-b.getTimezoneOffset()),b):t});k.$formatters.push(function(a){if(k.$isEmpty(a))n=null;else{if(!ea(a))throw Fb("datefmt",a);
if((n=a)&&"UTC"===q){var b=6E4*n.getTimezoneOffset();n=new Date(n.getTime()+b)}return m("date")(a,d,q)}return""});if(z(g.min)||g.ngMin){var r;k.$validators.min=function(a){return k.$isEmpty(a)||x(r)||c(a)>=r};g.$observe("min",function(a){r=p(a);k.$validate()})}if(z(g.max)||g.ngMax){var s;k.$validators.max=function(a){return k.$isEmpty(a)||x(s)||c(a)<=s};g.$observe("max",function(a){s=p(a);k.$validate()})}k.$isEmpty=function(a){return!a||a.getTime&&a.getTime()!==a.getTime()}}}function rd(b,a,c,d){(d.$$hasNativeValidators=
P(a[0].validity))&&d.$parsers.push(function(b){var c=a.prop("validity")||{};return c.badInput&&!c.typeMismatch?t:b})}function sd(b,a,c,d,e){if(z(d)){b=b(d);if(!b.constant)throw w("ngModel")("constexpr",c,d);return b(a)}return e}function qd(b){function a(a,b){b&&!f[a]?(l.addClass(e,a),f[a]=!0):!b&&f[a]&&(l.removeClass(e,a),f[a]=!1)}function c(b,c){b=b?"-"+Kb(b,"-"):"";a(fb+b,!0===c);a(td+b,!1===c)}var d=b.ctrl,e=b.$element,f={},g=b.set,k=b.unset,h=b.parentForm,l=b.$animate;f[td]=!(f[fb]=e.hasClass(fb));
d.$setValidity=function(b,e,f){e===t?(d.$pending||(d.$pending={}),g(d.$pending,b,f)):(d.$pending&&k(d.$pending,b,f),ud(d.$pending)&&(d.$pending=t));Ua(e)?e?(k(d.$error,b,f),g(d.$$success,b,f)):(g(d.$error,b,f),k(d.$$success,b,f)):(k(d.$error,b,f),k(d.$$success,b,f));d.$pending?(a(vd,!0),d.$valid=d.$invalid=t,c("",null)):(a(vd,!1),d.$valid=ud(d.$error),d.$invalid=!d.$valid,c("",d.$valid));e=d.$pending&&d.$pending[b]?t:d.$error[b]?!1:d.$$success[b]?!0:null;c(b,e);h.$setValidity(b,e,d)}}function ud(b){if(b)for(var a in b)return!1;
return!0}function gc(b,a){b="ngClass"+b;return["$animate",function(c){function d(a,b){var c=[],d=0;a:for(;d<a.length;d++){for(var e=a[d],m=0;m<b.length;m++)if(e==b[m])continue a;c.push(e)}return c}function e(a){if(!H(a)){if(J(a))return a.split(" ");if(P(a)){var b=[];s(a,function(a,c){a&&(b=b.concat(c.split(" ")))});return b}}return a}return{restrict:"AC",link:function(f,g,k){function h(a,b){var c=g.data("$classCounts")||{},d=[];s(a,function(a){if(0<b||c[a])c[a]=(c[a]||0)+b,c[a]===+(0<b)&&d.push(a)});
g.data("$classCounts",c);return d.join(" ")}function l(b){if(!0===a||f.$index%2===a){var l=e(b||[]);if(!m){var n=h(l,1);k.$addClass(n)}else if(!la(b,m)){var r=e(m),n=d(l,r),l=d(r,l),n=h(n,1),l=h(l,-1);n&&n.length&&c.addClass(g,n);l&&l.length&&c.removeClass(g,l)}}m=qa(b)}var m;f.$watch(k[b],l,!0);k.$observe("class",function(a){l(f.$eval(k[b]))});"ngClass"!==b&&f.$watch("$index",function(c,d){var g=c&1;if(g!==(d&1)){var l=e(f.$eval(k[b]));g===a?(g=h(l,1),k.$addClass(g)):(g=h(l,-1),k.$removeClass(g))}})}}}]}
var Hf=/^\/(.+)\/([a-z]*)$/,S=function(b){return J(b)?b.toLowerCase():b},Hb=Object.prototype.hasOwnProperty,ob=function(b){return J(b)?b.toUpperCase():b},Ha,v,ma,Xa=[].slice,pf=[].splice,If=[].push,Ja=Object.prototype.toString,Wa=w("ng"),ta=N.angular||(N.angular={}),Za,gb=0;Ha=U.documentMode;y.$inject=[];Sa.$inject=[];var H=Array.isArray,T=function(b){return J(b)?b.trim():b},ed=function(b){return b.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Ya=function(){if(z(Ya.isActive_))return Ya.isActive_;
var b=!(!U.querySelector("[ng-csp]")&&!U.querySelector("[data-ng-csp]"));if(!b)try{new Function("")}catch(a){b=!0}return Ya.isActive_=b},lb=["ng-","data-ng-","ng:","x-ng-"],Kd=/[A-Z]/g,sc=!1,Lb,ka=1,jb=3,Od={full:"1.3.1",major:1,minor:3,dot:1,codeName:"spectral-lobster"};Q.expando="ng339";var tb=Q.cache={},ef=1;Q._data=function(b){return this.cache[b[this.expando]]||{}};var $e=/([\:\-\_]+(.))/g,af=/^moz([A-Z])/,Jf={mouseleave:"mouseout",mouseenter:"mouseover"},Ob=w("jqLite"),df=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,
Nb=/<|&#?\w+;/,bf=/<([\w:]+)/,cf=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ha={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ha.optgroup=ha.option;ha.tbody=ha.tfoot=ha.colgroup=ha.caption=ha.thead;ha.th=ha.td;var Ka=Q.prototype={ready:function(b){function a(){c||(c=
!0,b())}var c=!1;"complete"===U.readyState?setTimeout(a):(this.on("DOMContentLoaded",a),Q(N).on("load",a))},toString:function(){var b=[];s(this,function(a){b.push(""+a)});return"["+b.join(", ")+"]"},eq:function(b){return 0<=b?v(this[b]):v(this[this.length+b])},length:0,push:If,sort:[].sort,splice:[].splice},vb={};s("multiple selected checked disabled readOnly required open".split(" "),function(b){vb[S(b)]=b});var Kc={};s("input select option textarea button form details".split(" "),function(b){Kc[b]=
!0});var Lc={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};s({data:Qb,removeData:rb},function(b,a){Q[a]=b});s({data:Qb,inheritedData:ub,scope:function(b){return v.data(b,"$scope")||ub(b.parentNode||b,["$isolateScope","$scope"])},isolateScope:function(b){return v.data(b,"$isolateScope")||v.data(b,"$isolateScopeNoTemplate")},controller:Gc,injector:function(b){return ub(b,"$injector")},removeAttr:function(b,a){b.removeAttribute(a)},hasClass:Rb,css:function(b,
a,c){a=$a(a);if(z(c))b.style[a]=c;else return b.style[a]},attr:function(b,a,c){var d=S(a);if(vb[d])if(z(c))c?(b[a]=!0,b.setAttribute(a,d)):(b[a]=!1,b.removeAttribute(d));else return b[a]||(b.attributes.getNamedItem(a)||y).specified?d:t;else if(z(c))b.setAttribute(a,c);else if(b.getAttribute)return b=b.getAttribute(a,2),null===b?t:b},prop:function(b,a,c){if(z(c))b[a]=c;else return b[a]},text:function(){function b(a,b){if(x(b)){var d=a.nodeType;return d===ka||d===jb?a.textContent:""}a.textContent=b}
b.$dv="";return b}(),val:function(b,a){if(x(a)){if(b.multiple&&"select"===pa(b)){var c=[];s(b.options,function(a){a.selected&&c.push(a.value||a.text)});return 0===c.length?null:c}return b.value}b.value=a},html:function(b,a){if(x(a))return b.innerHTML;qb(b,!0);b.innerHTML=a},empty:Hc},function(b,a){Q.prototype[a]=function(a,d){var e,f,g=this.length;if(b!==Hc&&(2==b.length&&b!==Rb&&b!==Gc?a:d)===t){if(P(a)){for(e=0;e<g;e++)if(b===Qb)b(this[e],a);else for(f in a)b(this[e],f,a[f]);return this}e=b.$dv;
g=e===t?Math.min(g,1):g;for(f=0;f<g;f++){var k=b(this[f],a,d);e=e?e+k:k}return e}for(e=0;e<g;e++)b(this[e],a,d);return this}});s({removeData:rb,on:function a(c,d,e,f){if(z(f))throw Ob("onargs");if(Cc(c)){var g=sb(c,!0);f=g.events;var k=g.handle;k||(k=g.handle=hf(c,f));for(var g=0<=d.indexOf(" ")?d.split(" "):[d],h=g.length;h--;){d=g[h];var l=f[d];l||(f[d]=[],"mouseenter"===d||"mouseleave"===d?a(c,Jf[d],function(a){var c=a.relatedTarget;c&&(c===this||this.contains(c))||k(a,d)}):"$destroy"!==d&&c.addEventListener(d,
k,!1),l=f[d]);l.push(e)}}},off:Fc,one:function(a,c,d){a=v(a);a.on(c,function f(){a.off(c,d);a.off(c,f)});a.on(c,d)},replaceWith:function(a,c){var d,e=a.parentNode;qb(a);s(new Q(c),function(c){d?e.insertBefore(c,d.nextSibling):e.replaceChild(c,a);d=c})},children:function(a){var c=[];s(a.childNodes,function(a){a.nodeType===ka&&c.push(a)});return c},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,c){var d=a.nodeType;if(d===ka||11===d){c=new Q(c);for(var d=0,e=c.length;d<
e;d++)a.appendChild(c[d])}},prepend:function(a,c){if(a.nodeType===ka){var d=a.firstChild;s(new Q(c),function(c){a.insertBefore(c,d)})}},wrap:function(a,c){c=v(c).eq(0).clone()[0];var d=a.parentNode;d&&d.replaceChild(c,a);c.appendChild(a)},remove:Ic,detach:function(a){Ic(a,!0)},after:function(a,c){var d=a,e=a.parentNode;c=new Q(c);for(var f=0,g=c.length;f<g;f++){var k=c[f];e.insertBefore(k,d.nextSibling);d=k}},addClass:Tb,removeClass:Sb,toggleClass:function(a,c,d){c&&s(c.split(" "),function(c){var f=
d;x(f)&&(f=!Rb(a,c));(f?Tb:Sb)(a,c)})},parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},next:function(a){return a.nextElementSibling},find:function(a,c){return a.getElementsByTagName?a.getElementsByTagName(c):[]},clone:Pb,triggerHandler:function(a,c,d){var e,f,g=c.type||c,k=sb(a);if(k=(k=k&&k.events)&&k[g])e={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=
!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:y,type:g,target:a},c.type&&(e=F(e,c)),c=qa(k),f=d?[e].concat(d):[e],s(c,function(c){e.isImmediatePropagationStopped()||c.apply(a,f)})}},function(a,c){Q.prototype[c]=function(c,e,f){for(var g,k=0,h=this.length;k<h;k++)x(g)?(g=a(this[k],c,e,f),z(g)&&(g=v(g))):Ec(g,a(this[k],c,e,f));return z(g)?g:this};Q.prototype.bind=Q.prototype.on;Q.prototype.unbind=Q.prototype.off});ab.prototype={put:function(a,
c){this[Ma(a,this.nextUid)]=c},get:function(a){return this[Ma(a,this.nextUid)]},remove:function(a){var c=this[a=Ma(a,this.nextUid)];delete this[a];return c}};var Nc=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,kf=/,/,lf=/^\s*(_?)(\S+?)\1\s*$/,Mc=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,Ea=w("$injector");Jb.$$annotate=Ub;var Kf=w("$animate"),Ae=["$provide",function(a){this.$$selectors={};this.register=function(c,d){var e=c+"-animation";if(c&&"."!=c.charAt(0))throw Kf("notcsel",c);this.$$selectors[c.substr(1)]=e;
a.factory(e,d)};this.classNameFilter=function(a){1===arguments.length&&(this.$$classNameFilter=a instanceof RegExp?a:null);return this.$$classNameFilter};this.$get=["$$q","$$asyncCallback","$rootScope",function(a,d,e){function f(d){var f,g=a.defer();g.promise.$$cancelFn=function(){f&&f()};e.$$postDigest(function(){f=d(function(){g.resolve()})});return g.promise}function g(a,c){var d=[],e=[],f=wa();s((a.attr("class")||"").split(/\s+/),function(a){f[a]=!0});s(c,function(a,c){var g=f[c];!1===a&&g?e.push(c):
!0!==a||g||d.push(c)});return 0<d.length+e.length&&[d.length?d:null,e.length?e:null]}function k(a,c,d){for(var e=0,f=c.length;e<f;++e)a[c[e]]=d}function h(){m||(m=a.defer(),d(function(){m.resolve();m=null}));return m.promise}function l(a,c){if(ta.isObject(c)){var d=F(c.from||{},c.to||{});a.css(d)}}var m;return{animate:function(a,c,d){l(a,{from:c,to:d});return h()},enter:function(a,c,d,e){l(a,e);d?d.after(a):c.prepend(a);return h()},leave:function(a,c){a.remove();return h()},move:function(a,c,d,e){return this.enter(a,
c,d,e)},addClass:function(a,c,d){return this.setClass(a,c,[],d)},$$addClassImmediately:function(a,c,d){a=v(a);c=J(c)?c:H(c)?c.join(" "):"";s(a,function(a){Tb(a,c)});l(a,d);return h()},removeClass:function(a,c,d){return this.setClass(a,[],c,d)},$$removeClassImmediately:function(a,c,d){a=v(a);c=J(c)?c:H(c)?c.join(" "):"";s(a,function(a){Sb(a,c)});l(a,d);return h()},setClass:function(a,c,d,e){var h=this,l=!1;a=v(a);var m=a.data("$$animateClasses");m?e&&m.options&&(m.options=ta.extend(m.options||{},e)):
(m={classes:{},options:e},l=!0);e=m.classes;c=H(c)?c:c.split(" ");d=H(d)?d:d.split(" ");k(e,c,!0);k(e,d,!1);l&&(m.promise=f(function(c){var d=a.data("$$animateClasses");a.removeData("$$animateClasses");if(d){var e=g(a,d.classes);e&&h.$$setClassImmediately(a,e[0],e[1],d.options)}c()}),a.data("$$animateClasses",m));return m.promise},$$setClassImmediately:function(a,c,d,e){c&&this.$$addClassImmediately(a,c);d&&this.$$removeClassImmediately(a,d);l(a,e);return h()},enabled:y,cancel:y}}]}],ia=w("$compile");
uc.$inject=["$provide","$$sanitizeUriProvider"];var of=/^((?:x|data)[\:\-_])/i,Sc="application/json",Xb={"Content-Type":Sc+";charset=utf-8"},rf=/^\s*(\[|\{[^\{])/,sf=/[\}\]]\s*$/,qf=/^\)\]\}',?\n/,Yb=w("$interpolate"),Lf=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,vf={http:80,https:443,ftp:21},bb=w("$location"),Mf={$$html5:!1,$$replace:!1,absUrl:zb("$$absUrl"),url:function(a){if(x(a))return this.$$url;a=Lf.exec(a);a[1]&&this.path(decodeURIComponent(a[1]));(a[2]||a[1])&&this.search(a[3]||"");this.hash(a[5]||
"");return this},protocol:zb("$$protocol"),host:zb("$$host"),port:zb("$$port"),path:$c("$$path",function(a){a=null!==a?a.toString():"";return"/"==a.charAt(0)?a:"/"+a}),search:function(a,c){switch(arguments.length){case 0:return this.$$search;case 1:if(J(a)||X(a))a=a.toString(),this.$$search=qc(a);else if(P(a))a=Ca(a,{}),s(a,function(c,e){null==c&&delete a[e]}),this.$$search=a;else throw bb("isrcharg");break;default:x(c)||null===c?delete this.$$search[a]:this.$$search[a]=c}this.$$compose();return this},
hash:$c("$$hash",function(a){return null!==a?a.toString():""}),replace:function(){this.$$replace=!0;return this}};s([Zc,bc,ac],function(a){a.prototype=Object.create(Mf);a.prototype.state=function(c){if(!arguments.length)return this.$$state;if(a!==ac||!this.$$html5)throw bb("nostate");this.$$state=x(c)?null:c;return this}});var oa=w("$parse"),Nf=Function.prototype.call,Of=Function.prototype.apply,Pf=Function.prototype.bind,Gb=wa();s({"null":function(){return null},"true":function(){return!0},"false":function(){return!1},
undefined:function(){}},function(a,c){a.constant=a.literal=a.sharedGetter=!0;Gb[c]=a});Gb["this"]=function(a){return a};Gb["this"].sharedGetter=!0;var hc=F(wa(),{"+":function(a,c,d,e){d=d(a,c);e=e(a,c);return z(d)?z(e)?d+e:d:z(e)?e:t},"-":function(a,c,d,e){d=d(a,c);e=e(a,c);return(z(d)?d:0)-(z(e)?e:0)},"*":function(a,c,d,e){return d(a,c)*e(a,c)},"/":function(a,c,d,e){return d(a,c)/e(a,c)},"%":function(a,c,d,e){return d(a,c)%e(a,c)},"===":function(a,c,d,e){return d(a,c)===e(a,c)},"!==":function(a,
c,d,e){return d(a,c)!==e(a,c)},"==":function(a,c,d,e){return d(a,c)==e(a,c)},"!=":function(a,c,d,e){return d(a,c)!=e(a,c)},"<":function(a,c,d,e){return d(a,c)<e(a,c)},">":function(a,c,d,e){return d(a,c)>e(a,c)},"<=":function(a,c,d,e){return d(a,c)<=e(a,c)},">=":function(a,c,d,e){return d(a,c)>=e(a,c)},"&&":function(a,c,d,e){return d(a,c)&&e(a,c)},"||":function(a,c,d,e){return d(a,c)||e(a,c)},"!":function(a,c,d){return!d(a,c)},"=":!0,"|":!0}),Qf={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},
ec=function(a){this.options=a};ec.prototype={constructor:ec,lex:function(a){this.text=a;this.index=0;this.ch=t;for(this.tokens=[];this.index<this.text.length;)if(this.ch=this.text.charAt(this.index),this.is("\"'"))this.readString(this.ch);else if(this.isNumber(this.ch)||this.is(".")&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(this.ch))this.readIdent();else if(this.is("(){}[].,;:?"))this.tokens.push({index:this.index,text:this.ch}),this.index++;else if(this.isWhitespace(this.ch))this.index++;
else{a=this.ch+this.peek();var c=a+this.peek(2),d=hc[this.ch],e=hc[a],f=hc[c];f?(this.tokens.push({index:this.index,text:c,fn:f}),this.index+=3):e?(this.tokens.push({index:this.index,text:a,fn:e}),this.index+=2):d?(this.tokens.push({index:this.index,text:this.ch,fn:d}),this.index+=1):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(a){return-1!==a.indexOf(this.ch)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+
a):!1},isNumber:function(a){return"0"<=a&&"9">=a},isWhitespace:function(a){return" "===a||"\r"===a||"\t"===a||"\n"===a||"\v"===a||"\u00a0"===a},isIdent:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},throwError:function(a,c,d){d=d||this.index;c=z(c)?"s "+c+"-"+this.index+" ["+this.text.substring(c,d)+"]":" "+d;throw oa("lexerr",a,c,this.text);},readNumber:function(){for(var a="",c=this.index;this.index<this.text.length;){var d=
S(this.text.charAt(this.index));if("."==d||this.isNumber(d))a+=d;else{var e=this.peek();if("e"==d&&this.isExpOperator(e))a+=d;else if(this.isExpOperator(d)&&e&&this.isNumber(e)&&"e"==a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||e&&this.isNumber(e)||"e"!=a.charAt(a.length-1))break;else this.throwError("Invalid exponent")}this.index++}a*=1;this.tokens.push({index:c,text:a,constant:!0,fn:function(){return a}})},readIdent:function(){for(var a=this.text,c="",d=this.index,e,f,g,k;this.index<
this.text.length;){k=this.text.charAt(this.index);if("."===k||this.isIdent(k)||this.isNumber(k))"."===k&&(e=this.index),c+=k;else break;this.index++}e&&"."===c[c.length-1]&&(this.index--,c=c.slice(0,-1),e=c.lastIndexOf("."),-1===e&&(e=t));if(e)for(f=this.index;f<this.text.length;){k=this.text.charAt(f);if("("===k){g=c.substr(e-d+1);c=c.substr(0,e-d);this.index=f;break}if(this.isWhitespace(k))f++;else break}this.tokens.push({index:d,text:c,fn:Gb[c]||bd(c,this.options,a)});g&&(this.tokens.push({index:e,
text:"."}),this.tokens.push({index:e+1,text:g}))},readString:function(a){var c=this.index;this.index++;for(var d="",e=a,f=!1;this.index<this.text.length;){var g=this.text.charAt(this.index),e=e+g;if(f)"u"===g?(f=this.text.substring(this.index+1,this.index+5),f.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+f+"]"),this.index+=4,d+=String.fromCharCode(parseInt(f,16))):d+=Qf[g]||g,f=!1;else if("\\"===g)f=!0;else{if(g===a){this.index++;this.tokens.push({index:c,text:e,string:d,constant:!0,
fn:function(){return d}});return}d+=g}this.index++}this.throwError("Unterminated quote",c)}};var cb=function(a,c,d){this.lexer=a;this.$filter=c;this.options=d};cb.ZERO=F(function(){return 0},{sharedGetter:!0,constant:!0});cb.prototype={constructor:cb,parse:function(a){this.text=a;this.tokens=this.lexer.lex(a);a=this.statements();0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]);a.literal=!!a.literal;a.constant=!!a.constant;return a},primary:function(){var a;if(this.expect("("))a=
this.filterChain(),this.consume(")");else if(this.expect("["))a=this.arrayDeclaration();else if(this.expect("{"))a=this.object();else{var c=this.expect();(a=c.fn)||this.throwError("not a primary expression",c);c.constant&&(a.constant=!0,a.literal=!0)}for(var d;c=this.expect("(","[",".");)"("===c.text?(a=this.functionCall(a,d),d=null):"["===c.text?(d=a,a=this.objectIndex(a)):"."===c.text?(d=a,a=this.fieldAccess(a)):this.throwError("IMPOSSIBLE");return a},throwError:function(a,c){throw oa("syntax",
c.text,a,c.index+1,this.text,this.text.substring(c.index));},peekToken:function(){if(0===this.tokens.length)throw oa("ueoe",this.text);return this.tokens[0]},peek:function(a,c,d,e){if(0<this.tokens.length){var f=this.tokens[0],g=f.text;if(g===a||g===c||g===d||g===e||!(a||c||d||e))return f}return!1},expect:function(a,c,d,e){return(a=this.peek(a,c,d,e))?(this.tokens.shift(),a):!1},consume:function(a){this.expect(a)||this.throwError("is unexpected, expecting ["+a+"]",this.peek())},unaryFn:function(a,
c){return F(function(d,e){return a(d,e,c)},{constant:c.constant,inputs:[c]})},binaryFn:function(a,c,d,e){return F(function(e,g){return c(e,g,a,d)},{constant:a.constant&&d.constant,inputs:!e&&[a,d]})},statements:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.filterChain()),!this.expect(";"))return 1===a.length?a[0]:function(c,d){for(var e,f=0,g=a.length;f<g;f++)e=a[f](c,d);return e}},filterChain:function(){for(var a=this.expression();this.expect("|");)a=
this.filter(a);return a},filter:function(a){var c=this.expect(),d=this.$filter(c.text),e,f;if(this.peek(":"))for(e=[],f=[];this.expect(":");)e.push(this.expression());c=[a].concat(e||[]);return F(function(c,k){var h=a(c,k);if(f){f[0]=h;for(h=e.length;h--;)f[h+1]=e[h](c,k);return d.apply(t,f)}return d(h)},{constant:!d.$stateful&&c.every(cc),inputs:!d.$stateful&&c})},expression:function(){return this.assignment()},assignment:function(){var a=this.ternary(),c,d;return(d=this.expect("="))?(a.assign||
this.throwError("implies assignment but ["+this.text.substring(0,d.index)+"] can not be assigned to",d),c=this.ternary(),F(function(d,f){return a.assign(d,c(d,f),f)},{inputs:[a,c]})):a},ternary:function(){var a=this.logicalOR(),c,d;if(d=this.expect("?")){c=this.assignment();if(d=this.expect(":")){var e=this.assignment();return F(function(d,g){return a(d,g)?c(d,g):e(d,g)},{constant:a.constant&&c.constant&&e.constant})}this.throwError("expected :",d)}return a},logicalOR:function(){for(var a=this.logicalAND(),
c;c=this.expect("||");)a=this.binaryFn(a,c.fn,this.logicalAND(),!0);return a},logicalAND:function(){var a=this.equality(),c;if(c=this.expect("&&"))a=this.binaryFn(a,c.fn,this.logicalAND(),!0);return a},equality:function(){var a=this.relational(),c;if(c=this.expect("==","!=","===","!=="))a=this.binaryFn(a,c.fn,this.equality());return a},relational:function(){var a=this.additive(),c;if(c=this.expect("<",">","<=",">="))a=this.binaryFn(a,c.fn,this.relational());return a},additive:function(){for(var a=
this.multiplicative(),c;c=this.expect("+","-");)a=this.binaryFn(a,c.fn,this.multiplicative());return a},multiplicative:function(){for(var a=this.unary(),c;c=this.expect("*","/","%");)a=this.binaryFn(a,c.fn,this.unary());return a},unary:function(){var a;return this.expect("+")?this.primary():(a=this.expect("-"))?this.binaryFn(cb.ZERO,a.fn,this.unary()):(a=this.expect("!"))?this.unaryFn(a.fn,this.unary()):this.primary()},fieldAccess:function(a){var c=this.text,d=this.expect().text,e=bd(d,this.options,
c);return F(function(c,d,k){return e(k||a(c,d))},{assign:function(e,g,k){(k=a(e,k))||a.assign(e,k={});return Oa(k,d,g,c)}})},objectIndex:function(a){var c=this.text,d=this.expression();this.consume("]");return F(function(e,f){var g=a(e,f),k=d(e,f);na(k,c);return g?Aa(g[k],c):t},{assign:function(e,f,g){var k=na(d(e,g),c);(g=Aa(a(e,g),c))||a.assign(e,g={});return g[k]=f}})},functionCall:function(a,c){var d=[];if(")"!==this.peekToken().text){do d.push(this.expression());while(this.expect(","))}this.consume(")");
var e=this.text,f=d.length?[]:null;return function(g,k){var h=c?c(g,k):g,l=a(g,k,h)||y;if(f)for(var m=d.length;m--;)f[m]=Aa(d[m](g,k),e);Aa(h,e);if(l){if(l.constructor===l)throw oa("isecfn",e);if(l===Nf||l===Of||l===Pf)throw oa("isecff",e);}h=l.apply?l.apply(h,f):l(f[0],f[1],f[2],f[3],f[4]);return Aa(h,e)}},arrayDeclaration:function(){var a=[];if("]"!==this.peekToken().text){do{if(this.peek("]"))break;var c=this.expression();a.push(c)}while(this.expect(","))}this.consume("]");return F(function(c,
e){for(var f=[],g=0,k=a.length;g<k;g++)f.push(a[g](c,e));return f},{literal:!0,constant:a.every(cc),inputs:a})},object:function(){var a=[],c=[];if("}"!==this.peekToken().text){do{if(this.peek("}"))break;var d=this.expect();a.push(d.string||d.text);this.consume(":");d=this.expression();c.push(d)}while(this.expect(","))}this.consume("}");return F(function(d,f){for(var g={},k=0,h=c.length;k<h;k++)g[a[k]]=c[k](d,f);return g},{literal:!0,constant:c.every(cc),inputs:c})}};var cd=wa(),wf=Object.prototype.valueOf,
Ba=w("$sce"),ja={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},ia=w("$compile"),Z=U.createElement("a"),gd=za(N.location.href,!0);Bc.$inject=["$provide"];hd.$inject=["$locale"];jd.$inject=["$locale"];var md=".",Ff={yyyy:$("FullYear",4),yy:$("FullYear",2,0,!0),y:$("FullYear",1),MMMM:Bb("Month"),MMM:Bb("Month",!0),MM:$("Month",2,1),M:$("Month",1,1),dd:$("Date",2),d:$("Date",1),HH:$("Hours",2),H:$("Hours",1),hh:$("Hours",2,-12),h:$("Hours",1,-12),mm:$("Minutes",2),m:$("Minutes",
1),ss:$("Seconds",2),s:$("Seconds",1),sss:$("Milliseconds",3),EEEE:Bb("Day"),EEE:Bb("Day",!0),a:function(a,c){return 12>a.getHours()?c.AMPMS[0]:c.AMPMS[1]},Z:function(a){a=-1*a.getTimezoneOffset();return a=(0<=a?"+":"")+(Ab(Math[0<a?"floor":"ceil"](a/60),2)+Ab(Math.abs(a%60),2))},ww:od(2),w:od(1)},Ef=/((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/,Df=/^\-?\d+$/;id.$inject=["$locale"];var Bf=da(S),Cf=da(ob);kd.$inject=["$parse"];var Rd=da({restrict:"E",compile:function(a,
c){if(!c.href&&!c.xlinkHref&&!c.name)return function(a,c){var f="[object SVGAnimatedString]"===Ja.call(c.prop("href"))?"xlink:href":"href";c.on("click",function(a){c.attr(f)||a.preventDefault()})}}}),pb={};s(vb,function(a,c){if("multiple"!=a){var d=ua("ng-"+c);pb[d]=function(){return{restrict:"A",priority:100,link:function(a,f,g){a.$watch(g[d],function(a){g.$set(c,!!a)})}}}}});s(Lc,function(a,c){pb[c]=function(){return{priority:100,link:function(a,e,f){if("ngPattern"===c&&"/"==f.ngPattern.charAt(0)&&
(e=f.ngPattern.match(Hf))){f.$set("ngPattern",new RegExp(e[1],e[2]));return}a.$watch(f[c],function(a){f.$set(c,a)})}}}});s(["src","srcset","href"],function(a){var c=ua("ng-"+a);pb[c]=function(){return{priority:99,link:function(d,e,f){var g=a,k=a;"href"===a&&"[object SVGAnimatedString]"===Ja.call(e.prop("href"))&&(k="xlinkHref",f.$attr[k]="xlink:href",g=null);f.$observe(c,function(c){c?(f.$set(k,c),Ha&&g&&e.prop(g,f[k])):"href"===a&&f.$set(k,null)})}}}});var Cb={$addControl:y,$$renameControl:function(a,
c){a.$name=c},$removeControl:y,$setValidity:y,$setDirty:y,$setPristine:y,$setSubmitted:y};pd.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var wd=function(a){return["$timeout",function(c){return{name:"form",restrict:a?"EAC":"E",controller:pd,compile:function(a){a.addClass(Pa).addClass(fb);return{pre:function(a,d,g,k){if(!("action"in g)){var h=function(c){a.$apply(function(){k.$commitViewValue();k.$setSubmitted()});c.preventDefault?c.preventDefault():c.returnValue=!1};d[0].addEventListener("submit",
h,!1);d.on("$destroy",function(){c(function(){d[0].removeEventListener("submit",h,!1)},0,!1)})}var l=k.$$parentForm,m=k.$name;m&&(Oa(a,m,k,m),g.$observe(g.name?"name":"ngForm",function(c){m!==c&&(Oa(a,m,t,m),m=c,Oa(a,m,k,m),l.$$renameControl(k,m))}));d.on("$destroy",function(){l.$removeControl(k);m&&Oa(a,m,t,m);F(k,Cb)})}}}}}]},Sd=wd(),ee=wd(!0),Gf=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,Rf=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,
Sf=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Tf=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,xd=/^(\d{4})-(\d{2})-(\d{2})$/,yd=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,ic=/^(\d{4})-W(\d\d)$/,zd=/^(\d{4})-(\d\d)$/,Ad=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Uf=/(\s+|^)default(\s+|$)/,Fb=new w("ngModel"),Bd={text:function(a,c,d,e,f,g){db(a,c,d,e,f,g);fc(e)},date:eb("date",xd,Eb(xd,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":eb("datetimelocal",
yd,Eb(yd,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:eb("time",Ad,Eb(Ad,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:eb("week",ic,function(a,c){if(ea(a))return a;if(J(a)){ic.lastIndex=0;var d=ic.exec(a);if(d){var e=+d[1],f=+d[2],g=d=0,k=0,h=0,l=nd(e),f=7*(f-1);c&&(d=c.getHours(),g=c.getMinutes(),k=c.getSeconds(),h=c.getMilliseconds());return new Date(e,0,l.getDate()+f,d,g,k,h)}}return NaN},"yyyy-Www"),month:eb("month",zd,Eb(zd,["yyyy","MM"]),"yyyy-MM"),number:function(a,
c,d,e,f,g){rd(a,c,d,e);db(a,c,d,e,f,g);e.$$parserName="number";e.$parsers.push(function(a){return e.$isEmpty(a)?null:Tf.test(a)?parseFloat(a):t});e.$formatters.push(function(a){if(!e.$isEmpty(a)){if(!X(a))throw Fb("numfmt",a);a=a.toString()}return a});if(d.min||d.ngMin){var k;e.$validators.min=function(a){return e.$isEmpty(a)||x(k)||a>=k};d.$observe("min",function(a){z(a)&&!X(a)&&(a=parseFloat(a,10));k=X(a)&&!isNaN(a)?a:t;e.$validate()})}if(d.max||d.ngMax){var h;e.$validators.max=function(a){return e.$isEmpty(a)||
x(h)||a<=h};d.$observe("max",function(a){z(a)&&!X(a)&&(a=parseFloat(a,10));h=X(a)&&!isNaN(a)?a:t;e.$validate()})}},url:function(a,c,d,e,f,g){db(a,c,d,e,f,g);fc(e);e.$$parserName="url";e.$validators.url=function(a){return e.$isEmpty(a)||Rf.test(a)}},email:function(a,c,d,e,f,g){db(a,c,d,e,f,g);fc(e);e.$$parserName="email";e.$validators.email=function(a){return e.$isEmpty(a)||Sf.test(a)}},radio:function(a,c,d,e){x(d.name)&&c.attr("name",++gb);c.on("click",function(a){c[0].checked&&e.$setViewValue(d.value,
a&&a.type)});e.$render=function(){c[0].checked=d.value==e.$viewValue};d.$observe("value",e.$render)},checkbox:function(a,c,d,e,f,g,k,h){var l=sd(h,a,"ngTrueValue",d.ngTrueValue,!0),m=sd(h,a,"ngFalseValue",d.ngFalseValue,!1);c.on("click",function(a){e.$setViewValue(c[0].checked,a&&a.type)});e.$render=function(){c[0].checked=e.$viewValue};e.$isEmpty=function(a){return a!==l};e.$formatters.push(function(a){return la(a,l)});e.$parsers.push(function(a){return a?l:m})},hidden:y,button:y,submit:y,reset:y,
file:y},vc=["$browser","$sniffer","$filter","$parse",function(a,c,d,e){return{restrict:"E",require:["?ngModel"],link:{pre:function(f,g,k,h){h[0]&&(Bd[S(k.type)]||Bd.text)(f,g,k,h[0],c,a,d,e)}}}}],fb="ng-valid",td="ng-invalid",Pa="ng-pristine",Db="ng-dirty",vd="ng-pending",Vf=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(a,c,d,e,f,g,k,h,l,m){this.$modelValue=this.$viewValue=Number.NaN;this.$validators={};this.$asyncValidators=
{};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$untouched=!0;this.$touched=!1;this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$error={};this.$$success={};this.$pending=t;this.$name=m(d.name||"",!1)(a);var p=f(d.ngModel),q=null,n=this,r=function(){var c=p(a);n.$options&&n.$options.getterSetter&&A(c)&&(c=c());return c},O=function(c){var d;n.$options&&n.$options.getterSetter&&A(d=p(a))?d(n.$modelValue):p.assign(a,n.$modelValue)};this.$$setOptions=function(a){n.$options=
a;if(!(p.assign||a&&a.getterSetter))throw Fb("nonassign",d.ngModel,sa(e));};this.$render=y;this.$isEmpty=function(a){return x(a)||""===a||null===a||a!==a};var B=e.inheritedData("$formController")||Cb,C=0;qd({ctrl:this,$element:e,set:function(a,c){a[c]=!0},unset:function(a,c){delete a[c]},parentForm:B,$animate:g});this.$setPristine=function(){n.$dirty=!1;n.$pristine=!0;g.removeClass(e,Db);g.addClass(e,Pa)};this.$setUntouched=function(){n.$touched=!1;n.$untouched=!0;g.setClass(e,"ng-untouched","ng-touched")};
this.$setTouched=function(){n.$touched=!0;n.$untouched=!1;g.setClass(e,"ng-touched","ng-untouched")};this.$rollbackViewValue=function(){k.cancel(q);n.$viewValue=n.$$lastCommittedViewValue;n.$render()};this.$validate=function(){X(n.$modelValue)&&isNaN(n.$modelValue)||this.$$parseAndValidate()};this.$$runValidators=function(a,c,d,e){function f(){var a=!0;s(n.$validators,function(e,f){var g=e(c,d);a=a&&g;h(f,g)});return a?!0:(s(n.$asyncValidators,function(a,c){h(c,null)}),!1)}function g(){var a=[],e=
!0;s(n.$asyncValidators,function(f,g){var k=f(c,d);if(!k||!A(k.then))throw Fb("$asyncValidators",k);h(g,t);a.push(k.then(function(){h(g,!0)},function(a){e=!1;h(g,!1)}))});a.length?l.all(a).then(function(){k(e)},y):k(!0)}function h(a,c){m===C&&n.$setValidity(a,c)}function k(a){m===C&&e(a)}C++;var m=C;(function(a){var c=n.$$parserName||"parse";if(a===t)h(c,null);else if(h(c,a),!a)return s(n.$validators,function(a,c){h(c,null)}),s(n.$asyncValidators,function(a,c){h(c,null)}),!1;return!0})(a)?f()?g():
k(!1):k(!1)};this.$commitViewValue=function(){var a=n.$viewValue;k.cancel(q);if(n.$$lastCommittedViewValue!==a||""===a&&n.$$hasNativeValidators)n.$$lastCommittedViewValue=a,n.$pristine&&(n.$dirty=!0,n.$pristine=!1,g.removeClass(e,Pa),g.addClass(e,Db),B.$setDirty()),this.$$parseAndValidate()};this.$$parseAndValidate=function(){var a=n.$$lastCommittedViewValue,c=a,d=x(c)?t:!0;if(d)for(var e=0;e<n.$parsers.length;e++)if(c=n.$parsers[e](c),x(c)){d=!1;break}X(n.$modelValue)&&isNaN(n.$modelValue)&&(n.$modelValue=
r());var f=n.$modelValue,g=n.$options&&n.$options.allowInvalid;g&&(n.$modelValue=c,n.$modelValue!==f&&n.$$writeModelToScope());n.$$runValidators(d,c,a,function(a){g||(n.$modelValue=a?c:t,n.$modelValue!==f&&n.$$writeModelToScope())})};this.$$writeModelToScope=function(){O(n.$modelValue);s(n.$viewChangeListeners,function(a){try{a()}catch(d){c(d)}})};this.$setViewValue=function(a,c){n.$viewValue=a;n.$options&&!n.$options.updateOnDefault||n.$$debounceViewValueCommit(c)};this.$$debounceViewValueCommit=
function(c){var d=0,e=n.$options;e&&z(e.debounce)&&(e=e.debounce,X(e)?d=e:X(e[c])?d=e[c]:X(e["default"])&&(d=e["default"]));k.cancel(q);d?q=k(function(){n.$commitViewValue()},d):h.$$phase?n.$commitViewValue():a.$apply(function(){n.$commitViewValue()})};a.$watch(function(){var a=r();if(a!==n.$modelValue){n.$modelValue=a;for(var c=n.$formatters,d=c.length,e=a;d--;)e=c[d](e);n.$viewValue!==e&&(n.$viewValue=n.$$lastCommittedViewValue=e,n.$render(),n.$$runValidators(t,a,e,y))}return a})}],te=function(){return{restrict:"A",
require:["ngModel","^?form","^?ngModelOptions"],controller:Vf,priority:1,compile:function(a){a.addClass(Pa).addClass("ng-untouched").addClass(fb);return{pre:function(a,d,e,f){var g=f[0],k=f[1]||Cb;g.$$setOptions(f[2]&&f[2].$options);k.$addControl(g);e.$observe("name",function(a){g.$name!==a&&k.$$renameControl(g,a)});a.$on("$destroy",function(){k.$removeControl(g)})},post:function(a,d,e,f){var g=f[0];if(g.$options&&g.$options.updateOn)d.on(g.$options.updateOn,function(a){g.$$debounceViewValueCommit(a&&
a.type)});d.on("blur",function(d){g.$touched||a.$apply(function(){g.$setTouched()})})}}}}},ve=da({restrict:"A",require:"ngModel",link:function(a,c,d,e){e.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),xc=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){e&&(d.required=!0,e.$validators.required=function(a){return!d.required||!e.$isEmpty(a)},d.$observe("required",function(){e.$validate()}))}}},wc=function(){return{restrict:"A",require:"?ngModel",link:function(a,
c,d,e){if(e){var f,g=d.ngPattern||d.pattern;d.$observe("pattern",function(a){J(a)&&0<a.length&&(a=new RegExp(a));if(a&&!a.test)throw w("ngPattern")("noregexp",g,a,sa(c));f=a||t;e.$validate()});e.$validators.pattern=function(a){return e.$isEmpty(a)||x(f)||f.test(a)}}}}},zc=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){if(e){var f=0;d.$observe("maxlength",function(a){f=aa(a)||0;e.$validate()});e.$validators.maxlength=function(a,c){return e.$isEmpty(a)||c.length<=f}}}}},yc=
function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){if(e){var f=0;d.$observe("minlength",function(a){f=aa(a)||0;e.$validate()});e.$validators.minlength=function(a,c){return e.$isEmpty(a)||c.length>=f}}}}},ue=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(a,c,d,e){var f=c.attr(d.$attr.ngList)||", ",g="false"!==d.ngTrim,k=g?T(f):f;e.$parsers.push(function(a){if(!x(a)){var c=[];a&&s(a.split(k),function(a){a&&c.push(g?T(a):a)});return c}});e.$formatters.push(function(a){return H(a)?
a.join(f):t});e.$isEmpty=function(a){return!a||!a.length}}}},Wf=/^(true|false|\d+)$/,we=function(){return{restrict:"A",priority:100,compile:function(a,c){return Wf.test(c.ngValue)?function(a,c,f){f.$set("value",a.$eval(f.ngValue))}:function(a,c,f){a.$watch(f.ngValue,function(a){f.$set("value",a)})}}}},xe=function(){return{restrict:"A",controller:["$scope","$attrs",function(a,c){var d=this;this.$options=a.$eval(c.ngModelOptions);this.$options.updateOn!==t?(this.$options.updateOnDefault=!1,this.$options.updateOn=
T(this.$options.updateOn.replace(Uf,function(){d.$options.updateOnDefault=!0;return" "}))):this.$options.updateOnDefault=!0}]}},Xd=["$compile",function(a){return{restrict:"AC",compile:function(c){a.$$addBindingClass(c);return function(c,e,f){a.$$addBindingInfo(e,f.ngBind);e=e[0];c.$watch(f.ngBind,function(a){e.textContent=a===t?"":a})}}}}],Zd=["$interpolate","$compile",function(a,c){return{compile:function(d){c.$$addBindingClass(d);return function(d,f,g){d=a(f.attr(g.$attr.ngBindTemplate));c.$$addBindingInfo(f,
d.expressions);f=f[0];g.$observe("ngBindTemplate",function(a){f.textContent=a===t?"":a})}}}}],Yd=["$sce","$parse","$compile",function(a,c,d){return{restrict:"A",compile:function(e,f){var g=c(f.ngBindHtml),k=c(f.ngBindHtml,function(a){return(a||"").toString()});d.$$addBindingClass(e);return function(c,e,f){d.$$addBindingInfo(e,f.ngBindHtml);c.$watch(k,function(){e.html(a.getTrustedHtml(g(c))||"")})}}}}],$d=gc("",!0),be=gc("Odd",0),ae=gc("Even",1),ce=Ia({compile:function(a,c){c.$set("ngCloak",t);a.removeClass("ng-cloak")}}),
de=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Ac={},Xf={blur:!0,focus:!0};s("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(a){var c=ua("ng-"+a);Ac[c]=["$parse","$rootScope",function(d,e){return{restrict:"A",compile:function(f,g){var k=d(g[c]);return function(c,d){d.on(a,function(d){var f=function(){k(c,{$event:d})};Xf[a]&&e.$$phase?c.$evalAsync(f):c.$apply(f)})}}}}]});
var ge=["$animate",function(a){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(c,d,e,f,g){var k,h,l;c.$watch(e.ngIf,function(c){c?h||g(function(c,f){h=f;c[c.length++]=U.createComment(" end ngIf: "+e.ngIf+" ");k={clone:c};a.enter(c,d.parent(),d)}):(l&&(l.remove(),l=null),h&&(h.$destroy(),h=null),k&&(l=nb(k.clone),a.leave(l).then(function(){l=null}),k=null))})}}}],he=["$templateRequest","$anchorScroll","$animate","$sce",function(a,c,d,e){return{restrict:"ECA",
priority:400,terminal:!0,transclude:"element",controller:ta.noop,compile:function(f,g){var k=g.ngInclude||g.src,h=g.onload||"",l=g.autoscroll;return function(f,g,q,n,r){var s=0,t,C,D,G=function(){C&&(C.remove(),C=null);t&&(t.$destroy(),t=null);D&&(d.leave(D).then(function(){C=null}),C=D,D=null)};f.$watch(e.parseAsResourceUrl(k),function(e){var k=function(){!z(l)||l&&!f.$eval(l)||c()},q=++s;e?(a(e,!0).then(function(a){if(q===s){var c=f.$new();n.template=a;a=r(c,function(a){G();d.enter(a,null,g).then(k)});
t=c;D=a;t.$emit("$includeContentLoaded",e);f.$eval(h)}},function(){q===s&&(G(),f.$emit("$includeContentError",e))}),f.$emit("$includeContentRequested",e)):(G(),n.template=null)})}}}}],ye=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(c,d,e,f){/SVG/.test(d[0].toString())?(d.empty(),a(Dc(f.template,U).childNodes)(c,function(a){d.append(a)},t,t,d)):(d.html(f.template),a(d.contents())(c))}}}],ie=Ia({priority:450,compile:function(){return{pre:function(a,c,
d){a.$eval(d.ngInit)}}}}),je=Ia({terminal:!0,priority:1E3}),ke=["$locale","$interpolate",function(a,c){var d=/{}/g;return{restrict:"EA",link:function(e,f,g){var k=g.count,h=g.$attr.when&&f.attr(g.$attr.when),l=g.offset||0,m=e.$eval(h)||{},p={},q=c.startSymbol(),n=c.endSymbol(),r=/^when(Minus)?(.+)$/;s(g,function(a,c){r.test(c)&&(m[S(c.replace("when","").replace("Minus","-"))]=f.attr(g.$attr[c]))});s(m,function(a,e){p[e]=c(a.replace(d,q+k+"-"+l+n))});e.$watch(function(){var c=parseFloat(e.$eval(k));
if(isNaN(c))return"";c in m||(c=a.pluralCat(c-l));return p[c](e)},function(a){f.text(a)})}}}],le=["$parse","$animate",function(a,c){var d=w("ngRepeat"),e=function(a,c,d,e,l,m,p){a[d]=e;l&&(a[l]=m);a.$index=c;a.$first=0===c;a.$last=c===p-1;a.$middle=!(a.$first||a.$last);a.$odd=!(a.$even=0===(c&1))};return{restrict:"A",multiElement:!0,transclude:"element",priority:1E3,terminal:!0,$$tlb:!0,compile:function(f,g){var k=g.ngRepeat,h=U.createComment(" end ngRepeat: "+k+" "),l=k.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
if(!l)throw d("iexp",k);var m=l[1],p=l[2],q=l[3],n=l[4],l=m.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);if(!l)throw d("iidexp",m);var r=l[3]||l[1],z=l[2];if(q&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(q)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent)$/.test(q)))throw d("badident",q);var w,C,D,G,u={$id:Ma};n?w=a(n):(D=function(a,c){return Ma(c)},G=function(a){return a});return function(a,f,g,l,m){w&&(C=function(c,d,e){z&&(u[z]=c);u[r]=d;u.$index=e;return w(a,u)});
var n=wa();a.$watchCollection(p,function(g){var l,p,E=f[0],u,w=wa(),B,y,F,x,H,A,J;q&&(a[q]=g);if(Qa(g))H=g,p=C||D;else{p=C||G;H=[];for(J in g)g.hasOwnProperty(J)&&"$"!=J.charAt(0)&&H.push(J);H.sort()}B=H.length;J=Array(B);for(l=0;l<B;l++)if(y=g===H?l:H[l],F=g[y],x=p(y,F,l),n[x])A=n[x],delete n[x],w[x]=A,J[l]=A;else{if(w[x])throw s(J,function(a){a&&a.scope&&(n[a.id]=a)}),d("dupes",k,x,ra(F));J[l]={id:x,scope:t,clone:t};w[x]=!0}for(u in n){A=n[u];x=nb(A.clone);c.leave(x);if(x[0].parentNode)for(l=0,
p=x.length;l<p;l++)x[l].$$NG_REMOVED=!0;A.scope.$destroy()}for(l=0;l<B;l++)if(y=g===H?l:H[l],F=g[y],A=J[l],A.scope){u=E;do u=u.nextSibling;while(u&&u.$$NG_REMOVED);A.clone[0]!=u&&c.move(nb(A.clone),null,v(E));E=A.clone[A.clone.length-1];e(A.scope,l,r,F,z,y,B)}else m(function(a,d){A.scope=d;var f=h.cloneNode(!1);a[a.length++]=f;c.enter(a,null,v(E));E=f;A.clone=a;w[A.id]=A;e(A.scope,l,r,F,z,y,B)});n=w})}}}}],me=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(c,d,e){c.$watch(e.ngShow,
function(c){a[c?"removeClass":"addClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],fe=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(c,d,e){c.$watch(e.ngHide,function(c){a[c?"addClass":"removeClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],ne=Ia(function(a,c,d){a.$watch(d.ngStyle,function(a,d){d&&a!==d&&s(d,function(a,d){c.css(d,"")});a&&c.css(a)},!0)}),oe=["$animate",function(a){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases=
{}}],link:function(c,d,e,f){var g=[],k=[],h=[],l=[],m=function(a,c){return function(){a.splice(c,1)}};c.$watch(e.ngSwitch||e.on,function(c){var d,e;d=0;for(e=h.length;d<e;++d)a.cancel(h[d]);d=h.length=0;for(e=l.length;d<e;++d){var r=nb(k[d].clone);l[d].$destroy();(h[d]=a.leave(r)).then(m(h,d))}k.length=0;l.length=0;(g=f.cases["!"+c]||f.cases["?"])&&s(g,function(c){c.transclude(function(d,e){l.push(e);var f=c.element;d[d.length++]=U.createComment(" end ngSwitchWhen: ");k.push({clone:d});a.enter(d,
f.parent(),f)})})})}}}],pe=Ia({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,c,d,e,f){e.cases["!"+d.ngSwitchWhen]=e.cases["!"+d.ngSwitchWhen]||[];e.cases["!"+d.ngSwitchWhen].push({transclude:f,element:c})}}),qe=Ia({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,c,d,e,f){e.cases["?"]=e.cases["?"]||[];e.cases["?"].push({transclude:f,element:c})}}),se=Ia({restrict:"EAC",link:function(a,c,d,e,f){if(!f)throw w("ngTransclude")("orphan",
sa(c));f(function(a){c.empty();c.append(a)})}}),Td=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(c,d){"text/ng-template"==d.type&&a.put(d.id,c[0].text)}}}],Yf=w("ngOptions"),re=da({restrict:"A",terminal:!0}),Ud=["$compile","$parse",function(a,c){var d=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,e={$setViewValue:y};
return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(a,c,d){var h=this,l={},m=e,p;h.databound=d.ngModel;h.init=function(a,c,d){m=a;p=d};h.addOption=function(c,d){La(c,'"option value"');l[c]=!0;m.$viewValue==c&&(a.val(c),p.parent()&&p.remove());d&&d[0].hasAttribute("selected")&&(d[0].selected=!0)};h.removeOption=function(a){this.hasOption(a)&&(delete l[a],m.$viewValue==a&&this.renderUnknownOption(a))};h.renderUnknownOption=function(c){c="? "+Ma(c)+" ?";
p.val(c);a.prepend(p);a.val(c);p.prop("selected",!0)};h.hasOption=function(a){return l.hasOwnProperty(a)};c.$on("$destroy",function(){h.renderUnknownOption=y})}],link:function(e,g,k,h){function l(a,c,d,e){d.$render=function(){var a=d.$viewValue;e.hasOption(a)?(u.parent()&&u.remove(),c.val(a),""===a&&A.prop("selected",!0)):x(a)&&A?c.val(""):e.renderUnknownOption(a)};c.on("change",function(){a.$apply(function(){u.parent()&&u.remove();d.$setViewValue(c.val())})})}function m(a,c,d){var e;d.$render=function(){var a=
new ab(d.$viewValue);s(c.find("option"),function(c){c.selected=z(a.get(c.value))})};a.$watch(function(){la(e,d.$viewValue)||(e=qa(d.$viewValue),d.$render())});c.on("change",function(){a.$apply(function(){var a=[];s(c.find("option"),function(c){c.selected&&a.push(c.value)});d.$setViewValue(a)})})}function p(e,f,g){function h(a,c,d){S[y]=d;F&&(S[F]=c);return a(e,S)}function k(a){var c;if(n)if(I&&H(a)){c=new ab([]);for(var d=0;d<a.length;d++)c.put(h(I,null,a[d]),!0)}else c=new ab(a);else I&&(a=h(I,null,
a));return function(d,e){var f;f=I?I:v?v:B;return n?z(c.remove(h(f,d,e))):a==h(f,d,e)}}function l(){C||(e.$$postDigest(p),C=!0)}function m(a,c,d){a[c]=a[c]||0;a[c]+=d?1:-1}function p(){C=!1;var a={"":[]},c=[""],d,l,r,t,u;r=g.$viewValue;t=K(e)||[];var y=F?Object.keys(t).sort():t,v,x,H,B,R={};u=k(r);var N=!1,T,U;P={};for(B=0;H=y.length,B<H;B++){v=B;if(F&&(v=y[B],"$"===v.charAt(0)))continue;x=t[v];d=h(J,v,x)||"";(l=a[d])||(l=a[d]=[],c.push(d));d=u(v,x);N=N||d;x=h(A,v,x);x=z(x)?x:"";U=I?I(e,S):F?y[B]:
B;I&&(P[U]=v);l.push({id:U,label:x,selected:d})}n||(w||null===r?a[""].unshift({id:"",label:"",selected:!N}):N||a[""].unshift({id:"?",label:"",selected:!0}));v=0;for(y=c.length;v<y;v++){d=c[v];l=a[d];Q.length<=v?(r={element:G.clone().attr("label",d),label:l.label},t=[r],Q.push(t),f.append(r.element)):(t=Q[v],r=t[0],r.label!=d&&r.element.attr("label",r.label=d));N=null;B=0;for(H=l.length;B<H;B++)d=l[B],(u=t[B+1])?(N=u.element,u.label!==d.label&&(m(R,u.label,!1),m(R,d.label,!0),N.text(u.label=d.label)),
u.id!==d.id&&N.val(u.id=d.id),N[0].selected!==d.selected&&(N.prop("selected",u.selected=d.selected),Ha&&N.prop("selected",u.selected))):(""===d.id&&w?T=w:(T=D.clone()).val(d.id).prop("selected",d.selected).attr("selected",d.selected).text(d.label),t.push(u={element:T,label:d.label,id:d.id,selected:d.selected}),m(R,d.label,!0),N?N.after(T):r.element.append(T),N=T);for(B++;t.length>B;)d=t.pop(),m(R,d.label,!1),d.element.remove();s(R,function(a,c){0<a?q.addOption(c):0>a&&q.removeOption(c)})}for(;Q.length>
v;)Q.pop()[0].element.remove()}var u;if(!(u=r.match(d)))throw Yf("iexp",r,sa(f));var A=c(u[2]||u[1]),y=u[4]||u[6],x=/ as /.test(u[0])&&u[1],v=x?c(x):null,F=u[5],J=c(u[3]||""),B=c(u[2]?u[1]:y),K=c(u[7]),I=u[8]?c(u[8]):null,P={},Q=[[{element:f,label:""}]],S={};w&&(a(w)(e),w.removeClass("ng-scope"),w.remove());f.empty();f.on("change",function(){e.$apply(function(){var a=K(e)||[],c;if(n)c=[],s(f.val(),function(d){d=I?P[d]:d;c.push("?"===d?t:""===d?null:h(v?v:B,d,a[d]))});else{var d=I?P[f.val()]:f.val();
c="?"===d?t:""===d?null:h(v?v:B,d,a[d])}g.$setViewValue(c);p()})});g.$render=p;e.$watchCollection(K,l);e.$watchCollection(function(){var a=K(e),c;if(a&&H(a)){c=Array(a.length);for(var d=0,f=a.length;d<f;d++)c[d]=h(A,d,a[d])}else if(a)for(d in c={},a)a.hasOwnProperty(d)&&(c[d]=h(A,d,a[d]));return c},l);n&&e.$watchCollection(function(){return g.$modelValue},l)}if(h[1]){var q=h[0];h=h[1];var n=k.multiple,r=k.ngOptions,w=!1,A,C=!1,D=v(U.createElement("option")),G=v(U.createElement("optgroup")),u=D.clone();
k=0;for(var y=g.children(),F=y.length;k<F;k++)if(""===y[k].value){A=w=y.eq(k);break}q.init(h,w,u);n&&(h.$isEmpty=function(a){return!a||0===a.length});r?p(e,g,h):n?m(e,g,h):l(e,g,h,q)}}}}],Wd=["$interpolate",function(a){var c={addOption:y,removeOption:y};return{restrict:"E",priority:100,compile:function(d,e){if(x(e.value)){var f=a(d.text(),!0);f||e.$set("value",d.text())}return function(a,d,e){var l=d.parent(),m=l.data("$selectController")||l.parent().data("$selectController");m&&m.databound||(m=c);
f?a.$watch(f,function(a,c){e.$set("value",a);c!==a&&m.removeOption(c);m.addOption(a,d)}):m.addOption(e.value,d);d.on("$destroy",function(){m.removeOption(e.value)})}}}}],Vd=da({restrict:"E",terminal:!1});N.angular.bootstrap?console.log("WARNING: Tried to load angular more than once."):(Ld(),Nd(ta),v(U).ready(function(){Hd(U,rc)}))})(window,document);!window.angular.$$csp()&&window.angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');


/**
 * @license
 * lodash 3.8.0 (Custom Build) lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
 * Build: `lodash modern -o ./lodash.js`
 */
;(function(){function n(n,t){if(n!==t){var r=n===n,e=t===t;if(n>t||!r||n===w&&e)return 1;if(n<t||!e||t===w&&r)return-1}return 0}function t(n,t,r){for(var e=n.length,u=r?e:-1;r?u--:++u<e;)if(t(n[u],u,n))return u;return-1}function r(n,t,r){if(t!==t)return p(n,r);r-=1;for(var e=n.length;++r<e;)if(n[r]===t)return r;return-1}function e(n){return typeof n=="function"||false}function u(n){return typeof n=="string"?n:null==n?"":n+""}function o(n){return n.charCodeAt(0)}function i(n,t){for(var r=-1,e=n.length;++r<e&&-1<t.indexOf(n.charAt(r)););
return r}function f(n,t){for(var r=n.length;r--&&-1<t.indexOf(n.charAt(r)););return r}function a(t,r){return n(t.a,r.a)||t.b-r.b}function c(n){return $n[n]}function l(n){return Ln[n]}function s(n){return"\\"+Mn[n]}function p(n,t,r){var e=n.length;for(t+=r?0:-1;r?t--:++t<e;){var u=n[t];if(u!==u)return t}return-1}function h(n){return!!n&&typeof n=="object"}function _(n){return 160>=n&&9<=n&&13>=n||32==n||160==n||5760==n||6158==n||8192<=n&&(8202>=n||8232==n||8233==n||8239==n||8287==n||12288==n||65279==n);

}function v(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;)n[r]===t&&(n[r]=z,o[++u]=r);return o}function g(n){for(var t=-1,r=n.length;++t<r&&_(n.charCodeAt(t)););return t}function y(n){for(var t=n.length;t--&&_(n.charCodeAt(t)););return t}function d(n){return zn[n]}function m(_){function $n(n){if(h(n)&&!(To(n)||n instanceof Bn)){if(n instanceof zn)return n;if(Ge.call(n,"__chain__")&&Ge.call(n,"__wrapped__"))return Lr(n)}return new zn(n)}function Ln(){}function zn(n,t,r){this.__wrapped__=n,this.__actions__=r||[],
this.__chain__=!!t}function Bn(n){this.__wrapped__=n,this.__actions__=null,this.__dir__=1,this.__filtered__=false,this.__iteratees__=null,this.__takeCount__=Iu,this.__views__=null}function Mn(){this.__data__={}}function Dn(n){var t=n?n.length:0;for(this.data={hash:du(null),set:new lu};t--;)this.push(n[t])}function Pn(n,t){var r=n.data;return(typeof t=="string"||se(t)?r.set.has(t):r.hash[t])?0:-1}function qn(n,t){var r=-1,e=n.length;for(t||(t=Ue(e));++r<e;)t[r]=n[r];return t}function Kn(n,t){for(var r=-1,e=n.length;++r<e&&false!==t(n[r],r,n););
return n}function Vn(n,t){for(var r=-1,e=n.length;++r<e;)if(!t(n[r],r,n))return false;return true}function Gn(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;){var i=n[r];t(i,r,n)&&(o[++u]=i)}return o}function Jn(n,t){for(var r=-1,e=n.length,u=Ue(e);++r<e;)u[r]=t(n[r],r,n);return u}function Xn(n,t,r,e){var u=-1,o=n.length;for(e&&o&&(r=n[++u]);++u<o;)r=t(r,n[u],u,n);return r}function Hn(n,t){for(var r=-1,e=n.length;++r<e;)if(t(n[r],r,n))return true;return false}function Qn(n,t){return n===w?t:n}function nt(n,t,r,e){
return n!==w&&Ge.call(e,r)?n:t}function tt(n,t,r){var e=Ko(t);fu.apply(e,Zu(t));for(var u=-1,o=e.length;++u<o;){var i=e[u],f=n[i],a=r(f,t[i],i,n,t);(a===a?a===f:f!==f)&&(f!==w||i in n)||(n[i]=a)}return n}function rt(n,t){for(var r=-1,e=null==n,u=!e&&jr(n),o=u&&n.length,i=t.length,f=Ue(i);++r<i;){var a=t[r];f[r]=u?kr(a,o)?n[a]:w:e?w:n[a]}return f}function et(n,t,r){r||(r={});for(var e=-1,u=t.length;++e<u;){var o=t[e];r[o]=n[o]}return r}function ut(n,t,r){var e=typeof n;return"function"==e?t===w?n:zt(n,t,r):null==n?Re:"object"==e?wt(n):t===w?Te(n):bt(n,t);

}function ot(n,t,r,e,u,o,i){var f;if(r&&(f=u?r(n,e,u):r(n)),f!==w)return f;if(!se(n))return n;if(e=To(n)){if(f=wr(n),!t)return qn(n,f)}else{var a=Xe.call(n),c=a==K;if(a!=Y&&a!=B&&(!c||u))return Nn[a]?xr(n,a,t):u?n:{};if(f=br(c?{}:n),!t)return $u(f,n)}for(o||(o=[]),i||(i=[]),u=o.length;u--;)if(o[u]==n)return i[u];return o.push(n),i.push(f),(e?Kn:ht)(n,function(e,u){f[u]=ot(e,t,r,u,n,o,i)}),f}function it(n,t,r){if(typeof n!="function")throw new Pe(L);return su(function(){n.apply(w,r)},t)}function ft(n,t){
var e=n?n.length:0,u=[];if(!e)return u;var o=-1,i=mr(),f=i==r,a=f&&200<=t.length?qu(t):null,c=t.length;a&&(i=Pn,f=false,t=a);n:for(;++o<e;)if(a=n[o],f&&a===a){for(var l=c;l--;)if(t[l]===a)continue n;u.push(a)}else 0>i(t,a,0)&&u.push(a);return u}function at(n,t){var r=true;return zu(n,function(n,e,u){return r=!!t(n,e,u)}),r}function ct(n,t){var r=[];return zu(n,function(n,e,u){t(n,e,u)&&r.push(n)}),r}function lt(n,t,r,e){var u;return r(n,function(n,r,o){return t(n,r,o)?(u=e?r:n,false):void 0}),u}function st(n,t,r){
for(var e=-1,u=n.length,o=-1,i=[];++e<u;){var f=n[e];if(h(f)&&jr(f)&&(r||To(f)||ae(f))){t&&(f=st(f,t,r));for(var a=-1,c=f.length;++a<c;)i[++o]=f[a]}else r||(i[++o]=f)}return i}function pt(n,t){Mu(n,t,me)}function ht(n,t){return Mu(n,t,Ko)}function _t(n,t){return Du(n,t,Ko)}function vt(n,t){for(var r=-1,e=t.length,u=-1,o=[];++r<e;){var i=t[r];No(n[i])&&(o[++u]=i)}return o}function gt(n,t,r){if(null!=n){r!==w&&r in Fr(n)&&(t=[r]),r=-1;for(var e=t.length;null!=n&&++r<e;)n=n[t[r]];return r&&r==e?n:w}
}function yt(n,t,r,e,u,o){if(n===t)return true;var i=typeof n,f=typeof t;if("function"!=i&&"object"!=i&&"function"!=f&&"object"!=f||null==n||null==t)n=n!==n&&t!==t;else n:{var i=yt,f=To(n),a=To(t),c=M,l=M;f||(c=Xe.call(n),c==B?c=Y:c!=Y&&(f=ge(n))),a||(l=Xe.call(t),l==B?l=Y:l!=Y&&ge(t));var s=c==Y,a=l==Y,l=c==l;if(!l||f||s){if(!e&&(c=s&&Ge.call(n,"__wrapped__"),a=a&&Ge.call(t,"__wrapped__"),c||a)){n=i(c?n.value():n,a?t.value():t,r,e,u,o);break n}if(l){for(u||(u=[]),o||(o=[]),c=u.length;c--;)if(u[c]==n){
n=o[c]==t;break n}u.push(n),o.push(t),n=(f?_r:gr)(n,t,i,r,e,u,o),u.pop(),o.pop()}else n=false}else n=vr(n,t,c)}return n}function dt(n,t,r,e,u){for(var o=-1,i=t.length,f=!u;++o<i;)if(f&&e[o]?r[o]!==n[t[o]]:!(t[o]in n))return false;for(o=-1;++o<i;){var a=t[o],c=n[a],l=r[o];if(f&&e[o]?a=c!==w||a in n:(a=u?u(c,l,a):w,a===w&&(a=yt(l,c,u,true))),!a)return false}return true}function mt(n,t){var r=-1,e=jr(n)?Ue(n.length):[];return zu(n,function(n,u,o){e[++r]=t(n,u,o)}),e}function wt(n){var t=Ko(n),r=t.length;if(!r)return Ie(true);

if(1==r){var e=t[0],u=n[e];if(Cr(u))return function(n){return null==n?false:n[e]===u&&(u!==w||e in Fr(n))}}for(var o=Ue(r),i=Ue(r);r--;)u=n[t[r]],o[r]=u,i[r]=Cr(u);return function(n){return null!=n&&dt(Fr(n),t,o,i)}}function bt(n,t){var r=To(n),e=Er(n)&&Cr(t),u=n+"";return n=$r(n),function(o){if(null==o)return false;var i=u;if(o=Fr(o),!(!r&&e||i in o)){if(o=1==n.length?o:gt(o,It(n,0,-1)),null==o)return false;i=Pr(n),o=Fr(o)}return o[i]===t?t!==w||i in o:yt(t,o[i],null,true)}}function xt(n,t,r,e,u){if(!se(n))return n;

var o=jr(t)&&(To(t)||ge(t));if(!o){var i=Ko(t);fu.apply(i,Zu(t))}return Kn(i||t,function(f,a){if(i&&(a=f,f=t[a]),h(f)){e||(e=[]),u||(u=[]);n:{for(var c=a,l=e,s=u,p=l.length,_=t[c];p--;)if(l[p]==_){n[c]=s[p];break n}var p=n[c],v=r?r(p,_,c,n,t):w,g=v===w;g&&(v=_,jr(_)&&(To(_)||ge(_))?v=To(p)?p:jr(p)?qn(p):[]:Fo(_)||ae(_)?v=ae(p)?ye(p):Fo(p)?p:{}:g=false),l.push(_),s.push(v),g?n[c]=xt(v,_,r,l,s):(v===v?v!==p:p===p)&&(n[c]=v)}}else c=n[a],l=r?r(c,f,a,n,t):w,(s=l===w)&&(l=f),!o&&l===w||!s&&(l===l?l===c:c!==c)||(n[a]=l);

}),n}function At(n){return function(t){return null==t?w:t[n]}}function jt(n){var t=n+"";return n=$r(n),function(r){return gt(r,n,t)}}function kt(n,t){for(var r=n?t.length:0;r--;){var e=parseFloat(t[r]);if(e!=u&&kr(e)){var u=e;pu.call(n,e,1)}}}function Ot(n,t){return n+uu(Ou()*(t-n+1))}function Et(n,t,r,e,u){return u(n,function(n,u,o){r=e?(e=false,n):t(r,n,u,o)}),r}function It(n,t,r){var e=-1,u=n.length;for(t=null==t?0:+t||0,0>t&&(t=-t>u?0:u+t),r=r===w||r>u?u:+r||0,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,
r=Ue(u);++e<u;)r[e]=n[e+t];return r}function Rt(n,t){var r;return zu(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function Ct(n,t){var r=n.length;for(n.sort(t);r--;)n[r]=n[r].c;return n}function Wt(t,r,e){var u=dr(),o=-1;return r=Jn(r,function(n){return u(n)}),t=mt(t,function(n){return{a:Jn(r,function(t){return t(n)}),b:++o,c:n}}),Ct(t,function(t,r){var u;n:{u=-1;for(var o=t.a,i=r.a,f=o.length,a=e.length;++u<f;){var c=n(o[u],i[u]);if(c){u=u<a?c*(e[u]?1:-1):c;break n}}u=t.b-r.b}return u})}function St(n,t){
var r=0;return zu(n,function(n,e,u){r+=+t(n,e,u)||0}),r}function Tt(n,t){var e=-1,u=mr(),o=n.length,i=u==r,f=i&&200<=o,a=f?qu():null,c=[];a?(u=Pn,i=false):(f=false,a=t?[]:c);n:for(;++e<o;){var l=n[e],s=t?t(l,e,n):l;if(i&&l===l){for(var p=a.length;p--;)if(a[p]===s)continue n;t&&a.push(s),c.push(l)}else 0>u(a,s,0)&&((t||f)&&a.push(s),c.push(l))}return c}function Ut(n,t){for(var r=-1,e=t.length,u=Ue(e);++r<e;)u[r]=n[t[r]];return u}function Nt(n,t,r,e){for(var u=n.length,o=e?u:-1;(e?o--:++o<u)&&t(n[o],o,n););
return r?It(n,e?0:o,e?o+1:u):It(n,e?o+1:0,e?u:o)}function Ft(n,t){var r=n;r instanceof Bn&&(r=r.value());for(var e=-1,u=t.length;++e<u;){var r=[r],o=t[e];fu.apply(r,o.args),r=o.func.apply(o.thisArg,r)}return r}function $t(n,t,r){var e=0,u=n?n.length:e;if(typeof t=="number"&&t===t&&u<=Wu){for(;e<u;){var o=e+u>>>1,i=n[o];(r?i<=t:i<t)?e=o+1:u=o}return u}return Lt(n,t,Re,r)}function Lt(n,t,r,e){t=r(t);for(var u=0,o=n?n.length:0,i=t!==t,f=t===w;u<o;){var a=uu((u+o)/2),c=r(n[a]),l=c===c;(i?l||e:f?l&&(e||c!==w):e?c<=t:c<t)?u=a+1:o=a;

}return xu(o,Cu)}function zt(n,t,r){if(typeof n!="function")return Re;if(t===w)return n;switch(r){case 1:return function(r){return n.call(t,r)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,o){return n.call(t,r,e,u,o)};case 5:return function(r,e,u,o,i){return n.call(t,r,e,u,o,i)}}return function(){return n.apply(t,arguments)}}function Bt(n){return tu.call(n,0)}function Mt(n,t,r){for(var e=r.length,u=-1,o=bu(n.length-e,0),i=-1,f=t.length,a=Ue(o+f);++i<f;)a[i]=t[i];

for(;++u<e;)a[r[u]]=n[u];for(;o--;)a[i++]=n[u++];return a}function Dt(n,t,r){for(var e=-1,u=r.length,o=-1,i=bu(n.length-u,0),f=-1,a=t.length,c=Ue(i+a);++o<i;)c[o]=n[o];for(i=o;++f<a;)c[i+f]=t[f];for(;++e<u;)c[i+r[e]]=n[o++];return c}function Pt(n,t){return function(r,e,u){var o=t?t():{};if(e=dr(e,u,3),To(r)){u=-1;for(var i=r.length;++u<i;){var f=r[u];n(o,f,e(f,u,r),r)}}else zu(r,function(t,r,u){n(o,t,e(t,r,u),u)});return o}}function qt(n){return fe(function(t,r){var e=-1,u=null==t?0:r.length,o=2<u&&r[u-2],i=2<u&&r[2],f=1<u&&r[u-1];

for(typeof o=="function"?(o=zt(o,f,5),u-=2):(o=typeof f=="function"?f:null,u-=o?1:0),i&&Or(r[0],r[1],i)&&(o=3>u?null:o,u=1);++e<u;)(i=r[e])&&n(t,i,o);return t})}function Kt(n,t){return function(r,e){var u=r?Yu(r):0;if(!Rr(u))return n(r,e);for(var o=t?u:-1,i=Fr(r);(t?o--:++o<u)&&false!==e(i[o],o,i););return r}}function Vt(n){return function(t,r,e){var u=Fr(t);e=e(t);for(var o=e.length,i=n?o:-1;n?i--:++i<o;){var f=e[i];if(false===r(u[f],f,u))break}return t}}function Yt(n,t){function r(){return(this&&this!==Yn&&this instanceof r?e:n).apply(t,arguments);

}var e=Gt(n);return r}function Zt(n){return function(t){var r=-1;t=Oe(be(t));for(var e=t.length,u="";++r<e;)u=n(u,t[r],r);return u}}function Gt(n){return function(){var t=Lu(n.prototype),r=n.apply(t,arguments);return se(r)?r:t}}function Jt(n){function t(r,e,u){return u&&Or(r,e,u)&&(e=null),r=hr(r,n,null,null,null,null,null,e),r.placeholder=t.placeholder,r}return t}function Xt(n,t){return function(r,e,u){u&&Or(r,e,u)&&(e=null);var i=dr(),f=null==e;if(i===ut&&f||(f=false,e=i(e,u,3)),f){if(e=To(r),e||!ve(r))return n(e?r:Nr(r));

e=o}return yr(r,e,t)}}function Ht(n,r){return function(e,u,o){return u=dr(u,o,3),To(e)?(u=t(e,u,r),-1<u?e[u]:w):lt(e,u,n)}}function Qt(n){return function(r,e,u){return r&&r.length?(e=dr(e,u,3),t(r,e,n)):-1}}function nr(n){return function(t,r,e){return r=dr(r,e,3),lt(t,r,n,true)}}function tr(n){return function(){var t=arguments.length;if(!t)return function(){return arguments[0]};for(var r,e=n?t:-1,u=0,o=Ue(t);n?e--:++e<t;){var i=o[u++]=arguments[e];if(typeof i!="function")throw new Pe(L);var f=r?"":Vu(i);

r="wrapper"==f?new zn([]):r}for(e=r?-1:t;++e<t;)i=o[e],f=Vu(i),r=(u="wrapper"==f?Ku(i):null)&&Ir(u[0])&&u[1]==(R|k|E|C)&&!u[4].length&&1==u[9]?r[Vu(u[0])].apply(r,u[3]):1==i.length&&Ir(i)?r[f]():r.thru(i);return function(){var n=arguments;if(r&&1==n.length&&To(n[0]))return r.plant(n[0]).value();for(var e=0,n=o[e].apply(this,n);++e<t;)n=o[e].call(this,n);return n}}}function rr(n,t){return function(r,e,u){return typeof e=="function"&&u===w&&To(r)?n(r,e):t(r,zt(e,u,3))}}function er(n){return function(t,r,e){
return(typeof r!="function"||e!==w)&&(r=zt(r,e,3)),n(t,r,me)}}function ur(n){return function(t,r,e){return(typeof r!="function"||e!==w)&&(r=zt(r,e,3)),n(t,r)}}function or(n){return function(t,r,e){var u={};return r=dr(r,e,3),ht(t,function(t,e,o){o=r(t,e,o),e=n?o:e,t=n?t:o,u[e]=t}),u}}function ir(n){return function(t,r,e){return t=u(t),(n?t:"")+lr(t,r,e)+(n?"":t)}}function fr(n){var t=fe(function(r,e){var u=v(e,t.placeholder);return hr(r,n,null,e,u)});return t}function ar(n,t){return function(r,e,u,o){
var i=3>arguments.length;return typeof e=="function"&&o===w&&To(r)?n(r,e,u,i):Et(r,dr(e,o,4),u,i,t)}}function cr(n,t,r,e,u,o,i,f,a,c){function l(){for(var b=arguments.length,j=b,k=Ue(b);j--;)k[j]=arguments[j];if(e&&(k=Mt(k,e,u)),o&&(k=Dt(k,o,i)),_||y){var j=l.placeholder,O=v(k,j),b=b-O.length;if(b<c){var R=f?qn(f):null,b=bu(c-b,0),C=_?O:null,O=_?null:O,W=_?k:null,k=_?null:k;return t|=_?E:I,t&=~(_?I:E),g||(t&=~(x|A)),k=[n,t,r,W,C,k,O,R,a,b],R=cr.apply(w,k),Ir(n)&&Gu(R,k),R.placeholder=j,R}}if(j=p?r:this,
h&&(n=j[m]),f)for(R=k.length,b=xu(f.length,R),C=qn(k);b--;)O=f[b],k[b]=kr(O,R)?C[O]:w;return s&&a<k.length&&(k.length=a),(this&&this!==Yn&&this instanceof l?d||Gt(n):n).apply(j,k)}var s=t&R,p=t&x,h=t&A,_=t&k,g=t&j,y=t&O,d=!h&&Gt(n),m=n;return l}function lr(n,t,r){return n=n.length,t=+t,n<t&&mu(t)?(t-=n,r=null==r?" ":r+"",je(r,ru(t/r.length)).slice(0,t)):""}function sr(n,t,r,e){function u(){for(var t=-1,f=arguments.length,a=-1,c=e.length,l=Ue(f+c);++a<c;)l[a]=e[a];for(;f--;)l[a++]=arguments[++t];return(this&&this!==Yn&&this instanceof u?i:n).apply(o?r:this,l);

}var o=t&x,i=Gt(n);return u}function pr(n){return function(t,r,e,u){var o=dr(e);return o===ut&&null==e?$t(t,r,n):Lt(t,r,o(e,u,1),n)}}function hr(n,t,r,e,u,o,i,f){var a=t&A;if(!a&&typeof n!="function")throw new Pe(L);var c=e?e.length:0;if(c||(t&=~(E|I),e=u=null),c-=u?u.length:0,t&I){var l=e,s=u;e=u=null}var p=a?null:Ku(n);return r=[n,t,r,e,u,l,s,o,i,f],p&&(e=r[1],t=p[1],f=e|t,u=t==R&&e==k||t==R&&e==C&&r[7].length<=p[8]||t==(R|C)&&e==k,(f<R||u)&&(t&x&&(r[2]=p[2],f|=e&x?0:j),(e=p[3])&&(u=r[3],r[3]=u?Mt(u,e,p[4]):qn(e),
r[4]=u?v(r[3],z):qn(p[4])),(e=p[5])&&(u=r[5],r[5]=u?Dt(u,e,p[6]):qn(e),r[6]=u?v(r[5],z):qn(p[6])),(e=p[7])&&(r[7]=qn(e)),t&R&&(r[8]=null==r[8]?p[8]:xu(r[8],p[8])),null==r[9]&&(r[9]=p[9]),r[0]=p[0],r[1]=f),t=r[1],f=r[9]),r[9]=null==f?a?0:n.length:bu(f-c,0)||0,(p?Pu:Gu)(t==x?Yt(r[0],r[2]):t!=E&&t!=(x|E)||r[4].length?cr.apply(w,r):sr.apply(w,r),r)}function _r(n,t,r,e,u,o,i){var f=-1,a=n.length,c=t.length,l=true;if(a!=c&&(!u||c<=a))return false;for(;l&&++f<a;){var s=n[f],p=t[f],l=w;if(e&&(l=u?e(p,s,f):e(s,p,f)),
l===w)if(u)for(var h=c;h--&&(p=t[h],!(l=s&&s===p||r(s,p,e,u,o,i))););else l=s&&s===p||r(s,p,e,u,o,i)}return!!l}function vr(n,t,r){switch(r){case D:case P:return+n==+t;case q:return n.name==t.name&&n.message==t.message;case V:return n!=+n?t!=+t:n==+t;case Z:case G:return n==t+""}return false}function gr(n,t,r,e,u,o,i){var f=Ko(n),a=f.length,c=Ko(t).length;if(a!=c&&!u)return false;for(var c=u,l=-1;++l<a;){var s=f[l],p=u?s in t:Ge.call(t,s);if(p){var h=n[s],_=t[s],p=w;e&&(p=u?e(_,h,s):e(h,_,s)),p===w&&(p=h&&h===_||r(h,_,e,u,o,i));

}if(!p)return false;c||(c="constructor"==s)}return c||(r=n.constructor,e=t.constructor,!(r!=e&&"constructor"in n&&"constructor"in t)||typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)?true:false}function yr(n,t,r){var e=r?Iu:Eu,u=e,o=u;return zu(n,function(n,i,f){i=t(n,i,f),((r?i<u:i>u)||i===e&&i===o)&&(u=i,o=n)}),o}function dr(n,t,r){var e=$n.callback||Ee,e=e===Ee?ut:e;return r?e(n,t,r):e}function mr(n,t,e){var u=$n.indexOf||Dr,u=u===Dr?r:u;return n?u(n,t,e):u}function wr(n){var t=n.length,r=new n.constructor(t);

return t&&"string"==typeof n[0]&&Ge.call(n,"index")&&(r.index=n.index,r.input=n.input),r}function br(n){return n=n.constructor,typeof n=="function"&&n instanceof n||(n=Be),new n}function xr(n,t,r){var e=n.constructor;switch(t){case J:return Bt(n);case D:case P:return new e(+n);case X:case H:case Q:case nn:case tn:case rn:case en:case un:case on:return t=n.buffer,new e(r?Bt(t):t,n.byteOffset,n.length);case V:case G:return new e(n);case Z:var u=new e(n.source,kn.exec(n));u.lastIndex=n.lastIndex}return u;

}function Ar(n,t,r){return null==n||Er(t,n)||(t=$r(t),n=1==t.length?n:gt(n,It(t,0,-1)),t=Pr(t)),t=null==n?n:n[t],null==t?w:t.apply(n,r)}function jr(n){return null!=n&&Rr(Yu(n))}function kr(n,t){return n=+n,t=null==t?Tu:t,-1<n&&0==n%1&&n<t}function Or(n,t,r){if(!se(r))return false;var e=typeof t;return("number"==e?jr(r)&&kr(t,r.length):"string"==e&&t in r)?(t=r[t],n===n?n===t:t!==t):false}function Er(n,t){var r=typeof n;return"string"==r&&dn.test(n)||"number"==r?true:To(n)?false:!yn.test(n)||null!=t&&n in Fr(t);

}function Ir(n){var t=Vu(n);return!!t&&n===$n[t]&&t in Bn.prototype}function Rr(n){return typeof n=="number"&&-1<n&&0==n%1&&n<=Tu}function Cr(n){return n===n&&!se(n)}function Wr(n,t){n=Fr(n);for(var r=-1,e=t.length,u={};++r<e;){var o=t[r];o in n&&(u[o]=n[o])}return u}function Sr(n,t){var r={};return pt(n,function(n,e,u){t(n,e,u)&&(r[e]=n)}),r}function Tr(n){var t;if(!h(n)||Xe.call(n)!=Y||!(Ge.call(n,"constructor")||(t=n.constructor,typeof t!="function"||t instanceof t)))return false;var r;return pt(n,function(n,t){
r=t}),r===w||Ge.call(n,r)}function Ur(n){for(var t=me(n),r=t.length,e=r&&n.length,u=$n.support,u=e&&Rr(e)&&(To(n)||u.nonEnumArgs&&ae(n)),o=-1,i=[];++o<r;){var f=t[o];(u&&kr(f,e)||Ge.call(n,f))&&i.push(f)}return i}function Nr(n){return null==n?[]:jr(n)?se(n)?n:Be(n):we(n)}function Fr(n){return se(n)?n:Be(n)}function $r(n){if(To(n))return n;var t=[];return u(n).replace(mn,function(n,r,e,u){t.push(e?u.replace(An,"$1"):r||n)}),t}function Lr(n){return n instanceof Bn?n.clone():new zn(n.__wrapped__,n.__chain__,qn(n.__actions__));

}function zr(n,t,r){return n&&n.length?((r?Or(n,t,r):null==t)&&(t=1),It(n,0>t?0:t)):[]}function Br(n,t,r){var e=n?n.length:0;return e?((r?Or(n,t,r):null==t)&&(t=1),t=e-(+t||0),It(n,0,0>t?0:t)):[]}function Mr(n){return n?n[0]:w}function Dr(n,t,e){var u=n?n.length:0;if(!u)return-1;if(typeof e=="number")e=0>e?bu(u+e,0):e;else if(e)return e=$t(n,t),n=n[e],(t===t?t===n:n!==n)?e:-1;return r(n,t,e||0)}function Pr(n){var t=n?n.length:0;return t?n[t-1]:w}function qr(n){return zr(n,1)}function Kr(n,t,e,u){
if(!n||!n.length)return[];null!=t&&typeof t!="boolean"&&(u=e,e=Or(n,t,u)?null:t,t=false);var o=dr();if((o!==ut||null!=e)&&(e=o(e,u,3)),t&&mr()==r){t=e;var i;e=-1,u=n.length;for(var o=-1,f=[];++e<u;){var a=n[e],c=t?t(a,e,n):a;e&&i===c||(i=c,f[++o]=a)}n=f}else n=Tt(n,e);return n}function Vr(n){if(!n||!n.length)return[];var t=-1,r=0;n=Gn(n,function(n){return jr(n)?(r=bu(n.length,r),true):void 0});for(var e=Ue(r);++t<r;)e[t]=Jn(n,At(t));return e}function Yr(n,t,r){return n&&n.length?(n=Vr(n),null==t?n:(t=zt(t,r,4),
Jn(n,function(n){return Xn(n,t,w,true)}))):[]}function Zr(n,t){var r=-1,e=n?n.length:0,u={};for(!e||t||To(n[0])||(t=[]);++r<e;){var o=n[r];t?u[o]=t[r]:o&&(u[o[0]]=o[1])}return u}function Gr(n){return n=$n(n),n.__chain__=true,n}function Jr(n,t,r){return t.call(r,n)}function Xr(n,t,r){var e=To(n)?Vn:at;return r&&Or(n,t,r)&&(t=null),(typeof t!="function"||r!==w)&&(t=dr(t,r,3)),e(n,t)}function Hr(n,t,r){var e=To(n)?Gn:ct;return t=dr(t,r,3),e(n,t)}function Qr(n,t,r,e){var u=n?Yu(n):0;return Rr(u)||(n=we(n),
u=n.length),u?(r=typeof r!="number"||e&&Or(t,r,e)?0:0>r?bu(u+r,0):r||0,typeof n=="string"||!To(n)&&ve(n)?r<u&&-1<n.indexOf(t,r):-1<mr(n,t,r)):false}function ne(n,t,r){var e=To(n)?Jn:mt;return t=dr(t,r,3),e(n,t)}function te(n,t,r){return(r?Or(n,t,r):null==t)?(n=Nr(n),t=n.length,0<t?n[Ot(0,t-1)]:w):(n=re(n),n.length=xu(0>t?0:+t||0,n.length),n)}function re(n){n=Nr(n);for(var t=-1,r=n.length,e=Ue(r);++t<r;){var u=Ot(0,t);t!=u&&(e[t]=e[u]),e[u]=n[t]}return e}function ee(n,t,r){var e=To(n)?Hn:Rt;return r&&Or(n,t,r)&&(t=null),
(typeof t!="function"||r!==w)&&(t=dr(t,r,3)),e(n,t)}function ue(n,t){var r;if(typeof t!="function"){if(typeof n!="function")throw new Pe(L);var e=n;n=t,t=e}return function(){return 0<--n&&(r=t.apply(this,arguments)),1>=n&&(t=null),r}}function oe(n,t,r){function e(){var r=t-(wo()-c);0>=r||r>t?(f&&eu(f),r=p,f=s=p=w,r&&(h=wo(),a=n.apply(l,i),s||f||(i=l=null))):s=su(e,r)}function u(){s&&eu(s),f=s=p=w,(v||_!==t)&&(h=wo(),a=n.apply(l,i),s||f||(i=l=null))}function o(){if(i=arguments,c=wo(),l=this,p=v&&(s||!g),
!1===_)var r=g&&!s;else{f||g||(h=c);var o=_-(c-h),y=0>=o||o>_;y?(f&&(f=eu(f)),h=c,a=n.apply(l,i)):f||(f=su(u,o))}return y&&s?s=eu(s):s||t===_||(s=su(e,t)),r&&(y=true,a=n.apply(l,i)),!y||s||f||(i=l=null),a}var i,f,a,c,l,s,p,h=0,_=false,v=true;if(typeof n!="function")throw new Pe(L);if(t=0>t?0:+t||0,true===r)var g=true,v=false;else se(r)&&(g=r.leading,_="maxWait"in r&&bu(+r.maxWait||0,t),v="trailing"in r?r.trailing:v);return o.cancel=function(){s&&eu(s),f&&eu(f),f=s=p=w},o}function ie(n,t){function r(){var e=arguments,u=r.cache,o=t?t.apply(this,e):e[0];

return u.has(o)?u.get(o):(e=n.apply(this,e),u.set(o,e),e)}if(typeof n!="function"||t&&typeof t!="function")throw new Pe(L);return r.cache=new ie.Cache,r}function fe(n,t){if(typeof n!="function")throw new Pe(L);return t=bu(t===w?n.length-1:+t||0,0),function(){for(var r=arguments,e=-1,u=bu(r.length-t,0),o=Ue(u);++e<u;)o[e]=r[t+e];switch(t){case 0:return n.call(this,o);case 1:return n.call(this,r[0],o);case 2:return n.call(this,r[0],r[1],o)}for(u=Ue(t+1),e=-1;++e<t;)u[e]=r[e];return u[t]=o,n.apply(this,u);

}}function ae(n){return h(n)&&jr(n)&&Xe.call(n)==B}function ce(n){return!!n&&1===n.nodeType&&h(n)&&-1<Xe.call(n).indexOf("Element")}function le(n){return h(n)&&typeof n.message=="string"&&Xe.call(n)==q}function se(n){var t=typeof n;return"function"==t||!!n&&"object"==t}function pe(n){return null==n?false:Xe.call(n)==K?Qe.test(Ze.call(n)):h(n)&&En.test(n)}function he(n){return typeof n=="number"||h(n)&&Xe.call(n)==V}function _e(n){return h(n)&&Xe.call(n)==Z}function ve(n){return typeof n=="string"||h(n)&&Xe.call(n)==G;

}function ge(n){return h(n)&&Rr(n.length)&&!!Un[Xe.call(n)]}function ye(n){return et(n,me(n))}function de(n){return vt(n,me(n))}function me(n){if(null==n)return[];se(n)||(n=Be(n));for(var t=n.length,t=t&&Rr(t)&&(To(n)||Fu.nonEnumArgs&&ae(n))&&t||0,r=n.constructor,e=-1,r=typeof r=="function"&&r.prototype===n,u=Ue(t),o=0<t;++e<t;)u[e]=e+"";for(var i in n)o&&kr(i,t)||"constructor"==i&&(r||!Ge.call(n,i))||u.push(i);return u}function we(n){return Ut(n,Ko(n))}function be(n){return(n=u(n))&&n.replace(In,c).replace(xn,"");

}function xe(n){return(n=u(n))&&bn.test(n)?n.replace(wn,"\\$&"):n}function Ae(n,t,r){return r&&Or(n,t,r)&&(t=0),ku(n,t)}function je(n,t){var r="";if(n=u(n),t=+t,1>t||!n||!mu(t))return r;do t%2&&(r+=n),t=uu(t/2),n+=n;while(t);return r}function ke(n,t,r){var e=n;return(n=u(n))?(r?Or(e,t,r):null==t)?n.slice(g(n),y(n)+1):(t+="",n.slice(i(n,t),f(n,t)+1)):n}function Oe(n,t,r){return r&&Or(n,t,r)&&(t=null),n=u(n),n.match(t||Wn)||[]}function Ee(n,t,r){return r&&Or(n,t,r)&&(t=null),h(n)?Ce(n):ut(n,t)}function Ie(n){
return function(){return n}}function Re(n){return n}function Ce(n){return wt(ot(n,true))}function We(n,t,r){if(null==r){var e=se(t),u=e&&Ko(t);((u=u&&u.length&&vt(t,u))?u.length:e)||(u=false,r=t,t=n,n=this)}u||(u=vt(t,Ko(t)));var o=true,e=-1,i=No(n),f=u.length;false===r?o=false:se(r)&&"chain"in r&&(o=r.chain);for(;++e<f;){r=u[e];var a=t[r];n[r]=a,i&&(n.prototype[r]=function(t){return function(){var r=this.__chain__;if(o||r){var e=n(this.__wrapped__);return(e.__actions__=qn(this.__actions__)).push({func:t,args:arguments,
thisArg:n}),e.__chain__=r,e}return r=[this.value()],fu.apply(r,arguments),t.apply(n,r)}}(a))}return n}function Se(){}function Te(n){return Er(n)?At(n):jt(n)}_=_?Zn.defaults(Yn.Object(),_,Zn.pick(Yn,Tn)):Yn;var Ue=_.Array,Ne=_.Date,Fe=_.Error,$e=_.Function,Le=_.Math,ze=_.Number,Be=_.Object,Me=_.RegExp,De=_.String,Pe=_.TypeError,qe=Ue.prototype,Ke=Be.prototype,Ve=De.prototype,Ye=(Ye=_.window)&&Ye.document,Ze=$e.prototype.toString,Ge=Ke.hasOwnProperty,Je=0,Xe=Ke.toString,He=_._,Qe=Me("^"+xe(Xe).replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),nu=pe(nu=_.ArrayBuffer)&&nu,tu=pe(tu=nu&&new nu(0).slice)&&tu,ru=Le.ceil,eu=_.clearTimeout,uu=Le.floor,ou=pe(ou=Be.getOwnPropertySymbols)&&ou,iu=pe(iu=Be.getPrototypeOf)&&iu,fu=qe.push,au=pe(au=Be.preventExtensions)&&au,cu=Ke.propertyIsEnumerable,lu=pe(lu=_.Set)&&lu,su=_.setTimeout,pu=qe.splice,hu=pe(hu=_.Uint8Array)&&hu,_u=pe(_u=_.WeakMap)&&_u,vu=function(){
try{var n=pe(n=_.Float64Array)&&n,t=new n(new nu(10),0,1)&&n}catch(r){}return t}(),gu=function(){var n=au&&pe(n=Be.assign)&&n;try{if(n){var t=au({1:0});t[0]=1}}catch(r){try{n(t,"xo")}catch(e){}return!t[1]&&n}return false}(),yu=pe(yu=Ue.isArray)&&yu,du=pe(du=Be.create)&&du,mu=_.isFinite,wu=pe(wu=Be.keys)&&wu,bu=Le.max,xu=Le.min,Au=pe(Au=Ne.now)&&Au,ju=pe(ju=ze.isFinite)&&ju,ku=_.parseInt,Ou=Le.random,Eu=ze.NEGATIVE_INFINITY,Iu=ze.POSITIVE_INFINITY,Ru=Le.pow(2,32)-1,Cu=Ru-1,Wu=Ru>>>1,Su=vu?vu.BYTES_PER_ELEMENT:0,Tu=Le.pow(2,53)-1,Uu=_u&&new _u,Nu={},Fu=$n.support={};

!function(n){function t(){this.x=n}var r=arguments,e=[];t.prototype={valueOf:n,y:n};for(var u in new t)e.push(u);Fu.funcDecomp=/\bthis\b/.test(function(){return this}),Fu.funcNames=typeof $e.name=="string";try{Fu.dom=11===Ye.createDocumentFragment().nodeType}catch(o){Fu.dom=false}try{Fu.nonEnumArgs=!cu.call(r,1)}catch(i){Fu.nonEnumArgs=true}}(1,0),$n.templateSettings={escape:_n,evaluate:vn,interpolate:gn,variable:"",imports:{_:$n}};var $u=gu||function(n,t){return null==t?n:et(t,Zu(t),et(t,Ko(t),n))},Lu=function(){
function n(){}return function(t){if(se(t)){n.prototype=t;var r=new n;n.prototype=null}return r||_.Object()}}(),zu=Kt(ht),Bu=Kt(_t,true),Mu=Vt(),Du=Vt(true),Pu=Uu?function(n,t){return Uu.set(n,t),n}:Re;tu||(Bt=nu&&hu?function(n){var t=n.byteLength,r=vu?uu(t/Su):0,e=r*Su,u=new nu(t);if(r){var o=new vu(u,0,r);o.set(new vu(n,0,r))}return t!=e&&(o=new hu(u,e),o.set(new hu(n,e))),u}:Ie(null));var qu=du&&lu?function(n){return new Dn(n)}:Ie(null),Ku=Uu?function(n){return Uu.get(n)}:Se,Vu=function(){return Fu.funcNames?"constant"==Ie.name?At("name"):function(n){
for(var t=n.name,r=Nu[t],e=r?r.length:0;e--;){var u=r[e],o=u.func;if(null==o||o==n)return u.name}return t}:Ie("")}(),Yu=At("length"),Zu=ou?function(n){return ou(Fr(n))}:Ie([]),Gu=function(){var n=0,t=0;return function(r,e){var u=wo(),o=U-(u-t);if(t=u,0<o){if(++n>=T)return r}else n=0;return Pu(r,e)}}(),Ju=fe(function(n,t){return jr(n)?ft(n,st(t,false,true)):[]}),Xu=Qt(),Hu=Qt(true),Qu=fe(function(t,r){r=st(r);var e=rt(t,r);return kt(t,r.sort(n)),e}),no=pr(),to=pr(true),ro=fe(function(n){return Tt(st(n,false,true));

}),eo=fe(function(n,t){return jr(n)?ft(n,t):[]}),uo=fe(Vr),oo=fe(function(n){var t=n.length,r=n[t-2],e=n[t-1];return 2<t&&typeof r=="function"?t-=2:(r=1<t&&typeof e=="function"?(--t,e):w,e=w),n.length=t,Yr(n,r,e)}),io=fe(function(n,t){return rt(n,st(t))}),fo=Pt(function(n,t,r){Ge.call(n,r)?++n[r]:n[r]=1}),ao=Ht(zu),co=Ht(Bu,true),lo=rr(Kn,zu),so=rr(function(n,t){for(var r=n.length;r--&&false!==t(n[r],r,n););return n},Bu),po=Pt(function(n,t,r){Ge.call(n,r)?n[r].push(t):n[r]=[t]}),ho=Pt(function(n,t,r){
n[r]=t}),_o=fe(function(n,t,r){var e=-1,u=typeof t=="function",o=Er(t),i=jr(n)?Ue(n.length):[];return zu(n,function(n){var f=u?t:o&&null!=n&&n[t];i[++e]=f?f.apply(n,r):Ar(n,t,r)}),i}),vo=Pt(function(n,t,r){n[r?0:1].push(t)},function(){return[[],[]]}),go=ar(Xn,zu),yo=ar(function(n,t,r,e){var u=n.length;for(e&&u&&(r=n[--u]);u--;)r=t(r,n[u],u,n);return r},Bu),mo=fe(function(n,t){if(null==n)return[];var r=t[2];return r&&Or(t[0],t[1],r)&&(t.length=1),Wt(n,st(t),[])}),wo=Au||function(){return(new Ne).getTime();

},bo=fe(function(n,t,r){var e=x;if(r.length)var u=v(r,bo.placeholder),e=e|E;return hr(n,e,t,r,u)}),xo=fe(function(n,t){t=t.length?st(t):de(n);for(var r=-1,e=t.length;++r<e;){var u=t[r];n[u]=hr(n[u],x,n)}return n}),Ao=fe(function(n,t,r){var e=x|A;if(r.length)var u=v(r,Ao.placeholder),e=e|E;return hr(t,e,n,r,u)}),jo=Jt(k),ko=Jt(O),Oo=fe(function(n,t){return it(n,1,t)}),Eo=fe(function(n,t,r){return it(n,t,r)}),Io=tr(),Ro=tr(true),Co=fr(E),Wo=fr(I),So=fe(function(n,t){return hr(n,C,null,null,null,st(t));

}),To=yu||function(n){return h(n)&&Rr(n.length)&&Xe.call(n)==M};Fu.dom||(ce=function(n){return!!n&&1===n.nodeType&&h(n)&&!Fo(n)});var Uo=ju||function(n){return typeof n=="number"&&mu(n)},No=e(/x/)||hu&&!e(hu)?function(n){return Xe.call(n)==K}:e,Fo=iu?function(n){if(!n||Xe.call(n)!=Y)return false;var t=n.valueOf,r=pe(t)&&(r=iu(t))&&iu(r);return r?n==r||iu(n)==r:Tr(n)}:Tr,$o=qt(function(n,t,r){return r?tt(n,t,r):$u(n,t)}),Lo=fe(function(n){var t=n[0];return null==t?t:(n.push(Qn),$o.apply(w,n))}),zo=nr(ht),Bo=nr(_t),Mo=er(Mu),Do=er(Du),Po=ur(ht),qo=ur(_t),Ko=wu?function(n){
var t=null!=n&&n.constructor;return typeof t=="function"&&t.prototype===n||typeof n!="function"&&jr(n)?Ur(n):se(n)?wu(n):[]}:Ur,Vo=or(true),Yo=or(),Zo=qt(xt),Go=fe(function(n,t){if(null==n)return{};if("function"!=typeof t[0])return t=Jn(st(t),De),Wr(n,ft(me(n),t));var r=zt(t[0],t[1],3);return Sr(n,function(n,t,e){return!r(n,t,e)})}),Jo=fe(function(n,t){return null==n?{}:"function"==typeof t[0]?Sr(n,zt(t[0],t[1],3)):Wr(n,st(t))}),Xo=Zt(function(n,t,r){return t=t.toLowerCase(),n+(r?t.charAt(0).toUpperCase()+t.slice(1):t);

}),Ho=Zt(function(n,t,r){return n+(r?"-":"")+t.toLowerCase()}),Qo=ir(),ni=ir(true);8!=ku(Sn+"08")&&(Ae=function(n,t,r){return(r?Or(n,t,r):null==t)?t=0:t&&(t=+t),n=ke(n),ku(n,t||(On.test(n)?16:10))});var ti=Zt(function(n,t,r){return n+(r?"_":"")+t.toLowerCase()}),ri=Zt(function(n,t,r){return n+(r?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))}),ei=fe(function(n,t){try{return n.apply(w,t)}catch(r){return le(r)?r:new Fe(r)}}),ui=fe(function(n,t){return function(r){return Ar(r,n,t)}}),oi=fe(function(n,t){
return function(r){return Ar(n,r,t)}}),ii=Xt(function(n){for(var t=-1,r=n.length,e=Eu;++t<r;){var u=n[t];u>e&&(e=u)}return e}),fi=Xt(function(n){for(var t=-1,r=n.length,e=Iu;++t<r;){var u=n[t];u<e&&(e=u)}return e},true);return $n.prototype=Ln.prototype,zn.prototype=Lu(Ln.prototype),zn.prototype.constructor=zn,Bn.prototype=Lu(Ln.prototype),Bn.prototype.constructor=Bn,Mn.prototype["delete"]=function(n){return this.has(n)&&delete this.__data__[n]},Mn.prototype.get=function(n){return"__proto__"==n?w:this.__data__[n];

},Mn.prototype.has=function(n){return"__proto__"!=n&&Ge.call(this.__data__,n)},Mn.prototype.set=function(n,t){return"__proto__"!=n&&(this.__data__[n]=t),this},Dn.prototype.push=function(n){var t=this.data;typeof n=="string"||se(n)?t.set.add(n):t.hash[n]=true},ie.Cache=Mn,$n.after=function(n,t){if(typeof t!="function"){if(typeof n!="function")throw new Pe(L);var r=n;n=t,t=r}return n=mu(n=+n)?n:0,function(){return 1>--n?t.apply(this,arguments):void 0}},$n.ary=function(n,t,r){return r&&Or(n,t,r)&&(t=null),
t=n&&null==t?n.length:bu(+t||0,0),hr(n,R,null,null,null,null,t)},$n.assign=$o,$n.at=io,$n.before=ue,$n.bind=bo,$n.bindAll=xo,$n.bindKey=Ao,$n.callback=Ee,$n.chain=Gr,$n.chunk=function(n,t,r){t=(r?Or(n,t,r):null==t)?1:bu(+t||1,1),r=0;for(var e=n?n.length:0,u=-1,o=Ue(ru(e/t));r<e;)o[++u]=It(n,r,r+=t);return o},$n.compact=function(n){for(var t=-1,r=n?n.length:0,e=-1,u=[];++t<r;){var o=n[t];o&&(u[++e]=o)}return u},$n.constant=Ie,$n.countBy=fo,$n.create=function(n,t,r){var e=Lu(n);return r&&Or(n,t,r)&&(t=null),
t?$u(e,t):e},$n.curry=jo,$n.curryRight=ko,$n.debounce=oe,$n.defaults=Lo,$n.defer=Oo,$n.delay=Eo,$n.difference=Ju,$n.drop=zr,$n.dropRight=Br,$n.dropRightWhile=function(n,t,r){return n&&n.length?Nt(n,dr(t,r,3),true,true):[]},$n.dropWhile=function(n,t,r){return n&&n.length?Nt(n,dr(t,r,3),true):[]},$n.fill=function(n,t,r,e){var u=n?n.length:0;if(!u)return[];for(r&&typeof r!="number"&&Or(n,t,r)&&(r=0,e=u),u=n.length,r=null==r?0:+r||0,0>r&&(r=-r>u?0:u+r),e=e===w||e>u?u:+e||0,0>e&&(e+=u),u=r>e?0:e>>>0,r>>>=0;r<u;)n[r++]=t;

return n},$n.filter=Hr,$n.flatten=function(n,t,r){var e=n?n.length:0;return r&&Or(n,t,r)&&(t=false),e?st(n,t):[]},$n.flattenDeep=function(n){return n&&n.length?st(n,true):[]},$n.flow=Io,$n.flowRight=Ro,$n.forEach=lo,$n.forEachRight=so,$n.forIn=Mo,$n.forInRight=Do,$n.forOwn=Po,$n.forOwnRight=qo,$n.functions=de,$n.groupBy=po,$n.indexBy=ho,$n.initial=function(n){return Br(n,1)},$n.intersection=function(){for(var n=[],t=-1,e=arguments.length,u=[],o=mr(),i=o==r,f=[];++t<e;){var a=arguments[t];jr(a)&&(n.push(a),
u.push(i&&120<=a.length?qu(t&&a):null))}if(e=n.length,2>e)return f;var i=n[0],c=-1,l=i?i.length:0,s=u[0];n:for(;++c<l;)if(a=i[c],0>(s?Pn(s,a):o(f,a,0))){for(t=e;--t;){var p=u[t];if(0>(p?Pn(p,a):o(n[t],a,0)))continue n}s&&s.push(a),f.push(a)}return f},$n.invert=function(n,t,r){r&&Or(n,t,r)&&(t=null),r=-1;for(var e=Ko(n),u=e.length,o={};++r<u;){var i=e[r],f=n[i];t?Ge.call(o,f)?o[f].push(i):o[f]=[i]:o[f]=i}return o},$n.invoke=_o,$n.keys=Ko,$n.keysIn=me,$n.map=ne,$n.mapKeys=Vo,$n.mapValues=Yo,$n.matches=Ce,
$n.matchesProperty=function(n,t){return bt(n,ot(t,true))},$n.memoize=ie,$n.merge=Zo,$n.method=ui,$n.methodOf=oi,$n.mixin=We,$n.negate=function(n){if(typeof n!="function")throw new Pe(L);return function(){return!n.apply(this,arguments)}},$n.omit=Go,$n.once=function(n){return ue(2,n)},$n.pairs=function(n){for(var t=-1,r=Ko(n),e=r.length,u=Ue(e);++t<e;){var o=r[t];u[t]=[o,n[o]]}return u},$n.partial=Co,$n.partialRight=Wo,$n.partition=vo,$n.pick=Jo,$n.pluck=function(n,t){return ne(n,Te(t))},$n.property=Te,
$n.propertyOf=function(n){return function(t){return gt(n,$r(t),t+"")}},$n.pull=function(){var n=arguments,t=n[0];if(!t||!t.length)return t;for(var r=0,e=mr(),u=n.length;++r<u;)for(var o=0,i=n[r];-1<(o=e(t,i,o));)pu.call(t,o,1);return t},$n.pullAt=Qu,$n.range=function(n,t,r){r&&Or(n,t,r)&&(t=r=null),n=+n||0,r=null==r?1:+r||0,null==t?(t=n,n=0):t=+t||0;var e=-1;t=bu(ru((t-n)/(r||1)),0);for(var u=Ue(t);++e<t;)u[e]=n,n+=r;return u},$n.rearg=So,$n.reject=function(n,t,r){var e=To(n)?Gn:ct;return t=dr(t,r,3),
e(n,function(n,r,e){return!t(n,r,e)})},$n.remove=function(n,t,r){var e=[];if(!n||!n.length)return e;var u=-1,o=[],i=n.length;for(t=dr(t,r,3);++u<i;)r=n[u],t(r,u,n)&&(e.push(r),o.push(u));return kt(n,o),e},$n.rest=qr,$n.restParam=fe,$n.set=function(n,t,r){if(null==n)return n;var e=t+"";t=null!=n[e]||Er(t,n)?[e]:$r(t);for(var e=-1,u=t.length,o=u-1,i=n;null!=i&&++e<u;){var f=t[e];se(i)&&(e==o?i[f]=r:null==i[f]&&(i[f]=kr(t[e+1])?[]:{})),i=i[f]}return n},$n.shuffle=re,$n.slice=function(n,t,r){var e=n?n.length:0;

return e?(r&&typeof r!="number"&&Or(n,t,r)&&(t=0,r=e),It(n,t,r)):[]},$n.sortBy=function(n,t,r){if(null==n)return[];r&&Or(n,t,r)&&(t=null);var e=-1;return t=dr(t,r,3),n=mt(n,function(n,r,u){return{a:t(n,r,u),b:++e,c:n}}),Ct(n,a)},$n.sortByAll=mo,$n.sortByOrder=function(n,t,r,e){return null==n?[]:(e&&Or(t,r,e)&&(r=null),To(t)||(t=null==t?[]:[t]),To(r)||(r=null==r?[]:[r]),Wt(n,t,r))},$n.spread=function(n){if(typeof n!="function")throw new Pe(L);return function(t){return n.apply(this,t)}},$n.take=function(n,t,r){
return n&&n.length?((r?Or(n,t,r):null==t)&&(t=1),It(n,0,0>t?0:t)):[]},$n.takeRight=function(n,t,r){var e=n?n.length:0;return e?((r?Or(n,t,r):null==t)&&(t=1),t=e-(+t||0),It(n,0>t?0:t)):[]},$n.takeRightWhile=function(n,t,r){return n&&n.length?Nt(n,dr(t,r,3),false,true):[]},$n.takeWhile=function(n,t,r){return n&&n.length?Nt(n,dr(t,r,3)):[]},$n.tap=function(n,t,r){return t.call(r,n),n},$n.throttle=function(n,t,r){var e=true,u=true;if(typeof n!="function")throw new Pe(L);return false===r?e=false:se(r)&&(e="leading"in r?!!r.leading:e,
u="trailing"in r?!!r.trailing:u),Fn.leading=e,Fn.maxWait=+t,Fn.trailing=u,oe(n,t,Fn)},$n.thru=Jr,$n.times=function(n,t,r){if(n=uu(n),1>n||!mu(n))return[];var e=-1,u=Ue(xu(n,Ru));for(t=zt(t,r,1);++e<n;)e<Ru?u[e]=t(e):t(e);return u},$n.toArray=function(n){var t=n?Yu(n):0;return Rr(t)?t?qn(n):[]:we(n)},$n.toPlainObject=ye,$n.transform=function(n,t,r,e){var u=To(n)||ge(n);return t=dr(t,e,4),null==r&&(u||se(n)?(e=n.constructor,r=u?To(n)?new e:[]:Lu(No(e)&&e.prototype)):r={}),(u?Kn:ht)(n,function(n,e,u){
return t(r,n,e,u)}),r},$n.union=ro,$n.uniq=Kr,$n.unzip=Vr,$n.unzipWith=Yr,$n.values=we,$n.valuesIn=function(n){return Ut(n,me(n))},$n.where=function(n,t){return Hr(n,wt(t))},$n.without=eo,$n.wrap=function(n,t){return t=null==t?Re:t,hr(t,E,null,[n],[])},$n.xor=function(){for(var n=-1,t=arguments.length;++n<t;){var r=arguments[n];if(jr(r))var e=e?ft(e,r).concat(ft(r,e)):r}return e?Tt(e):[]},$n.zip=uo,$n.zipObject=Zr,$n.zipWith=oo,$n.backflow=Ro,$n.collect=ne,$n.compose=Ro,$n.each=lo,$n.eachRight=so,
$n.extend=$o,$n.iteratee=Ee,$n.methods=de,$n.object=Zr,$n.select=Hr,$n.tail=qr,$n.unique=Kr,We($n,$n),$n.add=function(n,t){return(+n||0)+(+t||0)},$n.attempt=ei,$n.camelCase=Xo,$n.capitalize=function(n){return(n=u(n))&&n.charAt(0).toUpperCase()+n.slice(1)},$n.clone=function(n,t,r,e){return t&&typeof t!="boolean"&&Or(n,t,r)?t=false:typeof t=="function"&&(e=r,r=t,t=false),r=typeof r=="function"&&zt(r,e,1),ot(n,t,r)},$n.cloneDeep=function(n,t,r){return t=typeof t=="function"&&zt(t,r,1),ot(n,true,t)},$n.deburr=be,
$n.endsWith=function(n,t,r){n=u(n),t+="";var e=n.length;return r=r===w?e:xu(0>r?0:+r||0,e),r-=t.length,0<=r&&n.indexOf(t,r)==r},$n.escape=function(n){return(n=u(n))&&hn.test(n)?n.replace(sn,l):n},$n.escapeRegExp=xe,$n.every=Xr,$n.find=ao,$n.findIndex=Xu,$n.findKey=zo,$n.findLast=co,$n.findLastIndex=Hu,$n.findLastKey=Bo,$n.findWhere=function(n,t){return ao(n,wt(t))},$n.first=Mr,$n.get=function(n,t,r){return n=null==n?w:gt(n,$r(t),t+""),n===w?r:n},$n.has=function(n,t){if(null==n)return false;var r=Ge.call(n,t);

return r||Er(t)||(t=$r(t),n=1==t.length?n:gt(n,It(t,0,-1)),t=Pr(t),r=null!=n&&Ge.call(n,t)),r},$n.identity=Re,$n.includes=Qr,$n.indexOf=Dr,$n.inRange=function(n,t,r){return t=+t||0,"undefined"===typeof r?(r=t,t=0):r=+r||0,n>=xu(t,r)&&n<bu(t,r)},$n.isArguments=ae,$n.isArray=To,$n.isBoolean=function(n){return true===n||false===n||h(n)&&Xe.call(n)==D},$n.isDate=function(n){return h(n)&&Xe.call(n)==P},$n.isElement=ce,$n.isEmpty=function(n){return null==n?true:jr(n)&&(To(n)||ve(n)||ae(n)||h(n)&&No(n.splice))?!n.length:!Ko(n).length;

},$n.isEqual=function(n,t,r,e){return r=typeof r=="function"&&zt(r,e,3),!r&&Cr(n)&&Cr(t)?n===t:(e=r?r(n,t):w,e===w?yt(n,t,r):!!e)},$n.isError=le,$n.isFinite=Uo,$n.isFunction=No,$n.isMatch=function(n,t,r,e){var u=Ko(t),o=u.length;if(!o)return true;if(null==n)return false;if(r=typeof r=="function"&&zt(r,e,3),n=Fr(n),!r&&1==o){var i=u[0];if(e=t[i],Cr(e))return e===n[i]&&(e!==w||i in n)}for(var i=Ue(o),f=Ue(o);o--;)e=i[o]=t[u[o]],f[o]=Cr(e);return dt(n,u,i,f,r)},$n.isNaN=function(n){return he(n)&&n!=+n},$n.isNative=pe,
$n.isNull=function(n){return null===n},$n.isNumber=he,$n.isObject=se,$n.isPlainObject=Fo,$n.isRegExp=_e,$n.isString=ve,$n.isTypedArray=ge,$n.isUndefined=function(n){return n===w},$n.kebabCase=Ho,$n.last=Pr,$n.lastIndexOf=function(n,t,r){var e=n?n.length:0;if(!e)return-1;var u=e;if(typeof r=="number")u=(0>r?bu(e+r,0):xu(r||0,e-1))+1;else if(r)return u=$t(n,t,true)-1,n=n[u],(t===t?t===n:n!==n)?u:-1;if(t!==t)return p(n,u,true);for(;u--;)if(n[u]===t)return u;return-1},$n.max=ii,$n.min=fi,$n.noConflict=function(){
return _._=He,this},$n.noop=Se,$n.now=wo,$n.pad=function(n,t,r){n=u(n),t=+t;var e=n.length;return e<t&&mu(t)?(e=(t-e)/2,t=uu(e),e=ru(e),r=lr("",e,r),r.slice(0,t)+n+r):n},$n.padLeft=Qo,$n.padRight=ni,$n.parseInt=Ae,$n.random=function(n,t,r){r&&Or(n,t,r)&&(t=r=null);var e=null==n,u=null==t;return null==r&&(u&&typeof n=="boolean"?(r=n,n=1):typeof t=="boolean"&&(r=t,u=true)),e&&u&&(t=1,u=false),n=+n||0,u?(t=n,n=0):t=+t||0,r||n%1||t%1?(r=Ou(),xu(n+r*(t-n+parseFloat("1e-"+((r+"").length-1))),t)):Ot(n,t)},$n.reduce=go,
$n.reduceRight=yo,$n.repeat=je,$n.result=function(n,t,r){var e=null==n?w:n[t];return e===w&&(null==n||Er(t,n)||(t=$r(t),n=1==t.length?n:gt(n,It(t,0,-1)),e=null==n?w:n[Pr(t)]),e=e===w?r:e),No(e)?e.call(n):e},$n.runInContext=m,$n.size=function(n){var t=n?Yu(n):0;return Rr(t)?t:Ko(n).length},$n.snakeCase=ti,$n.some=ee,$n.sortedIndex=no,$n.sortedLastIndex=to,$n.startCase=ri,$n.startsWith=function(n,t,r){return n=u(n),r=null==r?0:xu(0>r?0:+r||0,n.length),n.lastIndexOf(t,r)==r},$n.sum=function(n,t,r){r&&Or(n,t,r)&&(t=null);

var e=dr(),u=null==t;if(e===ut&&u||(u=false,t=e(t,r,3)),u){for(n=To(n)?n:Nr(n),t=n.length,r=0;t--;)r+=+n[t]||0;n=r}else n=St(n,t);return n},$n.template=function(n,t,r){var e=$n.templateSettings;r&&Or(n,t,r)&&(t=r=null),n=u(n),t=tt($u({},r||t),e,nt),r=tt($u({},t.imports),e.imports,nt);var o,i,f=Ko(r),a=Ut(r,f),c=0;r=t.interpolate||Rn;var l="__p+='";r=Me((t.escape||Rn).source+"|"+r.source+"|"+(r===gn?jn:Rn).source+"|"+(t.evaluate||Rn).source+"|$","g");var p="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";

if(n.replace(r,function(t,r,e,u,f,a){return e||(e=u),l+=n.slice(c,a).replace(Cn,s),r&&(o=true,l+="'+__e("+r+")+'"),f&&(i=true,l+="';"+f+";\n__p+='"),e&&(l+="'+((__t=("+e+"))==null?'':__t)+'"),c=a+t.length,t}),l+="';",(t=t.variable)||(l="with(obj){"+l+"}"),l=(i?l.replace(fn,""):l).replace(an,"$1").replace(cn,"$1;"),l="function("+(t||"obj")+"){"+(t?"":"obj||(obj={});")+"var __t,__p=''"+(o?",__e=_.escape":"")+(i?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+l+"return __p}",
t=ei(function(){return $e(f,p+"return "+l).apply(w,a)}),t.source=l,le(t))throw t;return t},$n.trim=ke,$n.trimLeft=function(n,t,r){var e=n;return(n=u(n))?n.slice((r?Or(e,t,r):null==t)?g(n):i(n,t+"")):n},$n.trimRight=function(n,t,r){var e=n;return(n=u(n))?(r?Or(e,t,r):null==t)?n.slice(0,y(n)+1):n.slice(0,f(n,t+"")+1):n},$n.trunc=function(n,t,r){r&&Or(n,t,r)&&(t=null);var e=W;if(r=S,null!=t)if(se(t)){var o="separator"in t?t.separator:o,e="length"in t?+t.length||0:e;r="omission"in t?u(t.omission):r}else e=+t||0;

if(n=u(n),e>=n.length)return n;if(e-=r.length,1>e)return r;if(t=n.slice(0,e),null==o)return t+r;if(_e(o)){if(n.slice(e).search(o)){var i,f=n.slice(0,e);for(o.global||(o=Me(o.source,(kn.exec(o)||"")+"g")),o.lastIndex=0;n=o.exec(f);)i=n.index;t=t.slice(0,null==i?e:i)}}else n.indexOf(o,e)!=e&&(o=t.lastIndexOf(o),-1<o&&(t=t.slice(0,o)));return t+r},$n.unescape=function(n){return(n=u(n))&&pn.test(n)?n.replace(ln,d):n},$n.uniqueId=function(n){var t=++Je;return u(n)+t},$n.words=Oe,$n.all=Xr,$n.any=ee,$n.contains=Qr,
$n.detect=ao,$n.foldl=go,$n.foldr=yo,$n.head=Mr,$n.include=Qr,$n.inject=go,We($n,function(){var n={};return ht($n,function(t,r){$n.prototype[r]||(n[r]=t)}),n}(),false),$n.sample=te,$n.prototype.sample=function(n){return this.__chain__||null!=n?this.thru(function(t){return te(t,n)}):te(this.value())},$n.VERSION=b,Kn("bind bindKey curry curryRight partial partialRight".split(" "),function(n){$n[n].placeholder=$n}),Kn(["dropWhile","filter","map","takeWhile"],function(n,t){var r=t!=$,e=t==N;Bn.prototype[n]=function(n,u){
var o=this.__filtered__,i=o&&e?new Bn(this):this.clone();return(i.__iteratees__||(i.__iteratees__=[])).push({done:false,count:0,index:0,iteratee:dr(n,u,1),limit:-1,type:t}),i.__filtered__=o||r,i}}),Kn(["drop","take"],function(n,t){var r=n+"While";Bn.prototype[n]=function(r){var e=this.__filtered__,u=e&&!t?this.dropWhile():this.clone();return r=null==r?1:bu(uu(r)||0,0),e?t?u.__takeCount__=xu(u.__takeCount__,r):Pr(u.__iteratees__).limit=r:(u.__views__||(u.__views__=[])).push({size:r,type:n+(0>u.__dir__?"Right":"")
}),u},Bn.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()},Bn.prototype[n+"RightWhile"]=function(n,t){return this.reverse()[r](n,t).reverse()}}),Kn(["first","last"],function(n,t){var r="take"+(t?"Right":"");Bn.prototype[n]=function(){return this[r](1).value()[0]}}),Kn(["initial","rest"],function(n,t){var r="drop"+(t?"":"Right");Bn.prototype[n]=function(){return this[r](1)}}),Kn(["pluck","where"],function(n,t){var r=t?"filter":"map",e=t?wt:Te;Bn.prototype[n]=function(n){return this[r](e(n));

}}),Bn.prototype.compact=function(){return this.filter(Re)},Bn.prototype.reject=function(n,t){return n=dr(n,t,1),this.filter(function(t){return!n(t)})},Bn.prototype.slice=function(n,t){n=null==n?0:+n||0;var r=this;return 0>n?r=this.takeRight(-n):n&&(r=this.drop(n)),t!==w&&(t=+t||0,r=0>t?r.dropRight(-t):r.take(t-n)),r},Bn.prototype.toArray=function(){return this.drop(0)},ht(Bn.prototype,function(n,t){var r=$n[t];if(r){var e=/^(?:filter|map|reject)|While$/.test(t),u=/^(?:first|last)$/.test(t);$n.prototype[t]=function(){
function t(n){return n=[n],fu.apply(n,o),r.apply($n,n)}var o=arguments,i=this.__chain__,f=this.__wrapped__,a=!!this.__actions__.length,c=f instanceof Bn,l=o[0],s=c||To(f);return s&&e&&typeof l=="function"&&1!=l.length&&(c=s=false),c=c&&!a,u&&!i?c?n.call(f):r.call($n,this.value()):s?(f=n.apply(c?f:new Bn(this),o),u||!a&&!f.__actions__||(f.__actions__||(f.__actions__=[])).push({func:Jr,args:[t],thisArg:$n}),new zn(f,i)):this.thru(t)}}}),Kn("concat join pop push replace shift sort splice split unshift".split(" "),function(n){
var t=(/^(?:replace|split)$/.test(n)?Ve:qe)[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:join|pop|replace|shift)$/.test(n);$n.prototype[n]=function(){var n=arguments;return e&&!this.__chain__?t.apply(this.value(),n):this[r](function(r){return t.apply(r,n)})}}),ht(Bn.prototype,function(n,t){var r=$n[t];if(r){var e=r.name;(Nu[e]||(Nu[e]=[])).push({name:t,func:r})}}),Nu[cr(null,A).name]=[{name:"wrapper",func:null}],Bn.prototype.clone=function(){var n=this.__actions__,t=this.__iteratees__,r=this.__views__,e=new Bn(this.__wrapped__);

return e.__actions__=n?qn(n):null,e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=t?qn(t):null,e.__takeCount__=this.__takeCount__,e.__views__=r?qn(r):null,e},Bn.prototype.reverse=function(){if(this.__filtered__){var n=new Bn(this);n.__dir__=-1,n.__filtered__=true}else n=this.clone(),n.__dir__*=-1;return n},Bn.prototype.value=function(){var n=this.__wrapped__.value();if(!To(n))return Ft(n,this.__actions__);var t,r=this.__dir__,e=0>r;t=n.length;for(var u=this.__views__,o=0,i=-1,f=u?u.length:0;++i<f;){
var a=u[i],c=a.size;switch(a.type){case"drop":o+=c;break;case"dropRight":t-=c;break;case"take":t=xu(t,o+c);break;case"takeRight":o=bu(o,t-c)}}t={start:o,end:t},u=t.start,o=t.end,t=o-u,u=e?o:u-1,o=xu(t,this.__takeCount__),f=(i=this.__iteratees__)?i.length:0,a=0,c=[];n:for(;t--&&a<o;){for(var u=u+r,l=-1,s=n[u];++l<f;){var p=i[l],h=p.iteratee,_=p.type;if(_==N){if(p.done&&(e?u>p.index:u<p.index)&&(p.count=0,p.done=false),p.index=u,!(p.done||(_=p.limit,p.done=-1<_?p.count++>=_:!h(s))))continue n}else if(p=h(s),
_==$)s=p;else if(!p){if(_==F)continue n;break n}}c[a++]=s}return c},$n.prototype.chain=function(){return Gr(this)},$n.prototype.commit=function(){return new zn(this.value(),this.__chain__)},$n.prototype.plant=function(n){for(var t,r=this;r instanceof Ln;){var e=Lr(r);t?u.__wrapped__=e:t=e;var u=e,r=r.__wrapped__}return u.__wrapped__=n,t},$n.prototype.reverse=function(){var n=this.__wrapped__;return n instanceof Bn?(this.__actions__.length&&(n=new Bn(this)),new zn(n.reverse(),this.__chain__)):this.thru(function(n){
return n.reverse()})},$n.prototype.toString=function(){return this.value()+""},$n.prototype.run=$n.prototype.toJSON=$n.prototype.valueOf=$n.prototype.value=function(){return Ft(this.__wrapped__,this.__actions__)},$n.prototype.collect=$n.prototype.map,$n.prototype.head=$n.prototype.first,$n.prototype.select=$n.prototype.filter,$n.prototype.tail=$n.prototype.rest,$n}var w,b="3.8.0",x=1,A=2,j=4,k=8,O=16,E=32,I=64,R=128,C=256,W=30,S="...",T=150,U=16,N=0,F=1,$=2,L="Expected a function",z="__lodash_placeholder__",B="[object Arguments]",M="[object Array]",D="[object Boolean]",P="[object Date]",q="[object Error]",K="[object Function]",V="[object Number]",Y="[object Object]",Z="[object RegExp]",G="[object String]",J="[object ArrayBuffer]",X="[object Float32Array]",H="[object Float64Array]",Q="[object Int8Array]",nn="[object Int16Array]",tn="[object Int32Array]",rn="[object Uint8Array]",en="[object Uint8ClampedArray]",un="[object Uint16Array]",on="[object Uint32Array]",fn=/\b__p\+='';/g,an=/\b(__p\+=)''\+/g,cn=/(__e\(.*?\)|\b__t\))\+'';/g,ln=/&(?:amp|lt|gt|quot|#39|#96);/g,sn=/[&<>"'`]/g,pn=RegExp(ln.source),hn=RegExp(sn.source),_n=/<%-([\s\S]+?)%>/g,vn=/<%([\s\S]+?)%>/g,gn=/<%=([\s\S]+?)%>/g,yn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,dn=/^\w*$/,mn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,wn=/[.*+?^${}()|[\]\/\\]/g,bn=RegExp(wn.source),xn=/[\u0300-\u036f\ufe20-\ufe23]/g,An=/\\(\\)?/g,jn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,kn=/\w*$/,On=/^0[xX]/,En=/^\[object .+?Constructor\]$/,In=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,Rn=/($^)/,Cn=/['\n\r\u2028\u2029\\]/g,Wn=RegExp("[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?=[A-Z\\xc0-\\xd6\\xd8-\\xde][a-z\\xdf-\\xf6\\xf8-\\xff]+)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+|[A-Z\\xc0-\\xd6\\xd8-\\xde]+|[0-9]+","g"),Sn=" \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000",Tn="Array ArrayBuffer Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Math Number Object RegExp Set String _ clearTimeout document isFinite parseInt setTimeout TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap window".split(" "),Un={};

Un[X]=Un[H]=Un[Q]=Un[nn]=Un[tn]=Un[rn]=Un[en]=Un[un]=Un[on]=true,Un[B]=Un[M]=Un[J]=Un[D]=Un[P]=Un[q]=Un[K]=Un["[object Map]"]=Un[V]=Un[Y]=Un[Z]=Un["[object Set]"]=Un[G]=Un["[object WeakMap]"]=false;var Nn={};Nn[B]=Nn[M]=Nn[J]=Nn[D]=Nn[P]=Nn[X]=Nn[H]=Nn[Q]=Nn[nn]=Nn[tn]=Nn[V]=Nn[Y]=Nn[Z]=Nn[G]=Nn[rn]=Nn[en]=Nn[un]=Nn[on]=true,Nn[q]=Nn[K]=Nn["[object Map]"]=Nn["[object Set]"]=Nn["[object WeakMap]"]=false;var Fn={leading:false,maxWait:0,trailing:false},$n={"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A",
"\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u",
"\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss"},Ln={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},zn={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},Bn={"function":true,object:true},Mn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Dn=Bn[typeof exports]&&exports&&!exports.nodeType&&exports,Pn=Bn[typeof module]&&module&&!module.nodeType&&module,qn=Bn[typeof self]&&self&&self.Object&&self,Kn=Bn[typeof window]&&window&&window.Object&&window,Vn=Pn&&Pn.exports===Dn&&Dn,Yn=Dn&&Pn&&typeof global=="object"&&global&&global.Object&&global||Kn!==(this&&this.window)&&Kn||qn||this,Zn=m();

typeof define=="function"&&typeof define.amd=="object"&&define.amd?(Yn._=Zn, define(function(){return Zn})):Dn&&Pn?Vn?(Pn.exports=Zn)._=Zn:Dn._=Zn:Yn._=Zn}).call(this);
/*!
   angular-block-ui v0.2.0
   (c) 2015 (null) McNull https://github.com/McNull/angular-block-ui
   License: MIT
*/
!function(t){function e(e){try{t.module(e)}catch(n){return!1}return!0}function n(t,n,o){function c(){t.$on("$locationChangeStart",function(t){n.$_blockLocationChange&&n.state().blockCount>0&&t.preventDefault()}),t.$on("$locationChangeSuccess",function(){n.$_blockLocationChange=o.blockBrowserNavigation})}if(o.blockBrowserNavigation)if(e("ngRoute"))var r=t.$on("$viewContentLoaded",function(){r(),c()});else c()}var o=t.module("blockUI",[]);o.config(["$provide","$httpProvider",function(t,e){t.decorator("$exceptionHandler",["$delegate","$injector",function(t,e){var n,o;return function(c,r){if(o=o||e.get("blockUIConfig"),o.resetOnException)try{n=n||e.get("blockUI"),n.instances.reset()}catch(i){console.log("$exceptionHandler",c)}t(c,r)}}]),e.interceptors.push("blockUIHttpInterceptor")}]),o.run(["$document","blockUIConfig","$templateCache",function(t,e,n){e.autoInjectBodyBlock&&t.find("body").attr("block-ui","main"),e.template&&(e.templateUrl="$$block-ui-template$$",n.put(e.templateUrl,e.template))}]),o.config(["$provide",function(t){t.decorator("$location",c)}]);var c=["$delegate","blockUI","blockUIConfig",function(e,n,o){function c(t){var o=e[t];e[t]=function(){var t=o.apply(e,arguments);return t===e&&(n.$_blockLocationChange=!1),t}}if(o.blockBrowserNavigation){n.$_blockLocationChange=!0;var r=["url","path","search","hash","state"];t.forEach(r,c)}return e}];o.directive("blockUiContainer",["blockUIConfig","blockUiContainerLinkFn",function(t,e){return{scope:!0,restrict:"A",templateUrl:t.templateUrl,compile:function(){return e}}}]).factory("blockUiContainerLinkFn",["blockUI","blockUIUtils",function(){return function(t,e){var n=e.inheritedData("block-ui");if(!n)throw new Error("No parent block-ui service instance located.");t.state=n.state()}}]),o.directive("blockUi",["blockUiCompileFn",function(t){return{scope:!0,restrict:"A",compile:t}}]).factory("blockUiCompileFn",["blockUiPreLinkFn",function(t){return function(e){return e.append('<div block-ui-container class="block-ui-container"></div>'),{pre:t}}}]).factory("blockUiPreLinkFn",["blockUI","blockUIUtils","blockUIConfig",function(t,e,o){return function(c,r,i){r.hasClass("block-ui")||r.addClass(o.cssClass),i.$observe("blockUiMessageClass",function(t){c.$_blockUiMessageClass=t});var a=i.blockUi||"_"+c.$id,l=t.instances.get(a);if("main"===a)n(c,l,o);else{var s=r.inheritedData("block-ui");s&&(l._parent=s)}c.$on("$destroy",function(){l.release()}),l.addRef(),c.$_blockUiState=l.state(),c.$watch("$_blockUiState.blocking",function(t){r.attr("aria-busy",!!t),r.toggleClass("block-ui-visible",!!t)}),c.$watch("$_blockUiState.blockCount > 0",function(t){r.toggleClass("block-ui-active",!!t)});var u=i.blockUiPattern;if(u){var f=e.buildRegExp(u);l.pattern(f)}r.data("block-ui",l)}}]),o.constant("blockUIConfig",{templateUrl:"angular-block-ui/angular-block-ui.ng.html",delay:250,message:"Loading ...",autoBlock:!0,resetOnException:!0,requestFilter:t.noop,autoInjectBodyBlock:!0,cssClass:"block-ui block-ui-anim-fade",blockBrowserNavigation:!1}),o.factory("blockUIHttpInterceptor",["$q","$injector","blockUIConfig","$templateCache",function(t,e,n,o){function c(){a=a||e.get("blockUI")}function r(t){n.autoBlock&&t&&!t.$_noBlock&&t.$_blocks&&(c(),t.$_blocks.stop())}function i(e){try{r(e.config)}catch(n){console.log("httpRequestError",n)}return t.reject(e)}var a;return{request:function(t){if(n.autoBlock&&("GET"!=t.method||!o.get(t.url))){var e=n.requestFilter(t);e===!1?t.$_noBlock=!0:(c(),t.$_blocks=a.instances.locate(t),t.$_blocks.start(e))}return t},requestError:i,response:function(t){return t&&r(t.config),t},responseError:i}}]),o.factory("blockUI",["blockUIConfig","$timeout","blockUIUtils","$document",function(e,n,o,c){function r(r){var a,s=this,u={id:r,blockCount:0,message:e.message,blocking:!1},f=[];this._id=r,this._refs=0,this.start=function(r){r=u.blockCount>0?r||u.message||e.message:r||e.message,u.message=r,u.blockCount++;var i=t.element(c[0].activeElement);i.length&&o.isElementInBlockScope(i,s)&&(s._restoreFocus=i[0],n(function(){s._restoreFocus&&s._restoreFocus.blur()})),a||(a=n(function(){a=null,u.blocking=!0},e.delay))},this._cancelStartTimeout=function(){a&&(n.cancel(a),a=null)},this.stop=function(){u.blockCount=Math.max(0,--u.blockCount),0===u.blockCount&&s.reset(!0)},this.message=function(t){u.message=t},this.pattern=function(t){return void 0!==t&&(s._pattern=t),s._pattern},this.reset=function(e){s._cancelStartTimeout(),u.blockCount=0,u.blocking=!1,!s._restoreFocus||c[0].activeElement&&c[0].activeElement!==i[0]||(s._restoreFocus.focus(),s._restoreFocus=null);try{e&&t.forEach(f,function(t){t()})}finally{f.length=0}},this.done=function(t){f.push(t)},this.state=function(){return u},this.addRef=function(){s._refs+=1},this.release=function(){--s._refs<=0&&l.instances._destroy(s)}}var i=c.find("body"),a=[];a.get=function(t){if(!isNaN(t))throw new Error("BlockUI id cannot be a number");var e=a[t];return e||(e=a[t]=new r(t),a.push(e)),e},a._destroy=function(e){if(t.isString(e)&&(e=a[e]),e){e.reset();var n=o.indexOf(a,e);a.splice(n,1),delete a[e.state().id]}},a.locate=function(t){var e=[];o.forEachFnHook(e,"start"),o.forEachFnHook(e,"stop");for(var n=a.length;n--;){var c=a[n],r=c._pattern;r&&r.test(t.url)&&e.push(c)}return 0===e.length&&e.push(l),e},o.forEachFnHook(a,"reset");var l=a.get("main");return l.addRef(),l.instances=a,l}]),o.factory("blockUIUtils",function(){var e=t.element,n={buildRegExp:function(t){var e,n=t.match(/^\/(.*)\/([gim]*)$/);if(!n)throw Error("Incorrect regular expression format: "+t);return e=new RegExp(n[1],n[2])},forEachFn:function(t,e,n){for(var o=t.length;o--;){var c=t[o];c[e].apply(c,n)}},forEachFnHook:function(t,e){t[e]=function(){n.forEachFn(this,e,arguments)}},isElementInBlockScope:function(t,e){for(var n=t.inheritedData("block-ui");n;){if(n===e)return!0;n=n._parent}return!1},findElement:function(t,o,c){var r=null;if(o(t))r=t;else{var i;i=c?t.parent():t.children();for(var a=i.length;!r&&a--;)r=n.findElement(e(i[a]),o,c)}return r},indexOf:function(t,e,n){for(var o=n||0,c=t.length;c>o;o++)if(t[o]===e)return o;return-1}};return n}),t.module("blockUI").run(["$templateCache",function(t){t.put("angular-block-ui/angular-block-ui.ng.html",'<div class="block-ui-overlay"></div><div class="block-ui-message-container" aria-live="assertive" aria-atomic="true"><div class="block-ui-message" ng-class="$_blockUiMessageClass">{{ state.message }}</div></div>')}])}(angular);

/**
 * angular-growl-v2 - v0.7.3 - 2015-01-05
 * http://janstevens.github.io/angular-growl-2
 * Copyright (c) 2015 Marco Rinck,Jan Stevens; Licensed MIT
 */
angular.module("angular-growl",[]),angular.module("angular-growl").directive("growl",[function(){"use strict";return{restrict:"A",templateUrl:"templates/growl/growl.html",replace:!1,scope:{reference:"@",inline:"=",limitMessages:"="},controller:["$scope","$timeout","growl","growlMessages",function(a,b,c,d){a.referenceId=a.reference||0,d.initDirective(a.referenceId,a.limitMessages),a.growlMessages=d,a.inlineMessage=angular.isDefined(a.inline)?a.inline:c.inlineMessages(),a.$watch("limitMessages",function(b){var c=d.directives[a.referenceId];angular.isUndefined(b)||angular.isUndefined(c)||(c.limitMessages=b)}),a.stopTimeoutClose=function(a){a.clickToClose||(angular.forEach(a.promises,function(a){b.cancel(a)}),a.close?d.deleteMessage(a):a.close=!0)},a.alertClasses=function(a){return{"alert-success":"success"===a.severity,"alert-error":"error"===a.severity,"alert-danger":"error"===a.severity,"alert-info":"info"===a.severity,"alert-warning":"warning"===a.severity,icon:a.disableIcons===!1,"alert-dismissable":!a.disableCloseButton}},a.showCountDown=function(a){return!a.disableCountDown&&a.ttl>0},a.wrapperClasses=function(){var b={};return b["growl-fixed"]=!a.inlineMessage,b[c.position()]=!0,b},a.computeTitle=function(a){var b={success:"Success",error:"Error",info:"Information",warn:"Warning"};return b[a.severity]}}]}}]),angular.module("angular-growl").run(["$templateCache",function(a){"use strict";void 0===a.get("templates/growl/growl.html")&&a.put("templates/growl/growl.html",'<div class="growl-container" ng-class="wrapperClasses()"><div class="growl-item alert" ng-repeat="message in growlMessages.directives[referenceId].messages" ng-class="alertClasses(message)" ng-click="stopTimeoutClose(message)"><button type="button" class="close" data-dismiss="alert" aria-hidden="true" ng-click="growlMessages.deleteMessage(message)" ng-show="!message.disableCloseButton">&times;</button><button type="button" class="close" aria-hidden="true" ng-show="showCountDown(message)">{{message.countdown}}</button><h4 class="growl-title" ng-show="message.title" ng-bind="message.title"></h4><div class="growl-message" ng-bind-html="message.text"></div></div></div>')}]),angular.module("angular-growl").provider("growl",function(){"use strict";var a={success:null,error:null,warning:null,info:null},b="messages",c="text",d="title",e="severity",f=!0,g="variables",h=0,i=!1,j="top-right",k=!1,l=!1,m=!1,n=!1,o=!0;this.globalTimeToLive=function(b){if("object"==typeof b)for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);else for(var d in a)a.hasOwnProperty(d)&&(a[d]=b)},this.globalTranslateMessages=function(a){o=a},this.globalDisableCloseButton=function(a){k=a},this.globalDisableIcons=function(a){l=a},this.globalReversedOrder=function(a){m=a},this.globalDisableCountDown=function(a){n=a},this.messageVariableKey=function(a){g=a},this.globalInlineMessages=function(a){i=a},this.globalPosition=function(a){j=a},this.messagesKey=function(a){b=a},this.messageTextKey=function(a){c=a},this.messageTitleKey=function(a){d=a},this.messageSeverityKey=function(a){e=a},this.onlyUniqueMessages=function(a){f=a},this.serverMessagesInterceptor=["$q","growl",function(a,c){function d(a){void 0!==a&&a.data[b]&&a.data[b].length>0&&c.addServerMessages(a.data[b])}return{response:function(a){return d(a),a},responseError:function(b){return d(b),a.reject(b)}}}],this.$get=["$rootScope","$interpolate","$sce","$filter","$timeout","growlMessages",function(b,p,q,r,s,t){function u(a){if(G&&a.translateMessage)a.text=G(a.text,a.variables);else{var c=p(a.text);a.text=c(a.variables)}var d=t.addMessage(a);return b.$broadcast("growlMessage",a),s(function(){},0),d}function v(b,c,d){var e,f=c||{};return e={text:b,title:f.title,severity:d,ttl:f.ttl||a[d],variables:f.variables||{},disableCloseButton:void 0===f.disableCloseButton?k:f.disableCloseButton,disableIcons:void 0===f.disableIcons?l:f.disableIcons,disableCountDown:void 0===f.disableCountDown?n:f.disableCountDown,position:f.position||j,referenceId:f.referenceId||h,translateMessage:void 0===f.translateMessage?o:f.translateMessage,destroy:function(){t.deleteMessage(e)},setText:function(a){e.text=q.trustAsHtml(String(a))},onclose:f.onclose,onopen:f.onopen},u(e)}function w(a,b){return v(a,b,"warning")}function x(a,b){return v(a,b,"error")}function y(a,b){return v(a,b,"info")}function z(a,b){return v(a,b,"success")}function A(a,b,c){c=(c||"error").toLowerCase(),v(a,b,c)}function B(a){if(a&&a.length){var b,f,h,i;for(i=a.length,b=0;i>b;b++)if(f=a[b],f[c]){h=(f[e]||"error").toLowerCase();var j={};j.variables=f[g]||{},j.title=f[d],v(f[c],j,h)}}}function C(){return f}function D(){return m}function E(){return i}function F(){return j}var G;t.onlyUnique=f,t.reverseOrder=m;try{G=r("translate")}catch(H){}return{warning:w,error:x,info:y,success:z,general:A,addServerMessages:B,onlyUnique:C,reverseOrder:D,inlineMessages:E,position:F}}]}),angular.module("angular-growl").service("growlMessages",["$sce","$timeout",function(a,b){"use strict";function c(a){var b;return b=d[a]?d[a]:d[a]={messages:[]}}this.directives={};var d={};this.initDirective=function(a,b){return d[a]?(this.directives[a]=d[a],this.directives[a].limitMessages=b):this.directives[a]={messages:[],limitMessages:b},this.directives[a]},this.getAllMessages=function(a){a=a||0;var b;return b=this.directives[a]?this.directives[a].messages:[]},this.destroyAllMessages=function(a){var b=this.getAllMessages(a),c=b.length;for(c-1;c>=0;c--)b[c].destroy();this.directives[a]&&(this.directives[a].messages=[])},this.addMessage=function(d){var e,f,g,h;if(e=this.directives[d.referenceId]?this.directives[d.referenceId]:c(d.referenceId),f=e.messages,!this.onlyUnique||(angular.forEach(f,function(b){h=a.getTrustedHtml(b.text),d.text===h&&d.severity===b.severity&&d.title===b.title&&(g=!0)}),!g)){if(d.text=a.trustAsHtml(String(d.text)),d.ttl&&-1!==d.ttl&&(d.countdown=d.ttl/1e3,d.promises=[],d.close=!1,d.countdownFunction=function(){d.countdown>1?(d.countdown--,d.promises.push(b(d.countdownFunction,1e3))):d.countdown--}),angular.isDefined(e.limitMessages)){var i=f.length-(e.limitMessages-1);i>0&&f.splice(e.limitMessages-1,i)}return this.reverseOrder?f.unshift(d):f.push(d),"function"==typeof d.onopen&&d.onopen(),d.ttl&&-1!==d.ttl&&(d.promises.push(b(angular.bind(this,function(){this.deleteMessage(d)}),d.ttl)),d.promises.push(b(d.countdownFunction,1e3))),d}},this.deleteMessage=function(a){var b=this.directives[a.referenceId].messages,c=b.indexOf(a);c>-1&&(b[c].close=!0,b.splice(c,1)),"function"==typeof a.onclose&&a.onclose()}}]);
/*! ng-dialog - v0.3.12 (https://github.com/likeastore/ngDialog) */
!function(a,b){"undefined"!=typeof module&&module.exports?module.exports=b(require("angular")):"function"==typeof define&&define.amd?define(["angular"],b):b(a.angular)}(this,function(a){"use strict";var b,c=a.module("ngDialog",[]),d=a.element,e=a.isDefined,f=(document.body||document.documentElement).style,g=e(f.animation)||e(f.WebkitAnimation)||e(f.MozAnimation)||e(f.MsAnimation)||e(f.OAnimation),h="animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend",i=!1;return c.provider("ngDialog",function(){var c=this.defaults={className:"ngdialog-theme-default",plain:!1,showClose:!0,closeByDocument:!0,closeByEscape:!0,closeByNavigation:!1,appendTo:!1,preCloseCallback:!1,overlay:!0,cache:!0};this.setForceBodyReload=function(a){i=a||!1},this.setDefaults=function(b){a.extend(c,b)};var e,f=0,j=0,k={};this.$get=["$document","$templateCache","$compile","$q","$http","$rootScope","$timeout","$window","$controller",function(l,m,n,o,p,q,r,s,t){var u=l.find("body");i&&q.$on("$locationChangeSuccess",function(){u=l.find("body")});var v={onDocumentKeydown:function(a){27===a.keyCode&&w.close("$escape")},setBodyPadding:function(a){var b=parseInt(u.css("padding-right")||0,10);u.css("padding-right",b+a+"px"),u.data("ng-dialog-original-padding",b)},resetBodyPadding:function(){var a=u.data("ng-dialog-original-padding");a?u.css("padding-right",a+"px"):u.css("padding-right","")},performCloseDialog:function(a,c){var d=a.attr("id");if("undefined"!=typeof s.Hammer){var f=b.hammerTime;f.off("tap",e),f.destroy&&f.destroy(),delete b.hammerTime}else a.unbind("click");1===j&&u.unbind("keydown"),a.hasClass("ngdialog-closing")||(j-=1),q.$broadcast("ngDialog.closing",a),j=0>j?0:j,g?(b.$destroy(),a.unbind(h).bind(h,function(){a.remove(),0===j&&(u.removeClass("ngdialog-open"),v.resetBodyPadding()),q.$broadcast("ngDialog.closed",a)}).addClass("ngdialog-closing")):(b.$destroy(),a.remove(),0===j&&(u.removeClass("ngdialog-open"),v.resetBodyPadding()),q.$broadcast("ngDialog.closed",a)),k[d]&&(k[d].resolve({id:d,value:c,$dialog:a,remainingDialogs:j}),delete k[d])},closeDialog:function(b,c){var d=b.data("$ngDialogPreCloseCallback");if(d&&a.isFunction(d)){var e=d.call(b,c);a.isObject(e)?e.closePromise?e.closePromise.then(function(){v.performCloseDialog(b,c)}):e.then(function(){v.performCloseDialog(b,c)},function(){}):e!==!1&&v.performCloseDialog(b,c)}else v.performCloseDialog(b,c)}},w={open:function(g){function h(a,b){return p.get(a,b||{}).then(function(a){return a.data||""})}function i(b){return b?a.isString(b)&&x.plain?b:"boolean"!=typeof x.cache||x.cache?m.get(b)||h(b,{cache:!0}):h(b,{cache:!1}):"Empty template"}var l=this,x=a.copy(c);g=g||{},a.extend(x,g),f+=1,l.latestID="ngdialog"+f;var y;k[l.latestID]=y=o.defer(),b=a.isObject(x.scope)?x.scope.$new():q.$new();var z,A;return o.when(i(x.template||x.templateUrl)).then(function(c){if(m.put(x.template||x.templateUrl,c),x.showClose&&(c+='<div class="ngdialog-close"></div>'),l.$result=z=d('<div id="ngdialog'+f+'" class="ngdialog"></div>'),z.html(x.overlay?'<div class="ngdialog-overlay"></div><div class="ngdialog-content">'+c+"</div>":'<div class="ngdialog-content">'+c+"</div>"),x.data&&a.isString(x.data)){var g=x.data.replace(/^\s*/,"")[0];b.ngDialogData="{"===g||"["===g?a.fromJson(x.data):x.data}else x.data&&a.isObject(x.data)&&(b.ngDialogData=x.data);if(x.controller&&(a.isString(x.controller)||a.isArray(x.controller)||a.isFunction(x.controller))){var h=t(x.controller,{$scope:b,$element:z});z.data("$ngDialogControllerController",h)}if(x.className&&z.addClass(x.className),A=x.appendTo&&a.isString(x.appendTo)?a.element(document.querySelector(x.appendTo)):u,x.preCloseCallback){var i;a.isFunction(x.preCloseCallback)?i=x.preCloseCallback:a.isString(x.preCloseCallback)&&b&&(a.isFunction(b[x.preCloseCallback])?i=b[x.preCloseCallback]:b.$parent&&a.isFunction(b.$parent[x.preCloseCallback])?i=b.$parent[x.preCloseCallback]:q&&a.isFunction(q[x.preCloseCallback])&&(i=q[x.preCloseCallback])),i&&z.data("$ngDialogPreCloseCallback",i)}if(b.closeThisDialog=function(a){v.closeDialog(z,a)},r(function(){n(z)(b);var a=s.innerWidth-u.prop("clientWidth");u.addClass("ngdialog-open");var c=a-(s.innerWidth-u.prop("clientWidth"));c>0&&v.setBodyPadding(c),A.append(z),x.name?q.$broadcast("ngDialog.opened",{dialog:z,name:x.name}):q.$broadcast("ngDialog.opened",z)}),x.closeByEscape&&u.bind("keydown",v.onDocumentKeydown),x.closeByNavigation&&q.$on("$locationChangeSuccess",function(){v.closeDialog(z)}),e=function(a){var b=x.closeByDocument?d(a.target).hasClass("ngdialog-overlay"):!1,c=d(a.target).hasClass("ngdialog-close");(b||c)&&w.close(z.attr("id"),c?"$closeButton":"$document")},"undefined"!=typeof s.Hammer){var k=b.hammerTime=s.Hammer(z[0]);k.on("tap",e)}else z.bind("click",e);return j+=1,w}),{id:"ngdialog"+f,closePromise:y.promise,close:function(a){v.closeDialog(z,a)}}},openConfirm:function(b){var c=o.defer(),e={closeByEscape:!1,closeByDocument:!1};a.extend(e,b),e.scope=a.isObject(e.scope)?e.scope.$new():q.$new(),e.scope.confirm=function(a){c.resolve(a);var b=d(document.getElementById(f.id));v.performCloseDialog(b,a)};var f=w.open(e);return f.closePromise.then(function(a){return a?c.reject(a.value):c.reject()}),c.promise},close:function(a,b){var c=d(document.getElementById(a));return c.length?v.closeDialog(c,b):w.closeAll(b),w},closeAll:function(b){var c=document.querySelectorAll(".ngdialog");a.forEach(c,function(a){v.closeDialog(d(a),b)})},getDefaults:function(){return c}};return w}]}),c.directive("ngDialog",["ngDialog",function(b){return{restrict:"A",scope:{ngDialogScope:"="},link:function(c,d,e){d.on("click",function(d){d.preventDefault();var f=a.isDefined(c.ngDialogScope)?c.ngDialogScope:"noScope";a.isDefined(e.ngDialogClosePrevious)&&b.close(e.ngDialogClosePrevious);var g=b.getDefaults();b.open({template:e.ngDialog,className:e.ngDialogClass||g.className,controller:e.ngDialogController,scope:f,data:e.ngDialogData,showClose:"false"===e.ngDialogShowClose?!1:"true"===e.ngDialogShowClose?!0:g.showClose,closeByDocument:"false"===e.ngDialogCloseByDocument?!1:"true"===e.ngDialogCloseByDocument?!0:g.closeByDocument,closeByEscape:"false"===e.ngDialogCloseByEscape?!1:"true"===e.ngDialogCloseByEscape?!0:g.closeByEscape,preCloseCallback:e.ngDialogPreCloseCallback||g.preCloseCallback})})}}}]),c});
/**
 * dirPagination - AngularJS module for paginating (almost) anything.
 *
 *
 * Credits
 * =======
 *
 * Daniel Tabuenca: https://groups.google.com/d/msg/angular/an9QpzqIYiM/r8v-3W1X5vcJ
 * for the idea on how to dynamically invoke the ng-repeat directive.
 *
 * I borrowed a couple of lines and a few attribute names from the AngularUI Bootstrap project:
 * https://github.com/angular-ui/bootstrap/blob/master/src/pagination/pagination.js
 *
 * Copyright 2014 Michael Bromley <michael@michaelbromley.co.uk>
 */

(function() {

    /**
     * Config
     */
    var moduleName = 'angularUtils.directives.dirPagination';
    var DEFAULT_ID = '__default';

    /**
     * Module
     */
    var module;
    try {
        module = angular.module(moduleName);
    } catch(err) {
        // named module does not exist, so create one
        module = angular.module(moduleName, []);
    }

    module
        .directive('dirPaginate', ['$compile', '$parse', 'paginationService', dirPaginateDirective])
        .directive('dirPaginateNoCompile', noCompileDirective)
        .directive('dirPaginationControls', ['paginationService', 'paginationTemplate', dirPaginationControlsDirective])
        .filter('itemsPerPage', ['paginationService', itemsPerPageFilter])
        .service('paginationService', paginationService)
        .provider('paginationTemplate', paginationTemplateProvider)
        .run(['$templateCache',dirPaginationControlsTemplateInstaller]);

    function dirPaginateDirective($compile, $parse, paginationService) {

        return  {
            terminal: true,
            multiElement: true,
            compile: dirPaginationCompileFn
        };

        function dirPaginationCompileFn(tElement, tAttrs){

            var expression = tAttrs.dirPaginate;
            // regex taken directly from https://github.com/angular/angular.js/blob/master/src/ng/directive/ngRepeat.js#L211
            var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

            var filterPattern = /\|\s*itemsPerPage\s*:[^|]*/;
            if (match[2].match(filterPattern) === null) {
                throw 'pagination directive: the \'itemsPerPage\' filter must be set.';
            }
            var itemsPerPageFilterRemoved = match[2].replace(filterPattern, '');
            var collectionGetter = $parse(itemsPerPageFilterRemoved);

            addNoCompileAttributes(tElement);

            // If any value is specified for paginationId, we register the un-evaluated expression at this stage for the benefit of any
            // dir-pagination-controls directives that may be looking for this ID.
            var rawId = tAttrs.paginationId || DEFAULT_ID;
            paginationService.registerInstance(rawId);

            return function dirPaginationLinkFn(scope, element, attrs){

                // Now that we have access to the `scope` we can interpolate any expression given in the paginationId attribute and
                // potentially register a new ID if it evaluates to a different value than the rawId.
                var paginationId = $parse(attrs.paginationId)(scope) || attrs.paginationId || DEFAULT_ID;
                paginationService.registerInstance(paginationId);

                var repeatExpression = getRepeatExpression(expression, paginationId);
                addNgRepeatToElement(element, attrs, repeatExpression);

                removeTemporaryAttributes(element);
                var compiled =  $compile(element);

                var currentPageGetter = makeCurrentPageGetterFn(scope, attrs, paginationId);
                paginationService.setCurrentPageParser(paginationId, currentPageGetter, scope);

                if (typeof attrs.totalItems !== 'undefined') {
                    paginationService.setAsyncModeTrue(paginationId);
                    scope.$watch(function() {
                        return $parse(attrs.totalItems)(scope);
                    }, function (result) {
                        if (0 <= result) {
                            paginationService.setCollectionLength(paginationId, result);
                        }
                    });
                } else {
                    scope.$watchCollection(function() {
                        return collectionGetter(scope);
                    }, function(collection) {
                        if (collection) {
                            paginationService.setCollectionLength(paginationId, collection.length);
                        }
                    });
                }

                // Delegate to the link function returned by the new compilation of the ng-repeat
                compiled(scope);
            };
        }

        /**
         * If a pagination id has been specified, we need to check that it is present as the second argument passed to
         * the itemsPerPage filter. If it is not there, we add it and return the modified expression.
         *
         * @param expression
         * @param paginationId
         * @returns {*}
         */
        function getRepeatExpression(expression, paginationId) {
            var repeatExpression,
                idDefinedInFilter = !!expression.match(/(\|\s*itemsPerPage\s*:[^|]*:[^|]*)/);

            if (paginationId !== DEFAULT_ID && !idDefinedInFilter) {
                repeatExpression = expression.replace(/(\|\s*itemsPerPage\s*:[^|]*)/, "$1 : '" + paginationId + "'");
            } else {
                repeatExpression = expression;
            }

            return repeatExpression;
        }

        /**
         * Adds the ng-repeat directive to the element. In the case of multi-element (-start, -end) it adds the
         * appropriate multi-element ng-repeat to the first and last element in the range.
         * @param element
         * @param attrs
         * @param repeatExpression
         */
        function addNgRepeatToElement(element, attrs, repeatExpression) {
            if (element[0].hasAttribute('dir-paginate-start') || element[0].hasAttribute('data-dir-paginate-start')) {
                // using multiElement mode (dir-paginate-start, dir-paginate-end)
                attrs.$set('ngRepeatStart', repeatExpression);
                element.eq(element.length - 1).attr('ng-repeat-end', true);
            } else {
                attrs.$set('ngRepeat', repeatExpression);
            }
        }

        /**
         * Adds the dir-paginate-no-compile directive to each element in the tElement range.
         * @param tElement
         */
        function addNoCompileAttributes(tElement) {
            angular.forEach(tElement, function(el) {
                if (el.nodeType === Node.ELEMENT_NODE) {
                    angular.element(el).attr('dir-paginate-no-compile', true);
                }
            });
        }

        /**
         * Removes the variations on dir-paginate (data-, -start, -end) and the dir-paginate-no-compile directives.
         * @param element
         */
        function removeTemporaryAttributes(element) {
            angular.forEach(element, function(el) {
                if (el.nodeType === Node.ELEMENT_NODE) {
                    angular.element(el).removeAttr('dir-paginate-no-compile');
                }
            });
            element.eq(0).removeAttr('dir-paginate-start').removeAttr('dir-paginate').removeAttr('data-dir-paginate-start').removeAttr('data-dir-paginate');
            element.eq(element.length - 1).removeAttr('dir-paginate-end').removeAttr('data-dir-paginate-end');
        }

        /**
         * Creates a getter function for the current-page attribute, using the expression provided or a default value if
         * no current-page expression was specified.
         *
         * @param scope
         * @param attrs
         * @param paginationId
         * @returns {*}
         */
        function makeCurrentPageGetterFn(scope, attrs, paginationId) {
            var currentPageGetter;
            if (attrs.currentPage) {
                currentPageGetter = $parse(attrs.currentPage);
            } else {
                // if the current-page attribute was not set, we'll make our own
                var defaultCurrentPage = paginationId + '__currentPage';
                scope[defaultCurrentPage] = 1;
                currentPageGetter = $parse(defaultCurrentPage);
            }
            return currentPageGetter;
        }
    }

    /**
     * This is a helper directive that allows correct compilation when in multi-element mode (ie dir-paginate-start, dir-paginate-end).
     * It is dynamically added to all elements in the dir-paginate compile function, and it prevents further compilation of
     * any inner directives. It is then removed in the link function, and all inner directives are then manually compiled.
     */
    function noCompileDirective() {
        return {
            priority: 5000,
            terminal: true
        };
    }

    function dirPaginationControlsTemplateInstaller($templateCache) {
        $templateCache.put('angularUtils.directives.dirPagination.template', '<ul class="pagination" ng-if="1 < pages.length"><li ng-if="boundaryLinks" ng-class="{ disabled : pagination.current == 1 }"><a href="" ng-click="setCurrent(1)">&laquo;</a></li><li ng-if="directionLinks" ng-class="{ disabled : pagination.current == 1 }"><a href="" ng-click="setCurrent(pagination.current - 1)">&lsaquo;</a></li><li ng-repeat="pageNumber in pages track by $index" ng-class="{ active : pagination.current == pageNumber, disabled : pageNumber == \'...\' }"><a href="" ng-click="setCurrent(pageNumber)">{{ pageNumber }}</a></li><li ng-if="directionLinks" ng-class="{ disabled : pagination.current == pagination.last }"><a href="" ng-click="setCurrent(pagination.current + 1)">&rsaquo;</a></li><li ng-if="boundaryLinks"  ng-class="{ disabled : pagination.current == pagination.last }"><a href="" ng-click="setCurrent(pagination.last)">&raquo;</a></li></ul>');
    }

    function dirPaginationControlsDirective(paginationService, paginationTemplate) {

        var numberRegex = /^\d+$/;

        return {
            restrict: 'AE',
            templateUrl: function(elem, attrs) {
                return attrs.templateUrl || paginationTemplate.getPath();
            },
            scope: {
                maxSize: '=?',
                onPageChange: '&?',
                paginationId: '=?'
            },
            link: dirPaginationControlsLinkFn
        };

        function dirPaginationControlsLinkFn(scope, element, attrs) {

            // rawId is the un-interpolated value of the pagination-id attribute. This is only important when the corresponding dir-paginate directive has
            // not yet been linked (e.g. if it is inside an ng-if block), and in that case it prevents this controls directive from assuming that there is
            // no corresponding dir-paginate directive and wrongly throwing an exception.
            var rawId = attrs.paginationId ||  DEFAULT_ID;
            var paginationId = scope.paginationId || attrs.paginationId ||  DEFAULT_ID;

            if (!paginationService.isRegistered(paginationId) && !paginationService.isRegistered(rawId)) {
                var idMessage = (paginationId !== DEFAULT_ID) ? ' (id: ' + paginationId + ') ' : ' ';
                throw 'pagination directive: the pagination controls' + idMessage + 'cannot be used without the corresponding pagination directive.';
            }

            if (!scope.maxSize) { scope.maxSize = 9; }
            scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : true;
            scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : false;

            var paginationRange = Math.max(scope.maxSize, 5);
            scope.pages = [];
            scope.pagination = {
                last: 1,
                current: 1
            };
            scope.range = {
                lower: 1,
                upper: 1,
                total: 1
            };

            scope.$watch(function() {
                return (paginationService.getCollectionLength(paginationId) + 1) * paginationService.getItemsPerPage(paginationId);
            }, function(length) {
                if (0 < length) {
                    generatePagination();
                }
            });

            scope.$watch(function() {
                return (paginationService.getItemsPerPage(paginationId));
            }, function(current, previous) {
                if (current != previous && typeof previous !== 'undefined') {
                    goToPage(scope.pagination.current);
                }
            });

            scope.$watch(function() {
                return paginationService.getCurrentPage(paginationId);
            }, function(currentPage, previousPage) {
                if (currentPage != previousPage) {
                    goToPage(currentPage);
                }
            });

            scope.setCurrent = function(num) {
                if (isValidPageNumber(num)) {
                    num = parseInt(num, 10);
                    paginationService.setCurrentPage(paginationId, num);
                }
            };

            function goToPage(num) {
                if (isValidPageNumber(num)) {
                    scope.pages = generatePagesArray(num, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);
                    scope.pagination.current = num;
                    updateRangeValues();

                    // if a callback has been set, then call it with the page number as an argument
                    if (scope.onPageChange) {
                        scope.onPageChange({ newPageNumber : num });
                    }
                }
            }

            function generatePagination() {
                var page = parseInt(paginationService.getCurrentPage(paginationId)) || 1;

                scope.pages = generatePagesArray(page, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);
                scope.pagination.current = page;
                scope.pagination.last = scope.pages[scope.pages.length - 1];
                if (scope.pagination.last < scope.pagination.current) {
                    scope.setCurrent(scope.pagination.last);
                } else {
                    updateRangeValues();
                }
            }

            /**
             * This function updates the values (lower, upper, total) of the `scope.range` object, which can be used in the pagination
             * template to display the current page range, e.g. "showing 21 - 40 of 144 results";
             */
            function updateRangeValues() {
                var currentPage = paginationService.getCurrentPage(paginationId),
                    itemsPerPage = paginationService.getItemsPerPage(paginationId),
                    totalItems = paginationService.getCollectionLength(paginationId);

                scope.range.lower = (currentPage - 1) * itemsPerPage + 1;
                scope.range.upper = Math.min(currentPage * itemsPerPage, totalItems);
                scope.range.total = totalItems;
            }

            function isValidPageNumber(num) {
                return (numberRegex.test(num) && (0 < num && num <= scope.pagination.last));
            }
        }

        /**
         * Generate an array of page numbers (or the '...' string) which is used in an ng-repeat to generate the
         * links used in pagination
         *
         * @param currentPage
         * @param rowsPerPage
         * @param paginationRange
         * @param collectionLength
         * @returns {Array}
         */
        function generatePagesArray(currentPage, collectionLength, rowsPerPage, paginationRange) {
            var pages = [];
            var totalPages = Math.ceil(collectionLength / rowsPerPage);
            var halfWay = Math.ceil(paginationRange / 2);
            var position;

            if (currentPage <= halfWay) {
                position = 'start';
            } else if (totalPages - halfWay < currentPage) {
                position = 'end';
            } else {
                position = 'middle';
            }

            var ellipsesNeeded = paginationRange < totalPages;
            var i = 1;
            while (i <= totalPages && i <= paginationRange) {
                var pageNumber = calculatePageNumber(i, currentPage, paginationRange, totalPages);

                var openingEllipsesNeeded = (i === 2 && (position === 'middle' || position === 'end'));
                var closingEllipsesNeeded = (i === paginationRange - 1 && (position === 'middle' || position === 'start'));
                if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                    pages.push('...');
                } else {
                    pages.push(pageNumber);
                }
                i ++;
            }
            return pages;
        }

        /**
         * Given the position in the sequence of pagination links [i], figure out what page number corresponds to that position.
         *
         * @param i
         * @param currentPage
         * @param paginationRange
         * @param totalPages
         * @returns {*}
         */
        function calculatePageNumber(i, currentPage, paginationRange, totalPages) {
            var halfWay = Math.ceil(paginationRange/2);
            if (i === paginationRange) {
                return totalPages;
            } else if (i === 1) {
                return i;
            } else if (paginationRange < totalPages) {
                if (totalPages - halfWay < currentPage) {
                    return totalPages - paginationRange + i;
                } else if (halfWay < currentPage) {
                    return currentPage - halfWay + i;
                } else {
                    return i;
                }
            } else {
                return i;
            }
        }
    }

    /**
     * This filter slices the collection into pages based on the current page number and number of items per page.
     * @param paginationService
     * @returns {Function}
     */
    function itemsPerPageFilter(paginationService) {

        return function(collection, itemsPerPage, paginationId) {
            if (typeof (paginationId) === 'undefined') {
                paginationId = DEFAULT_ID;
            }
            if (!paginationService.isRegistered(paginationId)) {
                throw 'pagination directive: the itemsPerPage id argument (id: ' + paginationId + ') does not match a registered pagination-id.';
            }
            var end;
            var start;
            if (collection instanceof Array) {
                itemsPerPage = parseInt(itemsPerPage) || 9999999999;
                if (paginationService.isAsyncMode(paginationId)) {
                    start = 0;
                } else {
                    start = (paginationService.getCurrentPage(paginationId) - 1) * itemsPerPage;
                }
                end = start + itemsPerPage;
                paginationService.setItemsPerPage(paginationId, itemsPerPage);

                return collection.slice(start, end);
            } else {
                return collection;
            }
        };
    }

    /**
     * This service allows the various parts of the module to communicate and stay in sync.
     */
    function paginationService() {

        var instances = {};
        var lastRegisteredInstance;

        this.registerInstance = function(instanceId) {
            if (typeof instances[instanceId] === 'undefined') {
                instances[instanceId] = {
                    asyncMode: false
                };
                lastRegisteredInstance = instanceId;
            }
        };

        this.isRegistered = function(instanceId) {
            return (typeof instances[instanceId] !== 'undefined');
        };

        this.getLastInstanceId = function() {
            return lastRegisteredInstance;
        };

        this.setCurrentPageParser = function(instanceId, val, scope) {
            instances[instanceId].currentPageParser = val;
            instances[instanceId].context = scope;
        };
        this.setCurrentPage = function(instanceId, val) {
            instances[instanceId].currentPageParser.assign(instances[instanceId].context, val);
        };
        this.getCurrentPage = function(instanceId) {
            var parser = instances[instanceId].currentPageParser;
            return parser ? parser(instances[instanceId].context) : 1;
        };

        this.setItemsPerPage = function(instanceId, val) {
            instances[instanceId].itemsPerPage = val;
        };
        this.getItemsPerPage = function(instanceId) {
            return instances[instanceId].itemsPerPage;
        };

        this.setCollectionLength = function(instanceId, val) {
            instances[instanceId].collectionLength = val;
        };
        this.getCollectionLength = function(instanceId) {
            return instances[instanceId].collectionLength;
        };

        this.setAsyncModeTrue = function(instanceId) {
            instances[instanceId].asyncMode = true;
        };

        this.isAsyncMode = function(instanceId) {
            return instances[instanceId].asyncMode;
        };
    }

    /**
     * This provider allows global configuration of the template path used by the dir-pagination-controls directive.
     */
    function paginationTemplateProvider() {

        var templatePath = 'angularUtils.directives.dirPagination.template';

        this.setPath = function(path) {
            templatePath = path;
        };

        this.$get = function() {
            return {
                getPath: function() {
                    return templatePath;
                }
            };
        };
    }
})();

(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_GB/sdk.js#xfbml=1&version=v2.3&appId=974128875939093";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-64257630-1', 'auto');
ga('send', 'pageview');
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mr.doob / http://mrdoob.com/
 */

var Detector = {

	canvas: !! window.CanvasRenderingContext2D,
	webgl: ( function () { try { var canvas = document.createElement( 'canvas' ); return !! window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) ); } catch( e ) { return false; } } )(),
	workers: !! window.Worker,
	fileapi: window.File && window.FileReader && window.FileList && window.Blob,

	getWebGLErrorMessage: function () {

		var element = document.createElement( 'div' );
		element.id = 'webgl-error-message';
		element.style.fontFamily = 'monospace';
		element.style.fontSize = '13px';
		element.style.fontWeight = 'normal';
		element.style.textAlign = 'center';
		element.style.background = '#fff';
		element.style.color = '#000';
		element.style.padding = '1.5em';
		element.style.width = '400px';
		element.style.margin = '5em auto 0';

		if ( ! this.webgl ) {

			element.innerHTML = window.WebGLRenderingContext ? [
				'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />',
				'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
			].join( '\n' ) : [
				'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>',
				'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
			].join( '\n' );

		}

		return element;

	},

	addGetWebGLMessage: function ( parameters ) {

		var parent, id, element;

		parameters = parameters || {};

		parent = parameters.parent !== undefined ? parameters.parent : document.body;
		id = parameters.id !== undefined ? parameters.id : 'oldie';

		element = Detector.getWebGLErrorMessage();
		element.id = id;

		parent.appendChild( element );

	}

};
// threejs.org/license
'use strict';var THREE={REVISION:"71"};"object"===typeof module&&(module.exports=THREE);void 0===Math.sign&&(Math.sign=function(a){return 0>a?-1:0<a?1:+a});THREE.log=function(){console.log.apply(console,arguments)};THREE.warn=function(){console.warn.apply(console,arguments)};THREE.error=function(){console.error.apply(console,arguments)};THREE.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2};THREE.CullFaceNone=0;THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;
THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;
THREE.MinEquation=103;THREE.MaxEquation=104;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=300;THREE.CubeReflectionMapping=301;THREE.CubeRefractionMapping=302;
THREE.EquirectangularReflectionMapping=303;THREE.EquirectangularRefractionMapping=304;THREE.SphericalReflectionMapping=305;THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;
THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.HalfFloatType=1025;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;THREE.RGBEFormat=THREE.RGBAFormat;THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;THREE.RGBA_S3TC_DXT3_Format=2003;
THREE.RGBA_S3TC_DXT5_Format=2004;THREE.RGB_PVRTC_4BPPV1_Format=2100;THREE.RGB_PVRTC_2BPPV1_Format=2101;THREE.RGBA_PVRTC_4BPPV1_Format=2102;THREE.RGBA_PVRTC_2BPPV1_Format=2103;
THREE.Projector=function(){THREE.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");this.projectVector=function(a,b){THREE.warn("THREE.Projector: .projectVector() is now vector.project().");a.project(b)};this.unprojectVector=function(a,b){THREE.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");a.unproject(b)};this.pickingRay=function(a,b){THREE.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}};
THREE.CanvasRenderer=function(){THREE.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");this.domElement=document.createElement("canvas");this.clear=function(){};this.render=function(){};this.setClearColor=function(){};this.setSize=function(){}};THREE.Color=function(a){return 3===arguments.length?this.setRGB(arguments[0],arguments[1],arguments[2]):this.set(a)};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){a instanceof THREE.Color?this.copy(a):"number"===typeof a?this.setHex(a):"string"===typeof a&&this.setStyle(a);return this},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(a,b,c){if(0===b)this.r=this.g=this.b=c;else{var d=function(a,b,c){0>c&&(c+=1);1<c&&(c-=1);return c<1/6?a+6*(b-a)*
c:.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a};b=.5>=c?c*(1+b):c+b-c*b;c=2*c-b;this.r=d(c,b,a+1/3);this.g=d(c,b,a);this.b=d(c,b,a-1/3)}return this},setStyle:function(a){if(/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test(a))return a=/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec(a),this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,this;if(/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test(a))return a=/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec(a),this.r=
Math.min(100,parseInt(a[1],10))/100,this.g=Math.min(100,parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,this;if(/^\#([0-9a-f]{6})$/i.test(a))return a=/^\#([0-9a-f]{6})$/i.exec(a),this.setHex(parseInt(a[1],16)),this;if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))return a=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a),this.setHex(parseInt(a[1]+a[1]+a[2]+a[2]+a[3]+a[3],16)),this;if(/^(\w+)$/i.test(a))return this.setHex(THREE.ColorKeywords[a]),this},copy:function(a){this.r=a.r;this.g=
a.g;this.b=a.b;return this},copyGammaToLinear:function(a,b){void 0===b&&(b=2);this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,b);return this},copyLinearToGamma:function(a,b){void 0===b&&(b=2);var c=0<b?1/b:1;this.r=Math.pow(a.r,c);this.g=Math.pow(a.g,c);this.b=Math.pow(a.b,c);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=
Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){a=a||{h:0,s:0,l:0};var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,h=(f+e)/2;if(f===e)f=g=0;else{var k=e-f,f=.5>=h?k/(e+f):k/(2-e-f);switch(e){case b:g=(c-d)/k+(c<d?6:0);break;case c:g=(d-b)/k+2;break;case d:g=(b-c)/k+4}g/=6}a.h=g;a.s=f;a.l=h;return a},getStyle:function(){return"rgb("+
(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;
return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a){this.r=a[0];this.g=a[1];this.b=a[2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.r;a[b+1]=this.g;a[b+2]=this.b;return a},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};
THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,
tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,_x:0,_y:0,_z:0,_w:0,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get w(){return this._w},set w(a){this._w=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=d;this.onChangeCallback();return this},copy:function(a){this._x=a.x;this._y=a.y;this._z=a.z;
this._w=a.w;this.onChangeCallback();return this},setFromEuler:function(a,b){if(!1===a instanceof THREE.Euler)throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var c=Math.cos(a._x/2),d=Math.cos(a._y/2),e=Math.cos(a._z/2),f=Math.sin(a._x/2),g=Math.sin(a._y/2),h=Math.sin(a._z/2);"XYZ"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):"YXZ"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=
c*d*h-f*g*e,this._w=c*d*e+f*g*h):"ZXY"===a.order?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):"ZYX"===a.order?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e+f*g*h):"YZX"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e-f*g*h):"XZY"===a.order&&(this._x=f*d*e-c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e+f*g*h);if(!1!==b)this.onChangeCallback();return this},setFromAxisAngle:function(a,
b){var c=b/2,d=Math.sin(c);this._x=a.x*d;this._y=a.y*d;this._z=a.z*d;this._w=Math.cos(c);this.onChangeCallback();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],k=b[6],b=b[10],l=c+f+b;0<l?(c=.5/Math.sqrt(l+1),this._w=.25/c,this._x=(k-g)*c,this._y=(d-h)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(k-g)/c,this._x=.25*c,this._y=(a+e)/c,this._z=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-h)/c,this._x=(a+e)/c,this._y=
.25*c,this._z=(g+k)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+h)/c,this._y=(g+k)/c,this._z=.25*c);this.onChangeCallback();return this},setFromUnitVectors:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3);b=c.dot(d)+1;1E-6>b?(b=0,Math.abs(c.x)>Math.abs(c.z)?a.set(-c.y,c.x,0):a.set(0,-c.z,c.y)):a.crossVectors(c,d);this._x=a.x;this._y=a.y;this._z=a.z;this._w=b;this.normalize();return this}}(),inverse:function(){this.conjugate().normalize();return this},conjugate:function(){this._x*=
-1;this._y*=-1;this._z*=-1;this.onChangeCallback();return this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);this.onChangeCallback();return this},
multiply:function(a,b){return void 0!==b?(THREE.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z,f=a._w,g=b._x,h=b._y,k=b._z,l=b._w;this._x=c*l+f*g+d*k-e*h;this._y=d*l+f*h+e*g-c*k;this._z=e*l+f*k+c*h-d*g;this._w=f*l-c*g-d*h-e*k;this.onChangeCallback();return this},multiplyVector3:function(a){THREE.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
return a.applyQuaternion(this)},slerp:function(a,b){if(0===b)return this;if(1===b)return this.copy(a);var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;var h=Math.acos(g),k=Math.sqrt(1-g*g);if(.001>Math.abs(k))return this._w=.5*(f+this._w),this._x=.5*(c+this._x),this._y=.5*(d+this._y),this._z=.5*(e+this._z),this;g=Math.sin((1-b)*h)/k;h=
Math.sin(b*h)/k;this._w=f*g+this._w*h;this._x=c*g+this._x*h;this._y=d*g+this._y*h;this._z=e*g+this._z*h;this.onChangeCallback();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a,b){void 0===b&&(b=0);this._x=a[b];this._y=a[b+1];this._z=a[b+2];this._w=a[b+3];this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._w;return a},onChange:function(a){this.onChangeCallback=
a;return this},onChangeCallback:function(){},clone:function(){return new THREE.Quaternion(this._x,this._y,this._z,this._w)}};THREE.Quaternion.slerp=function(a,b,c,d){return c.copy(a).slerp(b,d)};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,
b){if(void 0!==b)return THREE.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},sub:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},
subScalar:function(a){this.x-=a;this.y-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiply:function(a){this.x*=a.x;this.y*=a.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divide:function(a){this.x/=a.x;this.y/=a.y;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a):this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);return this},max:function(a){this.x<a.x&&(this.x=a.x);
this.y<a.y&&(this.y=a.y);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector2,b=new THREE.Vector2);a.set(c,c);b.set(d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=
Math.round(this.x);this.y=Math.round(this.y);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){this.x=-this.x;this.y=-this.y;return this},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},
distanceToSquared:function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},lerpVectors:function(a,b,c){this.subVectors(b,a).multiplyScalar(c).add(a);return this},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];return this},toArray:function(a,b){void 0===
a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];return this},clone:function(){return new THREE.Vector2(this.x,this.y)}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+
a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},sub:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=
a;return this},multiplyVectors:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(){var a;return function(b){!1===b instanceof THREE.Euler&&THREE.error("THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.");void 0===a&&(a=new THREE.Quaternion);this.applyQuaternion(a.setFromEuler(b));return this}}(),applyAxisAngle:function(){var a;return function(b,c){void 0===a&&(a=new THREE.Quaternion);this.applyQuaternion(a.setFromAxisAngle(b,
c));return this}}(),applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*
c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=a.w;var h=a*b+f*d-g*c,k=a*c+g*b-e*d,l=a*d+e*c-f*b,b=-e*b-f*c-g*d;this.x=h*a+b*-e+k*-g-l*-f;this.y=k*a+b*-f+l*-e-h*-g;this.z=l*a+b*-g+h*-f-k*-e;return this},project:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.multiplyMatrices(b.projectionMatrix,a.getInverse(b.matrixWorld));return this.applyProjection(a)}}(),
unproject:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.multiplyMatrices(b.matrixWorld,a.getInverse(b.projectionMatrix));return this.applyProjection(a)}}(),transformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;this.normalize();return this},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=
a):this.z=this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3,
b=new THREE.Vector3);a.set(c,c,c);b.set(d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):
Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},
setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},lerpVectors:function(a,b,c){this.subVectors(b,a).multiplyScalar(c).add(a);return this},cross:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=
e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){var c=a.x,d=a.y,e=a.z,f=b.x,g=b.y,h=b.z;this.x=d*h-e*g;this.y=e*f-c*h;this.z=c*g-d*f;return this},projectOnVector:function(){var a,b;return function(c){void 0===a&&(a=new THREE.Vector3);a.copy(c).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a;return function(b){void 0===
a&&(a=new THREE.Vector3);return this.sub(a.copy(b).multiplyScalar(2*this.dot(b)))}}(),angleTo:function(a){a=this.dot(a)/(this.length()*a.length());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},setEulerFromRotationMatrix:function(a,b){THREE.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},
setEulerFromQuaternion:function(a,b){THREE.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(a){THREE.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(a)},getScaleFromMatrix:function(a){THREE.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,
b){THREE.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(a,b)},setFromMatrixPosition:function(a){this.x=a.elements[12];this.y=a.elements[13];this.z=a.elements[14];return this},setFromMatrixScale:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length();a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();this.x=b;this.y=c;this.z=a;
return this},setFromMatrixColumn:function(a,b){var c=4*a,d=b.elements;this.x=d[c];this.y=d[c+1];this.z=d[c+2];return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];this.z=
a.array[b+2];return this},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}};THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;
case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},addVectors:function(a,
b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},sub:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;this.w-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=
a;this.y*=a;this.z*=a;this.w*=a;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a):(this.z=this.y=this.x=0,this.w=1);return this},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>
b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){var b,c,d;a=a.elements;var e=a[0];d=a[4];var f=a[8],g=a[1],h=a[5],k=a[9];c=a[2];b=a[6];var l=a[10];if(.01>Math.abs(d-g)&&.01>Math.abs(f-c)&&.01>Math.abs(k-b)){if(.1>Math.abs(d+g)&&.1>Math.abs(f+c)&&.1>Math.abs(k+b)&&.1>Math.abs(e+h+l-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;h=(h+1)/2;l=(l+1)/2;d=(d+g)/4;f=(f+c)/4;k=(k+b)/4;e>h&&e>l?.01>e?(b=0,d=c=.707106781):(b=
Math.sqrt(e),c=d/b,d=f/b):h>l?.01>h?(b=.707106781,c=0,d=.707106781):(c=Math.sqrt(h),b=d/c,d=k/c):.01>l?(c=b=.707106781,d=0):(d=Math.sqrt(l),b=f/d,c=k/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-k)*(b-k)+(f-c)*(f-c)+(g-d)*(g-d));.001>Math.abs(a)&&(a=1);this.x=(b-k)/a;this.y=(f-c)/a;this.z=(g-d)/a;this.w=Math.acos((e+h+l-1)/2);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);this.w>a.w&&(this.w=a.w);return this},max:function(a){this.x<a.x&&
(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);this.w<a.w&&(this.w=a.w);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);this.w<a.w?this.w=a.w:this.w>b.w&&(this.w=b.w);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector4,b=new THREE.Vector4);a.set(c,c,c,c);b.set(d,d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=
Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);
this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+
Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},lerpVectors:function(a,b,c){this.subVectors(b,a).multiplyScalar(c).add(a);return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},
fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];this.w=a[b+3];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;a[b+3]=this.w;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];this.z=a.array[b+2];this.w=a.array[b+3];return this},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)}};
THREE.Euler=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||THREE.Euler.DefaultOrder};THREE.Euler.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");THREE.Euler.DefaultOrder="XYZ";
THREE.Euler.prototype={constructor:THREE.Euler,_x:0,_y:0,_z:0,_order:THREE.Euler.DefaultOrder,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get order(){return this._order},set order(a){this._order=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._order=d||this._order;this.onChangeCallback();return this},copy:function(a){this._x=
a._x;this._y=a._y;this._z=a._z;this._order=a._order;this.onChangeCallback();return this},setFromRotationMatrix:function(a,b,c){var d=THREE.Math.clamp,e=a.elements;a=e[0];var f=e[4],g=e[8],h=e[1],k=e[5],l=e[9],p=e[2],q=e[6],e=e[10];b=b||this._order;"XYZ"===b?(this._y=Math.asin(d(g,-1,1)),.99999>Math.abs(g)?(this._x=Math.atan2(-l,e),this._z=Math.atan2(-f,a)):(this._x=Math.atan2(q,k),this._z=0)):"YXZ"===b?(this._x=Math.asin(-d(l,-1,1)),.99999>Math.abs(l)?(this._y=Math.atan2(g,e),this._z=Math.atan2(h,
k)):(this._y=Math.atan2(-p,a),this._z=0)):"ZXY"===b?(this._x=Math.asin(d(q,-1,1)),.99999>Math.abs(q)?(this._y=Math.atan2(-p,e),this._z=Math.atan2(-f,k)):(this._y=0,this._z=Math.atan2(h,a))):"ZYX"===b?(this._y=Math.asin(-d(p,-1,1)),.99999>Math.abs(p)?(this._x=Math.atan2(q,e),this._z=Math.atan2(h,a)):(this._x=0,this._z=Math.atan2(-f,k))):"YZX"===b?(this._z=Math.asin(d(h,-1,1)),.99999>Math.abs(h)?(this._x=Math.atan2(-l,k),this._y=Math.atan2(-p,a)):(this._x=0,this._y=Math.atan2(g,e))):"XZY"===b?(this._z=
Math.asin(-d(f,-1,1)),.99999>Math.abs(f)?(this._x=Math.atan2(q,k),this._y=Math.atan2(g,a)):(this._x=Math.atan2(-l,e),this._y=0)):THREE.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+b);this._order=b;if(!1!==c)this.onChangeCallback();return this},setFromQuaternion:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeRotationFromQuaternion(b);this.setFromRotationMatrix(a,c,d);return this}}(),setFromVector3:function(a,b){return this.set(a.x,a.y,a.z,
b||this._order)},reorder:function(){var a=new THREE.Quaternion;return function(b){a.setFromEuler(this);this.setFromQuaternion(a,b)}}(),equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._order;return a},toVector3:function(a){return a?
a.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},onChange:function(a){this.onChangeCallback=a;return this},onChangeCallback:function(){},clone:function(){return new THREE.Euler(this._x,this._y,this._z,this._order)}};THREE.Line3=function(a,b){this.start=void 0!==a?a:new THREE.Vector3;this.end=void 0!==b?b:new THREE.Vector3};
THREE.Line3.prototype={constructor:THREE.Line3,set:function(a,b){this.start.copy(a);this.end.copy(b);return this},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},center:function(a){return(a||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){return(a||new THREE.Vector3).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(a,
b){var c=b||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){a.subVectors(c,this.start);b.subVectors(this.end,this.start);var e=b.dot(b),e=b.dot(a)/e;d&&(e=THREE.Math.clamp(e,0,1));return e}}(),closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);c=c||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);
this.end.applyMatrix4(a);return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)},clone:function(){return(new THREE.Line3).copy(this)}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};
THREE.Box2.prototype={constructor:THREE.Box2,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=
this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);
this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector2).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>
this.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&
a.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}};THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};
THREE.Box3.prototype={constructor:THREE.Box3,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector3;return function(b,c){var d=a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),setFromObject:function(){var a=new THREE.Vector3;return function(b){var c=this;b.updateMatrixWorld(!0);
this.makeEmpty();b.traverse(function(b){var e=b.geometry;if(void 0!==e)if(e instanceof THREE.Geometry)for(var f=e.vertices,e=0,g=f.length;e<g;e++)a.copy(f[e]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a);else if(e instanceof THREE.BufferGeometry&&void 0!==e.attributes.position)for(f=e.attributes.position.array,e=0,g=f.length;e<g;e+=3)a.set(f[e],f[e+1],f[e+2]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a)});return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},
makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);
this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector3).set((a.x-this.min.x)/(this.max.x-
this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=
new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=.5*this.size(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){a[0].set(this.min.x,this.min.y,
this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);
this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}};THREE.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]);0<arguments.length&&THREE.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,b,c,d,e,f,g,h,k){var l=this.elements;l[0]=a;l[3]=b;l[6]=c;l[1]=d;l[4]=e;l[7]=f;l[2]=g;l[5]=h;l[8]=k;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},multiplyVector3:function(a){THREE.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},
multiplyVector3Array:function(a){THREE.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");return this.applyToVector3Array(a)},applyToVector3Array:function(){var a=new THREE.Vector3;return function(b,c,d){void 0===c&&(c=0);void 0===d&&(d=b.length);for(var e=0;e<d;e+=3,c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix3(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=
a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],a=a[8];return b*f*a-b*g*k-c*e*a+c*g*h+d*e*k-d*f*h},getInverse:function(a,b){var c=a.elements,d=this.elements;d[0]=c[10]*c[5]-c[6]*c[9];d[1]=-c[10]*c[1]+c[2]*c[9];d[2]=c[6]*c[1]-c[2]*c[5];d[3]=-c[10]*c[4]+c[6]*c[8];d[4]=c[10]*c[0]-c[2]*c[8];d[5]=-c[6]*c[0]+c[2]*c[4];d[6]=c[9]*c[4]-c[5]*c[8];d[7]=-c[9]*c[0]+c[1]*c[8];d[8]=c[5]*c[0]-c[1]*c[4];
c=c[0]*d[0]+c[1]*d[3]+c[2]*d[6];if(0===c){if(b)throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");THREE.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];
a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];return a},getNormalMatrix:function(a){this.getInverse(a).transpose();return this},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8]]},clone:function(){return(new THREE.Matrix3).fromArray(this.elements)}};
THREE.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);0<arguments.length&&THREE.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,g,h,k,l,p,q,n,t,r,s){var u=this.elements;u[0]=a;u[4]=b;u[8]=c;u[12]=d;u[1]=e;u[5]=f;u[9]=g;u[13]=h;u[2]=k;u[6]=l;u[10]=p;u[14]=q;u[3]=n;u[7]=t;u[11]=r;u[15]=s;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){this.elements.set(a.elements);return this},extractPosition:function(a){THREE.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");return this.copyPosition(a)},
copyPosition:function(a){var b=this.elements;a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractBasis:function(a,b,c){var d=this.elements;a.set(d[0],d[1],d[2]);b.set(d[4],d[5],d[6]);c.set(d[8],d[9],d[10]);return this},makeBasis:function(a,b,c){this.set(a.x,b.x,c.x,0,a.y,b.y,c.y,0,a.z,b.z,c.z,0,0,0,0,1);return this},extractRotation:function(){var a=new THREE.Vector3;return function(b){var c=this.elements;b=b.elements;var d=1/a.set(b[0],b[1],b[2]).length(),e=1/a.set(b[4],b[5],b[6]).length(),
f=1/a.set(b[8],b[9],b[10]).length();c[0]=b[0]*d;c[1]=b[1]*d;c[2]=b[2]*d;c[4]=b[4]*e;c[5]=b[5]*e;c[6]=b[6]*e;c[8]=b[8]*f;c[9]=b[9]*f;c[10]=b[10]*f;return this}}(),makeRotationFromEuler:function(a){!1===a instanceof THREE.Euler&&THREE.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);if("XYZ"===a.order){a=f*h;var k=f*e,
l=c*h,p=c*e;b[0]=g*h;b[4]=-g*e;b[8]=d;b[1]=k+l*d;b[5]=a-p*d;b[9]=-c*g;b[2]=p-a*d;b[6]=l+k*d;b[10]=f*g}else"YXZ"===a.order?(a=g*h,k=g*e,l=d*h,p=d*e,b[0]=a+p*c,b[4]=l*c-k,b[8]=f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=k*c-l,b[6]=p+a*c,b[10]=f*g):"ZXY"===a.order?(a=g*h,k=g*e,l=d*h,p=d*e,b[0]=a-p*c,b[4]=-f*e,b[8]=l+k*c,b[1]=k+l*c,b[5]=f*h,b[9]=p-a*c,b[2]=-f*d,b[6]=c,b[10]=f*g):"ZYX"===a.order?(a=f*h,k=f*e,l=c*h,p=c*e,b[0]=g*h,b[4]=l*d-k,b[8]=a*d+p,b[1]=g*e,b[5]=p*d+a,b[9]=k*d-l,b[2]=-d,b[6]=c*g,b[10]=f*g):"YZX"===
a.order?(a=f*g,k=f*d,l=c*g,p=c*d,b[0]=g*h,b[4]=p-a*e,b[8]=l*e+k,b[1]=e,b[5]=f*h,b[9]=-c*h,b[2]=-d*h,b[6]=k*e+l,b[10]=a-p*e):"XZY"===a.order&&(a=f*g,k=f*d,l=c*g,p=c*d,b[0]=g*h,b[4]=-e,b[8]=d*h,b[1]=a*e+p,b[5]=f*h,b[9]=k*e-l,b[2]=l*e-k,b[6]=c*h,b[10]=p*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},setRotationFromQuaternion:function(a){THREE.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");return this.makeRotationFromQuaternion(a)},
makeRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,g=c+c,h=d+d,k=e+e;a=c*g;var l=c*h,c=c*k,p=d*h,d=d*k,e=e*k,g=f*g,h=f*h,f=f*k;b[0]=1-(p+e);b[4]=l-f;b[8]=c+h;b[1]=l+f;b[5]=1-(a+e);b[9]=d-g;b[2]=c-h;b[6]=d+g;b[10]=1-(a+p);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f){var g=this.elements;c.subVectors(d,e).normalize();0===c.length()&&(c.z=1);a.crossVectors(f,
c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(f,c).normalize());b.crossVectors(c,a);g[0]=a.x;g[4]=b.x;g[8]=c.x;g[1]=a.y;g[5]=b.y;g[9]=c.y;g[2]=a.z;g[6]=b.z;g[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(THREE.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],g=c[4],h=c[8],
k=c[12],l=c[1],p=c[5],q=c[9],n=c[13],t=c[2],r=c[6],s=c[10],u=c[14],v=c[3],x=c[7],D=c[11],c=c[15],w=d[0],y=d[4],A=d[8],E=d[12],G=d[1],F=d[5],z=d[9],I=d[13],U=d[2],M=d[6],H=d[10],L=d[14],P=d[3],N=d[7],R=d[11],d=d[15];e[0]=f*w+g*G+h*U+k*P;e[4]=f*y+g*F+h*M+k*N;e[8]=f*A+g*z+h*H+k*R;e[12]=f*E+g*I+h*L+k*d;e[1]=l*w+p*G+q*U+n*P;e[5]=l*y+p*F+q*M+n*N;e[9]=l*A+p*z+q*H+n*R;e[13]=l*E+p*I+q*L+n*d;e[2]=t*w+r*G+s*U+u*P;e[6]=t*y+r*F+s*M+u*N;e[10]=t*A+r*z+s*H+u*R;e[14]=t*E+r*I+s*L+u*d;e[3]=v*w+x*G+D*U+c*P;e[7]=v*y+
x*F+D*M+c*N;e[11]=v*A+x*z+D*H+c*R;e[15]=v*E+x*I+D*L+c*d;return this},multiplyToArray:function(a,b,c){var d=this.elements;this.multiplyMatrices(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=
a;b[15]*=a;return this},multiplyVector3:function(a){THREE.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");return a.applyProjection(this)},multiplyVector4:function(a){THREE.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(a){THREE.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
return this.applyToVector3Array(a)},applyToVector3Array:function(){var a=new THREE.Vector3;return function(b,c,d){void 0===c&&(c=0);void 0===d&&(d=b.length);for(var e=0;e<d;e+=3,c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix4(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),rotateAxis:function(a){THREE.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");a.transformDirection(this)},crossVector:function(a){THREE.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
return a.applyMatrix4(this)},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],k=a[13],l=a[2],p=a[6],q=a[10],n=a[14];return a[3]*(+e*h*p-d*k*p-e*g*q+c*k*q+d*g*n-c*h*n)+a[7]*(+b*h*n-b*k*q+e*f*q-d*f*n+d*k*l-e*h*l)+a[11]*(+b*k*p-b*g*n-e*f*p+c*f*n+e*g*l-c*k*l)+a[15]*(-d*g*l-b*h*p+b*g*q+d*f*p-c*f*q+c*h*l)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];
a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=new THREE.Vector3;return function(){THREE.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");var b=
this.elements;return a.set(b[12],b[13],b[14])}}(),setPosition:function(a){var b=this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[4],g=d[8],h=d[12],k=d[1],l=d[5],p=d[9],q=d[13],n=d[2],t=d[6],r=d[10],s=d[14],u=d[3],v=d[7],x=d[11],d=d[15];c[0]=p*s*v-q*r*v+q*t*x-l*s*x-p*t*d+l*r*d;c[4]=h*r*v-g*s*v-h*t*x+f*s*x+g*t*d-f*r*d;c[8]=g*q*v-h*p*v+h*l*x-f*q*x-g*l*d+f*p*d;c[12]=h*p*t-g*q*t-h*l*r+f*q*r+g*l*s-f*p*s;c[1]=q*r*u-p*s*u-q*n*x+
k*s*x+p*n*d-k*r*d;c[5]=g*s*u-h*r*u+h*n*x-e*s*x-g*n*d+e*r*d;c[9]=h*p*u-g*q*u-h*k*x+e*q*x+g*k*d-e*p*d;c[13]=g*q*n-h*p*n+h*k*r-e*q*r-g*k*s+e*p*s;c[2]=l*s*u-q*t*u+q*n*v-k*s*v-l*n*d+k*t*d;c[6]=h*t*u-f*s*u-h*n*v+e*s*v+f*n*d-e*t*d;c[10]=f*q*u-h*l*u+h*k*v-e*q*v-f*k*d+e*l*d;c[14]=h*l*n-f*q*n-h*k*t+e*q*t+f*k*s-e*l*s;c[3]=p*t*u-l*r*u-p*n*v+k*r*v+l*n*x-k*t*x;c[7]=f*r*u-g*t*u+g*n*v-e*r*v-f*n*x+e*t*x;c[11]=g*l*u-f*p*u-g*k*v+e*p*v+f*k*x-e*l*x;c[15]=f*p*n-g*l*n+g*k*t-e*p*t-f*k*r+e*l*r;c=e*c[0]+k*c[4]+n*c[8]+u*c[12];
if(0==c){if(b)throw Error("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");THREE.warn("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},translate:function(a){THREE.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(a){THREE.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(a){THREE.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(a){THREE.error("THREE.Matrix4: .rotateZ() has been removed.")},
rotateByAxis:function(a,b){THREE.error("THREE.Matrix4: .rotateByAxis() has been removed.")},scale:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,
c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,g=a.y,h=a.z,k=e*f,l=e*g;this.set(k*f+c,k*g-d*h,k*h+d*g,0,k*g+
d*h,l*g+c,l*h-d*f,0,k*h-d*g,l*h+d*f,e*h*h+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a=new THREE.Vector3,b=new THREE.Matrix4;return function(c,d,e){var f=this.elements,g=a.set(f[0],f[1],f[2]).length(),h=a.set(f[4],f[5],f[6]).length(),k=a.set(f[8],f[9],f[10]).length();0>this.determinant()&&(g=-g);c.x=f[12];
c.y=f[13];c.z=f[14];b.elements.set(this.elements);c=1/g;var f=1/h,l=1/k;b.elements[0]*=c;b.elements[1]*=c;b.elements[2]*=c;b.elements[4]*=f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=l;b.elements[9]*=l;b.elements[10]*=l;d.setFromRotationMatrix(b);e.x=g;e.y=h;e.z=k;return this}}(),makeFrustum:function(a,b,c,d,e,f){var g=this.elements;g[0]=2*e/(b-a);g[4]=0;g[8]=(b+a)/(b-a);g[12]=0;g[1]=0;g[5]=2*e/(d-c);g[9]=(d+c)/(d-c);g[13]=0;g[2]=0;g[6]=0;g[10]=-(f+e)/(f-e);g[14]=-2*f*e/(f-e);g[3]=0;g[7]=0;
g[11]=-1;g[15]=0;return this},makePerspective:function(a,b,c,d){a=c*Math.tan(THREE.Math.degToRad(.5*a));var e=-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=b-a,k=c-d,l=f-e;g[0]=2/h;g[4]=0;g[8]=0;g[12]=-((b+a)/h);g[1]=0;g[5]=2/k;g[9]=0;g[13]=-((c+d)/k);g[2]=0;g[6]=0;g[10]=-2/l;g[14]=-((f+e)/l);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],
a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]]},clone:function(){return(new THREE.Matrix4).fromArray(this.elements)}};THREE.Ray=function(a,b){this.origin=void 0!==a?a:new THREE.Vector3;this.direction=void 0!==b?b:new THREE.Vector3};
THREE.Ray.prototype={constructor:THREE.Ray,set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){return(b||new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin)},recast:function(){var a=new THREE.Vector3;return function(b){this.origin.copy(this.at(b,a));return this}}(),closestPointToPoint:function(a,b){var c=b||new THREE.Vector3;c.subVectors(a,this.origin);
var d=c.dot(this.direction);return 0>d?c.copy(this.origin):c.copy(this.direction).multiplyScalar(d).add(this.origin)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){var c=a.subVectors(b,this.origin).dot(this.direction);if(0>c)return this.origin.distanceTo(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceTo(b)}}(),distanceSqToSegment:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g){a.copy(d).add(e).multiplyScalar(.5);
b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);var h=.5*d.distanceTo(e),k=-this.direction.dot(b),l=c.dot(this.direction),p=-c.dot(b),q=c.lengthSq(),n=Math.abs(1-k*k),t;0<n?(d=k*p-l,e=k*l-p,t=h*n,0<=d?e>=-t?e<=t?(h=1/n,d*=h,e*=h,k=d*(d+k*e+2*l)+e*(k*d+e+2*p)+q):(e=h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*p)+q):(e=-h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*p)+q):e<=-t?(d=Math.max(0,-(-k*h+l)),e=0<d?-h:Math.min(Math.max(-h,-p),h),k=-d*d+e*(e+2*p)+q):e<=t?(d=0,e=Math.min(Math.max(-h,-p),h),k=e*(e+
2*p)+q):(d=Math.max(0,-(k*h+l)),e=0<d?h:Math.min(Math.max(-h,-p),h),k=-d*d+e*(e+2*p)+q)):(e=0<k?-h:h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*p)+q);f&&f.copy(this.direction).multiplyScalar(d).add(this.origin);g&&g.copy(b).multiplyScalar(e).add(a);return k}}(),isIntersectionSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},intersectSphere:function(){var a=new THREE.Vector3;return function(b,c){a.subVectors(b.center,this.origin);var d=a.dot(this.direction),e=a.dot(a)-d*d,f=b.radius*b.radius;
if(e>f)return null;f=Math.sqrt(f-e);e=d-f;d+=f;return 0>e&&0>d?null:0>e?this.at(d,c):this.at(e,c)}}(),isIntersectionPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0==b)return 0==a.distanceToPoint(this.origin)?0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){var c=this.distanceToPlane(a);return null===c?null:this.at(c,b)},
isIntersectionBox:function(){var a=new THREE.Vector3;return function(b){return null!==this.intersectBox(b,a)}}(),intersectBox:function(a,b){var c,d,e,f,g;d=1/this.direction.x;f=1/this.direction.y;g=1/this.direction.z;var h=this.origin;0<=d?(c=(a.min.x-h.x)*d,d*=a.max.x-h.x):(c=(a.max.x-h.x)*d,d*=a.min.x-h.x);0<=f?(e=(a.min.y-h.y)*f,f*=a.max.y-h.y):(e=(a.max.y-h.y)*f,f*=a.min.y-h.y);if(c>f||e>d)return null;if(e>c||c!==c)c=e;if(f<d||d!==d)d=f;0<=g?(e=(a.min.z-h.z)*g,g*=a.max.z-h.z):(e=(a.max.z-h.z)*
g,g*=a.min.z-h.z);if(c>g||e>d)return null;if(e>c||c!==c)c=e;if(g<d||d!==d)d=g;return 0>d?null:this.at(0<=c?c:d,b)},intersectTriangle:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Vector3;return function(e,f,g,h,k){b.subVectors(f,e);c.subVectors(g,e);d.crossVectors(b,c);f=this.direction.dot(d);if(0<f){if(h)return null;h=1}else if(0>f)h=-1,f=-f;else return null;a.subVectors(this.origin,e);e=h*this.direction.dot(c.crossVectors(a,c));if(0>e)return null;g=h*this.direction.dot(b.cross(a));
if(0>g||e+g>f)return null;e=-h*a.dot(d);return 0>e?null:this.at(e/f,k)}}(),applyMatrix4:function(a){this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)},clone:function(){return(new THREE.Ray).copy(this)}};THREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};
THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(){var a=new THREE.Box3;return function(b,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(b).center(d);for(var e=0,f=0,g=b.length;f<g;f++)e=Math.max(e,d.distanceToSquared(b[f]));this.radius=Math.sqrt(e);return this}}(),copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=
this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},clampPoint:function(a,b){var c=this.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);
return a},applyMatrix4:function(a){this.center.applyMatrix4(a);this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}};
THREE.Frustum=function(a,b,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]};
THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],h=c[5],k=c[6],l=c[7],p=c[8],q=c[9],n=c[10],t=c[11],r=c[12],s=c[13],u=c[14],c=c[15];b[0].setComponents(f-a,l-g,t-p,c-r).normalize();b[1].setComponents(f+
a,l+g,t+p,c+r).normalize();b[2].setComponents(f+d,l+h,t+q,c+s).normalize();b[3].setComponents(f-d,l-h,t-q,c-s).normalize();b[4].setComponents(f-e,l-k,t-n,c-u).normalize();b[5].setComponents(f+e,l+k,t+n,c+u).normalize();return this},intersectsObject:function(){var a=new THREE.Sphere;return function(b){var c=b.geometry;null===c.boundingSphere&&c.computeBoundingSphere();a.copy(c.boundingSphere);a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSphere:function(a){var b=this.planes,
c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?c.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var g=f.distanceToPoint(a),f=f.distanceToPoint(b);if(0>g&&0>f)return!1}return!0}}(),
containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}};THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};
THREE.Plane.prototype={constructor:THREE.Plane,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,
c);return this}}(),copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,
b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},isIntersectionLine:function(a){var b=this.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),f=this.normal.dot(e);if(0==f){if(0==this.distanceToPoint(b.start))return d.copy(b.start)}else return f=-(b.start.dot(this.normal)+this.constant)/f,0>f||1<f?void 0:d.copy(e).multiplyScalar(f).add(b.start)}}(),
coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Matrix3;return function(d,e){var f=e||c.getNormalMatrix(d),f=a.copy(this.normal).applyMatrix3(f),g=this.coplanarPoint(b);g.applyMatrix4(d);this.setFromNormalAndCoplanarPoint(f,g);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&
a.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}};
THREE.Math={generateUUID:function(){var a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=Array(36),c=0,d;return function(){for(var e=0;36>e;e++)8==e||13==e||18==e||23==e?b[e]="-":14==e?b[e]="4":(2>=c&&(c=33554432+16777216*Math.random()|0),d=c&15,c>>=4,b[e]=a[19==e?d&3|8:d]);return b.join("")}}(),clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,b,c){if(a<=
b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return Math.floor(this.randFloat(a,b))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(.5-Math.random())},degToRad:function(){var a=Math.PI/180;return function(b){return b*a}}(),radToDeg:function(){var a=
180/Math.PI;return function(b){return b*a}}(),isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a},nextPowerOfTwo:function(a){a--;a|=a>>1;a|=a>>2;a|=a>>4;a|=a>>8;a|=a>>16;a++;return a}};
THREE.Spline=function(a){function b(a,b,c,d,e,f,g){a=.5*(c-a);d=.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,g,h,k,l,p,q,n;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);g=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:f+
2;l=this.points[c[0]];p=this.points[c[1]];q=this.points[c[2]];n=this.points[c[3]];h=g*g;k=g*h;d.x=b(l.x,p.x,q.x,n.x,g,h,k);d.y=b(l.y,p.y,q.y,n.y,g,h,k);d.z=b(l.z,p.z,q.z,n.z,g,h,k);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,g=new THREE.Vector3,h=[],k=0;h[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),g.copy(d),k+=g.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(h[b]=k,e=b);h[h.length]=k;return{chunks:h,total:k}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,g,h=[],k=new THREE.Vector3,n=this.getLength();h.push(k.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=n.chunks[b]-n.chunks[b-1];g=Math.ceil(a*c/n.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<g-1;c++)d=e+1/g*c*(f-e),d=this.getPoint(d),h.push(k.copy(d).clone());
h.push(k.copy(this.points[b]).clone())}this.points=h}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();
THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g,h){a.subVectors(g,e);b.subVectors(f,e);c.subVectors(d,e);d=a.dot(a);e=a.dot(b);f=a.dot(c);var k=b.dot(b);g=b.dot(c);var l=d*k-e*e;h=h||new THREE.Vector3;if(0==l)return h.set(-2,-1,-1);l=1/l;k=(k*f-e*g)*l;d=(d*g-e*f)*l;return h.set(1-k-d,d,k)}}();
THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();
THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return.5*a.cross(b).length()}}(),midpoint:function(a){return(a||
new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)},
clone:function(){return(new THREE.Triangle).copy(this)}};THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now(),
a=.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a}};THREE.EventDispatcher=function(){};
THREE.EventDispatcher.prototype={constructor:THREE.EventDispatcher,apply:function(a){a.addEventListener=THREE.EventDispatcher.prototype.addEventListener;a.hasEventListener=THREE.EventDispatcher.prototype.hasEventListener;a.removeEventListener=THREE.EventDispatcher.prototype.removeEventListener;a.dispatchEvent=THREE.EventDispatcher.prototype.dispatchEvent},addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&
c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)?!0:!1},removeEventListener:function(a,b){if(void 0!==this._listeners){var c=this._listeners[a];if(void 0!==c){var d=c.indexOf(b);-1!==d&&c.splice(d,1)}}},dispatchEvent:function(a){if(void 0!==this._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;for(var c=[],d=b.length,e=0;e<d;e++)c[e]=b[e];for(e=0;e<d;e++)c[e].call(this,a)}}}};
(function(a){a.Raycaster=function(b,c,f,g){this.ray=new a.Ray(b,c);this.near=f||0;this.far=g||Infinity;this.params={Sprite:{},Mesh:{},PointCloud:{threshold:1},LOD:{},Line:{}}};var b=function(a,b){return a.distance-b.distance},c=function(a,b,f,g){a.raycast(b,f);if(!0===g){a=a.children;g=0;for(var h=a.length;g<h;g++)c(a[g],b,f,!0)}};a.Raycaster.prototype={constructor:a.Raycaster,precision:1E-4,linePrecision:1,set:function(a,b){this.ray.set(a,b)},setFromCamera:function(b,c){c instanceof a.PerspectiveCamera?
(this.ray.origin.copy(c.position),this.ray.direction.set(b.x,b.y,.5).unproject(c).sub(c.position).normalize()):c instanceof a.OrthographicCamera?(this.ray.origin.set(b.x,b.y,-1).unproject(c),this.ray.direction.set(0,0,-1).transformDirection(c.matrixWorld)):a.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(a,e){var f=[];c(a,this,f,e);f.sort(b);return f},intersectObjects:function(d,e){var f=[];if(!1===d instanceof Array)return a.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),
f;for(var g=0,h=d.length;g<h;g++)c(d[g],this,f,e);f.sort(b);return f}}})(THREE);
THREE.Object3D=function(){Object.defineProperty(this,"id",{value:THREE.Object3DIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="Object3D";this.parent=void 0;this.children=[];this.up=THREE.Object3D.DefaultUp.clone();var a=new THREE.Vector3,b=new THREE.Euler,c=new THREE.Quaternion,d=new THREE.Vector3(1,1,1);b.onChange(function(){c.setFromEuler(b,!1)});c.onChange(function(){b.setFromQuaternion(c,void 0,!1)});Object.defineProperties(this,{position:{enumerable:!0,value:a},rotation:{enumerable:!0,
value:b},quaternion:{enumerable:!0,value:c},scale:{enumerable:!0,value:d}});this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixAutoUpdate=!0;this.matrixWorldNeedsUpdate=!1;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.renderOrder=0;this.userData={}};THREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0);
THREE.Object3D.prototype={constructor:THREE.Object3D,get eulerOrder(){THREE.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");return this.rotation.order},set eulerOrder(a){THREE.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");this.rotation.order=a},get useQuaternion(){THREE.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set useQuaternion(a){THREE.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},
applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new THREE.Quaternion;return function(b,c){a.setFromAxisAngle(b,
c);this.quaternion.multiply(a);return this}}(),rotateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.rotateOnAxis(a,b)}}(),translateOnAxis:function(){var a=new THREE.Vector3;return function(b,c){a.copy(b).applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));
return this}}(),translate:function(a,b){THREE.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b,a)},translateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.translateOnAxis(a,b)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.translateOnAxis(a,
b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new THREE.Matrix4;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new THREE.Matrix4;return function(b){a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),add:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}if(a===this)return THREE.error("THREE.Object3D.add: object can't be added as a child of itself.",
a),this;a instanceof THREE.Object3D?(void 0!==a.parent&&a.parent.remove(a),a.parent=this,a.dispatchEvent({type:"added"}),this.children.push(a)):THREE.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",a);return this},remove:function(a){if(1<arguments.length)for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);b=this.children.indexOf(a);-1!==b&&(a.parent=void 0,a.dispatchEvent({type:"removed"}),this.children.splice(b,1))},getChildByName:function(a){THREE.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
return this.getObjectByName(a)},getObjectById:function(a){return this.getObjectByProperty("id",a)},getObjectByName:function(a){return this.getObjectByProperty("name",a)},getObjectByProperty:function(a,b){if(this[a]===b)return this;for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c].getObjectByProperty(a,b);if(void 0!==e)return e}},getWorldPosition:function(a){a=a||new THREE.Vector3;this.updateMatrixWorld(!0);return a.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var a=
new THREE.Vector3,b=new THREE.Vector3;return function(c){c=c||new THREE.Quaternion;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,c,b);return c}}(),getWorldRotation:function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Euler;this.getWorldQuaternion(a);return b.setFromQuaternion(a,this.rotation.order,!1)}}(),getWorldScale:function(){var a=new THREE.Vector3,b=new THREE.Quaternion;return function(c){c=c||new THREE.Vector3;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,
b,c);return c}}(),getWorldDirection:function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Vector3;this.getWorldQuaternion(a);return b.set(0,0,1).applyQuaternion(a)}}(),raycast:function(){},traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},traverseVisible:function(a){if(!1!==this.visible){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverseVisible(a)}},traverseAncestors:function(a){this.parent&&(a(this.parent),
this.parent.traverseAncestors(a))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},
toJSON:function(){var a={metadata:{version:4.3,type:"Object",generator:"ObjectExporter"}},b={},c={},d=function(b){void 0===a.materials&&(a.materials=[]);if(void 0===c[b.uuid]){var d=b.toJSON();delete d.metadata;c[b.uuid]=d;a.materials.push(d)}return b.uuid},e=function(c){var g={};g.uuid=c.uuid;g.type=c.type;""!==c.name&&(g.name=c.name);"{}"!==JSON.stringify(c.userData)&&(g.userData=c.userData);!0!==c.visible&&(g.visible=c.visible);if(c instanceof THREE.PerspectiveCamera)g.fov=c.fov,g.aspect=c.aspect,
g.near=c.near,g.far=c.far;else if(c instanceof THREE.OrthographicCamera)g.left=c.left,g.right=c.right,g.top=c.top,g.bottom=c.bottom,g.near=c.near,g.far=c.far;else if(c instanceof THREE.AmbientLight)g.color=c.color.getHex();else if(c instanceof THREE.DirectionalLight)g.color=c.color.getHex(),g.intensity=c.intensity;else if(c instanceof THREE.PointLight)g.color=c.color.getHex(),g.intensity=c.intensity,g.distance=c.distance,g.decay=c.decay;else if(c instanceof THREE.SpotLight)g.color=c.color.getHex(),
g.intensity=c.intensity,g.distance=c.distance,g.angle=c.angle,g.exponent=c.exponent,g.decay=c.decay;else if(c instanceof THREE.HemisphereLight)g.color=c.color.getHex(),g.groundColor=c.groundColor.getHex();else if(c instanceof THREE.Mesh||c instanceof THREE.Line||c instanceof THREE.PointCloud){var h=c.geometry;void 0===a.geometries&&(a.geometries=[]);if(void 0===b[h.uuid]){var k=h.toJSON();delete k.metadata;b[h.uuid]=k;a.geometries.push(k)}g.geometry=h.uuid;g.material=d(c.material);c instanceof THREE.Line&&
(g.mode=c.mode)}else c instanceof THREE.Sprite&&(g.material=d(c.material));g.matrix=c.matrix.toArray();if(0<c.children.length)for(g.children=[],h=0;h<c.children.length;h++)g.children.push(e(c.children[h]));return g};a.object=e(this);return a},clone:function(a,b){void 0===a&&(a=new THREE.Object3D);void 0===b&&(b=!0);a.name=this.name;a.up.copy(this.up);a.position.copy(this.position);a.quaternion.copy(this.quaternion);a.scale.copy(this.scale);a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);
a.matrixWorld.copy(this.matrixWorld);a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;a.visible=this.visible;a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;a.userData=JSON.parse(JSON.stringify(this.userData));if(!0===b)for(var c=0;c<this.children.length;c++)a.add(this.children[c].clone());return a}};THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);THREE.Object3DIdCount=0;
THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=void 0!==f?f:0};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.materialIndex=this.materialIndex;for(var b=0,c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();return a}};
THREE.Face4=function(a,b,c,d,e,f,g){THREE.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new THREE.Face3(a,b,c,e,f,g)};THREE.BufferAttribute=function(a,b){this.array=a;this.itemSize=b;this.needsUpdate=!1};
THREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get length(){return this.array.length},copyAt:function(a,b,c){a*=this.itemSize;c*=b.itemSize;for(var d=0,e=this.itemSize;d<e;d++)this.array[a+d]=b.array[c+d];return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},setX:function(a,b){this.array[a*this.itemSize]=b;return this},setY:function(a,b){this.array[a*this.itemSize+1]=b;return this},setZ:function(a,b){this.array[a*this.itemSize+2]=b;return this},setXY:function(a,
b,c){a*=this.itemSize;this.array[a]=b;this.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a*=this.itemSize;this.array[a]=b;this.array[a+1]=c;this.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a*=this.itemSize;this.array[a]=b;this.array[a+1]=c;this.array[a+2]=d;this.array[a+3]=e;return this},clone:function(){return new THREE.BufferAttribute(new this.array.constructor(this.array),this.itemSize)}};
THREE.Int8Attribute=function(a,b){THREE.warn("THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Uint8Attribute=function(a,b){THREE.warn("THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Uint8ClampedAttribute=function(a,b){THREE.warn("THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Int16Attribute=function(a,b){THREE.warn("THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Uint16Attribute=function(a,b){THREE.warn("THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Int32Attribute=function(a,b){THREE.warn("THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Uint32Attribute=function(a,b){THREE.warn("THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Float32Attribute=function(a,b){THREE.warn("THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Float64Attribute=function(a,b){THREE.warn("THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.DynamicBufferAttribute=function(a,b){THREE.BufferAttribute.call(this,a,b);this.updateRange={offset:0,count:-1}};THREE.DynamicBufferAttribute.prototype=Object.create(THREE.BufferAttribute.prototype);THREE.DynamicBufferAttribute.prototype.constructor=THREE.DynamicBufferAttribute;
THREE.DynamicBufferAttribute.prototype.clone=function(){return new THREE.DynamicBufferAttribute(new this.array.constructor(this.array),this.itemSize)};THREE.BufferGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="BufferGeometry";this.attributes={};this.attributesKeys=[];this.offsets=this.drawcalls=[];this.boundingSphere=this.boundingBox=null};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,addAttribute:function(a,b,c){!1===b instanceof THREE.BufferAttribute?(THREE.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.attributes[a]={array:b,itemSize:c}):(this.attributes[a]=b,this.attributesKeys=Object.keys(this.attributes))},getAttribute:function(a){return this.attributes[a]},addDrawCall:function(a,b,c){this.drawcalls.push({start:a,count:b,index:void 0!==c?c:0})},applyMatrix:function(a){var b=
this.attributes.position;void 0!==b&&(a.applyToVector3Array(b.array),b.needsUpdate=!0);b=this.attributes.normal;void 0!==b&&((new THREE.Matrix3).getNormalMatrix(a).applyToVector3Array(b.array),b.needsUpdate=!0);null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere()},center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();this.applyMatrix((new THREE.Matrix4).setPosition(a));return a},fromGeometry:function(a,b){b=b||{vertexColors:THREE.NoColors};
var c=a.vertices,d=a.faces,e=a.faceVertexUvs,f=b.vertexColors,g=0<e[0].length,h=3==d[0].vertexNormals.length,k=new Float32Array(9*d.length);this.addAttribute("position",new THREE.BufferAttribute(k,3));var l=new Float32Array(9*d.length);this.addAttribute("normal",new THREE.BufferAttribute(l,3));if(f!==THREE.NoColors){var p=new Float32Array(9*d.length);this.addAttribute("color",new THREE.BufferAttribute(p,3))}if(!0===g){var q=new Float32Array(6*d.length);this.addAttribute("uv",new THREE.BufferAttribute(q,
2))}for(var n=0,t=0,r=0;n<d.length;n++,t+=6,r+=9){var s=d[n],u=c[s.a],v=c[s.b],x=c[s.c];k[r]=u.x;k[r+1]=u.y;k[r+2]=u.z;k[r+3]=v.x;k[r+4]=v.y;k[r+5]=v.z;k[r+6]=x.x;k[r+7]=x.y;k[r+8]=x.z;!0===h?(u=s.vertexNormals[0],v=s.vertexNormals[1],x=s.vertexNormals[2],l[r]=u.x,l[r+1]=u.y,l[r+2]=u.z,l[r+3]=v.x,l[r+4]=v.y,l[r+5]=v.z,l[r+6]=x.x,l[r+7]=x.y,l[r+8]=x.z):(u=s.normal,l[r]=u.x,l[r+1]=u.y,l[r+2]=u.z,l[r+3]=u.x,l[r+4]=u.y,l[r+5]=u.z,l[r+6]=u.x,l[r+7]=u.y,l[r+8]=u.z);f===THREE.FaceColors?(s=s.color,p[r]=
s.r,p[r+1]=s.g,p[r+2]=s.b,p[r+3]=s.r,p[r+4]=s.g,p[r+5]=s.b,p[r+6]=s.r,p[r+7]=s.g,p[r+8]=s.b):f===THREE.VertexColors&&(u=s.vertexColors[0],v=s.vertexColors[1],s=s.vertexColors[2],p[r]=u.r,p[r+1]=u.g,p[r+2]=u.b,p[r+3]=v.r,p[r+4]=v.g,p[r+5]=v.b,p[r+6]=s.r,p[r+7]=s.g,p[r+8]=s.b);!0===g&&(s=e[0][n][0],u=e[0][n][1],v=e[0][n][2],q[t]=s.x,q[t+1]=s.y,q[t+2]=u.x,q[t+3]=u.y,q[t+4]=v.x,q[t+5]=v.y)}this.computeBoundingSphere();return this},computeBoundingBox:function(){var a=new THREE.Vector3;return function(){null===
this.boundingBox&&(this.boundingBox=new THREE.Box3);var b=this.attributes.position.array;if(b){var c=this.boundingBox;c.makeEmpty();for(var d=0,e=b.length;d<e;d+=3)a.set(b[d],b[d+1],b[d+2]),c.expandByPoint(a)}if(void 0===b||0===b.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0);(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&THREE.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.')}}(),
computeBoundingSphere:function(){var a=new THREE.Box3,b=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var c=this.attributes.position.array;if(c){a.makeEmpty();for(var d=this.boundingSphere.center,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),a.expandByPoint(b);a.center(d);for(var g=0,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),g=Math.max(g,d.distanceToSquared(b));this.boundingSphere.radius=Math.sqrt(g);isNaN(this.boundingSphere.radius)&&
THREE.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.')}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var a=this.attributes;if(a.position){var b=a.position.array;if(void 0===a.normal)this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(b.length),3));else for(var c=a.normal.array,d=0,e=c.length;d<e;d++)c[d]=0;var c=a.normal.array,f,g,h,k=new THREE.Vector3,l=new THREE.Vector3,
p=new THREE.Vector3,q=new THREE.Vector3,n=new THREE.Vector3;if(a.index)for(var t=a.index.array,r=0<this.offsets.length?this.offsets:[{start:0,count:t.length,index:0}],s=0,u=r.length;s<u;++s){e=r[s].start;f=r[s].count;for(var v=r[s].index,d=e,e=e+f;d<e;d+=3)f=3*(v+t[d]),g=3*(v+t[d+1]),h=3*(v+t[d+2]),k.fromArray(b,f),l.fromArray(b,g),p.fromArray(b,h),q.subVectors(p,l),n.subVectors(k,l),q.cross(n),c[f]+=q.x,c[f+1]+=q.y,c[f+2]+=q.z,c[g]+=q.x,c[g+1]+=q.y,c[g+2]+=q.z,c[h]+=q.x,c[h+1]+=q.y,c[h+2]+=q.z}else for(d=
0,e=b.length;d<e;d+=9)k.fromArray(b,d),l.fromArray(b,d+3),p.fromArray(b,d+6),q.subVectors(p,l),n.subVectors(k,l),q.cross(n),c[d]=q.x,c[d+1]=q.y,c[d+2]=q.z,c[d+3]=q.x,c[d+4]=q.y,c[d+5]=q.z,c[d+6]=q.x,c[d+7]=q.y,c[d+8]=q.z;this.normalizeNormals();a.normal.needsUpdate=!0}},computeTangents:function(){function a(a,b,c){q.fromArray(d,3*a);n.fromArray(d,3*b);t.fromArray(d,3*c);r.fromArray(f,2*a);s.fromArray(f,2*b);u.fromArray(f,2*c);v=n.x-q.x;x=t.x-q.x;D=n.y-q.y;w=t.y-q.y;y=n.z-q.z;A=t.z-q.z;E=s.x-r.x;G=
u.x-r.x;F=s.y-r.y;z=u.y-r.y;I=1/(E*z-G*F);U.set((z*v-F*x)*I,(z*D-F*w)*I,(z*y-F*A)*I);M.set((E*x-G*v)*I,(E*w-G*D)*I,(E*A-G*y)*I);k[a].add(U);k[b].add(U);k[c].add(U);l[a].add(M);l[b].add(M);l[c].add(M)}function b(a){ha.fromArray(e,3*a);O.copy(ha);ba=k[a];oa.copy(ba);oa.sub(ha.multiplyScalar(ha.dot(ba))).normalize();ja.crossVectors(O,ba);qa=ja.dot(l[a]);ca=0>qa?-1:1;h[4*a]=oa.x;h[4*a+1]=oa.y;h[4*a+2]=oa.z;h[4*a+3]=ca}if(void 0===this.attributes.index||void 0===this.attributes.position||void 0===this.attributes.normal||
void 0===this.attributes.uv)THREE.warn("THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var c=this.attributes.index.array,d=this.attributes.position.array,e=this.attributes.normal.array,f=this.attributes.uv.array,g=d.length/3;void 0===this.attributes.tangent&&this.addAttribute("tangent",new THREE.BufferAttribute(new Float32Array(4*g),4));for(var h=this.attributes.tangent.array,k=[],l=[],p=0;p<g;p++)k[p]=new THREE.Vector3,
l[p]=new THREE.Vector3;var q=new THREE.Vector3,n=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Vector2,s=new THREE.Vector2,u=new THREE.Vector2,v,x,D,w,y,A,E,G,F,z,I,U=new THREE.Vector3,M=new THREE.Vector3,H,L,P,N,R;0===this.drawcalls.length&&this.addDrawCall(0,c.length,0);var V=this.drawcalls,p=0;for(L=V.length;p<L;++p){H=V[p].start;P=V[p].count;var J=V[p].index,g=H;for(H+=P;g<H;g+=3)P=J+c[g],N=J+c[g+1],R=J+c[g+2],a(P,N,R)}var oa=new THREE.Vector3,ja=new THREE.Vector3,ha=new THREE.Vector3,O=new THREE.Vector3,
ca,ba,qa,p=0;for(L=V.length;p<L;++p)for(H=V[p].start,P=V[p].count,J=V[p].index,g=H,H+=P;g<H;g+=3)P=J+c[g],N=J+c[g+1],R=J+c[g+2],b(P),b(N),b(R)}},computeOffsets:function(a){void 0===a&&(a=65535);for(var b=this.attributes.index.array,c=this.attributes.position.array,d=b.length/3,e=new Uint16Array(b.length),f=0,g=0,h=[{start:0,count:0,index:0}],k=h[0],l=0,p=0,q=new Int32Array(6),n=new Int32Array(c.length),t=new Int32Array(c.length),r=0;r<c.length;r++)n[r]=-1,t[r]=-1;for(c=0;c<d;c++){for(var s=p=0;3>
s;s++)r=b[3*c+s],-1==n[r]?(q[2*s]=r,q[2*s+1]=-1,p++):n[r]<k.index?(q[2*s]=r,q[2*s+1]=-1,l++):(q[2*s]=r,q[2*s+1]=n[r]);if(g+p>k.index+a)for(k={start:f,count:0,index:g},h.push(k),p=0;6>p;p+=2)s=q[p+1],-1<s&&s<k.index&&(q[p+1]=-1);for(p=0;6>p;p+=2)r=q[p],s=q[p+1],-1===s&&(s=g++),n[r]=s,t[s]=r,e[f++]=s-k.index,k.count++}this.reorderBuffers(e,t,g);return this.drawcalls=this.offsets=h},merge:function(a,b){if(!1===a instanceof THREE.BufferGeometry)THREE.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",
a);else{void 0===b&&(b=0);var c=this.attributes,d;for(d in c)if(void 0!==a.attributes[d])for(var e=c[d].array,f=a.attributes[d],g=f.array,h=0,f=f.itemSize*b;h<g.length;h++,f++)e[f]=g[h];return this}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},reorderBuffers:function(a,b,c){var d={},e;for(e in this.attributes)"index"!=e&&(d[e]=new this.attributes[e].array.constructor(this.attributes[e].itemSize*
c));for(var f=0;f<c;f++){var g=b[f];for(e in this.attributes)if("index"!=e)for(var h=this.attributes[e].array,k=this.attributes[e].itemSize,l=d[e],p=0;p<k;p++)l[f*k+p]=h[g*k+p]}this.attributes.index.array=a;for(e in this.attributes)"index"!=e&&(this.attributes[e].array=d[e],this.attributes[e].numItems=this.attributes[e].itemSize*c)},toJSON:function(){var a={metadata:{version:4,type:"BufferGeometry",generator:"BufferGeometryExporter"},uuid:this.uuid,type:this.type,data:{attributes:{}}},b=this.attributes,
c=this.offsets,d=this.boundingSphere,e;for(e in b){var f=b[e],g=Array.prototype.slice.call(f.array);a.data.attributes[e]={itemSize:f.itemSize,type:f.array.constructor.name,array:g}}0<c.length&&(a.data.offsets=JSON.parse(JSON.stringify(c)));null!==d&&(a.data.boundingSphere={center:d.center.toArray(),radius:d.radius});return a},clone:function(){var a=new THREE.BufferGeometry,b;for(b in this.attributes)a.addAttribute(b,this.attributes[b].clone());b=0;for(var c=this.offsets.length;b<c;b++){var d=this.offsets[b];
a.offsets.push({start:d.start,index:d.index,count:d.count})}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);
THREE.Geometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="Geometry";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.dynamic=!0;this.groupsNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=
this.tangentsNeedUpdate=this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var b=(new THREE.Matrix3).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){a=this.faces[c];a.normal.applyMatrix3(b).normalize();for(var e=0,f=a.vertexNormals.length;e<f;e++)a.vertexNormals[e].applyMatrix3(b).normalize()}null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();this.normalsNeedUpdate=
this.verticesNeedUpdate=!0},fromBufferGeometry:function(a){for(var b=this,c=a.attributes,d=c.position.array,e=void 0!==c.index?c.index.array:void 0,f=void 0!==c.normal?c.normal.array:void 0,g=void 0!==c.color?c.color.array:void 0,h=void 0!==c.uv?c.uv.array:void 0,k=[],l=[],p=c=0;c<d.length;c+=3,p+=2)b.vertices.push(new THREE.Vector3(d[c],d[c+1],d[c+2])),void 0!==f&&k.push(new THREE.Vector3(f[c],f[c+1],f[c+2])),void 0!==g&&b.colors.push(new THREE.Color(g[c],g[c+1],g[c+2])),void 0!==h&&l.push(new THREE.Vector2(h[p],
h[p+1]));var q=function(a,c,d){var e=void 0!==f?[k[a].clone(),k[c].clone(),k[d].clone()]:[],n=void 0!==g?[b.colors[a].clone(),b.colors[c].clone(),b.colors[d].clone()]:[];b.faces.push(new THREE.Face3(a,c,d,e,n));void 0!==h&&b.faceVertexUvs[0].push([l[a].clone(),l[c].clone(),l[d].clone()])};if(void 0!==e)if(d=a.drawcalls,0<d.length)for(c=0;c<d.length;c++)for(var p=d[c],n=p.start,t=p.count,r=p.index,p=n,n=n+t;p<n;p+=3)q(r+e[p],r+e[p+1],r+e[p+2]);else for(c=0;c<e.length;c+=3)q(e[c],e[c+1],e[c+2]);else for(c=
0;c<d.length/3;c+=3)q(c,c+1,c+2);this.computeFaceNormals();null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());return this},center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();this.applyMatrix((new THREE.Matrix4).setPosition(a));return a},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],
g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,g);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){var b,c,d;d=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)d[b]=new THREE.Vector3;if(a){var e,f,g,h=new THREE.Vector3,k=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],e=this.vertices[c.a],f=this.vertices[c.b],g=this.vertices[c.c],h.subVectors(g,f),k.subVectors(e,f),h.cross(k),d[c.a].add(h),d[c.b].add(h),d[c.c].add(h)}else for(a=
0,b=this.faces.length;a<b;a++)c=this.faces[a],d[c.a].add(c.normal),d[c.b].add(c.normal),d[c.c].add(c.normal);b=0;for(c=this.vertices.length;b<c;b++)d[b].normalize();a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c.vertexNormals[0]=d[c.a].clone(),c.vertexNormals[1]=d[c.b].clone(),c.vertexNormals[2]=d[c.c].clone()},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++)for(e=this.faces[c],e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=
e.normal.clone(),e.__originalVertexNormals||(e.__originalVertexNormals=[]),a=0,b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone();var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];e=this.morphNormals[a].faceNormals;var g=
this.morphNormals[a].vertexNormals,h,k;c=0;for(d=this.faces.length;c<d;c++)h=new THREE.Vector3,k={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},e.push(h),g.push(k)}g=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],h=g.faceNormals[c],k=g.vertexNormals[c],h.copy(e.normal),k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])}c=0;for(d=this.faces.length;c<
d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){var a,b,c,d,e,f,g,h,k,l,p,q,n,t,r,s,u,v=[],x=[];c=new THREE.Vector3;var D=new THREE.Vector3,w=new THREE.Vector3,y=new THREE.Vector3,A=new THREE.Vector3;a=0;for(b=this.vertices.length;a<b;a++)v[a]=new THREE.Vector3,x[a]=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)e=this.faces[a],f=this.faceVertexUvs[0][a],d=e.a,u=e.b,e=e.c,g=this.vertices[d],h=this.vertices[u],k=this.vertices[e],
l=f[0],p=f[1],q=f[2],f=h.x-g.x,n=k.x-g.x,t=h.y-g.y,r=k.y-g.y,h=h.z-g.z,g=k.z-g.z,k=p.x-l.x,s=q.x-l.x,p=p.y-l.y,l=q.y-l.y,q=1/(k*l-s*p),c.set((l*f-p*n)*q,(l*t-p*r)*q,(l*h-p*g)*q),D.set((k*n-s*f)*q,(k*r-s*t)*q,(k*g-s*h)*q),v[d].add(c),v[u].add(c),v[e].add(c),x[d].add(D),x[u].add(D),x[e].add(D);D=["a","b","c","d"];a=0;for(b=this.faces.length;a<b;a++)for(e=this.faces[a],c=0;c<Math.min(e.vertexNormals.length,3);c++)A.copy(e.vertexNormals[c]),d=e[D[c]],u=v[d],w.copy(u),w.sub(A.multiplyScalar(A.dot(u))).normalize(),
y.crossVectors(e.vertexNormals[c],u),d=y.dot(x[d]),d=0>d?-1:1,e.vertexTangents[c]=new THREE.Vector4(w.x,w.y,w.z,d);this.hasTangents=!0},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);
this.boundingSphere.setFromPoints(this.vertices)},merge:function(a,b,c){if(!1===a instanceof THREE.Geometry)THREE.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",a);else{var d,e=this.vertices.length,f=this.vertices,g=a.vertices,h=this.faces,k=a.faces,l=this.faceVertexUvs[0];a=a.faceVertexUvs[0];void 0===c&&(c=0);void 0!==b&&(d=(new THREE.Matrix3).getNormalMatrix(b));for(var p=0,q=g.length;p<q;p++){var n=g[p].clone();void 0!==b&&n.applyMatrix4(b);f.push(n)}p=0;for(q=k.length;p<
q;p++){var g=k[p],t,r=g.vertexNormals,s=g.vertexColors,n=new THREE.Face3(g.a+e,g.b+e,g.c+e);n.normal.copy(g.normal);void 0!==d&&n.normal.applyMatrix3(d).normalize();b=0;for(f=r.length;b<f;b++)t=r[b].clone(),void 0!==d&&t.applyMatrix3(d).normalize(),n.vertexNormals.push(t);n.color.copy(g.color);b=0;for(f=s.length;b<f;b++)t=s[b],n.vertexColors.push(t.clone());n.materialIndex=g.materialIndex+c;h.push(n)}p=0;for(q=a.length;p<q;p++)if(c=a[p],d=[],void 0!==c){b=0;for(f=c.length;b<f;b++)d.push(c[b].clone());
l.push(d)}}},mergeMesh:function(a){!1===a instanceof THREE.Mesh?THREE.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",a):(a.matrixAutoUpdate&&a.updateMatrix(),this.merge(a.geometry,a.matrix))},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,g;f=0;for(g=this.vertices.length;f<g;f++)d=this.vertices[f],d=Math.round(d.x*e)+"_"+Math.round(d.y*e)+"_"+Math.round(d.z*e),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];a=[];f=0;for(g=this.faces.length;f<
g;f++)for(e=this.faces[f],e.a=c[e.a],e.b=c[e.b],e.c=c[e.c],e=[e.a,e.b,e.c],d=0;3>d;d++)if(e[d]==e[(d+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(e=a[f],this.faces.splice(e,1),c=0,g=this.faceVertexUvs.length;c<g;c++)this.faceVertexUvs[c].splice(e,1);f=this.vertices.length-b.length;this.vertices=b;return f},toJSON:function(){function a(a,b,c){return c?a|1<<b:a&~(1<<b)}function b(a){var b=a.x.toString()+a.y.toString()+a.z.toString();if(void 0!==l[b])return l[b];l[b]=k.length/3;k.push(a.x,a.y,
a.z);return l[b]}function c(a){var b=a.r.toString()+a.g.toString()+a.b.toString();if(void 0!==q[b])return q[b];q[b]=p.length;p.push(a.getHex());return q[b]}function d(a){var b=a.x.toString()+a.y.toString();if(void 0!==t[b])return t[b];t[b]=n.length/2;n.push(a.x,a.y);return t[b]}var e={metadata:{version:4,type:"BufferGeometry",generator:"BufferGeometryExporter"},uuid:this.uuid,type:this.type};""!==this.name&&(e.name=this.name);if(void 0!==this.parameters){var f=this.parameters,g;for(g in f)void 0!==
f[g]&&(e[g]=f[g]);return e}f=[];for(g=0;g<this.vertices.length;g++){var h=this.vertices[g];f.push(h.x,h.y,h.z)}var h=[],k=[],l={},p=[],q={},n=[],t={};for(g=0;g<this.faces.length;g++){var r=this.faces[g],s=void 0!==this.faceVertexUvs[0][g],u=0<r.normal.length(),v=0<r.vertexNormals.length,x=1!==r.color.r||1!==r.color.g||1!==r.color.b,D=0<r.vertexColors.length,w=0,w=a(w,0,0),w=a(w,1,!1),w=a(w,2,!1),w=a(w,3,s),w=a(w,4,u),w=a(w,5,v),w=a(w,6,x),w=a(w,7,D);h.push(w);h.push(r.a,r.b,r.c);s&&(s=this.faceVertexUvs[0][g],
h.push(d(s[0]),d(s[1]),d(s[2])));u&&h.push(b(r.normal));v&&(u=r.vertexNormals,h.push(b(u[0]),b(u[1]),b(u[2])));x&&h.push(c(r.color));D&&(r=r.vertexColors,h.push(c(r[0]),c(r[1]),c(r[2])))}e.data={};e.data.vertices=f;e.data.normals=k;0<p.length&&(e.data.colors=p);0<n.length&&(e.data.uvs=[n]);e.data.faces=h;return e},clone:function(){for(var a=new THREE.Geometry,b=this.vertices,c=0,d=b.length;c<d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=b.length;c<d;c++)a.faces.push(b[c].clone());c=0;
for(d=this.faceVertexUvs.length;c<d;c++){b=this.faceVertexUvs[c];void 0===a.faceVertexUvs[c]&&(a.faceVertexUvs[c]=[]);for(var e=0,f=b.length;e<f;e++){for(var g=b[e],h=[],k=0,l=g.length;k<l;k++)h.push(g[k].clone());a.faceVertexUvs[c].push(h)}}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);THREE.GeometryIdCount=0;
THREE.Camera=function(){THREE.Object3D.call(this);this.type="Camera";this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.constructor=THREE.Camera;THREE.Camera.prototype.getWorldDirection=function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Vector3;this.getWorldQuaternion(a);return b.set(0,0,-1).applyQuaternion(a)}}();
THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(b){a.lookAt(this.position,b,this.up);this.quaternion.setFromRotationMatrix(a)}}();THREE.Camera.prototype.clone=function(a){void 0===a&&(a=new THREE.Camera);THREE.Object3D.prototype.clone.call(this,a);a.matrixWorldInverse.copy(this.matrixWorldInverse);a.projectionMatrix.copy(this.projectionMatrix);return a};
THREE.CubeCamera=function(a,b,c){THREE.Object3D.call(this);this.type="CubeCamera";var d=new THREE.PerspectiveCamera(90,1,a,b);d.up.set(0,-1,0);d.lookAt(new THREE.Vector3(1,0,0));this.add(d);var e=new THREE.PerspectiveCamera(90,1,a,b);e.up.set(0,-1,0);e.lookAt(new THREE.Vector3(-1,0,0));this.add(e);var f=new THREE.PerspectiveCamera(90,1,a,b);f.up.set(0,0,1);f.lookAt(new THREE.Vector3(0,1,0));this.add(f);var g=new THREE.PerspectiveCamera(90,1,a,b);g.up.set(0,0,-1);g.lookAt(new THREE.Vector3(0,-1,0));
this.add(g);var h=new THREE.PerspectiveCamera(90,1,a,b);h.up.set(0,-1,0);h.lookAt(new THREE.Vector3(0,0,1));this.add(h);var k=new THREE.PerspectiveCamera(90,1,a,b);k.up.set(0,-1,0);k.lookAt(new THREE.Vector3(0,0,-1));this.add(k);this.renderTarget=new THREE.WebGLRenderTargetCube(c,c,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updateCubeMap=function(a,b){var c=this.renderTarget,n=c.generateMipmaps;c.generateMipmaps=!1;c.activeCubeFace=0;a.render(b,d,c);c.activeCubeFace=
1;a.render(b,e,c);c.activeCubeFace=2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,h,c);c.generateMipmaps=n;c.activeCubeFace=5;a.render(b,k,c)}};THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype);THREE.CubeCamera.prototype.constructor=THREE.CubeCamera;
THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.type="OrthographicCamera";this.zoom=1;this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.constructor=THREE.OrthographicCamera;
THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){var a=(this.right-this.left)/(2*this.zoom),b=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2;this.projectionMatrix.makeOrthographic(c-a,c+a,d+b,d-b,this.near,this.far)};
THREE.OrthographicCamera.prototype.clone=function(){var a=new THREE.OrthographicCamera;THREE.Camera.prototype.clone.call(this,a);a.zoom=this.zoom;a.left=this.left;a.right=this.right;a.top=this.top;a.bottom=this.bottom;a.near=this.near;a.far=this.far;a.projectionMatrix.copy(this.projectionMatrix);return a};
THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.type="PerspectiveCamera";this.zoom=1;this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);THREE.PerspectiveCamera.prototype.constructor=THREE.PerspectiveCamera;
THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){var a=THREE.Math.radToDeg(2*Math.atan(Math.tan(.5*THREE.Math.degToRad(this.fov))/this.zoom));if(this.fullWidth){var b=this.fullWidth/this.fullHeight,a=Math.tan(THREE.Math.degToRad(.5*a))*this.near,c=-a,d=b*c,b=Math.abs(b*a-d),c=Math.abs(a-c);this.projectionMatrix.makeFrustum(d+this.x*b/this.fullWidth,d+(this.x+this.width)*b/this.fullWidth,a-(this.y+this.height)*c/this.fullHeight,a-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(a,
this.aspect,this.near,this.far)};THREE.PerspectiveCamera.prototype.clone=function(){var a=new THREE.PerspectiveCamera;THREE.Camera.prototype.clone.call(this,a);a.zoom=this.zoom;a.fov=this.fov;a.aspect=this.aspect;a.near=this.near;a.far=this.far;a.projectionMatrix.copy(this.projectionMatrix);return a};THREE.Light=function(a){THREE.Object3D.call(this);this.type="Light";this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.Light.prototype.constructor=THREE.Light;
THREE.Light.prototype.clone=function(a){void 0===a&&(a=new THREE.Light);THREE.Object3D.prototype.clone.call(this,a);a.color.copy(this.color);return a};THREE.AmbientLight=function(a){THREE.Light.call(this,a);this.type="AmbientLight"};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);THREE.AmbientLight.prototype.constructor=THREE.AmbientLight;THREE.AmbientLight.prototype.clone=function(){var a=new THREE.AmbientLight;THREE.Light.prototype.clone.call(this,a);return a};
THREE.AreaLight=function(a,b){THREE.Light.call(this,a);this.type="AreaLight";this.normal=new THREE.Vector3(0,-1,0);this.right=new THREE.Vector3(1,0,0);this.intensity=void 0!==b?b:1;this.height=this.width=1;this.constantAttenuation=1.5;this.linearAttenuation=.5;this.quadraticAttenuation=.1};THREE.AreaLight.prototype=Object.create(THREE.Light.prototype);THREE.AreaLight.prototype.constructor=THREE.AreaLight;
THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.type="DirectionalLight";this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;
this.shadowCascadeOffset=new THREE.Vector3(0,0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,.99,.998];this.shadowCascadeFarZ=[.99,.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);THREE.DirectionalLight.prototype.constructor=THREE.DirectionalLight;
THREE.DirectionalLight.prototype.clone=function(){var a=new THREE.DirectionalLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;a.shadowCameraNear=this.shadowCameraNear;a.shadowCameraFar=this.shadowCameraFar;a.shadowCameraLeft=this.shadowCameraLeft;a.shadowCameraRight=this.shadowCameraRight;a.shadowCameraTop=this.shadowCameraTop;a.shadowCameraBottom=this.shadowCameraBottom;a.shadowCameraVisible=
this.shadowCameraVisible;a.shadowBias=this.shadowBias;a.shadowDarkness=this.shadowDarkness;a.shadowMapWidth=this.shadowMapWidth;a.shadowMapHeight=this.shadowMapHeight;a.shadowCascade=this.shadowCascade;a.shadowCascadeOffset.copy(this.shadowCascadeOffset);a.shadowCascadeCount=this.shadowCascadeCount;a.shadowCascadeBias=this.shadowCascadeBias.slice(0);a.shadowCascadeWidth=this.shadowCascadeWidth.slice(0);a.shadowCascadeHeight=this.shadowCascadeHeight.slice(0);a.shadowCascadeNearZ=this.shadowCascadeNearZ.slice(0);
a.shadowCascadeFarZ=this.shadowCascadeFarZ.slice(0);return a};THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.type="HemisphereLight";this.position.set(0,100,0);this.groundColor=new THREE.Color(b);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);THREE.HemisphereLight.prototype.constructor=THREE.HemisphereLight;
THREE.HemisphereLight.prototype.clone=function(){var a=new THREE.HemisphereLight;THREE.Light.prototype.clone.call(this,a);a.groundColor.copy(this.groundColor);a.intensity=this.intensity;return a};THREE.PointLight=function(a,b,c,d){THREE.Light.call(this,a);this.type="PointLight";this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.decay=void 0!==d?d:1};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);THREE.PointLight.prototype.constructor=THREE.PointLight;
THREE.PointLight.prototype.clone=function(){var a=new THREE.PointLight;THREE.Light.prototype.clone.call(this,a);a.intensity=this.intensity;a.distance=this.distance;a.decay=this.decay;return a};
THREE.SpotLight=function(a,b,c,d,e,f){THREE.Light.call(this,a);this.type="SpotLight";this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.exponent=void 0!==e?e:10;this.decay=void 0!==f?f:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=.5;this.shadowMapHeight=this.shadowMapWidth=
512;this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);THREE.SpotLight.prototype.constructor=THREE.SpotLight;
THREE.SpotLight.prototype.clone=function(){var a=new THREE.SpotLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.distance=this.distance;a.angle=this.angle;a.exponent=this.exponent;a.decay=this.decay;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;a.shadowCameraNear=this.shadowCameraNear;a.shadowCameraFar=this.shadowCameraFar;a.shadowCameraFov=this.shadowCameraFov;a.shadowCameraVisible=this.shadowCameraVisible;a.shadowBias=this.shadowBias;
a.shadowDarkness=this.shadowDarkness;a.shadowMapWidth=this.shadowMapWidth;a.shadowMapHeight=this.shadowMapHeight;return a};THREE.Cache={files:{},add:function(a,b){this.files[a]=b},get:function(a){return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};
THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.imageLoader=new THREE.ImageLoader;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/a.total).toFixed(0)+
"%"):b+((a.loaded/1024).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");if(1===a.length)return"./";a.pop();return a.join("/")+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=this.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function d(a,
d,e,g,h,k,s){var u=b+e,v,x=THREE.Loader.Handlers.get(u);null!==x?v=x.load(u):(v=new THREE.Texture,x=f.imageLoader,x.crossOrigin=f.crossOrigin,x.load(u,function(a){if(!1===THREE.Math.isPowerOfTwo(a.width)||!1===THREE.Math.isPowerOfTwo(a.height)){var b=c(a.width),d=c(a.height),e=document.createElement("canvas");e.width=b;e.height=d;e.getContext("2d").drawImage(a,0,0,b,d);v.image=e}else v.image=a;v.needsUpdate=!0}));v.sourceFile=e;g&&(v.repeat.set(g[0],g[1]),1!==g[0]&&(v.wrapS=THREE.RepeatWrapping),
1!==g[1]&&(v.wrapT=THREE.RepeatWrapping));h&&v.offset.set(h[0],h[1]);k&&(e={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==e[k[0]]&&(v.wrapS=e[k[0]]),void 0!==e[k[1]]&&(v.wrapT=e[k[1]]));s&&(v.anisotropy=s);a[d]=v}function e(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var f=this,g="MeshLambertMaterial",h={color:15658734,opacity:1,map:null,lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var k=a.shading.toLowerCase();"phong"===k?g="MeshPhongMaterial":
"basic"===k&&(g="MeshBasicMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(h.blending=THREE[a.blending]);void 0!==a.transparent&&(h.transparent=a.transparent);void 0!==a.opacity&&1>a.opacity&&(h.transparent=!0);void 0!==a.depthTest&&(h.depthTest=a.depthTest);void 0!==a.depthWrite&&(h.depthWrite=a.depthWrite);void 0!==a.visible&&(h.visible=a.visible);void 0!==a.flipSided&&(h.side=THREE.BackSide);void 0!==a.doubleSided&&(h.side=THREE.DoubleSide);void 0!==a.wireframe&&(h.wireframe=a.wireframe);
void 0!==a.vertexColors&&("face"===a.vertexColors?h.vertexColors=THREE.FaceColors:a.vertexColors&&(h.vertexColors=THREE.VertexColors));a.colorDiffuse?h.color=e(a.colorDiffuse):a.DbgColor&&(h.color=a.DbgColor);a.colorSpecular&&(h.specular=e(a.colorSpecular));a.colorEmissive&&(h.emissive=e(a.colorEmissive));void 0!==a.transparency&&(console.warn("THREE.Loader: transparency has been renamed to opacity"),a.opacity=a.transparency);void 0!==a.opacity&&(h.opacity=a.opacity);a.specularCoef&&(h.shininess=
a.specularCoef);a.mapDiffuse&&b&&d(h,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,a.mapDiffuseAnisotropy);a.mapLight&&b&&d(h,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapBump&&b&&d(h,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&d(h,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&d(h,"specularMap",
a.mapSpecular,a.mapSpecularRepeat,a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapAlpha&&b&&d(h,"alphaMap",a.mapAlpha,a.mapAlphaRepeat,a.mapAlphaOffset,a.mapAlphaWrap,a.mapAlphaAnisotropy);a.mapBumpScale&&(h.bumpScale=a.mapBumpScale);a.mapNormalFactor&&(h.normalScale=new THREE.Vector2(a.mapNormalFactor,a.mapNormalFactor));g=new THREE[g](h);void 0!==a.DbgName&&(g.name=a.DbgName);return g}};
THREE.Loader.Handlers={handlers:[],add:function(a,b){this.handlers.push(a,b)},get:function(a){for(var b=0,c=this.handlers.length;b<c;b+=2){var d=this.handlers[b+1];if(this.handlers[b].test(a))return d}return null}};THREE.XHRLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(a,b,c,d){var e=this,f=THREE.Cache.get(a);void 0!==f?b&&b(f):(f=new XMLHttpRequest,f.open("GET",a,!0),f.addEventListener("load",function(c){THREE.Cache.add(a,this.response);b&&b(this.response);e.manager.itemEnd(a)},!1),void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1),void 0!==d&&f.addEventListener("error",function(a){d(a)},!1),void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin),void 0!==this.responseType&&(f.responseType=
this.responseType),f.send(null),e.manager.itemStart(a))},setResponseType:function(a){this.responseType=a},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.ImageLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b,c,d){var e=this,f=THREE.Cache.get(a);if(void 0!==f)b(f);else return f=document.createElement("img"),f.addEventListener("load",function(c){THREE.Cache.add(a,this);b&&b(this);e.manager.itemEnd(a)},!1),void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1),void 0!==d&&f.addEventListener("error",function(a){d(a)},!1),void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin),f.src=a,e.manager.itemStart(a),f},setCrossOrigin:function(a){this.crossOrigin=
a}};THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.constructor=THREE.JSONLoader;THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var f=new XMLHttpRequest,g=0;f.onreadystatechange=function(){if(f.readyState===f.DONE)if(200===f.status||0===f.status){if(f.responseText){var h=JSON.parse(f.responseText),k=h.metadata;if(void 0!==k){if("object"===k.type){THREE.error("THREE.JSONLoader: "+b+" should be loaded with THREE.ObjectLoader instead.");return}if("scene"===k.type){THREE.error("THREE.JSONLoader: "+b+" seems to be a Scene. Use THREE.SceneLoader instead.");return}}h=a.parse(h,
d);c(h.geometry,h.materials)}else THREE.error("THREE.JSONLoader: "+b+" seems to be unreachable or the file is empty.");a.onLoadComplete()}else THREE.error("THREE.JSONLoader: Couldn't load "+b+" ("+f.status+")");else f.readyState===f.LOADING?e&&(0===g&&(g=f.getResponseHeader("Content-Length")),e({total:g,loaded:f.responseText.length})):f.readyState===f.HEADERS_RECEIVED&&void 0!==e&&(g=f.getResponseHeader("Content-Length"))};f.open("GET",b,!0);f.withCredentials=this.withCredentials;f.send(null)};
THREE.JSONLoader.prototype.parse=function(a,b){var c=new THREE.Geometry,d=void 0!==a.scale?1/a.scale:1;(function(b){var d,g,h,k,l,p,q,n,t,r,s,u,v,x=a.faces;p=a.vertices;var D=a.normals,w=a.colors,y=0;if(void 0!==a.uvs){for(d=0;d<a.uvs.length;d++)a.uvs[d].length&&y++;for(d=0;d<y;d++)c.faceVertexUvs[d]=[]}k=0;for(l=p.length;k<l;)d=new THREE.Vector3,d.x=p[k++]*b,d.y=p[k++]*b,d.z=p[k++]*b,c.vertices.push(d);k=0;for(l=x.length;k<l;)if(b=x[k++],t=b&1,h=b&2,d=b&8,q=b&16,r=b&32,p=b&64,b&=128,t){t=new THREE.Face3;
t.a=x[k];t.b=x[k+1];t.c=x[k+3];s=new THREE.Face3;s.a=x[k+1];s.b=x[k+2];s.c=x[k+3];k+=4;h&&(h=x[k++],t.materialIndex=h,s.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<y;d++)for(u=a.uvs[d],c.faceVertexUvs[d][h]=[],c.faceVertexUvs[d][h+1]=[],g=0;4>g;g++)n=x[k++],v=u[2*n],n=u[2*n+1],v=new THREE.Vector2(v,n),2!==g&&c.faceVertexUvs[d][h].push(v),0!==g&&c.faceVertexUvs[d][h+1].push(v);q&&(q=3*x[k++],t.normal.set(D[q++],D[q++],D[q]),s.normal.copy(t.normal));if(r)for(d=0;4>d;d++)q=3*x[k++],r=new THREE.Vector3(D[q++],
D[q++],D[q]),2!==d&&t.vertexNormals.push(r),0!==d&&s.vertexNormals.push(r);p&&(p=x[k++],p=w[p],t.color.setHex(p),s.color.setHex(p));if(b)for(d=0;4>d;d++)p=x[k++],p=w[p],2!==d&&t.vertexColors.push(new THREE.Color(p)),0!==d&&s.vertexColors.push(new THREE.Color(p));c.faces.push(t);c.faces.push(s)}else{t=new THREE.Face3;t.a=x[k++];t.b=x[k++];t.c=x[k++];h&&(h=x[k++],t.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<y;d++)for(u=a.uvs[d],c.faceVertexUvs[d][h]=[],g=0;3>g;g++)n=x[k++],v=u[2*n],n=u[2*n+1],
v=new THREE.Vector2(v,n),c.faceVertexUvs[d][h].push(v);q&&(q=3*x[k++],t.normal.set(D[q++],D[q++],D[q]));if(r)for(d=0;3>d;d++)q=3*x[k++],r=new THREE.Vector3(D[q++],D[q++],D[q]),t.vertexNormals.push(r);p&&(p=x[k++],t.color.setHex(w[p]));if(b)for(d=0;3>d;d++)p=x[k++],t.vertexColors.push(new THREE.Color(w[p]));c.faces.push(t)}})(d);(function(){var b=void 0!==a.influencesPerVertex?a.influencesPerVertex:2;if(a.skinWeights)for(var d=0,g=a.skinWeights.length;d<g;d+=b)c.skinWeights.push(new THREE.Vector4(a.skinWeights[d],
1<b?a.skinWeights[d+1]:0,2<b?a.skinWeights[d+2]:0,3<b?a.skinWeights[d+3]:0));if(a.skinIndices)for(d=0,g=a.skinIndices.length;d<g;d+=b)c.skinIndices.push(new THREE.Vector4(a.skinIndices[d],1<b?a.skinIndices[d+1]:0,2<b?a.skinIndices[d+2]:0,3<b?a.skinIndices[d+3]:0));c.bones=a.bones;c.bones&&0<c.bones.length&&(c.skinWeights.length!==c.skinIndices.length||c.skinIndices.length!==c.vertices.length)&&THREE.warn("THREE.JSONLoader: When skinning, number of vertices ("+c.vertices.length+"), skinIndices ("+
c.skinIndices.length+"), and skinWeights ("+c.skinWeights.length+") should match.");c.animation=a.animation;c.animations=a.animations})();(function(b){if(void 0!==a.morphTargets){var d,g,h,k,l,p;d=0;for(g=a.morphTargets.length;d<g;d++)for(c.morphTargets[d]={},c.morphTargets[d].name=a.morphTargets[d].name,c.morphTargets[d].vertices=[],l=c.morphTargets[d].vertices,p=a.morphTargets[d].vertices,h=0,k=p.length;h<k;h+=3){var q=new THREE.Vector3;q.x=p[h]*b;q.y=p[h+1]*b;q.z=p[h+2]*b;l.push(q)}}if(void 0!==
a.morphColors)for(d=0,g=a.morphColors.length;d<g;d++)for(c.morphColors[d]={},c.morphColors[d].name=a.morphColors[d].name,c.morphColors[d].colors=[],k=c.morphColors[d].colors,l=a.morphColors[d].colors,b=0,h=l.length;b<h;b+=3)p=new THREE.Color(16755200),p.setRGB(l[b],l[b+1],l[b+2]),k.push(p)})(d);c.computeFaceNormals();c.computeBoundingSphere();if(void 0===a.materials||0===a.materials.length)return{geometry:c};d=this.initMaterials(a.materials,b);this.needsTangents(d)&&c.computeTangents();return{geometry:c,
materials:d}};THREE.LoadingManager=function(a,b,c){var d=this,e=0,f=0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){f++};this.itemEnd=function(a){e++;if(void 0!==d.onProgress)d.onProgress(a,e,f);if(e===f&&void 0!==d.onLoad)d.onLoad()}};THREE.DefaultLoadingManager=new THREE.LoadingManager;THREE.BufferGeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(a,b,c,d){var e=this,f=new THREE.XHRLoader(e.manager);f.setCrossOrigin(this.crossOrigin);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE.BufferGeometry,c=a.data.attributes,d;for(d in c){var e=c[d],f=new self[e.type](e.array);b.addAttribute(d,new THREE.BufferAttribute(f,e.itemSize))}c=a.data.offsets;void 0!==c&&(b.offsets=JSON.parse(JSON.stringify(c)));
a=a.data.boundingSphere;void 0!==a&&(c=new THREE.Vector3,void 0!==a.center&&c.fromArray(a.center),b.boundingSphere=new THREE.Sphere(c,a.radius));return b}};THREE.MaterialLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(a,b,c,d){var e=this,f=new THREE.XHRLoader(e.manager);f.setCrossOrigin(this.crossOrigin);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE[a.type];void 0!==a.color&&b.color.setHex(a.color);void 0!==a.emissive&&b.emissive.setHex(a.emissive);void 0!==a.specular&&b.specular.setHex(a.specular);void 0!==a.shininess&&(b.shininess=a.shininess);
void 0!==a.uniforms&&(b.uniforms=a.uniforms);void 0!==a.vertexShader&&(b.vertexShader=a.vertexShader);void 0!==a.fragmentShader&&(b.fragmentShader=a.fragmentShader);void 0!==a.vertexColors&&(b.vertexColors=a.vertexColors);void 0!==a.shading&&(b.shading=a.shading);void 0!==a.blending&&(b.blending=a.blending);void 0!==a.side&&(b.side=a.side);void 0!==a.opacity&&(b.opacity=a.opacity);void 0!==a.transparent&&(b.transparent=a.transparent);void 0!==a.wireframe&&(b.wireframe=a.wireframe);void 0!==a.size&&
(b.size=a.size);void 0!==a.sizeAttenuation&&(b.sizeAttenuation=a.sizeAttenuation);if(void 0!==a.materials)for(var c=0,d=a.materials.length;c<d;c++)b.materials.push(this.parse(a.materials[c]));return b}};THREE.ObjectLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this.texturePath=""};
THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(a,b,c,d){""===this.texturePath&&(this.texturePath=a.substring(0,a.lastIndexOf("/")+1));var e=this,f=new THREE.XHRLoader(e.manager);f.setCrossOrigin(this.crossOrigin);f.load(a,function(a){e.parse(JSON.parse(a),b)},c,d)},setTexturePath:function(a){this.texturePath=a},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a,b){var c=this.parseGeometries(a.geometries),d=this.parseImages(a.images,function(){void 0!==b&&b(e)}),
d=this.parseTextures(a.textures,d),d=this.parseMaterials(a.materials,d),e=this.parseObject(a.object,c,d);void 0!==a.images&&0!==a.images.length||void 0===b||b(e);return e},parseGeometries:function(a){var b={};if(void 0!==a)for(var c=new THREE.JSONLoader,d=new THREE.BufferGeometryLoader,e=0,f=a.length;e<f;e++){var g,h=a[e];switch(h.type){case "PlaneGeometry":case "PlaneBufferGeometry":g=new THREE[h.type](h.width,h.height,h.widthSegments,h.heightSegments);break;case "BoxGeometry":case "CubeGeometry":g=
new THREE.BoxGeometry(h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case "CircleGeometry":g=new THREE.CircleGeometry(h.radius,h.segments);break;case "CylinderGeometry":g=new THREE.CylinderGeometry(h.radiusTop,h.radiusBottom,h.height,h.radialSegments,h.heightSegments,h.openEnded);break;case "SphereGeometry":g=new THREE.SphereGeometry(h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case "IcosahedronGeometry":g=new THREE.IcosahedronGeometry(h.radius,
h.detail);break;case "TorusGeometry":g=new THREE.TorusGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case "TorusKnotGeometry":g=new THREE.TorusKnotGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.p,h.q,h.heightScale);break;case "BufferGeometry":g=d.parse(h);break;case "Geometry":g=c.parse(h.data).geometry}g.uuid=h.uuid;void 0!==h.name&&(g.name=h.name);b[h.uuid]=g}return b},parseMaterials:function(a,b){var c={};if(void 0!==a)for(var d=function(a){void 0===b[a]&&
THREE.warn("THREE.ObjectLoader: Undefined texture",a);return b[a]},e=new THREE.MaterialLoader,f=0,g=a.length;f<g;f++){var h=a[f],k=e.parse(h);k.uuid=h.uuid;void 0!==h.name&&(k.name=h.name);void 0!==h.map&&(k.map=d(h.map));void 0!==h.bumpMap&&(k.bumpMap=d(h.bumpMap),h.bumpScale&&(k.bumpScale=new THREE.Vector2(h.bumpScale,h.bumpScale)));void 0!==h.alphaMap&&(k.alphaMap=d(h.alphaMap));void 0!==h.envMap&&(k.envMap=d(h.envMap));void 0!==h.normalMap&&(k.normalMap=d(h.normalMap),h.normalScale&&(k.normalScale=
new THREE.Vector2(h.normalScale,h.normalScale)));void 0!==h.lightMap&&(k.lightMap=d(h.lightMap));void 0!==h.specularMap&&(k.specularMap=d(h.specularMap));c[h.uuid]=k}return c},parseImages:function(a,b){var c=this,d={};if(void 0!==a&&0<a.length){var e=new THREE.LoadingManager(b),f=new THREE.ImageLoader(e);f.setCrossOrigin(this.crossOrigin);for(var e=function(a){c.manager.itemStart(a);return f.load(a,function(){c.manager.itemEnd(a)})},g=0,h=a.length;g<h;g++){var k=a[g],l=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(k.url)?
k.url:c.texturePath+k.url;d[k.uuid]=e(l)}}return d},parseTextures:function(a,b){var c={};if(void 0!==a)for(var d=0,e=a.length;d<e;d++){var f=a[d];void 0===f.image&&THREE.warn('THREE.ObjectLoader: No "image" speficied for',f.uuid);void 0===b[f.image]&&THREE.warn("THREE.ObjectLoader: Undefined image",f.image);var g=new THREE.Texture(b[f.image]);g.needsUpdate=!0;g.uuid=f.uuid;void 0!==f.name&&(g.name=f.name);void 0!==f.repeat&&(g.repeat=new THREE.Vector2(f.repeat[0],f.repeat[1]));void 0!==f.minFilter&&
(g.minFilter=THREE[f.minFilter]);void 0!==f.magFilter&&(g.magFilter=THREE[f.magFilter]);void 0!==f.anisotropy&&(g.anisotropy=f.anisotropy);f.wrap instanceof Array&&(g.wrapS=THREE[f.wrap[0]],g.wrapT=THREE[f.wrap[1]]);c[f.uuid]=g}return c},parseObject:function(){var a=new THREE.Matrix4;return function(b,c,d){var e;e=function(a){void 0===c[a]&&THREE.warn("THREE.ObjectLoader: Undefined geometry",a);return c[a]};var f=function(a){void 0===d[a]&&THREE.warn("THREE.ObjectLoader: Undefined material",a);return d[a]};
switch(b.type){case "Scene":e=new THREE.Scene;break;case "PerspectiveCamera":e=new THREE.PerspectiveCamera(b.fov,b.aspect,b.near,b.far);break;case "OrthographicCamera":e=new THREE.OrthographicCamera(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case "AmbientLight":e=new THREE.AmbientLight(b.color);break;case "DirectionalLight":e=new THREE.DirectionalLight(b.color,b.intensity);break;case "PointLight":e=new THREE.PointLight(b.color,b.intensity,b.distance,b.decay);break;case "SpotLight":e=new THREE.SpotLight(b.color,
b.intensity,b.distance,b.angle,b.exponent,b.decay);break;case "HemisphereLight":e=new THREE.HemisphereLight(b.color,b.groundColor,b.intensity);break;case "Mesh":e=new THREE.Mesh(e(b.geometry),f(b.material));break;case "Line":e=new THREE.Line(e(b.geometry),f(b.material),b.mode);break;case "PointCloud":e=new THREE.PointCloud(e(b.geometry),f(b.material));break;case "Sprite":e=new THREE.Sprite(f(b.material));break;case "Group":e=new THREE.Group;break;default:e=new THREE.Object3D}e.uuid=b.uuid;void 0!==
b.name&&(e.name=b.name);void 0!==b.matrix?(a.fromArray(b.matrix),a.decompose(e.position,e.quaternion,e.scale)):(void 0!==b.position&&e.position.fromArray(b.position),void 0!==b.rotation&&e.rotation.fromArray(b.rotation),void 0!==b.scale&&e.scale.fromArray(b.scale));void 0!==b.visible&&(e.visible=b.visible);void 0!==b.userData&&(e.userData=b.userData);if(void 0!==b.children)for(var g in b.children)e.add(this.parseObject(b.children[g],c,d));return e}}()};
THREE.TextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a,b,c,d){var e=new THREE.ImageLoader(this.manager);e.setCrossOrigin(this.crossOrigin);e.load(a,function(a){a=new THREE.Texture(a);a.needsUpdate=!0;void 0!==b&&b(a)},c,d)},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.DataTextureLoader=THREE.BinaryTextureLoader=function(){this._parser=null};
THREE.BinaryTextureLoader.prototype={constructor:THREE.BinaryTextureLoader,load:function(a,b,c,d){var e=this,f=new THREE.DataTexture,g=new THREE.XHRLoader;g.setResponseType("arraybuffer");g.load(a,function(a){if(a=e._parser(a))void 0!==a.image?f.image=a.image:void 0!==a.data&&(f.image.width=a.width,f.image.height=a.height,f.image.data=a.data),f.wrapS=void 0!==a.wrapS?a.wrapS:THREE.ClampToEdgeWrapping,f.wrapT=void 0!==a.wrapT?a.wrapT:THREE.ClampToEdgeWrapping,f.magFilter=void 0!==a.magFilter?a.magFilter:
THREE.LinearFilter,f.minFilter=void 0!==a.minFilter?a.minFilter:THREE.LinearMipMapLinearFilter,f.anisotropy=void 0!==a.anisotropy?a.anisotropy:1,void 0!==a.format&&(f.format=a.format),void 0!==a.type&&(f.type=a.type),void 0!==a.mipmaps&&(f.mipmaps=a.mipmaps),1===a.mipmapCount&&(f.minFilter=THREE.LinearFilter),f.needsUpdate=!0,b&&b(f,a)},c,d);return f}};THREE.CompressedTextureLoader=function(){this._parser=null};
THREE.CompressedTextureLoader.prototype={constructor:THREE.CompressedTextureLoader,load:function(a,b,c){var d=this,e=[],f=new THREE.CompressedTexture;f.image=e;var g=new THREE.XHRLoader;g.setResponseType("arraybuffer");if(a instanceof Array){var h=0;c=function(c){g.load(a[c],function(a){a=d._parser(a,!0);e[c]={width:a.width,height:a.height,format:a.format,mipmaps:a.mipmaps};h+=1;6===h&&(1==a.mipmapCount&&(f.minFilter=THREE.LinearFilter),f.format=a.format,f.needsUpdate=!0,b&&b(f))})};for(var k=0,l=
a.length;k<l;++k)c(k)}else g.load(a,function(a){a=d._parser(a,!0);if(a.isCubemap)for(var c=a.mipmaps.length/a.mipmapCount,g=0;g<c;g++){e[g]={mipmaps:[]};for(var h=0;h<a.mipmapCount;h++)e[g].mipmaps.push(a.mipmaps[g*a.mipmapCount+h]),e[g].format=a.format,e[g].width=a.width,e[g].height=a.height}else f.image.width=a.width,f.image.height=a.height,f.mipmaps=a.mipmaps;1===a.mipmapCount&&(f.minFilter=THREE.LinearFilter);f.format=a.format;f.needsUpdate=!0;b&&b(f)});return f}};
THREE.Material=function(){Object.defineProperty(this,"id",{value:THREE.MaterialIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="Material";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=null;this.colorWrite=this.depthWrite=this.depthTest=!0;this.polygonOffset=
!1;this.overdraw=this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this._needsUpdate=this.visible=!0};
THREE.Material.prototype={constructor:THREE.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){!0===a&&this.update();this._needsUpdate=a},setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)THREE.warn("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]="overdraw"==b?Number(c):c}}},toJSON:function(){var a={metadata:{version:4.2,
type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type};""!==this.name&&(a.name=this.name);this instanceof THREE.MeshBasicMaterial?(a.color=this.color.getHex(),this.vertexColors!==THREE.NoColors&&(a.vertexColors=this.vertexColors),this.blending!==THREE.NormalBlending&&(a.blending=this.blending),this.side!==THREE.FrontSide&&(a.side=this.side)):this instanceof THREE.MeshLambertMaterial?(a.color=this.color.getHex(),a.emissive=this.emissive.getHex(),this.vertexColors!==THREE.NoColors&&
(a.vertexColors=this.vertexColors),this.shading!==THREE.SmoothShading&&(a.shading=this.shading),this.blending!==THREE.NormalBlending&&(a.blending=this.blending),this.side!==THREE.FrontSide&&(a.side=this.side)):this instanceof THREE.MeshPhongMaterial?(a.color=this.color.getHex(),a.emissive=this.emissive.getHex(),a.specular=this.specular.getHex(),a.shininess=this.shininess,this.vertexColors!==THREE.NoColors&&(a.vertexColors=this.vertexColors),this.shading!==THREE.SmoothShading&&(a.shading=this.shading),
this.blending!==THREE.NormalBlending&&(a.blending=this.blending),this.side!==THREE.FrontSide&&(a.side=this.side)):this instanceof THREE.MeshNormalMaterial?(this.blending!==THREE.NormalBlending&&(a.blending=this.blending),this.side!==THREE.FrontSide&&(a.side=this.side)):this instanceof THREE.MeshDepthMaterial?(this.blending!==THREE.NormalBlending&&(a.blending=this.blending),this.side!==THREE.FrontSide&&(a.side=this.side)):this instanceof THREE.PointCloudMaterial?(a.size=this.size,a.sizeAttenuation=
this.sizeAttenuation,a.color=this.color.getHex(),this.vertexColors!==THREE.NoColors&&(a.vertexColors=this.vertexColors),this.blending!==THREE.NormalBlending&&(a.blending=this.blending)):this instanceof THREE.ShaderMaterial?(a.uniforms=this.uniforms,a.vertexShader=this.vertexShader,a.fragmentShader=this.fragmentShader):this instanceof THREE.SpriteMaterial&&(a.color=this.color.getHex());1>this.opacity&&(a.opacity=this.opacity);!1!==this.transparent&&(a.transparent=this.transparent);!1!==this.wireframe&&
(a.wireframe=this.wireframe);return a},clone:function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=this.blendEquation;a.blendSrcAlpha=this.blendSrcAlpha;a.blendDstAlpha=this.blendDstAlpha;a.blendEquationAlpha=this.blendEquationAlpha;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=
this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;a.visible=this.visible;return a},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);THREE.MaterialIdCount=0;
THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.type="LineBasicMaterial";this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=THREE.NoColors;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial;
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};
THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.type="LineDashedMaterial";this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.constructor=THREE.LineDashedMaterial;
THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};
THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.type="MeshBasicMaterial";this.color=new THREE.Color(16777215);this.envMap=this.alphaMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial;
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.alphaMap=this.alphaMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;
a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};
THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.type="MeshLambertMaterial";this.color=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.alphaMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial;
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.alphaMap=this.alphaMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=
this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.type="MeshPhongMaterial";this.color=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(1118481);this.shininess=30;this.wrapAround=this.metal=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.bumpMap=this.lightMap=this.map=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.alphaMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=
1;this.refractionRatio=.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial;
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.metal=this.metal;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);a.specularMap=this.specularMap;
a.alphaMap=this.alphaMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.type="MeshDepthMaterial";this.wireframe=this.morphTargets=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial;
THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.MeshDepthMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.type="MeshNormalMaterial";this.wireframe=!1;this.wireframeLinewidth=1;this.morphTargets=!1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial;THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshFaceMaterial=function(a){this.uuid=THREE.Math.generateUUID();this.type="MeshFaceMaterial";this.materials=a instanceof Array?a:[]};
THREE.MeshFaceMaterial.prototype={constructor:THREE.MeshFaceMaterial,toJSON:function(){for(var a={metadata:{version:4.2,type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type,materials:[]},b=0,c=this.materials.length;b<c;b++)a.materials.push(this.materials[b].toJSON());return a},clone:function(){for(var a=new THREE.MeshFaceMaterial,b=0;b<this.materials.length;b++)a.materials.push(this.materials[b].clone());return a}};
THREE.PointCloudMaterial=function(a){THREE.Material.call(this);this.type="PointCloudMaterial";this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=THREE.NoColors;this.fog=!0;this.setValues(a)};THREE.PointCloudMaterial.prototype=Object.create(THREE.Material.prototype);THREE.PointCloudMaterial.prototype.constructor=THREE.PointCloudMaterial;
THREE.PointCloudMaterial.prototype.clone=function(){var a=new THREE.PointCloudMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.ParticleBasicMaterial=function(a){THREE.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial.");return new THREE.PointCloudMaterial(a)};
THREE.ParticleSystemMaterial=function(a){THREE.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial.");return new THREE.PointCloudMaterial(a)};
THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.type="ShaderMaterial";this.defines={};this.uniforms={};this.attributes=null;this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.shading=THREE.SmoothShading;this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=
this.morphTargets=this.skinning=!1;this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;this.setValues(a)};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial;
THREE.ShaderMaterial.prototype.clone=function(){var a=new THREE.ShaderMaterial;THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.RawShaderMaterial=function(a){THREE.ShaderMaterial.call(this,a);this.type="RawShaderMaterial"};THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);THREE.RawShaderMaterial.prototype.constructor=THREE.RawShaderMaterial;THREE.RawShaderMaterial.prototype.clone=function(){var a=new THREE.RawShaderMaterial;THREE.ShaderMaterial.prototype.clone.call(this,a);return a};
THREE.SpriteMaterial=function(a){THREE.Material.call(this);this.type="SpriteMaterial";this.color=new THREE.Color(16777215);this.map=null;this.rotation=0;this.fog=!1;this.setValues(a)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);THREE.SpriteMaterial.prototype.constructor=THREE.SpriteMaterial;
THREE.SpriteMaterial.prototype.clone=function(){var a=new THREE.SpriteMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.rotation=this.rotation;a.fog=this.fog;return a};
THREE.Texture=function(a,b,c,d,e,f,g,h,k){Object.defineProperty(this,"id",{value:THREE.TextureIdCount++});this.uuid=THREE.Math.generateUUID();this.sourceFile=this.name="";this.image=void 0!==a?a:THREE.Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:THREE.Texture.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;
this.anisotropy=void 0!==k?k:1;this.format=void 0!==g?g:THREE.RGBAFormat;this.type=void 0!==h?h:THREE.UnsignedByteType;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this._needsUpdate=!1;this.onUpdate=null};THREE.Texture.DEFAULT_IMAGE=void 0;THREE.Texture.DEFAULT_MAPPING=THREE.UVMapping;
THREE.Texture.prototype={constructor:THREE.Texture,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){!0===a&&this.update();this._needsUpdate=a},clone:function(a){void 0===a&&(a=new THREE.Texture);a.image=this.image;a.mipmaps=this.mipmaps.slice(0);a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.generateMipmaps=
this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;a.unpackAlignment=this.unpackAlignment;return a},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);THREE.TextureIdCount=0;THREE.CubeTexture=function(a,b,c,d,e,f,g,h,k){b=void 0!==b?b:THREE.CubeReflectionMapping;THREE.Texture.call(this,a,b,c,d,e,f,g,h,k);this.images=a};
THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CubeTexture.prototype.constructor=THREE.CubeTexture;THREE.CubeTexture.clone=function(a){void 0===a&&(a=new THREE.CubeTexture);THREE.Texture.prototype.clone.call(this,a);a.images=this.images;return a};THREE.CompressedTexture=function(a,b,c,d,e,f,g,h,k,l,p){THREE.Texture.call(this,null,f,g,h,k,l,d,e,p);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=this.flipY=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);
THREE.CompressedTexture.prototype.constructor=THREE.CompressedTexture;THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.DataTexture=function(a,b,c,d,e,f,g,h,k,l,p){THREE.Texture.call(this,null,f,g,h,k,l,d,e,p);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.constructor=THREE.DataTexture;
THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.VideoTexture=function(a,b,c,d,e,f,g,h,k){THREE.Texture.call(this,a,b,c,d,e,f,g,h,k);this.generateMipmaps=!1;var l=this,p=function(){requestAnimationFrame(p);a.readyState===a.HAVE_ENOUGH_DATA&&(l.needsUpdate=!0)};p()};THREE.VideoTexture.prototype=Object.create(THREE.Texture.prototype);THREE.VideoTexture.prototype.constructor=THREE.VideoTexture;
THREE.Group=function(){THREE.Object3D.call(this);this.type="Group"};THREE.Group.prototype=Object.create(THREE.Object3D.prototype);THREE.Group.prototype.constructor=THREE.Group;THREE.PointCloud=function(a,b){THREE.Object3D.call(this);this.type="PointCloud";this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.PointCloudMaterial({color:16777215*Math.random()})};THREE.PointCloud.prototype=Object.create(THREE.Object3D.prototype);THREE.PointCloud.prototype.constructor=THREE.PointCloud;
THREE.PointCloud.prototype.raycast=function(){var a=new THREE.Matrix4,b=new THREE.Ray;return function(c,d){var e=this,f=e.geometry,g=c.params.PointCloud.threshold;a.getInverse(this.matrixWorld);b.copy(c.ray).applyMatrix4(a);if(null===f.boundingBox||!1!==b.isIntersectionBox(f.boundingBox)){var h=g/((this.scale.x+this.scale.y+this.scale.z)/3),k=new THREE.Vector3,g=function(a,f){var g=b.distanceToPoint(a);if(g<h){var k=b.closestPointToPoint(a);k.applyMatrix4(e.matrixWorld);var n=c.ray.origin.distanceTo(k);
d.push({distance:n,distanceToRay:g,point:k.clone(),index:f,face:null,object:e})}};if(f instanceof THREE.BufferGeometry){var l=f.attributes,p=l.position.array;if(void 0!==l.index){var l=l.index.array,q=f.offsets;0===q.length&&(q=[{start:0,count:l.length,index:0}]);for(var n=0,t=q.length;n<t;++n)for(var r=q[n].start,s=q[n].index,f=r,r=r+q[n].count;f<r;f++){var u=s+l[f];k.fromArray(p,3*u);g(k,u)}}else for(l=p.length/3,f=0;f<l;f++)k.set(p[3*f],p[3*f+1],p[3*f+2]),g(k,f)}else for(k=this.geometry.vertices,
f=0;f<k.length;f++)g(k[f],f)}}}();THREE.PointCloud.prototype.clone=function(a){void 0===a&&(a=new THREE.PointCloud(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.ParticleSystem=function(a,b){THREE.warn("THREE.ParticleSystem has been renamed to THREE.PointCloud.");return new THREE.PointCloud(a,b)};
THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.type="Line";this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.mode=void 0!==c?c:THREE.LineStrip};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);THREE.Line.prototype.constructor=THREE.Line;
THREE.Line.prototype.raycast=function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere;return function(d,e){var f=d.linePrecision,f=f*f,g=this.geometry;null===g.boundingSphere&&g.computeBoundingSphere();c.copy(g.boundingSphere);c.applyMatrix4(this.matrixWorld);if(!1!==d.ray.isIntersectionSphere(c)){a.getInverse(this.matrixWorld);b.copy(d.ray).applyMatrix4(a);var h=new THREE.Vector3,k=new THREE.Vector3,l=new THREE.Vector3,p=new THREE.Vector3,q=this.mode===THREE.LineStrip?1:2;if(g instanceof
THREE.BufferGeometry){var n=g.attributes;if(void 0!==n.index){var t=n.index.array,n=n.position.array,r=g.offsets;0===r.length&&(r=[{start:0,count:t.length,index:0}]);for(var s=0;s<r.length;s++)for(var u=r[s].start,v=r[s].count,x=r[s].index,g=u;g<u+v-1;g+=q){var D=x+t[g+1];h.fromArray(n,3*(x+t[g]));k.fromArray(n,3*D);D=b.distanceSqToSegment(h,k,p,l);D>f||(D=b.origin.distanceTo(p),D<d.near||D>d.far||e.push({distance:D,point:l.clone().applyMatrix4(this.matrixWorld),index:g,offsetIndex:s,face:null,faceIndex:null,
object:this}))}}else for(n=n.position.array,g=0;g<n.length/3-1;g+=q)h.fromArray(n,3*g),k.fromArray(n,3*g+3),D=b.distanceSqToSegment(h,k,p,l),D>f||(D=b.origin.distanceTo(p),D<d.near||D>d.far||e.push({distance:D,point:l.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}else if(g instanceof THREE.Geometry)for(h=g.vertices,k=h.length,g=0;g<k-1;g+=q)D=b.distanceSqToSegment(h[g],h[g+1],p,l),D>f||(D=b.origin.distanceTo(p),D<d.near||D>d.far||e.push({distance:D,point:l.clone().applyMatrix4(this.matrixWorld),
index:g,face:null,faceIndex:null,object:this}))}}}();THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.mode));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.type="Mesh";this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random()});this.updateMorphTargets()};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.constructor=THREE.Mesh;THREE.Mesh.prototype.updateMorphTargets=function(){if(void 0!==this.geometry.morphTargets&&0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}};
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];THREE.warn("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};
THREE.Mesh.prototype.raycast=function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere,d=new THREE.Vector3,e=new THREE.Vector3,f=new THREE.Vector3;return function(g,h){var k=this.geometry;null===k.boundingSphere&&k.computeBoundingSphere();c.copy(k.boundingSphere);c.applyMatrix4(this.matrixWorld);if(!1!==g.ray.isIntersectionSphere(c)&&(a.getInverse(this.matrixWorld),b.copy(g.ray).applyMatrix4(a),null===k.boundingBox||!1!==b.isIntersectionBox(k.boundingBox)))if(k instanceof THREE.BufferGeometry){var l=
this.material;if(void 0!==l){var p=k.attributes,q,n,t=g.precision;if(void 0!==p.index){var r=p.index.array,s=p.position.array,u=k.offsets;0===u.length&&(u=[{start:0,count:r.length,index:0}]);for(var v=0,x=u.length;v<x;++v)for(var p=u[v].start,D=u[v].index,k=p,w=p+u[v].count;k<w;k+=3){p=D+r[k];q=D+r[k+1];n=D+r[k+2];d.fromArray(s,3*p);e.fromArray(s,3*q);f.fromArray(s,3*n);var y=l.side===THREE.BackSide?b.intersectTriangle(f,e,d,!0):b.intersectTriangle(d,e,f,l.side!==THREE.DoubleSide);if(null!==y){y.applyMatrix4(this.matrixWorld);
var A=g.ray.origin.distanceTo(y);A<t||A<g.near||A>g.far||h.push({distance:A,point:y,face:new THREE.Face3(p,q,n,THREE.Triangle.normal(d,e,f)),faceIndex:null,object:this})}}}else for(s=p.position.array,r=k=0,w=s.length;k<w;k+=3,r+=9)p=k,q=k+1,n=k+2,d.fromArray(s,r),e.fromArray(s,r+3),f.fromArray(s,r+6),y=l.side===THREE.BackSide?b.intersectTriangle(f,e,d,!0):b.intersectTriangle(d,e,f,l.side!==THREE.DoubleSide),null!==y&&(y.applyMatrix4(this.matrixWorld),A=g.ray.origin.distanceTo(y),A<t||A<g.near||A>
g.far||h.push({distance:A,point:y,face:new THREE.Face3(p,q,n,THREE.Triangle.normal(d,e,f)),faceIndex:null,object:this}))}}else if(k instanceof THREE.Geometry)for(r=this.material instanceof THREE.MeshFaceMaterial,s=!0===r?this.material.materials:null,t=g.precision,u=k.vertices,v=0,x=k.faces.length;v<x;v++)if(D=k.faces[v],l=!0===r?s[D.materialIndex]:this.material,void 0!==l){p=u[D.a];q=u[D.b];n=u[D.c];if(!0===l.morphTargets){y=k.morphTargets;A=this.morphTargetInfluences;d.set(0,0,0);e.set(0,0,0);f.set(0,
0,0);for(var w=0,E=y.length;w<E;w++){var G=A[w];if(0!==G){var F=y[w].vertices;d.x+=(F[D.a].x-p.x)*G;d.y+=(F[D.a].y-p.y)*G;d.z+=(F[D.a].z-p.z)*G;e.x+=(F[D.b].x-q.x)*G;e.y+=(F[D.b].y-q.y)*G;e.z+=(F[D.b].z-q.z)*G;f.x+=(F[D.c].x-n.x)*G;f.y+=(F[D.c].y-n.y)*G;f.z+=(F[D.c].z-n.z)*G}}d.add(p);e.add(q);f.add(n);p=d;q=e;n=f}y=l.side===THREE.BackSide?b.intersectTriangle(n,q,p,!0):b.intersectTriangle(p,q,n,l.side!==THREE.DoubleSide);null!==y&&(y.applyMatrix4(this.matrixWorld),A=g.ray.origin.distanceTo(y),A<t||
A<g.near||A>g.far||h.push({distance:A,point:y,face:D,faceIndex:v,object:this}))}}}();THREE.Mesh.prototype.clone=function(a,b){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a,b);return a};THREE.Bone=function(a){THREE.Object3D.call(this);this.type="Bone";this.skin=a};THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);THREE.Bone.prototype.constructor=THREE.Bone;
THREE.Skeleton=function(a,b,c){this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;a=a||[];this.bones=a.slice(0);this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<this.bones.length?64:64<this.bones.length?32:16<this.bones.length?16:8,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),
this.boneTexture.minFilter=THREE.NearestFilter,this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===b)this.calculateInverses();else if(this.bones.length===b.length)this.boneInverses=b.slice(0);else for(THREE.warn("THREE.Skeleton bonInverses is the wrong length."),this.boneInverses=[],b=0,a=this.bones.length;b<a;b++)this.boneInverses.push(new THREE.Matrix4)};
THREE.Skeleton.prototype.calculateInverses=function(){this.boneInverses=[];for(var a=0,b=this.bones.length;a<b;a++){var c=new THREE.Matrix4;this.bones[a]&&c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c)}};
THREE.Skeleton.prototype.pose=function(){for(var a,b=0,c=this.bones.length;b<c;b++)(a=this.bones[b])&&a.matrixWorld.getInverse(this.boneInverses[b]);b=0;for(c=this.bones.length;b<c;b++)if(a=this.bones[b])a.parent?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale)};
THREE.Skeleton.prototype.update=function(){var a=new THREE.Matrix4;return function(){for(var b=0,c=this.bones.length;b<c;b++)a.multiplyMatrices(this.bones[b]?this.bones[b].matrixWorld:this.identityMatrix,this.boneInverses[b]),a.flattenToArrayOffset(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}();
THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.type="SkinnedMesh";this.bindMode="attached";this.bindMatrix=new THREE.Matrix4;this.bindMatrixInverse=new THREE.Matrix4;a=[];if(this.geometry&&void 0!==this.geometry.bones){for(var d,e,f,g,h=0,k=this.geometry.bones.length;h<k;++h)d=this.geometry.bones[h],e=d.pos,f=d.rotq,g=d.scl,b=new THREE.Bone(this),a.push(b),b.name=d.name,b.position.set(e[0],e[1],e[2]),b.quaternion.set(f[0],f[1],f[2],f[3]),void 0!==g?b.scale.set(g[0],g[1],g[2]):b.scale.set(1,
1,1);h=0;for(k=this.geometry.bones.length;h<k;++h)d=this.geometry.bones[h],-1!==d.parent?a[d.parent].add(a[h]):this.add(a[h])}this.normalizeSkinWeights();this.updateMatrixWorld(!0);this.bind(new THREE.Skeleton(a,void 0,c))};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.constructor=THREE.SkinnedMesh;THREE.SkinnedMesh.prototype.bind=function(a,b){this.skeleton=a;void 0===b&&(this.updateMatrixWorld(!0),b=this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b)};
THREE.SkinnedMesh.prototype.pose=function(){this.skeleton.pose()};THREE.SkinnedMesh.prototype.normalizeSkinWeights=function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(a){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0);"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):THREE.warn("THREE.SkinnedMesh unreckognized bindMode: "+this.bindMode)};
THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.type="MorphAnimMesh";this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);
THREE.MorphAnimMesh.prototype.constructor=THREE.MorphAnimMesh;THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)_?(\d+)/,e=0,f=a.morphTargets.length;e<f;e++){var g=a.morphTargets[e].name.match(d);if(g&&1<g.length){g=g[1];c[g]||(c[g]={start:Infinity,end:-Infinity});var h=c[g];e<h.start&&(h.start=e);e>h.end&&(h.end=e);b||(b=g)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];c?(this.setFrameRange(c.start,c.end),this.duration=(c.end-c.start)/b*1E3,this.time=0):THREE.warn("THREE.MorphAnimMesh: animation["+a+"] undefined in .playAnimation()")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time&&(this.time=0,this.directionBackwards=!1)}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.interpolateTargets=function(a,b,c){for(var d=this.morphTargetInfluences,e=0,f=d.length;e<f;e++)d[e]=0;-1<a&&(d[a]=1-c);-1<b&&(d[b]=c)};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.objects=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);
THREE.LOD.prototype.constructor=THREE.LOD;THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=0;c<this.objects.length&&!(b<this.objects[c].distance);c++);this.objects.splice(c,0,{distance:b,object:a});this.add(a)};THREE.LOD.prototype.getObjectForDistance=function(a){for(var b=1,c=this.objects.length;b<c&&!(a<this.objects[b].distance);b++);return this.objects[b-1].object};
THREE.LOD.prototype.raycast=function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b,c)}}();
THREE.LOD.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){if(1<this.objects.length){a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c=a.distanceTo(b);this.objects[0].object.visible=!0;for(var d=1,e=this.objects.length;d<e;d++)if(c>=this.objects[d].distance)this.objects[d-1].object.visible=!1,this.objects[d].object.visible=!0;else break;for(;d<e;d++)this.objects[d].object.visible=!1}}}();
THREE.LOD.prototype.clone=function(a){void 0===a&&(a=new THREE.LOD);THREE.Object3D.prototype.clone.call(this,a);for(var b=0,c=this.objects.length;b<c;b++){var d=this.objects[b].object.clone();d.visible=0===b;a.addLevel(d,this.objects[b].distance)}return a};
THREE.Sprite=function(){var a=new Uint16Array([0,1,2,0,2,3]),b=new Float32Array([-.5,-.5,0,.5,-.5,0,.5,.5,0,-.5,.5,0]),c=new Float32Array([0,0,1,0,1,1,0,1]),d=new THREE.BufferGeometry;d.addAttribute("index",new THREE.BufferAttribute(a,1));d.addAttribute("position",new THREE.BufferAttribute(b,3));d.addAttribute("uv",new THREE.BufferAttribute(c,2));return function(a){THREE.Object3D.call(this);this.type="Sprite";this.geometry=d;this.material=void 0!==a?a:new THREE.SpriteMaterial}}();
THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);THREE.Sprite.prototype.constructor=THREE.Sprite;THREE.Sprite.prototype.raycast=function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.distanceToPoint(a);d>this.scale.x||c.push({distance:d,point:this.position,face:null,object:this})}}();THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};
THREE.Particle=THREE.Sprite;THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlare.prototype.constructor=THREE.LensFlare;
THREE.LensFlare.prototype.add=function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=c.x*Math.PI*.25,c.rotation+=.25*(c.wantedRotation-c.rotation)};THREE.Scene=function(){THREE.Object3D.call(this);this.type="Scene";this.overrideMaterial=this.fog=null;this.autoUpdate=!0};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.constructor=THREE.Scene;THREE.Scene.prototype.clone=function(a){void 0===a&&(a=new THREE.Scene);THREE.Object3D.prototype.clone.call(this,a);null!==this.fog&&(a.fog=this.fog.clone());null!==this.overrideMaterial&&(a.overrideMaterial=this.overrideMaterial.clone());a.autoUpdate=this.autoUpdate;a.matrixAutoUpdate=this.matrixAutoUpdate;return a};THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};
THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};THREE.ShaderChunk={};THREE.ShaderChunk.common="#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\nfloat square( in float a ) { return a*a; }\nvec2  square( in vec2 a )  { return vec2( a.x*a.x, a.y*a.y ); }\nvec3  square( in vec3 a )  { return vec3( a.x*a.x, a.y*a.y, a.z*a.z ); }\nvec4  square( in vec4 a )  { return vec4( a.x*a.x, a.y*a.y, a.z*a.z, a.w*a.w ); }\nfloat saturate( in float a ) { return clamp( a, 0.0, 1.0 ); }\nvec2  saturate( in vec2 a )  { return clamp( a, 0.0, 1.0 ); }\nvec3  saturate( in vec3 a )  { return clamp( a, 0.0, 1.0 ); }\nvec4  saturate( in vec4 a )  { return clamp( a, 0.0, 1.0 ); }\nfloat average( in float a ) { return a; }\nfloat average( in vec2 a )  { return ( a.x + a.y) * 0.5; }\nfloat average( in vec3 a )  { return ( a.x + a.y + a.z) / 3.0; }\nfloat average( in vec4 a )  { return ( a.x + a.y + a.z + a.w) * 0.25; }\nfloat whiteCompliment( in float a ) { return saturate( 1.0 - a ); }\nvec2  whiteCompliment( in vec2 a )  { return saturate( vec2(1.0) - a ); }\nvec3  whiteCompliment( in vec3 a )  { return saturate( vec3(1.0) - a ); }\nvec4  whiteCompliment( in vec4 a )  { return saturate( vec4(1.0) - a ); }\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n}\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal) {\n\tfloat distance = dot( planeNormal, point-pointOnPlane );\n\treturn point - distance * planeNormal;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn pointOnLine + lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) );\n}\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\tif ( decayExponent > 0.0 ) {\n\t  return pow( saturate( 1.0 - lightDistance / cutoffDistance ), decayExponent );\n\t}\n\treturn 1.0;\n}\n\nvec3 inputToLinear( in vec3 a ) {\n#ifdef GAMMA_INPUT\n\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\nvec3 linearToOutput( in vec3 a ) {\n#ifdef GAMMA_OUTPUT\n\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\n";
THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n";THREE.ShaderChunk.lights_lambert_vertex="vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\ntransformedNormal = normalize( transformedNormal );\n\n#if MAX_DIR_LIGHTS > 0\n\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\tvec3 dirVector = transformDirection( directionalLightDirection[ i ], viewMatrix );\n\n\tfloat dotProduct = dot( transformedNormal, dirVector );\n\tvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t#endif\n\n\t#endif\n\n\t#ifdef WRAP_AROUND\n\n\t\tvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\tdirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tdirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n\n\t\t#endif\n\n\t#endif\n\n\tvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n\n\t#endif\n\n}\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\t\tlVector = normalize( lVector );\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\tpointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tpointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\tvLightFront += pointLightColor[ i ] * pointLightWeighting * attenuation;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += pointLightColor[ i ] * pointLightWeightingBack * attenuation;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\t\t\tvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\t\tspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n\n\t\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\t\tspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvLightFront += spotLightColor[ i ] * spotLightWeighting * attenuation * spotEffect;\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += spotLightColor[ i ] * spotLightWeightingBack * attenuation * spotEffect;\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lVector = transformDirection( hemisphereLightDirection[ i ], viewMatrix );\n\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\t\tfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n\nvLightFront += ambientLightColor;\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack += ambientLightColor;\n\n#endif\n";
THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\n\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n\n#endif\n";THREE.ShaderChunk.default_vertex="#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#elif defined( USE_MORPHTARGETS )\n\n\tvec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n";
THREE.ShaderChunk.map_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif";THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\t#ifdef USE_MORPHNORMALS\n\n\tvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n\n\t#else\n\n\tvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif";THREE.ShaderChunk.lightmap_pars_vertex="#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\n#endif";THREE.ShaderChunk.lights_phong_fragment="#ifndef FLAT_SHADED\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n\t#endif\n\n#else\n\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#endif\n\nvec3 viewPosition = normalize( vViewPosition );\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\nvec3 totalDiffuseLight = vec3( 0.0 );\nvec3 totalSpecularLight = vec3( 0.0 );\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\t\tlVector = normalize( lVector );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\ttotalDiffuseLight += pointLightColor[ i ] * pointDiffuseWeight * attenuation;\n\n\t\t\t\t// specular\n\n\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n\t\ttotalSpecularLight += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * attenuation * specularNormalization;\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\tlVector = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\t// diffuse\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t#else\n\n\t\t\t\tfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t#endif\n\n\t\t\ttotalDiffuseLight += spotLightColor[ i ] * spotDiffuseWeight * attenuation * spotEffect;\n\n\t\t\t// specular\n\n\t\t\tvec3 spotHalfVector = normalize( lVector + viewPosition );\n\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\n\t\t\tfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\n\t\t\ttotalSpecularLight += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * attenuation * specularNormalization * spotEffect;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 dirVector = transformDirection( directionalLightDirection[ i ], viewMatrix );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, dirVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\ttotalDiffuseLight += directionalLightColor[ i ] * dirDiffuseWeight;\n\n\t\t// specular\n\n\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n\t\t/*\n\t\t// fresnel term from skin shader\n\t\tconst float F0 = 0.128;\n\n\t\tfloat base = 1.0 - dot( viewPosition, dirHalfVector );\n\t\tfloat exponential = pow( base, 5.0 );\n\n\t\tfloat fresnel = exponential + F0 * ( 1.0 - exponential );\n\t\t*/\n\n\t\t/*\n\t\t// fresnel term from fresnel shader\n\t\tconst float mFresnelBias = 0.08;\n\t\tconst float mFresnelScale = 0.3;\n\t\tconst float mFresnelPower = 5.0;\n\n\t\tfloat fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\n\t\t*/\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t// \t\tdirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n\t\ttotalSpecularLight += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lVector = transformDirection( hemisphereLightDirection[ i ], viewMatrix );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\ttotalDiffuseLight += hemiColor;\n\n\t\t// specular (sky light)\n\n\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n\t\tfloat hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\n\n\t\t// specular (ground light)\n\n\t\tvec3 lVectorGround = -lVector;\n\n\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n\t\tfloat hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\n\n\t\tfloat dotProductGround = dot( normal, lVectorGround );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\n\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\n\t\ttotalSpecularLight += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n\n\t}\n\n#endif\n\n#ifdef METAL\n\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + ambientLightColor ) * specular + totalSpecularLight + emissive;\n\n#else\n\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + ambientLightColor ) + totalSpecularLight + emissive;\n\n#endif\n";
THREE.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n\n#endif";THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\n\tvec3 morphedNormal = vec3( 0.0 );\n\n\tmorphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tmorphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tmorphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tmorphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n\tmorphedNormal += normal;\n\n#endif";
THREE.ShaderChunk.envmap_pars_fragment="#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tuniform float refractionRatio;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\n\t#endif\n\n#endif\n";THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";
THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\t// Per-Pixel Tangent Space Normal Mapping\n\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n";
THREE.ShaderChunk.lights_phong_pars_vertex="#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n";THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\tuniform sampler2D lightMap;\n\n#endif";THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n\t}\n\n#endif";
THREE.ShaderChunk.lights_phong_vertex="#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif";THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\n\n\tdiffuseColor *= texelColor;\n\n#endif";THREE.ShaderChunk.lightmap_vertex="#ifdef USE_LIGHTMAP\n\n\tvUv2 = uv2;\n\n#endif";THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\n\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\n#endif\n";
THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n";THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\n\n\tvColor.xyz = inputToLinear( color.xyz );\n\n#endif";THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\n\n\t#ifdef USE_MORPHTARGETS\n\n\tvec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n\n#endif\n";
THREE.ShaderChunk.envmap_pars_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvarying vec3 vReflect;\n\n\tuniform float refractionRatio;\n\n#endif\n";THREE.ShaderChunk.linear_to_gamma_fragment="\n\toutgoingLight = linearToOutput( outgoingLight );\n";THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif";THREE.ShaderChunk.lights_lambert_pars_vertex="uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n";
THREE.ShaderChunk.map_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n\n#endif\n";THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\tenvColor.xyz = inputToLinear( envColor.xyz );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif";THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n\t#endif\n\n#endif";THREE.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.specularmap_fragment="float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif";THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t#else\n\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t#endif\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = exp2( - square( fogDensity ) * square( depth ) * LOG2 );\n\t\tfogFactor = whiteCompliment( fogFactor );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\t\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\n\n#endif";
THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n\t// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n";
THREE.ShaderChunk.defaultnormal_vertex="#ifdef USE_SKINNING\n\n\tvec3 objectNormal = skinnedNormal.xyz;\n\n#elif defined( USE_MORPHNORMALS )\n\n\tvec3 objectNormal = morphedNormal;\n\n#else\n\n\tvec3 objectNormal = normal;\n\n#endif\n\n#ifdef FLIP_SIDED\n\n\tobjectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;\n";THREE.ShaderChunk.lights_phong_pars_fragment="uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n";
THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";THREE.ShaderChunk.map_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";
THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\n\n\toutgoingLight *= diffuseColor.xyz * texture2D( lightMap, vUv2 ).xyz;\n\n#endif";THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\n#endif";THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif";THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\n\tvec3 morphed = vec3( 0.0 );\n\tmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\tmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\tmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\tmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\tmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\tmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\tmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\tmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n\tmorphed += position;\n\n#endif";
THREE.ShaderChunk.envmap_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvec3 worldNormal = transformDirection( objectNormal, modelMatrix );\n\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t#else\n\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.shadowmap_fragment="#ifdef USE_SHADOWMAP\n\n\t#ifdef SHADOWMAP_DEBUG\n\n\t\tvec3 frustumColors[3];\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n\t#endif\n\n\t#ifdef SHADOWMAP_CASCADE\n\n\t\tint inFrustumCount = 0;\n\n\t#endif\n\n\tfloat fDepth;\n\tvec3 shadowColor = vec3( 1.0 );\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\t\t\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\t\t// don't shadow pixels outside of light frustum\n\t\t\t\t// use just first frustum (for cascades)\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\n\n\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\tinFrustumCount += int( inFrustum );\n\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n\n\t\t#else\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\t#endif\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t/*\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n\t\t\t\t\t\t// must enroll loop manually\n\n\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\n\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\t\t\tshadow += 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tshadow /= 9.0;\n\n\t\t*/\n\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#else\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth < shadowCoord.z )\n\n\t\t// spot with multiple shadows is darker\n\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n\t\t// spot with multiple shadows has the same color as single shadow spot\n\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n\t\t\t#endif\n\n\t\t}\n\n\n\t\t#ifdef SHADOWMAP_DEBUG\n\n\t\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) outgoingLight *= frustumColors[ i ];\n\n\t\t\t#else\n\n\t\t\t\tif ( inFrustum ) outgoingLight *= frustumColors[ i ];\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t}\n\n\t// NOTE: I am unsure if this is correct in linear space.  -bhouston, Dec 29, 2014\n\tshadowColor = inputToLinear( shadowColor );\n\n\toutgoingLight = outgoingLight * shadowColor;\n\n#endif\n";
THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n\t#ifdef USE_SKINNING\n\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\n\t#elif defined( USE_MORPHTARGETS )\n\n\t\tvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n#endif\n";THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n#endif";
THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\t#extension GL_EXT_frag_depth : enable\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif";THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n";
THREE.UniformsUtils={merge:function(a){for(var b={},c=0;c<a.length;c++){var d=this.clone(a[c]),e;for(e in d)b[e]=d[e]}return b},clone:function(a){var b={},c;for(c in a){b[c]={};for(var d in a[c]){var e=a[c][d];b[c][d]=e instanceof THREE.Color||e instanceof THREE.Vector2||e instanceof THREE.Vector3||e instanceof THREE.Vector4||e instanceof THREE.Matrix4||e instanceof THREE.Texture?e.clone():e instanceof Array?e.slice():e}}return b}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},alphaMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:.98},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",value:null},bumpScale:{type:"f",
value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",value:[]},hemisphereLightGroundColor:{type:"fv",
value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},pointLightDecay:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]},spotLightDecay:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",
value:1},size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",
THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.skinbase_vertex,"\t#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"\t#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,
"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",
THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"\toutgoingLight = diffuseColor.rgb;",THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},
lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,
THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,
THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,
THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,
THREE.ShaderChunk.specularmap_fragment,"\t#ifdef DOUBLE_SIDED\n\t\tif ( gl_FrontFacing )\n\t\t\toutgoingLight += diffuseColor.rgb * vLightFront + emissive;\n\t\telse\n\t\t\toutgoingLight += diffuseColor.rgb * vLightBack + emissive;\n\t#else\n\t\toutgoingLight += diffuseColor.rgb * vLightFront + emissive;\n\t#endif",THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},
phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif",THREE.ShaderChunk.common,
THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,
THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;",
THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,
"void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,
THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\tgl_Position = projectionMatrix * mvPosition;",
THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( psColor, opacity );",
THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.alphatest_fragment,"\toutgoingLight = diffuseColor.rgb;",THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),
vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",
THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.color_fragment,"\toutgoingLight = diffuseColor.rgb;",THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},
depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",value:1}},vertexShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform float mNear;\nuniform float mFar;\nuniform float opacity;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,
"void main() {",THREE.ShaderChunk.logdepthbuf_fragment,"\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\n\tgl_FragColor = vec4( vec3( color ), opacity );\n}"].join("\n")},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:["varying vec3 vNormal;",THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,
"void main() {\n\tvNormal = normalize( normalMatrix * normal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vNormal;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,"}"].join("\n")},cube:{uniforms:{tCube:{type:"t",value:null},
tFlip:{type:"f",value:-1}},vertexShader:["varying vec3 vWorldPosition;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,
"void main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",THREE.ShaderChunk.logdepthbuf_fragment,"}"].join("\n")},equirect:{uniforms:{tEquirect:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:["varying vec3 vWorldPosition;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\nvec3 direction = normalize( vWorldPosition );\nvec2 sampleUV;\nsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\nsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\ngl_FragColor = texture2D( tEquirect, sampleUV );",THREE.ShaderChunk.logdepthbuf_fragment,
"}"].join("\n")},depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,"vec4 pack_depth( const in float depth ) {\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {",
THREE.ShaderChunk.logdepthbuf_fragment,"\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\n\t#else\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n\t#endif\n}"].join("\n")}};
THREE.WebGLRenderer=function(a){function b(a){var b=a.geometry;a=a.material;var c=b.vertices.length;if(a.attributes){void 0===b.__webglCustomAttributesList&&(b.__webglCustomAttributesList=[]);for(var d in a.attributes){var e=a.attributes[d];if(!e.__webglInitialized||e.createUniqueBuffers){e.__webglInitialized=!0;var f=1;"v2"===e.type?f=2:"v3"===e.type?f=3:"v4"===e.type?f=4:"c"===e.type&&(f=3);e.size=f;e.array=new Float32Array(c*f);e.buffer=m.createBuffer();e.buffer.belongsToAttribute=d;e.needsUpdate=
!0}b.__webglCustomAttributesList.push(e)}}}function c(a,b){return a.material instanceof THREE.MeshFaceMaterial?a.material.materials[b.materialIndex]:a.material}function d(a,b,c,d){c=c.attributes;var e=b.attributes;b=b.attributesKeys;for(var f=0,g=b.length;f<g;f++){var h=b[f],k=e[h];if(0<=k){var n=c[h];void 0!==n?(h=n.itemSize,m.bindBuffer(m.ARRAY_BUFFER,n.buffer),W.enableAttribute(k),m.vertexAttribPointer(k,h,m.FLOAT,!1,0,d*h*4)):void 0!==a.defaultAttributeValues&&(2===a.defaultAttributeValues[h].length?
m.vertexAttrib2fv(k,a.defaultAttributeValues[h]):3===a.defaultAttributeValues[h].length&&m.vertexAttrib3fv(k,a.defaultAttributeValues[h]))}}W.disableUnusedAttributes()}function e(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function f(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function g(a,
b){return b[0]-a[0]}function h(a){if(!1!==a.visible){if(!(a instanceof THREE.Scene||a instanceof THREE.Group)){void 0===a.__webglInit&&(a.__webglInit=!0,a._modelViewMatrix=new THREE.Matrix4,a._normalMatrix=new THREE.Matrix3,a.addEventListener("removed",wb));var c=a.geometry;if(void 0!==c&&void 0===c.__webglInit)if(c.__webglInit=!0,c.addEventListener("dispose",jb),c instanceof THREE.BufferGeometry)B.info.memory.geometries++;else if(a instanceof THREE.Mesh)q(a,c);else if(a instanceof THREE.Line){if(void 0===
c.__webglVertexBuffer){c.__webglVertexBuffer=m.createBuffer();c.__webglColorBuffer=m.createBuffer();c.__webglLineDistanceBuffer=m.createBuffer();B.info.memory.geometries++;var d=c.vertices.length;c.__vertexArray=new Float32Array(3*d);c.__colorArray=new Float32Array(3*d);c.__lineDistanceArray=new Float32Array(1*d);c.__webglLineCount=d;b(a);c.verticesNeedUpdate=!0;c.colorsNeedUpdate=!0;c.lineDistancesNeedUpdate=!0}}else a instanceof THREE.PointCloud&&void 0===c.__webglVertexBuffer&&(c.__webglVertexBuffer=
m.createBuffer(),c.__webglColorBuffer=m.createBuffer(),B.info.memory.geometries++,d=c.vertices.length,c.__vertexArray=new Float32Array(3*d),c.__colorArray=new Float32Array(3*d),c.__webglParticleCount=d,b(a),c.verticesNeedUpdate=!0,c.colorsNeedUpdate=!0);if(void 0===a.__webglActive)if(a.__webglActive=!0,a instanceof THREE.Mesh)if(c instanceof THREE.BufferGeometry)n(ba,c,a);else{if(c instanceof THREE.Geometry)for(var c=Ua[c.id],d=0,e=c.length;d<e;d++)n(ba,c[d],a)}else a instanceof THREE.Line||a instanceof
THREE.PointCloud?n(ba,c,a):(a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback)&&qa.push({id:null,object:a,opaque:null,transparent:null,z:0});if(a instanceof THREE.Light)ca.push(a);else if(a instanceof THREE.Sprite)Xa.push(a);else if(a instanceof THREE.LensFlare)Ya.push(a);else if((c=ba[a.id])&&(!1===a.frustumCulled||!0===cb.intersectsObject(a)))for(d=0,e=c.length;d<e;d++){var f=c[d],g=f,k=g.object,l=g.buffer,p=k.geometry,k=k.material;k instanceof THREE.MeshFaceMaterial?(k=k.materials[p instanceof
THREE.BufferGeometry?0:l.materialIndex],g.material=k,k.transparent?Qa.push(g):Ka.push(g)):k&&(g.material=k,k.transparent?Qa.push(g):Ka.push(g));f.render=!0;!0===B.sortObjects&&(wa.setFromMatrixPosition(a.matrixWorld),wa.applyProjection(db),f.z=wa.z)}}d=0;for(e=a.children.length;d<e;d++)h(a.children[d])}}function k(a,b,c,d,e){for(var f,g=0,h=a.length;g<h;g++){f=a[g];var k=f.object,m=f.buffer;w(k,b);if(e)f=e;else{f=f.material;if(!f)continue;u(f)}B.setMaterialFaces(f);m instanceof THREE.BufferGeometry?
B.renderBufferDirect(b,c,d,f,m,k):B.renderBuffer(b,c,d,f,m,k)}}function l(a,b,c,d,e,f){for(var g,h=0,k=a.length;h<k;h++){g=a[h];var m=g.object;if(m.visible){if(f)g=f;else{g=g[b];if(!g)continue;u(g)}B.renderImmediateObject(c,d,e,g,m)}}}function p(a){var b=a.object.material;b.transparent?(a.transparent=b,a.opaque=null):(a.opaque=b,a.transparent=null)}function q(a,b){var d=a.material,e=!1;if(void 0===Ua[b.id]||!0===b.groupsNeedUpdate){delete ba[a.id];for(var f=Ua,g=b.id,d=d instanceof THREE.MeshFaceMaterial,
h=da.get("OES_element_index_uint")?4294967296:65535,k,e={},l=b.morphTargets.length,p=b.morphNormals.length,q,s={},t=[],r=0,w=b.faces.length;r<w;r++){k=b.faces[r];var u=d?k.materialIndex:0;u in e||(e[u]={hash:u,counter:0});k=e[u].hash+"_"+e[u].counter;k in s||(q={id:Qb++,faces3:[],materialIndex:u,vertices:0,numMorphTargets:l,numMorphNormals:p},s[k]=q,t.push(q));s[k].vertices+3>h&&(e[u].counter+=1,k=e[u].hash+"_"+e[u].counter,k in s||(q={id:Qb++,faces3:[],materialIndex:u,vertices:0,numMorphTargets:l,
numMorphNormals:p},s[k]=q,t.push(q)));s[k].faces3.push(r);s[k].vertices+=3}f[g]=t;b.groupsNeedUpdate=!1}f=Ua[b.id];g=0;for(d=f.length;g<d;g++){h=f[g];if(void 0===h.__webglVertexBuffer){e=h;e.__webglVertexBuffer=m.createBuffer();e.__webglNormalBuffer=m.createBuffer();e.__webglTangentBuffer=m.createBuffer();e.__webglColorBuffer=m.createBuffer();e.__webglUVBuffer=m.createBuffer();e.__webglUV2Buffer=m.createBuffer();e.__webglSkinIndicesBuffer=m.createBuffer();e.__webglSkinWeightsBuffer=m.createBuffer();
e.__webglFaceBuffer=m.createBuffer();e.__webglLineBuffer=m.createBuffer();if(p=e.numMorphTargets)for(e.__webglMorphTargetsBuffers=[],l=0;l<p;l++)e.__webglMorphTargetsBuffers.push(m.createBuffer());if(p=e.numMorphNormals)for(e.__webglMorphNormalsBuffers=[],l=0;l<p;l++)e.__webglMorphNormalsBuffers.push(m.createBuffer());B.info.memory.geometries++;e=h;r=a;w=r.geometry;p=e.faces3;l=3*p.length;s=1*p.length;t=3*p.length;p=c(r,e);e.__vertexArray=new Float32Array(3*l);e.__normalArray=new Float32Array(3*l);
e.__colorArray=new Float32Array(3*l);e.__uvArray=new Float32Array(2*l);1<w.faceVertexUvs.length&&(e.__uv2Array=new Float32Array(2*l));w.hasTangents&&(e.__tangentArray=new Float32Array(4*l));r.geometry.skinWeights.length&&r.geometry.skinIndices.length&&(e.__skinIndexArray=new Float32Array(4*l),e.__skinWeightArray=new Float32Array(4*l));r=null!==da.get("OES_element_index_uint")&&21845<s?Uint32Array:Uint16Array;e.__typeArray=r;e.__faceArray=new r(3*s);e.__lineArray=new r(2*t);if(w=e.numMorphTargets)for(e.__morphTargetsArrays=
[],r=0;r<w;r++)e.__morphTargetsArrays.push(new Float32Array(3*l));if(w=e.numMorphNormals)for(e.__morphNormalsArrays=[],r=0;r<w;r++)e.__morphNormalsArrays.push(new Float32Array(3*l));e.__webglFaceCount=3*s;e.__webglLineCount=2*t;if(p.attributes)for(s in void 0===e.__webglCustomAttributesList&&(e.__webglCustomAttributesList=[]),s=void 0,p.attributes){var t=p.attributes[s],r={},v;for(v in t)r[v]=t[v];if(!r.__webglInitialized||r.createUniqueBuffers)r.__webglInitialized=!0,w=1,"v2"===r.type?w=2:"v3"===
r.type?w=3:"v4"===r.type?w=4:"c"===r.type&&(w=3),r.size=w,r.array=new Float32Array(l*w),r.buffer=m.createBuffer(),r.buffer.belongsToAttribute=s,t.needsUpdate=!0,r.__original=t;e.__webglCustomAttributesList.push(r)}e.__inittedArrays=!0;b.verticesNeedUpdate=!0;b.morphTargetsNeedUpdate=!0;b.elementsNeedUpdate=!0;b.uvsNeedUpdate=!0;b.normalsNeedUpdate=!0;b.tangentsNeedUpdate=!0;e=b.colorsNeedUpdate=!0}else e=!1;(e||void 0===a.__webglActive)&&n(ba,h,a)}a.__webglActive=!0}function n(a,b,c){var d=c.id;a[d]=
a[d]||[];a[d].push({id:d,buffer:b,object:c,material:null,z:0})}function t(a){var b=a.geometry;if(b instanceof THREE.BufferGeometry)for(var d=b.attributes,e=b.attributesKeys,f=0,g=e.length;f<g;f++){var h=e[f],k=d[h],n="index"===h?m.ELEMENT_ARRAY_BUFFER:m.ARRAY_BUFFER;void 0===k.buffer?(k.buffer=m.createBuffer(),m.bindBuffer(n,k.buffer),m.bufferData(n,k.array,k instanceof THREE.DynamicBufferAttribute?m.DYNAMIC_DRAW:m.STATIC_DRAW),k.needsUpdate=!1):!0===k.needsUpdate&&(m.bindBuffer(n,k.buffer),void 0===
k.updateRange||-1===k.updateRange.count?m.bufferSubData(n,0,k.array):0===k.updateRange.count?console.error("THREE.WebGLRenderer.updateObject: using updateRange for THREE.DynamicBufferAttribute and marked as needsUpdate but count is 0, ensure you are using set methods or updating manually."):(m.bufferSubData(n,k.updateRange.offset*k.array.BYTES_PER_ELEMENT,k.array.subarray(k.updateRange.offset,k.updateRange.offset+k.updateRange.count)),k.updateRange.count=0),k.needsUpdate=!1)}else if(a instanceof THREE.Mesh){!0===
b.groupsNeedUpdate&&q(a,b);for(var l=Ua[b.id],f=0,p=l.length;f<p;f++){var t=l[f],w=c(a,t),u=w.attributes&&r(w);if(b.verticesNeedUpdate||b.morphTargetsNeedUpdate||b.elementsNeedUpdate||b.uvsNeedUpdate||b.normalsNeedUpdate||b.colorsNeedUpdate||b.tangentsNeedUpdate||u){var v=t,x=a,D=m.DYNAMIC_DRAW,A=!b.dynamic,E=w;if(v.__inittedArrays){var G=!1===E instanceof THREE.MeshPhongMaterial&&E.shading===THREE.FlatShading,y=void 0,z=void 0,F=void 0,B=void 0,I=void 0,H=void 0,M=void 0,R=void 0,P=void 0,U=void 0,
O=void 0,J=void 0,L=void 0,N=void 0,Ka=void 0,V=void 0,W=void 0,Qa=void 0,Ya=void 0,Xa=void 0,da=void 0,ba=void 0,ja=void 0,Pa=void 0,ka=void 0,Q=void 0,ha=void 0,ia=void 0,ob=void 0,Y=void 0,ub=void 0,pa=void 0,ab=void 0,oa=void 0,ca=void 0,qa=void 0,Ca=void 0,ta=void 0,na=void 0,wa=void 0,La=0,Ma=0,kb=0,yb=0,zb=0,Ra=0,Aa=0,eb=0,Ha=0,la=0,ra=0,K=0,za=void 0,Sa=v.__vertexArray,Ab=v.__uvArray,lb=v.__uv2Array,Na=v.__normalArray,sa=v.__tangentArray,Da=v.__colorArray,Ea=v.__skinIndexArray,Fa=v.__skinWeightArray,
Gb=v.__morphTargetsArrays,Bb=v.__morphNormalsArrays,mb=v.__webglCustomAttributesList,C=void 0,Va=v.__faceArray,Ta=v.__lineArray,ea=x.geometry,fb=ea.elementsNeedUpdate,vb=ea.uvsNeedUpdate,Mb=ea.normalsNeedUpdate,Ob=ea.tangentsNeedUpdate,ib=ea.colorsNeedUpdate,sb=ea.morphTargetsNeedUpdate,Cb=ea.vertices,$=v.faces3,xa=ea.faces,Hb=ea.faceVertexUvs[0],Oa=ea.faceVertexUvs[1],$a=ea.skinIndices,Ga=ea.skinWeights,nb=ea.morphTargets,bb=ea.morphNormals;if(ea.verticesNeedUpdate){y=0;for(z=$.length;y<z;y++)B=
xa[$[y]],J=Cb[B.a],L=Cb[B.b],N=Cb[B.c],Sa[Ma]=J.x,Sa[Ma+1]=J.y,Sa[Ma+2]=J.z,Sa[Ma+3]=L.x,Sa[Ma+4]=L.y,Sa[Ma+5]=L.z,Sa[Ma+6]=N.x,Sa[Ma+7]=N.y,Sa[Ma+8]=N.z,Ma+=9;m.bindBuffer(m.ARRAY_BUFFER,v.__webglVertexBuffer);m.bufferData(m.ARRAY_BUFFER,Sa,D)}if(sb)for(ca=0,qa=nb.length;ca<qa;ca++){y=ra=0;for(z=$.length;y<z;y++)na=$[y],B=xa[na],J=nb[ca].vertices[B.a],L=nb[ca].vertices[B.b],N=nb[ca].vertices[B.c],Ca=Gb[ca],Ca[ra]=J.x,Ca[ra+1]=J.y,Ca[ra+2]=J.z,Ca[ra+3]=L.x,Ca[ra+4]=L.y,Ca[ra+5]=L.z,Ca[ra+6]=N.x,Ca[ra+
7]=N.y,Ca[ra+8]=N.z,E.morphNormals&&(G?Xa=Ya=Qa=bb[ca].faceNormals[na]:(wa=bb[ca].vertexNormals[na],Qa=wa.a,Ya=wa.b,Xa=wa.c),ta=Bb[ca],ta[ra]=Qa.x,ta[ra+1]=Qa.y,ta[ra+2]=Qa.z,ta[ra+3]=Ya.x,ta[ra+4]=Ya.y,ta[ra+5]=Ya.z,ta[ra+6]=Xa.x,ta[ra+7]=Xa.y,ta[ra+8]=Xa.z),ra+=9;m.bindBuffer(m.ARRAY_BUFFER,v.__webglMorphTargetsBuffers[ca]);m.bufferData(m.ARRAY_BUFFER,Gb[ca],D);E.morphNormals&&(m.bindBuffer(m.ARRAY_BUFFER,v.__webglMorphNormalsBuffers[ca]),m.bufferData(m.ARRAY_BUFFER,Bb[ca],D))}if(Ga.length){y=0;
for(z=$.length;y<z;y++)B=xa[$[y]],Pa=Ga[B.a],ka=Ga[B.b],Q=Ga[B.c],Fa[la]=Pa.x,Fa[la+1]=Pa.y,Fa[la+2]=Pa.z,Fa[la+3]=Pa.w,Fa[la+4]=ka.x,Fa[la+5]=ka.y,Fa[la+6]=ka.z,Fa[la+7]=ka.w,Fa[la+8]=Q.x,Fa[la+9]=Q.y,Fa[la+10]=Q.z,Fa[la+11]=Q.w,ha=$a[B.a],ia=$a[B.b],ob=$a[B.c],Ea[la]=ha.x,Ea[la+1]=ha.y,Ea[la+2]=ha.z,Ea[la+3]=ha.w,Ea[la+4]=ia.x,Ea[la+5]=ia.y,Ea[la+6]=ia.z,Ea[la+7]=ia.w,Ea[la+8]=ob.x,Ea[la+9]=ob.y,Ea[la+10]=ob.z,Ea[la+11]=ob.w,la+=12;0<la&&(m.bindBuffer(m.ARRAY_BUFFER,v.__webglSkinIndicesBuffer),
m.bufferData(m.ARRAY_BUFFER,Ea,D),m.bindBuffer(m.ARRAY_BUFFER,v.__webglSkinWeightsBuffer),m.bufferData(m.ARRAY_BUFFER,Fa,D))}if(ib){y=0;for(z=$.length;y<z;y++)B=xa[$[y]],M=B.vertexColors,R=B.color,3===M.length&&E.vertexColors===THREE.VertexColors?(da=M[0],ba=M[1],ja=M[2]):ja=ba=da=R,Da[Ha]=da.r,Da[Ha+1]=da.g,Da[Ha+2]=da.b,Da[Ha+3]=ba.r,Da[Ha+4]=ba.g,Da[Ha+5]=ba.b,Da[Ha+6]=ja.r,Da[Ha+7]=ja.g,Da[Ha+8]=ja.b,Ha+=9;0<Ha&&(m.bindBuffer(m.ARRAY_BUFFER,v.__webglColorBuffer),m.bufferData(m.ARRAY_BUFFER,Da,
D))}if(Ob&&ea.hasTangents){y=0;for(z=$.length;y<z;y++)B=xa[$[y]],P=B.vertexTangents,Ka=P[0],V=P[1],W=P[2],sa[Aa]=Ka.x,sa[Aa+1]=Ka.y,sa[Aa+2]=Ka.z,sa[Aa+3]=Ka.w,sa[Aa+4]=V.x,sa[Aa+5]=V.y,sa[Aa+6]=V.z,sa[Aa+7]=V.w,sa[Aa+8]=W.x,sa[Aa+9]=W.y,sa[Aa+10]=W.z,sa[Aa+11]=W.w,Aa+=12;m.bindBuffer(m.ARRAY_BUFFER,v.__webglTangentBuffer);m.bufferData(m.ARRAY_BUFFER,sa,D)}if(Mb){y=0;for(z=$.length;y<z;y++)if(B=xa[$[y]],I=B.vertexNormals,H=B.normal,3===I.length&&!1===G)for(Y=0;3>Y;Y++)pa=I[Y],Na[Ra]=pa.x,Na[Ra+1]=
pa.y,Na[Ra+2]=pa.z,Ra+=3;else for(Y=0;3>Y;Y++)Na[Ra]=H.x,Na[Ra+1]=H.y,Na[Ra+2]=H.z,Ra+=3;m.bindBuffer(m.ARRAY_BUFFER,v.__webglNormalBuffer);m.bufferData(m.ARRAY_BUFFER,Na,D)}if(vb&&Hb){y=0;for(z=$.length;y<z;y++)if(F=$[y],U=Hb[F],void 0!==U)for(Y=0;3>Y;Y++)ab=U[Y],Ab[kb]=ab.x,Ab[kb+1]=ab.y,kb+=2;0<kb&&(m.bindBuffer(m.ARRAY_BUFFER,v.__webglUVBuffer),m.bufferData(m.ARRAY_BUFFER,Ab,D))}if(vb&&Oa){y=0;for(z=$.length;y<z;y++)if(F=$[y],O=Oa[F],void 0!==O)for(Y=0;3>Y;Y++)oa=O[Y],lb[yb]=oa.x,lb[yb+1]=oa.y,
yb+=2;0<yb&&(m.bindBuffer(m.ARRAY_BUFFER,v.__webglUV2Buffer),m.bufferData(m.ARRAY_BUFFER,lb,D))}if(fb){y=0;for(z=$.length;y<z;y++)Va[zb]=La,Va[zb+1]=La+1,Va[zb+2]=La+2,zb+=3,Ta[eb]=La,Ta[eb+1]=La+1,Ta[eb+2]=La,Ta[eb+3]=La+2,Ta[eb+4]=La+1,Ta[eb+5]=La+2,eb+=6,La+=3;m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,v.__webglFaceBuffer);m.bufferData(m.ELEMENT_ARRAY_BUFFER,Va,D);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,v.__webglLineBuffer);m.bufferData(m.ELEMENT_ARRAY_BUFFER,Ta,D)}if(mb)for(Y=0,ub=mb.length;Y<ub;Y++)if(C=
mb[Y],C.__original.needsUpdate){K=0;if(1===C.size)if(void 0===C.boundTo||"vertices"===C.boundTo)for(y=0,z=$.length;y<z;y++)B=xa[$[y]],C.array[K]=C.value[B.a],C.array[K+1]=C.value[B.b],C.array[K+2]=C.value[B.c],K+=3;else{if("faces"===C.boundTo)for(y=0,z=$.length;y<z;y++)za=C.value[$[y]],C.array[K]=za,C.array[K+1]=za,C.array[K+2]=za,K+=3}else if(2===C.size)if(void 0===C.boundTo||"vertices"===C.boundTo)for(y=0,z=$.length;y<z;y++)B=xa[$[y]],J=C.value[B.a],L=C.value[B.b],N=C.value[B.c],C.array[K]=J.x,
C.array[K+1]=J.y,C.array[K+2]=L.x,C.array[K+3]=L.y,C.array[K+4]=N.x,C.array[K+5]=N.y,K+=6;else{if("faces"===C.boundTo)for(y=0,z=$.length;y<z;y++)N=L=J=za=C.value[$[y]],C.array[K]=J.x,C.array[K+1]=J.y,C.array[K+2]=L.x,C.array[K+3]=L.y,C.array[K+4]=N.x,C.array[K+5]=N.y,K+=6}else if(3===C.size){var T;T="c"===C.type?["r","g","b"]:["x","y","z"];if(void 0===C.boundTo||"vertices"===C.boundTo)for(y=0,z=$.length;y<z;y++)B=xa[$[y]],J=C.value[B.a],L=C.value[B.b],N=C.value[B.c],C.array[K]=J[T[0]],C.array[K+1]=
J[T[1]],C.array[K+2]=J[T[2]],C.array[K+3]=L[T[0]],C.array[K+4]=L[T[1]],C.array[K+5]=L[T[2]],C.array[K+6]=N[T[0]],C.array[K+7]=N[T[1]],C.array[K+8]=N[T[2]],K+=9;else if("faces"===C.boundTo)for(y=0,z=$.length;y<z;y++)N=L=J=za=C.value[$[y]],C.array[K]=J[T[0]],C.array[K+1]=J[T[1]],C.array[K+2]=J[T[2]],C.array[K+3]=L[T[0]],C.array[K+4]=L[T[1]],C.array[K+5]=L[T[2]],C.array[K+6]=N[T[0]],C.array[K+7]=N[T[1]],C.array[K+8]=N[T[2]],K+=9;else if("faceVertices"===C.boundTo)for(y=0,z=$.length;y<z;y++)za=C.value[$[y]],
J=za[0],L=za[1],N=za[2],C.array[K]=J[T[0]],C.array[K+1]=J[T[1]],C.array[K+2]=J[T[2]],C.array[K+3]=L[T[0]],C.array[K+4]=L[T[1]],C.array[K+5]=L[T[2]],C.array[K+6]=N[T[0]],C.array[K+7]=N[T[1]],C.array[K+8]=N[T[2]],K+=9}else if(4===C.size)if(void 0===C.boundTo||"vertices"===C.boundTo)for(y=0,z=$.length;y<z;y++)B=xa[$[y]],J=C.value[B.a],L=C.value[B.b],N=C.value[B.c],C.array[K]=J.x,C.array[K+1]=J.y,C.array[K+2]=J.z,C.array[K+3]=J.w,C.array[K+4]=L.x,C.array[K+5]=L.y,C.array[K+6]=L.z,C.array[K+7]=L.w,C.array[K+
8]=N.x,C.array[K+9]=N.y,C.array[K+10]=N.z,C.array[K+11]=N.w,K+=12;else if("faces"===C.boundTo)for(y=0,z=$.length;y<z;y++)N=L=J=za=C.value[$[y]],C.array[K]=J.x,C.array[K+1]=J.y,C.array[K+2]=J.z,C.array[K+3]=J.w,C.array[K+4]=L.x,C.array[K+5]=L.y,C.array[K+6]=L.z,C.array[K+7]=L.w,C.array[K+8]=N.x,C.array[K+9]=N.y,C.array[K+10]=N.z,C.array[K+11]=N.w,K+=12;else if("faceVertices"===C.boundTo)for(y=0,z=$.length;y<z;y++)za=C.value[$[y]],J=za[0],L=za[1],N=za[2],C.array[K]=J.x,C.array[K+1]=J.y,C.array[K+2]=
J.z,C.array[K+3]=J.w,C.array[K+4]=L.x,C.array[K+5]=L.y,C.array[K+6]=L.z,C.array[K+7]=L.w,C.array[K+8]=N.x,C.array[K+9]=N.y,C.array[K+10]=N.z,C.array[K+11]=N.w,K+=12;m.bindBuffer(m.ARRAY_BUFFER,C.buffer);m.bufferData(m.ARRAY_BUFFER,C.array,D)}A&&(delete v.__inittedArrays,delete v.__colorArray,delete v.__normalArray,delete v.__tangentArray,delete v.__uvArray,delete v.__uv2Array,delete v.__faceArray,delete v.__vertexArray,delete v.__lineArray,delete v.__skinIndexArray,delete v.__skinWeightArray)}}}b.verticesNeedUpdate=
!1;b.morphTargetsNeedUpdate=!1;b.elementsNeedUpdate=!1;b.uvsNeedUpdate=!1;b.normalsNeedUpdate=!1;b.colorsNeedUpdate=!1;b.tangentsNeedUpdate=!1;w.attributes&&s(w)}else if(a instanceof THREE.Line){w=c(a,b);u=w.attributes&&r(w);if(b.verticesNeedUpdate||b.colorsNeedUpdate||b.lineDistancesNeedUpdate||u){var Db=m.DYNAMIC_DRAW,S,aa,Z,Ba,X,Eb,Rb=b.vertices,Ib=b.colors,gb=b.lineDistances,ya=Rb.length,pb=Ib.length,qb=gb.length,Wa=b.__vertexArray,tb=b.__colorArray,hb=b.__lineDistanceArray,$b=b.colorsNeedUpdate,
Fb=b.lineDistancesNeedUpdate,Sb=b.__webglCustomAttributesList,Jb,cb,ua,Kb,Ia,fa;if(b.verticesNeedUpdate){for(S=0;S<ya;S++)Ba=Rb[S],X=3*S,Wa[X]=Ba.x,Wa[X+1]=Ba.y,Wa[X+2]=Ba.z;m.bindBuffer(m.ARRAY_BUFFER,b.__webglVertexBuffer);m.bufferData(m.ARRAY_BUFFER,Wa,Db)}if($b){for(aa=0;aa<pb;aa++)Eb=Ib[aa],X=3*aa,tb[X]=Eb.r,tb[X+1]=Eb.g,tb[X+2]=Eb.b;m.bindBuffer(m.ARRAY_BUFFER,b.__webglColorBuffer);m.bufferData(m.ARRAY_BUFFER,tb,Db)}if(Fb){for(Z=0;Z<qb;Z++)hb[Z]=gb[Z];m.bindBuffer(m.ARRAY_BUFFER,b.__webglLineDistanceBuffer);
m.bufferData(m.ARRAY_BUFFER,hb,Db)}if(Sb)for(Jb=0,cb=Sb.length;Jb<cb;Jb++)if(fa=Sb[Jb],fa.needsUpdate&&(void 0===fa.boundTo||"vertices"===fa.boundTo)){X=0;Kb=fa.value.length;if(1===fa.size)for(ua=0;ua<Kb;ua++)fa.array[ua]=fa.value[ua];else if(2===fa.size)for(ua=0;ua<Kb;ua++)Ia=fa.value[ua],fa.array[X]=Ia.x,fa.array[X+1]=Ia.y,X+=2;else if(3===fa.size)if("c"===fa.type)for(ua=0;ua<Kb;ua++)Ia=fa.value[ua],fa.array[X]=Ia.r,fa.array[X+1]=Ia.g,fa.array[X+2]=Ia.b,X+=3;else for(ua=0;ua<Kb;ua++)Ia=fa.value[ua],
fa.array[X]=Ia.x,fa.array[X+1]=Ia.y,fa.array[X+2]=Ia.z,X+=3;else if(4===fa.size)for(ua=0;ua<Kb;ua++)Ia=fa.value[ua],fa.array[X]=Ia.x,fa.array[X+1]=Ia.y,fa.array[X+2]=Ia.z,fa.array[X+3]=Ia.w,X+=4;m.bindBuffer(m.ARRAY_BUFFER,fa.buffer);m.bufferData(m.ARRAY_BUFFER,fa.array,Db);fa.needsUpdate=!1}}b.verticesNeedUpdate=!1;b.colorsNeedUpdate=!1;b.lineDistancesNeedUpdate=!1;w.attributes&&s(w)}else if(a instanceof THREE.PointCloud){w=c(a,b);u=w.attributes&&r(w);if(b.verticesNeedUpdate||b.colorsNeedUpdate||
u){var db=m.DYNAMIC_DRAW,Tb,Ub,ac,ma,bc,Nb=b.vertices,Vb=Nb.length,Pb=b.colors,rb=Pb.length,cc=b.__vertexArray,dc=b.__colorArray,wb=b.colorsNeedUpdate,gc=b.__webglCustomAttributesList,ec,jb,va,Lb,Ja,ga;if(b.verticesNeedUpdate){for(Tb=0;Tb<Vb;Tb++)ac=Nb[Tb],ma=3*Tb,cc[ma]=ac.x,cc[ma+1]=ac.y,cc[ma+2]=ac.z;m.bindBuffer(m.ARRAY_BUFFER,b.__webglVertexBuffer);m.bufferData(m.ARRAY_BUFFER,cc,db)}if(wb){for(Ub=0;Ub<rb;Ub++)bc=Pb[Ub],ma=3*Ub,dc[ma]=bc.r,dc[ma+1]=bc.g,dc[ma+2]=bc.b;m.bindBuffer(m.ARRAY_BUFFER,
b.__webglColorBuffer);m.bufferData(m.ARRAY_BUFFER,dc,db)}if(gc)for(ec=0,jb=gc.length;ec<jb;ec++){ga=gc[ec];if(ga.needsUpdate&&(void 0===ga.boundTo||"vertices"===ga.boundTo))if(Lb=ga.value.length,ma=0,1===ga.size)for(va=0;va<Lb;va++)ga.array[va]=ga.value[va];else if(2===ga.size)for(va=0;va<Lb;va++)Ja=ga.value[va],ga.array[ma]=Ja.x,ga.array[ma+1]=Ja.y,ma+=2;else if(3===ga.size)if("c"===ga.type)for(va=0;va<Lb;va++)Ja=ga.value[va],ga.array[ma]=Ja.r,ga.array[ma+1]=Ja.g,ga.array[ma+2]=Ja.b,ma+=3;else for(va=
0;va<Lb;va++)Ja=ga.value[va],ga.array[ma]=Ja.x,ga.array[ma+1]=Ja.y,ga.array[ma+2]=Ja.z,ma+=3;else if(4===ga.size)for(va=0;va<Lb;va++)Ja=ga.value[va],ga.array[ma]=Ja.x,ga.array[ma+1]=Ja.y,ga.array[ma+2]=Ja.z,ga.array[ma+3]=Ja.w,ma+=4;m.bindBuffer(m.ARRAY_BUFFER,ga.buffer);m.bufferData(m.ARRAY_BUFFER,ga.array,db);ga.needsUpdate=!1}}b.verticesNeedUpdate=!1;b.colorsNeedUpdate=!1;w.attributes&&s(w)}}function r(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function s(a){for(var b in a.attributes)a.attributes[b].needsUpdate=
!1}function u(a){!0===a.transparent?W.setBlending(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha):W.setBlending(THREE.NoBlending);W.setDepthTest(a.depthTest);W.setDepthWrite(a.depthWrite);W.setColorWrite(a.colorWrite);W.setPolygonOffset(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits)}function v(a,b,c,d,e){var f,g,h,k;Mb=0;if(d.needsUpdate){d.program&&hc(d);d.addEventListener("dispose",ic);var n=pc[d.type];if(n){var l=THREE.ShaderLib[n];
d.__webglShader={uniforms:THREE.UniformsUtils.clone(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader}}else d.__webglShader={uniforms:d.uniforms,vertexShader:d.vertexShader,fragmentShader:d.fragmentShader};for(var p=0,q=0,r=0,s=0,t=0,w=b.length;t<w;t++){var v=b[t];v.onlyShadow||!1===v.visible||(v instanceof THREE.DirectionalLight&&p++,v instanceof THREE.PointLight&&q++,v instanceof THREE.SpotLight&&r++,v instanceof THREE.HemisphereLight&&s++)}f=p;g=q;h=r;k=s;for(var u,z=0,G=
0,F=b.length;G<F;G++){var J=b[G];J.castShadow&&(J instanceof THREE.SpotLight&&z++,J instanceof THREE.DirectionalLight&&!J.shadowCascade&&z++)}u=z;var H;if(Nb&&e&&e.skeleton&&e.skeleton.useVertexTexture)H=1024;else{var N=m.getParameter(m.MAX_VERTEX_UNIFORM_VECTORS),M=Math.floor((N-20)/4);void 0!==e&&e instanceof THREE.SkinnedMesh&&(M=Math.min(e.skeleton.bones.length,M),M<e.skeleton.bones.length&&THREE.warn("WebGLRenderer: too many bones - "+e.skeleton.bones.length+", this GPU supports just "+M+" (try OpenGL instead of ANGLE)"));
H=M}var P={precision:L,supportsVertexTextures:Vb,map:!!d.map,envMap:!!d.envMap,envMapMode:d.envMap&&d.envMap.mapping,lightMap:!!d.lightMap,bumpMap:!!d.bumpMap,normalMap:!!d.normalMap,specularMap:!!d.specularMap,alphaMap:!!d.alphaMap,combine:d.combine,vertexColors:d.vertexColors,fog:c,useFog:d.fog,fogExp:c instanceof THREE.FogExp2,flatShading:d.shading===THREE.FlatShading,sizeAttenuation:d.sizeAttenuation,logarithmicDepthBuffer:ja,skinning:d.skinning,maxBones:H,useVertexTexture:Nb&&e&&e.skeleton&&
e.skeleton.useVertexTexture,morphTargets:d.morphTargets,morphNormals:d.morphNormals,maxMorphTargets:B.maxMorphTargets,maxMorphNormals:B.maxMorphNormals,maxDirLights:f,maxPointLights:g,maxSpotLights:h,maxHemiLights:k,maxShadows:u,shadowMapEnabled:B.shadowMapEnabled&&e.receiveShadow&&0<u,shadowMapType:B.shadowMapType,shadowMapDebug:B.shadowMapDebug,shadowMapCascade:B.shadowMapCascade,alphaTest:d.alphaTest,metal:d.metal,wrapAround:d.wrapAround,doubleSided:d.side===THREE.DoubleSide,flipSided:d.side===
THREE.BackSide},R=[];n?R.push(n):(R.push(d.fragmentShader),R.push(d.vertexShader));if(void 0!==d.defines)for(var O in d.defines)R.push(O),R.push(d.defines[O]);for(O in P)R.push(O),R.push(P[O]);for(var Ka=R.join(),V,W=0,Qa=Pa.length;W<Qa;W++){var Ya=Pa[W];if(Ya.code===Ka){V=Ya;V.usedTimes++;break}}void 0===V&&(V=new THREE.WebGLProgram(B,Ka,d,P),Pa.push(V),B.info.memory.programs=Pa.length);d.program=V;var Xa=V.attributes;if(d.morphTargets){d.numSupportedMorphTargets=0;for(var ca,da="morphTarget",ba=
0;ba<B.maxMorphTargets;ba++)ca=da+ba,0<=Xa[ca]&&d.numSupportedMorphTargets++}if(d.morphNormals)for(d.numSupportedMorphNormals=0,da="morphNormal",ba=0;ba<B.maxMorphNormals;ba++)ca=da+ba,0<=Xa[ca]&&d.numSupportedMorphNormals++;d.uniformsList=[];for(var ha in d.__webglShader.uniforms){var ta=d.program.uniforms[ha];ta&&d.uniformsList.push([d.__webglShader.uniforms[ha],ta])}d.needsUpdate=!1}d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=new Float32Array(B.maxMorphTargets));
var ab=!1,oa=!1,qa=!1,Ua=d.program,ka=Ua.uniforms,Q=d.__webglShader.uniforms;Ua.id!==ob&&(m.useProgram(Ua.program),ob=Ua.id,qa=oa=ab=!0);d.id!==ub&&(-1===ub&&(qa=!0),ub=d.id,oa=!0);if(ab||a!==vb)m.uniformMatrix4fv(ka.projectionMatrix,!1,a.projectionMatrix.elements),ja&&m.uniform1f(ka.logDepthBufFC,2/(Math.log(a.far+1)/Math.LN2)),a!==vb&&(vb=a),(d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&null!==ka.cameraPosition&&(wa.setFromMatrixPosition(a.matrixWorld),m.uniform3f(ka.cameraPosition,
wa.x,wa.y,wa.z)),(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshBasicMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==ka.viewMatrix&&m.uniformMatrix4fv(ka.viewMatrix,!1,a.matrixWorldInverse.elements);if(d.skinning)if(e.bindMatrix&&null!==ka.bindMatrix&&m.uniformMatrix4fv(ka.bindMatrix,!1,e.bindMatrix.elements),e.bindMatrixInverse&&null!==ka.bindMatrixInverse&&m.uniformMatrix4fv(ka.bindMatrixInverse,!1,e.bindMatrixInverse.elements),
Nb&&e.skeleton&&e.skeleton.useVertexTexture){if(null!==ka.boneTexture){var db=D();m.uniform1i(ka.boneTexture,db);B.setTexture(e.skeleton.boneTexture,db)}null!==ka.boneTextureWidth&&m.uniform1i(ka.boneTextureWidth,e.skeleton.boneTextureWidth);null!==ka.boneTextureHeight&&m.uniform1i(ka.boneTextureHeight,e.skeleton.boneTextureHeight)}else e.skeleton&&e.skeleton.boneMatrices&&null!==ka.boneGlobalMatrices&&m.uniformMatrix4fv(ka.boneGlobalMatrices,!1,e.skeleton.boneMatrices);if(oa){c&&d.fog&&(Q.fogColor.value=
c.color,c instanceof THREE.Fog?(Q.fogNear.value=c.near,Q.fogFar.value=c.far):c instanceof THREE.FogExp2&&(Q.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){if(Ob){var qa=!0,ia,Za,Y,bb=0,cb=0,ib=0,xb,pb,qb,Ca,jb,na=jc,rb=na.directional.colors,La=na.directional.positions,Ma=na.point.colors,kb=na.point.positions,yb=na.point.distances,zb=na.point.decays,Ra=na.spot.colors,Aa=na.spot.positions,eb=na.spot.distances,Ha=na.spot.directions,
la=na.spot.anglesCos,ra=na.spot.exponents,K=na.spot.decays,za=na.hemi.skyColors,Sa=na.hemi.groundColors,Ab=na.hemi.positions,lb=0,Na=0,sa=0,Da=0,Ea=0,Fa=0,Gb=0,Bb=0,mb=0,C=0,Va=0,Ta=0;ia=0;for(Za=b.length;ia<Za;ia++)Y=b[ia],Y.onlyShadow||(xb=Y.color,Ca=Y.intensity,jb=Y.distance,Y instanceof THREE.AmbientLight?Y.visible&&(bb+=xb.r,cb+=xb.g,ib+=xb.b):Y instanceof THREE.DirectionalLight?(Ea+=1,Y.visible&&(pa.setFromMatrixPosition(Y.matrixWorld),wa.setFromMatrixPosition(Y.target.matrixWorld),pa.sub(wa),
pa.normalize(),mb=3*lb,La[mb]=pa.x,La[mb+1]=pa.y,La[mb+2]=pa.z,y(rb,mb,xb,Ca),lb+=1)):Y instanceof THREE.PointLight?(Fa+=1,Y.visible&&(C=3*Na,y(Ma,C,xb,Ca),wa.setFromMatrixPosition(Y.matrixWorld),kb[C]=wa.x,kb[C+1]=wa.y,kb[C+2]=wa.z,yb[Na]=jb,zb[Na]=0===Y.distance?0:Y.decay,Na+=1)):Y instanceof THREE.SpotLight?(Gb+=1,Y.visible&&(Va=3*sa,y(Ra,Va,xb,Ca),pa.setFromMatrixPosition(Y.matrixWorld),Aa[Va]=pa.x,Aa[Va+1]=pa.y,Aa[Va+2]=pa.z,eb[sa]=jb,wa.setFromMatrixPosition(Y.target.matrixWorld),pa.sub(wa),
pa.normalize(),Ha[Va]=pa.x,Ha[Va+1]=pa.y,Ha[Va+2]=pa.z,la[sa]=Math.cos(Y.angle),ra[sa]=Y.exponent,K[sa]=0===Y.distance?0:Y.decay,sa+=1)):Y instanceof THREE.HemisphereLight&&(Bb+=1,Y.visible&&(pa.setFromMatrixPosition(Y.matrixWorld),pa.normalize(),Ta=3*Da,Ab[Ta]=pa.x,Ab[Ta+1]=pa.y,Ab[Ta+2]=pa.z,pb=Y.color,qb=Y.groundColor,y(za,Ta,pb,Ca),y(Sa,Ta,qb,Ca),Da+=1)));ia=3*lb;for(Za=Math.max(rb.length,3*Ea);ia<Za;ia++)rb[ia]=0;ia=3*Na;for(Za=Math.max(Ma.length,3*Fa);ia<Za;ia++)Ma[ia]=0;ia=3*sa;for(Za=Math.max(Ra.length,
3*Gb);ia<Za;ia++)Ra[ia]=0;ia=3*Da;for(Za=Math.max(za.length,3*Bb);ia<Za;ia++)za[ia]=0;ia=3*Da;for(Za=Math.max(Sa.length,3*Bb);ia<Za;ia++)Sa[ia]=0;na.directional.length=lb;na.point.length=Na;na.spot.length=sa;na.hemi.length=Da;na.ambient[0]=bb;na.ambient[1]=cb;na.ambient[2]=ib;Ob=!1}if(qa){var ea=jc;Q.ambientLightColor.value=ea.ambient;Q.directionalLightColor.value=ea.directional.colors;Q.directionalLightDirection.value=ea.directional.positions;Q.pointLightColor.value=ea.point.colors;Q.pointLightPosition.value=
ea.point.positions;Q.pointLightDistance.value=ea.point.distances;Q.pointLightDecay.value=ea.point.decays;Q.spotLightColor.value=ea.spot.colors;Q.spotLightPosition.value=ea.spot.positions;Q.spotLightDistance.value=ea.spot.distances;Q.spotLightDirection.value=ea.spot.directions;Q.spotLightAngleCos.value=ea.spot.anglesCos;Q.spotLightExponent.value=ea.spot.exponents;Q.spotLightDecay.value=ea.spot.decays;Q.hemisphereLightSkyColor.value=ea.hemi.skyColors;Q.hemisphereLightGroundColor.value=ea.hemi.groundColors;
Q.hemisphereLightDirection.value=ea.hemi.positions;x(Q,!0)}else x(Q,!1)}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhongMaterial){Q.opacity.value=d.opacity;Q.diffuse.value=d.color;Q.map.value=d.map;Q.lightMap.value=d.lightMap;Q.specularMap.value=d.specularMap;Q.alphaMap.value=d.alphaMap;d.bumpMap&&(Q.bumpMap.value=d.bumpMap,Q.bumpScale.value=d.bumpScale);d.normalMap&&(Q.normalMap.value=d.normalMap,Q.normalScale.value.copy(d.normalScale));
var fb;d.map?fb=d.map:d.specularMap?fb=d.specularMap:d.normalMap?fb=d.normalMap:d.bumpMap?fb=d.bumpMap:d.alphaMap&&(fb=d.alphaMap);if(void 0!==fb){var wb=fb.offset,Qb=fb.repeat;Q.offsetRepeat.value.set(wb.x,wb.y,Qb.x,Qb.y)}Q.envMap.value=d.envMap;Q.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1;Q.reflectivity.value=d.reflectivity;Q.refractionRatio.value=d.refractionRatio}if(d instanceof THREE.LineBasicMaterial)Q.diffuse.value=d.color,Q.opacity.value=d.opacity;else if(d instanceof
THREE.LineDashedMaterial)Q.diffuse.value=d.color,Q.opacity.value=d.opacity,Q.dashSize.value=d.dashSize,Q.totalSize.value=d.dashSize+d.gapSize,Q.scale.value=d.scale;else if(d instanceof THREE.PointCloudMaterial){if(Q.psColor.value=d.color,Q.opacity.value=d.opacity,Q.size.value=d.size,Q.scale.value=U.height/2,Q.map.value=d.map,null!==d.map){var Wb=d.map.offset,Xb=d.map.repeat;Q.offsetRepeat.value.set(Wb.x,Wb.y,Xb.x,Xb.y)}}else d instanceof THREE.MeshPhongMaterial?(Q.shininess.value=d.shininess,Q.emissive.value=
d.emissive,Q.specular.value=d.specular,d.wrapAround&&Q.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshLambertMaterial?(Q.emissive.value=d.emissive,d.wrapAround&&Q.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(Q.mNear.value=a.near,Q.mFar.value=a.far,Q.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(Q.opacity.value=d.opacity);if(e.receiveShadow&&!d._shadowPass&&Q.shadowMatrix)for(var sb=0,Cb=0,$=b.length;Cb<$;Cb++){var xa=b[Cb];xa.castShadow&&(xa instanceof
THREE.SpotLight||xa instanceof THREE.DirectionalLight&&!xa.shadowCascade)&&(Q.shadowMap.value[sb]=xa.shadowMap,Q.shadowMapSize.value[sb]=xa.shadowMapSize,Q.shadowMatrix.value[sb]=xa.shadowMatrix,Q.shadowDarkness.value[sb]=xa.shadowDarkness,Q.shadowBias.value[sb]=xa.shadowBias,sb++)}for(var Hb=d.uniformsList,Oa,$a,Ga,nb=0,fc=Hb.length;nb<fc;nb++){var T=Hb[nb][0];if(!1!==T.needsUpdate){var Db=T.type,S=T.value,aa=Hb[nb][1];switch(Db){case "1i":m.uniform1i(aa,S);break;case "1f":m.uniform1f(aa,S);break;
case "2f":m.uniform2f(aa,S[0],S[1]);break;case "3f":m.uniform3f(aa,S[0],S[1],S[2]);break;case "4f":m.uniform4f(aa,S[0],S[1],S[2],S[3]);break;case "1iv":m.uniform1iv(aa,S);break;case "3iv":m.uniform3iv(aa,S);break;case "1fv":m.uniform1fv(aa,S);break;case "2fv":m.uniform2fv(aa,S);break;case "3fv":m.uniform3fv(aa,S);break;case "4fv":m.uniform4fv(aa,S);break;case "Matrix3fv":m.uniformMatrix3fv(aa,!1,S);break;case "Matrix4fv":m.uniformMatrix4fv(aa,!1,S);break;case "i":m.uniform1i(aa,S);break;case "f":m.uniform1f(aa,
S);break;case "v2":m.uniform2f(aa,S.x,S.y);break;case "v3":m.uniform3f(aa,S.x,S.y,S.z);break;case "v4":m.uniform4f(aa,S.x,S.y,S.z,S.w);break;case "c":m.uniform3f(aa,S.r,S.g,S.b);break;case "iv1":m.uniform1iv(aa,S);break;case "iv":m.uniform3iv(aa,S);break;case "fv1":m.uniform1fv(aa,S);break;case "fv":m.uniform3fv(aa,S);break;case "v2v":void 0===T._array&&(T._array=new Float32Array(2*S.length));for(var Z=0,Ba=S.length;Z<Ba;Z++)Ga=2*Z,T._array[Ga]=S[Z].x,T._array[Ga+1]=S[Z].y;m.uniform2fv(aa,T._array);
break;case "v3v":void 0===T._array&&(T._array=new Float32Array(3*S.length));Z=0;for(Ba=S.length;Z<Ba;Z++)Ga=3*Z,T._array[Ga]=S[Z].x,T._array[Ga+1]=S[Z].y,T._array[Ga+2]=S[Z].z;m.uniform3fv(aa,T._array);break;case "v4v":void 0===T._array&&(T._array=new Float32Array(4*S.length));Z=0;for(Ba=S.length;Z<Ba;Z++)Ga=4*Z,T._array[Ga]=S[Z].x,T._array[Ga+1]=S[Z].y,T._array[Ga+2]=S[Z].z,T._array[Ga+3]=S[Z].w;m.uniform4fv(aa,T._array);break;case "m3":m.uniformMatrix3fv(aa,!1,S.elements);break;case "m3v":void 0===
T._array&&(T._array=new Float32Array(9*S.length));Z=0;for(Ba=S.length;Z<Ba;Z++)S[Z].flattenToArrayOffset(T._array,9*Z);m.uniformMatrix3fv(aa,!1,T._array);break;case "m4":m.uniformMatrix4fv(aa,!1,S.elements);break;case "m4v":void 0===T._array&&(T._array=new Float32Array(16*S.length));Z=0;for(Ba=S.length;Z<Ba;Z++)S[Z].flattenToArrayOffset(T._array,16*Z);m.uniformMatrix4fv(aa,!1,T._array);break;case "t":Oa=S;$a=D();m.uniform1i(aa,$a);if(!Oa)continue;if(Oa instanceof THREE.CubeTexture||Oa.image instanceof
Array&&6===Oa.image.length){var X=Oa,Eb=$a;if(6===X.image.length)if(X.needsUpdate){X.image.__webglTextureCube||(X.addEventListener("dispose",Pb),X.image.__webglTextureCube=m.createTexture(),B.info.memory.textures++);m.activeTexture(m.TEXTURE0+Eb);m.bindTexture(m.TEXTURE_CUBE_MAP,X.image.__webglTextureCube);m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL,X.flipY);for(var Rb=X instanceof THREE.CompressedTexture,Ib=X.image[0]instanceof THREE.DataTexture,gb=[],ya=0;6>ya;ya++)gb[ya]=!B.autoScaleCubemaps||Rb||Ib?Ib?
X.image[ya].image:X.image[ya]:E(X.image[ya],qc);var Yb=gb[0],Zb=THREE.Math.isPowerOfTwo(Yb.width)&&THREE.Math.isPowerOfTwo(Yb.height),Wa=I(X.format),tb=I(X.type);A(m.TEXTURE_CUBE_MAP,X,Zb);for(ya=0;6>ya;ya++)if(Rb)for(var hb,$b=gb[ya].mipmaps,Fb=0,Sb=$b.length;Fb<Sb;Fb++)hb=$b[Fb],X.format!==THREE.RGBAFormat&&X.format!==THREE.RGBFormat?-1<kc().indexOf(Wa)?m.compressedTexImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+ya,Fb,Wa,hb.width,hb.height,0,hb.data):THREE.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()"):
m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+ya,Fb,Wa,hb.width,hb.height,0,Wa,tb,hb.data);else Ib?m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+ya,0,Wa,gb[ya].width,gb[ya].height,0,Wa,tb,gb[ya].data):m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+ya,0,Wa,Wa,tb,gb[ya]);X.generateMipmaps&&Zb&&m.generateMipmap(m.TEXTURE_CUBE_MAP);X.needsUpdate=!1;if(X.onUpdate)X.onUpdate()}else m.activeTexture(m.TEXTURE0+Eb),m.bindTexture(m.TEXTURE_CUBE_MAP,X.image.__webglTextureCube)}else if(Oa instanceof THREE.WebGLRenderTargetCube){var Jb=
Oa;m.activeTexture(m.TEXTURE0+$a);m.bindTexture(m.TEXTURE_CUBE_MAP,Jb.__webglTexture)}else B.setTexture(Oa,$a);break;case "tv":void 0===T._array&&(T._array=[]);Z=0;for(Ba=T.value.length;Z<Ba;Z++)T._array[Z]=D();m.uniform1iv(aa,T._array);Z=0;for(Ba=T.value.length;Z<Ba;Z++)Oa=T.value[Z],$a=T._array[Z],Oa&&B.setTexture(Oa,$a);break;default:THREE.warn("THREE.WebGLRenderer: Unknown uniform type: "+Db)}}}}m.uniformMatrix4fv(ka.modelViewMatrix,!1,e._modelViewMatrix.elements);ka.normalMatrix&&m.uniformMatrix3fv(ka.normalMatrix,
!1,e._normalMatrix.elements);null!==ka.modelMatrix&&m.uniformMatrix4fv(ka.modelMatrix,!1,e.matrixWorld.elements);return Ua}function x(a,b){a.ambientLightColor.needsUpdate=b;a.directionalLightColor.needsUpdate=b;a.directionalLightDirection.needsUpdate=b;a.pointLightColor.needsUpdate=b;a.pointLightPosition.needsUpdate=b;a.pointLightDistance.needsUpdate=b;a.pointLightDecay.needsUpdate=b;a.spotLightColor.needsUpdate=b;a.spotLightPosition.needsUpdate=b;a.spotLightDistance.needsUpdate=b;a.spotLightDirection.needsUpdate=
b;a.spotLightAngleCos.needsUpdate=b;a.spotLightExponent.needsUpdate=b;a.spotLightDecay.needsUpdate=b;a.hemisphereLightSkyColor.needsUpdate=b;a.hemisphereLightGroundColor.needsUpdate=b;a.hemisphereLightDirection.needsUpdate=b}function D(){var a=Mb;a>=Wb&&THREE.warn("WebGLRenderer: trying to use "+a+" texture units while this GPU supports only "+Wb);Mb+=1;return a}function w(a,b){a._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,a.matrixWorld);a._normalMatrix.getNormalMatrix(a._modelViewMatrix)}
function y(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function A(a,b,c){c?(m.texParameteri(a,m.TEXTURE_WRAP_S,I(b.wrapS)),m.texParameteri(a,m.TEXTURE_WRAP_T,I(b.wrapT)),m.texParameteri(a,m.TEXTURE_MAG_FILTER,I(b.magFilter)),m.texParameteri(a,m.TEXTURE_MIN_FILTER,I(b.minFilter))):(m.texParameteri(a,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE),m.texParameteri(a,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE),b.wrapS===THREE.ClampToEdgeWrapping&&b.wrapT===THREE.ClampToEdgeWrapping||THREE.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping. ( "+
b.sourceFile+" )"),m.texParameteri(a,m.TEXTURE_MAG_FILTER,z(b.magFilter)),m.texParameteri(a,m.TEXTURE_MIN_FILTER,z(b.minFilter)),b.minFilter!==THREE.NearestFilter&&b.minFilter!==THREE.LinearFilter&&THREE.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter. ( "+b.sourceFile+" )"));(c=da.get("EXT_texture_filter_anisotropic"))&&b.type!==THREE.FloatType&&b.type!==THREE.HalfFloatType&&(1<b.anisotropy||b.__currentAnisotropy)&&
(m.texParameterf(a,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,B.getMaxAnisotropy())),b.__currentAnisotropy=b.anisotropy)}function E(a,b){if(a.width>b||a.height>b){var c=b/Math.max(a.width,a.height),d=document.createElement("canvas");d.width=Math.floor(a.width*c);d.height=Math.floor(a.height*c);d.getContext("2d").drawImage(a,0,0,a.width,a.height,0,0,d.width,d.height);THREE.warn("THREE.WebGLRenderer: image is too big ("+a.width+"x"+a.height+"). Resized to "+d.width+"x"+d.height,a);return d}return a}
function G(a,b){m.bindRenderbuffer(m.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(m.renderbufferStorage(m.RENDERBUFFER,m.DEPTH_COMPONENT16,b.width,b.height),m.framebufferRenderbuffer(m.FRAMEBUFFER,m.DEPTH_ATTACHMENT,m.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(m.renderbufferStorage(m.RENDERBUFFER,m.DEPTH_STENCIL,b.width,b.height),m.framebufferRenderbuffer(m.FRAMEBUFFER,m.DEPTH_STENCIL_ATTACHMENT,m.RENDERBUFFER,a)):m.renderbufferStorage(m.RENDERBUFFER,m.RGBA4,b.width,b.height)}function F(a){a instanceof
THREE.WebGLRenderTargetCube?(m.bindTexture(m.TEXTURE_CUBE_MAP,a.__webglTexture),m.generateMipmap(m.TEXTURE_CUBE_MAP),m.bindTexture(m.TEXTURE_CUBE_MAP,null)):(m.bindTexture(m.TEXTURE_2D,a.__webglTexture),m.generateMipmap(m.TEXTURE_2D),m.bindTexture(m.TEXTURE_2D,null))}function z(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?m.NEAREST:m.LINEAR}function I(a){var b;if(a===THREE.RepeatWrapping)return m.REPEAT;if(a===THREE.ClampToEdgeWrapping)return m.CLAMP_TO_EDGE;
if(a===THREE.MirroredRepeatWrapping)return m.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return m.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return m.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return m.NEAREST_MIPMAP_LINEAR;if(a===THREE.LinearFilter)return m.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return m.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return m.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return m.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return m.UNSIGNED_SHORT_4_4_4_4;
if(a===THREE.UnsignedShort5551Type)return m.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return m.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return m.BYTE;if(a===THREE.ShortType)return m.SHORT;if(a===THREE.UnsignedShortType)return m.UNSIGNED_SHORT;if(a===THREE.IntType)return m.INT;if(a===THREE.UnsignedIntType)return m.UNSIGNED_INT;if(a===THREE.FloatType)return m.FLOAT;b=da.get("OES_texture_half_float");if(null!==b&&a===THREE.HalfFloatType)return b.HALF_FLOAT_OES;if(a===THREE.AlphaFormat)return m.ALPHA;
if(a===THREE.RGBFormat)return m.RGB;if(a===THREE.RGBAFormat)return m.RGBA;if(a===THREE.LuminanceFormat)return m.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return m.LUMINANCE_ALPHA;if(a===THREE.AddEquation)return m.FUNC_ADD;if(a===THREE.SubtractEquation)return m.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return m.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return m.ZERO;if(a===THREE.OneFactor)return m.ONE;if(a===THREE.SrcColorFactor)return m.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return m.ONE_MINUS_SRC_COLOR;
if(a===THREE.SrcAlphaFactor)return m.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return m.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return m.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return m.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return m.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return m.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return m.SRC_ALPHA_SATURATE;b=da.get("WEBGL_compressed_texture_s3tc");if(null!==b){if(a===THREE.RGB_S3TC_DXT1_Format)return b.COMPRESSED_RGB_S3TC_DXT1_EXT;
if(a===THREE.RGBA_S3TC_DXT1_Format)return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return b.COMPRESSED_RGBA_S3TC_DXT5_EXT}b=da.get("WEBGL_compressed_texture_pvrtc");if(null!==b){if(a===THREE.RGB_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(a===THREE.RGB_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(a===THREE.RGBA_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
if(a===THREE.RGBA_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}b=da.get("EXT_blend_minmax");if(null!==b){if(a===THREE.MinEquation)return b.MIN_EXT;if(a===THREE.MaxEquation)return b.MAX_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);a=a||{};var U=void 0!==a.canvas?a.canvas:document.createElement("canvas"),M=void 0!==a.context?a.context:null,H=1,L=void 0!==a.precision?a.precision:"highp",P=void 0!==a.alpha?a.alpha:!1,N=void 0!==a.depth?a.depth:!0,R=void 0!==a.stencil?
a.stencil:!0,V=void 0!==a.antialias?a.antialias:!1,J=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,oa=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,ja=void 0!==a.logarithmicDepthBuffer?a.logarithmicDepthBuffer:!1,ha=new THREE.Color(0),O=0,ca=[],ba={},qa=[],Ka=[],Qa=[],Xa=[],Ya=[];this.domElement=U;this.context=null;this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.gammaFactor=2;this.shadowMapEnabled=this.gammaOutput=this.gammaInput=
!1;this.shadowMapType=THREE.PCFShadowMap;this.shadowMapCullFace=THREE.CullFaceFront;this.shadowMapCascade=this.shadowMapDebug=!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var B=this,Pa=[],ob=null,ab=null,ub=-1,ta="",vb=null,Mb=0,ib=0,bb=0,pb=U.width,qb=U.height,Xb=0,fc=0,cb=new THREE.Frustum,db=new THREE.Matrix4,wa=new THREE.Vector3,pa=new THREE.Vector3,Ob=!0,jc={ambient:[0,
0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[],decays:[]},spot:{length:0,colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[],decays:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}},m;try{var Yb={alpha:P,depth:N,stencil:R,antialias:V,premultipliedAlpha:J,preserveDrawingBuffer:oa};m=M||U.getContext("webgl",Yb)||U.getContext("experimental-webgl",Yb);if(null===m){if(null!==U.getContext("webgl"))throw"Error creating WebGL context with your selected attributes.";
throw"Error creating WebGL context.";}U.addEventListener("webglcontextlost",function(a){a.preventDefault();Zb();lc();ba={}},!1)}catch(rc){THREE.error("THREE.WebGLRenderer: "+rc)}var W=new THREE.WebGLState(m,I);void 0===m.getShaderPrecisionFormat&&(m.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}});var da=new THREE.WebGLExtensions(m);da.get("OES_texture_float");da.get("OES_texture_float_linear");da.get("OES_texture_half_float");da.get("OES_texture_half_float_linear");
da.get("OES_standard_derivatives");ja&&da.get("EXT_frag_depth");var rb=function(a,b,c,d){!0===J&&(a*=d,b*=d,c*=d);m.clearColor(a,b,c,d)},lc=function(){m.clearColor(0,0,0,1);m.clearDepth(1);m.clearStencil(0);m.enable(m.DEPTH_TEST);m.depthFunc(m.LEQUAL);m.frontFace(m.CCW);m.cullFace(m.BACK);m.enable(m.CULL_FACE);m.enable(m.BLEND);m.blendEquation(m.FUNC_ADD);m.blendFunc(m.SRC_ALPHA,m.ONE_MINUS_SRC_ALPHA);m.viewport(ib,bb,pb,qb);rb(ha.r,ha.g,ha.b,O)},Zb=function(){vb=ob=null;ta="";ub=-1;Ob=!0;W.reset()};
lc();this.context=m;this.state=W;var Wb=m.getParameter(m.MAX_TEXTURE_IMAGE_UNITS),sc=m.getParameter(m.MAX_VERTEX_TEXTURE_IMAGE_UNITS),tc=m.getParameter(m.MAX_TEXTURE_SIZE),qc=m.getParameter(m.MAX_CUBE_MAP_TEXTURE_SIZE),Vb=0<sc,Nb=Vb&&da.get("OES_texture_float"),uc=m.getShaderPrecisionFormat(m.VERTEX_SHADER,m.HIGH_FLOAT),vc=m.getShaderPrecisionFormat(m.VERTEX_SHADER,m.MEDIUM_FLOAT),wc=m.getShaderPrecisionFormat(m.FRAGMENT_SHADER,m.HIGH_FLOAT),xc=m.getShaderPrecisionFormat(m.FRAGMENT_SHADER,m.MEDIUM_FLOAT),
kc=function(){var a;return function(){if(void 0!==a)return a;a=[];if(da.get("WEBGL_compressed_texture_pvrtc")||da.get("WEBGL_compressed_texture_s3tc"))for(var b=m.getParameter(m.COMPRESSED_TEXTURE_FORMATS),c=0;c<b.length;c++)a.push(b[c]);return a}}(),yc=0<uc.precision&&0<wc.precision,mc=0<vc.precision&&0<xc.precision;"highp"!==L||yc||(mc?(L="mediump",THREE.warn("THREE.WebGLRenderer: highp not supported, using mediump.")):(L="lowp",THREE.warn("THREE.WebGLRenderer: highp and mediump not supported, using lowp.")));
"mediump"!==L||mc||(L="lowp",THREE.warn("THREE.WebGLRenderer: mediump not supported, using lowp."));var zc=new THREE.ShadowMapPlugin(this,ca,ba,qa),Ac=new THREE.SpritePlugin(this,Xa),Bc=new THREE.LensFlarePlugin(this,Ya);this.getContext=function(){return m};this.forceContextLoss=function(){da.get("WEBGL_lose_context").loseContext()};this.supportsVertexTextures=function(){return Vb};this.supportsFloatTextures=function(){return da.get("OES_texture_float")};this.supportsHalfFloatTextures=function(){return da.get("OES_texture_half_float")};
this.supportsStandardDerivatives=function(){return da.get("OES_standard_derivatives")};this.supportsCompressedTextureS3TC=function(){return da.get("WEBGL_compressed_texture_s3tc")};this.supportsCompressedTexturePVRTC=function(){return da.get("WEBGL_compressed_texture_pvrtc")};this.supportsBlendMinMax=function(){return da.get("EXT_blend_minmax")};this.getMaxAnisotropy=function(){var a;return function(){if(void 0!==a)return a;var b=da.get("EXT_texture_filter_anisotropic");return a=null!==b?m.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT):
0}}();this.getPrecision=function(){return L};this.getPixelRatio=function(){return H};this.setPixelRatio=function(a){H=a};this.setSize=function(a,b,c){U.width=a*H;U.height=b*H;!1!==c&&(U.style.width=a+"px",U.style.height=b+"px");this.setViewport(0,0,a,b)};this.setViewport=function(a,b,c,d){ib=a*H;bb=b*H;pb=c*H;qb=d*H;m.viewport(ib,bb,pb,qb)};this.setScissor=function(a,b,c,d){m.scissor(a*H,b*H,c*H,d*H)};this.enableScissorTest=function(a){a?m.enable(m.SCISSOR_TEST):m.disable(m.SCISSOR_TEST)};this.getClearColor=
function(){return ha};this.setClearColor=function(a,b){ha.set(a);O=void 0!==b?b:1;rb(ha.r,ha.g,ha.b,O)};this.getClearAlpha=function(){return O};this.setClearAlpha=function(a){O=a;rb(ha.r,ha.g,ha.b,O)};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=m.COLOR_BUFFER_BIT;if(void 0===b||b)d|=m.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=m.STENCIL_BUFFER_BIT;m.clear(d)};this.clearColor=function(){m.clear(m.COLOR_BUFFER_BIT)};this.clearDepth=function(){m.clear(m.DEPTH_BUFFER_BIT)};this.clearStencil=function(){m.clear(m.STENCIL_BUFFER_BIT)};
this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.resetGLState=Zb;var wb=function(a){a.target.traverse(function(a){a.removeEventListener("remove",wb);if(a instanceof THREE.Mesh||a instanceof THREE.PointCloud||a instanceof THREE.Line)delete ba[a.id];else if(a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback)for(var b=qa,c=b.length-1;0<=c;c--)b[c].object===a&&b.splice(c,1);delete a.__webglInit;delete a._modelViewMatrix;delete a._normalMatrix;delete a.__webglActive})},
jb=function(a){a=a.target;a.removeEventListener("dispose",jb);delete a.__webglInit;if(a instanceof THREE.BufferGeometry){for(var b in a.attributes){var c=a.attributes[b];void 0!==c.buffer&&(m.deleteBuffer(c.buffer),delete c.buffer)}B.info.memory.geometries--}else if(b=Ua[a.id],void 0!==b){for(var c=0,d=b.length;c<d;c++){var e=b[c];if(void 0!==e.numMorphTargets){for(var f=0,g=e.numMorphTargets;f<g;f++)m.deleteBuffer(e.__webglMorphTargetsBuffers[f]);delete e.__webglMorphTargetsBuffers}if(void 0!==e.numMorphNormals){f=
0;for(g=e.numMorphNormals;f<g;f++)m.deleteBuffer(e.__webglMorphNormalsBuffers[f]);delete e.__webglMorphNormalsBuffers}nc(e)}delete Ua[a.id]}else nc(a);ta=""},Pb=function(a){a=a.target;a.removeEventListener("dispose",Pb);a.image&&a.image.__webglTextureCube?(m.deleteTexture(a.image.__webglTextureCube),delete a.image.__webglTextureCube):void 0!==a.__webglInit&&(m.deleteTexture(a.__webglTexture),delete a.__webglTexture,delete a.__webglInit);B.info.memory.textures--},oc=function(a){a=a.target;a.removeEventListener("dispose",
oc);if(a&&void 0!==a.__webglTexture){m.deleteTexture(a.__webglTexture);delete a.__webglTexture;if(a instanceof THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)m.deleteFramebuffer(a.__webglFramebuffer[b]),m.deleteRenderbuffer(a.__webglRenderbuffer[b]);else m.deleteFramebuffer(a.__webglFramebuffer),m.deleteRenderbuffer(a.__webglRenderbuffer);delete a.__webglFramebuffer;delete a.__webglRenderbuffer}B.info.memory.textures--},ic=function(a){a=a.target;a.removeEventListener("dispose",ic);hc(a)},nc=function(a){for(var b=
"__webglVertexBuffer __webglNormalBuffer __webglTangentBuffer __webglColorBuffer __webglUVBuffer __webglUV2Buffer __webglSkinIndicesBuffer __webglSkinWeightsBuffer __webglFaceBuffer __webglLineBuffer __webglLineDistanceBuffer".split(" "),c=0,d=b.length;c<d;c++){var e=b[c];void 0!==a[e]&&(m.deleteBuffer(a[e]),delete a[e])}if(void 0!==a.__webglCustomAttributesList){for(e in a.__webglCustomAttributesList)m.deleteBuffer(a.__webglCustomAttributesList[e].buffer);delete a.__webglCustomAttributesList}B.info.memory.geometries--},
hc=function(a){var b=a.program.program;if(void 0!==b){a.program=void 0;var c,d,e=!1;a=0;for(c=Pa.length;a<c;a++)if(d=Pa[a],d.program===b){d.usedTimes--;0===d.usedTimes&&(e=!0);break}if(!0===e){e=[];a=0;for(c=Pa.length;a<c;a++)d=Pa[a],d.program!==b&&e.push(d);Pa=e;m.deleteProgram(b);B.info.memory.programs--}}};this.renderBufferImmediate=function(a,b,c){W.initAttributes();a.hasPositions&&!a.__webglVertexBuffer&&(a.__webglVertexBuffer=m.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&(a.__webglNormalBuffer=
m.createBuffer());a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=m.createBuffer());a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=m.createBuffer());a.hasPositions&&(m.bindBuffer(m.ARRAY_BUFFER,a.__webglVertexBuffer),m.bufferData(m.ARRAY_BUFFER,a.positionArray,m.DYNAMIC_DRAW),W.enableAttribute(b.attributes.position),m.vertexAttribPointer(b.attributes.position,3,m.FLOAT,!1,0,0));if(a.hasNormals){m.bindBuffer(m.ARRAY_BUFFER,a.__webglNormalBuffer);if(!1===c instanceof THREE.MeshPhongMaterial&&
c.shading===THREE.FlatShading){var d,e,f,g,h,k,n,l,p,q,r,s=3*a.count;for(r=0;r<s;r+=9)q=a.normalArray,d=q[r],e=q[r+1],f=q[r+2],g=q[r+3],k=q[r+4],l=q[r+5],h=q[r+6],n=q[r+7],p=q[r+8],d=(d+g+h)/3,e=(e+k+n)/3,f=(f+l+p)/3,q[r]=d,q[r+1]=e,q[r+2]=f,q[r+3]=d,q[r+4]=e,q[r+5]=f,q[r+6]=d,q[r+7]=e,q[r+8]=f}m.bufferData(m.ARRAY_BUFFER,a.normalArray,m.DYNAMIC_DRAW);W.enableAttribute(b.attributes.normal);m.vertexAttribPointer(b.attributes.normal,3,m.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(m.bindBuffer(m.ARRAY_BUFFER,a.__webglUvBuffer),
m.bufferData(m.ARRAY_BUFFER,a.uvArray,m.DYNAMIC_DRAW),W.enableAttribute(b.attributes.uv),m.vertexAttribPointer(b.attributes.uv,2,m.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(m.bindBuffer(m.ARRAY_BUFFER,a.__webglColorBuffer),m.bufferData(m.ARRAY_BUFFER,a.colorArray,m.DYNAMIC_DRAW),W.enableAttribute(b.attributes.color),m.vertexAttribPointer(b.attributes.color,3,m.FLOAT,!1,0,0));W.disableUnusedAttributes();m.drawArrays(m.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,
b,c,e,f,g){if(!1!==e.visible)if(t(g),a=v(a,b,c,e,g),b=!1,c="direct_"+f.id+"_"+a.id+"_"+(e.wireframe?1:0),c!==ta&&(ta=c,b=!0),b&&W.initAttributes(),g instanceof THREE.Mesh){g=!0===e.wireframe?m.LINES:m.TRIANGLES;var h=f.attributes.index;if(h){var k,n;h.array instanceof Uint32Array&&da.get("OES_element_index_uint")?(k=m.UNSIGNED_INT,n=4):(k=m.UNSIGNED_SHORT,n=2);c=f.offsets;if(0===c.length)b&&(d(e,a,f,0),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,h.buffer)),m.drawElements(g,h.array.length,k,0),B.info.render.calls++,
B.info.render.vertices+=h.array.length,B.info.render.faces+=h.array.length/3;else{b=!0;for(var l=0,p=c.length;l<p;l++){var q=c[l].index;b&&(d(e,a,f,q),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,h.buffer));m.drawElements(g,c[l].count,k,c[l].start*n);B.info.render.calls++;B.info.render.vertices+=c[l].count;B.info.render.faces+=c[l].count/3}}}else b&&d(e,a,f,0),e=f.attributes.position,m.drawArrays(g,0,e.array.length/e.itemSize),B.info.render.calls++,B.info.render.vertices+=e.array.length/e.itemSize,B.info.render.faces+=
e.array.length/(3*e.itemSize)}else if(g instanceof THREE.PointCloud)if(g=m.POINTS,h=f.attributes.index)if(h.array instanceof Uint32Array&&da.get("OES_element_index_uint")?(k=m.UNSIGNED_INT,n=4):(k=m.UNSIGNED_SHORT,n=2),c=f.offsets,0===c.length)b&&(d(e,a,f,0),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,h.buffer)),m.drawElements(g,h.array.length,k,0),B.info.render.calls++,B.info.render.points+=h.array.length;else for(1<c.length&&(b=!0),l=0,p=c.length;l<p;l++)q=c[l].index,b&&(d(e,a,f,q),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,
h.buffer)),m.drawElements(g,c[l].count,k,c[l].start*n),B.info.render.calls++,B.info.render.points+=c[l].count;else if(b&&d(e,a,f,0),e=f.attributes.position,c=f.offsets,0===c.length)m.drawArrays(g,0,e.array.length/3),B.info.render.calls++,B.info.render.points+=e.array.length/3;else for(l=0,p=c.length;l<p;l++)m.drawArrays(g,c[l].index,c[l].count),B.info.render.calls++,B.info.render.points+=c[l].count;else if(g instanceof THREE.Line)if(g=g.mode===THREE.LineStrip?m.LINE_STRIP:m.LINES,W.setLineWidth(e.linewidth*
H),h=f.attributes.index)if(h.array instanceof Uint32Array?(k=m.UNSIGNED_INT,n=4):(k=m.UNSIGNED_SHORT,n=2),c=f.offsets,0===c.length)b&&(d(e,a,f,0),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,h.buffer)),m.drawElements(g,h.array.length,k,0),B.info.render.calls++,B.info.render.vertices+=h.array.length;else for(1<c.length&&(b=!0),l=0,p=c.length;l<p;l++)q=c[l].index,b&&(d(e,a,f,q),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,h.buffer)),m.drawElements(g,c[l].count,k,c[l].start*n),B.info.render.calls++,B.info.render.vertices+=
c[l].count;else if(b&&d(e,a,f,0),e=f.attributes.position,c=f.offsets,0===c.length)m.drawArrays(g,0,e.array.length/3),B.info.render.calls++,B.info.render.vertices+=e.array.length/3;else for(l=0,p=c.length;l<p;l++)m.drawArrays(g,c[l].index,c[l].count),B.info.render.calls++,B.info.render.vertices+=c[l].count};this.renderBuffer=function(a,b,c,d,e,f){if(!1!==d.visible){t(f);c=v(a,b,c,d,f);b=c.attributes;a=!1;c=e.id+"_"+c.id+"_"+(d.wireframe?1:0);c!==ta&&(ta=c,a=!0);a&&W.initAttributes();if(!d.morphTargets&&
0<=b.position)a&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglVertexBuffer),W.enableAttribute(b.position),m.vertexAttribPointer(b.position,3,m.FLOAT,!1,0,0));else if(f.morphTargetBase){c=d.program.attributes;-1!==f.morphTargetBase&&0<=c.position?(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[f.morphTargetBase]),W.enableAttribute(c.position),m.vertexAttribPointer(c.position,3,m.FLOAT,!1,0,0)):0<=c.position&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglVertexBuffer),W.enableAttribute(c.position),m.vertexAttribPointer(c.position,
3,m.FLOAT,!1,0,0));if(f.morphTargetForcedOrder.length)for(var h=0,k=f.morphTargetForcedOrder,n=f.morphTargetInfluences,l;h<d.numSupportedMorphTargets&&h<k.length;)l=c["morphTarget"+h],0<=l&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[k[h]]),W.enableAttribute(l),m.vertexAttribPointer(l,3,m.FLOAT,!1,0,0)),l=c["morphNormal"+h],0<=l&&d.morphNormals&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[k[h]]),W.enableAttribute(l),m.vertexAttribPointer(l,3,m.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[h]=
n[k[h]],h++;else{k=[];n=f.morphTargetInfluences;h=f.geometry.morphTargets;n.length>h.length&&(console.warn("THREE.WebGLRenderer: Influences array is bigger than morphTargets array."),n.length=h.length);h=0;for(l=n.length;h<l;h++)k.push([n[h],h]);k.length>d.numSupportedMorphTargets?(k.sort(g),k.length=d.numSupportedMorphTargets):k.length>d.numSupportedMorphNormals?k.sort(g):0===k.length&&k.push([0,0]);for(var h=0,p=d.numSupportedMorphTargets;h<p;h++)if(k[h]){var q=k[h][1];l=c["morphTarget"+h];0<=l&&
(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[q]),W.enableAttribute(l),m.vertexAttribPointer(l,3,m.FLOAT,!1,0,0));l=c["morphNormal"+h];0<=l&&d.morphNormals&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[q]),W.enableAttribute(l),m.vertexAttribPointer(l,3,m.FLOAT,!1,0,0));f.__webglMorphTargetInfluences[h]=n[q]}else f.__webglMorphTargetInfluences[h]=0}null!==d.program.uniforms.morphTargetInfluences&&m.uniform1fv(d.program.uniforms.morphTargetInfluences,f.__webglMorphTargetInfluences)}if(a){if(e.__webglCustomAttributesList)for(c=
0,n=e.__webglCustomAttributesList.length;c<n;c++)k=e.__webglCustomAttributesList[c],0<=b[k.buffer.belongsToAttribute]&&(m.bindBuffer(m.ARRAY_BUFFER,k.buffer),W.enableAttribute(b[k.buffer.belongsToAttribute]),m.vertexAttribPointer(b[k.buffer.belongsToAttribute],k.size,m.FLOAT,!1,0,0));0<=b.color&&(0<f.geometry.colors.length||0<f.geometry.faces.length?(m.bindBuffer(m.ARRAY_BUFFER,e.__webglColorBuffer),W.enableAttribute(b.color),m.vertexAttribPointer(b.color,3,m.FLOAT,!1,0,0)):void 0!==d.defaultAttributeValues&&
m.vertexAttrib3fv(b.color,d.defaultAttributeValues.color));0<=b.normal&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglNormalBuffer),W.enableAttribute(b.normal),m.vertexAttribPointer(b.normal,3,m.FLOAT,!1,0,0));0<=b.tangent&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglTangentBuffer),W.enableAttribute(b.tangent),m.vertexAttribPointer(b.tangent,4,m.FLOAT,!1,0,0));0<=b.uv&&(f.geometry.faceVertexUvs[0]?(m.bindBuffer(m.ARRAY_BUFFER,e.__webglUVBuffer),W.enableAttribute(b.uv),m.vertexAttribPointer(b.uv,2,m.FLOAT,!1,0,
0)):void 0!==d.defaultAttributeValues&&m.vertexAttrib2fv(b.uv,d.defaultAttributeValues.uv));0<=b.uv2&&(f.geometry.faceVertexUvs[1]?(m.bindBuffer(m.ARRAY_BUFFER,e.__webglUV2Buffer),W.enableAttribute(b.uv2),m.vertexAttribPointer(b.uv2,2,m.FLOAT,!1,0,0)):void 0!==d.defaultAttributeValues&&m.vertexAttrib2fv(b.uv2,d.defaultAttributeValues.uv2));d.skinning&&0<=b.skinIndex&&0<=b.skinWeight&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglSkinIndicesBuffer),W.enableAttribute(b.skinIndex),m.vertexAttribPointer(b.skinIndex,
4,m.FLOAT,!1,0,0),m.bindBuffer(m.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),W.enableAttribute(b.skinWeight),m.vertexAttribPointer(b.skinWeight,4,m.FLOAT,!1,0,0));0<=b.lineDistance&&(m.bindBuffer(m.ARRAY_BUFFER,e.__webglLineDistanceBuffer),W.enableAttribute(b.lineDistance),m.vertexAttribPointer(b.lineDistance,1,m.FLOAT,!1,0,0))}W.disableUnusedAttributes();f instanceof THREE.Mesh?(f=e.__typeArray===Uint32Array?m.UNSIGNED_INT:m.UNSIGNED_SHORT,d.wireframe?(W.setLineWidth(d.wireframeLinewidth*H),a&&m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,
e.__webglLineBuffer),m.drawElements(m.LINES,e.__webglLineCount,f,0)):(a&&m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),m.drawElements(m.TRIANGLES,e.__webglFaceCount,f,0)),B.info.render.calls++,B.info.render.vertices+=e.__webglFaceCount,B.info.render.faces+=e.__webglFaceCount/3):f instanceof THREE.Line?(f=f.mode===THREE.LineStrip?m.LINE_STRIP:m.LINES,W.setLineWidth(d.linewidth*H),m.drawArrays(f,0,e.__webglLineCount),B.info.render.calls++):f instanceof THREE.PointCloud&&(m.drawArrays(m.POINTS,
0,e.__webglParticleCount),B.info.render.calls++,B.info.render.points+=e.__webglParticleCount)}};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)THREE.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else{var g=a.fog;ta="";ub=-1;vb=null;Ob=!0;!0===a.autoUpdate&&a.updateMatrixWorld();void 0===b.parent&&b.updateMatrixWorld();a.traverse(function(a){a instanceof THREE.SkinnedMesh&&a.skeleton.update()});b.matrixWorldInverse.getInverse(b.matrixWorld);db.multiplyMatrices(b.projectionMatrix,
b.matrixWorldInverse);cb.setFromMatrix(db);ca.length=0;Ka.length=0;Qa.length=0;Xa.length=0;Ya.length=0;h(a);!0===B.sortObjects&&(Ka.sort(e),Qa.sort(f));zc.render(a,b);B.info.render.calls=0;B.info.render.vertices=0;B.info.render.faces=0;B.info.render.points=0;this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);d=0;for(var n=qa.length;d<n;d++){var m=qa[d],q=m.object;q.visible&&(w(q,b),p(m))}a.overrideMaterial?(d=a.overrideMaterial,u(d),
k(Ka,b,ca,g,d),k(Qa,b,ca,g,d),l(qa,"",b,ca,g,d)):(W.setBlending(THREE.NoBlending),k(Ka,b,ca,g,null),l(qa,"opaque",b,ca,g,null),k(Qa,b,ca,g,null),l(qa,"transparent",b,ca,g,null));Ac.render(a,b);Bc.render(a,b,Xb,fc);c&&c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter&&F(c);W.setDepthTest(!0);W.setDepthWrite(!0);W.setColorWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var f=v(a,b,c,d,e);ta="";B.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(f,
m,cb):e.render(function(a){B.renderBufferImmediate(a,f,d)})};var Ua={},Qb=0,pc={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointCloudMaterial:"particle_basic"};this.setFaceCulling=function(a,b){a===THREE.CullFaceNone?m.disable(m.CULL_FACE):(b===THREE.FrontFaceDirectionCW?m.frontFace(m.CW):m.frontFace(m.CCW),a===THREE.CullFaceBack?m.cullFace(m.BACK):a===
THREE.CullFaceFront?m.cullFace(m.FRONT):m.cullFace(m.FRONT_AND_BACK),m.enable(m.CULL_FACE))};this.setMaterialFaces=function(a){W.setDoubleSided(a.side===THREE.DoubleSide);W.setFlipSided(a.side===THREE.BackSide)};this.uploadTexture=function(a){void 0===a.__webglInit&&(a.__webglInit=!0,a.addEventListener("dispose",Pb),a.__webglTexture=m.createTexture(),B.info.memory.textures++);m.bindTexture(m.TEXTURE_2D,a.__webglTexture);m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL,a.flipY);m.pixelStorei(m.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
a.premultiplyAlpha);m.pixelStorei(m.UNPACK_ALIGNMENT,a.unpackAlignment);a.image=E(a.image,tc);var b=a.image,c=THREE.Math.isPowerOfTwo(b.width)&&THREE.Math.isPowerOfTwo(b.height),d=I(a.format),e=I(a.type);A(m.TEXTURE_2D,a,c);var f=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<f.length&&c){for(var g=0,h=f.length;g<h;g++)b=f[g],m.texImage2D(m.TEXTURE_2D,g,d,b.width,b.height,0,d,e,b.data);a.generateMipmaps=!1}else m.texImage2D(m.TEXTURE_2D,0,d,b.width,b.height,0,d,e,b.data);else if(a instanceof THREE.CompressedTexture)for(g=
0,h=f.length;g<h;g++)b=f[g],a.format!==THREE.RGBAFormat&&a.format!==THREE.RGBFormat?-1<kc().indexOf(d)?m.compressedTexImage2D(m.TEXTURE_2D,g,d,b.width,b.height,0,b.data):THREE.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):m.texImage2D(m.TEXTURE_2D,g,d,b.width,b.height,0,d,e,b.data);else if(0<f.length&&c){g=0;for(h=f.length;g<h;g++)b=f[g],m.texImage2D(m.TEXTURE_2D,g,d,d,e,b);a.generateMipmaps=!1}else m.texImage2D(m.TEXTURE_2D,0,d,d,e,a.image);
a.generateMipmaps&&c&&m.generateMipmap(m.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()};this.setTexture=function(a,b){m.activeTexture(m.TEXTURE0+b);a.needsUpdate?B.uploadTexture(a):m.bindTexture(m.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&void 0===a.__webglFramebuffer){void 0===a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.addEventListener("dispose",oc);a.__webglTexture=m.createTexture();
B.info.memory.textures++;var c=THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height),d=I(a.format),e=I(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];m.bindTexture(m.TEXTURE_CUBE_MAP,a.__webglTexture);A(m.TEXTURE_CUBE_MAP,a,c);for(var f=0;6>f;f++){a.__webglFramebuffer[f]=m.createFramebuffer();a.__webglRenderbuffer[f]=m.createRenderbuffer();m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,d,a.width,a.height,0,d,e,null);var g=a,h=m.TEXTURE_CUBE_MAP_POSITIVE_X+f;m.bindFramebuffer(m.FRAMEBUFFER,
a.__webglFramebuffer[f]);m.framebufferTexture2D(m.FRAMEBUFFER,m.COLOR_ATTACHMENT0,h,g.__webglTexture,0);G(a.__webglRenderbuffer[f],a)}c&&m.generateMipmap(m.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=m.createFramebuffer(),a.__webglRenderbuffer=a.shareDepthFrom?a.shareDepthFrom.__webglRenderbuffer:m.createRenderbuffer(),m.bindTexture(m.TEXTURE_2D,a.__webglTexture),A(m.TEXTURE_2D,a,c),m.texImage2D(m.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=m.TEXTURE_2D,m.bindFramebuffer(m.FRAMEBUFFER,a.__webglFramebuffer),
m.framebufferTexture2D(m.FRAMEBUFFER,m.COLOR_ATTACHMENT0,d,a.__webglTexture,0),a.shareDepthFrom?a.depthBuffer&&!a.stencilBuffer?m.framebufferRenderbuffer(m.FRAMEBUFFER,m.DEPTH_ATTACHMENT,m.RENDERBUFFER,a.__webglRenderbuffer):a.depthBuffer&&a.stencilBuffer&&m.framebufferRenderbuffer(m.FRAMEBUFFER,m.DEPTH_STENCIL_ATTACHMENT,m.RENDERBUFFER,a.__webglRenderbuffer):G(a.__webglRenderbuffer,a),c&&m.generateMipmap(m.TEXTURE_2D);b?m.bindTexture(m.TEXTURE_CUBE_MAP,null):m.bindTexture(m.TEXTURE_2D,null);m.bindRenderbuffer(m.RENDERBUFFER,
null);m.bindFramebuffer(m.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=pb,a=qb,d=ib,e=bb);b!==ab&&(m.bindFramebuffer(m.FRAMEBUFFER,b),m.viewport(d,e,c,a),ab=b);Xb=c;fc=a};this.readRenderTargetPixels=function(a,b,c,d,e,f){if(!(a instanceof THREE.WebGLRenderTarget))console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");else if(a.__webglFramebuffer)if(a.format!==THREE.RGBAFormat)console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA format. readPixels can read only RGBA format.");
else{var g=!1;a.__webglFramebuffer!==ab&&(m.bindFramebuffer(m.FRAMEBUFFER,a.__webglFramebuffer),g=!0);m.checkFramebufferStatus(m.FRAMEBUFFER)===m.FRAMEBUFFER_COMPLETE?m.readPixels(b,c,d,e,m.RGBA,m.UNSIGNED_BYTE,f):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");g&&m.bindFramebuffer(m.FRAMEBUFFER,ab)}};this.initMaterial=function(){THREE.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")};this.addPrePlugin=function(){THREE.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")};
this.addPostPlugin=function(){THREE.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")};this.updateShadowMap=function(){THREE.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}};
THREE.WebGLRenderTarget=function(a,b,c){this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.format=void 0!==c.format?c.format:
THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0;this.shareDepthFrom=void 0!==c.shareDepthFrom?c.shareDepthFrom:null};
THREE.WebGLRenderTarget.prototype={constructor:THREE.WebGLRenderTarget,setSize:function(a,b){this.width=a;this.height=b},clone:function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;
a.shareDepthFrom=this.shareDepthFrom;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube;
THREE.WebGLExtensions=function(a){var b={};this.get=function(c){if(void 0!==b[c])return b[c];var d;switch(c){case "EXT_texture_filter_anisotropic":d=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":d=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
break;case "WEBGL_compressed_texture_pvrtc":d=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:d=a.getExtension(c)}null===d&&THREE.warn("THREE.WebGLRenderer: "+c+" extension not supported.");return b[c]=d}};
THREE.WebGLProgram=function(){var a=0;return function(b,c,d,e){var f=b.context,g=d.defines,h=d.__webglShader.uniforms,k=d.attributes,l=d.__webglShader.vertexShader,p=d.__webglShader.fragmentShader,q=d.index0AttributeName;void 0===q&&!0===e.morphTargets&&(q="position");var n="SHADOWMAP_TYPE_BASIC";e.shadowMapType===THREE.PCFShadowMap?n="SHADOWMAP_TYPE_PCF":e.shadowMapType===THREE.PCFSoftShadowMap&&(n="SHADOWMAP_TYPE_PCF_SOFT");var t="ENVMAP_TYPE_CUBE",r="ENVMAP_MODE_REFLECTION",s="ENVMAP_BLENDING_MULTIPLY";
if(e.envMap){switch(d.envMap.mapping){case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:t="ENVMAP_TYPE_CUBE";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:t="ENVMAP_TYPE_EQUIREC";break;case THREE.SphericalReflectionMapping:t="ENVMAP_TYPE_SPHERE"}switch(d.envMap.mapping){case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:r="ENVMAP_MODE_REFRACTION"}switch(d.combine){case THREE.MultiplyOperation:s="ENVMAP_BLENDING_MULTIPLY";
break;case THREE.MixOperation:s="ENVMAP_BLENDING_MIX";break;case THREE.AddOperation:s="ENVMAP_BLENDING_ADD"}}var u=0<b.gammaFactor?b.gammaFactor:1,v,x;v=[];for(var D in g)x=g[D],!1!==x&&(x="#define "+D+" "+x,v.push(x));v=v.join("\n");g=f.createProgram();d instanceof THREE.RawShaderMaterial?b=d="":(d=["precision "+e.precision+" float;","precision "+e.precision+" int;",v,e.supportsVertexTextures?"#define VERTEX_TEXTURES":"",b.gammaInput?"#define GAMMA_INPUT":"",b.gammaOutput?"#define GAMMA_OUTPUT":
"","#define GAMMA_FACTOR "+u,"#define MAX_DIR_LIGHTS "+e.maxDirLights,"#define MAX_POINT_LIGHTS "+e.maxPointLights,"#define MAX_SPOT_LIGHTS "+e.maxSpotLights,"#define MAX_HEMI_LIGHTS "+e.maxHemiLights,"#define MAX_SHADOWS "+e.maxShadows,"#define MAX_BONES "+e.maxBones,e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+r:"",e.lightMap?"#define USE_LIGHTMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.specularMap?"#define USE_SPECULARMAP":
"",e.alphaMap?"#define USE_ALPHAMAP":"",e.vertexColors?"#define USE_COLOR":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.useVertexTexture?"#define BONE_TEXTURE":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals?"#define USE_MORPHNORMALS":"",e.wrapAround?"#define WRAP_AROUND":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+n:"",e.shadowMapDebug?
"#define SHADOWMAP_DEBUG":"",e.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n"].join("\n"),
b=["precision "+e.precision+" float;","precision "+e.precision+" int;",e.bumpMap||e.normalMap||e.flatShading?"#extension GL_OES_standard_derivatives : enable":"",v,"#define MAX_DIR_LIGHTS "+e.maxDirLights,"#define MAX_POINT_LIGHTS "+e.maxPointLights,"#define MAX_SPOT_LIGHTS "+e.maxSpotLights,"#define MAX_HEMI_LIGHTS "+e.maxHemiLights,"#define MAX_SHADOWS "+e.maxShadows,e.alphaTest?"#define ALPHATEST "+e.alphaTest:"",b.gammaInput?"#define GAMMA_INPUT":"",b.gammaOutput?"#define GAMMA_OUTPUT":"","#define GAMMA_FACTOR "+
u,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+t:"",e.envMap?"#define "+r:"",e.envMap?"#define "+s:"",e.lightMap?"#define USE_LIGHTMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.vertexColors?"#define USE_COLOR":"",e.flatShading?"#define FLAT_SHADED":"",e.metal?"#define METAL":
"",e.wrapAround?"#define WRAP_AROUND":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+n:"",e.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",e.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n"));l=new THREE.WebGLShader(f,f.VERTEX_SHADER,d+l);p=new THREE.WebGLShader(f,f.FRAGMENT_SHADER,
b+p);f.attachShader(g,l);f.attachShader(g,p);void 0!==q&&f.bindAttribLocation(g,0,q);f.linkProgram(g);q=f.getProgramInfoLog(g);!1===f.getProgramParameter(g,f.LINK_STATUS)&&THREE.error("THREE.WebGLProgram: shader error: "+f.getError(),"gl.VALIDATE_STATUS",f.getProgramParameter(g,f.VALIDATE_STATUS),"gl.getPRogramInfoLog",q);""!==q&&THREE.warn("THREE.WebGLProgram: gl.getProgramInfoLog()"+q);f.deleteShader(l);f.deleteShader(p);q="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences bindMatrix bindMatrixInverse".split(" ");
e.useVertexTexture?(q.push("boneTexture"),q.push("boneTextureWidth"),q.push("boneTextureHeight")):q.push("boneGlobalMatrices");e.logarithmicDepthBuffer&&q.push("logDepthBufFC");for(var w in h)q.push(w);h=q;w={};q=0;for(b=h.length;q<b;q++)n=h[q],w[n]=f.getUniformLocation(g,n);this.uniforms=w;q="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");for(h=0;h<e.maxMorphTargets;h++)q.push("morphTarget"+h);for(h=0;h<e.maxMorphNormals;h++)q.push("morphNormal"+h);for(var y in k)q.push(y);
e=q;k={};y=0;for(h=e.length;y<h;y++)w=e[y],k[w]=f.getAttribLocation(g,w);this.attributes=k;this.attributesKeys=Object.keys(this.attributes);this.id=a++;this.code=c;this.usedTimes=1;this.program=g;this.vertexShader=l;this.fragmentShader=p;return this}}();
THREE.WebGLShader=function(){var a=function(a){a=a.split("\n");for(var c=0;c<a.length;c++)a[c]=c+1+": "+a[c];return a.join("\n")};return function(b,c,d){c=b.createShader(c);b.shaderSource(c,d);b.compileShader(c);!1===b.getShaderParameter(c,b.COMPILE_STATUS)&&THREE.error("THREE.WebGLShader: Shader couldn't compile.");""!==b.getShaderInfoLog(c)&&THREE.warn("THREE.WebGLShader: gl.getShaderInfoLog()",b.getShaderInfoLog(c),a(d));return c}}();
THREE.WebGLState=function(a,b){var c=new Uint8Array(16),d=new Uint8Array(16),e=null,f=null,g=null,h=null,k=null,l=null,p=null,q=null,n=null,t=null,r=null,s=null,u=null,v=null,x=null,D=null;this.initAttributes=function(){for(var a=0,b=c.length;a<b;a++)c[a]=0};this.enableAttribute=function(b){c[b]=1;0===d[b]&&(a.enableVertexAttribArray(b),d[b]=1)};this.disableUnusedAttributes=function(){for(var b=0,e=d.length;b<e;b++)d[b]!==c[b]&&(a.disableVertexAttribArray(b),d[b]=0)};this.setBlending=function(c,d,
n,q,r,s,t){c!==e&&(c===THREE.NoBlending?a.disable(a.BLEND):c===THREE.AdditiveBlending?(a.enable(a.BLEND),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE)):c===THREE.SubtractiveBlending?(a.enable(a.BLEND),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.ONE_MINUS_SRC_COLOR)):c===THREE.MultiplyBlending?(a.enable(a.BLEND),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.SRC_COLOR)):c===THREE.CustomBlending?a.enable(a.BLEND):(a.enable(a.BLEND),a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),
a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)),e=c);if(c===THREE.CustomBlending){r=r||d;s=s||n;t=t||q;if(d!==f||r!==k)a.blendEquationSeparate(b(d),b(r)),f=d,k=r;if(n!==g||q!==h||s!==l||t!==p)a.blendFuncSeparate(b(n),b(q),b(s),b(t)),g=n,h=q,l=s,p=t}else p=l=k=h=g=f=null};this.setDepthTest=function(b){q!==b&&(b?a.enable(a.DEPTH_TEST):a.disable(a.DEPTH_TEST),q=b)};this.setDepthWrite=function(b){n!==b&&(a.depthMask(b),n=b)};this.setColorWrite=function(b){t!==b&&(a.colorMask(b,
b,b,b),t=b)};this.setDoubleSided=function(b){r!==b&&(b?a.disable(a.CULL_FACE):a.enable(a.CULL_FACE),r=b)};this.setFlipSided=function(b){s!==b&&(b?a.frontFace(a.CW):a.frontFace(a.CCW),s=b)};this.setLineWidth=function(b){b!==u&&(a.lineWidth(b),u=b)};this.setPolygonOffset=function(b,c,d){v!==b&&(b?a.enable(a.POLYGON_OFFSET_FILL):a.disable(a.POLYGON_OFFSET_FILL),v=b);!b||x===c&&D===d||(a.polygonOffset(c,d),x=c,D=d)};this.reset=function(){for(var a=0;a<d.length;a++)d[a]=0;s=r=t=n=q=e=null}};
THREE.LensFlarePlugin=function(a,b){var c,d,e,f,g,h,k,l,p,q,n=a.context,t,r,s,u,v,x;this.render=function(D,w,y,A){if(0!==b.length){D=new THREE.Vector3;var E=A/y,G=.5*y,F=.5*A,z=16/A,I=new THREE.Vector2(z*E,z),U=new THREE.Vector3(1,1,0),M=new THREE.Vector2(1,1);if(void 0===s){var z=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),H=new Uint16Array([0,1,2,0,2,3]);t=n.createBuffer();r=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,t);n.bufferData(n.ARRAY_BUFFER,z,n.STATIC_DRAW);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,
r);n.bufferData(n.ELEMENT_ARRAY_BUFFER,H,n.STATIC_DRAW);v=n.createTexture();x=n.createTexture();n.bindTexture(n.TEXTURE_2D,v);n.texImage2D(n.TEXTURE_2D,0,n.RGB,16,16,0,n.RGB,n.UNSIGNED_BYTE,null);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST);n.bindTexture(n.TEXTURE_2D,x);n.texImage2D(n.TEXTURE_2D,0,
n.RGBA,16,16,0,n.RGBA,n.UNSIGNED_BYTE,null);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST);var z=(u=0<n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS))?{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},
H=n.createProgram(),L=n.createShader(n.FRAGMENT_SHADER),P=n.createShader(n.VERTEX_SHADER),N="precision "+a.getPrecision()+" float;\n";n.shaderSource(L,N+z.fragmentShader);n.shaderSource(P,N+z.vertexShader);n.compileShader(L);n.compileShader(P);n.attachShader(H,L);n.attachShader(H,P);n.linkProgram(H);s=H;p=n.getAttribLocation(s,"position");q=n.getAttribLocation(s,"uv");c=n.getUniformLocation(s,"renderType");d=n.getUniformLocation(s,"map");e=n.getUniformLocation(s,"occlusionMap");f=n.getUniformLocation(s,
"opacity");g=n.getUniformLocation(s,"color");h=n.getUniformLocation(s,"scale");k=n.getUniformLocation(s,"rotation");l=n.getUniformLocation(s,"screenPosition")}n.useProgram(s);n.enableVertexAttribArray(p);n.enableVertexAttribArray(q);n.uniform1i(e,0);n.uniform1i(d,1);n.bindBuffer(n.ARRAY_BUFFER,t);n.vertexAttribPointer(p,2,n.FLOAT,!1,16,0);n.vertexAttribPointer(q,2,n.FLOAT,!1,16,8);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r);n.disable(n.CULL_FACE);n.depthMask(!1);H=0;for(L=b.length;H<L;H++)if(z=16/A,I.set(z*
E,z),P=b[H],D.set(P.matrixWorld.elements[12],P.matrixWorld.elements[13],P.matrixWorld.elements[14]),D.applyMatrix4(w.matrixWorldInverse),D.applyProjection(w.projectionMatrix),U.copy(D),M.x=U.x*G+G,M.y=U.y*F+F,u||0<M.x&&M.x<y&&0<M.y&&M.y<A){n.activeTexture(n.TEXTURE1);n.bindTexture(n.TEXTURE_2D,v);n.copyTexImage2D(n.TEXTURE_2D,0,n.RGB,M.x-8,M.y-8,16,16,0);n.uniform1i(c,0);n.uniform2f(h,I.x,I.y);n.uniform3f(l,U.x,U.y,U.z);n.disable(n.BLEND);n.enable(n.DEPTH_TEST);n.drawElements(n.TRIANGLES,6,n.UNSIGNED_SHORT,
0);n.activeTexture(n.TEXTURE0);n.bindTexture(n.TEXTURE_2D,x);n.copyTexImage2D(n.TEXTURE_2D,0,n.RGBA,M.x-8,M.y-8,16,16,0);n.uniform1i(c,1);n.disable(n.DEPTH_TEST);n.activeTexture(n.TEXTURE1);n.bindTexture(n.TEXTURE_2D,v);n.drawElements(n.TRIANGLES,6,n.UNSIGNED_SHORT,0);P.positionScreen.copy(U);P.customUpdateCallback?P.customUpdateCallback(P):P.updateLensFlares();n.uniform1i(c,2);n.enable(n.BLEND);for(var N=0,R=P.lensFlares.length;N<R;N++){var V=P.lensFlares[N];.001<V.opacity&&.001<V.scale&&(U.x=V.x,
U.y=V.y,U.z=V.z,z=V.size*V.scale/A,I.x=z*E,I.y=z,n.uniform3f(l,U.x,U.y,U.z),n.uniform2f(h,I.x,I.y),n.uniform1f(k,V.rotation),n.uniform1f(f,V.opacity),n.uniform3f(g,V.color.r,V.color.g,V.color.b),a.state.setBlending(V.blending,V.blendEquation,V.blendSrc,V.blendDst),a.setTexture(V.texture,1),n.drawElements(n.TRIANGLES,6,n.UNSIGNED_SHORT,0))}}n.enable(n.CULL_FACE);n.enable(n.DEPTH_TEST);n.depthMask(!0);a.resetGLState()}}};
THREE.ShadowMapPlugin=function(a,b,c,d){function e(a,b,d){if(b.visible){var f=c[b.id];if(f&&b.castShadow&&(!1===b.frustumCulled||!0===p.intersectsObject(b)))for(var g=0,h=f.length;g<h;g++){var k=f[g];b._modelViewMatrix.multiplyMatrices(d.matrixWorldInverse,b.matrixWorld);s.push(k)}g=0;for(h=b.children.length;g<h;g++)e(a,b.children[g],d)}}var f=a.context,g,h,k,l,p=new THREE.Frustum,q=new THREE.Matrix4,n=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Vector3,s=[],u=THREE.ShaderLib.depthRGBA,v=THREE.UniformsUtils.clone(u.uniforms);
g=new THREE.ShaderMaterial({uniforms:v,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader});h=new THREE.ShaderMaterial({uniforms:v,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,morphTargets:!0});k=new THREE.ShaderMaterial({uniforms:v,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,skinning:!0});l=new THREE.ShaderMaterial({uniforms:v,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,morphTargets:!0,skinning:!0});g._shadowPass=!0;h._shadowPass=!0;k._shadowPass=
!0;l._shadowPass=!0;this.render=function(c,v){if(!1!==a.shadowMapEnabled){var u,y,A,E,G,F,z,I,U=[];E=0;f.clearColor(1,1,1,1);f.disable(f.BLEND);f.enable(f.CULL_FACE);f.frontFace(f.CCW);a.shadowMapCullFace===THREE.CullFaceFront?f.cullFace(f.FRONT):f.cullFace(f.BACK);a.state.setDepthTest(!0);u=0;for(y=b.length;u<y;u++)if(A=b[u],A.castShadow)if(A instanceof THREE.DirectionalLight&&A.shadowCascade)for(G=0;G<A.shadowCascadeCount;G++){var M;if(A.shadowCascadeArray[G])M=A.shadowCascadeArray[G];else{z=A;
var H=G;M=new THREE.DirectionalLight;M.isVirtual=!0;M.onlyShadow=!0;M.castShadow=!0;M.shadowCameraNear=z.shadowCameraNear;M.shadowCameraFar=z.shadowCameraFar;M.shadowCameraLeft=z.shadowCameraLeft;M.shadowCameraRight=z.shadowCameraRight;M.shadowCameraBottom=z.shadowCameraBottom;M.shadowCameraTop=z.shadowCameraTop;M.shadowCameraVisible=z.shadowCameraVisible;M.shadowDarkness=z.shadowDarkness;M.shadowBias=z.shadowCascadeBias[H];M.shadowMapWidth=z.shadowCascadeWidth[H];M.shadowMapHeight=z.shadowCascadeHeight[H];
M.pointsWorld=[];M.pointsFrustum=[];I=M.pointsWorld;F=M.pointsFrustum;for(var L=0;8>L;L++)I[L]=new THREE.Vector3,F[L]=new THREE.Vector3;I=z.shadowCascadeNearZ[H];z=z.shadowCascadeFarZ[H];F[0].set(-1,-1,I);F[1].set(1,-1,I);F[2].set(-1,1,I);F[3].set(1,1,I);F[4].set(-1,-1,z);F[5].set(1,-1,z);F[6].set(-1,1,z);F[7].set(1,1,z);M.originalCamera=v;F=new THREE.Gyroscope;F.position.copy(A.shadowCascadeOffset);F.add(M);F.add(M.target);v.add(F);A.shadowCascadeArray[G]=M}H=A;I=G;z=H.shadowCascadeArray[I];z.position.copy(H.position);
z.target.position.copy(H.target.position);z.lookAt(z.target);z.shadowCameraVisible=H.shadowCameraVisible;z.shadowDarkness=H.shadowDarkness;z.shadowBias=H.shadowCascadeBias[I];F=H.shadowCascadeNearZ[I];H=H.shadowCascadeFarZ[I];z=z.pointsFrustum;z[0].z=F;z[1].z=F;z[2].z=F;z[3].z=F;z[4].z=H;z[5].z=H;z[6].z=H;z[7].z=H;U[E]=M;E++}else U[E]=A,E++;u=0;for(y=U.length;u<y;u++){A=U[u];A.shadowMap||(G=THREE.LinearFilter,a.shadowMapType===THREE.PCFSoftShadowMap&&(G=THREE.NearestFilter),A.shadowMap=new THREE.WebGLRenderTarget(A.shadowMapWidth,
A.shadowMapHeight,{minFilter:G,magFilter:G,format:THREE.RGBAFormat}),A.shadowMapSize=new THREE.Vector2(A.shadowMapWidth,A.shadowMapHeight),A.shadowMatrix=new THREE.Matrix4);if(!A.shadowCamera){if(A instanceof THREE.SpotLight)A.shadowCamera=new THREE.PerspectiveCamera(A.shadowCameraFov,A.shadowMapWidth/A.shadowMapHeight,A.shadowCameraNear,A.shadowCameraFar);else if(A instanceof THREE.DirectionalLight)A.shadowCamera=new THREE.OrthographicCamera(A.shadowCameraLeft,A.shadowCameraRight,A.shadowCameraTop,
A.shadowCameraBottom,A.shadowCameraNear,A.shadowCameraFar);else{THREE.error("THREE.ShadowMapPlugin: Unsupported light type for shadow",A);continue}c.add(A.shadowCamera);!0===c.autoUpdate&&c.updateMatrixWorld()}A.shadowCameraVisible&&!A.cameraHelper&&(A.cameraHelper=new THREE.CameraHelper(A.shadowCamera),c.add(A.cameraHelper));if(A.isVirtual&&M.originalCamera==v){G=v;E=A.shadowCamera;F=A.pointsFrustum;z=A.pointsWorld;n.set(Infinity,Infinity,Infinity);t.set(-Infinity,-Infinity,-Infinity);for(H=0;8>
H;H++)I=z[H],I.copy(F[H]),I.unproject(G),I.applyMatrix4(E.matrixWorldInverse),I.x<n.x&&(n.x=I.x),I.x>t.x&&(t.x=I.x),I.y<n.y&&(n.y=I.y),I.y>t.y&&(t.y=I.y),I.z<n.z&&(n.z=I.z),I.z>t.z&&(t.z=I.z);E.left=n.x;E.right=t.x;E.top=t.y;E.bottom=n.y;E.updateProjectionMatrix()}E=A.shadowMap;F=A.shadowMatrix;G=A.shadowCamera;G.position.setFromMatrixPosition(A.matrixWorld);r.setFromMatrixPosition(A.target.matrixWorld);G.lookAt(r);G.updateMatrixWorld();G.matrixWorldInverse.getInverse(G.matrixWorld);A.cameraHelper&&
(A.cameraHelper.visible=A.shadowCameraVisible);A.shadowCameraVisible&&A.cameraHelper.update();F.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);F.multiply(G.projectionMatrix);F.multiply(G.matrixWorldInverse);q.multiplyMatrices(G.projectionMatrix,G.matrixWorldInverse);p.setFromMatrix(q);a.setRenderTarget(E);a.clear();s.length=0;e(c,c,G);A=0;for(E=s.length;A<E;A++)z=s[A],F=z.object,z=z.buffer,H=F.material instanceof THREE.MeshFaceMaterial?F.material.materials[0]:F.material,I=void 0!==F.geometry.morphTargets&&
0<F.geometry.morphTargets.length&&H.morphTargets,L=F instanceof THREE.SkinnedMesh&&H.skinning,I=F.customDepthMaterial?F.customDepthMaterial:L?I?l:k:I?h:g,a.setMaterialFaces(H),z instanceof THREE.BufferGeometry?a.renderBufferDirect(G,b,null,I,z,F):a.renderBuffer(G,b,null,I,z,F);A=0;for(E=d.length;A<E;A++)z=d[A],F=z.object,F.visible&&F.castShadow&&(F._modelViewMatrix.multiplyMatrices(G.matrixWorldInverse,F.matrixWorld),a.renderImmediateObject(G,b,null,g,F))}u=a.getClearColor();y=a.getClearAlpha();f.clearColor(u.r,
u.g,u.b,y);f.enable(f.BLEND);a.shadowMapCullFace===THREE.CullFaceFront&&f.cullFace(f.BACK);a.resetGLState()}}};
THREE.SpritePlugin=function(a,b){var c,d,e,f,g,h,k,l,p,q,n,t,r,s,u,v,x;function D(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var w=a.context,y,A,E,G,F=new THREE.Vector3,z=new THREE.Quaternion,I=new THREE.Vector3;this.render=function(U,M){if(0!==b.length){if(void 0===E){var H=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),L=new Uint16Array([0,1,2,0,2,3]);y=w.createBuffer();A=w.createBuffer();w.bindBuffer(w.ARRAY_BUFFER,y);w.bufferData(w.ARRAY_BUFFER,H,w.STATIC_DRAW);w.bindBuffer(w.ELEMENT_ARRAY_BUFFER,
A);w.bufferData(w.ELEMENT_ARRAY_BUFFER,L,w.STATIC_DRAW);var H=w.createProgram(),L=w.createShader(w.VERTEX_SHADER),P=w.createShader(w.FRAGMENT_SHADER);w.shaderSource(L,["precision "+a.getPrecision()+" float;","uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n"));
w.shaderSource(P,["precision "+a.getPrecision()+" float;","uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
w.compileShader(L);w.compileShader(P);w.attachShader(H,L);w.attachShader(H,P);w.linkProgram(H);E=H;v=w.getAttribLocation(E,"position");x=w.getAttribLocation(E,"uv");c=w.getUniformLocation(E,"uvOffset");d=w.getUniformLocation(E,"uvScale");e=w.getUniformLocation(E,"rotation");f=w.getUniformLocation(E,"scale");g=w.getUniformLocation(E,"color");h=w.getUniformLocation(E,"map");k=w.getUniformLocation(E,"opacity");l=w.getUniformLocation(E,"modelViewMatrix");p=w.getUniformLocation(E,"projectionMatrix");q=
w.getUniformLocation(E,"fogType");n=w.getUniformLocation(E,"fogDensity");t=w.getUniformLocation(E,"fogNear");r=w.getUniformLocation(E,"fogFar");s=w.getUniformLocation(E,"fogColor");u=w.getUniformLocation(E,"alphaTest");H=document.createElement("canvas");H.width=8;H.height=8;L=H.getContext("2d");L.fillStyle="white";L.fillRect(0,0,8,8);G=new THREE.Texture(H);G.needsUpdate=!0}w.useProgram(E);w.enableVertexAttribArray(v);w.enableVertexAttribArray(x);w.disable(w.CULL_FACE);w.enable(w.BLEND);w.bindBuffer(w.ARRAY_BUFFER,
y);w.vertexAttribPointer(v,2,w.FLOAT,!1,16,0);w.vertexAttribPointer(x,2,w.FLOAT,!1,16,8);w.bindBuffer(w.ELEMENT_ARRAY_BUFFER,A);w.uniformMatrix4fv(p,!1,M.projectionMatrix.elements);w.activeTexture(w.TEXTURE0);w.uniform1i(h,0);L=H=0;(P=U.fog)?(w.uniform3f(s,P.color.r,P.color.g,P.color.b),P instanceof THREE.Fog?(w.uniform1f(t,P.near),w.uniform1f(r,P.far),w.uniform1i(q,1),L=H=1):P instanceof THREE.FogExp2&&(w.uniform1f(n,P.density),w.uniform1i(q,2),L=H=2)):(w.uniform1i(q,0),L=H=0);for(var P=0,N=b.length;P<
N;P++){var R=b[P];R._modelViewMatrix.multiplyMatrices(M.matrixWorldInverse,R.matrixWorld);R.z=-R._modelViewMatrix.elements[14]}b.sort(D);for(var V=[],P=0,N=b.length;P<N;P++){var R=b[P],J=R.material;w.uniform1f(u,J.alphaTest);w.uniformMatrix4fv(l,!1,R._modelViewMatrix.elements);R.matrixWorld.decompose(F,z,I);V[0]=I.x;V[1]=I.y;R=0;U.fog&&J.fog&&(R=L);H!==R&&(w.uniform1i(q,R),H=R);null!==J.map?(w.uniform2f(c,J.map.offset.x,J.map.offset.y),w.uniform2f(d,J.map.repeat.x,J.map.repeat.y)):(w.uniform2f(c,
0,0),w.uniform2f(d,1,1));w.uniform1f(k,J.opacity);w.uniform3f(g,J.color.r,J.color.g,J.color.b);w.uniform1f(e,J.rotation);w.uniform2fv(f,V);a.state.setBlending(J.blending,J.blendEquation,J.blendSrc,J.blendDst);a.state.setDepthTest(J.depthTest);a.state.setDepthWrite(J.depthWrite);J.map&&J.map.image&&J.map.image.width?a.setTexture(J.map,0):a.setTexture(G,0);w.drawElements(w.TRIANGLES,6,w.UNSIGNED_SHORT,0)}w.enable(w.CULL_FACE);a.resetGLState()}}};
THREE.GeometryUtils={merge:function(a,b,c){THREE.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var d;b instanceof THREE.Mesh&&(b.matrixAutoUpdate&&b.updateMatrix(),d=b.matrix,b=b.geometry);a.merge(b,d,c)},center:function(a){THREE.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center()}};
THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(a,b,c,d){var e=new THREE.ImageLoader;e.crossOrigin=this.crossOrigin;var f=new THREE.Texture(void 0,b);e.load(a,function(a){f.image=a;f.needsUpdate=!0;c&&c(f)},void 0,function(a){d&&d(a)});f.sourceFile=a;return f},loadTextureCube:function(a,b,c,d){var e=new THREE.ImageLoader;e.crossOrigin=this.crossOrigin;var f=new THREE.CubeTexture([],b);f.flipY=!1;var g=0;b=function(b){e.load(a[b],function(a){f.images[b]=a;g+=1;6===g&&(f.needsUpdate=!0,c&&
c(f))},void 0,d)};for(var h=0,k=a.length;h<k;++h)b(h);return f},loadCompressedTexture:function(){THREE.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){THREE.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},getNormalMap:function(a,b){var c=function(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]};b|=1;var d=a.width,e=a.height,f=document.createElement("canvas");
f.width=d;f.height=e;var g=f.getContext("2d");g.drawImage(a,0,0);for(var h=g.getImageData(0,0,d,e).data,k=g.createImageData(d,e),l=k.data,p=0;p<d;p++)for(var q=0;q<e;q++){var n=0>q-1?0:q-1,t=q+1>e-1?e-1:q+1,r=0>p-1?0:p-1,s=p+1>d-1?d-1:p+1,u=[],v=[0,0,h[4*(q*d+p)]/255*b];u.push([-1,0,h[4*(q*d+r)]/255*b]);u.push([-1,-1,h[4*(n*d+r)]/255*b]);u.push([0,-1,h[4*(n*d+p)]/255*b]);u.push([1,-1,h[4*(n*d+s)]/255*b]);u.push([1,0,h[4*(q*d+s)]/255*b]);u.push([1,1,h[4*(t*d+s)]/255*b]);u.push([0,1,h[4*(t*d+p)]/255*
b]);u.push([-1,1,h[4*(t*d+r)]/255*b]);n=[];r=u.length;for(t=0;t<r;t++){var s=u[t],x=u[(t+1)%r],s=[s[0]-v[0],s[1]-v[1],s[2]-v[2]],x=[x[0]-v[0],x[1]-v[1],x[2]-v[2]];n.push(c([s[1]*x[2]-s[2]*x[1],s[2]*x[0]-s[0]*x[2],s[0]*x[1]-s[1]*x[0]]))}u=[0,0,0];for(t=0;t<n.length;t++)u[0]+=n[t][0],u[1]+=n[t][1],u[2]+=n[t][2];u[0]/=n.length;u[1]/=n.length;u[2]/=n.length;v=4*(q*d+p);l[v]=(u[0]+1)/2*255|0;l[v+1]=(u[1]+1)/2*255|0;l[v+2]=255*u[2]|0;l[v+3]=255}g.putImageData(k,0,0);return f},generateDataTexture:function(a,
b,c){var d=a*b,e=new Uint8Array(3*d),f=Math.floor(255*c.r),g=Math.floor(255*c.g);c=Math.floor(255*c.b);for(var h=0;h<d;h++)e[3*h]=f,e[3*h+1]=g,e[3*h+2]=c;a=new THREE.DataTexture(e,a,b,THREE.RGBFormat);a.needsUpdate=!0;return a}};
THREE.SceneUtils={createMultiMaterialObject:function(a,b){for(var c=new THREE.Object3D,d=0,e=b.length;d<e;d++)c.add(new THREE.Mesh(a,b[d]));return c},detach:function(a,b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a)}};
THREE.FontUtils={faces:{},face:"helvetiker",weight:"normal",style:"normal",size:150,divisions:10,getFace:function(){try{return this.faces[this.face][this.weight][this.style]}catch(a){throw"The font "+this.face+" with "+this.weight+" weight and "+this.style+" style is missing.";}},loadFace:function(a){var b=a.familyName.toLowerCase();this.faces[b]=this.faces[b]||{};this.faces[b][a.cssFontWeight]=this.faces[b][a.cssFontWeight]||{};this.faces[b][a.cssFontWeight][a.cssFontStyle]=a;return this.faces[b][a.cssFontWeight][a.cssFontStyle]=
a},drawText:function(a){var b=this.getFace(),c=this.size/b.resolution,d=0,e=String(a).split(""),f=e.length,g=[];for(a=0;a<f;a++){var h=new THREE.Path,h=this.extractGlyphPoints(e[a],b,c,d,h),d=d+h.offset;g.push(h.path)}return{paths:g,offset:d/2}},extractGlyphPoints:function(a,b,c,d,e){var f=[],g,h,k,l,p,q,n,t,r,s,u,v=b.glyphs[a]||b.glyphs["?"];if(v){if(v.o)for(b=v._cachedOutline||(v._cachedOutline=v.o.split(" ")),l=b.length,a=0;a<l;)switch(k=b[a++],k){case "m":k=b[a++]*c+d;p=b[a++]*c;e.moveTo(k,p);
break;case "l":k=b[a++]*c+d;p=b[a++]*c;e.lineTo(k,p);break;case "q":k=b[a++]*c+d;p=b[a++]*c;t=b[a++]*c+d;r=b[a++]*c;e.quadraticCurveTo(t,r,k,p);if(g=f[f.length-1])for(q=g.x,n=g.y,g=1,h=this.divisions;g<=h;g++){var x=g/h;THREE.Shape.Utils.b2(x,q,t,k);THREE.Shape.Utils.b2(x,n,r,p)}break;case "b":if(k=b[a++]*c+d,p=b[a++]*c,t=b[a++]*c+d,r=b[a++]*c,s=b[a++]*c+d,u=b[a++]*c,e.bezierCurveTo(t,r,s,u,k,p),g=f[f.length-1])for(q=g.x,n=g.y,g=1,h=this.divisions;g<=h;g++)x=g/h,THREE.Shape.Utils.b3(x,q,t,s,k),THREE.Shape.Utils.b3(x,
n,r,u,p)}return{offset:v.ha*c,path:e}}}};
THREE.FontUtils.generateShapes=function(a,b){b=b||{};var c=void 0!==b.curveSegments?b.curveSegments:4,d=void 0!==b.font?b.font:"helvetiker",e=void 0!==b.weight?b.weight:"normal",f=void 0!==b.style?b.style:"normal";THREE.FontUtils.size=void 0!==b.size?b.size:100;THREE.FontUtils.divisions=c;THREE.FontUtils.face=d;THREE.FontUtils.weight=e;THREE.FontUtils.style=f;c=THREE.FontUtils.drawText(a).paths;d=[];e=0;for(f=c.length;e<f;e++)Array.prototype.push.apply(d,c[e].toShapes());return d};
(function(a){var b=function(a){for(var b=a.length,e=0,f=b-1,g=0;g<b;f=g++)e+=a[f].x*a[g].y-a[g].x*a[f].y;return.5*e};a.Triangulate=function(a,d){var e=a.length;if(3>e)return null;var f=[],g=[],h=[],k,l,p;if(0<b(a))for(l=0;l<e;l++)g[l]=l;else for(l=0;l<e;l++)g[l]=e-1-l;var q=2*e;for(l=e-1;2<e;){if(0>=q--){THREE.warn("THREE.FontUtils: Warning, unable to triangulate polygon! in Triangulate.process()");break}k=l;e<=k&&(k=0);l=k+1;e<=l&&(l=0);p=l+1;e<=p&&(p=0);var n;a:{var t=n=void 0,r=void 0,s=void 0,
u=void 0,v=void 0,x=void 0,D=void 0,w=void 0,t=a[g[k]].x,r=a[g[k]].y,s=a[g[l]].x,u=a[g[l]].y,v=a[g[p]].x,x=a[g[p]].y;if(1E-10>(s-t)*(x-r)-(u-r)*(v-t))n=!1;else{var y=void 0,A=void 0,E=void 0,G=void 0,F=void 0,z=void 0,I=void 0,U=void 0,M=void 0,H=void 0,M=U=I=w=D=void 0,y=v-s,A=x-u,E=t-v,G=r-x,F=s-t,z=u-r;for(n=0;n<e;n++)if(D=a[g[n]].x,w=a[g[n]].y,!(D===t&&w===r||D===s&&w===u||D===v&&w===x)&&(I=D-t,U=w-r,M=D-s,H=w-u,D-=v,w-=x,M=y*H-A*M,I=F*U-z*I,U=E*w-G*D,-1E-10<=M&&-1E-10<=U&&-1E-10<=I)){n=!1;break a}n=
!0}}if(n){f.push([a[g[k]],a[g[l]],a[g[p]]]);h.push([g[k],g[l],g[p]]);k=l;for(p=l+1;p<e;k++,p++)g[k]=g[p];e--;q=2*e}}return d?h:f};a.Triangulate.area=b;return a})(THREE.FontUtils);self._typeface_js={faces:THREE.FontUtils.faces,loadFace:THREE.FontUtils.loadFace};THREE.typeface_js=self._typeface_js;
THREE.Audio=function(a){THREE.Object3D.call(this);this.type="Audio";this.context=a.context;this.source=this.context.createBufferSource();this.source.onended=this.onEnded.bind(this);this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.panner=this.context.createPanner();this.panner.connect(this.gain);this.autoplay=!1;this.startTime=0;this.isPlaying=!1};THREE.Audio.prototype=Object.create(THREE.Object3D.prototype);THREE.Audio.prototype.constructor=THREE.Audio;
THREE.Audio.prototype.load=function(a){var b=this,c=new XMLHttpRequest;c.open("GET",a,!0);c.responseType="arraybuffer";c.onload=function(a){b.context.decodeAudioData(this.response,function(a){b.source.buffer=a;b.autoplay&&b.play()})};c.send();return this};
THREE.Audio.prototype.play=function(){if(!0===this.isPlaying)THREE.warn("THREE.Audio: Audio is already playing.");else{var a=this.context.createBufferSource();a.buffer=this.source.buffer;a.loop=this.source.loop;a.onended=this.source.onended;a.connect(this.panner);a.start(0,this.startTime);this.isPlaying=!0;this.source=a}};THREE.Audio.prototype.pause=function(){this.source.stop();this.startTime=this.context.currentTime};THREE.Audio.prototype.stop=function(){this.source.stop();this.startTime=0};
THREE.Audio.prototype.onEnded=function(){this.isPlaying=!1};THREE.Audio.prototype.setLoop=function(a){this.source.loop=a};THREE.Audio.prototype.setRefDistance=function(a){this.panner.refDistance=a};THREE.Audio.prototype.setRolloffFactor=function(a){this.panner.rolloffFactor=a};THREE.Audio.prototype.setVolume=function(a){this.gain.gain.value=a};
THREE.Audio.prototype.updateMatrixWorld=function(){var a=new THREE.Vector3;return function(b){THREE.Object3D.prototype.updateMatrixWorld.call(this,b);a.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(a.x,a.y,a.z)}}();THREE.AudioListener=function(){THREE.Object3D.call(this);this.type="AudioListener";this.context=new (window.AudioContext||window.webkitAudioContext)};THREE.AudioListener.prototype=Object.create(THREE.Object3D.prototype);THREE.AudioListener.prototype.constructor=THREE.AudioListener;
THREE.AudioListener.prototype.updateMatrixWorld=function(){var a=new THREE.Vector3,b=new THREE.Quaternion,c=new THREE.Vector3,d=new THREE.Vector3,e=new THREE.Vector3,f=new THREE.Vector3;return function(g){THREE.Object3D.prototype.updateMatrixWorld.call(this,g);g=this.context.listener;var h=this.up;this.matrixWorld.decompose(a,b,c);d.set(0,0,-1).applyQuaternion(b);e.subVectors(a,f);g.setPosition(a.x,a.y,a.z);g.setOrientation(d.x,d.y,d.z,h.x,h.y,h.z);g.setVelocity(e.x,e.y,e.z);f.copy(a)}}();
THREE.Curve=function(){};THREE.Curve.prototype.getPoint=function(a){THREE.warn("THREE.Curve: Warning, getPoint() not implemented!");return null};THREE.Curve.prototype.getPointAt=function(a){a=this.getUtoTmapping(a);return this.getPoint(a)};THREE.Curve.prototype.getPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPoint(b/a));return c};THREE.Curve.prototype.getSpacedPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPointAt(b/a));return c};
THREE.Curve.prototype.getLength=function(){var a=this.getLengths();return a[a.length-1]};THREE.Curve.prototype.getLengths=function(a){a||(a=this.__arcLengthDivisions?this.__arcLengthDivisions:200);if(this.cacheArcLengths&&this.cacheArcLengths.length==a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c,d=this.getPoint(0),e,f=0;b.push(0);for(e=1;e<=a;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),b.push(f),d=c;return this.cacheArcLengths=b};
THREE.Curve.prototype.updateArcLengths=function(){this.needsUpdate=!0;this.getLengths()};THREE.Curve.prototype.getUtoTmapping=function(a,b){var c=this.getLengths(),d=0,e=c.length,f;f=b?b:a*c[e-1];for(var g=0,h=e-1,k;g<=h;)if(d=Math.floor(g+(h-g)/2),k=c[d]-f,0>k)g=d+1;else if(0<k)h=d-1;else{h=d;break}d=h;if(c[d]==f)return d/(e-1);g=c[d];return c=(d+(f-g)/(c[d+1]-g))/(e-1)};THREE.Curve.prototype.getTangent=function(a){var b=a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()};
THREE.Curve.prototype.getTangentAt=function(a){a=this.getUtoTmapping(a);return this.getTangent(a)};
THREE.Curve.Utils={tangentQuadraticBezier:function(a,b,c,d){return 2*(1-a)*(c-b)+2*a*(d-c)},tangentCubicBezier:function(a,b,c,d,e){return-3*b*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a,b,c,d,e){return 6*a*a-6*a+(3*a*a-4*a+1)+(-6*a*a+6*a)+(3*a*a-2*a)},interpolate:function(a,b,c,d,e){a=.5*(c-a);d=.5*(d-b);var f=e*e;return(2*b-2*c+a+d)*e*f+(-3*b+3*c-2*a-d)*f+a*e+b}};
THREE.Curve.create=function(a,b){a.prototype=Object.create(THREE.Curve.prototype);a.prototype.constructor=a;a.prototype.getPoint=b;return a};THREE.CurvePath=function(){this.curves=[];this.bends=[];this.autoClose=!1};THREE.CurvePath.prototype=Object.create(THREE.Curve.prototype);THREE.CurvePath.prototype.constructor=THREE.CurvePath;THREE.CurvePath.prototype.add=function(a){this.curves.push(a)};THREE.CurvePath.prototype.checkConnection=function(){};
THREE.CurvePath.prototype.closePath=function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new THREE.LineCurve(b,a))};THREE.CurvePath.prototype.getPoint=function(a){var b=a*this.getLength(),c=this.getCurveLengths();for(a=0;a<c.length;){if(c[a]>=b)return b=c[a]-b,a=this.curves[a],b=1-b/a.getLength(),a.getPointAt(b);a++}return null};THREE.CurvePath.prototype.getLength=function(){var a=this.getCurveLengths();return a[a.length-1]};
THREE.CurvePath.prototype.getCurveLengths=function(){if(this.cacheLengths&&this.cacheLengths.length==this.curves.length)return this.cacheLengths;var a=[],b=0,c,d=this.curves.length;for(c=0;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a};
THREE.CurvePath.prototype.getBoundingBox=function(){var a=this.getPoints(),b,c,d,e,f,g;b=c=Number.NEGATIVE_INFINITY;e=f=Number.POSITIVE_INFINITY;var h,k,l,p,q=a[0]instanceof THREE.Vector3;p=q?new THREE.Vector3:new THREE.Vector2;k=0;for(l=a.length;k<l;k++)h=a[k],h.x>b?b=h.x:h.x<e&&(e=h.x),h.y>c?c=h.y:h.y<f&&(f=h.y),q&&(h.z>d?d=h.z:h.z<g&&(g=h.z)),p.add(h);a={minX:e,minY:f,maxX:b,maxY:c};q&&(a.maxZ=d,a.minZ=g);return a};
THREE.CurvePath.prototype.createPointsGeometry=function(a){a=this.getPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createSpacedPointsGeometry=function(a){a=this.getSpacedPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createGeometry=function(a){for(var b=new THREE.Geometry,c=0;c<a.length;c++)b.vertices.push(new THREE.Vector3(a[c].x,a[c].y,a[c].z||0));return b};THREE.CurvePath.prototype.addWrapPath=function(a){this.bends.push(a)};
THREE.CurvePath.prototype.getTransformedPoints=function(a,b){var c=this.getPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};THREE.CurvePath.prototype.getTransformedSpacedPoints=function(a,b){var c=this.getSpacedPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};
THREE.CurvePath.prototype.getWrapPoints=function(a,b){var c=this.getBoundingBox(),d,e,f,g,h,k;d=0;for(e=a.length;d<e;d++)f=a[d],g=f.x,h=f.y,k=g/c.maxX,k=b.getUtoTmapping(k,g),g=b.getPoint(k),k=b.getTangent(k),k.set(-k.y,k.x).multiplyScalar(h),f.x=g.x+k.x,f.y=g.y+k.y;return a};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);THREE.Gyroscope.prototype.constructor=THREE.Gyroscope;
THREE.Gyroscope.prototype.updateMatrixWorld=function(){var a=new THREE.Vector3,b=new THREE.Quaternion,c=new THREE.Vector3,d=new THREE.Vector3,e=new THREE.Quaternion,f=new THREE.Vector3;return function(g){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||g)this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(d,e,f),this.matrix.decompose(a,b,c),this.matrixWorld.compose(d,b,f)):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=
!1,g=!0;for(var h=0,k=this.children.length;h<k;h++)this.children[h].updateMatrixWorld(g)}}();THREE.Path=function(a){THREE.CurvePath.call(this);this.actions=[];a&&this.fromPoints(a)};THREE.Path.prototype=Object.create(THREE.CurvePath.prototype);THREE.Path.prototype.constructor=THREE.Path;THREE.PathActions={MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",CSPLINE_THRU:"splineThru",ARC:"arc",ELLIPSE:"ellipse"};
THREE.Path.prototype.fromPoints=function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)};THREE.Path.prototype.moveTo=function(a,b){var c=Array.prototype.slice.call(arguments);this.actions.push({action:THREE.PathActions.MOVE_TO,args:c})};
THREE.Path.prototype.lineTo=function(a,b){var c=Array.prototype.slice.call(arguments),d=this.actions[this.actions.length-1].args,d=new THREE.LineCurve(new THREE.Vector2(d[d.length-2],d[d.length-1]),new THREE.Vector2(a,b));this.curves.push(d);this.actions.push({action:THREE.PathActions.LINE_TO,args:c})};
THREE.Path.prototype.quadraticCurveTo=function(a,b,c,d){var e=Array.prototype.slice.call(arguments),f=this.actions[this.actions.length-1].args,f=new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length-2],f[f.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d));this.curves.push(f);this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO,args:e})};
THREE.Path.prototype.bezierCurveTo=function(a,b,c,d,e,f){var g=Array.prototype.slice.call(arguments),h=this.actions[this.actions.length-1].args,h=new THREE.CubicBezierCurve(new THREE.Vector2(h[h.length-2],h[h.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d),new THREE.Vector2(e,f));this.curves.push(h);this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO,args:g})};
THREE.Path.prototype.splineThru=function(a){var b=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,a);c=new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({action:THREE.PathActions.CSPLINE_THRU,args:b})};THREE.Path.prototype.arc=function(a,b,c,d,e,f){var g=this.actions[this.actions.length-1].args;this.absarc(a+g[g.length-2],b+g[g.length-1],c,d,e,f)};
THREE.Path.prototype.absarc=function(a,b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)};THREE.Path.prototype.ellipse=function(a,b,c,d,e,f,g){var h=this.actions[this.actions.length-1].args;this.absellipse(a+h[h.length-2],b+h[h.length-1],c,d,e,f,g)};THREE.Path.prototype.absellipse=function(a,b,c,d,e,f,g){var h=Array.prototype.slice.call(arguments),k=new THREE.EllipseCurve(a,b,c,d,e,f,g);this.curves.push(k);k=k.getPoint(1);h.push(k.x);h.push(k.y);this.actions.push({action:THREE.PathActions.ELLIPSE,args:h})};
THREE.Path.prototype.getSpacedPoints=function(a,b){a||(a=40);for(var c=[],d=0;d<a;d++)c.push(this.getPoint(d/a));return c};
THREE.Path.prototype.getPoints=function(a,b){if(this.useSpacedPoints)return console.log("tata"),this.getSpacedPoints(a,b);a=a||12;var c=[],d,e,f,g,h,k,l,p,q,n,t,r,s;d=0;for(e=this.actions.length;d<e;d++)switch(f=this.actions[d],g=f.action,f=f.args,g){case THREE.PathActions.MOVE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.LINE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.QUADRATIC_CURVE_TO:h=f[2];k=f[3];q=f[0];n=f[1];0<c.length?(g=c[c.length-1],t=g.x,
r=g.y):(g=this.actions[d-1].args,t=g[g.length-2],r=g[g.length-1]);for(f=1;f<=a;f++)s=f/a,g=THREE.Shape.Utils.b2(s,t,q,h),s=THREE.Shape.Utils.b2(s,r,n,k),c.push(new THREE.Vector2(g,s));break;case THREE.PathActions.BEZIER_CURVE_TO:h=f[4];k=f[5];q=f[0];n=f[1];l=f[2];p=f[3];0<c.length?(g=c[c.length-1],t=g.x,r=g.y):(g=this.actions[d-1].args,t=g[g.length-2],r=g[g.length-1]);for(f=1;f<=a;f++)s=f/a,g=THREE.Shape.Utils.b3(s,t,q,l,h),s=THREE.Shape.Utils.b3(s,r,n,p,k),c.push(new THREE.Vector2(g,s));break;case THREE.PathActions.CSPLINE_THRU:g=
this.actions[d-1].args;s=[new THREE.Vector2(g[g.length-2],g[g.length-1])];g=a*f[0].length;s=s.concat(f[0]);s=new THREE.SplineCurve(s);for(f=1;f<=g;f++)c.push(s.getPointAt(f/g));break;case THREE.PathActions.ARC:h=f[0];k=f[1];n=f[2];l=f[3];g=f[4];q=!!f[5];t=g-l;r=2*a;for(f=1;f<=r;f++)s=f/r,q||(s=1-s),s=l+s*t,g=h+n*Math.cos(s),s=k+n*Math.sin(s),c.push(new THREE.Vector2(g,s));break;case THREE.PathActions.ELLIPSE:for(h=f[0],k=f[1],n=f[2],p=f[3],l=f[4],g=f[5],q=!!f[6],t=g-l,r=2*a,f=1;f<=r;f++)s=f/r,q||
(s=1-s),s=l+s*t,g=h+n*Math.cos(s),s=k+p*Math.sin(s),c.push(new THREE.Vector2(g,s))}d=c[c.length-1];1E-10>Math.abs(d.x-c[0].x)&&1E-10>Math.abs(d.y-c[0].y)&&c.splice(c.length-1,1);b&&c.push(c[0]);return c};
THREE.Path.prototype.toShapes=function(a,b){function c(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c],f=new THREE.Shape;f.actions=e.actions;f.curves=e.curves;b.push(f)}return b}function d(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],k=h.x-g.x,n=h.y-g.y;if(1E-10<Math.abs(n)){if(0>n&&(g=b[f],k=-k,h=b[e],n=-n),!(a.y<g.y||a.y>h.y))if(a.y==g.y){if(a.x==g.x)return!0}else{e=n*(a.x-g.x)-k*(a.y-g.y);if(0==e)return!0;0>e||(d=!d)}}else if(a.y==g.y&&(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=
h.x))return!0}return d}var e=function(a){var b,c,d,e,f=[],g=new THREE.Path;b=0;for(c=a.length;b<c;b++)d=a[b],e=d.args,d=d.action,d==THREE.PathActions.MOVE_TO&&0!=g.actions.length&&(f.push(g),g=new THREE.Path),g[d].apply(g,e);0!=g.actions.length&&f.push(g);return f}(this.actions);if(0==e.length)return[];if(!0===b)return c(e);var f,g,h,k=[];if(1==e.length)return g=e[0],h=new THREE.Shape,h.actions=g.actions,h.curves=g.curves,k.push(h),k;var l=!THREE.Shape.Utils.isClockWise(e[0].getPoints()),l=a?!l:l;
h=[];var p=[],q=[],n=0,t;p[n]=void 0;q[n]=[];var r,s;r=0;for(s=e.length;r<s;r++)g=e[r],t=g.getPoints(),f=THREE.Shape.Utils.isClockWise(t),(f=a?!f:f)?(!l&&p[n]&&n++,p[n]={s:new THREE.Shape,p:t},p[n].s.actions=g.actions,p[n].s.curves=g.curves,l&&n++,q[n]=[]):q[n].push({h:g,p:t[0]});if(!p[0])return c(e);if(1<p.length){r=!1;s=[];g=0;for(e=p.length;g<e;g++)h[g]=[];g=0;for(e=p.length;g<e;g++)for(f=q[g],l=0;l<f.length;l++){n=f[l];t=!0;for(var u=0;u<p.length;u++)d(n.p,p[u].p)&&(g!=u&&s.push({froms:g,tos:u,
hole:l}),t?(t=!1,h[u].push(n)):r=!0);t&&h[g].push(n)}0<s.length&&(r||(q=h))}r=0;for(s=p.length;r<s;r++)for(h=p[r].s,k.push(h),g=q[r],e=0,f=g.length;e<f;e++)h.holes.push(g[e].h);return k};THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};THREE.Shape.prototype=Object.create(THREE.Path.prototype);THREE.Shape.prototype.constructor=THREE.Shape;THREE.Shape.prototype.extrude=function(a){return new THREE.ExtrudeGeometry(this,a)};
THREE.Shape.prototype.makeGeometry=function(a){return new THREE.ShapeGeometry(this,a)};THREE.Shape.prototype.getPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedPoints(a,this.bends);return d};THREE.Shape.prototype.getSpacedPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedSpacedPoints(a,this.bends);return d};
THREE.Shape.prototype.extractAllPoints=function(a){return{shape:this.getTransformedPoints(a),holes:this.getPointsHoles(a)}};THREE.Shape.prototype.extractPoints=function(a){return this.useSpacedPoints?this.extractAllSpacedPoints(a):this.extractAllPoints(a)};THREE.Shape.prototype.extractAllSpacedPoints=function(a){return{shape:this.getTransformedSpacedPoints(a),holes:this.getSpacedPointsHoles(a)}};
THREE.Shape.Utils={triangulateShape:function(a,b){function c(a,b,c){return a.x!=b.x?a.x<b.x?a.x<=c.x&&c.x<=b.x:b.x<=c.x&&c.x<=a.x:a.y<b.y?a.y<=c.y&&c.y<=b.y:b.y<=c.y&&c.y<=a.y}function d(a,b,d,e,f){var g=b.x-a.x,h=b.y-a.y,k=e.x-d.x,l=e.y-d.y,p=a.x-d.x,q=a.y-d.y,E=h*k-g*l,G=h*p-g*q;if(1E-10<Math.abs(E)){if(0<E){if(0>G||G>E)return[];k=l*p-k*q;if(0>k||k>E)return[]}else{if(0<G||G<E)return[];k=l*p-k*q;if(0<k||k<E)return[]}if(0==k)return!f||0!=G&&G!=E?[a]:[];if(k==E)return!f||0!=G&&G!=E?[b]:[];if(0==G)return[d];
if(G==E)return[e];f=k/E;return[{x:a.x+f*g,y:a.y+f*h}]}if(0!=G||l*p!=k*q)return[];h=0==g&&0==h;k=0==k&&0==l;if(h&&k)return a.x!=d.x||a.y!=d.y?[]:[a];if(h)return c(d,e,a)?[a]:[];if(k)return c(a,b,d)?[d]:[];0!=g?(a.x<b.x?(g=a,k=a.x,h=b,a=b.x):(g=b,k=b.x,h=a,a=a.x),d.x<e.x?(b=d,E=d.x,l=e,d=e.x):(b=e,E=e.x,l=d,d=d.x)):(a.y<b.y?(g=a,k=a.y,h=b,a=b.y):(g=b,k=b.y,h=a,a=a.y),d.y<e.y?(b=d,E=d.y,l=e,d=e.y):(b=e,E=e.y,l=d,d=d.y));return k<=E?a<E?[]:a==E?f?[]:[b]:a<=d?[b,h]:[b,l]:k>d?[]:k==d?f?[]:[g]:a<=d?[g,h]:
[g,l]}function e(a,b,c,d){var e=b.x-a.x,f=b.y-a.y;b=c.x-a.x;c=c.y-a.y;var g=d.x-a.x;d=d.y-a.y;a=e*c-f*b;e=e*d-f*g;return 1E-10<Math.abs(a)?(b=g*c-d*b,0<a?0<=e&&0<=b:0<=e||0<=b):0<e}var f,g,h,k,l,p={};h=a.concat();f=0;for(g=b.length;f<g;f++)Array.prototype.push.apply(h,b[f]);f=0;for(g=h.length;f<g;f++)l=h[f].x+":"+h[f].y,void 0!==p[l]&&THREE.warn("THREE.Shape: Duplicate point",l),p[l]=f;f=function(a,b){function c(a,b){var d=h.length-1,f=a-1;0>f&&(f=d);var g=a+1;g>d&&(g=0);d=e(h[a],h[f],h[g],k[b]);
if(!d)return!1;d=k.length-1;f=b-1;0>f&&(f=d);g=b+1;g>d&&(g=0);return(d=e(k[b],k[f],k[g],h[a]))?!0:!1}function f(a,b){var c,e;for(c=0;c<h.length;c++)if(e=c+1,e%=h.length,e=d(a,b,h[c],h[e],!0),0<e.length)return!0;return!1}function g(a,c){var e,f,h,k;for(e=0;e<l.length;e++)for(f=b[l[e]],h=0;h<f.length;h++)if(k=h+1,k%=f.length,k=d(a,c,f[h],f[k],!0),0<k.length)return!0;return!1}var h=a.concat(),k,l=[],p,q,A,E,G,F=[],z,I,U,M=0;for(p=b.length;M<p;M++)l.push(M);z=0;for(var H=2*l.length;0<l.length;){H--;if(0>
H){console.log("Infinite Loop! Holes left:"+l.length+", Probably Hole outside Shape!");break}for(q=z;q<h.length;q++){A=h[q];p=-1;for(M=0;M<l.length;M++)if(E=l[M],G=A.x+":"+A.y+":"+E,void 0===F[G]){k=b[E];for(I=0;I<k.length;I++)if(E=k[I],c(q,I)&&!f(A,E)&&!g(A,E)){p=I;l.splice(M,1);z=h.slice(0,q+1);E=h.slice(q);I=k.slice(p);U=k.slice(0,p+1);h=z.concat(I).concat(U).concat(E);z=q;break}if(0<=p)break;F[G]=!0}if(0<=p)break}}return h}(a,b);var q=THREE.FontUtils.Triangulate(f,!1);f=0;for(g=q.length;f<g;f++)for(k=
q[f],h=0;3>h;h++)l=k[h].x+":"+k[h].y,l=p[l],void 0!==l&&(k[h]=l);return q.concat()},isClockWise:function(a){return 0>THREE.FontUtils.Triangulate.area(a)},b2p0:function(a,b){var c=1-a;return c*c*b},b2p1:function(a,b){return 2*(1-a)*a*b},b2p2:function(a,b){return a*a*b},b2:function(a,b,c,d){return this.b2p0(a,b)+this.b2p1(a,c)+this.b2p2(a,d)},b3p0:function(a,b){var c=1-a;return c*c*c*b},b3p1:function(a,b){var c=1-a;return 3*c*c*a*b},b3p2:function(a,b){return 3*(1-a)*a*a*b},b3p3:function(a,b){return a*
a*a*b},b3:function(a,b,c,d,e){return this.b3p0(a,b)+this.b3p1(a,c)+this.b3p2(a,d)+this.b3p3(a,e)}};THREE.LineCurve=function(a,b){this.v1=a;this.v2=b};THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.LineCurve.prototype.constructor=THREE.LineCurve;THREE.LineCurve.prototype.getPoint=function(a){var b=this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b};THREE.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)};
THREE.LineCurve.prototype.getTangent=function(a){return this.v2.clone().sub(this.v1).normalize()};THREE.QuadraticBezierCurve=function(a,b,c){this.v0=a;this.v1=b;this.v2=c};THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve;
THREE.QuadraticBezierCurve.prototype.getPoint=function(a){var b=new THREE.Vector2;b.x=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);b.y=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);return b};THREE.QuadraticBezierCurve.prototype.getTangent=function(a){var b=new THREE.Vector2;b.x=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.x,this.v1.x,this.v2.x);b.y=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.y,this.v1.y,this.v2.y);return b.normalize()};
THREE.CubicBezierCurve=function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d};THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve;THREE.CubicBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);return new THREE.Vector2(b,a)};
THREE.CubicBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);b=new THREE.Vector2(b,a);b.normalize();return b};THREE.SplineCurve=function(a){this.points=void 0==a?[]:a};THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.constructor=THREE.SplineCurve;
THREE.SplineCurve.prototype.getPoint=function(a){var b=this.points;a*=b.length-1;var c=Math.floor(a);a-=c;var d=b[0==c?c:c-1],e=b[c],f=b[c>b.length-2?b.length-1:c+1],b=b[c>b.length-3?b.length-1:c+2],c=new THREE.Vector2;c.x=THREE.Curve.Utils.interpolate(d.x,e.x,f.x,b.x,a);c.y=THREE.Curve.Utils.interpolate(d.y,e.y,f.y,b.y,a);return c};THREE.EllipseCurve=function(a,b,c,d,e,f,g){this.aX=a;this.aY=b;this.xRadius=c;this.yRadius=d;this.aStartAngle=e;this.aEndAngle=f;this.aClockwise=g};
THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype);THREE.EllipseCurve.prototype.constructor=THREE.EllipseCurve;THREE.EllipseCurve.prototype.getPoint=function(a){var b=this.aEndAngle-this.aStartAngle;0>b&&(b+=2*Math.PI);b>2*Math.PI&&(b-=2*Math.PI);a=!0===this.aClockwise?this.aEndAngle+(1-a)*(2*Math.PI-b):this.aStartAngle+a*b;b=new THREE.Vector2;b.x=this.aX+this.xRadius*Math.cos(a);b.y=this.aY+this.yRadius*Math.sin(a);return b};
THREE.ArcCurve=function(a,b,c,d,e,f){THREE.EllipseCurve.call(this,a,b,c,c,d,e,f)};THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype);THREE.ArcCurve.prototype.constructor=THREE.ArcCurve;THREE.LineCurve3=THREE.Curve.create(function(a,b){this.v1=a;this.v2=b},function(a){var b=new THREE.Vector3;b.subVectors(this.v2,this.v1);b.multiplyScalar(a);b.add(this.v1);return b});
THREE.QuadraticBezierCurve3=THREE.Curve.create(function(a,b,c){this.v0=a;this.v1=b;this.v2=c},function(a){var b=new THREE.Vector3;b.x=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);b.y=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);b.z=THREE.Shape.Utils.b2(a,this.v0.z,this.v1.z,this.v2.z);return b});
THREE.CubicBezierCurve3=THREE.Curve.create(function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d},function(a){var b=new THREE.Vector3;b.x=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);b.y=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);b.z=THREE.Shape.Utils.b3(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z);return b});
THREE.SplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=this.points;a*=b.length-1;var c=Math.floor(a);a-=c;var d=b[0==c?c:c-1],e=b[c],f=b[c>b.length-2?b.length-1:c+1],b=b[c>b.length-3?b.length-1:c+2],c=new THREE.Vector3;c.x=THREE.Curve.Utils.interpolate(d.x,e.x,f.x,b.x,a);c.y=THREE.Curve.Utils.interpolate(d.y,e.y,f.y,b.y,a);c.z=THREE.Curve.Utils.interpolate(d.z,e.z,f.z,b.z,a);return c});
THREE.ClosedSplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=this.points;a*=b.length-0;var c=Math.floor(a);a-=c;var c=c+(0<c?0:(Math.floor(Math.abs(c)/b.length)+1)*b.length),d=b[(c-1)%b.length],e=b[c%b.length],f=b[(c+1)%b.length],b=b[(c+2)%b.length],c=new THREE.Vector3;c.x=THREE.Curve.Utils.interpolate(d.x,e.x,f.x,b.x,a);c.y=THREE.Curve.Utils.interpolate(d.y,e.y,f.y,b.y,a);c.z=THREE.Curve.Utils.interpolate(d.z,e.z,f.z,b.z,a);return c});
THREE.AnimationHandler={LINEAR:0,CATMULLROM:1,CATMULLROM_FORWARD:2,add:function(){THREE.warn("THREE.AnimationHandler.add() has been deprecated.")},get:function(){THREE.warn("THREE.AnimationHandler.get() has been deprecated.")},remove:function(){THREE.warn("THREE.AnimationHandler.remove() has been deprecated.")},animations:[],init:function(a){if(!0===a.initialized)return a;for(var b=0;b<a.hierarchy.length;b++){for(var c=0;c<a.hierarchy[b].keys.length;c++)if(0>a.hierarchy[b].keys[c].time&&(a.hierarchy[b].keys[c].time=
0),void 0!==a.hierarchy[b].keys[c].rot&&!(a.hierarchy[b].keys[c].rot instanceof THREE.Quaternion)){var d=a.hierarchy[b].keys[c].rot;a.hierarchy[b].keys[c].rot=(new THREE.Quaternion).fromArray(d)}if(a.hierarchy[b].keys.length&&void 0!==a.hierarchy[b].keys[0].morphTargets){d={};for(c=0;c<a.hierarchy[b].keys.length;c++)for(var e=0;e<a.hierarchy[b].keys[c].morphTargets.length;e++){var f=a.hierarchy[b].keys[c].morphTargets[e];d[f]=-1}a.hierarchy[b].usedMorphTargets=d;for(c=0;c<a.hierarchy[b].keys.length;c++){var g=
{};for(f in d){for(e=0;e<a.hierarchy[b].keys[c].morphTargets.length;e++)if(a.hierarchy[b].keys[c].morphTargets[e]===f){g[f]=a.hierarchy[b].keys[c].morphTargetsInfluences[e];break}e===a.hierarchy[b].keys[c].morphTargets.length&&(g[f]=0)}a.hierarchy[b].keys[c].morphTargetsInfluences=g}}for(c=1;c<a.hierarchy[b].keys.length;c++)a.hierarchy[b].keys[c].time===a.hierarchy[b].keys[c-1].time&&(a.hierarchy[b].keys.splice(c,1),c--);for(c=0;c<a.hierarchy[b].keys.length;c++)a.hierarchy[b].keys[c].index=c}a.initialized=
!0;return a},parse:function(a){var b=function(a,c){c.push(a);for(var d=0;d<a.children.length;d++)b(a.children[d],c)},c=[];if(a instanceof THREE.SkinnedMesh)for(var d=0;d<a.skeleton.bones.length;d++)c.push(a.skeleton.bones[d]);else b(a,c);return c},play:function(a){-1===this.animations.indexOf(a)&&this.animations.push(a)},stop:function(a){a=this.animations.indexOf(a);-1!==a&&this.animations.splice(a,1)},update:function(a){for(var b=0;b<this.animations.length;b++)this.animations[b].resetBlendWeights();
for(b=0;b<this.animations.length;b++)this.animations[b].update(a)}};THREE.Animation=function(a,b){this.root=a;this.data=THREE.AnimationHandler.init(b);this.hierarchy=THREE.AnimationHandler.parse(a);this.currentTime=0;this.timeScale=1;this.isPlaying=!1;this.loop=!0;this.weight=0;this.interpolationType=THREE.AnimationHandler.LINEAR};
THREE.Animation.prototype={constructor:THREE.Animation,keyTypes:["pos","rot","scl"],play:function(a,b){this.currentTime=void 0!==a?a:0;this.weight=void 0!==b?b:1;this.isPlaying=!0;this.reset();THREE.AnimationHandler.play(this)},stop:function(){this.isPlaying=!1;THREE.AnimationHandler.stop(this)},reset:function(){for(var a=0,b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a];void 0===c.animationCache&&(c.animationCache={animations:{},blending:{positionWeight:0,quaternionWeight:0,scaleWeight:0}});
var d=this.data.name,e=c.animationCache.animations,f=e[d];void 0===f&&(f={prevKey:{pos:0,rot:0,scl:0},nextKey:{pos:0,rot:0,scl:0},originalMatrix:c.matrix},e[d]=f);for(c=0;3>c;c++){for(var d=this.keyTypes[c],e=this.data.hierarchy[a].keys[0],g=this.getNextKeyWith(d,a,1);g.time<this.currentTime&&g.index>e.index;)e=g,g=this.getNextKeyWith(d,a,g.index+1);f.prevKey[d]=e;f.nextKey[d]=g}}},resetBlendWeights:function(){for(var a=0,b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a].animationCache;void 0!==
c&&(c=c.blending,c.positionWeight=0,c.quaternionWeight=0,c.scaleWeight=0)}},update:function(){var a=[],b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Quaternion,e=function(a,b){var c=[],d=[],e,q,n,t,r,s;e=(a.length-1)*b;q=Math.floor(e);e-=q;c[0]=0===q?q:q-1;c[1]=q;c[2]=q>a.length-2?q:q+1;c[3]=q>a.length-3?q:q+2;q=a[c[0]];t=a[c[1]];r=a[c[2]];s=a[c[3]];c=e*e;n=e*c;d[0]=f(q[0],t[0],r[0],s[0],e,c,n);d[1]=f(q[1],t[1],r[1],s[1],e,c,n);d[2]=f(q[2],t[2],r[2],s[2],e,c,n);return d},f=function(a,b,c,d,
e,f,n){a=.5*(c-a);d=.5*(d-b);return(2*(b-c)+a+d)*n+(-3*(b-c)-2*a-d)*f+a*e+b};return function(f){if(!1!==this.isPlaying&&(this.currentTime+=f*this.timeScale,0!==this.weight)){f=this.data.length;if(this.currentTime>f||0>this.currentTime)this.loop?(this.currentTime%=f,0>this.currentTime&&(this.currentTime+=f),this.reset()):this.stop();f=0;for(var h=this.hierarchy.length;f<h;f++)for(var k=this.hierarchy[f],l=k.animationCache.animations[this.data.name],p=k.animationCache.blending,q=0;3>q;q++){var n=this.keyTypes[q],
t=l.prevKey[n],r=l.nextKey[n];if(0<this.timeScale&&r.time<=this.currentTime||0>this.timeScale&&t.time>=this.currentTime){t=this.data.hierarchy[f].keys[0];for(r=this.getNextKeyWith(n,f,1);r.time<this.currentTime&&r.index>t.index;)t=r,r=this.getNextKeyWith(n,f,r.index+1);l.prevKey[n]=t;l.nextKey[n]=r}var s=(this.currentTime-t.time)/(r.time-t.time),u=t[n],v=r[n];0>s&&(s=0);1<s&&(s=1);if("pos"===n)if(this.interpolationType===THREE.AnimationHandler.LINEAR)c.x=u[0]+(v[0]-u[0])*s,c.y=u[1]+(v[1]-u[1])*s,
c.z=u[2]+(v[2]-u[2])*s,t=this.weight/(this.weight+p.positionWeight),k.position.lerp(c,t),p.positionWeight+=this.weight;else{if(this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD)a[0]=this.getPrevKeyWith("pos",f,t.index-1).pos,a[1]=u,a[2]=v,a[3]=this.getNextKeyWith("pos",f,r.index+1).pos,s=.33*s+.33,r=e(a,s),t=this.weight/(this.weight+p.positionWeight),p.positionWeight+=this.weight,n=k.position,n.x+=(r[0]-n.x)*t,n.y+=(r[1]-
n.y)*t,n.z+=(r[2]-n.z)*t,this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD&&(s=e(a,1.01*s),b.set(s[0],s[1],s[2]),b.sub(n),b.y=0,b.normalize(),s=Math.atan2(b.x,b.z),k.rotation.set(0,s,0))}else"rot"===n?(THREE.Quaternion.slerp(u,v,d,s),0===p.quaternionWeight?(k.quaternion.copy(d),p.quaternionWeight=this.weight):(t=this.weight/(this.weight+p.quaternionWeight),THREE.Quaternion.slerp(k.quaternion,d,k.quaternion,t),p.quaternionWeight+=this.weight)):"scl"===n&&(c.x=u[0]+(v[0]-u[0])*s,c.y=
u[1]+(v[1]-u[1])*s,c.z=u[2]+(v[2]-u[2])*s,t=this.weight/(this.weight+p.scaleWeight),k.scale.lerp(c,t),p.scaleWeight+=this.weight)}return!0}}}(),getNextKeyWith:function(a,b,c){var d=this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?c<d.length-1?c:d.length-1:c%d.length;c<d.length;c++)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[0]},getPrevKeyWith:function(a,b,c){var d=
this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?0<c?c:0:0<=c?c:c+d.length;0<=c;c--)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[d.length-1]}};
THREE.KeyFrameAnimation=function(a){this.root=a.node;this.data=THREE.AnimationHandler.init(a);this.hierarchy=THREE.AnimationHandler.parse(this.root);this.currentTime=0;this.timeScale=.001;this.isPlaying=!1;this.loop=this.isPaused=!0;a=0;for(var b=this.hierarchy.length;a<b;a++){var c=this.data.hierarchy[a].sids,d=this.hierarchy[a];if(this.data.hierarchy[a].keys.length&&c){for(var e=0;e<c.length;e++){var f=c[e],g=this.getNextKeyWith(f,a,0);g&&g.apply(f)}d.matrixAutoUpdate=!1;this.data.hierarchy[a].node.updateMatrix();
d.matrixWorldNeedsUpdate=!0}}};
THREE.KeyFrameAnimation.prototype={constructor:THREE.KeyFrameAnimation,play:function(a){this.currentTime=void 0!==a?a:0;if(!1===this.isPlaying){this.isPlaying=!0;var b=this.hierarchy.length,c,d;for(a=0;a<b;a++)c=this.hierarchy[a],d=this.data.hierarchy[a],void 0===d.animationCache&&(d.animationCache={},d.animationCache.prevKey=null,d.animationCache.nextKey=null,d.animationCache.originalMatrix=c.matrix),c=this.data.hierarchy[a].keys,c.length&&(d.animationCache.prevKey=c[0],d.animationCache.nextKey=
c[1],this.startTime=Math.min(c[0].time,this.startTime),this.endTime=Math.max(c[c.length-1].time,this.endTime));this.update(0)}this.isPaused=!1;THREE.AnimationHandler.play(this)},stop:function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.stop(this);for(var a=0;a<this.data.hierarchy.length;a++){var b=this.hierarchy[a],c=this.data.hierarchy[a];if(void 0!==c.animationCache){var d=c.animationCache.originalMatrix;d.copy(b.matrix);b.matrix=d;delete c.animationCache}}},update:function(a){if(!1!==
this.isPlaying){this.currentTime+=a*this.timeScale;a=this.data.length;!0===this.loop&&this.currentTime>a&&(this.currentTime%=a);this.currentTime=Math.min(this.currentTime,a);a=0;for(var b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a],d=this.data.hierarchy[a],e=d.keys,d=d.animationCache;if(e.length){var f=d.prevKey,g=d.nextKey;if(g.time<=this.currentTime){for(;g.time<this.currentTime&&g.index>f.index;)f=g,g=e[f.index+1];d.prevKey=f;d.nextKey=g}g.time>=this.currentTime?f.interpolate(g,this.currentTime):
f.interpolate(g,g.time);this.data.hierarchy[a].node.updateMatrix();c.matrixWorldNeedsUpdate=!0}}}},getNextKeyWith:function(a,b,c){b=this.data.hierarchy[b].keys;for(c%=b.length;c<b.length;c++)if(b[c].hasTarget(a))return b[c];return b[0]},getPrevKeyWith:function(a,b,c){b=this.data.hierarchy[b].keys;for(c=0<=c?c:c+b.length;0<=c;c--)if(b[c].hasTarget(a))return b[c];return b[b.length-1]}};
THREE.MorphAnimation=function(a){this.mesh=a;this.frames=a.morphTargetInfluences.length;this.currentTime=0;this.duration=1E3;this.loop=!0;this.currentFrame=this.lastFrame=0;this.isPlaying=!1};
THREE.MorphAnimation.prototype={constructor:THREE.MorphAnimation,play:function(){this.isPlaying=!0},pause:function(){this.isPlaying=!1},update:function(a){if(!1!==this.isPlaying){this.currentTime+=a;!0===this.loop&&this.currentTime>this.duration&&(this.currentTime%=this.duration);this.currentTime=Math.min(this.currentTime,this.duration);a=this.duration/this.frames;var b=Math.floor(this.currentTime/a),c=this.mesh.morphTargetInfluences;b!=this.currentFrame&&(c[this.lastFrame]=0,c[this.currentFrame]=
1,c[b]=0,this.lastFrame=this.currentFrame,this.currentFrame=b);c[b]=this.currentTime%a/a;c[this.lastFrame]=1-c[b]}}};
THREE.BoxGeometry=function(a,b,c,d,e,f){function g(a,b,c,d,e,f,g,s){var u,v=h.widthSegments,x=h.heightSegments,D=e/2,w=f/2,y=h.vertices.length;if("x"===a&&"y"===b||"y"===a&&"x"===b)u="z";else if("x"===a&&"z"===b||"z"===a&&"x"===b)u="y",x=h.depthSegments;else if("z"===a&&"y"===b||"y"===a&&"z"===b)u="x",v=h.depthSegments;var A=v+1,E=x+1,G=e/v,F=f/x,z=new THREE.Vector3;z[u]=0<g?1:-1;for(e=0;e<E;e++)for(f=0;f<A;f++){var I=new THREE.Vector3;I[a]=(f*G-D)*c;I[b]=(e*F-w)*d;I[u]=g;h.vertices.push(I)}for(e=
0;e<x;e++)for(f=0;f<v;f++)w=f+A*e,a=f+A*(e+1),b=f+1+A*(e+1),c=f+1+A*e,d=new THREE.Vector2(f/v,1-e/x),g=new THREE.Vector2(f/v,1-(e+1)/x),u=new THREE.Vector2((f+1)/v,1-(e+1)/x),D=new THREE.Vector2((f+1)/v,1-e/x),w=new THREE.Face3(w+y,a+y,c+y),w.normal.copy(z),w.vertexNormals.push(z.clone(),z.clone(),z.clone()),w.materialIndex=s,h.faces.push(w),h.faceVertexUvs[0].push([d,g,D]),w=new THREE.Face3(a+y,b+y,c+y),w.normal.copy(z),w.vertexNormals.push(z.clone(),z.clone(),z.clone()),w.materialIndex=s,h.faces.push(w),
h.faceVertexUvs[0].push([g.clone(),u,D.clone()])}THREE.Geometry.call(this);this.type="BoxGeometry";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};this.widthSegments=d||1;this.heightSegments=e||1;this.depthSegments=f||1;var h=this;d=a/2;e=b/2;f=c/2;g("z","y",-1,-1,c,b,d,0);g("z","y",1,-1,c,b,-d,1);g("x","z",1,1,a,c,e,2);g("x","z",1,-1,a,c,-e,3);g("x","y",1,-1,a,b,f,4);g("x","y",-1,-1,a,b,-f,5);this.mergeVertices()};THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.BoxGeometry.prototype.constructor=THREE.BoxGeometry;
THREE.CircleGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type="CircleGeometry";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};a=a||50;b=void 0!==b?Math.max(3,b):8;c=void 0!==c?c:0;d=void 0!==d?d:2*Math.PI;var e,f=[];e=new THREE.Vector3;var g=new THREE.Vector2(.5,.5);this.vertices.push(e);f.push(g);for(e=0;e<=b;e++){var h=new THREE.Vector3,k=c+e/b*d;h.x=a*Math.cos(k);h.y=a*Math.sin(k);this.vertices.push(h);f.push(new THREE.Vector2((h.x/a+1)/2,(h.y/a+1)/2))}c=new THREE.Vector3(0,
0,1);for(e=1;e<=b;e++)this.faces.push(new THREE.Face3(e,e+1,0,[c.clone(),c.clone(),c.clone()])),this.faceVertexUvs[0].push([f[e].clone(),f[e+1].clone(),g.clone()]);this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CircleGeometry.prototype.constructor=THREE.CircleGeometry;
THREE.CubeGeometry=function(a,b,c,d,e,f){THREE.warn("THREE.CubeGeometry has been renamed to THREE.BoxGeometry.");return new THREE.BoxGeometry(a,b,c,d,e,f)};
THREE.CylinderGeometry=function(a,b,c,d,e,f,g,h){THREE.Geometry.call(this);this.type="CylinderGeometry";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};a=void 0!==a?a:20;b=void 0!==b?b:20;c=void 0!==c?c:100;d=d||8;e=e||1;f=void 0!==f?f:!1;g=void 0!==g?g:0;h=void 0!==h?h:2*Math.PI;var k=c/2,l,p,q=[],n=[];for(p=0;p<=e;p++){var t=[],r=[],s=p/e,u=s*(b-a)+a;for(l=0;l<=d;l++){var v=l/d,x=new THREE.Vector3;x.x=u*Math.sin(v*h+
g);x.y=-s*c+k;x.z=u*Math.cos(v*h+g);this.vertices.push(x);t.push(this.vertices.length-1);r.push(new THREE.Vector2(v,1-s))}q.push(t);n.push(r)}c=(b-a)/c;for(l=0;l<d;l++)for(0!==a?(g=this.vertices[q[0][l]].clone(),h=this.vertices[q[0][l+1]].clone()):(g=this.vertices[q[1][l]].clone(),h=this.vertices[q[1][l+1]].clone()),g.setY(Math.sqrt(g.x*g.x+g.z*g.z)*c).normalize(),h.setY(Math.sqrt(h.x*h.x+h.z*h.z)*c).normalize(),p=0;p<e;p++){var t=q[p][l],r=q[p+1][l],s=q[p+1][l+1],u=q[p][l+1],v=g.clone(),x=g.clone(),
D=h.clone(),w=h.clone(),y=n[p][l].clone(),A=n[p+1][l].clone(),E=n[p+1][l+1].clone(),G=n[p][l+1].clone();this.faces.push(new THREE.Face3(t,r,u,[v,x,w]));this.faceVertexUvs[0].push([y,A,G]);this.faces.push(new THREE.Face3(r,s,u,[x.clone(),D,w.clone()]));this.faceVertexUvs[0].push([A.clone(),E,G.clone()])}if(!1===f&&0<a)for(this.vertices.push(new THREE.Vector3(0,k,0)),l=0;l<d;l++)t=q[0][l],r=q[0][l+1],s=this.vertices.length-1,v=new THREE.Vector3(0,1,0),x=new THREE.Vector3(0,1,0),D=new THREE.Vector3(0,
1,0),y=n[0][l].clone(),A=n[0][l+1].clone(),E=new THREE.Vector2(A.x,0),this.faces.push(new THREE.Face3(t,r,s,[v,x,D])),this.faceVertexUvs[0].push([y,A,E]);if(!1===f&&0<b)for(this.vertices.push(new THREE.Vector3(0,-k,0)),l=0;l<d;l++)t=q[e][l+1],r=q[e][l],s=this.vertices.length-1,v=new THREE.Vector3(0,-1,0),x=new THREE.Vector3(0,-1,0),D=new THREE.Vector3(0,-1,0),y=n[e][l+1].clone(),A=n[e][l].clone(),E=new THREE.Vector2(A.x,1),this.faces.push(new THREE.Face3(t,r,s,[v,x,D])),this.faceVertexUvs[0].push([y,
A,E]);this.computeFaceNormals()};THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry;THREE.ExtrudeGeometry=function(a,b){"undefined"!==typeof a&&(THREE.Geometry.call(this),this.type="ExtrudeGeometry",a=a instanceof Array?a:[a],this.addShapeList(a,b),this.computeFaceNormals())};THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry;
THREE.ExtrudeGeometry.prototype.addShapeList=function(a,b){for(var c=a.length,d=0;d<c;d++)this.addShape(a[d],b)};
THREE.ExtrudeGeometry.prototype.addShape=function(a,b){function c(a,b,c){b||THREE.error("THREE.ExtrudeGeometry: vec does not exist");return b.clone().multiplyScalar(c).add(a)}function d(a,b,c){var d=1,d=a.x-b.x,e=a.y-b.y,f=c.x-a.x,g=c.y-a.y,h=d*d+e*e;if(1E-10<Math.abs(d*g-e*f)){var k=Math.sqrt(h),l=Math.sqrt(f*f+g*g),h=b.x-e/k;b=b.y+d/k;f=((c.x-g/l-h)*g-(c.y+f/l-b)*f)/(d*g-e*f);c=h+d*f-a.x;a=b+e*f-a.y;d=c*c+a*a;if(2>=d)return new THREE.Vector2(c,a);d=Math.sqrt(d/2)}else a=!1,1E-10<d?1E-10<f&&(a=!0):
-1E-10>d?-1E-10>f&&(a=!0):Math.sign(e)==Math.sign(g)&&(a=!0),a?(c=-e,a=d,d=Math.sqrt(h)):(c=d,a=e,d=Math.sqrt(h/2));return new THREE.Vector2(c/d,a/d)}function e(a,b){var c,d;for(O=a.length;0<=--O;){c=O;d=O-1;0>d&&(d=a.length-1);for(var e=0,f=t+2*p,e=0;e<f;e++){var g=oa*e,h=oa*(e+1),k=b+c+g,g=b+d+g,l=b+d+h,h=b+c+h,k=k+U,g=g+U,l=l+U,h=h+U;I.faces.push(new THREE.Face3(k,g,h,null,null,x));I.faces.push(new THREE.Face3(g,l,h,null,null,x));k=D.generateSideWallUV(I,k,g,l,h);I.faceVertexUvs[0].push([k[0],
k[1],k[3]]);I.faceVertexUvs[0].push([k[1],k[2],k[3]])}}}function f(a,b,c){I.vertices.push(new THREE.Vector3(a,b,c))}function g(a,b,c){a+=U;b+=U;c+=U;I.faces.push(new THREE.Face3(a,b,c,null,null,v));a=D.generateTopUV(I,a,b,c);I.faceVertexUvs[0].push(a)}var h=void 0!==b.amount?b.amount:100,k=void 0!==b.bevelThickness?b.bevelThickness:6,l=void 0!==b.bevelSize?b.bevelSize:k-2,p=void 0!==b.bevelSegments?b.bevelSegments:3,q=void 0!==b.bevelEnabled?b.bevelEnabled:!0,n=void 0!==b.curveSegments?b.curveSegments:
12,t=void 0!==b.steps?b.steps:1,r=b.extrudePath,s,u=!1,v=b.material,x=b.extrudeMaterial,D=void 0!==b.UVGenerator?b.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator,w,y,A,E;r&&(s=r.getSpacedPoints(t),u=!0,q=!1,w=void 0!==b.frames?b.frames:new THREE.TubeGeometry.FrenetFrames(r,t,!1),y=new THREE.Vector3,A=new THREE.Vector3,E=new THREE.Vector3);q||(l=k=p=0);var G,F,z,I=this,U=this.vertices.length,r=a.extractPoints(n),n=r.shape,M=r.holes;if(r=!THREE.Shape.Utils.isClockWise(n)){n=n.reverse();F=0;for(z=
M.length;F<z;F++)G=M[F],THREE.Shape.Utils.isClockWise(G)&&(M[F]=G.reverse());r=!1}var H=THREE.Shape.Utils.triangulateShape(n,M),L=n;F=0;for(z=M.length;F<z;F++)G=M[F],n=n.concat(G);var P,N,R,V,J,oa=n.length,ja,ha=H.length,r=[],O=0;R=L.length;P=R-1;for(N=O+1;O<R;O++,P++,N++)P===R&&(P=0),N===R&&(N=0),r[O]=d(L[O],L[P],L[N]);var ca=[],ba,qa=r.concat();F=0;for(z=M.length;F<z;F++){G=M[F];ba=[];O=0;R=G.length;P=R-1;for(N=O+1;O<R;O++,P++,N++)P===R&&(P=0),N===R&&(N=0),ba[O]=d(G[O],G[P],G[N]);ca.push(ba);qa=
qa.concat(ba)}for(P=0;P<p;P++){R=P/p;V=k*(1-R);N=l*Math.sin(R*Math.PI/2);O=0;for(R=L.length;O<R;O++)J=c(L[O],r[O],N),f(J.x,J.y,-V);F=0;for(z=M.length;F<z;F++)for(G=M[F],ba=ca[F],O=0,R=G.length;O<R;O++)J=c(G[O],ba[O],N),f(J.x,J.y,-V)}N=l;for(O=0;O<oa;O++)J=q?c(n[O],qa[O],N):n[O],u?(A.copy(w.normals[0]).multiplyScalar(J.x),y.copy(w.binormals[0]).multiplyScalar(J.y),E.copy(s[0]).add(A).add(y),f(E.x,E.y,E.z)):f(J.x,J.y,0);for(R=1;R<=t;R++)for(O=0;O<oa;O++)J=q?c(n[O],qa[O],N):n[O],u?(A.copy(w.normals[R]).multiplyScalar(J.x),
y.copy(w.binormals[R]).multiplyScalar(J.y),E.copy(s[R]).add(A).add(y),f(E.x,E.y,E.z)):f(J.x,J.y,h/t*R);for(P=p-1;0<=P;P--){R=P/p;V=k*(1-R);N=l*Math.sin(R*Math.PI/2);O=0;for(R=L.length;O<R;O++)J=c(L[O],r[O],N),f(J.x,J.y,h+V);F=0;for(z=M.length;F<z;F++)for(G=M[F],ba=ca[F],O=0,R=G.length;O<R;O++)J=c(G[O],ba[O],N),u?f(J.x,J.y+s[t-1].y,s[t-1].x+V):f(J.x,J.y,h+V)}(function(){if(q){var a;a=0*oa;for(O=0;O<ha;O++)ja=H[O],g(ja[2]+a,ja[1]+a,ja[0]+a);a=t+2*p;a*=oa;for(O=0;O<ha;O++)ja=H[O],g(ja[0]+a,ja[1]+a,ja[2]+
a)}else{for(O=0;O<ha;O++)ja=H[O],g(ja[2],ja[1],ja[0]);for(O=0;O<ha;O++)ja=H[O],g(ja[0]+oa*t,ja[1]+oa*t,ja[2]+oa*t)}})();(function(){var a=0;e(L,a);a+=L.length;F=0;for(z=M.length;F<z;F++)G=M[F],e(G,a),a+=G.length})()};
THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(a,b,c,d){a=a.vertices;b=a[b];c=a[c];d=a[d];return[new THREE.Vector2(b.x,b.y),new THREE.Vector2(c.x,c.y),new THREE.Vector2(d.x,d.y)]},generateSideWallUV:function(a,b,c,d,e){a=a.vertices;b=a[b];c=a[c];d=a[d];e=a[e];return.01>Math.abs(b.y-c.y)?[new THREE.Vector2(b.x,1-b.z),new THREE.Vector2(c.x,1-c.z),new THREE.Vector2(d.x,1-d.z),new THREE.Vector2(e.x,1-e.z)]:[new THREE.Vector2(b.y,1-b.z),new THREE.Vector2(c.y,1-c.z),new THREE.Vector2(d.y,
1-d.z),new THREE.Vector2(e.y,1-e.z)]}};THREE.ShapeGeometry=function(a,b){THREE.Geometry.call(this);this.type="ShapeGeometry";!1===a instanceof Array&&(a=[a]);this.addShapeList(a,b);this.computeFaceNormals()};THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.constructor=THREE.ShapeGeometry;THREE.ShapeGeometry.prototype.addShapeList=function(a,b){for(var c=0,d=a.length;c<d;c++)this.addShape(a[c],b);return this};
THREE.ShapeGeometry.prototype.addShape=function(a,b){void 0===b&&(b={});var c=b.material,d=void 0===b.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:b.UVGenerator,e,f,g,h=this.vertices.length;e=a.extractPoints(void 0!==b.curveSegments?b.curveSegments:12);var k=e.shape,l=e.holes;if(!THREE.Shape.Utils.isClockWise(k))for(k=k.reverse(),e=0,f=l.length;e<f;e++)g=l[e],THREE.Shape.Utils.isClockWise(g)&&(l[e]=g.reverse());var p=THREE.Shape.Utils.triangulateShape(k,l);e=0;for(f=l.length;e<f;e++)g=l[e],
k=k.concat(g);l=k.length;f=p.length;for(e=0;e<l;e++)g=k[e],this.vertices.push(new THREE.Vector3(g.x,g.y,0));for(e=0;e<f;e++)l=p[e],k=l[0]+h,g=l[1]+h,l=l[2]+h,this.faces.push(new THREE.Face3(k,g,l,null,null,c)),this.faceVertexUvs[0].push(d.generateTopUV(this,k,g,l))};
THREE.LatheGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type="LatheGeometry";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};b=b||12;c=c||0;d=d||2*Math.PI;for(var e=1/(a.length-1),f=1/b,g=0,h=b;g<=h;g++)for(var k=c+g*f*d,l=Math.cos(k),p=Math.sin(k),k=0,q=a.length;k<q;k++){var n=a[k],t=new THREE.Vector3;t.x=l*n.x-p*n.y;t.y=p*n.x+l*n.y;t.z=n.z;this.vertices.push(t)}c=a.length;g=0;for(h=b;g<h;g++)for(k=0,q=a.length-1;k<q;k++){b=p=k+c*g;d=p+c;var l=p+1+c,p=p+1,n=g*f,t=k*e,r=
n+f,s=t+e;this.faces.push(new THREE.Face3(b,d,p));this.faceVertexUvs[0].push([new THREE.Vector2(n,t),new THREE.Vector2(r,t),new THREE.Vector2(n,s)]);this.faces.push(new THREE.Face3(d,l,p));this.faceVertexUvs[0].push([new THREE.Vector2(r,t),new THREE.Vector2(r,s),new THREE.Vector2(n,s)])}this.mergeVertices();this.computeFaceNormals();this.computeVertexNormals()};THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry;
THREE.PlaneGeometry=function(a,b,c,d){console.info("THREE.PlaneGeometry: Consider using THREE.PlaneBufferGeometry for lower memory footprint.");THREE.Geometry.call(this);this.type="PlaneGeometry";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};this.fromBufferGeometry(new THREE.PlaneBufferGeometry(a,b,c,d))};THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry;
THREE.PlaneBufferGeometry=function(a,b,c,d){THREE.BufferGeometry.call(this);this.type="PlaneBufferGeometry";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};var e=a/2,f=b/2;c=c||1;d=d||1;var g=c+1,h=d+1,k=a/c,l=b/d;b=new Float32Array(g*h*3);a=new Float32Array(g*h*3);for(var p=new Float32Array(g*h*2),q=0,n=0,t=0;t<h;t++)for(var r=t*l-f,s=0;s<g;s++)b[q]=s*k-e,b[q+1]=-r,a[q+2]=1,p[n]=s/c,p[n+1]=1-t/d,q+=3,n+=2;q=0;e=new (65535<b.length/3?Uint32Array:Uint16Array)(c*d*6);for(t=0;t<d;t++)for(s=
0;s<c;s++)f=s+g*(t+1),h=s+1+g*(t+1),k=s+1+g*t,e[q]=s+g*t,e[q+1]=f,e[q+2]=k,e[q+3]=f,e[q+4]=h,e[q+5]=k,q+=6;this.addAttribute("index",new THREE.BufferAttribute(e,1));this.addAttribute("position",new THREE.BufferAttribute(b,3));this.addAttribute("normal",new THREE.BufferAttribute(a,3));this.addAttribute("uv",new THREE.BufferAttribute(p,2))};THREE.PlaneBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.PlaneBufferGeometry.prototype.constructor=THREE.PlaneBufferGeometry;
THREE.RingGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type="RingGeometry";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};a=a||0;b=b||50;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(1,d):8;var g,h=[],k=a,l=(b-a)/d;for(a=0;a<d+1;a++){for(g=0;g<c+1;g++){var p=new THREE.Vector3,q=e+g/c*f;p.x=k*Math.cos(q);p.y=k*Math.sin(q);this.vertices.push(p);h.push(new THREE.Vector2((p.x/b+1)/2,
(p.y/b+1)/2))}k+=l}b=new THREE.Vector3(0,0,1);for(a=0;a<d;a++)for(e=a*(c+1),g=0;g<c;g++)f=q=g+e,l=q+c+1,p=q+c+2,this.faces.push(new THREE.Face3(f,l,p,[b.clone(),b.clone(),b.clone()])),this.faceVertexUvs[0].push([h[f].clone(),h[l].clone(),h[p].clone()]),f=q,l=q+c+2,p=q+1,this.faces.push(new THREE.Face3(f,l,p,[b.clone(),b.clone(),b.clone()])),this.faceVertexUvs[0].push([h[f].clone(),h[l].clone(),h[p].clone()]);this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,k)};
THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.RingGeometry.prototype.constructor=THREE.RingGeometry;
THREE.SphereGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);this.type="SphereGeometry";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};a=a||50;b=Math.max(3,Math.floor(b)||8);c=Math.max(2,Math.floor(c)||6);d=void 0!==d?d:0;e=void 0!==e?e:2*Math.PI;f=void 0!==f?f:0;g=void 0!==g?g:Math.PI;var h,k,l=[],p=[];for(k=0;k<=c;k++){var q=[],n=[];for(h=0;h<=b;h++){var t=h/b,r=k/c,s=new THREE.Vector3;s.x=-a*Math.cos(d+t*e)*Math.sin(f+r*g);
s.y=a*Math.cos(f+r*g);s.z=a*Math.sin(d+t*e)*Math.sin(f+r*g);this.vertices.push(s);q.push(this.vertices.length-1);n.push(new THREE.Vector2(t,1-r))}l.push(q);p.push(n)}for(k=0;k<c;k++)for(h=0;h<b;h++){d=l[k][h+1];e=l[k][h];f=l[k+1][h];g=l[k+1][h+1];var q=this.vertices[d].clone().normalize(),n=this.vertices[e].clone().normalize(),t=this.vertices[f].clone().normalize(),r=this.vertices[g].clone().normalize(),s=p[k][h+1].clone(),u=p[k][h].clone(),v=p[k+1][h].clone(),x=p[k+1][h+1].clone();Math.abs(this.vertices[d].y)===
a?(s.x=(s.x+u.x)/2,this.faces.push(new THREE.Face3(d,f,g,[q,t,r])),this.faceVertexUvs[0].push([s,v,x])):Math.abs(this.vertices[f].y)===a?(v.x=(v.x+x.x)/2,this.faces.push(new THREE.Face3(d,e,f,[q,n,t])),this.faceVertexUvs[0].push([s,u,v])):(this.faces.push(new THREE.Face3(d,e,g,[q,n,r])),this.faceVertexUvs[0].push([s,u,x]),this.faces.push(new THREE.Face3(e,f,g,[n.clone(),t,r.clone()])),this.faceVertexUvs[0].push([u.clone(),v,x.clone()]))}this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,
a)};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry;THREE.TextGeometry=function(a,b){b=b||{};var c=THREE.FontUtils.generateShapes(a,b);b.amount=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);THREE.ExtrudeGeometry.call(this,c,b);this.type="TextGeometry"};THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype);
THREE.TextGeometry.prototype.constructor=THREE.TextGeometry;
THREE.TorusGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.type="TorusGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};a=a||100;b=b||40;c=c||8;d=d||6;e=e||2*Math.PI;for(var f=new THREE.Vector3,g=[],h=[],k=0;k<=c;k++)for(var l=0;l<=d;l++){var p=l/d*e,q=k/c*Math.PI*2;f.x=a*Math.cos(p);f.y=a*Math.sin(p);var n=new THREE.Vector3;n.x=(a+b*Math.cos(q))*Math.cos(p);n.y=(a+b*Math.cos(q))*Math.sin(p);n.z=b*Math.sin(q);this.vertices.push(n);g.push(new THREE.Vector2(l/
d,k/c));h.push(n.clone().sub(f).normalize())}for(k=1;k<=c;k++)for(l=1;l<=d;l++)a=(d+1)*k+l-1,b=(d+1)*(k-1)+l-1,e=(d+1)*(k-1)+l,f=(d+1)*k+l,p=new THREE.Face3(a,b,f,[h[a].clone(),h[b].clone(),h[f].clone()]),this.faces.push(p),this.faceVertexUvs[0].push([g[a].clone(),g[b].clone(),g[f].clone()]),p=new THREE.Face3(b,e,f,[h[b].clone(),h[e].clone(),h[f].clone()]),this.faces.push(p),this.faceVertexUvs[0].push([g[b].clone(),g[e].clone(),g[f].clone()]);this.computeFaceNormals()};
THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry;
THREE.TorusKnotGeometry=function(a,b,c,d,e,f,g){function h(a,b,c,d,e){var f=Math.cos(a),g=Math.sin(a);a*=b/c;b=Math.cos(a);f*=d*(2+b)*.5;g=d*(2+b)*g*.5;d=e*d*Math.sin(a)*.5;return new THREE.Vector3(f,g,d)}THREE.Geometry.call(this);this.type="TorusKnotGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,p:e,q:f,heightScale:g};a=a||100;b=b||40;c=c||64;d=d||8;e=e||2;f=f||3;g=g||1;for(var k=Array(c),l=new THREE.Vector3,p=new THREE.Vector3,q=new THREE.Vector3,n=0;n<c;++n){k[n]=
Array(d);var t=n/c*2*e*Math.PI,r=h(t,f,e,a,g),t=h(t+.01,f,e,a,g);l.subVectors(t,r);p.addVectors(t,r);q.crossVectors(l,p);p.crossVectors(q,l);q.normalize();p.normalize();for(t=0;t<d;++t){var s=t/d*2*Math.PI,u=-b*Math.cos(s),s=b*Math.sin(s),v=new THREE.Vector3;v.x=r.x+u*p.x+s*q.x;v.y=r.y+u*p.y+s*q.y;v.z=r.z+u*p.z+s*q.z;k[n][t]=this.vertices.push(v)-1}}for(n=0;n<c;++n)for(t=0;t<d;++t)e=(n+1)%c,f=(t+1)%d,a=k[n][t],b=k[e][t],e=k[e][f],f=k[n][f],g=new THREE.Vector2(n/c,t/d),l=new THREE.Vector2((n+1)/c,
t/d),p=new THREE.Vector2((n+1)/c,(t+1)/d),q=new THREE.Vector2(n/c,(t+1)/d),this.faces.push(new THREE.Face3(a,b,f)),this.faceVertexUvs[0].push([g,l,q]),this.faces.push(new THREE.Face3(b,e,f)),this.faceVertexUvs[0].push([l.clone(),p,q.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry;
THREE.TubeGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type="TubeGeometry";this.parameters={path:a,segments:b,radius:c,radialSegments:d,closed:e};b=b||64;c=c||1;d=d||8;e=e||!1;f=f||THREE.TubeGeometry.NoTaper;var g=[],h,k,l=b+1,p,q,n,t,r,s=new THREE.Vector3,u,v,x;u=new THREE.TubeGeometry.FrenetFrames(a,b,e);v=u.normals;x=u.binormals;this.tangents=u.tangents;this.normals=v;this.binormals=x;for(u=0;u<l;u++)for(g[u]=[],p=u/(l-1),r=a.getPointAt(p),h=v[u],k=x[u],n=c*f(p),p=0;p<d;p++)q=
p/d*2*Math.PI,t=-n*Math.cos(q),q=n*Math.sin(q),s.copy(r),s.x+=t*h.x+q*k.x,s.y+=t*h.y+q*k.y,s.z+=t*h.z+q*k.z,g[u][p]=this.vertices.push(new THREE.Vector3(s.x,s.y,s.z))-1;for(u=0;u<b;u++)for(p=0;p<d;p++)f=e?(u+1)%b:u+1,l=(p+1)%d,a=g[u][p],c=g[f][p],f=g[f][l],l=g[u][l],s=new THREE.Vector2(u/b,p/d),v=new THREE.Vector2((u+1)/b,p/d),x=new THREE.Vector2((u+1)/b,(p+1)/d),h=new THREE.Vector2(u/b,(p+1)/d),this.faces.push(new THREE.Face3(a,c,l)),this.faceVertexUvs[0].push([s,v,h]),this.faces.push(new THREE.Face3(c,
f,l)),this.faceVertexUvs[0].push([v.clone(),x,h.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TubeGeometry.prototype.constructor=THREE.TubeGeometry;THREE.TubeGeometry.NoTaper=function(a){return 1};THREE.TubeGeometry.SinusoidalTaper=function(a){return Math.sin(Math.PI*a)};
THREE.TubeGeometry.FrenetFrames=function(a,b,c){var d=new THREE.Vector3,e=[],f=[],g=[],h=new THREE.Vector3,k=new THREE.Matrix4;b+=1;var l,p,q;this.tangents=e;this.normals=f;this.binormals=g;for(l=0;l<b;l++)p=l/(b-1),e[l]=a.getTangentAt(p),e[l].normalize();f[0]=new THREE.Vector3;g[0]=new THREE.Vector3;a=Number.MAX_VALUE;l=Math.abs(e[0].x);p=Math.abs(e[0].y);q=Math.abs(e[0].z);l<=a&&(a=l,d.set(1,0,0));p<=a&&(a=p,d.set(0,1,0));q<=a&&d.set(0,0,1);h.crossVectors(e[0],d).normalize();f[0].crossVectors(e[0],
h);g[0].crossVectors(e[0],f[0]);for(l=1;l<b;l++)f[l]=f[l-1].clone(),g[l]=g[l-1].clone(),h.crossVectors(e[l-1],e[l]),1E-4<h.length()&&(h.normalize(),d=Math.acos(THREE.Math.clamp(e[l-1].dot(e[l]),-1,1)),f[l].applyMatrix4(k.makeRotationAxis(h,d))),g[l].crossVectors(e[l],f[l]);if(c)for(d=Math.acos(THREE.Math.clamp(f[0].dot(f[b-1]),-1,1)),d/=b-1,0<e[0].dot(h.crossVectors(f[0],f[b-1]))&&(d=-d),l=1;l<b;l++)f[l].applyMatrix4(k.makeRotationAxis(e[l],d*l)),g[l].crossVectors(e[l],f[l])};
THREE.PolyhedronGeometry=function(a,b,c,d){function e(a){var b=a.normalize().clone();b.index=k.vertices.push(b)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+.5;a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5;b.uv=new THREE.Vector2(c,1-a);return b}function f(a,b,c){var d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()]);k.faces.push(d);u.copy(a).add(b).add(c).divideScalar(3);d=Math.atan2(u.z,-u.x);k.faceVertexUvs[0].push([h(a.uv,a,d),h(b.uv,b,d),h(c.uv,c,d)])}function g(a,
b){for(var c=Math.pow(2,b),d=e(k.vertices[a.a]),g=e(k.vertices[a.b]),h=e(k.vertices[a.c]),l=[],n=0;n<=c;n++){l[n]=[];for(var p=e(d.clone().lerp(h,n/c)),q=e(g.clone().lerp(h,n/c)),s=c-n,r=0;r<=s;r++)l[n][r]=0==r&&n==c?p:e(p.clone().lerp(q,r/s))}for(n=0;n<c;n++)for(r=0;r<2*(c-n)-1;r++)d=Math.floor(r/2),0==r%2?f(l[n][d+1],l[n+1][d],l[n][d]):f(l[n][d+1],l[n+1][d+1],l[n+1][d])}function h(a,b,c){0>c&&1===a.x&&(a=new THREE.Vector2(a.x-1,a.y));0===b.x&&0===b.z&&(a=new THREE.Vector2(c/2/Math.PI+.5,a.y));return a.clone()}
THREE.Geometry.call(this);this.type="PolyhedronGeometry";this.parameters={vertices:a,indices:b,radius:c,detail:d};c=c||1;d=d||0;for(var k=this,l=0,p=a.length;l<p;l+=3)e(new THREE.Vector3(a[l],a[l+1],a[l+2]));a=this.vertices;for(var q=[],n=l=0,p=b.length;l<p;l+=3,n++){var t=a[b[l]],r=a[b[l+1]],s=a[b[l+2]];q[n]=new THREE.Face3(t.index,r.index,s.index,[t.clone(),r.clone(),s.clone()])}for(var u=new THREE.Vector3,l=0,p=q.length;l<p;l++)g(q[l],d);l=0;for(p=this.faceVertexUvs[0].length;l<p;l++)b=this.faceVertexUvs[0][l],
d=b[0].x,a=b[1].x,q=b[2].x,n=Math.max(d,Math.max(a,q)),t=Math.min(d,Math.min(a,q)),.9<n&&.1>t&&(.2>d&&(b[0].x+=1),.2>a&&(b[1].x+=1),.2>q&&(b[2].x+=1));l=0;for(p=this.vertices.length;l<p;l++)this.vertices[l].multiplyScalar(c);this.mergeVertices();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,c)};THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry;
THREE.DodecahedronGeometry=function(a,b){this.parameters={radius:a,detail:b};var c=(1+Math.sqrt(5))/2,d=1/c;THREE.PolyhedronGeometry.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-d,-c,0,-d,c,0,d,-c,0,d,c,-d,-c,0,-d,c,0,d,-c,0,d,c,0,-c,0,-d,c,0,-d,-c,0,d,c,0,d],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,
11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],a,b)};THREE.DodecahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.DodecahedronGeometry.prototype.constructor=THREE.DodecahedronGeometry;
THREE.IcosahedronGeometry=function(a,b){var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],a,b);this.type="IcosahedronGeometry";this.parameters={radius:a,detail:b}};THREE.IcosahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry;THREE.OctahedronGeometry=function(a,b){this.parameters={radius:a,detail:b};THREE.PolyhedronGeometry.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,b);this.type="OctahedronGeometry";this.parameters={radius:a,detail:b}};THREE.OctahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.OctahedronGeometry.prototype.constructor=THREE.OctahedronGeometry;
THREE.TetrahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,b);this.type="TetrahedronGeometry";this.parameters={radius:a,detail:b}};THREE.TetrahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TetrahedronGeometry.prototype.constructor=THREE.TetrahedronGeometry;
THREE.ParametricGeometry=function(a,b,c){THREE.Geometry.call(this);this.type="ParametricGeometry";this.parameters={func:a,slices:b,stacks:c};var d=this.vertices,e=this.faces,f=this.faceVertexUvs[0],g,h,k,l,p=b+1;for(g=0;g<=c;g++)for(l=g/c,h=0;h<=b;h++)k=h/b,k=a(k,l),d.push(k);var q,n,t,r;for(g=0;g<c;g++)for(h=0;h<b;h++)a=g*p+h,d=g*p+h+1,l=(g+1)*p+h+1,k=(g+1)*p+h,q=new THREE.Vector2(h/b,g/c),n=new THREE.Vector2((h+1)/b,g/c),t=new THREE.Vector2((h+1)/b,(g+1)/c),r=new THREE.Vector2(h/b,(g+1)/c),e.push(new THREE.Face3(a,
d,k)),f.push([q,n,r]),e.push(new THREE.Face3(d,l,k)),f.push([n.clone(),t,r.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ParametricGeometry.prototype.constructor=THREE.ParametricGeometry;
THREE.AxisHelper=function(a){a=a||1;var b=new Float32Array([0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a]),c=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]);a=new THREE.BufferGeometry;a.addAttribute("position",new THREE.BufferAttribute(b,3));a.addAttribute("color",new THREE.BufferAttribute(c,3));b=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.Line.call(this,a,b,THREE.LinePieces)};THREE.AxisHelper.prototype=Object.create(THREE.Line.prototype);
THREE.AxisHelper.prototype.constructor=THREE.AxisHelper;
THREE.ArrowHelper=function(){var a=new THREE.Geometry;a.vertices.push(new THREE.Vector3(0,0,0),new THREE.Vector3(0,1,0));var b=new THREE.CylinderGeometry(0,.5,1,5,1);b.applyMatrix((new THREE.Matrix4).makeTranslation(0,-.5,0));return function(c,d,e,f,g,h){THREE.Object3D.call(this);void 0===f&&(f=16776960);void 0===e&&(e=1);void 0===g&&(g=.2*e);void 0===h&&(h=.2*g);this.position.copy(d);this.line=new THREE.Line(a,new THREE.LineBasicMaterial({color:f}));this.line.matrixAutoUpdate=!1;this.add(this.line);
this.cone=new THREE.Mesh(b,new THREE.MeshBasicMaterial({color:f}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(c);this.setLength(e,g,h)}}();THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.constructor=THREE.ArrowHelper;
THREE.ArrowHelper.prototype.setDirection=function(){var a=new THREE.Vector3,b;return function(c){.99999<c.y?this.quaternion.set(0,0,0,1):-.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}();THREE.ArrowHelper.prototype.setLength=function(a,b,c){void 0===b&&(b=.2*a);void 0===c&&(c=.2*b);this.line.scale.set(1,a-b,1);this.line.updateMatrix();this.cone.scale.set(c,b,c);this.cone.position.y=a;this.cone.updateMatrix()};
THREE.ArrowHelper.prototype.setColor=function(a){this.line.material.color.set(a);this.cone.material.color.set(a)};THREE.BoxHelper=function(a){var b=new THREE.BufferGeometry;b.addAttribute("position",new THREE.BufferAttribute(new Float32Array(72),3));THREE.Line.call(this,b,new THREE.LineBasicMaterial({color:16776960}),THREE.LinePieces);void 0!==a&&this.update(a)};THREE.BoxHelper.prototype=Object.create(THREE.Line.prototype);THREE.BoxHelper.prototype.constructor=THREE.BoxHelper;
THREE.BoxHelper.prototype.update=function(a){var b=a.geometry;null===b.boundingBox&&b.computeBoundingBox();var c=b.boundingBox.min,b=b.boundingBox.max,d=this.geometry.attributes.position.array;d[0]=b.x;d[1]=b.y;d[2]=b.z;d[3]=c.x;d[4]=b.y;d[5]=b.z;d[6]=c.x;d[7]=b.y;d[8]=b.z;d[9]=c.x;d[10]=c.y;d[11]=b.z;d[12]=c.x;d[13]=c.y;d[14]=b.z;d[15]=b.x;d[16]=c.y;d[17]=b.z;d[18]=b.x;d[19]=c.y;d[20]=b.z;d[21]=b.x;d[22]=b.y;d[23]=b.z;d[24]=b.x;d[25]=b.y;d[26]=c.z;d[27]=c.x;d[28]=b.y;d[29]=c.z;d[30]=c.x;d[31]=b.y;
d[32]=c.z;d[33]=c.x;d[34]=c.y;d[35]=c.z;d[36]=c.x;d[37]=c.y;d[38]=c.z;d[39]=b.x;d[40]=c.y;d[41]=c.z;d[42]=b.x;d[43]=c.y;d[44]=c.z;d[45]=b.x;d[46]=b.y;d[47]=c.z;d[48]=b.x;d[49]=b.y;d[50]=b.z;d[51]=b.x;d[52]=b.y;d[53]=c.z;d[54]=c.x;d[55]=b.y;d[56]=b.z;d[57]=c.x;d[58]=b.y;d[59]=c.z;d[60]=c.x;d[61]=c.y;d[62]=b.z;d[63]=c.x;d[64]=c.y;d[65]=c.z;d[66]=b.x;d[67]=c.y;d[68]=b.z;d[69]=b.x;d[70]=c.y;d[71]=c.z;this.geometry.attributes.position.needsUpdate=!0;this.geometry.computeBoundingSphere();this.matrix=a.matrixWorld;
this.matrixAutoUpdate=!1};THREE.BoundingBoxHelper=function(a,b){var c=void 0!==b?b:8947848;this.object=a;this.box=new THREE.Box3;THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:c,wireframe:!0}))};THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.constructor=THREE.BoundingBoxHelper;THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position)};
THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.vertices.push(new THREE.Vector3);d.colors.push(new THREE.Color(b));void 0===f[a]&&(f[a]=[]);f[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),f={};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);
b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1","cf2",3355443);b("cf3","cf4",3355443);THREE.Line.call(this,d,e,THREE.LinePieces);this.camera=a;this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=f;this.update()};
THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);THREE.CameraHelper.prototype.constructor=THREE.CameraHelper;
THREE.CameraHelper.prototype.update=function(){var a,b,c=new THREE.Vector3,d=new THREE.Camera,e=function(e,g,h,k){c.set(g,h,k).unproject(d);e=b[e];if(void 0!==e)for(g=0,h=e.length;g<h;g++)a.vertices[e[g]].copy(c)};return function(){a=this.geometry;b=this.pointMap;d.projectionMatrix.copy(this.camera.projectionMatrix);e("c",0,0,-1);e("t",0,0,1);e("n1",-1,-1,-1);e("n2",1,-1,-1);e("n3",-1,1,-1);e("n4",1,1,-1);e("f1",-1,-1,1);e("f2",1,-1,1);e("f3",-1,1,1);e("f4",1,1,1);e("u1",.7,1.1,-1);e("u2",-.7,1.1,
-1);e("u3",0,2,-1);e("cf1",-1,0,1);e("cf2",1,0,1);e("cf3",0,-1,1);e("cf4",0,1,1);e("cn1",-1,0,-1);e("cn2",1,0,-1);e("cn3",0,-1,-1);e("cn4",0,1,-1);a.verticesNeedUpdate=!0}}();
THREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;b=b||1;var c=new THREE.Geometry;c.vertices.push(new THREE.Vector3(-b,b,0),new THREE.Vector3(b,b,0),new THREE.Vector3(b,-b,0),new THREE.Vector3(-b,-b,0),new THREE.Vector3(-b,b,0));var d=new THREE.LineBasicMaterial({fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightPlane=new THREE.Line(c,d);this.add(this.lightPlane);
c=new THREE.Geometry;c.vertices.push(new THREE.Vector3,new THREE.Vector3);d=new THREE.LineBasicMaterial({fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine=new THREE.Line(c,d);this.add(this.targetLine);this.update()};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.DirectionalLightHelper.prototype.constructor=THREE.DirectionalLightHelper;
THREE.DirectionalLightHelper.prototype.dispose=function(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()};
THREE.DirectionalLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(){a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b,a);this.lightPlane.lookAt(c);this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine.geometry.vertices[1].copy(c);this.targetLine.geometry.verticesNeedUpdate=!0;this.targetLine.material.color.copy(this.lightPlane.material.color)}}();
THREE.EdgesHelper=function(a,b,c){b=void 0!==b?b:16777215;c=Math.cos(THREE.Math.degToRad(void 0!==c?c:1));var d=[0,0],e={},f=function(a,b){return a-b},g=["a","b","c"],h=new THREE.BufferGeometry,k;a.geometry instanceof THREE.BufferGeometry?(k=new THREE.Geometry,k.fromBufferGeometry(a.geometry)):k=a.geometry.clone();k.mergeVertices();k.computeFaceNormals();var l=k.vertices;k=k.faces;for(var p=0,q=0,n=k.length;q<n;q++)for(var t=k[q],r=0;3>r;r++){d[0]=t[g[r]];d[1]=t[g[(r+1)%3]];d.sort(f);var s=d.toString();
void 0===e[s]?(e[s]={vert1:d[0],vert2:d[1],face1:q,face2:void 0},p++):e[s].face2=q}d=new Float32Array(6*p);f=0;for(s in e)if(g=e[s],void 0===g.face2||k[g.face1].normal.dot(k[g.face2].normal)<=c)p=l[g.vert1],d[f++]=p.x,d[f++]=p.y,d[f++]=p.z,p=l[g.vert2],d[f++]=p.x,d[f++]=p.y,d[f++]=p.z;h.addAttribute("position",new THREE.BufferAttribute(d,3));THREE.Line.call(this,h,new THREE.LineBasicMaterial({color:b}),THREE.LinePieces);this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1};
THREE.EdgesHelper.prototype=Object.create(THREE.Line.prototype);THREE.EdgesHelper.prototype.constructor=THREE.EdgesHelper;
THREE.FaceNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16776960;d=void 0!==d?d:1;b=new THREE.Geometry;c=0;for(var e=this.object.geometry.faces.length;c<e;c++)b.vertices.push(new THREE.Vector3,new THREE.Vector3);THREE.Line.call(this,b,new THREE.LineBasicMaterial({color:a,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};THREE.FaceNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.FaceNormalsHelper.prototype.constructor=THREE.FaceNormalsHelper;
THREE.FaceNormalsHelper.prototype.update=function(){var a=this.geometry.vertices,b=this.object,c=b.geometry.vertices,d=b.geometry.faces,e=b.matrixWorld;b.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(e);for(var f=b=0,g=d.length;b<g;b++,f+=2){var h=d[b];a[f].copy(c[h.a]).add(c[h.b]).add(c[h.c]).divideScalar(3).applyMatrix4(e);a[f+1].copy(h.normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size).add(a[f])}this.geometry.verticesNeedUpdate=!0;return this};
THREE.GridHelper=function(a,b){var c=new THREE.Geometry,d=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});this.color1=new THREE.Color(4473924);this.color2=new THREE.Color(8947848);for(var e=-a;e<=a;e+=b){c.vertices.push(new THREE.Vector3(-a,0,e),new THREE.Vector3(a,0,e),new THREE.Vector3(e,0,-a),new THREE.Vector3(e,0,a));var f=0===e?this.color1:this.color2;c.colors.push(f,f,f,f)}THREE.Line.call(this,c,d,THREE.LinePieces)};THREE.GridHelper.prototype=Object.create(THREE.Line.prototype);
THREE.GridHelper.prototype.constructor=THREE.GridHelper;THREE.GridHelper.prototype.setColors=function(a,b){this.color1.set(a);this.color2.set(b);this.geometry.colorsNeedUpdate=!0};
THREE.HemisphereLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.colors=[new THREE.Color,new THREE.Color];var c=new THREE.SphereGeometry(b,4,2);c.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));for(var d=0;8>d;d++)c.faces[d].color=this.colors[4>d?0:1];d=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(c,d);this.add(this.lightSphere);
this.update()};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.constructor=THREE.HemisphereLightHelper;THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose();this.lightSphere.material.dispose()};
THREE.HemisphereLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate=!0}}();
THREE.PointLightHelper=function(a,b){this.light=a;this.light.updateMatrixWorld();var c=new THREE.SphereGeometry(b,4,2),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this,c,d);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=!1};THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.constructor=THREE.PointLightHelper;
THREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};
THREE.SkeletonHelper=function(a){this.bones=this.getBoneList(a);for(var b=new THREE.Geometry,c=0;c<this.bones.length;c++)this.bones[c].parent instanceof THREE.Bone&&(b.vertices.push(new THREE.Vector3),b.vertices.push(new THREE.Vector3),b.colors.push(new THREE.Color(0,0,1)),b.colors.push(new THREE.Color(0,1,0)));c=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});THREE.Line.call(this,b,c,THREE.LinePieces);this.root=a;this.matrix=a.matrixWorld;
this.matrixAutoUpdate=!1;this.update()};THREE.SkeletonHelper.prototype=Object.create(THREE.Line.prototype);THREE.SkeletonHelper.prototype.constructor=THREE.SkeletonHelper;THREE.SkeletonHelper.prototype.getBoneList=function(a){var b=[];a instanceof THREE.Bone&&b.push(a);for(var c=0;c<a.children.length;c++)b.push.apply(b,this.getBoneList(a.children[c]));return b};
THREE.SkeletonHelper.prototype.update=function(){for(var a=this.geometry,b=(new THREE.Matrix4).getInverse(this.root.matrixWorld),c=new THREE.Matrix4,d=0,e=0;e<this.bones.length;e++){var f=this.bones[e];f.parent instanceof THREE.Bone&&(c.multiplyMatrices(b,f.matrixWorld),a.vertices[d].setFromMatrixPosition(c),c.multiplyMatrices(b,f.parent.matrixWorld),a.vertices[d+1].setFromMatrixPosition(c),d+=2)}a.verticesNeedUpdate=!0;a.computeBoundingSphere()};
THREE.SpotLightHelper=function(a){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;a=new THREE.CylinderGeometry(0,1,1,8,1,!0);a.applyMatrix((new THREE.Matrix4).makeTranslation(0,-.5,0));a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var b=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});this.cone=new THREE.Mesh(a,b);this.add(this.cone);this.update()};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.constructor=THREE.SpotLightHelper;THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};
THREE.SpotLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){var c=this.light.distance?this.light.distance:1E4,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}();
THREE.VertexNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;b=void 0!==c?c:16711680;d=void 0!==d?d:1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,h=a[e].vertexNormals.length;g<h;g++)c.vertices.push(new THREE.Vector3,new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};THREE.VertexNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexNormalsHelper.prototype.constructor=THREE.VertexNormalsHelper;
THREE.VertexNormalsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(this.object.matrixWorld);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,h=0,k=0,l=f.length;k<l;k++)for(var p=f[k],q=0,n=p.vertexNormals.length;q<n;q++){var t=p.vertexNormals[q];d[h].copy(e[p[a[q]]]).applyMatrix4(g);b.copy(t).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);
b.add(d[h]);h+=1;d[h].copy(b);h+=1}this.geometry.verticesNeedUpdate=!0;return this}}();
THREE.VertexTangentsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;b=void 0!==c?c:255;d=void 0!==d?d:1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,h=a[e].vertexTangents.length;g<h;g++)c.vertices.push(new THREE.Vector3),c.vertices.push(new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.update()};THREE.VertexTangentsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexTangentsHelper.prototype.constructor=THREE.VertexTangentsHelper;
THREE.VertexTangentsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,h=0,k=0,l=f.length;k<l;k++)for(var p=f[k],q=0,n=p.vertexTangents.length;q<n;q++){var t=p.vertexTangents[q];d[h].copy(e[p[a[q]]]).applyMatrix4(g);b.copy(t).transformDirection(g).multiplyScalar(this.size);b.add(d[h]);h+=1;d[h].copy(b);
h+=1}this.geometry.verticesNeedUpdate=!0;return this}}();
THREE.WireframeHelper=function(a,b){var c=void 0!==b?b:16777215,d=[0,0],e={},f=function(a,b){return a-b},g=["a","b","c"],h=new THREE.BufferGeometry;if(a.geometry instanceof THREE.Geometry){for(var k=a.geometry.vertices,l=a.geometry.faces,p=0,q=new Uint32Array(6*l.length),n=0,t=l.length;n<t;n++)for(var r=l[n],s=0;3>s;s++){d[0]=r[g[s]];d[1]=r[g[(s+1)%3]];d.sort(f);var u=d.toString();void 0===e[u]&&(q[2*p]=d[0],q[2*p+1]=d[1],e[u]=!0,p++)}d=new Float32Array(6*p);n=0;for(t=p;n<t;n++)for(s=0;2>s;s++)p=
k[q[2*n+s]],g=6*n+3*s,d[g+0]=p.x,d[g+1]=p.y,d[g+2]=p.z;h.addAttribute("position",new THREE.BufferAttribute(d,3))}else if(a.geometry instanceof THREE.BufferGeometry){if(void 0!==a.geometry.attributes.index){k=a.geometry.attributes.position.array;t=a.geometry.attributes.index.array;l=a.geometry.drawcalls;p=0;0===l.length&&(l=[{count:t.length,index:0,start:0}]);for(var q=new Uint32Array(2*t.length),r=0,v=l.length;r<v;++r)for(var s=l[r].start,u=l[r].count,g=l[r].index,n=s,x=s+u;n<x;n+=3)for(s=0;3>s;s++)d[0]=
g+t[n+s],d[1]=g+t[n+(s+1)%3],d.sort(f),u=d.toString(),void 0===e[u]&&(q[2*p]=d[0],q[2*p+1]=d[1],e[u]=!0,p++);d=new Float32Array(6*p);n=0;for(t=p;n<t;n++)for(s=0;2>s;s++)g=6*n+3*s,p=3*q[2*n+s],d[g+0]=k[p],d[g+1]=k[p+1],d[g+2]=k[p+2]}else for(k=a.geometry.attributes.position.array,p=k.length/3,q=p/3,d=new Float32Array(6*p),n=0,t=q;n<t;n++)for(s=0;3>s;s++)g=18*n+6*s,q=9*n+3*s,d[g+0]=k[q],d[g+1]=k[q+1],d[g+2]=k[q+2],p=9*n+(s+1)%3*3,d[g+3]=k[p],d[g+4]=k[p+1],d[g+5]=k[p+2];h.addAttribute("position",new THREE.BufferAttribute(d,
3))}THREE.Line.call(this,h,new THREE.LineBasicMaterial({color:c}),THREE.LinePieces);this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1};THREE.WireframeHelper.prototype=Object.create(THREE.Line.prototype);THREE.WireframeHelper.prototype.constructor=THREE.WireframeHelper;THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(a){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.ImmediateRenderObject.prototype.constructor=THREE.ImmediateRenderObject;
THREE.MorphBlendMesh=function(a,b){THREE.Mesh.call(this,a,b);this.animationsMap={};this.animationsList=[];var c=this.geometry.morphTargets.length;this.createAnimation("__default",0,c-1,c/1);this.setAnimationWeight("__default",1)};THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphBlendMesh.prototype.constructor=THREE.MorphBlendMesh;
THREE.MorphBlendMesh.prototype.createAnimation=function(a,b,c,d){b={startFrame:b,endFrame:c,length:c-b+1,fps:d,duration:(c-b)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[a]=b;this.animationsList.push(b)};
THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(a){for(var b=/([a-z]+)_?(\d+)/,c,d={},e=this.geometry,f=0,g=e.morphTargets.length;f<g;f++){var h=e.morphTargets[f].name.match(b);if(h&&1<h.length){var k=h[1];d[k]||(d[k]={start:Infinity,end:-Infinity});h=d[k];f<h.start&&(h.start=f);f>h.end&&(h.end=f);c||(c=k)}}for(k in d)h=d[k],this.createAnimation(k,h.start,h.end,a);this.firstAnimation=c};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(a){if(a=this.animationsMap[a])a.direction=1,a.directionBackwards=!1};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(a){if(a=this.animationsMap[a])a.direction=-1,a.directionBackwards=!0};THREE.MorphBlendMesh.prototype.setAnimationFPS=function(a,b){var c=this.animationsMap[a];c&&(c.fps=b,c.duration=(c.end-c.start)/c.fps)};
THREE.MorphBlendMesh.prototype.setAnimationDuration=function(a,b){var c=this.animationsMap[a];c&&(c.duration=b,c.fps=(c.end-c.start)/c.duration)};THREE.MorphBlendMesh.prototype.setAnimationWeight=function(a,b){var c=this.animationsMap[a];c&&(c.weight=b)};THREE.MorphBlendMesh.prototype.setAnimationTime=function(a,b){var c=this.animationsMap[a];c&&(c.time=b)};THREE.MorphBlendMesh.prototype.getAnimationTime=function(a){var b=0;if(a=this.animationsMap[a])b=a.time;return b};
THREE.MorphBlendMesh.prototype.getAnimationDuration=function(a){var b=-1;if(a=this.animationsMap[a])b=a.duration;return b};THREE.MorphBlendMesh.prototype.playAnimation=function(a){var b=this.animationsMap[a];b?(b.time=0,b.active=!0):THREE.warn("THREE.MorphBlendMesh: animation["+a+"] undefined in .playAnimation()")};THREE.MorphBlendMesh.prototype.stopAnimation=function(a){if(a=this.animationsMap[a])a.active=!1};
THREE.MorphBlendMesh.prototype.update=function(a){for(var b=0,c=this.animationsList.length;b<c;b++){var d=this.animationsList[b];if(d.active){var e=d.duration/d.length;d.time+=d.direction*a;if(d.mirroredLoop){if(d.time>d.duration||0>d.time)d.direction*=-1,d.time>d.duration&&(d.time=d.duration,d.directionBackwards=!0),0>d.time&&(d.time=0,d.directionBackwards=!1)}else d.time%=d.duration,0>d.time&&(d.time+=d.duration);var f=d.startFrame+THREE.Math.clamp(Math.floor(d.time/e),0,d.length-1),g=d.weight;
f!==d.currentFrame&&(this.morphTargetInfluences[d.lastFrame]=0,this.morphTargetInfluences[d.currentFrame]=1*g,this.morphTargetInfluences[f]=0,d.lastFrame=d.currentFrame,d.currentFrame=f);e=d.time%e/e;d.directionBackwards&&(e=1-e);this.morphTargetInfluences[d.currentFrame]=e*g;this.morphTargetInfluences[d.lastFrame]=(1-e)*g}}};

// This THREEx helper makes it easy to handle window resize.
// It will update renderer and camera when window is resized.
//
// # Usage
//
// **Step 1**: Start updating renderer and camera
//
// ```var windowResize = new THREEx.WindowResize(aRenderer, aCamera)```
//    
// **Step 2**: stop updating renderer and camera
//
// ```windowResize.destroy()```
// # Code

//

/** @namespace */
var THREEx	= THREEx || {}

/**
 * Update renderer and camera when the window is resized
 * 
 * @param {Object} renderer the renderer to update
 * @param {Object} Camera the camera to update
 * @param {Function} dimension callback for renderer size
*/
THREEx.WindowResize	= function(renderer, camera, dimension){
	dimension 	= dimension || function(){ return { width: window.innerWidth, height: window.innerHeight } }
	var callback	= function(){
		// fetch target renderer size
		var rendererSize = dimension();
		// notify the renderer of the size change
		renderer.setSize( rendererSize.width, rendererSize.height )
		// update the camera
		camera.aspect	= rendererSize.width / rendererSize.height
		camera.updateProjectionMatrix()
	}
	// bind the resize event
	window.addEventListener('resize', callback, false)
	// return .stop() the function to stop watching window resize
	return {
		trigger	: function(){
			callback()
		},
		/**
		 * Stop watching window resize
		*/
		destroy	: function(){
			window.removeEventListener('resize', callback)
		}
	}
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXIvYW5ndWxhci5qcyIsImxvZGFzaC9sb2Rhc2gubWluLmpzIiwiYW5ndWxhci1ibG9jay11aS9kaXN0L2FuZ3VsYXItYmxvY2stdWkuanMiLCJhbmd1bGFyLWdyb3dsLTIvYnVpbGQvYW5ndWxhci1ncm93bC5taW4uanMiLCJuZ0RpYWxvZy9qcy9uZ0RpYWxvZy5taW4uanMiLCJkaXJQYWdpbmF0aW9uLmpzIiwiZmFjZWJvb2tTZGsuanMiLCJnb29nbGVBbmFseXRpY3MuanMiLCJ0aHJlZS5qcy9EZXRlY3Rvci5qcyIsInRocmVlLmpzL3RocmVlLm1pbi5qcyIsInRocmVlLmpzL3RocmVleC53aW5kb3dyZXNpemUuanMiXSwibmFtZXMiOlsid2luZG93IiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJtaW5FcnIiLCJpc0FycmF5TGlrZSIsIm9iaiIsImlzV2luZG93IiwibGVuZ3RoIiwibm9kZVR5cGUiLCJOT0RFX1RZUEVfRUxFTUVOVCIsImlzU3RyaW5nIiwiaXNBcnJheSIsImZvckVhY2giLCJpdGVyYXRvciIsImNvbnRleHQiLCJrZXkiLCJpc0Z1bmN0aW9uIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaXNQcmltaXRpdmUiLCJmb3JFYWNoU29ydGVkIiwia2V5cyIsIk9iamVjdCIsInNvcnQiLCJpIiwicmV2ZXJzZVBhcmFtcyIsIml0ZXJhdG9yRm4iLCJ2YWx1ZSIsIm5leHRVaWQiLCJ1aWQiLCJzZXRIYXNoS2V5IiwiaCIsIiQkaGFzaEtleSIsImV4dGVuZCIsImRzdCIsImlpIiwiYXJndW1lbnRzIiwiaiIsImpqIiwiaW50Iiwic3RyIiwicGFyc2VJbnQiLCJpbmhlcml0IiwicGFyZW50IiwiZXh0cmEiLCJwcm90b3R5cGUiLCJub29wIiwiaWRlbnRpdHkiLCIkIiwidmFsdWVGbiIsImlzVW5kZWZpbmVkIiwiaXNEZWZpbmVkIiwiaXNPYmplY3QiLCJpc051bWJlciIsImlzRGF0ZSIsInRvU3RyaW5nIiwiaXNSZWdFeHAiLCJpc1Njb3BlIiwiJGV2YWxBc3luYyIsIiR3YXRjaCIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsIm5vZGUiLCJub2RlTmFtZSIsInByb3AiLCJhdHRyIiwiZmluZCIsIm1ha2VNYXAiLCJpdGVtcyIsInNwbGl0Iiwibm9kZU5hbWVfIiwiZWxlbWVudCIsImxvd2VyY2FzZSIsImFycmF5UmVtb3ZlIiwiYXJyYXkiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJjb3B5Iiwic291cmNlIiwiZGVzdGluYXRpb24iLCJzdGFja1NvdXJjZSIsInN0YWNrRGVzdCIsIm5nTWluRXJyIiwicHVzaCIsInJlc3VsdCIsIkRhdGUiLCJnZXRUaW1lIiwiUmVnRXhwIiwibWF0Y2giLCJsYXN0SW5kZXgiLCJlbXB0eU9iamVjdCIsImNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwic2hhbGxvd0NvcHkiLCJzcmMiLCJjaGFyQXQiLCJlcXVhbHMiLCJvMSIsIm8yIiwidDEiLCJ0MiIsImtleVNldCIsImNvbmNhdCIsImFycmF5MSIsImFycmF5MiIsInNsaWNlIiwiYmluZCIsInNlbGYiLCJmbiIsImN1cnJ5QXJncyIsInN0YXJ0SW5kZXgiLCJhcHBseSIsInRvSnNvblJlcGxhY2VyIiwidmFsIiwidG9Kc29uIiwicHJldHR5IiwiSlNPTiIsInN0cmluZ2lmeSIsImZyb21Kc29uIiwianNvbiIsInBhcnNlIiwic3RhcnRpbmdUYWciLCJqcUxpdGUiLCJjbG9uZSIsImVtcHR5IiwiZSIsImVsZW1IdG1sIiwiYXBwZW5kIiwiaHRtbCIsIk5PREVfVFlQRV9URVhUIiwicmVwbGFjZSIsInRyeURlY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlS2V5VmFsdWUiLCJrZXlWYWx1ZSIsImtleV92YWx1ZSIsInRvS2V5VmFsdWUiLCJwYXJ0cyIsImFycmF5VmFsdWUiLCJlbmNvZGVVcmlRdWVyeSIsImpvaW4iLCJlbmNvZGVVcmlTZWdtZW50IiwicGN0RW5jb2RlU3BhY2VzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0TmdBdHRyaWJ1dGUiLCJuZ0F0dHIiLCJuZ0F0dHJQcmVmaXhlcyIsImFuZ3VsYXJJbml0IiwiYm9vdHN0cmFwIiwiYXBwRWxlbWVudCIsIm1vZHVsZSIsImNvbmZpZyIsInByZWZpeCIsIm5hbWUiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJjYW5kaWRhdGUiLCJxdWVyeVNlbGVjdG9yIiwic3RyaWN0RGkiLCJtb2R1bGVzIiwiZGVmYXVsdENvbmZpZyIsImRvQm9vdHN0cmFwIiwiaW5qZWN0b3IiLCJ0YWciLCJ1bnNoaWZ0IiwiJHByb3ZpZGUiLCJkZWJ1Z0luZm9FbmFibGVkIiwiJGNvbXBpbGVQcm92aWRlciIsImNyZWF0ZUluamVjdG9yIiwiaW52b2tlIiwiYm9vdHN0cmFwQXBwbHkiLCJzY29wZSIsImNvbXBpbGUiLCIkYXBwbHkiLCJkYXRhIiwiTkdfRU5BQkxFX0RFQlVHX0lORk8iLCJOR19ERUZFUl9CT09UU1RSQVAiLCJ0ZXN0IiwiYW5ndWxhciIsInJlc3VtZUJvb3RzdHJhcCIsImFuZ3VsYXIucmVzdW1lQm9vdHN0cmFwIiwiZXh0cmFNb2R1bGVzIiwicmVsb2FkV2l0aERlYnVnSW5mbyIsImxvY2F0aW9uIiwicmVsb2FkIiwiZ2V0VGVzdGFiaWxpdHkiLCJyb290RWxlbWVudCIsImdldCIsInNuYWtlX2Nhc2UiLCJzZXBhcmF0b3IiLCJTTkFLRV9DQVNFX1JFR0VYUCIsImxldHRlciIsInBvcyIsInRvTG93ZXJDYXNlIiwiYmluZEpRdWVyeSIsIm9yaWdpbmFsQ2xlYW5EYXRhIiwiYmluZEpRdWVyeUZpcmVkIiwialF1ZXJ5Iiwib24iLCJKUUxpdGVQcm90b3R5cGUiLCJpc29sYXRlU2NvcGUiLCJjb250cm9sbGVyIiwiaW5oZXJpdGVkRGF0YSIsImNsZWFuRGF0YSIsImpRdWVyeS5jbGVhbkRhdGEiLCJlbGVtcyIsImV2ZW50cyIsInNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhIiwiZWxlbSIsIl9kYXRhIiwiJGRlc3Ryb3kiLCJ0cmlnZ2VySGFuZGxlciIsIkpRTGl0ZSIsImFzc2VydEFyZyIsImFyZyIsInJlYXNvbiIsImFzc2VydEFyZ0ZuIiwiYWNjZXB0QXJyYXlBbm5vdGF0aW9uIiwiY29uc3RydWN0b3IiLCJhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSIsImdldHRlciIsInBhdGgiLCJiaW5kRm5Ub1Njb3BlIiwibGFzdEluc3RhbmNlIiwibGVuIiwiZ2V0QmxvY2tOb2RlcyIsIm5vZGVzIiwiZW5kTm9kZSIsImJsb2NrTm9kZXMiLCJuZXh0U2libGluZyIsImNyZWF0ZU1hcCIsInNldHVwTW9kdWxlTG9hZGVyIiwiZW5zdXJlIiwiZmFjdG9yeSIsIiRpbmplY3Rvck1pbkVyciIsIiQkbWluRXJyIiwicmVxdWlyZXMiLCJjb25maWdGbiIsImludm9rZUxhdGVyIiwicHJvdmlkZXIiLCJtZXRob2QiLCJpbnNlcnRNZXRob2QiLCJxdWV1ZSIsImludm9rZVF1ZXVlIiwibW9kdWxlSW5zdGFuY2UiLCJjb25maWdCbG9ja3MiLCJydW5CbG9ja3MiLCJfaW52b2tlUXVldWUiLCJfY29uZmlnQmxvY2tzIiwiX3J1bkJsb2NrcyIsInNlcnZpY2UiLCJjb25zdGFudCIsImFuaW1hdGlvbiIsImZpbHRlciIsImRpcmVjdGl2ZSIsInJ1biIsImJsb2NrIiwicHVibGlzaEV4dGVybmFsQVBJIiwidmVyc2lvbiIsInVwcGVyY2FzZSIsImNvdW50ZXIiLCJjc3AiLCJhbmd1bGFyTW9kdWxlIiwiJExvY2FsZVByb3ZpZGVyIiwibmdNb2R1bGUiLCIkJHNhbml0aXplVXJpIiwiJCRTYW5pdGl6ZVVyaVByb3ZpZGVyIiwiJENvbXBpbGVQcm92aWRlciIsImEiLCJodG1sQW5jaG9yRGlyZWN0aXZlIiwiaW5wdXQiLCJpbnB1dERpcmVjdGl2ZSIsInRleHRhcmVhIiwiZm9ybSIsImZvcm1EaXJlY3RpdmUiLCJzY3JpcHQiLCJzY3JpcHREaXJlY3RpdmUiLCJzZWxlY3QiLCJzZWxlY3REaXJlY3RpdmUiLCJzdHlsZSIsInN0eWxlRGlyZWN0aXZlIiwib3B0aW9uIiwib3B0aW9uRGlyZWN0aXZlIiwibmdCaW5kIiwibmdCaW5kRGlyZWN0aXZlIiwibmdCaW5kSHRtbCIsIm5nQmluZEh0bWxEaXJlY3RpdmUiLCJuZ0JpbmRUZW1wbGF0ZSIsIm5nQmluZFRlbXBsYXRlRGlyZWN0aXZlIiwibmdDbGFzcyIsIm5nQ2xhc3NEaXJlY3RpdmUiLCJuZ0NsYXNzRXZlbiIsIm5nQ2xhc3NFdmVuRGlyZWN0aXZlIiwibmdDbGFzc09kZCIsIm5nQ2xhc3NPZGREaXJlY3RpdmUiLCJuZ0Nsb2FrIiwibmdDbG9ha0RpcmVjdGl2ZSIsIm5nQ29udHJvbGxlciIsIm5nQ29udHJvbGxlckRpcmVjdGl2ZSIsIm5nRm9ybSIsIm5nRm9ybURpcmVjdGl2ZSIsIm5nSGlkZSIsIm5nSGlkZURpcmVjdGl2ZSIsIm5nSWYiLCJuZ0lmRGlyZWN0aXZlIiwibmdJbmNsdWRlIiwibmdJbmNsdWRlRGlyZWN0aXZlIiwibmdJbml0IiwibmdJbml0RGlyZWN0aXZlIiwibmdOb25CaW5kYWJsZSIsIm5nTm9uQmluZGFibGVEaXJlY3RpdmUiLCJuZ1BsdXJhbGl6ZSIsIm5nUGx1cmFsaXplRGlyZWN0aXZlIiwibmdSZXBlYXQiLCJuZ1JlcGVhdERpcmVjdGl2ZSIsIm5nU2hvdyIsIm5nU2hvd0RpcmVjdGl2ZSIsIm5nU3R5bGUiLCJuZ1N0eWxlRGlyZWN0aXZlIiwibmdTd2l0Y2giLCJuZ1N3aXRjaERpcmVjdGl2ZSIsIm5nU3dpdGNoV2hlbiIsIm5nU3dpdGNoV2hlbkRpcmVjdGl2ZSIsIm5nU3dpdGNoRGVmYXVsdCIsIm5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSIsIm5nT3B0aW9ucyIsIm5nT3B0aW9uc0RpcmVjdGl2ZSIsIm5nVHJhbnNjbHVkZSIsIm5nVHJhbnNjbHVkZURpcmVjdGl2ZSIsIm5nTW9kZWwiLCJuZ01vZGVsRGlyZWN0aXZlIiwibmdMaXN0IiwibmdMaXN0RGlyZWN0aXZlIiwibmdDaGFuZ2UiLCJuZ0NoYW5nZURpcmVjdGl2ZSIsInBhdHRlcm4iLCJwYXR0ZXJuRGlyZWN0aXZlIiwibmdQYXR0ZXJuIiwicmVxdWlyZWQiLCJyZXF1aXJlZERpcmVjdGl2ZSIsIm5nUmVxdWlyZWQiLCJtaW5sZW5ndGgiLCJtaW5sZW5ndGhEaXJlY3RpdmUiLCJuZ01pbmxlbmd0aCIsIm1heGxlbmd0aCIsIm1heGxlbmd0aERpcmVjdGl2ZSIsIm5nTWF4bGVuZ3RoIiwibmdWYWx1ZSIsIm5nVmFsdWVEaXJlY3RpdmUiLCJuZ01vZGVsT3B0aW9ucyIsIm5nTW9kZWxPcHRpb25zRGlyZWN0aXZlIiwibmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUiLCJuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyIsIm5nRXZlbnREaXJlY3RpdmVzIiwiJGFuY2hvclNjcm9sbCIsIiRBbmNob3JTY3JvbGxQcm92aWRlciIsIiRhbmltYXRlIiwiJEFuaW1hdGVQcm92aWRlciIsIiRicm93c2VyIiwiJEJyb3dzZXJQcm92aWRlciIsIiRjYWNoZUZhY3RvcnkiLCIkQ2FjaGVGYWN0b3J5UHJvdmlkZXIiLCIkY29udHJvbGxlciIsIiRDb250cm9sbGVyUHJvdmlkZXIiLCIkZG9jdW1lbnQiLCIkRG9jdW1lbnRQcm92aWRlciIsIiRleGNlcHRpb25IYW5kbGVyIiwiJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlciIsIiRmaWx0ZXIiLCIkRmlsdGVyUHJvdmlkZXIiLCIkaW50ZXJwb2xhdGUiLCIkSW50ZXJwb2xhdGVQcm92aWRlciIsIiRpbnRlcnZhbCIsIiRJbnRlcnZhbFByb3ZpZGVyIiwiJGh0dHAiLCIkSHR0cFByb3ZpZGVyIiwiJGh0dHBCYWNrZW5kIiwiJEh0dHBCYWNrZW5kUHJvdmlkZXIiLCIkbG9jYXRpb24iLCIkTG9jYXRpb25Qcm92aWRlciIsIiRsb2ciLCIkTG9nUHJvdmlkZXIiLCIkcGFyc2UiLCIkUGFyc2VQcm92aWRlciIsIiRyb290U2NvcGUiLCIkUm9vdFNjb3BlUHJvdmlkZXIiLCIkcSIsIiRRUHJvdmlkZXIiLCIkJHEiLCIkJFFQcm92aWRlciIsIiRzY2UiLCIkU2NlUHJvdmlkZXIiLCIkc2NlRGVsZWdhdGUiLCIkU2NlRGVsZWdhdGVQcm92aWRlciIsIiRzbmlmZmVyIiwiJFNuaWZmZXJQcm92aWRlciIsIiR0ZW1wbGF0ZUNhY2hlIiwiJFRlbXBsYXRlQ2FjaGVQcm92aWRlciIsIiR0ZW1wbGF0ZVJlcXVlc3QiLCIkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIiLCIkJHRlc3RhYmlsaXR5IiwiJCRUZXN0YWJpbGl0eVByb3ZpZGVyIiwiJHRpbWVvdXQiLCIkVGltZW91dFByb3ZpZGVyIiwiJHdpbmRvdyIsIiRXaW5kb3dQcm92aWRlciIsIiQkckFGIiwiJCRSQUZQcm92aWRlciIsIiQkYXN5bmNDYWxsYmFjayIsIiQkQXN5bmNDYWxsYmFja1Byb3ZpZGVyIiwiY2FtZWxDYXNlIiwiU1BFQ0lBTF9DSEFSU19SRUdFWFAiLCJfIiwib2Zmc2V0IiwidG9VcHBlckNhc2UiLCJNT1pfSEFDS19SRUdFWFAiLCJqcUxpdGVBY2NlcHRzRGF0YSIsIk5PREVfVFlQRV9ET0NVTUVOVCIsImpxTGl0ZUJ1aWxkRnJhZ21lbnQiLCJ0bXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJIVE1MX1JFR0VYUCIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsIlRBR19OQU1FX1JFR0VYUCIsImV4ZWMiLCJ3cmFwIiwid3JhcE1hcCIsIl9kZWZhdWx0IiwiaW5uZXJIVE1MIiwiWEhUTUxfVEFHX1JFR0VYUCIsImxhc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmaXJzdENoaWxkIiwidGV4dENvbnRlbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImFyZ0lzU3RyaW5nIiwidHJpbSIsImpxTGl0ZU1pbkVyciIsInBhcnNlZCIsIlNJTkdMRV9UQUdfUkVHRVhQIiwianFMaXRlQWRkTm9kZXMiLCJqcUxpdGVDbG9uZSIsImNsb25lTm9kZSIsImpxTGl0ZURlYWxvYyIsIm9ubHlEZXNjZW5kYW50cyIsImpxTGl0ZVJlbW92ZURhdGEiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGVzY2VuZGFudHMiLCJsIiwianFMaXRlT2ZmIiwidHlwZSIsInVuc3VwcG9ydGVkIiwiZXhwYW5kb1N0b3JlIiwianFMaXRlRXhwYW5kb1N0b3JlIiwiaGFuZGxlIiwibGlzdGVuZXJGbnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXhwYW5kb0lkIiwibmczMzkiLCJqcUNhY2hlIiwiY3JlYXRlSWZOZWNlc3NhcnkiLCJqcUlkIiwianFMaXRlRGF0YSIsImlzU2ltcGxlU2V0dGVyIiwiaXNTaW1wbGVHZXR0ZXIiLCJtYXNzR2V0dGVyIiwianFMaXRlSGFzQ2xhc3MiLCJzZWxlY3RvciIsImpxTGl0ZVJlbW92ZUNsYXNzIiwiY3NzQ2xhc3NlcyIsInNldEF0dHJpYnV0ZSIsImNzc0NsYXNzIiwianFMaXRlQWRkQ2xhc3MiLCJleGlzdGluZ0NsYXNzZXMiLCJyb290IiwiZWxlbWVudHMiLCJqcUxpdGVDb250cm9sbGVyIiwianFMaXRlSW5oZXJpdGVkRGF0YSIsImRvY3VtZW50RWxlbWVudCIsIm5hbWVzIiwicGFyZW50Tm9kZSIsIk5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCIsImhvc3QiLCJqcUxpdGVFbXB0eSIsInJlbW92ZUNoaWxkIiwianFMaXRlUmVtb3ZlIiwia2VlcERhdGEiLCJqcUxpdGVEb2N1bWVudExvYWRlZCIsImFjdGlvbiIsIndpbiIsInJlYWR5U3RhdGUiLCJzZXRUaW1lb3V0IiwiZ2V0Qm9vbGVhbkF0dHJOYW1lIiwiYm9vbGVhbkF0dHIiLCJCT09MRUFOX0FUVFIiLCJCT09MRUFOX0VMRU1FTlRTIiwiZ2V0QWxpYXNlZEF0dHJOYW1lIiwiQUxJQVNFRF9BVFRSIiwiY3JlYXRlRXZlbnRIYW5kbGVyIiwiZXZlbnRIYW5kbGVyIiwiZXZlbnQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwiZXZlbnRGbnMiLCJldmVudEZuc0xlbmd0aCIsImltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsIm9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RvcFByb3BhZ2F0aW9uIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImhhc2hLZXkiLCJuZXh0VWlkRm4iLCJvYmpUeXBlIiwiSGFzaE1hcCIsImlzb2xhdGVkVWlkIiwidGhpcy5uZXh0VWlkIiwicHV0IiwiYW5vbkZuIiwiYXJncyIsImZuVGV4dCIsIlNUUklQX0NPTU1FTlRTIiwiRk5fQVJHUyIsImFubm90YXRlIiwiJGluamVjdCIsImFyZ0RlY2wiLCJGTl9BUkdfU1BMSVQiLCJGTl9BUkciLCJhbGwiLCJ1bmRlcnNjb3JlIiwibGFzdCIsIm1vZHVsZXNUb0xvYWQiLCJzdXBwb3J0T2JqZWN0IiwiZGVsZWdhdGUiLCJwcm92aWRlcl8iLCJwcm92aWRlckluamVjdG9yIiwiaW5zdGFudGlhdGUiLCIkZ2V0IiwicHJvdmlkZXJDYWNoZSIsInByb3ZpZGVyU3VmZml4IiwiZW5mb3JjZVJldHVyblZhbHVlIiwiZW5mb3JjZWRSZXR1cm5WYWx1ZSIsImluc3RhbmNlSW5qZWN0b3IiLCJmYWN0b3J5Rm4iLCJlbmZvcmNlIiwibG9hZE1vZHVsZXMiLCJtb2R1bGVGbiIsInJ1bkludm9rZVF1ZXVlIiwiaW52b2tlQXJncyIsImxvYWRlZE1vZHVsZXMiLCJtZXNzYWdlIiwic3RhY2siLCJjcmVhdGVJbnRlcm5hbEluamVjdG9yIiwiY2FjaGUiLCJnZXRTZXJ2aWNlIiwic2VydmljZU5hbWUiLCJJTlNUQU5USUFUSU5HIiwiZXJyIiwic2hpZnQiLCJsb2NhbHMiLCJUeXBlIiwiQ29uc3RydWN0b3IiLCJpbnN0YW5jZSIsInJldHVybmVkVmFsdWUiLCJoYXMiLCIkaW5qZWN0b3IiLCJpbnN0YW5jZUNhY2hlIiwiZGVjb3JhdG9yIiwiZGVjb3JGbiIsIm9yaWdQcm92aWRlciIsIm9yaWckZ2V0Iiwib3JpZ1Byb3ZpZGVyLiRnZXQiLCJvcmlnSW5zdGFuY2UiLCIkZGVsZWdhdGUiLCJzZXJ2aWNlbmFtZSIsImF1dG9TY3JvbGxpbmdFbmFibGVkIiwiZGlzYWJsZUF1dG9TY3JvbGxpbmciLCJ0aGlzLmRpc2FibGVBdXRvU2Nyb2xsaW5nIiwiZ2V0Rmlyc3RBbmNob3IiLCJsaXN0IiwiQXJyYXkiLCJzb21lIiwic2Nyb2xsVG8iLCJzY3JvbGxJbnRvVmlldyIsInNjcm9sbCIsInlPZmZzZXQiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJlbGVtVG9wIiwidG9wIiwic2Nyb2xsQnkiLCJoYXNoIiwiZWxtIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF1dG9TY3JvbGxXYXRjaCIsImF1dG9TY3JvbGxXYXRjaEFjdGlvbiIsIm5ld1ZhbCIsIm9sZFZhbCIsInN1cHBvcnRlZCIsIkJyb3dzZXIiLCJjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIm91dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwib3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzIiwicG9wIiwiZXJyb3IiLCJzdGFydFBvbGxlciIsImludGVydmFsIiwiY2hlY2siLCJwb2xsRm5zIiwicG9sbEZuIiwicG9sbFRpbWVvdXQiLCJjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSIsImNhY2hlU3RhdGUiLCJmaXJlVXJsQ2hhbmdlIiwiY2FjaGVkU3RhdGUiLCJoaXN0b3J5Iiwic3RhdGUiLCJsYXN0Q2FjaGVkU3RhdGUiLCJsYXN0QnJvd3NlclVybCIsInVybCIsImxhc3RIaXN0b3J5U3RhdGUiLCJ1cmxDaGFuZ2VMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsInNhZmVEZWNvZGVVUklDb21wb25lbnQiLCJyYXdEb2N1bWVudCIsImNsZWFyVGltZW91dCIsInBlbmRpbmdEZWZlcklkcyIsImlzTW9jayIsIiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QiLCIkJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwic2VsZi4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwibm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyIsInNlbGYubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyIsImNhbGxiYWNrIiwiYWRkUG9sbEZuIiwic2VsZi5hZGRQb2xsRm4iLCJocmVmIiwiYmFzZUVsZW1lbnQiLCJyZWxvYWRMb2NhdGlvbiIsInNlbGYudXJsIiwic2FtZVN0YXRlIiwic2FtZUJhc2UiLCJzdHJpcEhhc2giLCJzZWxmLnN0YXRlIiwidXJsQ2hhbmdlSW5pdCIsIm9uVXJsQ2hhbmdlIiwic2VsZi5vblVybENoYW5nZSIsIiQkY2hlY2tVcmxDaGFuZ2UiLCJiYXNlSHJlZiIsInNlbGYuYmFzZUhyZWYiLCJsYXN0Q29va2llcyIsImxhc3RDb29raWVTdHJpbmciLCJjb29raWVQYXRoIiwiY29va2llcyIsInNlbGYuY29va2llcyIsImNvb2tpZUxlbmd0aCIsImNvb2tpZSIsIndhcm4iLCJjb29raWVBcnJheSIsInN1YnN0cmluZyIsImRlZmVyIiwic2VsZi5kZWZlciIsImRlbGF5IiwidGltZW91dElkIiwiY2FuY2VsIiwic2VsZi5kZWZlci5jYW5jZWwiLCJkZWZlcklkIiwidGhpcy4kZ2V0IiwiY2FjaGVGYWN0b3J5IiwiY2FjaGVJZCIsIm9wdGlvbnMiLCJyZWZyZXNoIiwiZW50cnkiLCJmcmVzaEVuZCIsInN0YWxlRW5kIiwibiIsImxpbmsiLCJwIiwibmV4dEVudHJ5IiwicHJldkVudHJ5IiwiY2FjaGVzIiwic2l6ZSIsInN0YXRzIiwiaWQiLCJjYXBhY2l0eSIsIk51bWJlciIsIk1BWF9WQUxVRSIsImxydUhhc2giLCJscnVFbnRyeSIsInJlbW92ZSIsInJlbW92ZUFsbCIsImRlc3Ryb3kiLCJpbmZvIiwiY2FjaGVGYWN0b3J5LmluZm8iLCJjYWNoZUZhY3RvcnkuZ2V0IiwiJCRzYW5pdGl6ZVVyaVByb3ZpZGVyIiwicGFyc2VJc29sYXRlQmluZGluZ3MiLCJkaXJlY3RpdmVOYW1lIiwiTE9DQUxfUkVHRVhQIiwiYmluZGluZ3MiLCJkZWZpbml0aW9uIiwic2NvcGVOYW1lIiwiJGNvbXBpbGVNaW5FcnIiLCJtb2RlIiwiY29sbGVjdGlvbiIsIm9wdGlvbmFsIiwiYXR0ck5hbWUiLCJoYXNEaXJlY3RpdmVzIiwiQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQIiwiQ0xBU1NfRElSRUNUSVZFX1JFR0VYUCIsIkFMTF9PUl9OT1RISU5HX0FUVFJTIiwiUkVRVUlSRV9QUkVGSVhfUkVHRVhQIiwiRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCIsInRoaXMuZGlyZWN0aXZlIiwicmVnaXN0ZXJEaXJlY3RpdmUiLCJkaXJlY3RpdmVGYWN0b3J5IiwiU3VmZml4IiwiZGlyZWN0aXZlcyIsInByaW9yaXR5IiwicmVxdWlyZSIsInJlc3RyaWN0IiwiJCRpc29sYXRlQmluZGluZ3MiLCJhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCIsInRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QiLCJyZWdleHAiLCJpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QiLCJ0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCIsInRoaXMuZGVidWdJbmZvRW5hYmxlZCIsImVuYWJsZWQiLCJzYWZlQWRkQ2xhc3MiLCIkZWxlbWVudCIsImNsYXNzTmFtZSIsImFkZENsYXNzIiwiJGNvbXBpbGVOb2RlcyIsInRyYW5zY2x1ZGVGbiIsIm1heFByaW9yaXR5IiwiaWdub3JlRGlyZWN0aXZlIiwicHJldmlvdXNDb21waWxlQ29udGV4dCIsIm5vZGVWYWx1ZSIsImNvbXBvc2l0ZUxpbmtGbiIsImNvbXBpbGVOb2RlcyIsIiQkYWRkU2NvcGVDbGFzcyIsIm5hbWVzcGFjZSIsInB1YmxpY0xpbmtGbiIsImNsb25lQ29ubmVjdEZuIiwidHJhbnNjbHVkZUNvbnRyb2xsZXJzIiwicGFyZW50Qm91bmRUcmFuc2NsdWRlRm4iLCJmdXR1cmVQYXJlbnRFbGVtZW50IiwiJGxpbmtOb2RlIiwid3JhcFRlbXBsYXRlIiwiY29udHJvbGxlck5hbWUiLCIkJGFkZFNjb3BlSW5mbyIsIm5vZGVMaXN0IiwiJHJvb3RFbGVtZW50IiwiY2hpbGRMaW5rRm4iLCJjaGlsZFNjb3BlIiwiY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiIsInN0YWJsZU5vZGVMaXN0Iiwibm9kZUxpbmtGbkZvdW5kIiwibGlua0ZucyIsImlkeCIsIm5vZGVMaW5rRm4iLCIkbmV3IiwidHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQiLCJjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbiIsInRyYW5zY2x1ZGUiLCJlbGVtZW50VHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQiLCJ0ZW1wbGF0ZU9uVGhpc0VsZW1lbnQiLCJhdHRycyIsImxpbmtGbkZvdW5kIiwiQXR0cmlidXRlcyIsImNvbGxlY3REaXJlY3RpdmVzIiwiYXBwbHlEaXJlY3RpdmVzVG9Ob2RlIiwiJCRlbGVtZW50IiwidGVybWluYWwiLCJwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuIiwiZWxlbWVudFRyYW5zY2x1c2lvbiIsImJvdW5kVHJhbnNjbHVkZUZuIiwidHJhbnNjbHVkZWRTY29wZSIsImNsb25lRm4iLCJjb250cm9sbGVycyIsImNvbnRhaW5pbmdTY29wZSIsIiQkdHJhbnNjbHVkZWQiLCJhdHRyc01hcCIsIiRhdHRyIiwiYWRkRGlyZWN0aXZlIiwiZGlyZWN0aXZlTm9ybWFsaXplIiwibk5hbWUiLCJpc05nQXR0ciIsIm5BdHRycyIsImF0dHJpYnV0ZXMiLCJhdHRyU3RhcnROYW1lIiwiYXR0ckVuZE5hbWUiLCJuZ0F0dHJOYW1lIiwiTkdfQVRUUl9CSU5ESU5HIiwic3Vic3RyIiwiZGlyZWN0aXZlTk5hbWUiLCJtdWx0aUVsZW1lbnQiLCJhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJOT0RFX1RZUEVfQ09NTUVOVCIsImJ5UHJpb3JpdHkiLCJncm91cFNjYW4iLCJhdHRyU3RhcnQiLCJhdHRyRW5kIiwiZGVwdGgiLCJncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlciIsImxpbmtGbiIsImNvbXBpbGVOb2RlIiwidGVtcGxhdGVBdHRycyIsImpxQ29sbGVjdGlvbiIsIm9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSIsInByZUxpbmtGbnMiLCJwb3N0TGlua0ZucyIsImFkZExpbmtGbnMiLCJwcmUiLCJwb3N0IiwibmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIiwiJCRpc29sYXRlU2NvcGUiLCJjbG9uZUFuZEFubm90YXRlRm4iLCJnZXRDb250cm9sbGVycyIsImVsZW1lbnRDb250cm9sbGVycyIsInJldHJpZXZhbE1ldGhvZCIsIiRzZWFyY2hFbGVtZW50IiwibGlua05vZGUiLCJjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZSIsImNsb25lQXR0YWNoRm4iLCJoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSIsInNjb3BlVG9DaGlsZCIsImNvbnRyb2xsZXJEaXJlY3RpdmVzIiwiJHNjb3BlIiwiJGF0dHJzIiwiJHRyYW5zY2x1ZGUiLCJjb250cm9sbGVySW5zdGFuY2UiLCJjb250cm9sbGVyQXMiLCJ0ZW1wbGF0ZURpcmVjdGl2ZSIsIiQkb3JpZ2luYWxEaXJlY3RpdmUiLCJpc29sYXRlU2NvcGVDb250cm9sbGVyIiwiaXNvbGF0ZUJpbmRpbmdDb250ZXh0IiwiaWRlbnRpZmllciIsImJpbmRUb0NvbnRyb2xsZXIiLCJsYXN0VmFsdWUiLCJwYXJlbnRHZXQiLCJwYXJlbnRTZXQiLCJjb21wYXJlIiwiJG9ic2VydmUiLCIkJG9ic2VydmVycyIsIiQkc2NvcGUiLCJsaXRlcmFsIiwiYiIsImFzc2lnbiIsInBhcmVudFZhbHVlV2F0Y2giLCJwYXJlbnRWYWx1ZSIsIiRzdGF0ZWZ1bCIsInVud2F0Y2giLCIkd2F0Y2hDb2xsZWN0aW9uIiwiJG9uIiwiaW52b2tlTGlua0ZuIiwidGVtcGxhdGUiLCJ0ZW1wbGF0ZVVybCIsInRlcm1pbmFsUHJpb3JpdHkiLCJuZXdTY29wZURpcmVjdGl2ZSIsIm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUiLCJoYXNUcmFuc2NsdWRlRGlyZWN0aXZlIiwiaGFzVGVtcGxhdGUiLCIkY29tcGlsZU5vZGUiLCIkdGVtcGxhdGUiLCJjaGlsZFRyYW5zY2x1ZGVGbiIsIiQkc3RhcnQiLCIkJGVuZCIsImRpcmVjdGl2ZVZhbHVlIiwiYXNzZXJ0Tm9EdXBsaWNhdGUiLCIkJHRsYiIsImNyZWF0ZUNvbW1lbnQiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VEaXJlY3RpdmUiLCJjb250ZW50cyIsImRlbm9ybWFsaXplVGVtcGxhdGUiLCJyZW1vdmVDb21tZW50cyIsInRlbXBsYXRlTmFtZXNwYWNlIiwibmV3VGVtcGxhdGVBdHRycyIsInRlbXBsYXRlRGlyZWN0aXZlcyIsInVucHJvY2Vzc2VkRGlyZWN0aXZlcyIsIm1hcmtEaXJlY3RpdmVzQXNJc29sYXRlIiwibWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXMiLCJjb21waWxlVGVtcGxhdGVVcmwiLCJNYXRoIiwibWF4IiwidERpcmVjdGl2ZXMiLCJzdGFydEF0dHJOYW1lIiwiZW5kQXR0ck5hbWUiLCJzcmNBdHRyIiwiZHN0QXR0ciIsIiRzZXQiLCJ0QXR0cnMiLCJsaW5rUXVldWUiLCJhZnRlclRlbXBsYXRlTm9kZUxpbmtGbiIsImFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiIsImJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUiLCJvcmlnQXN5bmNEaXJlY3RpdmUiLCJkZXJpdmVkU3luY0RpcmVjdGl2ZSIsImdldFRydXN0ZWRSZXNvdXJjZVVybCIsInRoZW4iLCJjb250ZW50IiwidGVtcFRlbXBsYXRlQXR0cnMiLCJiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlIiwibGlua1Jvb3RFbGVtZW50IiwiJCRkZXN0cm95ZWQiLCJvbGRDbGFzc2VzIiwiZGVsYXllZE5vZGVMaW5rRm4iLCJpZ25vcmVDaGlsZExpbmtGbiIsImRpZmYiLCJ3aGF0IiwicHJldmlvdXNEaXJlY3RpdmUiLCJ0ZXh0IiwiaW50ZXJwb2xhdGVGbiIsInRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbiIsInRlbXBsYXRlTm9kZSIsInRlbXBsYXRlTm9kZVBhcmVudCIsImhhc0NvbXBpbGVQYXJlbnQiLCIkJGFkZEJpbmRpbmdDbGFzcyIsInRleHRJbnRlcnBvbGF0ZUxpbmtGbiIsIiQkYWRkQmluZGluZ0luZm8iLCJleHByZXNzaW9ucyIsImludGVycG9sYXRlRm5XYXRjaEFjdGlvbiIsIndyYXBwZXIiLCJnZXRUcnVzdGVkQ29udGV4dCIsImF0dHJOb3JtYWxpemVkTmFtZSIsIkhUTUwiLCJSRVNPVVJDRV9VUkwiLCJhbGxPck5vdGhpbmciLCJhdHRySW50ZXJwb2xhdGVQcmVMaW5rRm4iLCIkJGludGVyIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIiR1cGRhdGVDbGFzcyIsImVsZW1lbnRzVG9SZW1vdmUiLCJuZXdOb2RlIiwiZmlyc3RFbGVtZW50VG9SZW1vdmUiLCJyZW1vdmVDb3VudCIsImoyIiwicmVwbGFjZUNoaWxkIiwiZXhwYW5kbyIsImsiLCJrayIsImFubm90YXRpb24iLCJhdHRyaWJ1dGVzVG9Db3B5IiwiJG5vcm1hbGl6ZSIsIiRhZGRDbGFzcyIsImNsYXNzVmFsIiwiJHJlbW92ZUNsYXNzIiwicmVtb3ZlQ2xhc3MiLCJuZXdDbGFzc2VzIiwidG9BZGQiLCJ0b2tlbkRpZmZlcmVuY2UiLCJ0b1JlbW92ZSIsIndyaXRlQXR0ciIsImJvb2xlYW5LZXkiLCJhbGlhc2VkS2V5Iiwib2JzZXJ2ZXIiLCJ0cmltbWVkU3Jjc2V0Iiwic3JjUGF0dGVybiIsInJhd1VyaXMiLCJuYnJVcmlzV2l0aDJwYXJ0cyIsImZsb29yIiwiaW5uZXJJZHgiLCJsYXN0VHVwbGUiLCJyZW1vdmVBdHRyIiwibGlzdGVuZXJzIiwic3RhcnRTeW1ib2wiLCJlbmRTeW1ib2wiLCJiaW5kaW5nIiwiaXNvbGF0ZWQiLCJub1RlbXBsYXRlIiwiZGF0YU5hbWUiLCJQUkVGSVhfUkVHRVhQIiwic3RyMSIsInN0cjIiLCJ2YWx1ZXMiLCJ0b2tlbnMxIiwidG9rZW5zMiIsInRva2VuIiwianFOb2RlcyIsImdsb2JhbHMiLCJDTlRSTF9SRUciLCJyZWdpc3RlciIsInRoaXMucmVnaXN0ZXIiLCJhbGxvd0dsb2JhbHMiLCJ0aGlzLmFsbG93R2xvYmFscyIsImFkZElkZW50aWZpZXIiLCJleHByZXNzaW9uIiwibGF0ZXIiLCJpZGVudCIsImV4Y2VwdGlvbiIsImNhdXNlIiwiZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybSIsImhlYWRlcnMiLCJKU09OX1BST1RFQ1RJT05fUFJFRklYIiwiY29udGVudFR5cGUiLCJBUFBMSUNBVElPTl9KU09OIiwiSlNPTl9TVEFSVCIsIkpTT05fRU5EIiwicGFyc2VIZWFkZXJzIiwibGluZSIsImhlYWRlcnNHZXR0ZXIiLCJoZWFkZXJzT2JqIiwidHJhbnNmb3JtRGF0YSIsImZucyIsImRlZmF1bHRzIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZCIsImNvbW1vbiIsIkNPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OIiwicGF0Y2giLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwidXNlQXBwbHlBc3luYyIsInRoaXMudXNlQXBwbHlBc3luYyIsImludGVyY2VwdG9yRmFjdG9yaWVzIiwiaW50ZXJjZXB0b3JzIiwicmVxdWVzdENvbmZpZyIsInJlc3BvbnNlIiwicmVzcCIsInN0YXR1cyIsInJlamVjdCIsIm1lcmdlSGVhZGVycyIsImRlZkhlYWRlcnMiLCJyZXFIZWFkZXJzIiwiZGVmSGVhZGVyTmFtZSIsInJlcUhlYWRlck5hbWUiLCJsb3dlcmNhc2VEZWZIZWFkZXJOYW1lIiwiZXhlY0hlYWRlcnMiLCJoZWFkZXJDb250ZW50IiwiaGVhZGVyRm4iLCJoZWFkZXIiLCJjaGFpbiIsInNlcnZlclJlcXVlc3QiLCJyZXFEYXRhIiwid2l0aENyZWRlbnRpYWxzIiwic2VuZFJlcSIsInByb21pc2UiLCJ3aGVuIiwicmV2ZXJzZWRJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlcXVlc3QiLCJyZXF1ZXN0RXJyb3IiLCJyZXNwb25zZUVycm9yIiwidGhlbkZuIiwicmVqZWN0Rm4iLCJzdWNjZXNzIiwicHJvbWlzZS5zdWNjZXNzIiwicHJvbWlzZS5lcnJvciIsImRvbmUiLCJoZWFkZXJzU3RyaW5nIiwic3RhdHVzVGV4dCIsInJlc29sdmVIdHRwUHJvbWlzZSIsInJlc29sdmVQcm9taXNlIiwiJGFwcGx5QXN5bmMiLCIkJHBoYXNlIiwiZGVmZXJyZWQiLCJyZXNvbHZlIiwicmVtb3ZlUGVuZGluZ1JlcSIsInBlbmRpbmdSZXF1ZXN0cyIsImNhY2hlZFJlc3AiLCJidWlsZFVybCIsInBhcmFtcyIsImRlZmF1bHRDYWNoZSIsInhzcmZWYWx1ZSIsInVybElzU2FtZU9yaWdpbiIsInRpbWVvdXQiLCJyZXNwb25zZVR5cGUiLCJ2IiwidG9JU09TdHJpbmciLCJpbnRlcmNlcHRvckZhY3RvcnkiLCJjcmVhdGVTaG9ydE1ldGhvZHMiLCJjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YSIsImNyZWF0ZVhociIsIlhNTEh0dHBSZXF1ZXN0IiwiY3JlYXRlSHR0cEJhY2tlbmQiLCJjYWxsYmFja3MiLCIkYnJvd3NlckRlZmVyIiwianNvbnBSZXEiLCJjYWxsYmFja0lkIiwiYXN5bmMiLCJib2R5IiwiY2FsbGVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRpbWVvdXRSZXF1ZXN0IiwianNvbnBEb25lIiwieGhyIiwiYWJvcnQiLCJjb21wbGV0ZVJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ubG9hZCIsInhoci5vbmxvYWQiLCJyZXNwb25zZVRleHQiLCJ1cmxSZXNvbHZlIiwicHJvdG9jb2wiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJvbmVycm9yIiwib25hYm9ydCIsInNlbmQiLCJ0aGlzLnN0YXJ0U3ltYm9sIiwidGhpcy5lbmRTeW1ib2wiLCJlc2NhcGUiLCJjaCIsIm11c3RIYXZlRXhwcmVzc2lvbiIsInRydXN0ZWRDb250ZXh0IiwidW5lc2NhcGVUZXh0IiwiZXNjYXBlZFN0YXJ0UmVnZXhwIiwiZXNjYXBlZEVuZFJlZ2V4cCIsInBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IiLCJnZXRUcnVzdGVkIiwidmFsdWVPZiIsIm5ld0VyciIsIiRpbnRlcnBvbGF0ZU1pbkVyciIsImVuZEluZGV4IiwicGFyc2VGbnMiLCJ0ZXh0TGVuZ3RoIiwiZXhwcmVzc2lvblBvc2l0aW9ucyIsInN0YXJ0U3ltYm9sTGVuZ3RoIiwiZXhwIiwiZW5kU3ltYm9sTGVuZ3RoIiwiY29tcHV0ZSIsImludGVycG9sYXRpb25GbiIsIiQkd2F0Y2hEZWxlZ2F0ZSIsIm9iamVjdEVxdWFsaXR5IiwiJHdhdGNoR3JvdXAiLCJpbnRlcnBvbGF0ZUZuV2F0Y2hlciIsIm9sZFZhbHVlcyIsImN1cnJWYWx1ZSIsIiRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCIsIiRpbnRlcnBvbGF0ZS5lbmRTeW1ib2wiLCJjb3VudCIsImludm9rZUFwcGx5Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaXRlcmF0aW9uIiwic2tpcEFwcGx5IiwiJCRpbnRlcnZhbElkIiwidGljayIsIm5vdGlmeSIsImludGVydmFscyIsImludGVydmFsLmNhbmNlbCIsIk5VTUJFUl9GT1JNQVRTIiwiREVDSU1BTF9TRVAiLCJHUk9VUF9TRVAiLCJQQVRURVJOUyIsIm1pbkludCIsIm1pbkZyYWMiLCJtYXhGcmFjIiwicG9zUHJlIiwicG9zU3VmIiwibmVnUHJlIiwibmVnU3VmIiwiZ1NpemUiLCJsZ1NpemUiLCJDVVJSRU5DWV9TWU0iLCJEQVRFVElNRV9GT1JNQVRTIiwiTU9OVEgiLCJTSE9SVE1PTlRIIiwiREFZIiwiU0hPUlREQVkiLCJBTVBNUyIsIm1lZGl1bSIsImZ1bGxEYXRlIiwibG9uZ0RhdGUiLCJtZWRpdW1EYXRlIiwic2hvcnREYXRlIiwibWVkaXVtVGltZSIsInNob3J0VGltZSIsInBsdXJhbENhdCIsIm51bSIsImVuY29kZVBhdGgiLCJzZWdtZW50cyIsInBhcnNlQWJzb2x1dGVVcmwiLCJhYnNvbHV0ZVVybCIsImxvY2F0aW9uT2JqIiwiYXBwQmFzZSIsInBhcnNlZFVybCIsIiQkcHJvdG9jb2wiLCIkJGhvc3QiLCJob3N0bmFtZSIsIiQkcG9ydCIsInBvcnQiLCJERUZBVUxUX1BPUlRTIiwicGFyc2VBcHBVcmwiLCJyZWxhdGl2ZVVybCIsInByZWZpeGVkIiwiJCRwYXRoIiwicGF0aG5hbWUiLCIkJHNlYXJjaCIsInNlYXJjaCIsIiQkaGFzaCIsImJlZ2luc1dpdGgiLCJiZWdpbiIsIndob2xlIiwic3RyaXBGaWxlIiwibGFzdEluZGV4T2YiLCJMb2NhdGlvbkh0bWw1VXJsIiwiYmFzZVByZWZpeCIsIiQkaHRtbDUiLCJhcHBCYXNlTm9GaWxlIiwiJCRwYXJzZSIsInRoaXMuJCRwYXJzZSIsInBhdGhVcmwiLCIkbG9jYXRpb25NaW5FcnIiLCIkJGNvbXBvc2UiLCJ0aGlzLiQkY29tcG9zZSIsIiQkdXJsIiwiJCRhYnNVcmwiLCIkJHBhcnNlTGlua1VybCIsInRoaXMuJCRwYXJzZUxpbmtVcmwiLCJyZWxIcmVmIiwiYXBwVXJsIiwicHJldkFwcFVybCIsInJld3JpdHRlblVybCIsIkxvY2F0aW9uSGFzaGJhbmdVcmwiLCJoYXNoUHJlZml4Iiwid2l0aG91dEJhc2VVcmwiLCJ3aXRob3V0SGFzaFVybCIsIndpbmRvd3NGaWxlUGF0aEV4cCIsImZpcnN0UGF0aFNlZ21lbnRNYXRjaCIsIkxvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsIiwibG9jYXRpb25HZXR0ZXIiLCJwcm9wZXJ0eSIsImxvY2F0aW9uR2V0dGVyU2V0dGVyIiwicHJlcHJvY2VzcyIsImh0bWw1TW9kZSIsInJlcXVpcmVCYXNlIiwicmV3cml0ZUxpbmtzIiwidGhpcy5oYXNoUHJlZml4IiwidGhpcy5odG1sNU1vZGUiLCJzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrIiwib2xkVXJsIiwib2xkU3RhdGUiLCIkJHN0YXRlIiwiYWZ0ZXJMb2NhdGlvbkNoYW5nZSIsIiRicm9hZGNhc3QiLCJhYnNVcmwiLCJMb2NhdGlvbk1vZGUiLCJpbml0aWFsVXJsIiwiSUdOT1JFX1VSSV9SRUdFWFAiLCJjdHJsS2V5IiwibWV0YUtleSIsIndoaWNoIiwidGFyZ2V0IiwiYWJzSHJlZiIsImFuaW1WYWwiLCJwcmV2ZW50RGVmYXVsdCIsImluaXRpYWxpemluZyIsIm5ld1VybCIsIm5ld1N0YXRlIiwiJGRpZ2VzdCIsIiRsb2NhdGlvbldhdGNoIiwiY3VycmVudFJlcGxhY2UiLCIkJHJlcGxhY2UiLCJ1cmxPclN0YXRlQ2hhbmdlZCIsImRlYnVnIiwiZGVidWdFbmFibGVkIiwidGhpcy5kZWJ1Z0VuYWJsZWQiLCJmbGFnIiwiZm9ybWF0RXJyb3IiLCJFcnJvciIsInNvdXJjZVVSTCIsImNvbnNvbGVMb2ciLCJjb25zb2xlIiwibG9nRm4iLCJsb2ciLCJoYXNBcHBseSIsImFyZzEiLCJhcmcyIiwiZW5zdXJlU2FmZU1lbWJlck5hbWUiLCJmdWxsRXhwcmVzc2lvbiIsIiRwYXJzZU1pbkVyciIsImVuc3VyZVNhZmVPYmplY3QiLCJjaGlsZHJlbiIsImlzQ29uc3RhbnQiLCJzZXR0ZXIiLCJzZXRWYWx1ZSIsImZ1bGxFeHAiLCJwcm9wZXJ0eU9iaiIsImNzcFNhZmVHZXR0ZXJGbiIsImtleTAiLCJrZXkxIiwia2V5MiIsImtleTMiLCJrZXk0IiwiY3NwU2FmZUdldHRlciIsInBhdGhWYWwiLCJnZXR0ZXJGbiIsImdldHRlckZuQ2FjaGUiLCJwYXRoS2V5cyIsInBhdGhLZXlzTGVuZ3RoIiwiY29kZSIsImV2YWxlZEZuR2V0dGVyIiwiRnVuY3Rpb24iLCJzaGFyZWRHZXR0ZXIiLCJmbi5hc3NpZ24iLCJnZXRWYWx1ZU9mIiwib2JqZWN0VmFsdWVPZiIsIiRwYXJzZU9wdGlvbnMiLCJ3cmFwU2hhcmVkRXhwcmVzc2lvbiIsIndyYXBwZWQiLCJjb2xsZWN0RXhwcmVzc2lvbklucHV0cyIsImlucHV0cyIsImV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2siLCJvbGRWYWx1ZU9mVmFsdWUiLCJpbnB1dHNXYXRjaERlbGVnYXRlIiwicGFyc2VkRXhwcmVzc2lvbiIsImlucHV0RXhwcmVzc2lvbnMiLCIkJGlucHV0cyIsImxhc3RSZXN1bHQiLCJvbGRJbnB1dFZhbHVlIiwiZXhwcmVzc2lvbklucHV0V2F0Y2giLCJuZXdJbnB1dFZhbHVlIiwib2xkSW5wdXRWYWx1ZU9mVmFsdWVzIiwiZXhwcmVzc2lvbklucHV0c1dhdGNoIiwiY2hhbmdlZCIsIm9uZVRpbWVXYXRjaERlbGVnYXRlIiwib25lVGltZVdhdGNoIiwib25lVGltZUxpc3RlbmVyIiwib2xkIiwiJCRwb3N0RGlnZXN0Iiwib25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIiwiaXNBbGxEZWZpbmVkIiwiYWxsRGVmaW5lZCIsImNvbnN0YW50V2F0Y2hEZWxlZ2F0ZSIsImNvbnN0YW50V2F0Y2giLCJjb25zdGFudExpc3RlbmVyIiwiYWRkSW50ZXJjZXB0b3IiLCJpbnRlcmNlcHRvckZuIiwib25lVGltZSIsImNhY2hlS2V5IiwibGV4ZXIiLCJMZXhlciIsInBhcnNlciIsIlBhcnNlciIsInFGYWN0b3J5IiwibmV4dFRpY2siLCJleGNlcHRpb25IYW5kbGVyIiwiY2FsbE9uY2UiLCJyZXNvbHZlRm4iLCJQcm9taXNlIiwic2ltcGxlQmluZCIsInNjaGVkdWxlUHJvY2Vzc1F1ZXVlIiwicHJvY2Vzc1NjaGVkdWxlZCIsInBlbmRpbmciLCJEZWZlcnJlZCIsIiRxTWluRXJyIiwiVHlwZUVycm9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwicHJvZ3Jlc3NCYWNrIiwiY2F0Y2giLCJmaW5hbGx5IiwiaGFuZGxlQ2FsbGJhY2siLCIkJHJlamVjdCIsIiQkcmVzb2x2ZSIsInByb2dyZXNzIiwibWFrZVByb21pc2UiLCJyZXNvbHZlZCIsImlzUmVzb2x2ZWQiLCJjYWxsYmFja091dHB1dCIsImVycmJhY2siLCIkUSIsIlEiLCJyZXNvbHZlciIsInByb21pc2VzIiwicmVzdWx0cyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZlN1cHBvcnRlZCIsInJhZiIsInRpbWVyIiwiVFRMIiwiJHJvb3RTY29wZU1pbkVyciIsImxhc3REaXJ0eVdhdGNoIiwiYXBwbHlBc3luY0lkIiwiZGlnZXN0VHRsIiwidGhpcy5kaWdlc3RUdGwiLCJTY29wZSIsIiRpZCIsIiRwYXJlbnQiLCIkJHdhdGNoZXJzIiwiJCRuZXh0U2libGluZyIsIiQkcHJldlNpYmxpbmciLCIkJGNoaWxkSGVhZCIsIiQkY2hpbGRUYWlsIiwiJHJvb3QiLCIkJGxpc3RlbmVycyIsIiQkbGlzdGVuZXJDb3VudCIsImJlZ2luUGhhc2UiLCJwaGFzZSIsImRlY3JlbWVudExpc3RlbmVyQ291bnQiLCJjdXJyZW50IiwiaW5pdFdhdGNoVmFsIiwiZmx1c2hBcHBseUFzeW5jIiwiYXBwbHlBc3luY1F1ZXVlIiwic2NoZWR1bGVBcHBseUFzeW5jIiwiaXNvbGF0ZSIsImRlc3Ryb3lDaGlsZCIsImNoaWxkIiwiJCRDaGlsZFNjb3BlIiwidGhpcy4kJENoaWxkU2NvcGUiLCJ3YXRjaEV4cCIsIndhdGNoZXIiLCJlcSIsImRlcmVnaXN0ZXJXYXRjaCIsIndhdGNoRXhwcmVzc2lvbnMiLCJ3YXRjaEdyb3VwQWN0aW9uIiwiY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQiLCJmaXJzdFJ1biIsIm5ld1ZhbHVlcyIsImRlcmVnaXN0ZXJGbnMiLCJzaG91bGRDYWxsIiwiZGVyZWdpc3RlcldhdGNoR3JvdXAiLCJleHByIiwidW53YXRjaEZuIiwid2F0Y2hHcm91cFN1YkFjdGlvbiIsIiR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvciIsIl92YWx1ZSIsImJvdGhOYU4iLCJuZXdJdGVtIiwib2xkSXRlbSIsImludGVybmFsQXJyYXkiLCJvbGRMZW5ndGgiLCJjaGFuZ2VEZXRlY3RlZCIsIm5ld0xlbmd0aCIsImludGVybmFsT2JqZWN0IiwidmVyeU9sZFZhbHVlIiwidHJhY2tWZXJ5T2xkVmFsdWUiLCJjaGFuZ2VEZXRlY3RvciIsImluaXRSdW4iLCIkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uIiwid2F0Y2giLCJ3YXRjaGVycyIsImRpcnR5IiwidHRsIiwid2F0Y2hMb2ciLCJsb2dJZHgiLCJsb2dNc2ciLCJhc3luY1Rhc2siLCJhc3luY1F1ZXVlIiwiJGV2YWwiLCJpc05hTiIsIm5leHQiLCJwb3N0RGlnZXN0UXVldWUiLCJldmVudE5hbWUiLCJ0aGlzLiR3YXRjaEdyb3VwIiwiJGFwcGx5QXN5bmNFeHByZXNzaW9uIiwibmFtZWRMaXN0ZW5lcnMiLCJpbmRleE9mTGlzdGVuZXIiLCIkZW1pdCIsInRhcmdldFNjb3BlIiwibGlzdGVuZXJBcmdzIiwiY3VycmVudFNjb3BlIiwiJCRhc3luY1F1ZXVlIiwiJCRwb3N0RGlnZXN0UXVldWUiLCIkJGFwcGx5QXN5bmNRdWV1ZSIsInNhbml0aXplVXJpIiwidXJpIiwiaXNJbWFnZSIsInJlZ2V4Iiwibm9ybWFsaXplZFZhbCIsImFkanVzdE1hdGNoZXIiLCJtYXRjaGVyIiwiJHNjZU1pbkVyciIsImVzY2FwZUZvclJlZ2V4cCIsImFkanVzdE1hdGNoZXJzIiwibWF0Y2hlcnMiLCJhZGp1c3RlZE1hdGNoZXJzIiwiU0NFX0NPTlRFWFRTIiwicmVzb3VyY2VVcmxXaGl0ZWxpc3QiLCJyZXNvdXJjZVVybEJsYWNrbGlzdCIsInRoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3QiLCJ0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0IiwibWF0Y2hVcmwiLCJnZW5lcmF0ZUhvbGRlclR5cGUiLCJCYXNlIiwiaG9sZGVyVHlwZSIsInRydXN0ZWRWYWx1ZSIsIiQkdW53cmFwVHJ1c3RlZFZhbHVlIiwidGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSIsImhvbGRlclR5cGUucHJvdG90eXBlLnZhbHVlT2YiLCJob2xkZXJUeXBlLnByb3RvdHlwZS50b1N0cmluZyIsImh0bWxTYW5pdGl6ZXIiLCJ0cnVzdGVkVmFsdWVIb2xkZXJCYXNlIiwiYnlUeXBlIiwiQ1NTIiwiVVJMIiwiSlMiLCJ0cnVzdEFzIiwibWF5YmVUcnVzdGVkIiwiYWxsb3dlZCIsInRoaXMuZW5hYmxlZCIsIm1zaWUiLCJzY2UiLCJpc0VuYWJsZWQiLCJzY2UuaXNFbmFibGVkIiwic2NlLmdldFRydXN0ZWQiLCJwYXJzZUFzIiwic2NlLnBhcnNlQXMiLCJlbnVtVmFsdWUiLCJsTmFtZSIsImV2ZW50U3VwcG9ydCIsImFuZHJvaWQiLCJ1c2VyQWdlbnQiLCJuYXZpZ2F0b3IiLCJib3hlZSIsInZlbmRvclByZWZpeCIsInZlbmRvclJlZ2V4IiwiYm9keVN0eWxlIiwidHJhbnNpdGlvbnMiLCJhbmltYXRpb25zIiwid2Via2l0VHJhbnNpdGlvbiIsIndlYmtpdEFuaW1hdGlvbiIsInB1c2hTdGF0ZSIsImhhc0V2ZW50IiwiZGl2RWxtIiwiaGFuZGxlUmVxdWVzdEZuIiwidHBsIiwiaWdub3JlUmVxdWVzdEVycm9yIiwidG90YWxQZW5kaW5nUmVxdWVzdHMiLCJvcmlnaW5hbCIsInRyYW5zZm9ybWVyIiwiaHR0cE9wdGlvbnMiLCJoYW5kbGVFcnJvciIsInRlc3RhYmlsaXR5IiwidGVzdGFiaWxpdHkuZmluZEJpbmRpbmdzIiwib3B0X2V4YWN0TWF0Y2giLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwibWF0Y2hlcyIsImRhdGFCaW5kaW5nIiwiYmluZGluZ05hbWUiLCJ0ZXN0YWJpbGl0eS5maW5kTW9kZWxzIiwicHJlZml4ZXMiLCJhdHRyaWJ1dGVFcXVhbHMiLCJ0ZXN0YWJpbGl0eS5nZXRMb2NhdGlvbiIsInRlc3RhYmlsaXR5LnNldExvY2F0aW9uIiwidGVzdGFiaWxpdHkud2hlblN0YWJsZSIsImRlZmVycmVkcyIsIiQkdGltZW91dElkIiwidGltZW91dC5jYW5jZWwiLCJiYXNlIiwidXJsUGFyc2luZ05vZGUiLCJyZXF1ZXN0VXJsIiwib3JpZ2luVXJsIiwiZmlsdGVycyIsInN1ZmZpeCIsImN1cnJlbmN5RmlsdGVyIiwiZGF0ZUZpbHRlciIsImZpbHRlckZpbHRlciIsImpzb25GaWx0ZXIiLCJsaW1pdFRvRmlsdGVyIiwibG93ZXJjYXNlRmlsdGVyIiwibnVtYmVyRmlsdGVyIiwib3JkZXJCeUZpbHRlciIsInVwcGVyY2FzZUZpbHRlciIsImNvbXBhcmF0b3IiLCJjb21wYXJhdG9yVHlwZSIsInByZWRpY2F0ZXMiLCJwcmVkaWNhdGVzLmNoZWNrIiwib2JqS2V5IiwiZmlsdGVyZWQiLCIkbG9jYWxlIiwiZm9ybWF0cyIsImFtb3VudCIsImN1cnJlbmN5U3ltYm9sIiwiZnJhY3Rpb25TaXplIiwiZm9ybWF0TnVtYmVyIiwibnVtYmVyIiwiZ3JvdXBTZXAiLCJkZWNpbWFsU2VwIiwiaXNGaW5pdGUiLCJpc05lZ2F0aXZlIiwiYWJzIiwibnVtU3RyIiwiZm9ybWF0ZWRUZXh0IiwiaGFzRXhwb25lbnQiLCJ0b0ZpeGVkIiwiZnJhY3Rpb25MZW4iLCJtaW4iLCJyb3VuZCIsImZyYWN0aW9uIiwibGdyb3VwIiwiZ3JvdXAiLCJwYWROdW1iZXIiLCJkaWdpdHMiLCJuZWciLCJkYXRlR2V0dGVyIiwiZGF0ZSIsImRhdGVTdHJHZXR0ZXIiLCJzaG9ydEZvcm0iLCJnZXRGaXJzdFRodXJzZGF5T2ZZZWFyIiwieWVhciIsImRheU9mV2Vla09uRmlyc3QiLCJnZXREYXkiLCJ3ZWVrR2V0dGVyIiwiZmlyc3RUaHVycyIsImdldEZ1bGxZZWFyIiwidGhpc1RodXJzIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwianNvblN0cmluZ1RvRGF0ZSIsInN0cmluZyIsIlJfSVNPODYwMV9TVFIiLCJ0ekhvdXIiLCJ0ek1pbiIsImRhdGVTZXR0ZXIiLCJzZXRVVENGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwidGltZVNldHRlciIsInNldFVUQ0hvdXJzIiwic2V0SG91cnMiLCJtIiwicyIsIm1zIiwicGFyc2VGbG9hdCIsImZvcm1hdCIsInRpbWV6b25lIiwiTlVNQkVSX1NUUklORyIsIkRBVEVfRk9STUFUU19TUExJVCIsInNldE1pbnV0ZXMiLCJnZXRNaW51dGVzIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJEQVRFX0ZPUk1BVFMiLCJvYmplY3QiLCJsaW1pdCIsIkluZmluaXR5Iiwib3V0Iiwic29ydFByZWRpY2F0ZSIsInJldmVyc2VPcmRlciIsInJldmVyc2VDb21wYXJhdG9yIiwiY29tcCIsImRlc2NlbmRpbmciLCJ2MSIsInYyIiwibWFwIiwicHJlZGljYXRlIiwiYXJyYXlDb3B5IiwibmdEaXJlY3RpdmUiLCJGb3JtQ29udHJvbGxlciIsImNvbnRyb2xzIiwicGFyZW50Rm9ybSIsIiQkcGFyZW50Rm9ybSIsIm51bGxGb3JtQ3RybCIsIiRlcnJvciIsIiQkc3VjY2VzcyIsIiRwZW5kaW5nIiwiJG5hbWUiLCIkZGlydHkiLCIkcHJpc3RpbmUiLCIkdmFsaWQiLCIkaW52YWxpZCIsIiRzdWJtaXR0ZWQiLCIkYWRkQ29udHJvbCIsIiRyb2xsYmFja1ZpZXdWYWx1ZSIsImZvcm0uJHJvbGxiYWNrVmlld1ZhbHVlIiwiY29udHJvbCIsIiRjb21taXRWaWV3VmFsdWUiLCJmb3JtLiRjb21taXRWaWV3VmFsdWUiLCJmb3JtLiRhZGRDb250cm9sIiwiJCRyZW5hbWVDb250cm9sIiwiZm9ybS4kJHJlbmFtZUNvbnRyb2wiLCJuZXdOYW1lIiwib2xkTmFtZSIsIiRyZW1vdmVDb250cm9sIiwiZm9ybS4kcmVtb3ZlQ29udHJvbCIsIiRzZXRWYWxpZGl0eSIsImFkZFNldFZhbGlkaXR5TWV0aG9kIiwiY3RybCIsInNldCIsInVuc2V0IiwiJHNldERpcnR5IiwiZm9ybS4kc2V0RGlydHkiLCJQUklTVElORV9DTEFTUyIsIkRJUlRZX0NMQVNTIiwiJHNldFByaXN0aW5lIiwiZm9ybS4kc2V0UHJpc3RpbmUiLCJzZXRDbGFzcyIsIlNVQk1JVFRFRF9DTEFTUyIsIiRzZXRVbnRvdWNoZWQiLCJmb3JtLiRzZXRVbnRvdWNoZWQiLCIkc2V0U3VibWl0dGVkIiwiZm9ybS4kc2V0U3VibWl0dGVkIiwic3RyaW5nQmFzZWRJbnB1dFR5cGUiLCIkZm9ybWF0dGVycyIsIiRpc0VtcHR5IiwiYmFzZUlucHV0VHlwZSIsInBsYWNlaG9sZGVyIiwibm9ldmVudCIsImNvbXBvc2luZyIsImV2IiwibmdUcmltIiwiJHZpZXdWYWx1ZSIsIiQkaGFzTmF0aXZlVmFsaWRhdG9ycyIsIiRzZXRWaWV3VmFsdWUiLCJkZWZlckxpc3RlbmVyIiwia2V5Q29kZSIsIiRyZW5kZXIiLCJjdHJsLiRyZW5kZXIiLCIkbW9kZWxWYWx1ZSIsImNyZWF0ZURhdGVQYXJzZXIiLCJtYXBwaW5nIiwiaXNvIiwiSVNPX0RBVEVfUkVHRVhQIiwieXl5eSIsIk1NIiwiZGQiLCJISCIsImdldEhvdXJzIiwibW0iLCJzcyIsImdldFNlY29uZHMiLCJzc3MiLCJnZXRNaWxsaXNlY29uZHMiLCJwYXJ0IiwiTmFOIiwiY3JlYXRlRGF0ZUlucHV0VHlwZSIsInBhcnNlRGF0ZSIsImR5bmFtaWNEYXRlSW5wdXRUeXBlIiwicGFyc2VPYnNlcnZlZERhdGVWYWx1ZSIsImJhZElucHV0Q2hlY2tlciIsIiRvcHRpb25zIiwicHJldmlvdXNEYXRlIiwiJCRwYXJzZXJOYW1lIiwiJHBhcnNlcnMiLCJwYXJzZWREYXRlIiwiJG5nTW9kZWxNaW5FcnIiLCJ0aW1lem9uZU9mZnNldCIsIm5nTWluIiwibWluVmFsIiwiJHZhbGlkYXRvcnMiLCJjdHJsLiR2YWxpZGF0b3JzLm1pbiIsIiR2YWxpZGF0ZSIsIm5nTWF4IiwibWF4VmFsIiwiY3RybC4kdmFsaWRhdG9ycy5tYXgiLCJjdHJsLiRpc0VtcHR5IiwidmFsaWRpdHkiLCJWQUxJRElUWV9TVEFURV9QUk9QRVJUWSIsImJhZElucHV0IiwidHlwZU1pc21hdGNoIiwicGFyc2VDb25zdGFudEV4cHIiLCJmYWxsYmFjayIsInBhcnNlRm4iLCJjYWNoZWRUb2dnbGVDbGFzcyIsInN3aXRjaFZhbHVlIiwiY2xhc3NDYWNoZSIsInRvZ2dsZVZhbGlkYXRpb25Dc3MiLCJ2YWxpZGF0aW9uRXJyb3JLZXkiLCJpc1ZhbGlkIiwiVkFMSURfQ0xBU1MiLCJJTlZBTElEX0NMQVNTIiwiaGFzQ2xhc3MiLCJzZXRWYWxpZGl0eSIsImlzT2JqZWN0RW1wdHkiLCJQRU5ESU5HX0NMQVNTIiwiY29tYmluZWRTdGF0ZSIsImNsYXNzRGlyZWN0aXZlIiwiYXJyYXlEaWZmZXJlbmNlIiwiYXJyYXlDbGFzc2VzIiwiY2xhc3NlcyIsImRpZ2VzdENsYXNzQ291bnRzIiwiY2xhc3NDb3VudHMiLCJjbGFzc2VzVG9VcGRhdGUiLCJuZ0NsYXNzV2F0Y2hBY3Rpb24iLCIkaW5kZXgiLCJvbGQkaW5kZXgiLCJtb2QiLCJSRUdFWF9TVFJJTkdfUkVHRVhQIiwiZG9jdW1lbnRNb2RlIiwiaXNBY3RpdmVfIiwiYWN0aXZlIiwiZnVsbCIsIm1ham9yIiwibWlub3IiLCJkb3QiLCJjb2RlTmFtZSIsIkpRTGl0ZS5fZGF0YSIsIk1PVVNFX0VWRU5UX01BUCIsIm1vdXNlbGVhdmUiLCJtb3VzZWVudGVyIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGhlYWQiLCJ0aCIsInRkIiwicmVhZHkiLCJ0cmlnZ2VyIiwiZmlyZWQiLCJyZW1vdmVEYXRhIiwicmVtb3ZlQXR0cmlidXRlIiwiY3NzIiwibG93ZXJjYXNlZE5hbWUiLCJzcGVjaWZpZWQiLCJnZXROYW1lZEl0ZW0iLCJyZXQiLCJnZXRUZXh0IiwiJGR2IiwibXVsdGlwbGUiLCJzZWxlY3RlZCIsIm5vZGVDb3VudCIsImpxTGl0ZU9uIiwidHlwZXMiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImNvbnRhaW5zIiwib2ZmIiwib25lIiwib25GbiIsInJlcGxhY2VOb2RlIiwiaW5zZXJ0QmVmb3JlIiwiY29udGVudERvY3VtZW50IiwicHJlcGVuZCIsIndyYXBOb2RlIiwiZGV0YWNoIiwiYWZ0ZXIiLCJuZXdFbGVtZW50IiwidG9nZ2xlQ2xhc3MiLCJjb25kaXRpb24iLCJjbGFzc0NvbmRpdGlvbiIsIm5leHRFbGVtZW50U2libGluZyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZXh0cmFQYXJhbWV0ZXJzIiwiZHVtbXlFdmVudCIsImhhbmRsZXJBcmdzIiwiZXZlbnRGbnNDb3B5IiwiYXJnMyIsInVuYmluZCIsIiQkYW5ub3RhdGUiLCIkYW5pbWF0ZU1pbkVyciIsIiQkc2VsZWN0b3JzIiwiY2xhc3NOYW1lRmlsdGVyIiwidGhpcy5jbGFzc05hbWVGaWx0ZXIiLCIkJGNsYXNzTmFtZUZpbHRlciIsInJ1bkFuaW1hdGlvblBvc3REaWdlc3QiLCJjYW5jZWxGbiIsIiQkY2FuY2VsRm4iLCJkZWZlci5wcm9taXNlLiQkY2FuY2VsRm4iLCJuZ0FuaW1hdGVQb3N0RGlnZXN0IiwibmdBbmltYXRlTm90aWZ5Q29tcGxldGUiLCJyZXNvbHZlRWxlbWVudENsYXNzZXMiLCJoYXNDbGFzc2VzIiwiY2FjaGVkQ2xhc3NNYW5pcHVsYXRpb24iLCJvcCIsImFzeW5jUHJvbWlzZSIsImN1cnJlbnREZWZlciIsImFwcGx5U3R5bGVzIiwic3R5bGVzIiwiZnJvbSIsInRvIiwiYW5pbWF0ZSIsImVudGVyIiwibGVhdmUiLCJtb3ZlIiwiJCRhZGRDbGFzc0ltbWVkaWF0ZWx5IiwiJCRyZW1vdmVDbGFzc0ltbWVkaWF0ZWx5IiwiYWRkIiwiY3JlYXRlZENhY2hlIiwiU1RPUkFHRV9LRVkiLCIkJHNldENsYXNzSW1tZWRpYXRlbHkiLCJQQVRIX01BVENIIiwibG9jYXRpb25Qcm90b3R5cGUiLCJwYXJhbVZhbHVlIiwiTG9jYXRpb24iLCJMb2NhdGlvbi5wcm90b3R5cGUuc3RhdGUiLCJDQUxMIiwiQVBQTFkiLCJCSU5EIiwiQ09OU1RBTlRTIiwibnVsbCIsInRydWUiLCJmYWxzZSIsImNvbnN0YW50R2V0dGVyIiwiT1BFUkFUT1JTIiwiKyIsIi0iLCIqIiwiLyIsIiUiLCI9PT0iLCIhPT0iLCI9PSIsIiE9IiwiPCIsIj4iLCI8PSIsIj49IiwiJiYiLCJ8fCIsIiEiLCJFU0NBUEUiLCJsZXgiLCJ0b2tlbnMiLCJpcyIsInJlYWRTdHJpbmciLCJwZWVrIiwicmVhZE51bWJlciIsImlzSWRlbnQiLCJyZWFkSWRlbnQiLCJpc1doaXRlc3BhY2UiLCJjaDIiLCJjaDMiLCJmbjIiLCJmbjMiLCJ0aHJvd0Vycm9yIiwiY2hhcnMiLCJpc0V4cE9wZXJhdG9yIiwic3RhcnQiLCJlbmQiLCJjb2xTdHIiLCJwZWVrQ2giLCJsYXN0RG90IiwicGVla0luZGV4IiwibWV0aG9kTmFtZSIsInF1b3RlIiwicmF3U3RyaW5nIiwiaGV4IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmVwIiwiWkVSTyIsInN0YXRlbWVudHMiLCJwcmltYXJ5IiwiZXhwZWN0IiwiZmlsdGVyQ2hhaW4iLCJjb25zdW1lIiwiYXJyYXlEZWNsYXJhdGlvbiIsImZ1bmN0aW9uQ2FsbCIsIm9iamVjdEluZGV4IiwiZmllbGRBY2Nlc3MiLCJtc2ciLCJwZWVrVG9rZW4iLCJlMSIsImUyIiwiZTMiLCJlNCIsInQiLCJ1bmFyeUZuIiwicmlnaHQiLCIkcGFyc2VVbmFyeUZuIiwiYmluYXJ5Rm4iLCJsZWZ0IiwiaXNCcmFuY2hpbmciLCIkcGFyc2VCaW5hcnlGbiIsIiRwYXJzZVN0YXRlbWVudHMiLCJpbnB1dEZuIiwiYXJnc0ZuIiwiJHBhcnNlRmlsdGVyIiwiZXZlcnkiLCJhc3NpZ25tZW50IiwidGVybmFyeSIsIiRwYXJzZUFzc2lnbm1lbnQiLCJsb2dpY2FsT1IiLCJtaWRkbGUiLCIkcGFyc2VUZXJuYXJ5IiwibG9naWNhbEFORCIsImVxdWFsaXR5IiwicmVsYXRpb25hbCIsImFkZGl0aXZlIiwibXVsdGlwbGljYXRpdmUiLCJ1bmFyeSIsImZpZWxkIiwiJHBhcnNlRmllbGRBY2Nlc3MiLCJvIiwiaW5kZXhGbiIsIiRwYXJzZU9iamVjdEluZGV4IiwiZm5HZXR0ZXIiLCJjb250ZXh0R2V0dGVyIiwiZXhwcmVzc2lvblRleHQiLCIkcGFyc2VGdW5jdGlvbkNhbGwiLCJlbGVtZW50Rm5zIiwiZWxlbWVudEZuIiwiJHBhcnNlQXJyYXlMaXRlcmFsIiwidmFsdWVGbnMiLCIkcGFyc2VPYmplY3RMaXRlcmFsIiwieXkiLCJ5IiwiTU1NTSIsIk1NTSIsIk0iLCJIIiwiaGgiLCJFRUVFIiwiRUVFIiwiYW1wbUdldHRlciIsIloiLCJ0aW1lWm9uZUdldHRlciIsInpvbmUiLCJwYWRkZWRab25lIiwid3ciLCJ3IiwieGxpbmtIcmVmIiwicHJvcE5hbWUiLCJub3JtYWxpemVkIiwibmdCb29sZWFuQXR0cldhdGNoQWN0aW9uIiwiaHRtbEF0dHIiLCJuZ0F0dHJBbGlhc1dhdGNoQWN0aW9uIiwibnVsbEZvcm1SZW5hbWVDb250cm9sIiwiZm9ybURpcmVjdGl2ZUZhY3RvcnkiLCJpc05nRm9ybSIsIm5nRm9ybUNvbXBpbGUiLCJmb3JtRWxlbWVudCIsIm5nRm9ybVByZUxpbmsiLCJoYW5kbGVGb3JtU3VibWlzc2lvbiIsInJldHVyblZhbHVlIiwicGFyZW50Rm9ybUN0cmwiLCJhbGlhcyIsIlVSTF9SRUdFWFAiLCJFTUFJTF9SRUdFWFAiLCJOVU1CRVJfUkVHRVhQIiwiREFURV9SRUdFWFAiLCJEQVRFVElNRUxPQ0FMX1JFR0VYUCIsIldFRUtfUkVHRVhQIiwiTU9OVEhfUkVHRVhQIiwiVElNRV9SRUdFWFAiLCJERUZBVUxUX1JFR0VYUCIsImlucHV0VHlwZSIsInRleHRJbnB1dFR5cGUiLCJ3ZWVrUGFyc2VyIiwiaXNvV2VlayIsImV4aXN0aW5nRGF0ZSIsIndlZWsiLCJtaW51dGVzIiwiaG91cnMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiYWRkRGF5cyIsIm51bWJlcklucHV0VHlwZSIsInVybElucHV0VHlwZSIsImN0cmwuJHZhbGlkYXRvcnMudXJsIiwiZW1haWxJbnB1dFR5cGUiLCJlbWFpbCIsImN0cmwuJHZhbGlkYXRvcnMuZW1haWwiLCJyYWRpb0lucHV0VHlwZSIsImNoZWNrZWQiLCJjaGVja2JveElucHV0VHlwZSIsInRydWVWYWx1ZSIsIm5nVHJ1ZVZhbHVlIiwiZmFsc2VWYWx1ZSIsIm5nRmFsc2VWYWx1ZSIsImN0cmxzIiwiTmdNb2RlbENvbnRyb2xsZXIiLCIkYXN5bmNWYWxpZGF0b3JzIiwiJHZpZXdDaGFuZ2VMaXN0ZW5lcnMiLCIkdW50b3VjaGVkIiwiJHRvdWNoZWQiLCJwYXJzZWROZ01vZGVsIiwicGVuZGluZ0RlYm91bmNlIiwibmdNb2RlbEdldCIsIm1vZGVsVmFsdWUiLCJnZXR0ZXJTZXR0ZXIiLCJuZ01vZGVsU2V0IiwiJCRzZXRPcHRpb25zIiwidGhpcy4kJHNldE9wdGlvbnMiLCJ0aGlzLiRpc0VtcHR5IiwiY3VycmVudFZhbGlkYXRpb25SdW5JZCIsInRoaXMuJHNldFByaXN0aW5lIiwidGhpcy4kc2V0VW50b3VjaGVkIiwiVU5UT1VDSEVEX0NMQVNTIiwiVE9VQ0hFRF9DTEFTUyIsIiRzZXRUb3VjaGVkIiwidGhpcy4kc2V0VG91Y2hlZCIsInRoaXMuJHJvbGxiYWNrVmlld1ZhbHVlIiwiJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlIiwidGhpcy4kdmFsaWRhdGUiLCIkJHBhcnNlQW5kVmFsaWRhdGUiLCIkJHJ1blZhbGlkYXRvcnMiLCJ0aGlzLiQkcnVuVmFsaWRhdG9ycyIsInBhcnNlVmFsaWQiLCJ2aWV3VmFsdWUiLCJkb25lQ2FsbGJhY2siLCJwcm9jZXNzU3luY1ZhbGlkYXRvcnMiLCJzeW5jVmFsaWRhdG9yc1ZhbGlkIiwidmFsaWRhdG9yIiwicHJvY2Vzc0FzeW5jVmFsaWRhdG9ycyIsInZhbGlkYXRvclByb21pc2VzIiwiYWxsVmFsaWQiLCJ2YWxpZGF0aW9uRG9uZSIsImxvY2FsVmFsaWRhdGlvblJ1bklkIiwicHJvY2Vzc1BhcnNlRXJyb3JzIiwiZXJyb3JLZXkiLCJ0aGlzLiRjb21taXRWaWV3VmFsdWUiLCJ0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSIsInBhcnNlclZhbGlkIiwicHJldk1vZGVsVmFsdWUiLCJhbGxvd0ludmFsaWQiLCIkJHdyaXRlTW9kZWxUb1Njb3BlIiwidGhpcy4kJHdyaXRlTW9kZWxUb1Njb3BlIiwidGhpcy4kc2V0Vmlld1ZhbHVlIiwidXBkYXRlT25EZWZhdWx0IiwiJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCIsInRoaXMuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCIsImRlYm91bmNlRGVsYXkiLCJkZWJvdW5jZSIsIm5nTW9kZWxXYXRjaCIsImZvcm1hdHRlcnMiLCJuZ01vZGVsQ29tcGlsZSIsIm5nTW9kZWxQcmVMaW5rIiwibW9kZWxDdHJsIiwiZm9ybUN0cmwiLCJuZ01vZGVsUG9zdExpbmsiLCJ1cGRhdGVPbiIsImN0cmwuJHZhbGlkYXRvcnMucmVxdWlyZWQiLCJwYXR0ZXJuRXhwIiwiY3RybC4kdmFsaWRhdG9ycy5wYXR0ZXJuIiwiY3RybC4kdmFsaWRhdG9ycy5tYXhsZW5ndGgiLCJjdHJsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aCIsInRyaW1WYWx1ZXMiLCJDT05TVEFOVF9WQUxVRV9SRUdFWFAiLCJ0cGxBdHRyIiwibmdWYWx1ZUNvbnN0YW50TGluayIsIm5nVmFsdWVMaW5rIiwidmFsdWVXYXRjaEFjdGlvbiIsInRoYXQiLCIkY29tcGlsZSIsIm5nQmluZENvbXBpbGUiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJuZ0JpbmRMaW5rIiwibmdCaW5kV2F0Y2hBY3Rpb24iLCJuZ0JpbmRUZW1wbGF0ZUNvbXBpbGUiLCJuZ0JpbmRUZW1wbGF0ZUxpbmsiLCJuZ0JpbmRIdG1sQ29tcGlsZSIsInRFbGVtZW50IiwibmdCaW5kSHRtbEdldHRlciIsIm5nQmluZEh0bWxXYXRjaCIsImdldFN0cmluZ1ZhbHVlIiwibmdCaW5kSHRtbExpbmsiLCJuZ0JpbmRIdG1sV2F0Y2hBY3Rpb24iLCJnZXRUcnVzdGVkSHRtbCIsImZvcmNlQXN5bmNFdmVudHMiLCJuZ0V2ZW50SGFuZGxlciIsIiRldmVudCIsInByZXZpb3VzRWxlbWVudHMiLCJuZ0lmV2F0Y2hBY3Rpb24iLCJuZXdTY29wZSIsInNyY0V4cCIsIm9ubG9hZEV4cCIsImF1dG9TY3JvbGxFeHAiLCJhdXRvc2Nyb2xsIiwiY2hhbmdlQ291bnRlciIsInByZXZpb3VzRWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwiY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCIsInBhcnNlQXNSZXNvdXJjZVVybCIsIm5nSW5jbHVkZVdhdGNoQWN0aW9uIiwiYWZ0ZXJBbmltYXRpb24iLCJ0aGlzQ2hhbmdlSWQiLCJuYW1lc3BhY2VBZGFwdGVkQ2xvbmUiLCJCUkFDRSIsIm51bWJlckV4cCIsIndoZW5FeHAiLCJ3aGVucyIsIndoZW5zRXhwRm5zIiwiaXNXaGVuIiwiYXR0cmlidXRlTmFtZSIsIm5nUGx1cmFsaXplV2F0Y2giLCJuZ1BsdXJhbGl6ZVdhdGNoQWN0aW9uIiwibmdSZXBlYXRNaW5FcnIiLCJ1cGRhdGVTY29wZSIsInZhbHVlSWRlbnRpZmllciIsImtleUlkZW50aWZpZXIiLCJhcnJheUxlbmd0aCIsIiRmaXJzdCIsIiRsYXN0IiwiJG1pZGRsZSIsIiRvZGQiLCIkZXZlbiIsIm5nUmVwZWF0Q29tcGlsZSIsIm5nUmVwZWF0RW5kQ29tbWVudCIsImxocyIsInJocyIsImFsaWFzQXMiLCJ0cmFja0J5RXhwIiwidHJhY2tCeUV4cEdldHRlciIsInRyYWNrQnlJZEV4cEZuIiwidHJhY2tCeUlkQXJyYXlGbiIsInRyYWNrQnlJZE9iakZuIiwiaGFzaEZuTG9jYWxzIiwibmdSZXBlYXRMaW5rIiwibGFzdEJsb2NrTWFwIiwibmdSZXBlYXRBY3Rpb24iLCJwcmV2aW91c05vZGUiLCJuZXh0Tm9kZSIsIm5leHRCbG9ja01hcCIsImNvbGxlY3Rpb25MZW5ndGgiLCJ0cmFja0J5SWQiLCJjb2xsZWN0aW9uS2V5cyIsIm5leHRCbG9ja09yZGVyIiwidHJhY2tCeUlkRm4iLCJpdGVtS2V5IiwiYmxvY2tLZXkiLCJuZ1JlcGVhdFRyYW5zY2x1ZGUiLCJuZ1Nob3dXYXRjaEFjdGlvbiIsIk5HX0hJREVfQ0xBU1MiLCJ0ZW1wQ2xhc3NlcyIsIk5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1MiLCJuZ0hpZGVXYXRjaEFjdGlvbiIsIm5nU3R5bGVXYXRjaEFjdGlvbiIsIm5ld1N0eWxlcyIsIm9sZFN0eWxlcyIsIm5nU3dpdGNoQ29udHJvbGxlciIsImNhc2VzIiwic2VsZWN0ZWRUcmFuc2NsdWRlcyIsInNlbGVjdGVkRWxlbWVudHMiLCJwcmV2aW91c0xlYXZlQW5pbWF0aW9ucyIsInNlbGVjdGVkU2NvcGVzIiwic3BsaWNlRmFjdG9yeSIsIm5nU3dpdGNoV2F0Y2hBY3Rpb24iLCJzZWxlY3RlZFRyYW5zY2x1ZGUiLCJjYXNlRWxlbWVudCIsInNlbGVjdGVkU2NvcGUiLCJhbmNob3IiLCJuZ09wdGlvbnNNaW5FcnIiLCJOR19PUFRJT05TX1JFR0VYUCIsIm51bGxNb2RlbEN0cmwiLCJvcHRpb25zTWFwIiwibmdNb2RlbEN0cmwiLCJ1bmtub3duT3B0aW9uIiwiZGF0YWJvdW5kIiwiaW5pdCIsInNlbGYuaW5pdCIsIm5nTW9kZWxDdHJsXyIsIm51bGxPcHRpb25fIiwidW5rbm93bk9wdGlvbl8iLCJhZGRPcHRpb24iLCJzZWxmLmFkZE9wdGlvbiIsInJlbW92ZU9wdGlvbiIsInNlbGYucmVtb3ZlT3B0aW9uIiwiaGFzT3B0aW9uIiwicmVuZGVyVW5rbm93bk9wdGlvbiIsInNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiIsInVua25vd25WYWwiLCJzZWxmLmhhc09wdGlvbiIsInNldHVwQXNTaW5nbGUiLCJzZWxlY3RFbGVtZW50Iiwic2VsZWN0Q3RybCIsIm5nTW9kZWxDdHJsLiRyZW5kZXIiLCJlbXB0eU9wdGlvbiIsInNldHVwQXNNdWx0aXBsZSIsImxhc3RWaWV3Iiwic2VsZWN0TXVsdGlwbGVXYXRjaCIsInNldHVwQXNPcHRpb25zIiwiY2FsbEV4cHJlc3Npb24iLCJleHByRm4iLCJ2YWx1ZU5hbWUiLCJrZXlOYW1lIiwiY3JlYXRlSXNTZWxlY3RlZEZuIiwic2VsZWN0ZWRTZXQiLCJ0cmFja0ZuIiwidHJhY2tJbmRleCIsImlzU2VsZWN0ZWQiLCJjb21wYXJlVmFsdWVGbiIsInNlbGVjdEFzRm4iLCJzY2hlZHVsZVJlbmRlcmluZyIsInJlbmRlclNjaGVkdWxlZCIsInJlbmRlciIsInVwZGF0ZUxhYmVsTWFwIiwibGFiZWxNYXAiLCJsYWJlbCIsImFkZGVkIiwib3B0aW9uR3JvdXBzIiwib3B0aW9uR3JvdXBOYW1lcyIsIm9wdGlvbkdyb3VwTmFtZSIsIm9wdGlvbkdyb3VwIiwiZXhpc3RpbmdQYXJlbnQiLCJleGlzdGluZ09wdGlvbnMiLCJleGlzdGluZ09wdGlvbiIsInZhbHVlc0ZuIiwiYW55U2VsZWN0ZWQiLCJvcHRpb25JZCIsInRyYWNrS2V5c0NhY2hlIiwiZ3JvdXBCeUZuIiwiZGlzcGxheUZuIiwibnVsbE9wdGlvbiIsImdyb3VwSW5kZXgiLCJncm91cExlbmd0aCIsIm9wdGlvbkdyb3Vwc0NhY2hlIiwib3B0R3JvdXBUZW1wbGF0ZSIsImxhc3RFbGVtZW50Iiwib3B0aW9uVGVtcGxhdGUiLCJvcHRpb25zRXhwIiwic2VsZWN0QXMiLCJ0cmFjayIsInNlbGVjdGlvbkNoYW5nZWQiLCJzZWxlY3RlZEtleSIsInZpZXdWYWx1ZUZuIiwiZ2V0TGFiZWxzIiwidG9EaXNwbGF5IiwibmdNb2RlbEN0cmwuJGlzRW1wdHkiLCJudWxsU2VsZWN0Q3RybCIsInNlbGVjdEN0cmxOYW1lIiwiaW50ZXJwb2xhdGVXYXRjaEFjdGlvbiIsIiQkY3NwIiwibW9kdWxlTG9hZGVkIiwiZXgiLCJibG9ja05hdmlnYXRpb24iLCJtYWluQmxvY2tVSSIsImJsb2NrVUlDb25maWciLCJyZWdpc3RlckxvY2F0aW9uQ2hhbmdlIiwiJF9ibG9ja0xvY2F0aW9uQ2hhbmdlIiwiYmxvY2tDb3VudCIsImJsb2NrQnJvd3Nlck5hdmlnYXRpb24iLCJibGtVSSIsIiRodHRwUHJvdmlkZXIiLCJibG9ja1VJIiwicmVzZXRPbkV4Y2VwdGlvbiIsImluc3RhbmNlcyIsInJlc2V0IiwiYXV0b0luamVjdEJvZHlCbG9jayIsImRlY29yYXRlTG9jYXRpb24iLCJob29rIiwiZiIsIm92ZXJyaWRlcyIsImJsb2NrVWlDb250YWluZXJMaW5rRm4iLCJzcnZJbnN0YW5jZSIsImJsb2NrVWlDb21waWxlRm4iLCJibG9ja1VpUHJlTGlua0ZuIiwiYmxvY2tVSVV0aWxzIiwiJF9ibG9ja1VpTWVzc2FnZUNsYXNzIiwiaW5zdGFuY2VJZCIsImJsb2NrVWkiLCJwYXJlbnRJbnN0YW5jZSIsIl9wYXJlbnQiLCJyZWxlYXNlIiwiYWRkUmVmIiwiJF9ibG9ja1VpU3RhdGUiLCJibG9ja1VpUGF0dGVybiIsInJlZ0V4cCIsImJ1aWxkUmVnRXhwIiwiYXV0b0Jsb2NrIiwicmVxdWVzdEZpbHRlciIsImluamVjdEJsb2NrVUkiLCJzdG9wQmxvY2tVSSIsIiRfbm9CbG9jayIsIiRfYmxvY2tzIiwic3RvcCIsInJlamVjdGlvbiIsImxvY2F0ZSIsIkJsb2NrVUkiLCJzdGFydFByb21pc2UiLCJ0aGlzIiwiYmxvY2tpbmciLCJkb25lQ2FsbGJhY2tzIiwiX2lkIiwiX3JlZnMiLCIkYWUiLCJhY3RpdmVFbGVtZW50IiwiaXNFbGVtZW50SW5CbG9ja1Njb3BlIiwiX3Jlc3RvcmVGb2N1cyIsImJsdXIiLCJfY2FuY2VsU3RhcnRUaW1lb3V0IiwiX3BhdHRlcm4iLCJleGVjdXRlQ2FsbGJhY2tzIiwiJGJvZHkiLCJmb2N1cyIsImNiIiwibWFpbkJsb2NrIiwiX2Rlc3Ryb3kiLCJpZE9ySW5zdGFuY2UiLCJmb3JFYWNoRm5Ib29rIiwidXRpbHMiLCJmb3JFYWNoRm4iLCJhcnIiLCJmbk5hbWUiLCJibG9ja1Njb3BlIiwiYyIsImZpbmRFbGVtZW50IiwicHJlZGljYXRlRm4iLCJ0cmF2ZXJzZSIsIiRlbGVtZW50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7YUFLQyxTQUFRLENBQUNBLENBQUQsQ0FBU0MsQ0FBVCxDQUFtQkMsQ0FBbkIsQ0FBOEIsQ0FnQ3ZDQyxRQUFBQSxFQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxNQUFBQSxTQUFBQSxFQUFBQSxDQUFBQSxJQUFBQSxFQUFBQSxTQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxHQUFBQSxFQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxHQUFBQSxDQUFBQSxFQUFBQSxFQUFBQSxDQUFBQSxDQUFBQSxzQ0FBQUEsRUFBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsR0FBQUEsQ0FBQUEsRUFBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsU0FBQUEsT0FBQUEs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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3hnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ24wQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJ2ZW5kb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS4zLjFcbiAqIChjKSAyMDEwLTIwMTQgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkgeyd1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGlzIG9iamVjdCBwcm92aWRlcyBhIHV0aWxpdHkgZm9yIHByb2R1Y2luZyByaWNoIEVycm9yIG1lc3NhZ2VzIHdpdGhpblxuICogQW5ndWxhci4gSXQgY2FuIGJlIGNhbGxlZCBhcyBmb2xsb3dzOlxuICpcbiAqIHZhciBleGFtcGxlTWluRXJyID0gbWluRXJyKCdleGFtcGxlJyk7XG4gKiB0aHJvdyBleGFtcGxlTWluRXJyKCdvbmUnLCAnVGhpcyB7MH0gaXMgezF9JywgZm9vLCBiYXIpO1xuICpcbiAqIFRoZSBhYm92ZSBjcmVhdGVzIGFuIGluc3RhbmNlIG9mIG1pbkVyciBpbiB0aGUgZXhhbXBsZSBuYW1lc3BhY2UuIFRoZVxuICogcmVzdWx0aW5nIGVycm9yIHdpbGwgaGF2ZSBhIG5hbWVzcGFjZWQgZXJyb3IgY29kZSBvZiBleGFtcGxlLm9uZS4gIFRoZVxuICogcmVzdWx0aW5nIGVycm9yIHdpbGwgcmVwbGFjZSB7MH0gd2l0aCB0aGUgdmFsdWUgb2YgZm9vLCBhbmQgezF9IHdpdGggdGhlXG4gKiB2YWx1ZSBvZiBiYXIuIFRoZSBvYmplY3QgaXMgbm90IHJlc3RyaWN0ZWQgaW4gdGhlIG51bWJlciBvZiBhcmd1bWVudHMgaXQgY2FuXG4gKiB0YWtlLlxuICpcbiAqIElmIGZld2VyIGFyZ3VtZW50cyBhcmUgc3BlY2lmaWVkIHRoYW4gbmVjZXNzYXJ5IGZvciBpbnRlcnBvbGF0aW9uLCB0aGUgZXh0cmFcbiAqIGludGVycG9sYXRpb24gbWFya2VycyB3aWxsIGJlIHByZXNlcnZlZCBpbiB0aGUgZmluYWwgc3RyaW5nLlxuICpcbiAqIFNpbmNlIGRhdGEgd2lsbCBiZSBwYXJzZWQgc3RhdGljYWxseSBkdXJpbmcgYSBidWlsZCBzdGVwLCBzb21lIHJlc3RyaWN0aW9uc1xuICogYXJlIGFwcGxpZWQgd2l0aCByZXNwZWN0IHRvIGhvdyBtaW5FcnIgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFuZCBjYWxsZWQuXG4gKiBJbnN0YW5jZXMgc2hvdWxkIGhhdmUgbmFtZXMgb2YgdGhlIGZvcm0gbmFtZXNwYWNlTWluRXJyIGZvciBhIG1pbkVyciBjcmVhdGVkXG4gKiB1c2luZyBtaW5FcnIoJ25hbWVzcGFjZScpIC4gRXJyb3IgY29kZXMsIG5hbWVzcGFjZXMgYW5kIHRlbXBsYXRlIHN0cmluZ3NcbiAqIHNob3VsZCBhbGwgYmUgc3RhdGljIHN0cmluZ3MsIG5vdCB2YXJpYWJsZXMgb3IgZ2VuZXJhbCBleHByZXNzaW9ucy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlIFRoZSBuYW1lc3BhY2UgdG8gdXNlIGZvciB0aGUgbmV3IG1pbkVyciBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IEVycm9yQ29uc3RydWN0b3IgQ3VzdG9tIGVycm9yIGNvbnN0cnVjdG9yIHRvIGJlIGluc3RhbnRpYXRlZCB3aGVuIHJldHVybmluZ1xuICogICBlcnJvciBmcm9tIHJldHVybmVkIGZ1bmN0aW9uLCBmb3IgY2FzZXMgd2hlbiBhIHBhcnRpY3VsYXIgdHlwZSBvZiBlcnJvciBpcyB1c2VmdWwuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29kZTpzdHJpbmcsIHRlbXBsYXRlOnN0cmluZywgLi4udGVtcGxhdGVBcmdzKTogRXJyb3J9IG1pbkVyciBpbnN0YW5jZVxuICovXG5cbmZ1bmN0aW9uIG1pbkVycihtb2R1bGUsIEVycm9yQ29uc3RydWN0b3IpIHtcbiAgRXJyb3JDb25zdHJ1Y3RvciA9IEVycm9yQ29uc3RydWN0b3IgfHwgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29kZSA9IGFyZ3VtZW50c1swXSxcbiAgICAgIHByZWZpeCA9ICdbJyArIChtb2R1bGUgPyBtb2R1bGUgKyAnOicgOiAnJykgKyBjb2RlICsgJ10gJyxcbiAgICAgIHRlbXBsYXRlID0gYXJndW1lbnRzWzFdLFxuICAgICAgdGVtcGxhdGVBcmdzID0gYXJndW1lbnRzLFxuICAgICAgc3RyaW5naWZ5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIG9iai50b1N0cmluZygpLnJlcGxhY2UoLyBcXHtbXFxzXFxTXSokLywgJycpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlLCBpO1xuXG4gICAgbWVzc2FnZSA9IHByZWZpeCArIHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcZCtcXH0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHZhciBpbmRleCA9ICttYXRjaC5zbGljZSgxLCAtMSksIGFyZztcblxuICAgICAgaWYgKGluZGV4ICsgMiA8IHRlbXBsYXRlQXJncy5sZW5ndGgpIHtcbiAgICAgICAgYXJnID0gdGVtcGxhdGVBcmdzW2luZGV4ICsgMl07XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZy50b1N0cmluZygpLnJlcGxhY2UoLyA/XFx7W1xcc1xcU10qJC8sICcnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB0b0pzb24oYXJnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgKyAnXFxuaHR0cDovL2Vycm9ycy5hbmd1bGFyanMub3JnLzEuMy4xLycgK1xuICAgICAgKG1vZHVsZSA/IG1vZHVsZSArICcvJyA6ICcnKSArIGNvZGU7XG4gICAgZm9yIChpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UgKyAoaSA9PSAyID8gJz8nIDogJyYnKSArICdwJyArIChpLTIpICsgJz0nICtcbiAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeShhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvckNvbnN0cnVjdG9yKG1lc3NhZ2UpO1xuICB9O1xufVxuXG4vKiBXZSBuZWVkIHRvIHRlbGwganNoaW50IHdoYXQgdmFyaWFibGVzIGFyZSBiZWluZyBleHBvcnRlZCAqL1xuLyogZ2xvYmFsIGFuZ3VsYXI6IHRydWUsXG4gIG1zaWU6IHRydWUsXG4gIGpxTGl0ZTogdHJ1ZSxcbiAgalF1ZXJ5OiB0cnVlLFxuICBzbGljZTogdHJ1ZSxcbiAgc3BsaWNlOiB0cnVlLFxuICBwdXNoOiB0cnVlLFxuICB0b1N0cmluZzogdHJ1ZSxcbiAgbmdNaW5FcnI6IHRydWUsXG4gIGFuZ3VsYXJNb2R1bGU6IHRydWUsXG4gIHVpZDogdHJ1ZSxcbiAgUkVHRVhfU1RSSU5HX1JFR0VYUDogdHJ1ZSxcbiAgVkFMSURJVFlfU1RBVEVfUFJPUEVSVFk6IHRydWUsXG5cbiAgbG93ZXJjYXNlOiB0cnVlLFxuICB1cHBlcmNhc2U6IHRydWUsXG4gIG1hbnVhbExvd2VyY2FzZTogdHJ1ZSxcbiAgbWFudWFsVXBwZXJjYXNlOiB0cnVlLFxuICBub2RlTmFtZV86IHRydWUsXG4gIGlzQXJyYXlMaWtlOiB0cnVlLFxuICBmb3JFYWNoOiB0cnVlLFxuICBzb3J0ZWRLZXlzOiB0cnVlLFxuICBmb3JFYWNoU29ydGVkOiB0cnVlLFxuICByZXZlcnNlUGFyYW1zOiB0cnVlLFxuICBuZXh0VWlkOiB0cnVlLFxuICBzZXRIYXNoS2V5OiB0cnVlLFxuICBleHRlbmQ6IHRydWUsXG4gIGludDogdHJ1ZSxcbiAgaW5oZXJpdDogdHJ1ZSxcbiAgbm9vcDogdHJ1ZSxcbiAgaWRlbnRpdHk6IHRydWUsXG4gIHZhbHVlRm46IHRydWUsXG4gIGlzVW5kZWZpbmVkOiB0cnVlLFxuICBpc0RlZmluZWQ6IHRydWUsXG4gIGlzT2JqZWN0OiB0cnVlLFxuICBpc1N0cmluZzogdHJ1ZSxcbiAgaXNOdW1iZXI6IHRydWUsXG4gIGlzRGF0ZTogdHJ1ZSxcbiAgaXNBcnJheTogdHJ1ZSxcbiAgaXNGdW5jdGlvbjogdHJ1ZSxcbiAgaXNSZWdFeHA6IHRydWUsXG4gIGlzV2luZG93OiB0cnVlLFxuICBpc1Njb3BlOiB0cnVlLFxuICBpc0ZpbGU6IHRydWUsXG4gIGlzQmxvYjogdHJ1ZSxcbiAgaXNCb29sZWFuOiB0cnVlLFxuICBpc1Byb21pc2VMaWtlOiB0cnVlLFxuICB0cmltOiB0cnVlLFxuICBlc2NhcGVGb3JSZWdleHA6IHRydWUsXG4gIGlzRWxlbWVudDogdHJ1ZSxcbiAgbWFrZU1hcDogdHJ1ZSxcbiAgaW5jbHVkZXM6IHRydWUsXG4gIGFycmF5UmVtb3ZlOiB0cnVlLFxuICBjb3B5OiB0cnVlLFxuICBzaGFsbG93Q29weTogdHJ1ZSxcbiAgZXF1YWxzOiB0cnVlLFxuICBjc3A6IHRydWUsXG4gIGNvbmNhdDogdHJ1ZSxcbiAgc2xpY2VBcmdzOiB0cnVlLFxuICBiaW5kOiB0cnVlLFxuICB0b0pzb25SZXBsYWNlcjogdHJ1ZSxcbiAgdG9Kc29uOiB0cnVlLFxuICBmcm9tSnNvbjogdHJ1ZSxcbiAgc3RhcnRpbmdUYWc6IHRydWUsXG4gIHRyeURlY29kZVVSSUNvbXBvbmVudDogdHJ1ZSxcbiAgcGFyc2VLZXlWYWx1ZTogdHJ1ZSxcbiAgdG9LZXlWYWx1ZTogdHJ1ZSxcbiAgZW5jb2RlVXJpU2VnbWVudDogdHJ1ZSxcbiAgZW5jb2RlVXJpUXVlcnk6IHRydWUsXG4gIGFuZ3VsYXJJbml0OiB0cnVlLFxuICBib290c3RyYXA6IHRydWUsXG4gIGdldFRlc3RhYmlsaXR5OiB0cnVlLFxuICBzbmFrZV9jYXNlOiB0cnVlLFxuICBiaW5kSlF1ZXJ5OiB0cnVlLFxuICBhc3NlcnRBcmc6IHRydWUsXG4gIGFzc2VydEFyZ0ZuOiB0cnVlLFxuICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eTogdHJ1ZSxcbiAgZ2V0dGVyOiB0cnVlLFxuICBnZXRCbG9ja05vZGVzOiB0cnVlLFxuICBoYXNPd25Qcm9wZXJ0eTogdHJ1ZSxcbiAgY3JlYXRlTWFwOiB0cnVlLFxuXG4gIE5PREVfVFlQRV9FTEVNRU5UOiB0cnVlLFxuICBOT0RFX1RZUEVfVEVYVDogdHJ1ZSxcbiAgTk9ERV9UWVBFX0NPTU1FTlQ6IHRydWUsXG4gIE5PREVfVFlQRV9ET0NVTUVOVDogdHJ1ZSxcbiAgTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UOiB0cnVlLFxuKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbmdcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqICMgbmcgKGNvcmUgbW9kdWxlKVxuICogVGhlIG5nIG1vZHVsZSBpcyBsb2FkZWQgYnkgZGVmYXVsdCB3aGVuIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBpcyBzdGFydGVkLiBUaGUgbW9kdWxlIGl0c2VsZlxuICogY29udGFpbnMgdGhlIGVzc2VudGlhbCBjb21wb25lbnRzIGZvciBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24gdG8gZnVuY3Rpb24uIFRoZSB0YWJsZSBiZWxvd1xuICogbGlzdHMgYSBoaWdoIGxldmVsIGJyZWFrZG93biBvZiBlYWNoIG9mIHRoZSBzZXJ2aWNlcy9mYWN0b3JpZXMsIGZpbHRlcnMsIGRpcmVjdGl2ZXMgYW5kIHRlc3RpbmdcbiAqIGNvbXBvbmVudHMgYXZhaWxhYmxlIHdpdGhpbiB0aGlzIGNvcmUgbW9kdWxlLlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdcIj48L2Rpdj5cbiAqL1xuXG52YXIgUkVHRVhfU1RSSU5HX1JFR0VYUCA9IC9eXFwvKC4rKVxcLyhbYS16XSopJC87XG5cbi8vIFRoZSBuYW1lIG9mIGEgZm9ybSBjb250cm9sJ3MgVmFsaWRpdHlTdGF0ZSBwcm9wZXJ0eS5cbi8vIFRoaXMgaXMgdXNlZCBzbyB0aGF0IGl0J3MgcG9zc2libGUgZm9yIGludGVybmFsIHRlc3RzIHRvIGNyZWF0ZSBtb2NrIFZhbGlkaXR5U3RhdGVzLlxudmFyIFZBTElESVRZX1NUQVRFX1BST1BFUlRZID0gJ3ZhbGlkaXR5JztcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIubG93ZXJjYXNlXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byBsb3dlcmNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlLlxuICogQHJldHVybnMge3N0cmluZ30gTG93ZXJjYXNlZCBzdHJpbmcuXG4gKi9cbnZhciBsb3dlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b0xvd2VyQ2FzZSgpIDogc3RyaW5nO307XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci51cHBlcmNhc2VcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIHVwcGVyY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byB1cHBlcmNhc2UuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBVcHBlcmNhc2VkIHN0cmluZy5cbiAqL1xudmFyIHVwcGVyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZykge3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvVXBwZXJDYXNlKCkgOiBzdHJpbmc7fTtcblxuXG52YXIgbWFudWFsTG93ZXJjYXNlID0gZnVuY3Rpb24ocykge1xuICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi9cbiAgcmV0dXJuIGlzU3RyaW5nKHMpXG4gICAgICA/IHMucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApIHwgMzIpO30pXG4gICAgICA6IHM7XG59O1xudmFyIG1hbnVhbFVwcGVyY2FzZSA9IGZ1bmN0aW9uKHMpIHtcbiAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovXG4gIHJldHVybiBpc1N0cmluZyhzKVxuICAgICAgPyBzLnJlcGxhY2UoL1thLXpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSAmIH4zMik7fSlcbiAgICAgIDogcztcbn07XG5cblxuLy8gU3RyaW5nI3RvTG93ZXJDYXNlIGFuZCBTdHJpbmcjdG9VcHBlckNhc2UgZG9uJ3QgcHJvZHVjZSBjb3JyZWN0IHJlc3VsdHMgaW4gYnJvd3NlcnMgd2l0aCBUdXJraXNoXG4vLyBsb2NhbGUsIGZvciB0aGlzIHJlYXNvbiB3ZSBuZWVkIHRvIGRldGVjdCB0aGlzIGNhc2UgYW5kIHJlZGVmaW5lIGxvd2VyY2FzZS91cHBlcmNhc2UgbWV0aG9kc1xuLy8gd2l0aCBjb3JyZWN0IGJ1dCBzbG93ZXIgYWx0ZXJuYXRpdmVzLlxuaWYgKCdpJyAhPT0gJ0knLnRvTG93ZXJDYXNlKCkpIHtcbiAgbG93ZXJjYXNlID0gbWFudWFsTG93ZXJjYXNlO1xuICB1cHBlcmNhc2UgPSBtYW51YWxVcHBlcmNhc2U7XG59XG5cblxudmFyIC8qKiBob2xkcyBtYWpvciB2ZXJzaW9uIG51bWJlciBmb3IgSUUgb3IgTmFOIGZvciByZWFsIGJyb3dzZXJzICovXG4gICAgbXNpZSxcbiAgICBqcUxpdGUsICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nIHNpbmNlIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgYWZ0ZXIgdXMuXG4gICAgalF1ZXJ5LCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZ1xuICAgIHNsaWNlICAgICAgICAgICAgID0gW10uc2xpY2UsXG4gICAgc3BsaWNlICAgICAgICAgICAgPSBbXS5zcGxpY2UsXG4gICAgcHVzaCAgICAgICAgICAgICAgPSBbXS5wdXNoLFxuICAgIHRvU3RyaW5nICAgICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICBuZ01pbkVyciAgICAgICAgICA9IG1pbkVycignbmcnKSxcblxuICAgIC8qKiBAbmFtZSBhbmd1bGFyICovXG4gICAgYW5ndWxhciAgICAgICAgICAgPSB3aW5kb3cuYW5ndWxhciB8fCAod2luZG93LmFuZ3VsYXIgPSB7fSksXG4gICAgYW5ndWxhck1vZHVsZSxcbiAgICB1aWQgICAgICAgICAgICAgICA9IDA7XG5cbi8qKlxuICogZG9jdW1lbnRNb2RlIGlzIGFuIElFLW9ubHkgcHJvcGVydHlcbiAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9jYzE5Njk4OCh2PXZzLjg1KS5hc3B4XG4gKi9cbm1zaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBgb2JqYCBpcyBhbiBhcnJheSBvciBhcnJheS1saWtlIG9iamVjdCAoTm9kZUxpc3QsIEFyZ3VtZW50cyxcbiAqICAgICAgICAgICAgICAgICAgIFN0cmluZyAuLi4pXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKG9iaikge1xuICBpZiAob2JqID09IG51bGwgfHwgaXNXaW5kb3cob2JqKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuXG4gIGlmIChvYmoubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UICYmIGxlbmd0aCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGlzU3RyaW5nKG9iaikgfHwgaXNBcnJheShvYmopIHx8IGxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgdHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicgJiYgbGVuZ3RoID4gMCAmJiAobGVuZ3RoIC0gMSkgaW4gb2JqO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5mb3JFYWNoXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW52b2tlcyB0aGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBvbmNlIGZvciBlYWNoIGl0ZW0gaW4gYG9iamAgY29sbGVjdGlvbiwgd2hpY2ggY2FuIGJlIGVpdGhlciBhblxuICogb2JqZWN0IG9yIGFuIGFycmF5LiBUaGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggYGl0ZXJhdG9yKHZhbHVlLCBrZXksIG9iailgLCB3aGVyZSBgdmFsdWVgXG4gKiBpcyB0aGUgdmFsdWUgb2YgYW4gb2JqZWN0IHByb3BlcnR5IG9yIGFuIGFycmF5IGVsZW1lbnQsIGBrZXlgIGlzIHRoZSBvYmplY3QgcHJvcGVydHkga2V5IG9yXG4gKiBhcnJheSBlbGVtZW50IGluZGV4IGFuZCBvYmogaXMgdGhlIGBvYmpgIGl0c2VsZi4gU3BlY2lmeWluZyBhIGBjb250ZXh0YCBmb3IgdGhlIGZ1bmN0aW9uIGlzIG9wdGlvbmFsLlxuICpcbiAqIEl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IGAuZm9yRWFjaGAgZG9lcyBub3QgaXRlcmF0ZSBvdmVyIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlY2F1c2UgaXQgZmlsdGVyc1xuICogdXNpbmcgdGhlIGBoYXNPd25Qcm9wZXJ0eWAgbWV0aG9kLlxuICpcbiAqIFVubGlrZSBFUzI2MidzXG4gKiBbQXJyYXkucHJvdG90eXBlLmZvckVhY2hdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS40LjQuMTgpLFxuICogUHJvdmlkaW5nICd1bmRlZmluZWQnIG9yICdudWxsJyB2YWx1ZXMgZm9yIGBvYmpgIHdpbGwgbm90IHRocm93IGEgVHlwZUVycm9yLCBidXQgcmF0aGVyIGp1c3RcbiAqIHJldHVybiB0aGUgdmFsdWUgcHJvdmlkZWQuXG4gKlxuICAgYGBganNcbiAgICAgdmFyIHZhbHVlcyA9IHtuYW1lOiAnbWlza28nLCBnZW5kZXI6ICdtYWxlJ307XG4gICAgIHZhciBsb2cgPSBbXTtcbiAgICAgYW5ndWxhci5mb3JFYWNoKHZhbHVlcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgIHRoaXMucHVzaChrZXkgKyAnOiAnICsgdmFsdWUpO1xuICAgICB9LCBsb2cpO1xuICAgICBleHBlY3QobG9nKS50b0VxdWFsKFsnbmFtZTogbWlza28nLCAnZ2VuZGVyOiBtYWxlJ10pO1xuICAgYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBPYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3IgSXRlcmF0b3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHQgT2JqZWN0IHRvIGJlY29tZSBjb250ZXh0IChgdGhpc2ApIGZvciB0aGUgaXRlcmF0b3IgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fSBSZWZlcmVuY2UgdG8gYG9iamAuXG4gKi9cblxuZnVuY3Rpb24gZm9yRWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gIHZhciBrZXksIGxlbmd0aDtcbiAgaWYgKG9iaikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICAvLyBOZWVkIHRvIGNoZWNrIGlmIGhhc093blByb3BlcnR5IGV4aXN0cyxcbiAgICAgICAgLy8gYXMgb24gSUU4IHRoZSByZXN1bHQgb2YgcXVlcnlTZWxlY3RvckFsbCBpcyBhbiBvYmplY3Qgd2l0aG91dCBhIGhhc093blByb3BlcnR5IGZ1bmN0aW9uXG4gICAgICAgIGlmIChrZXkgIT0gJ3Byb3RvdHlwZScgJiYga2V5ICE9ICdsZW5ndGgnICYmIGtleSAhPSAnbmFtZScgJiYgKCFvYmouaGFzT3duUHJvcGVydHkgfHwgb2JqLmhhc093blByb3BlcnR5KGtleSkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikgfHwgaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgdmFyIGlzUHJpbWl0aXZlID0gdHlwZW9mIG9iaiAhPT0gJ29iamVjdCc7XG4gICAgICBmb3IgKGtleSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGtleSA8IGxlbmd0aDsga2V5KyspIHtcbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlIHx8IGtleSBpbiBvYmopIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9iai5mb3JFYWNoICYmIG9iai5mb3JFYWNoICE9PSBmb3JFYWNoKSB7XG4gICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0LCBvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHNvcnRlZEtleXMob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnNvcnQoKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNvcnRlZChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gIHZhciBrZXlzID0gc29ydGVkS2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXlzW2ldXSwga2V5c1tpXSk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5cblxuLyoqXG4gKiB3aGVuIHVzaW5nIGZvckVhY2ggdGhlIHBhcmFtcyBhcmUgdmFsdWUsIGtleSwgYnV0IGl0IGlzIG9mdGVuIHVzZWZ1bCB0byBoYXZlIGtleSwgdmFsdWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgKil9IGl0ZXJhdG9yRm5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbigqLCBzdHJpbmcpfVxuICovXG5mdW5jdGlvbiByZXZlcnNlUGFyYW1zKGl0ZXJhdG9yRm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgaXRlcmF0b3JGbihrZXksIHZhbHVlKTsgfTtcbn1cblxuLyoqXG4gKiBBIGNvbnNpc3RlbnQgd2F5IG9mIGNyZWF0aW5nIHVuaXF1ZSBJRHMgaW4gYW5ndWxhci5cbiAqXG4gKiBVc2luZyBzaW1wbGUgbnVtYmVycyBhbGxvd3MgdXMgdG8gZ2VuZXJhdGUgMjguNiBtaWxsaW9uIHVuaXF1ZSBpZHMgcGVyIHNlY29uZCBmb3IgMTAgeWVhcnMgYmVmb3JlXG4gKiB3ZSBoaXQgbnVtYmVyIHByZWNpc2lvbiBpc3N1ZXMgaW4gSmF2YVNjcmlwdC5cbiAqXG4gKiBNYXRoLnBvdygyLDUzKSAvIDYwIC8gNjAgLyAyNCAvIDM2NSAvIDEwID0gMjguNk1cbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gbmV4dFVpZCgpIHtcbiAgcmV0dXJuICsrdWlkO1xufVxuXG5cbi8qKlxuICogU2V0IG9yIGNsZWFyIHRoZSBoYXNoa2V5IGZvciBhbiBvYmplY3QuXG4gKiBAcGFyYW0gb2JqIG9iamVjdFxuICogQHBhcmFtIGggdGhlIGhhc2hrZXkgKCF0cnV0aHkgdG8gZGVsZXRlIHRoZSBoYXNoa2V5KVxuICovXG5mdW5jdGlvbiBzZXRIYXNoS2V5KG9iaiwgaCkge1xuICBpZiAoaCkge1xuICAgIG9iai4kJGhhc2hLZXkgPSBoO1xuICB9XG4gIGVsc2Uge1xuICAgIGRlbGV0ZSBvYmouJCRoYXNoS2V5O1xuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmV4dGVuZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpXG4gKiB0byBgZHN0YC4gWW91IGNhbiBzcGVjaWZ5IG11bHRpcGxlIGBzcmNgIG9iamVjdHMuIElmIHlvdSB3YW50IHRvIHByZXNlcnZlIG9yaWdpbmFsIG9iamVjdHMsIHlvdSBjYW4gZG8gc29cbiAqIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5leHRlbmQoe30sIG9iamVjdDEsIG9iamVjdDIpYC5cbiAqIE5vdGU6IEtlZXAgaW4gbWluZCB0aGF0IGBhbmd1bGFyLmV4dGVuZGAgZG9lcyBub3Qgc3VwcG9ydCByZWN1cnNpdmUgbWVyZ2UgKGRlZXAgY29weSkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gc3JjIFNvdXJjZSBvYmplY3QocykuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gYGRzdGAuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChkc3QpIHtcbiAgdmFyIGggPSBkc3QuJCRoYXNoS2V5O1xuXG4gIGZvciAodmFyIGkgPSAxLCBpaSA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgdmFyIG9iaiA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAob2JqKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICBmb3IgKHZhciBqID0gMCwgamogPSBrZXlzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbal07XG4gICAgICAgIGRzdFtrZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0SGFzaEtleShkc3QsIGgpO1xuICByZXR1cm4gZHN0O1xufVxuXG5mdW5jdGlvbiBpbnQoc3RyKSB7XG4gIHJldHVybiBwYXJzZUludChzdHIsIDEwKTtcbn1cblxuXG5mdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHtcbiAgcmV0dXJuIGV4dGVuZChuZXcgKGV4dGVuZChmdW5jdGlvbigpIHt9LCB7cHJvdG90eXBlOnBhcmVudH0pKSgpLCBleHRyYSk7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLm5vb3BcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgbm8gb3BlcmF0aW9ucy4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZnVsIHdoZW4gd3JpdGluZyBjb2RlIGluIHRoZVxuICogZnVuY3Rpb25hbCBzdHlsZS5cbiAgIGBgYGpzXG4gICAgIGZ1bmN0aW9uIGZvbyhjYWxsYmFjaykge1xuICAgICAgIHZhciByZXN1bHQgPSBjYWxjdWxhdGVSZXN1bHQoKTtcbiAgICAgICAoY2FsbGJhY2sgfHwgYW5ndWxhci5ub29wKShyZXN1bHQpO1xuICAgICB9XG4gICBgYGBcbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5ub29wLiRpbmplY3QgPSBbXTtcblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pZGVudGl0eVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGl0cyBmaXJzdCBhcmd1bWVudC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXG4gKiBmdW5jdGlvbmFsIHN0eWxlLlxuICpcbiAgIGBgYGpzXG4gICAgIGZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYW5zZm9ybWF0aW9uRm4sIHZhbHVlKSB7XG4gICAgICAgcmV0dXJuICh0cmFuc2Zvcm1hdGlvbkZuIHx8IGFuZ3VsYXIuaWRlbnRpdHkpKHZhbHVlKTtcbiAgICAgfTtcbiAgIGBgYFxuICovXG5mdW5jdGlvbiBpZGVudGl0eSgkKSB7cmV0dXJuICQ7fVxuaWRlbnRpdHkuJGluamVjdCA9IFtdO1xuXG5cbmZ1bmN0aW9uIHZhbHVlRm4odmFsdWUpIHtyZXR1cm4gZnVuY3Rpb24oKSB7cmV0dXJuIHZhbHVlO307fVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc1VuZGVmaW5lZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRGVmaW5lZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzT2JqZWN0XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgT2JqZWN0YC4gVW5saWtlIGB0eXBlb2ZgIGluIEphdmFTY3JpcHQsIGBudWxsYHMgYXJlIG5vdFxuICogY29uc2lkZXJlZCB0byBiZSBvYmplY3RzLiBOb3RlIHRoYXQgSmF2YVNjcmlwdCBhcnJheXMgYXJlIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBPYmplY3RgIGJ1dCBub3QgYG51bGxgLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAvLyBodHRwOi8vanNwZXJmLmNvbS9pc29iamVjdDRcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNTdHJpbmdcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYFN0cmluZ2AuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzTnVtYmVyXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBOdW1iZXJgLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBOdW1iZXJgLlxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0RhdGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBkYXRlLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBEYXRlYC5cbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzQXJyYXlcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBBcnJheWAuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBBcnJheWAuXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNGdW5jdGlvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgRnVuY3Rpb25gLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBGdW5jdGlvbmAuXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO31cblxuXG4vKipcbiAqIERldGVybWluZXMgaWYgYSB2YWx1ZSBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBSZWdFeHBgLlxuICovXG5mdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5cbi8qKlxuICogQ2hlY2tzIGlmIGBvYmpgIGlzIGEgd2luZG93IG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBvYmogT2JqZWN0IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqYCBpcyBhIHdpbmRvdyBvYmouXG4gKi9cbmZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai53aW5kb3cgPT09IG9iajtcbn1cblxuXG5mdW5jdGlvbiBpc1Njb3BlKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai4kZXZhbEFzeW5jICYmIG9iai4kd2F0Y2g7XG59XG5cblxuZnVuY3Rpb24gaXNGaWxlKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCbG9iKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuXG5mdW5jdGlvbiBpc1Byb21pc2VMaWtlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzRnVuY3Rpb24ob2JqLnRoZW4pO1xufVxuXG5cbnZhciB0cmltID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xufTtcblxuLy8gQ29waWVkIGZyb206XG4vLyBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2xvY2FsX2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmUxMDIxXG4vLyBQcmVyZXE6IHMgaXMgYSBzdHJpbmcuXG52YXIgZXNjYXBlRm9yUmVnZXhwID0gZnVuY3Rpb24ocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC8oWy0oKVxcW1xcXXt9Kz8qLiRcXF58LDojPCFcXFxcXSkvZywgJ1xcXFwkMScpLlxuICAgICAgICAgICByZXBsYWNlKC9cXHgwOC9nLCAnXFxcXHgwOCcpO1xufTtcblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0VsZW1lbnRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS5cbiAqL1xuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuICEhKG5vZGUgJiZcbiAgICAobm9kZS5ub2RlTmFtZSAgLy8gd2UgYXJlIGEgZGlyZWN0IGVsZW1lbnRcbiAgICB8fCAobm9kZS5wcm9wICYmIG5vZGUuYXR0ciAmJiBub2RlLmZpbmQpKSk7ICAvLyB3ZSBoYXZlIGFuIG9uIGFuZCBmaW5kIG1ldGhvZCBwYXJ0IG9mIGpRdWVyeSBBUElcbn1cblxuLyoqXG4gKiBAcGFyYW0gc3RyICdrZXkxLGtleTIsLi4uJ1xuICogQHJldHVybnMge29iamVjdH0gaW4gdGhlIGZvcm0gb2Yge2tleTE6dHJ1ZSwga2V5Mjp0cnVlLCAuLi59XG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAoc3RyKSB7XG4gIHZhciBvYmogPSB7fSwgaXRlbXMgPSBzdHIuc3BsaXQoXCIsXCIpLCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspXG4gICAgb2JqWyBpdGVtc1tpXSBdID0gdHJ1ZTtcbiAgcmV0dXJuIG9iajtcbn1cblxuXG5mdW5jdGlvbiBub2RlTmFtZV8oZWxlbWVudCkge1xuICByZXR1cm4gbG93ZXJjYXNlKGVsZW1lbnQubm9kZU5hbWUgfHwgZWxlbWVudFswXS5ub2RlTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCBvYmopIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYXJyYXksIG9iaikgIT0gLTE7XG59XG5cbmZ1bmN0aW9uIGFycmF5UmVtb3ZlKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKHZhbHVlKTtcbiAgaWYgKGluZGV4ID49MClcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmNvcHlcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgLCB3aGljaCBzaG91bGQgYmUgYW4gb2JqZWN0IG9yIGFuIGFycmF5LlxuICpcbiAqICogSWYgbm8gZGVzdGluYXRpb24gaXMgc3VwcGxpZWQsIGEgY29weSBvZiB0aGUgb2JqZWN0IG9yIGFycmF5IGlzIGNyZWF0ZWQuXG4gKiAqIElmIGEgZGVzdGluYXRpb24gaXMgcHJvdmlkZWQsIGFsbCBvZiBpdHMgZWxlbWVudHMgKGZvciBhcnJheSkgb3IgcHJvcGVydGllcyAoZm9yIG9iamVjdHMpXG4gKiAgIGFyZSBkZWxldGVkIGFuZCB0aGVuIGFsbCBlbGVtZW50cy9wcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZSBhcmUgY29waWVkIHRvIGl0LlxuICogKiBJZiBgc291cmNlYCBpcyBub3QgYW4gb2JqZWN0IG9yIGFycmF5IChpbmMuIGBudWxsYCBhbmQgYHVuZGVmaW5lZGApLCBgc291cmNlYCBpcyByZXR1cm5lZC5cbiAqICogSWYgYHNvdXJjZWAgaXMgaWRlbnRpY2FsIHRvICdkZXN0aW5hdGlvbicgYW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIEBwYXJhbSB7Kn0gc291cmNlIFRoZSBzb3VyY2UgdGhhdCB3aWxsIGJlIHVzZWQgdG8gbWFrZSBhIGNvcHkuXG4gKiAgICAgICAgICAgICAgICAgICBDYW4gYmUgYW55IHR5cGUsIGluY2x1ZGluZyBwcmltaXRpdmVzLCBgbnVsbGAsIGFuZCBgdW5kZWZpbmVkYC5cbiAqIEBwYXJhbSB7KE9iamVjdHxBcnJheSk9fSBkZXN0aW5hdGlvbiBEZXN0aW5hdGlvbiBpbnRvIHdoaWNoIHRoZSBzb3VyY2UgaXMgY29waWVkLiBJZlxuICogICAgIHByb3ZpZGVkLCBtdXN0IGJlIG9mIHRoZSBzYW1lIHR5cGUgYXMgYHNvdXJjZWAuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIGNvcHkgb3IgdXBkYXRlZCBgZGVzdGluYXRpb25gLCBpZiBgZGVzdGluYXRpb25gIHdhcyBzcGVjaWZpZWQuXG4gKlxuICogQGV4YW1wbGVcbiA8ZXhhbXBsZSBtb2R1bGU9XCJjb3B5RXhhbXBsZVwiPlxuIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiA8Zm9ybSBub3ZhbGlkYXRlIGNsYXNzPVwic2ltcGxlLWZvcm1cIj5cbiBOYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIubmFtZVwiIC8+PGJyIC8+XG4gRS1tYWlsOiA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmctbW9kZWw9XCJ1c2VyLmVtYWlsXCIgLz48YnIgLz5cbiBHZW5kZXI6IDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cInVzZXIuZ2VuZGVyXCIgdmFsdWU9XCJtYWxlXCIgLz5tYWxlXG4gPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwidXNlci5nZW5kZXJcIiB2YWx1ZT1cImZlbWFsZVwiIC8+ZmVtYWxlPGJyIC8+XG4gPGJ1dHRvbiBuZy1jbGljaz1cInJlc2V0KClcIj5SRVNFVDwvYnV0dG9uPlxuIDxidXR0b24gbmctY2xpY2s9XCJ1cGRhdGUodXNlcilcIj5TQVZFPC9idXR0b24+XG4gPC9mb3JtPlxuIDxwcmU+Zm9ybSA9IHt7dXNlciB8IGpzb259fTwvcHJlPlxuIDxwcmU+bWFzdGVyID0ge3ttYXN0ZXIgfCBqc29ufX08L3ByZT5cbiA8L2Rpdj5cblxuIDxzY3JpcHQ+XG4gIGFuZ3VsYXIubW9kdWxlKCdjb3B5RXhhbXBsZScsIFtdKVxuICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAkc2NvcGUubWFzdGVyPSB7fTtcblxuICAgICAgJHNjb3BlLnVwZGF0ZSA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgLy8gRXhhbXBsZSB3aXRoIDEgYXJndW1lbnRcbiAgICAgICAgJHNjb3BlLm1hc3Rlcj0gYW5ndWxhci5jb3B5KHVzZXIpO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEV4YW1wbGUgd2l0aCAyIGFyZ3VtZW50c1xuICAgICAgICBhbmd1bGFyLmNvcHkoJHNjb3BlLm1hc3RlciwgJHNjb3BlLnVzZXIpO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLnJlc2V0KCk7XG4gICAgfV0pO1xuIDwvc2NyaXB0PlxuIDwvZmlsZT5cbiA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGNvcHkoc291cmNlLCBkZXN0aW5hdGlvbiwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCkge1xuICBpZiAoaXNXaW5kb3coc291cmNlKSB8fCBpc1Njb3BlKHNvdXJjZSkpIHtcbiAgICB0aHJvdyBuZ01pbkVycignY3B3cycsXG4gICAgICBcIkNhbid0IGNvcHkhIE1ha2luZyBjb3BpZXMgb2YgV2luZG93IG9yIFNjb3BlIGluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLlwiKTtcbiAgfVxuXG4gIGlmICghZGVzdGluYXRpb24pIHtcbiAgICBkZXN0aW5hdGlvbiA9IHNvdXJjZTtcbiAgICBpZiAoc291cmNlKSB7XG4gICAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uID0gY29weShzb3VyY2UsIFtdLCBzdGFja1NvdXJjZSwgc3RhY2tEZXN0KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKHNvdXJjZSkpIHtcbiAgICAgICAgZGVzdGluYXRpb24gPSBuZXcgRGF0ZShzb3VyY2UuZ2V0VGltZSgpKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAoc291cmNlKSkge1xuICAgICAgICBkZXN0aW5hdGlvbiA9IG5ldyBSZWdFeHAoc291cmNlLnNvdXJjZSwgc291cmNlLnRvU3RyaW5nKCkubWF0Y2goL1teXFwvXSokLylbMF0pO1xuICAgICAgICBkZXN0aW5hdGlvbi5sYXN0SW5kZXggPSBzb3VyY2UubGFzdEluZGV4O1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICAgIHZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSkpO1xuICAgICAgICBkZXN0aW5hdGlvbiA9IGNvcHkoc291cmNlLCBlbXB0eU9iamVjdCwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChzb3VyY2UgPT09IGRlc3RpbmF0aW9uKSB0aHJvdyBuZ01pbkVycignY3BpJyxcbiAgICAgIFwiQ2FuJ3QgY29weSEgU291cmNlIGFuZCBkZXN0aW5hdGlvbiBhcmUgaWRlbnRpY2FsLlwiKTtcblxuICAgIHN0YWNrU291cmNlID0gc3RhY2tTb3VyY2UgfHwgW107XG4gICAgc3RhY2tEZXN0ID0gc3RhY2tEZXN0IHx8IFtdO1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHZhciBpbmRleCA9IHN0YWNrU291cmNlLmluZGV4T2Yoc291cmNlKTtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHJldHVybiBzdGFja0Rlc3RbaW5kZXhdO1xuXG4gICAgICBzdGFja1NvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgICBzdGFja0Rlc3QucHVzaChkZXN0aW5hdGlvbik7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICBkZXN0aW5hdGlvbi5sZW5ndGggPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gY29weShzb3VyY2VbaV0sIG51bGwsIHN0YWNrU291cmNlLCBzdGFja0Rlc3QpO1xuICAgICAgICBpZiAoaXNPYmplY3Qoc291cmNlW2ldKSkge1xuICAgICAgICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlW2ldKTtcbiAgICAgICAgICBzdGFja0Rlc3QucHVzaChyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGRlc3RpbmF0aW9uLnB1c2gocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGggPSBkZXN0aW5hdGlvbi4kJGhhc2hLZXk7XG4gICAgICBpZiAoaXNBcnJheShkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgZGVzdGluYXRpb24ubGVuZ3RoID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvckVhY2goZGVzdGluYXRpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICBkZWxldGUgZGVzdGluYXRpb25ba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIHJlc3VsdCA9IGNvcHkoc291cmNlW2tleV0sIG51bGwsIHN0YWNrU291cmNlLCBzdGFja0Rlc3QpO1xuICAgICAgICAgIGlmIChpc09iamVjdChzb3VyY2Vba2V5XSkpIHtcbiAgICAgICAgICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlW2tleV0pO1xuICAgICAgICAgICAgc3RhY2tEZXN0LnB1c2gocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0SGFzaEtleShkZXN0aW5hdGlvbixoKTtcbiAgICB9XG5cbiAgfVxuICByZXR1cm4gZGVzdGluYXRpb247XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNoYWxsb3cgY29weSBvZiBhbiBvYmplY3QsIGFuIGFycmF5IG9yIGEgcHJpbWl0aXZlLlxuICpcbiAqIEFzc3VtZXMgdGhhdCB0aGVyZSBhcmUgbm8gcHJvdG8gcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0NvcHkoc3JjLCBkc3QpIHtcbiAgaWYgKGlzQXJyYXkoc3JjKSkge1xuICAgIGRzdCA9IGRzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHNyYy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBkc3RbaV0gPSBzcmNbaV07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNyYykpIHtcbiAgICBkc3QgPSBkc3QgfHwge307XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgICBpZiAoIShrZXkuY2hhckF0KDApID09PSAnJCcgJiYga2V5LmNoYXJBdCgxKSA9PT0gJyQnKSkge1xuICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkc3QgfHwgc3JjO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmVxdWFsc1xuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgdHdvIG9iamVjdHMgb3IgdHdvIHZhbHVlcyBhcmUgZXF1aXZhbGVudC4gU3VwcG9ydHMgdmFsdWUgdHlwZXMsIHJlZ3VsYXJcbiAqIGV4cHJlc3Npb25zLCBhcnJheXMgYW5kIG9iamVjdHMuXG4gKlxuICogVHdvIG9iamVjdHMgb3IgdmFsdWVzIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnQgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcgaXMgdHJ1ZTpcbiAqXG4gKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgcGFzcyBgPT09YCBjb21wYXJpc29uLlxuICogKiBCb3RoIG9iamVjdHMgb3IgdmFsdWVzIGFyZSBvZiB0aGUgc2FtZSB0eXBlIGFuZCBhbGwgb2YgdGhlaXIgcHJvcGVydGllcyBhcmUgZXF1YWwgYnlcbiAqICAgY29tcGFyaW5nIHRoZW0gd2l0aCBgYW5ndWxhci5lcXVhbHNgLlxuICogKiBCb3RoIHZhbHVlcyBhcmUgTmFOLiAoSW4gSmF2YVNjcmlwdCwgTmFOID09IE5hTiA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byBOYU4gYXMgZXF1YWwpXG4gKiAqIEJvdGggdmFsdWVzIHJlcHJlc2VudCB0aGUgc2FtZSByZWd1bGFyIGV4cHJlc3Npb24gKEluIEphdmFTY3JpcHQsXG4gKiAgIC9hYmMvID09IC9hYmMvID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXMgZXF1YWwgd2hlbiB0aGVpciB0ZXh0dWFsXG4gKiAgIHJlcHJlc2VudGF0aW9uIG1hdGNoZXMpLlxuICpcbiAqIER1cmluZyBhIHByb3BlcnR5IGNvbXBhcmlzb24sIHByb3BlcnRpZXMgb2YgYGZ1bmN0aW9uYCB0eXBlIGFuZCBwcm9wZXJ0aWVzIHdpdGggbmFtZXNcbiAqIHRoYXQgYmVnaW4gd2l0aCBgJGAgYXJlIGlnbm9yZWQuXG4gKlxuICogU2NvcGUgYW5kIERPTVdpbmRvdyBvYmplY3RzIGFyZSBiZWluZyBjb21wYXJlZCBvbmx5IGJ5IGlkZW50aWZ5IChgPT09YCkuXG4gKlxuICogQHBhcmFtIHsqfSBvMSBPYmplY3Qgb3IgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gbzIgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhcmd1bWVudHMgYXJlIGVxdWFsLlxuICovXG5mdW5jdGlvbiBlcXVhbHMobzEsIG8yKSB7XG4gIGlmIChvMSA9PT0gbzIpIHJldHVybiB0cnVlO1xuICBpZiAobzEgPT09IG51bGwgfHwgbzIgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKG8xICE9PSBvMSAmJiBvMiAhPT0gbzIpIHJldHVybiB0cnVlOyAvLyBOYU4gPT09IE5hTlxuICB2YXIgdDEgPSB0eXBlb2YgbzEsIHQyID0gdHlwZW9mIG8yLCBsZW5ndGgsIGtleSwga2V5U2V0O1xuICBpZiAodDEgPT0gdDIpIHtcbiAgICBpZiAodDEgPT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChpc0FycmF5KG8xKSkge1xuICAgICAgICBpZiAoIWlzQXJyYXkobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICgobGVuZ3RoID0gbzEubGVuZ3RoKSA9PSBvMi5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKGtleT0wOyBrZXk8bGVuZ3RoOyBrZXkrKykge1xuICAgICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKG8xKSkge1xuICAgICAgICBpZiAoIWlzRGF0ZShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGVxdWFscyhvMS5nZXRUaW1lKCksIG8yLmdldFRpbWUoKSk7XG4gICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKG8xKSAmJiBpc1JlZ0V4cChvMikpIHtcbiAgICAgICAgcmV0dXJuIG8xLnRvU3RyaW5nKCkgPT0gbzIudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1Njb3BlKG8xKSB8fCBpc1Njb3BlKG8yKSB8fCBpc1dpbmRvdyhvMSkgfHwgaXNXaW5kb3cobzIpIHx8IGlzQXJyYXkobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGtleVNldCA9IHt9O1xuICAgICAgICBmb3IgKGtleSBpbiBvMSkge1xuICAgICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnJCcgfHwgaXNGdW5jdGlvbihvMVtrZXldKSkgY29udGludWU7XG4gICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBrZXlTZXRba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChrZXkgaW4gbzIpIHtcbiAgICAgICAgICBpZiAoIWtleVNldC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICAgICAgIGtleS5jaGFyQXQoMCkgIT09ICckJyAmJlxuICAgICAgICAgICAgICBvMltrZXldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgIWlzRnVuY3Rpb24obzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgY3NwID0gZnVuY3Rpb24oKSB7XG4gIGlmIChpc0RlZmluZWQoY3NwLmlzQWN0aXZlXykpIHJldHVybiBjc3AuaXNBY3RpdmVfO1xuXG4gIHZhciBhY3RpdmUgPSAhIShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmctY3NwXScpIHx8XG4gICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uZy1jc3BdJykpO1xuXG4gIGlmICghYWN0aXZlKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIGpzaGludCAtVzAzMSwgLVcwNTQgKi9cbiAgICAgIG5ldyBGdW5jdGlvbignJyk7XG4gICAgICAvKiBqc2hpbnQgK1cwMzEsICtXMDU0ICovXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGNzcC5pc0FjdGl2ZV8gPSBhY3RpdmUpO1xufTtcblxuXG5cbmZ1bmN0aW9uIGNvbmNhdChhcnJheTEsIGFycmF5MiwgaW5kZXgpIHtcbiAgcmV0dXJuIGFycmF5MS5jb25jYXQoc2xpY2UuY2FsbChhcnJheTIsIGluZGV4KSk7XG59XG5cbmZ1bmN0aW9uIHNsaWNlQXJncyhhcmdzLCBzdGFydEluZGV4KSB7XG4gIHJldHVybiBzbGljZS5jYWxsKGFyZ3MsIHN0YXJ0SW5kZXggfHwgMCk7XG59XG5cblxuLyoganNoaW50IC1XMTAxICovXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5iaW5kXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGZ1bmN0aW9uIGBmbmAgYm91bmQgdG8gYHNlbGZgIChgc2VsZmAgYmVjb21lcyB0aGUgYHRoaXNgIGZvclxuICogYGZuYCkuIFlvdSBjYW4gc3VwcGx5IG9wdGlvbmFsIGBhcmdzYCB0aGF0IGFyZSBwcmVib3VuZCB0byB0aGUgZnVuY3Rpb24uIFRoaXMgZmVhdHVyZSBpcyBhbHNvXG4gKiBrbm93biBhcyBbcGFydGlhbCBhcHBsaWNhdGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXJ0aWFsX2FwcGxpY2F0aW9uKSwgYXNcbiAqIGRpc3Rpbmd1aXNoZWQgZnJvbSBbZnVuY3Rpb24gY3VycnlpbmddKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3VycnlpbmcjQ29udHJhc3Rfd2l0aF9wYXJ0aWFsX2Z1bmN0aW9uX2FwcGxpY2F0aW9uKS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2VsZiBDb250ZXh0IHdoaWNoIGBmbmAgc2hvdWxkIGJlIGV2YWx1YXRlZCBpbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gRnVuY3Rpb24gdG8gYmUgYm91bmQuXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHByZWJvdW5kIHRvIHRoZSBgZm5gIGZ1bmN0aW9uIGNhbGwuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gRnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgYGZuYCB3aXRoIGFsbCB0aGUgc3BlY2lmaWVkIGJpbmRpbmdzLlxuICovXG4vKiBqc2hpbnQgK1cxMDEgKi9cbmZ1bmN0aW9uIGJpbmQoc2VsZiwgZm4pIHtcbiAgdmFyIGN1cnJ5QXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikgOiBbXTtcbiAgaWYgKGlzRnVuY3Rpb24oZm4pICYmICEoZm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgcmV0dXJuIGN1cnJ5QXJncy5sZW5ndGhcbiAgICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgY3VycnlBcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cywgMCkpKVxuICAgICAgICAgICAgOiBmbi5hcHBseShzZWxmLCBjdXJyeUFyZ3MpO1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIDogZm4uY2FsbChzZWxmKTtcbiAgICAgICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpbiBJRSwgbmF0aXZlIG1ldGhvZHMgYXJlIG5vdCBmdW5jdGlvbnMgc28gdGhleSBjYW5ub3QgYmUgYm91bmQgKG5vdGU6IHRoZXkgZG9uJ3QgbmVlZCB0byBiZSlcbiAgICByZXR1cm4gZm47XG4gIH1cbn1cblxuXG5mdW5jdGlvbiB0b0pzb25SZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gIHZhciB2YWwgPSB2YWx1ZTtcblxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykge1xuICAgIHZhbCA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChpc1dpbmRvdyh2YWx1ZSkpIHtcbiAgICB2YWwgPSAnJFdJTkRPVyc7XG4gIH0gZWxzZSBpZiAodmFsdWUgJiYgIGRvY3VtZW50ID09PSB2YWx1ZSkge1xuICAgIHZhbCA9ICckRE9DVU1FTlQnO1xuICB9IGVsc2UgaWYgKGlzU2NvcGUodmFsdWUpKSB7XG4gICAgdmFsID0gJyRTQ09QRSc7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnRvSnNvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlcmlhbGl6ZXMgaW5wdXQgaW50byBhIEpTT04tZm9ybWF0dGVkIHN0cmluZy4gUHJvcGVydGllcyB3aXRoIGxlYWRpbmcgJCQgY2hhcmFjdGVycyB3aWxsIGJlXG4gKiBzdHJpcHBlZCBzaW5jZSBhbmd1bGFyIHVzZXMgdGhpcyBub3RhdGlvbiBpbnRlcm5hbGx5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fERhdGV8c3RyaW5nfG51bWJlcn0gb2JqIElucHV0IHRvIGJlIHNlcmlhbGl6ZWQgaW50byBKU09OLlxuICogQHBhcmFtIHtib29sZWFuPX0gcHJldHR5IElmIHNldCB0byB0cnVlLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIG5ld2xpbmVzIGFuZCB3aGl0ZXNwYWNlLlxuICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IEpTT04taWZpZWQgc3RyaW5nIHJlcHJlc2VudGluZyBgb2JqYC5cbiAqL1xuZnVuY3Rpb24gdG9Kc29uKG9iaiwgcHJldHR5KSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgdG9Kc29uUmVwbGFjZXIsIHByZXR0eSA/ICcgICcgOiBudWxsKTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5mcm9tSnNvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlc2VyaWFsaXplcyBhIEpTT04gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybnMge09iamVjdHxBcnJheXxzdHJpbmd8bnVtYmVyfSBEZXNlcmlhbGl6ZWQgdGhpbmd5LlxuICovXG5mdW5jdGlvbiBmcm9tSnNvbihqc29uKSB7XG4gIHJldHVybiBpc1N0cmluZyhqc29uKVxuICAgICAgPyBKU09OLnBhcnNlKGpzb24pXG4gICAgICA6IGpzb247XG59XG5cblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0aW5nVGFnKGVsZW1lbnQpIHtcbiAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KS5jbG9uZSgpO1xuICB0cnkge1xuICAgIC8vIHR1cm5zIG91dCBJRSBkb2VzIG5vdCBsZXQgeW91IHNldCAuaHRtbCgpIG9uIGVsZW1lbnRzIHdoaWNoXG4gICAgLy8gYXJlIG5vdCBhbGxvd2VkIHRvIGhhdmUgY2hpbGRyZW4uIFNvIHdlIGp1c3QgaWdub3JlIGl0LlxuICAgIGVsZW1lbnQuZW1wdHkoKTtcbiAgfSBjYXRjaCAoZSkge31cbiAgdmFyIGVsZW1IdG1sID0ganFMaXRlKCc8ZGl2PicpLmFwcGVuZChlbGVtZW50KS5odG1sKCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVsZW1lbnRbMF0ubm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUID8gbG93ZXJjYXNlKGVsZW1IdG1sKSA6XG4gICAgICAgIGVsZW1IdG1sLlxuICAgICAgICAgIG1hdGNoKC9eKDxbXj5dKz4pLylbMV0uXG4gICAgICAgICAgcmVwbGFjZSgvXjwoW1xcd1xcLV0rKS8sIGZ1bmN0aW9uKG1hdGNoLCBub2RlTmFtZSkgeyByZXR1cm4gJzwnICsgbG93ZXJjYXNlKG5vZGVOYW1lKTsgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbG93ZXJjYXNlKGVsZW1IdG1sKTtcbiAgfVxuXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIFRyaWVzIHRvIGRlY29kZSB0aGUgVVJJIGNvbXBvbmVudCB3aXRob3V0IHRocm93aW5nIGFuIGV4Y2VwdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHN0ciB2YWx1ZSBwb3RlbnRpYWwgVVJJIGNvbXBvbmVudCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgY2FuIGJlIGRlY29kZWRcbiAqIHdpdGggdGhlIGRlY29kZVVSSUNvbXBvbmVudCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUgYW55IGludmFsaWQgdXJpIGNvbXBvbmVudFxuICB9XG59XG5cblxuLyoqXG4gKiBQYXJzZXMgYW4gZXNjYXBlZCB1cmwgcXVlcnkgc3RyaW5nIGludG8ga2V5LXZhbHVlIHBhaXJzLlxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLGJvb2xlYW58QXJyYXk+fVxuICovXG5mdW5jdGlvbiBwYXJzZUtleVZhbHVlKC8qKnN0cmluZyova2V5VmFsdWUpIHtcbiAgdmFyIG9iaiA9IHt9LCBrZXlfdmFsdWUsIGtleTtcbiAgZm9yRWFjaCgoa2V5VmFsdWUgfHwgXCJcIikuc3BsaXQoJyYnKSwgZnVuY3Rpb24oa2V5VmFsdWUpIHtcbiAgICBpZiAoa2V5VmFsdWUpIHtcbiAgICAgIGtleV92YWx1ZSA9IGtleVZhbHVlLnJlcGxhY2UoL1xcKy9nLCclMjAnKS5zcGxpdCgnPScpO1xuICAgICAga2V5ID0gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleV92YWx1ZVswXSk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGtleSkpIHtcbiAgICAgICAgdmFyIHZhbCA9IGlzRGVmaW5lZChrZXlfdmFsdWVbMV0pID8gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleV92YWx1ZVsxXSkgOiB0cnVlO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba2V5XSkpIHtcbiAgICAgICAgICBvYmpba2V5XS5wdXNoKHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqW2tleV0gPSBbb2JqW2tleV0sdmFsXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHRvS2V5VmFsdWUob2JqKSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24oYXJyYXlWYWx1ZSkge1xuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgK1xuICAgICAgICAgICAgICAgICAgIChhcnJheVZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeShhcnJheVZhbHVlLCB0cnVlKSkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgK1xuICAgICAgICAgICAgICAgKHZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeSh2YWx1ZSwgdHJ1ZSkpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcGFydHMubGVuZ3RoID8gcGFydHMuam9pbignJicpIDogJyc7XG59XG5cblxuLyoqXG4gKiBXZSBuZWVkIG91ciBjdXN0b20gbWV0aG9kIGJlY2F1c2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ2dyZXNzaXZlIGFuZCBkb2Vzbid0IGZvbGxvd1xuICogaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzk4Ni50eHQgd2l0aCByZWdhcmRzIHRvIHRoZSBjaGFyYWN0ZXIgc2V0IChwY2hhcikgYWxsb3dlZCBpbiBwYXRoXG4gKiBzZWdtZW50czpcbiAqICAgIHNlZ21lbnQgICAgICAgPSAqcGNoYXJcbiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcbiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gXCItXCIgLyBcIi5cIiAvIFwiX1wiIC8gXCJ+XCJcbiAqICAgIHN1Yi1kZWxpbXMgICAgPSBcIiFcIiAvIFwiJFwiIC8gXCImXCIgLyBcIidcIiAvIFwiKFwiIC8gXCIpXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVyaVNlZ21lbnQodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVcmlRdWVyeSh2YWwsIHRydWUpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyNi9naSwgJyYnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lM0QvZ2ksICc9JykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTJCL2dpLCAnKycpO1xufVxuXG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIGVuY29kaW5nICprZXkqIG9yICp2YWx1ZSogcGFydHMgb2YgcXVlcnkgY29tcG9uZW50LiBXZSBuZWVkIGEgY3VzdG9tXG4gKiBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGVuY29kZXMgc3R1ZmYgdGhhdCBkb2Vzbid0IGhhdmUgdG8gYmVcbiAqIGVuY29kZWQgcGVyIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODY6XG4gKiAgICBxdWVyeSAgICAgICA9ICooIHBjaGFyIC8gXCIvXCIgLyBcIj9cIiApXG4gKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcbiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gXCItXCIgLyBcIi5cIiAvIFwiX1wiIC8gXCJ+XCJcbiAqICAgIHBjdC1lbmNvZGVkICAgPSBcIiVcIiBIRVhESUcgSEVYRElHXG4gKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXG4gKiAgICAgICAgICAgICAgICAgICAgIC8gXCIqXCIgLyBcIitcIiAvIFwiLFwiIC8gXCI7XCIgLyBcIj1cIlxuICovXG5mdW5jdGlvbiBlbmNvZGVVcmlRdWVyeSh2YWwsIHBjdEVuY29kZVNwYWNlcykge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNCL2dpLCAnOycpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyMC9nLCAocGN0RW5jb2RlU3BhY2VzID8gJyUyMCcgOiAnKycpKTtcbn1cblxudmFyIG5nQXR0clByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmc6JywgJ3gtbmctJ107XG5cbmZ1bmN0aW9uIGdldE5nQXR0cmlidXRlKGVsZW1lbnQsIG5nQXR0cikge1xuICB2YXIgYXR0ciwgaSwgaWkgPSBuZ0F0dHJQcmVmaXhlcy5sZW5ndGg7XG4gIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7XG4gIGZvciAoaT0wOyBpPGlpOyArK2kpIHtcbiAgICBhdHRyID0gbmdBdHRyUHJlZml4ZXNbaV0gKyBuZ0F0dHI7XG4gICAgaWYgKGlzU3RyaW5nKGF0dHIgPSBlbGVtZW50LmF0dHIoYXR0cikpKSB7XG4gICAgICByZXR1cm4gYXR0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdBcHBcbiAqIEBtb2R1bGUgbmdcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7YW5ndWxhci5Nb2R1bGV9IG5nQXBwIGFuIG9wdGlvbmFsIGFwcGxpY2F0aW9uXG4gKiAgIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGV9IG5hbWUgdG8gbG9hZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nU3RyaWN0RGkgaWYgdGhpcyBhdHRyaWJ1dGUgaXMgcHJlc2VudCBvbiB0aGUgYXBwIGVsZW1lbnQsIHRoZSBpbmplY3RvciB3aWxsIGJlXG4gKiAgIGNyZWF0ZWQgaW4gXCJzdHJpY3QtZGlcIiBtb2RlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGFwcGxpY2F0aW9uIHdpbGwgZmFpbCB0byBpbnZva2UgZnVuY3Rpb25zIHdoaWNoXG4gKiAgIGRvIG5vdCB1c2UgZXhwbGljaXQgZnVuY3Rpb24gYW5ub3RhdGlvbiAoYW5kIGFyZSB0aHVzIHVuc3VpdGFibGUgZm9yIG1pbmlmaWNhdGlvbiksIGFzIGRlc2NyaWJlZFxuICogICBpbiB7QGxpbmsgZ3VpZGUvZGkgdGhlIERlcGVuZGVuY3kgSW5qZWN0aW9uIGd1aWRlfSwgYW5kIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mbyB3aWxsIGFzc2lzdCBpblxuICogICB0cmFja2luZyBkb3duIHRoZSByb290IG9mIHRoZXNlIGJ1Z3MuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlIHRoaXMgZGlyZWN0aXZlIHRvICoqYXV0by1ib290c3RyYXAqKiBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24uIFRoZSBgbmdBcHBgIGRpcmVjdGl2ZVxuICogZGVzaWduYXRlcyB0aGUgKipyb290IGVsZW1lbnQqKiBvZiB0aGUgYXBwbGljYXRpb24gYW5kIGlzIHR5cGljYWxseSBwbGFjZWQgbmVhciB0aGUgcm9vdCBlbGVtZW50XG4gKiBvZiB0aGUgcGFnZSAtIGUuZy4gb24gdGhlIGA8Ym9keT5gIG9yIGA8aHRtbD5gIHRhZ3MuXG4gKlxuICogT25seSBvbmUgQW5ndWxhckpTIGFwcGxpY2F0aW9uIGNhbiBiZSBhdXRvLWJvb3RzdHJhcHBlZCBwZXIgSFRNTCBkb2N1bWVudC4gVGhlIGZpcnN0IGBuZ0FwcGBcbiAqIGZvdW5kIGluIHRoZSBkb2N1bWVudCB3aWxsIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSByb290IGVsZW1lbnQgdG8gYXV0by1ib290c3RyYXAgYXMgYW5cbiAqIGFwcGxpY2F0aW9uLiBUbyBydW4gbXVsdGlwbGUgYXBwbGljYXRpb25zIGluIGFuIEhUTUwgZG9jdW1lbnQgeW91IG11c3QgbWFudWFsbHkgYm9vdHN0cmFwIHRoZW0gdXNpbmdcbiAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gaW5zdGVhZC4gQW5ndWxhckpTIGFwcGxpY2F0aW9ucyBjYW5ub3QgYmUgbmVzdGVkIHdpdGhpbiBlYWNoIG90aGVyLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBhbiAqKkFuZ3VsYXJKUyBtb2R1bGUqKiB0byBiZSB1c2VkIGFzIHRoZSByb290IG1vZHVsZSBmb3IgdGhlIGFwcGxpY2F0aW9uLiAgVGhpc1xuICogbW9kdWxlIHdpbGwgYmUgbG9hZGVkIGludG8gdGhlIHtAbGluayBhdXRvLiRpbmplY3Rvcn0gd2hlbiB0aGUgYXBwbGljYXRpb24gaXMgYm9vdHN0cmFwcGVkIGFuZFxuICogc2hvdWxkIGNvbnRhaW4gdGhlIGFwcGxpY2F0aW9uIGNvZGUgbmVlZGVkIG9yIGhhdmUgZGVwZW5kZW5jaWVzIG9uIG90aGVyIG1vZHVsZXMgdGhhdCB3aWxsXG4gKiBjb250YWluIHRoZSBjb2RlLiBTZWUge0BsaW5rIGFuZ3VsYXIubW9kdWxlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyBpZiB0aGUgYG5nQXBwYCBkaXJlY3RpdmUgd2VyZSBub3QgcGxhY2VkIG9uIHRoZSBgaHRtbGAgZWxlbWVudCB0aGVuIHRoZVxuICogZG9jdW1lbnQgd291bGQgbm90IGJlIGNvbXBpbGVkLCB0aGUgYEFwcENvbnRyb2xsZXJgIHdvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgYW5kIHRoZSBge3sgYStiIH19YFxuICogd291bGQgbm90IGJlIHJlc29sdmVkIHRvIGAzYC5cbiAqXG4gKiBgbmdBcHBgIGlzIHRoZSBlYXNpZXN0LCBhbmQgbW9zdCBjb21tb24sIHdheSB0byBib290c3RyYXAgYW4gYXBwbGljYXRpb24uXG4gKlxuIDxleGFtcGxlIG1vZHVsZT1cIm5nQXBwRGVtb1wiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxkaXYgbmctY29udHJvbGxlcj1cIm5nQXBwRGVtb0NvbnRyb2xsZXJcIj5cbiAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBEZW1vJywgW10pLmNvbnRyb2xsZXIoJ25nQXBwRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgJHNjb3BlLmEgPSAxO1xuICAgICAkc2NvcGUuYiA9IDI7XG4gICB9KTtcbiAgIDwvZmlsZT5cbiA8L2V4YW1wbGU+XG4gKlxuICogVXNpbmcgYG5nU3RyaWN0RGlgLCB5b3Ugd291bGQgc2VlIHNvbWV0aGluZyBsaWtlIHRoaXM6XG4gKlxuIDxleGFtcGxlIG5nLWFwcC1pbmNsdWRlZD1cInRydWVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8ZGl2IG5nLWFwcD1cIm5nQXBwU3RyaWN0RGVtb1wiIG5nLXN0cmljdC1kaT5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHb29kQ29udHJvbGxlcjFcIj5cbiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuXG4gICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG9cbiAgICAgICAgICAgICAgaW5zdGFudGlhdGUsIGJ5IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gc3R5bGUgKHNlZVxuICAgICAgICAgICAgICBzY3JpcHQuanMgZm9yIGRldGFpbHMpXG4gICAgICAgICAgIDwvcD5cbiAgICAgICA8L2Rpdj5cblxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdvb2RDb250cm9sbGVyMlwiPlxuICAgICAgICAgICBOYW1lOiA8aW5wdXQgbmctbW9kZWw9XCJuYW1lXCI+PGJyIC8+XG4gICAgICAgICAgIEhlbGxvLCB7e25hbWV9fSFcblxuICAgICAgICAgICA8cD5UaGlzIHJlbmRlcnMgYmVjYXVzZSB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBmYWlsIHRvXG4gICAgICAgICAgICAgIGluc3RhbnRpYXRlLCBieSB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9uIHN0eWxlXG4gICAgICAgICAgICAgIChzZWUgc2NyaXB0LmpzIGZvciBkZXRhaWxzKVxuICAgICAgICAgICA8L3A+XG4gICAgICAgPC9kaXY+XG5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJCYWRDb250cm9sbGVyXCI+XG4gICAgICAgICAgIEkgY2FuIGFkZDoge3thfX0gKyB7e2J9fSA9ICB7eyBhK2IgfX1cblxuICAgICAgICAgICA8cD5UaGUgY29udHJvbGxlciBjb3VsZCBub3QgYmUgaW5zdGFudGlhdGVkLCBkdWUgdG8gcmVseWluZ1xuICAgICAgICAgICAgICBvbiBhdXRvbWF0aWMgZnVuY3Rpb24gYW5ub3RhdGlvbnMgKHdoaWNoIGFyZSBkaXNhYmxlZCBpblxuICAgICAgICAgICAgICBzdHJpY3QgbW9kZSkuIEFzIHN1Y2gsIHRoZSBjb250ZW50IG9mIHRoaXMgc2VjdGlvbiBpcyBub3RcbiAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkLCBhbmQgdGhlcmUgc2hvdWxkIGJlIGFuIGVycm9yIGluIHlvdXIgd2ViIGNvbnNvbGUuXG4gICAgICAgICAgIDwvcD5cbiAgICAgICA8L2Rpdj5cbiAgIDwvZGl2PlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgYW5ndWxhci5tb2R1bGUoJ25nQXBwU3RyaWN0RGVtbycsIFtdKVxuICAgICAvLyBCYWRDb250cm9sbGVyIHdpbGwgZmFpbCB0byBpbnN0YW50aWF0ZSwgZHVlIHRvIHJlbHlpbmcgb24gYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24sXG4gICAgIC8vIHJhdGhlciB0aGFuIGFuIGV4cGxpY2l0IGFubm90YXRpb25cbiAgICAgLmNvbnRyb2xsZXIoJ0JhZENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICAgJHNjb3BlLmIgPSAyO1xuICAgICB9KVxuICAgICAvLyBVbmxpa2UgQmFkQ29udHJvbGxlciwgR29vZENvbnRyb2xsZXIxIGFuZCBHb29kQ29udHJvbGxlcjIgd2lsbCBub3QgZmFpbCB0byBiZSBpbnN0YW50aWF0ZWQsXG4gICAgIC8vIGR1ZSB0byB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9ucyB1c2luZyB0aGUgYXJyYXkgc3R5bGUgYW5kICRpbmplY3QgcHJvcGVydHksIHJlc3BlY3RpdmVseS5cbiAgICAgLmNvbnRyb2xsZXIoJ0dvb2RDb250cm9sbGVyMScsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgJHNjb3BlLmEgPSAxO1xuICAgICAgICRzY29wZS5iID0gMjtcbiAgICAgfV0pXG4gICAgIC5jb250cm9sbGVyKCdHb29kQ29udHJvbGxlcjInLCBHb29kQ29udHJvbGxlcjIpO1xuICAgICBmdW5jdGlvbiBHb29kQ29udHJvbGxlcjIoJHNjb3BlKSB7XG4gICAgICAgJHNjb3BlLm5hbWUgPSBcIldvcmxkXCI7XG4gICAgIH1cbiAgICAgR29vZENvbnRyb2xsZXIyLiRpbmplY3QgPSBbJyRzY29wZSddO1xuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgZGl2W25nLWNvbnRyb2xsZXJdIHtcbiAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgIGJvcmRlcjogMXB4IHNvbGlkO1xuICAgICAgIHBhZGRpbmc6IC41ZW07XG4gICB9XG4gICBkaXZbbmctY29udHJvbGxlcl49R29vZF0ge1xuICAgICAgIGJvcmRlci1jb2xvcjogI2Q2ZTljNjtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGZmMGQ4O1xuICAgICAgIGNvbG9yOiAjM2M3NjNkO1xuICAgfVxuICAgZGl2W25nLWNvbnRyb2xsZXJePUJhZF0ge1xuICAgICAgIGJvcmRlci1jb2xvcjogI2ViY2NkMTtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJkZWRlO1xuICAgICAgIGNvbG9yOiAjYTk0NDQyO1xuICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICB9XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiBhbmd1bGFySW5pdChlbGVtZW50LCBib290c3RyYXApIHtcbiAgdmFyIGFwcEVsZW1lbnQsXG4gICAgICBtb2R1bGUsXG4gICAgICBjb25maWcgPSB7fTtcblxuICAvLyBUaGUgZWxlbWVudCBgZWxlbWVudGAgaGFzIHByaW9yaXR5IG92ZXIgYW55IG90aGVyIGVsZW1lbnRcbiAgZm9yRWFjaChuZ0F0dHJQcmVmaXhlcywgZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJztcblxuICAgIGlmICghYXBwRWxlbWVudCAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZSAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgYXBwRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICBtb2R1bGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG4gIH0pO1xuICBmb3JFYWNoKG5nQXR0clByZWZpeGVzLCBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgbmFtZSA9IHByZWZpeCArICdhcHAnO1xuICAgIHZhciBjYW5kaWRhdGU7XG5cbiAgICBpZiAoIWFwcEVsZW1lbnQgJiYgKGNhbmRpZGF0ZSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignWycgKyBuYW1lLnJlcGxhY2UoJzonLCAnXFxcXDonKSArICddJykpKSB7XG4gICAgICBhcHBFbGVtZW50ID0gY2FuZGlkYXRlO1xuICAgICAgbW9kdWxlID0gY2FuZGlkYXRlLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG4gIH0pO1xuICBpZiAoYXBwRWxlbWVudCkge1xuICAgIGNvbmZpZy5zdHJpY3REaSA9IGdldE5nQXR0cmlidXRlKGFwcEVsZW1lbnQsIFwic3RyaWN0LWRpXCIpICE9PSBudWxsO1xuICAgIGJvb3RzdHJhcChhcHBFbGVtZW50LCBtb2R1bGUgPyBbbW9kdWxlXSA6IFtdLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmJvb3RzdHJhcFxuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiB0byBtYW51YWxseSBzdGFydCB1cCBhbmd1bGFyIGFwcGxpY2F0aW9uLlxuICpcbiAqIFNlZToge0BsaW5rIGd1aWRlL2Jvb3RzdHJhcCBCb290c3RyYXB9XG4gKlxuICogTm90ZSB0aGF0IFByb3RyYWN0b3IgYmFzZWQgZW5kLXRvLWVuZCB0ZXN0cyBjYW5ub3QgdXNlIHRoaXMgZnVuY3Rpb24gdG8gYm9vdHN0cmFwIG1hbnVhbGx5LlxuICogVGhleSBtdXN0IHVzZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfS5cbiAqXG4gKiBBbmd1bGFyIHdpbGwgZGV0ZWN0IGlmIGl0IGhhcyBiZWVuIGxvYWRlZCBpbnRvIHRoZSBicm93c2VyIG1vcmUgdGhhbiBvbmNlIGFuZCBvbmx5IGFsbG93IHRoZVxuICogZmlyc3QgbG9hZGVkIHNjcmlwdCB0byBiZSBib290c3RyYXBwZWQgYW5kIHdpbGwgcmVwb3J0IGEgd2FybmluZyB0byB0aGUgYnJvd3NlciBjb25zb2xlIGZvclxuICogZWFjaCBvZiB0aGUgc3Vic2VxdWVudCBzY3JpcHRzLiBUaGlzIHByZXZlbnRzIHN0cmFuZ2UgcmVzdWx0cyBpbiBhcHBsaWNhdGlvbnMsIHdoZXJlIG90aGVyd2lzZVxuICogbXVsdGlwbGUgaW5zdGFuY2VzIG9mIEFuZ3VsYXIgdHJ5IHRvIHdvcmsgb24gdGhlIERPTS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IWRvY3R5cGUgaHRtbD5cbiAqIDxodG1sPlxuICogPGJvZHk+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJXZWxjb21lQ29udHJvbGxlclwiPlxuICogICB7e2dyZWV0aW5nfX1cbiAqIDwvZGl2PlxuICpcbiAqIDxzY3JpcHQgc3JjPVwiYW5ndWxhci5qc1wiPjwvc2NyaXB0PlxuICogPHNjcmlwdD5cbiAqICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdkZW1vJywgW10pXG4gKiAgIC5jb250cm9sbGVyKCdXZWxjb21lQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgJHNjb3BlLmdyZWV0aW5nID0gJ1dlbGNvbWUhJztcbiAqICAgfSk7XG4gKiAgIGFuZ3VsYXIuYm9vdHN0cmFwKGRvY3VtZW50LCBbJ2RlbW8nXSk7XG4gKiA8L3NjcmlwdD5cbiAqIDwvYm9keT5cbiAqIDwvaHRtbD5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCBET00gZWxlbWVudCB3aGljaCBpcyB0aGUgcm9vdCBvZiBhbmd1bGFyIGFwcGxpY2F0aW9uLlxuICogQHBhcmFtIHtBcnJheTxTdHJpbmd8RnVuY3Rpb258QXJyYXk+PX0gbW9kdWxlcyBhbiBhcnJheSBvZiBtb2R1bGVzIHRvIGxvYWQgaW50byB0aGUgYXBwbGljYXRpb24uXG4gKiAgICAgRWFjaCBpdGVtIGluIHRoZSBhcnJheSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgYSBwcmVkZWZpbmVkIG1vZHVsZSBvciBhIChESSBhbm5vdGF0ZWQpXG4gKiAgICAgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgYnkgdGhlIGluamVjdG9yIGFzIGEgcnVuIGJsb2NrLlxuICogICAgIFNlZToge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9XG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBhbiBvYmplY3QgZm9yIGRlZmluaW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGFwcGxpY2F0aW9uLiBUaGVcbiAqICAgICBmb2xsb3dpbmcga2V5cyBhcmUgc3VwcG9ydGVkOlxuICpcbiAqICAgICAtIGBzdHJpY3REaWA6IGRpc2FibGUgYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBpcyBtZWFudCB0b1xuICogICAgICAgYXNzaXN0IGluIGZpbmRpbmcgYnVncyB3aGljaCBicmVhayBtaW5pZmllZCBjb2RlLlxuICpcbiAqIEByZXR1cm5zIHthdXRvLiRpbmplY3Rvcn0gUmV0dXJucyB0aGUgbmV3bHkgY3JlYXRlZCBpbmplY3RvciBmb3IgdGhpcyBhcHAuXG4gKi9cbmZ1bmN0aW9uIGJvb3RzdHJhcChlbGVtZW50LCBtb2R1bGVzLCBjb25maWcpIHtcbiAgaWYgKCFpc09iamVjdChjb25maWcpKSBjb25maWcgPSB7fTtcbiAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgc3RyaWN0RGk6IGZhbHNlXG4gIH07XG4gIGNvbmZpZyA9IGV4dGVuZChkZWZhdWx0Q29uZmlnLCBjb25maWcpO1xuICB2YXIgZG9Cb290c3RyYXAgPSBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnQuaW5qZWN0b3IoKSkge1xuICAgICAgdmFyIHRhZyA9IChlbGVtZW50WzBdID09PSBkb2N1bWVudCkgPyAnZG9jdW1lbnQnIDogc3RhcnRpbmdUYWcoZWxlbWVudCk7XG4gICAgICAvL0VuY29kZSBhbmdsZSBicmFja2V0cyB0byBwcmV2ZW50IGlucHV0IGZyb20gYmVpbmcgc2FuaXRpemVkIHRvIGVtcHR5IHN0cmluZyAjODY4M1xuICAgICAgdGhyb3cgbmdNaW5FcnIoXG4gICAgICAgICAgJ2J0c3RycGQnLFxuICAgICAgICAgIFwiQXBwIEFscmVhZHkgQm9vdHN0cmFwcGVkIHdpdGggdGhpcyBFbGVtZW50ICd7MH0nXCIsXG4gICAgICAgICAgdGFnLnJlcGxhY2UoLzwvLCcmbHQ7JykucmVwbGFjZSgvPi8sJyZndDsnKSk7XG4gICAgfVxuXG4gICAgbW9kdWxlcyA9IG1vZHVsZXMgfHwgW107XG4gICAgbW9kdWxlcy51bnNoaWZ0KFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkge1xuICAgICAgJHByb3ZpZGUudmFsdWUoJyRyb290RWxlbWVudCcsIGVsZW1lbnQpO1xuICAgIH1dKTtcblxuICAgIGlmIChjb25maWcuZGVidWdJbmZvRW5hYmxlZCkge1xuICAgICAgLy8gUHVzaGluZyBzbyB0aGF0IHRoaXMgb3ZlcnJpZGVzIGBkZWJ1Z0luZm9FbmFibGVkYCBzZXR0aW5nIGRlZmluZWQgaW4gdXNlcidzIGBtb2R1bGVzYC5cbiAgICAgIG1vZHVsZXMucHVzaChbJyRjb21waWxlUHJvdmlkZXInLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZCh0cnVlKTtcbiAgICAgIH1dKTtcbiAgICB9XG5cbiAgICBtb2R1bGVzLnVuc2hpZnQoJ25nJyk7XG4gICAgdmFyIGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobW9kdWxlcywgY29uZmlnLnN0cmljdERpKTtcbiAgICBpbmplY3Rvci5pbnZva2UoWyckcm9vdFNjb3BlJywgJyRyb290RWxlbWVudCcsICckY29tcGlsZScsICckaW5qZWN0b3InLFxuICAgICAgIGZ1bmN0aW9uIGJvb3RzdHJhcEFwcGx5KHNjb3BlLCBlbGVtZW50LCBjb21waWxlLCBpbmplY3Rvcikge1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5kYXRhKCckaW5qZWN0b3InLCBpbmplY3Rvcik7XG4gICAgICAgICAgY29tcGlsZShlbGVtZW50KShzY29wZSk7XG4gICAgICAgIH0pO1xuICAgICAgfV1cbiAgICApO1xuICAgIHJldHVybiBpbmplY3RvcjtcbiAgfTtcblxuICB2YXIgTkdfRU5BQkxFX0RFQlVHX0lORk8gPSAvXk5HX0VOQUJMRV9ERUJVR19JTkZPIS87XG4gIHZhciBOR19ERUZFUl9CT09UU1RSQVAgPSAvXk5HX0RFRkVSX0JPT1RTVFJBUCEvO1xuXG4gIGlmICh3aW5kb3cgJiYgTkdfRU5BQkxFX0RFQlVHX0lORk8udGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICBjb25maWcuZGVidWdJbmZvRW5hYmxlZCA9IHRydWU7XG4gICAgd2luZG93Lm5hbWUgPSB3aW5kb3cubmFtZS5yZXBsYWNlKE5HX0VOQUJMRV9ERUJVR19JTkZPLCAnJyk7XG4gIH1cblxuICBpZiAod2luZG93ICYmICFOR19ERUZFUl9CT09UU1RSQVAudGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgfVxuXG4gIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19ERUZFUl9CT09UU1RSQVAsICcnKTtcbiAgYW5ndWxhci5yZXN1bWVCb290c3RyYXAgPSBmdW5jdGlvbihleHRyYU1vZHVsZXMpIHtcbiAgICBmb3JFYWNoKGV4dHJhTW9kdWxlcywgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kdWxlKTtcbiAgICB9KTtcbiAgICBkb0Jvb3RzdHJhcCgpO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5yZWxvYWRXaXRoRGVidWdJbmZvXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIHJlbG9hZCB0aGUgY3VycmVudCBhcHBsaWNhdGlvbiB3aXRoIGRlYnVnIGluZm9ybWF0aW9uIHR1cm5lZCBvbi5cbiAqIFRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGEgY2FsbCB0byBgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKWAuXG4gKlxuICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWR9IGZvciBtb3JlLlxuICovXG5mdW5jdGlvbiByZWxvYWRXaXRoRGVidWdJbmZvKCkge1xuICB3aW5kb3cubmFtZSA9ICdOR19FTkFCTEVfREVCVUdfSU5GTyEnICsgd2luZG93Lm5hbWU7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbn1cblxuLyoqXG4gKiBAbmFtZSBhbmd1bGFyLmdldFRlc3RhYmlsaXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgdGVzdGFiaWxpdHkgc2VydmljZSBmb3IgdGhlIGluc3RhbmNlIG9mIEFuZ3VsYXIgb24gdGhlIGdpdmVuXG4gKiBlbGVtZW50LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdldFRlc3RhYmlsaXR5KHJvb3RFbGVtZW50KSB7XG4gIHJldHVybiBhbmd1bGFyLmVsZW1lbnQocm9vdEVsZW1lbnQpLmluamVjdG9yKCkuZ2V0KCckJHRlc3RhYmlsaXR5Jyk7XG59XG5cbnZhciBTTkFLRV9DQVNFX1JFR0VYUCA9IC9bQS1aXS9nO1xuZnVuY3Rpb24gc25ha2VfY2FzZShuYW1lLCBzZXBhcmF0b3IpIHtcbiAgc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8ICdfJztcbiAgcmV0dXJuIG5hbWUucmVwbGFjZShTTkFLRV9DQVNFX1JFR0VYUCwgZnVuY3Rpb24obGV0dGVyLCBwb3MpIHtcbiAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbn1cblxudmFyIGJpbmRKUXVlcnlGaXJlZCA9IGZhbHNlO1xudmFyIHNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhO1xuZnVuY3Rpb24gYmluZEpRdWVyeSgpIHtcbiAgdmFyIG9yaWdpbmFsQ2xlYW5EYXRhO1xuXG4gIGlmIChiaW5kSlF1ZXJ5RmlyZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBiaW5kIHRvIGpRdWVyeSBpZiBwcmVzZW50O1xuICBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xuICAvLyBVc2UgalF1ZXJ5IGlmIGl0IGV4aXN0cyB3aXRoIHByb3BlciBmdW5jdGlvbmFsaXR5LCBvdGhlcndpc2UgZGVmYXVsdCB0byB1cy5cbiAgLy8gQW5ndWxhciAxLjIrIHJlcXVpcmVzIGpRdWVyeSAxLjcrIGZvciBvbigpL29mZigpIHN1cHBvcnQuXG4gIC8vIEFuZ3VsYXIgMS4zKyB0ZWNobmljYWxseSByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgMi4xKyBidXQgaXQgbWF5IHdvcmsgd2l0aCBvbGRlclxuICAvLyB2ZXJzaW9ucy4gSXQgd2lsbCBub3Qgd29yayBmb3Igc3VyZSB3aXRoIGpRdWVyeSA8MS43LCB0aG91Z2guXG4gIGlmIChqUXVlcnkgJiYgalF1ZXJ5LmZuLm9uKSB7XG4gICAganFMaXRlID0galF1ZXJ5O1xuICAgIGV4dGVuZChqUXVlcnkuZm4sIHtcbiAgICAgIHNjb3BlOiBKUUxpdGVQcm90b3R5cGUuc2NvcGUsXG4gICAgICBpc29sYXRlU2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5pc29sYXRlU2NvcGUsXG4gICAgICBjb250cm9sbGVyOiBKUUxpdGVQcm90b3R5cGUuY29udHJvbGxlcixcbiAgICAgIGluamVjdG9yOiBKUUxpdGVQcm90b3R5cGUuaW5qZWN0b3IsXG4gICAgICBpbmhlcml0ZWREYXRhOiBKUUxpdGVQcm90b3R5cGUuaW5oZXJpdGVkRGF0YVxuICAgIH0pO1xuXG4gICAgLy8gQWxsIG5vZGVzIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHZpYSB2YXJpb3VzIGpRdWVyeSBBUElzIGxpa2UgLnJlbW92ZSgpXG4gICAgLy8gYXJlIHBhc3NlZCB0aHJvdWdoIGpRdWVyeS5jbGVhbkRhdGEuIE1vbmtleS1wYXRjaCB0aGlzIG1ldGhvZCB0byBmaXJlXG4gICAgLy8gdGhlICRkZXN0cm95IGV2ZW50IG9uIGFsbCByZW1vdmVkIG5vZGVzLlxuICAgIG9yaWdpbmFsQ2xlYW5EYXRhID0galF1ZXJ5LmNsZWFuRGF0YTtcbiAgICBqUXVlcnkuY2xlYW5EYXRhID0gZnVuY3Rpb24oZWxlbXMpIHtcbiAgICAgIHZhciBldmVudHM7XG4gICAgICBpZiAoIXNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKyspIHtcbiAgICAgICAgICBldmVudHMgPSBqUXVlcnkuX2RhdGEoZWxlbSwgXCJldmVudHNcIik7XG4gICAgICAgICAgaWYgKGV2ZW50cyAmJiBldmVudHMuJGRlc3Ryb3kpIHtcbiAgICAgICAgICAgIGpRdWVyeShlbGVtKS50cmlnZ2VySGFuZGxlcignJGRlc3Ryb3knKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBvcmlnaW5hbENsZWFuRGF0YShlbGVtcyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBqcUxpdGUgPSBKUUxpdGU7XG4gIH1cblxuICBhbmd1bGFyLmVsZW1lbnQgPSBqcUxpdGU7XG5cbiAgLy8gUHJldmVudCBkb3VibGUtcHJveHlpbmcuXG4gIGJpbmRKUXVlcnlGaXJlZCA9IHRydWU7XG59XG5cbi8qKlxuICogdGhyb3cgZXJyb3IgaWYgdGhlIGFyZ3VtZW50IGlzIGZhbHN5LlxuICovXG5mdW5jdGlvbiBhc3NlcnRBcmcoYXJnLCBuYW1lLCByZWFzb24pIHtcbiAgaWYgKCFhcmcpIHtcbiAgICB0aHJvdyBuZ01pbkVycignYXJlcScsIFwiQXJndW1lbnQgJ3swfScgaXMgezF9XCIsIChuYW1lIHx8ICc/JyksIChyZWFzb24gfHwgXCJyZXF1aXJlZFwiKSk7XG4gIH1cbiAgcmV0dXJuIGFyZztcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QXJnRm4oYXJnLCBuYW1lLCBhY2NlcHRBcnJheUFubm90YXRpb24pIHtcbiAgaWYgKGFjY2VwdEFycmF5QW5ub3RhdGlvbiAmJiBpc0FycmF5KGFyZykpIHtcbiAgICAgIGFyZyA9IGFyZ1thcmcubGVuZ3RoIC0gMV07XG4gIH1cblxuICBhc3NlcnRBcmcoaXNGdW5jdGlvbihhcmcpLCBuYW1lLCAnbm90IGEgZnVuY3Rpb24sIGdvdCAnICtcbiAgICAgIChhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgPyBhcmcuY29uc3RydWN0b3IubmFtZSB8fCAnT2JqZWN0JyA6IHR5cGVvZiBhcmcpKTtcbiAgcmV0dXJuIGFyZztcbn1cblxuLyoqXG4gKiB0aHJvdyBlcnJvciBpZiB0aGUgbmFtZSBnaXZlbiBpcyBoYXNPd25Qcm9wZXJ0eVxuICogQHBhcmFtICB7U3RyaW5nfSBuYW1lICAgIHRoZSBuYW1lIHRvIHRlc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gY29udGV4dCB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgbmFtZSBpcyB1c2VkLCBzdWNoIGFzIG1vZHVsZSBvciBkaXJlY3RpdmVcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgY29udGV4dCkge1xuICBpZiAobmFtZSA9PT0gJ2hhc093blByb3BlcnR5Jykge1xuICAgIHRocm93IG5nTWluRXJyKCdiYWRuYW1lJywgXCJoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZVwiLCBjb250ZXh0KTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgdmFsdWUgYWNjZXNzaWJsZSBmcm9tIHRoZSBvYmplY3QgYnkgcGF0aC4gQW55IHVuZGVmaW5lZCB0cmF2ZXJzYWxzIGFyZSBpZ25vcmVkXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIHN0YXJ0aW5nIG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGggcGF0aCB0byB0cmF2ZXJzZVxuICogQHBhcmFtIHtib29sZWFufSBbYmluZEZuVG9TY29wZT10cnVlXVxuICogQHJldHVybnMge09iamVjdH0gdmFsdWUgYXMgYWNjZXNzaWJsZSBieSBwYXRoXG4gKi9cbi8vVE9ETyhtaXNrbyk6IHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmVtb3ZlZFxuZnVuY3Rpb24gZ2V0dGVyKG9iaiwgcGF0aCwgYmluZEZuVG9TY29wZSkge1xuICBpZiAoIXBhdGgpIHJldHVybiBvYmo7XG4gIHZhciBrZXlzID0gcGF0aC5zcGxpdCgnLicpO1xuICB2YXIga2V5O1xuICB2YXIgbGFzdEluc3RhbmNlID0gb2JqO1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgaWYgKG9iaikge1xuICAgICAgb2JqID0gKGxhc3RJbnN0YW5jZSA9IG9iailba2V5XTtcbiAgICB9XG4gIH1cbiAgaWYgKCFiaW5kRm5Ub1Njb3BlICYmIGlzRnVuY3Rpb24ob2JqKSkge1xuICAgIHJldHVybiBiaW5kKGxhc3RJbnN0YW5jZSwgb2JqKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgRE9NIHNpYmxpbmdzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IG5vZGUgaW4gdGhlIGdpdmVuIGFycmF5LlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgbGlrZSBvYmplY3RcbiAqIEByZXR1cm5zIHtqcUxpdGV9IGpxTGl0ZSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgdGhlIG5vZGVzXG4gKi9cbmZ1bmN0aW9uIGdldEJsb2NrTm9kZXMobm9kZXMpIHtcbiAgLy8gVE9ETyhwZXJmKToganVzdCBjaGVjayBpZiBhbGwgaXRlbXMgaW4gYG5vZGVzYCBhcmUgc2libGluZ3MgYW5kIGlmIHRoZXkgYXJlIHJldHVybiB0aGUgb3JpZ2luYWxcbiAgLy8gICAgICAgICAgICAgY29sbGVjdGlvbiwgb3RoZXJ3aXNlIHVwZGF0ZSB0aGUgb3JpZ2luYWwgY29sbGVjdGlvbi5cbiAgdmFyIG5vZGUgPSBub2Rlc1swXTtcbiAgdmFyIGVuZE5vZGUgPSBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXTtcbiAgdmFyIGJsb2NrTm9kZXMgPSBbbm9kZV07XG5cbiAgZG8ge1xuICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIGlmICghbm9kZSkgYnJlYWs7XG4gICAgYmxvY2tOb2Rlcy5wdXNoKG5vZGUpO1xuICB9IHdoaWxlIChub2RlICE9PSBlbmROb2RlKTtcblxuICByZXR1cm4ganFMaXRlKGJsb2NrTm9kZXMpO1xufVxuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aG91dCBhIHByb3RvdHlwZS4gVGhpcyBvYmplY3QgaXMgdXNlZnVsIGZvciBsb29rdXAgd2l0aG91dCBoYXZpbmcgdG9cbiAqIGd1YXJkIGFnYWluc3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdGVkIHByb3BlcnRpZXMgdmlhIGhhc093blByb3BlcnR5LlxuICpcbiAqIFJlbGF0ZWQgbWljcm8tYmVuY2htYXJrczpcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vb2JqZWN0LWNyZWF0ZTJcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vcHJvdG8tbWFwLWxvb2t1cC8yXG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL2Zvci1pbi12cy1vYmplY3Qta2V5czJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG52YXIgTk9ERV9UWVBFX0VMRU1FTlQgPSAxO1xudmFyIE5PREVfVFlQRV9URVhUID0gMztcbnZhciBOT0RFX1RZUEVfQ09NTUVOVCA9IDg7XG52YXIgTk9ERV9UWVBFX0RPQ1VNRU5UID0gOTtcbnZhciBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgPSAxMTtcblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgYW5ndWxhci5Nb2R1bGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEludGVyZmFjZSBmb3IgY29uZmlndXJpbmcgYW5ndWxhciB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlc30uXG4gKi9cblxuZnVuY3Rpb24gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KSB7XG5cbiAgdmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG4gIHZhciBuZ01pbkVyciA9IG1pbkVycignbmcnKTtcblxuICBmdW5jdGlvbiBlbnN1cmUob2JqLCBuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIG9ialtuYW1lXSB8fCAob2JqW25hbWVdID0gZmFjdG9yeSgpKTtcbiAgfVxuXG4gIHZhciBhbmd1bGFyID0gZW5zdXJlKHdpbmRvdywgJ2FuZ3VsYXInLCBPYmplY3QpO1xuXG4gIC8vIFdlIG5lZWQgdG8gZXhwb3NlIGBhbmd1bGFyLiQkbWluRXJyYCB0byBtb2R1bGVzIHN1Y2ggYXMgYG5nUmVzb3VyY2VgIHRoYXQgcmVmZXJlbmNlIGl0IGR1cmluZyBib290c3RyYXBcbiAgYW5ndWxhci4kJG1pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIgfHwgbWluRXJyO1xuXG4gIHJldHVybiBlbnN1cmUoYW5ndWxhciwgJ21vZHVsZScsIGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGFuZ3VsYXIuTW9kdWxlPn0gKi9cbiAgICB2YXIgbW9kdWxlcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgYW5ndWxhci5tb2R1bGVcbiAgICAgKiBAbW9kdWxlIG5nXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBUaGUgYGFuZ3VsYXIubW9kdWxlYCBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXJcbiAgICAgKiBtb2R1bGVzLlxuICAgICAqIEFsbCBtb2R1bGVzIChhbmd1bGFyIGNvcmUgb3IgM3JkIHBhcnR5KSB0aGF0IHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW4gYXBwbGljYXRpb24gbXVzdCBiZVxuICAgICAqIHJlZ2lzdGVyZWQgdXNpbmcgdGhpcyBtZWNoYW5pc20uXG4gICAgICpcbiAgICAgKiBXaGVuIHBhc3NlZCB0d28gb3IgbW9yZSBhcmd1bWVudHMsIGEgbmV3IG1vZHVsZSBpcyBjcmVhdGVkLiAgSWYgcGFzc2VkIG9ubHkgb25lIGFyZ3VtZW50LCBhblxuICAgICAqIGV4aXN0aW5nIG1vZHVsZSAodGhlIG5hbWUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBgbW9kdWxlYCkgaXMgcmV0cmlldmVkLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIE1vZHVsZVxuICAgICAqXG4gICAgICogQSBtb2R1bGUgaXMgYSBjb2xsZWN0aW9uIG9mIHNlcnZpY2VzLCBkaXJlY3RpdmVzLCBjb250cm9sbGVycywgZmlsdGVycywgYW5kIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXG4gICAgICogYGFuZ3VsYXIubW9kdWxlYCBpcyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIENyZWF0ZSBhIG5ldyBtb2R1bGVcbiAgICAgKiB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbXlNb2R1bGUnLCBbXSk7XG4gICAgICpcbiAgICAgKiAvLyByZWdpc3RlciBhIG5ldyBzZXJ2aWNlXG4gICAgICogbXlNb2R1bGUudmFsdWUoJ2FwcE5hbWUnLCAnTXlDb29sQXBwJyk7XG4gICAgICpcbiAgICAgKiAvLyBjb25maWd1cmUgZXhpc3Rpbmcgc2VydmljZXMgaW5zaWRlIGluaXRpYWxpemF0aW9uIGJsb2Nrcy5cbiAgICAgKiBteU1vZHVsZS5jb25maWcoWyckbG9jYXRpb25Qcm92aWRlcicsIGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgICogICAvLyBDb25maWd1cmUgZXhpc3RpbmcgcHJvdmlkZXJzXG4gICAgICogICAkbG9jYXRpb25Qcm92aWRlci5oYXNoUHJlZml4KCchJyk7XG4gICAgICogfV0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlbiB5b3UgY2FuIGNyZWF0ZSBhbiBpbmplY3RvciBhbmQgbG9hZCB5b3VyIG1vZHVsZXMgbGlrZSB0aGlzOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiB2YXIgaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKFsnbmcnLCAnbXlNb2R1bGUnXSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEhvd2V2ZXIgaXQncyBtb3JlIGxpa2VseSB0aGF0IHlvdSdsbCBqdXN0IHVzZVxuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9IG9yXG4gICAgICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSB0byBzaW1wbGlmeSB0aGlzIHByb2Nlc3MgZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbW9kdWxlIHRvIGNyZWF0ZSBvciByZXRyaWV2ZS5cbiAgICAgKiBAcGFyYW0geyFBcnJheS48c3RyaW5nPj19IHJlcXVpcmVzIElmIHNwZWNpZmllZCB0aGVuIG5ldyBtb2R1bGUgaXMgYmVpbmcgY3JlYXRlZC4gSWZcbiAgICAgKiAgICAgICAgdW5zcGVjaWZpZWQgdGhlbiB0aGUgbW9kdWxlIGlzIGJlaW5nIHJldHJpZXZlZCBmb3IgZnVydGhlciBjb25maWd1cmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBjb25maWdGbiBPcHRpb25hbCBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgbW9kdWxlLiBTYW1lIGFzXG4gICAgICogICAgICAgIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWcgTW9kdWxlI2NvbmZpZygpfS5cbiAgICAgKiBAcmV0dXJucyB7bW9kdWxlfSBuZXcgbW9kdWxlIHdpdGggdGhlIHtAbGluayBhbmd1bGFyLk1vZHVsZX0gYXBpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBtb2R1bGUobmFtZSwgcmVxdWlyZXMsIGNvbmZpZ0ZuKSB7XG4gICAgICB2YXIgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkgPSBmdW5jdGlvbihuYW1lLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgICAgICAgdGhyb3cgbmdNaW5FcnIoJ2JhZG5hbWUnLCAnaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgezB9IG5hbWUnLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ21vZHVsZScpO1xuICAgICAgaWYgKHJlcXVpcmVzICYmIG1vZHVsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgbW9kdWxlc1tuYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW5zdXJlKG1vZHVsZXMsIG5hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXJlcXVpcmVzKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdub21vZCcsIFwiTW9kdWxlICd7MH0nIGlzIG5vdCBhdmFpbGFibGUhIFlvdSBlaXRoZXIgbWlzc3BlbGxlZCBcIiArXG4gICAgICAgICAgICAgXCJ0aGUgbW9kdWxlIG5hbWUgb3IgZm9yZ290IHRvIGxvYWQgaXQuIElmIHJlZ2lzdGVyaW5nIGEgbW9kdWxlIGVuc3VyZSB0aGF0IHlvdSBcIiArXG4gICAgICAgICAgICAgXCJzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cIiwgbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48QXJyYXkuPCo+Pn0gKi9cbiAgICAgICAgdmFyIGludm9rZVF1ZXVlID0gW107XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi9cbiAgICAgICAgdmFyIGNvbmZpZ0Jsb2NrcyA9IFtdO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovXG4gICAgICAgIHZhciBydW5CbG9ja3MgPSBbXTtcblxuICAgICAgICB2YXIgY29uZmlnID0gaW52b2tlTGF0ZXIoJyRpbmplY3RvcicsICdpbnZva2UnLCAncHVzaCcsIGNvbmZpZ0Jsb2Nrcyk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHthbmd1bGFyLk1vZHVsZX0gKi9cbiAgICAgICAgdmFyIG1vZHVsZUluc3RhbmNlID0ge1xuICAgICAgICAgIC8vIFByaXZhdGUgc3RhdGVcbiAgICAgICAgICBfaW52b2tlUXVldWU6IGludm9rZVF1ZXVlLFxuICAgICAgICAgIF9jb25maWdCbG9ja3M6IGNvbmZpZ0Jsb2NrcyxcbiAgICAgICAgICBfcnVuQmxvY2tzOiBydW5CbG9ja3MsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNyZXF1aXJlc1xuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIEhvbGRzIHRoZSBsaXN0IG9mIG1vZHVsZXMgd2hpY2ggdGhlIGluamVjdG9yIHdpbGwgbG9hZCBiZWZvcmUgdGhlIGN1cnJlbnQgbW9kdWxlIGlzXG4gICAgICAgICAgICogbG9hZGVkLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJlcXVpcmVzOiByZXF1aXJlcyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI25hbWVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBOYW1lIG9mIHRoZSBtb2R1bGUuXG4gICAgICAgICAgICovXG4gICAgICAgICAgbmFtZTogbmFtZSxcblxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3Byb3ZpZGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyVHlwZSBDb25zdHJ1Y3Rpb24gZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGVcbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgcHJvdmlkZXI6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdwcm92aWRlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZhY3RvcnlcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJGdW5jdGlvbiBGdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5ICRwcm92aWRlLmZhY3RvcnkoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZmFjdG9yeTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ2ZhY3RvcnknKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNzZXJ2aWNlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHNlcnZpY2U6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdzZXJ2aWNlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjdmFsdWVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgU2VydmljZSBpbnN0YW5jZSBvYmplY3QuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlICRwcm92aWRlLnZhbHVlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHZhbHVlOiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAndmFsdWUnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25zdGFudFxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBjb25zdGFudCBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgQ29uc3RhbnQgdmFsdWUuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogQmVjYXVzZSB0aGUgY29uc3RhbnQgYXJlIGZpeGVkLCB0aGV5IGdldCBhcHBsaWVkIGJlZm9yZSBvdGhlciBwcm92aWRlIG1ldGhvZHMuXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50ICRwcm92aWRlLmNvbnN0YW50KCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0YW50OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnY29uc3RhbnQnLCAndW5zaGlmdCcpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2FuaW1hdGlvblxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhbmltYXRpb24gbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFuaW1hdGlvbkZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGFuXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiAqKk5PVEUqKjogYW5pbWF0aW9ucyB0YWtlIGVmZmVjdCBvbmx5IGlmIHRoZSAqKm5nQW5pbWF0ZSoqIG1vZHVsZSBpcyBsb2FkZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIERlZmluZXMgYW4gYW5pbWF0aW9uIGhvb2sgdGhhdCBjYW4gYmUgbGF0ZXIgdXNlZCB3aXRoXG4gICAgICAgICAgICoge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZSAkYW5pbWF0ZX0gc2VydmljZSBhbmQgZGlyZWN0aXZlcyB0aGF0IHVzZSB0aGlzIHNlcnZpY2UuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgICAqIG1vZHVsZS5hbmltYXRpb24oJy5hbmltYXRpb24tbmFtZScsIGZ1bmN0aW9uKCRpbmplY3QxLCAkaW5qZWN0Mikge1xuICAgICAgICAgICAqICAgcmV0dXJuIHtcbiAgICAgICAgICAgKiAgICAgZXZlbnROYW1lIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkge1xuICAgICAgICAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAqICAgICAgIC8vb25jZSBjb21wbGV0ZSwgdGhlbiBydW4gZG9uZSgpXG4gICAgICAgICAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhbmNlbGxhdGlvbkZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAqICAgICAgIH1cbiAgICAgICAgICAgKiAgICAgfVxuICAgICAgICAgICAqICAgfVxuICAgICAgICAgICAqIH0pXG4gICAgICAgICAgICogYGBgXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXIgJGFuaW1hdGVQcm92aWRlci5yZWdpc3RlcigpfSBhbmRcbiAgICAgICAgICAgKiB7QGxpbmsgbmdBbmltYXRlIG5nQW5pbWF0ZSBtb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGFuaW1hdGlvbjogaW52b2tlTGF0ZXIoJyRhbmltYXRlUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmaWx0ZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmlsdGVyIG5hbWUuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgZmlsdGVyLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmaWx0ZXI6IGludm9rZUxhdGVyKCckZmlsdGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb250cm9sbGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlXG4gICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29uc3RydWN0b3JzLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyICRjb250cm9sbGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29udHJvbGxlcjogaW52b2tlTGF0ZXIoJyRjb250cm9sbGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNkaXJlY3RpdmVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIERpcmVjdGl2ZSBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGRpcmVjdGl2ZXMgd2hlcmUgdGhlXG4gICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRpcmVjdGl2ZUZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mXG4gICAgICAgICAgICogZGlyZWN0aXZlcy5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGRpcmVjdGl2ZTogaW52b2tlTGF0ZXIoJyRjb21waWxlUHJvdmlkZXInLCAnZGlyZWN0aXZlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uZmlnXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZ0ZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBvbiBtb2R1bGUgbG9hZC4gVXNlZnVsIGZvciBzZXJ2aWNlXG4gICAgICAgICAgICogICAgY29uZmlndXJhdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgd29yayB3aGljaCBuZWVkcyB0byBiZSBwZXJmb3JtZWQgb24gbW9kdWxlIGxvYWRpbmcuXG4gICAgICAgICAgICogRm9yIG1vcmUgYWJvdXQgaG93IHRvIGNvbmZpZ3VyZSBzZXJ2aWNlcywgc2VlXG4gICAgICAgICAgICoge0BsaW5rIHByb3ZpZGVycyNwcm92aWRlci1yZWNpcGUgUHJvdmlkZXIgUmVjaXBlfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25maWc6IGNvbmZpZyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNydW5cbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW5pdGlhbGl6YXRpb25GbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gYWZ0ZXIgaW5qZWN0b3IgY3JlYXRpb24uXG4gICAgICAgICAgICogICAgVXNlZnVsIGZvciBhcHBsaWNhdGlvbiBpbml0aWFsaXphdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgd29yayB3aGljaCBzaG91bGQgYmUgcGVyZm9ybWVkIHdoZW4gdGhlIGluamVjdG9yIGlzIGRvbmVcbiAgICAgICAgICAgKiBsb2FkaW5nIGFsbCBtb2R1bGVzLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJ1bjogZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoY29uZmlnRm4pIHtcbiAgICAgICAgICBjb25maWcoY29uZmlnRm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvdmlkZXJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZz19IGluc2VydE1ldGhvZFxuICAgICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlcihwcm92aWRlciwgbWV0aG9kLCBpbnNlcnRNZXRob2QsIHF1ZXVlKSB7XG4gICAgICAgICAgaWYgKCFxdWV1ZSkgcXVldWUgPSBpbnZva2VRdWV1ZTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBxdWV1ZVtpbnNlcnRNZXRob2QgfHwgJ3B1c2gnXShbcHJvdmlkZXIsIG1ldGhvZCwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbn1cblxuLyogZ2xvYmFsIGFuZ3VsYXJNb2R1bGU6IHRydWUsXG4gIHZlcnNpb246IHRydWUsXG5cbiAgJExvY2FsZVByb3ZpZGVyLFxuICAkQ29tcGlsZVByb3ZpZGVyLFxuXG4gIGh0bWxBbmNob3JEaXJlY3RpdmUsXG4gIGlucHV0RGlyZWN0aXZlLFxuICBpbnB1dERpcmVjdGl2ZSxcbiAgZm9ybURpcmVjdGl2ZSxcbiAgc2NyaXB0RGlyZWN0aXZlLFxuICBzZWxlY3REaXJlY3RpdmUsXG4gIHN0eWxlRGlyZWN0aXZlLFxuICBvcHRpb25EaXJlY3RpdmUsXG4gIG5nQmluZERpcmVjdGl2ZSxcbiAgbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gIG5nQ2xhc3NEaXJlY3RpdmUsXG4gIG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICBuZ0NzcERpcmVjdGl2ZSxcbiAgbmdDbG9ha0RpcmVjdGl2ZSxcbiAgbmdDb250cm9sbGVyRGlyZWN0aXZlLFxuICBuZ0Zvcm1EaXJlY3RpdmUsXG4gIG5nSGlkZURpcmVjdGl2ZSxcbiAgbmdJZkRpcmVjdGl2ZSxcbiAgbmdJbmNsdWRlRGlyZWN0aXZlLFxuICBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSxcbiAgbmdJbml0RGlyZWN0aXZlLFxuICBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLFxuICBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSxcbiAgbmdSZXBlYXREaXJlY3RpdmUsXG4gIG5nU2hvd0RpcmVjdGl2ZSxcbiAgbmdTdHlsZURpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hEaXJlY3RpdmUsXG4gIG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLFxuICBuZ09wdGlvbnNEaXJlY3RpdmUsXG4gIG5nVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgbmdNb2RlbERpcmVjdGl2ZSxcbiAgbmdMaXN0RGlyZWN0aXZlLFxuICBuZ0NoYW5nZURpcmVjdGl2ZSxcbiAgcGF0dGVybkRpcmVjdGl2ZSxcbiAgcGF0dGVybkRpcmVjdGl2ZSxcbiAgcmVxdWlyZWREaXJlY3RpdmUsXG4gIHJlcXVpcmVkRGlyZWN0aXZlLFxuICBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gIG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gIG5nVmFsdWVEaXJlY3RpdmUsXG4gIG5nTW9kZWxPcHRpb25zRGlyZWN0aXZlLFxuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyxcbiAgbmdFdmVudERpcmVjdGl2ZXMsXG5cbiAgJEFuY2hvclNjcm9sbFByb3ZpZGVyLFxuICAkQW5pbWF0ZVByb3ZpZGVyLFxuICAkQnJvd3NlclByb3ZpZGVyLFxuICAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIsXG4gICRDb250cm9sbGVyUHJvdmlkZXIsXG4gICREb2N1bWVudFByb3ZpZGVyLFxuICAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAkRmlsdGVyUHJvdmlkZXIsXG4gICRJbnRlcnBvbGF0ZVByb3ZpZGVyLFxuICAkSW50ZXJ2YWxQcm92aWRlcixcbiAgJEh0dHBQcm92aWRlcixcbiAgJEh0dHBCYWNrZW5kUHJvdmlkZXIsXG4gICRMb2NhdGlvblByb3ZpZGVyLFxuICAkTG9nUHJvdmlkZXIsXG4gICRQYXJzZVByb3ZpZGVyLFxuICAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICRRUHJvdmlkZXIsXG4gICQkUVByb3ZpZGVyLFxuICAkJFNhbml0aXplVXJpUHJvdmlkZXIsXG4gICRTY2VQcm92aWRlcixcbiAgJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICRTbmlmZmVyUHJvdmlkZXIsXG4gICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAkVGltZW91dFByb3ZpZGVyLFxuICAkJFJBRlByb3ZpZGVyLFxuICAkJEFzeW5jQ2FsbGJhY2tQcm92aWRlcixcbiAgJFdpbmRvd1Byb3ZpZGVyXG4qL1xuXG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgYW5ndWxhci52ZXJzaW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IEFuZ3VsYXJKUyB2ZXJzaW9uLiBUaGlzIG9iamVjdCBoYXMgdGhlXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAtIGBmdWxsYCDigJMgYHtzdHJpbmd9YCDigJMgRnVsbCB2ZXJzaW9uIHN0cmluZywgc3VjaCBhcyBcIjAuOS4xOFwiLlxuICogLSBgbWFqb3JgIOKAkyBge251bWJlcn1gIOKAkyBNYWpvciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjBcIi5cbiAqIC0gYG1pbm9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWlub3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCI5XCIuXG4gKiAtIGBkb3RgIOKAkyBge251bWJlcn1gIOKAkyBEb3QgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIxOFwiLlxuICogLSBgY29kZU5hbWVgIOKAkyBge3N0cmluZ31gIOKAkyBDb2RlIG5hbWUgb2YgdGhlIHJlbGVhc2UsIHN1Y2ggYXMgXCJqaWdnbGluZy1hcm1mYXRcIi5cbiAqL1xudmFyIHZlcnNpb24gPSB7XG4gIGZ1bGw6ICcxLjMuMScsICAgIC8vIGFsbCBvZiB0aGVzZSBwbGFjZWhvbGRlciBzdHJpbmdzIHdpbGwgYmUgcmVwbGFjZWQgYnkgZ3J1bnQnc1xuICBtYWpvcjogMSwgICAgLy8gcGFja2FnZSB0YXNrXG4gIG1pbm9yOiAzLFxuICBkb3Q6IDEsXG4gIGNvZGVOYW1lOiAnc3BlY3RyYWwtbG9ic3Rlcidcbn07XG5cblxuZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpIHtcbiAgZXh0ZW5kKGFuZ3VsYXIsIHtcbiAgICAnYm9vdHN0cmFwJzogYm9vdHN0cmFwLFxuICAgICdjb3B5JzogY29weSxcbiAgICAnZXh0ZW5kJzogZXh0ZW5kLFxuICAgICdlcXVhbHMnOiBlcXVhbHMsXG4gICAgJ2VsZW1lbnQnOiBqcUxpdGUsXG4gICAgJ2ZvckVhY2gnOiBmb3JFYWNoLFxuICAgICdpbmplY3Rvcic6IGNyZWF0ZUluamVjdG9yLFxuICAgICdub29wJzogbm9vcCxcbiAgICAnYmluZCc6IGJpbmQsXG4gICAgJ3RvSnNvbic6IHRvSnNvbixcbiAgICAnZnJvbUpzb24nOiBmcm9tSnNvbixcbiAgICAnaWRlbnRpdHknOiBpZGVudGl0eSxcbiAgICAnaXNVbmRlZmluZWQnOiBpc1VuZGVmaW5lZCxcbiAgICAnaXNEZWZpbmVkJzogaXNEZWZpbmVkLFxuICAgICdpc1N0cmluZyc6IGlzU3RyaW5nLFxuICAgICdpc0Z1bmN0aW9uJzogaXNGdW5jdGlvbixcbiAgICAnaXNPYmplY3QnOiBpc09iamVjdCxcbiAgICAnaXNOdW1iZXInOiBpc051bWJlcixcbiAgICAnaXNFbGVtZW50JzogaXNFbGVtZW50LFxuICAgICdpc0FycmF5JzogaXNBcnJheSxcbiAgICAndmVyc2lvbic6IHZlcnNpb24sXG4gICAgJ2lzRGF0ZSc6IGlzRGF0ZSxcbiAgICAnbG93ZXJjYXNlJzogbG93ZXJjYXNlLFxuICAgICd1cHBlcmNhc2UnOiB1cHBlcmNhc2UsXG4gICAgJ2NhbGxiYWNrcyc6IHtjb3VudGVyOiAwfSxcbiAgICAnZ2V0VGVzdGFiaWxpdHknOiBnZXRUZXN0YWJpbGl0eSxcbiAgICAnJCRtaW5FcnInOiBtaW5FcnIsXG4gICAgJyQkY3NwJzogY3NwLFxuICAgICdyZWxvYWRXaXRoRGVidWdJbmZvJzogcmVsb2FkV2l0aERlYnVnSW5mb1xuICB9KTtcblxuICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTtcbiAgdHJ5IHtcbiAgICBhbmd1bGFyTW9kdWxlKCduZ0xvY2FsZScpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgYW5ndWxhck1vZHVsZSgnbmdMb2NhbGUnLCBbXSkucHJvdmlkZXIoJyRsb2NhbGUnLCAkTG9jYWxlUHJvdmlkZXIpO1xuICB9XG5cbiAgYW5ndWxhck1vZHVsZSgnbmcnLCBbJ25nTG9jYWxlJ10sIFsnJHByb3ZpZGUnLFxuICAgIGZ1bmN0aW9uIG5nTW9kdWxlKCRwcm92aWRlKSB7XG4gICAgICAvLyAkJHNhbml0aXplVXJpUHJvdmlkZXIgbmVlZHMgdG8gYmUgYmVmb3JlICRjb21waWxlUHJvdmlkZXIgYXMgaXQgaXMgdXNlZCBieSBpdC5cbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcbiAgICAgICAgJCRzYW5pdGl6ZVVyaTogJCRTYW5pdGl6ZVVyaVByb3ZpZGVyXG4gICAgICB9KTtcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKCckY29tcGlsZScsICRDb21waWxlUHJvdmlkZXIpLlxuICAgICAgICBkaXJlY3RpdmUoe1xuICAgICAgICAgICAgYTogaHRtbEFuY2hvckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIGlucHV0OiBpbnB1dERpcmVjdGl2ZSxcbiAgICAgICAgICAgIHRleHRhcmVhOiBpbnB1dERpcmVjdGl2ZSxcbiAgICAgICAgICAgIGZvcm06IGZvcm1EaXJlY3RpdmUsXG4gICAgICAgICAgICBzY3JpcHQ6IHNjcmlwdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIHNlbGVjdDogc2VsZWN0RGlyZWN0aXZlLFxuICAgICAgICAgICAgc3R5bGU6IHN0eWxlRGlyZWN0aXZlLFxuICAgICAgICAgICAgb3B0aW9uOiBvcHRpb25EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0JpbmQ6IG5nQmluZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZEh0bWw6IG5nQmluZEh0bWxEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0JpbmRUZW1wbGF0ZTogbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzOiBuZ0NsYXNzRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbGFzc0V2ZW46IG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbGFzc09kZDogbmdDbGFzc09kZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xvYWs6IG5nQ2xvYWtEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NvbnRyb2xsZXI6IG5nQ29udHJvbGxlckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nRm9ybTogbmdGb3JtRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdIaWRlOiBuZ0hpZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0lmOiBuZ0lmRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0luaXQ6IG5nSW5pdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTm9uQmluZGFibGU6IG5nTm9uQmluZGFibGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1BsdXJhbGl6ZTogbmdQbHVyYWxpemVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1JlcGVhdDogbmdSZXBlYXREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1Nob3c6IG5nU2hvd0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3R5bGU6IG5nU3R5bGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N3aXRjaDogbmdTd2l0Y2hEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N3aXRjaFdoZW46IG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoRGVmYXVsdDogbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdPcHRpb25zOiBuZ09wdGlvbnNEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1RyYW5zY2x1ZGU6IG5nVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTW9kZWw6IG5nTW9kZWxEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0xpc3Q6IG5nTGlzdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2hhbmdlOiBuZ0NoYW5nZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHBhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1BhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1JlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG1pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNaW5sZW5ndGg6IG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG1heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNYXhsZW5ndGg6IG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nVmFsdWU6IG5nVmFsdWVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01vZGVsT3B0aW9uczogbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmVcbiAgICAgICAgfSkuXG4gICAgICAgIGRpcmVjdGl2ZSh7XG4gICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZVxuICAgICAgICB9KS5cbiAgICAgICAgZGlyZWN0aXZlKG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzKS5cbiAgICAgICAgZGlyZWN0aXZlKG5nRXZlbnREaXJlY3RpdmVzKTtcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcbiAgICAgICAgJGFuY2hvclNjcm9sbDogJEFuY2hvclNjcm9sbFByb3ZpZGVyLFxuICAgICAgICAkYW5pbWF0ZTogJEFuaW1hdGVQcm92aWRlcixcbiAgICAgICAgJGJyb3dzZXI6ICRCcm93c2VyUHJvdmlkZXIsXG4gICAgICAgICRjYWNoZUZhY3Rvcnk6ICRDYWNoZUZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGNvbnRyb2xsZXI6ICRDb250cm9sbGVyUHJvdmlkZXIsXG4gICAgICAgICRkb2N1bWVudDogJERvY3VtZW50UHJvdmlkZXIsXG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyOiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAgICAgICAkZmlsdGVyOiAkRmlsdGVyUHJvdmlkZXIsXG4gICAgICAgICRpbnRlcnBvbGF0ZTogJEludGVycG9sYXRlUHJvdmlkZXIsXG4gICAgICAgICRpbnRlcnZhbDogJEludGVydmFsUHJvdmlkZXIsXG4gICAgICAgICRodHRwOiAkSHR0cFByb3ZpZGVyLFxuICAgICAgICAkaHR0cEJhY2tlbmQ6ICRIdHRwQmFja2VuZFByb3ZpZGVyLFxuICAgICAgICAkbG9jYXRpb246ICRMb2NhdGlvblByb3ZpZGVyLFxuICAgICAgICAkbG9nOiAkTG9nUHJvdmlkZXIsXG4gICAgICAgICRwYXJzZTogJFBhcnNlUHJvdmlkZXIsXG4gICAgICAgICRyb290U2NvcGU6ICRSb290U2NvcGVQcm92aWRlcixcbiAgICAgICAgJHE6ICRRUHJvdmlkZXIsXG4gICAgICAgICQkcTogJCRRUHJvdmlkZXIsXG4gICAgICAgICRzY2U6ICRTY2VQcm92aWRlcixcbiAgICAgICAgJHNjZURlbGVnYXRlOiAkU2NlRGVsZWdhdGVQcm92aWRlcixcbiAgICAgICAgJHNuaWZmZXI6ICRTbmlmZmVyUHJvdmlkZXIsXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlOiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyLFxuICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0OiAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIsXG4gICAgICAgICQkdGVzdGFiaWxpdHk6ICQkVGVzdGFiaWxpdHlQcm92aWRlcixcbiAgICAgICAgJHRpbWVvdXQ6ICRUaW1lb3V0UHJvdmlkZXIsXG4gICAgICAgICR3aW5kb3c6ICRXaW5kb3dQcm92aWRlcixcbiAgICAgICAgJCRyQUY6ICQkUkFGUHJvdmlkZXIsXG4gICAgICAgICQkYXN5bmNDYWxsYmFjazogJCRBc3luY0NhbGxiYWNrUHJvdmlkZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgXSk7XG59XG5cbi8qIGdsb2JhbCBKUUxpdGVQcm90b3R5cGU6IHRydWUsXG4gIGFkZEV2ZW50TGlzdGVuZXJGbjogdHJ1ZSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuOiB0cnVlLFxuICBCT09MRUFOX0FUVFI6IHRydWUsXG4gIEFMSUFTRURfQVRUUjogdHJ1ZSxcbiovXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vSlFMaXRlXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmVsZW1lbnRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBXcmFwcyBhIHJhdyBET00gZWxlbWVudCBvciBIVE1MIHN0cmluZyBhcyBhIFtqUXVlcnldKGh0dHA6Ly9qcXVlcnkuY29tKSBlbGVtZW50LlxuICpcbiAqIElmIGpRdWVyeSBpcyBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgIGlzIGFuIGFsaWFzIGZvciB0aGVcbiAqIFtqUXVlcnldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkvKSBmdW5jdGlvbi4gSWYgalF1ZXJ5IGlzIG5vdCBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgXG4gKiBkZWxlZ2F0ZXMgdG8gQW5ndWxhcidzIGJ1aWx0LWluIHN1YnNldCBvZiBqUXVlcnksIGNhbGxlZCBcImpRdWVyeSBsaXRlXCIgb3IgXCJqcUxpdGUuXCJcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPmpxTGl0ZSBpcyBhIHRpbnksIEFQSS1jb21wYXRpYmxlIHN1YnNldCBvZiBqUXVlcnkgdGhhdCBhbGxvd3NcbiAqIEFuZ3VsYXIgdG8gbWFuaXB1bGF0ZSB0aGUgRE9NIGluIGEgY3Jvc3MtYnJvd3NlciBjb21wYXRpYmxlIHdheS4gKipqcUxpdGUqKiBpbXBsZW1lbnRzIG9ubHkgdGhlIG1vc3RcbiAqIGNvbW1vbmx5IG5lZWRlZCBmdW5jdGlvbmFsaXR5IHdpdGggdGhlIGdvYWwgb2YgaGF2aW5nIGEgdmVyeSBzbWFsbCBmb290cHJpbnQuPC9kaXY+XG4gKlxuICogVG8gdXNlIGpRdWVyeSwgc2ltcGx5IGxvYWQgaXQgYmVmb3JlIGBET01Db250ZW50TG9hZGVkYCBldmVudCBmaXJlZC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnRcIj4qKk5vdGU6KiogYWxsIGVsZW1lbnQgcmVmZXJlbmNlcyBpbiBBbmd1bGFyIGFyZSBhbHdheXMgd3JhcHBlZCB3aXRoIGpRdWVyeSBvclxuICoganFMaXRlOyB0aGV5IGFyZSBuZXZlciByYXcgRE9NIHJlZmVyZW5jZXMuPC9kaXY+XG4gKlxuICogIyMgQW5ndWxhcidzIGpxTGl0ZVxuICoganFMaXRlIHByb3ZpZGVzIG9ubHkgdGhlIGZvbGxvd2luZyBqUXVlcnkgbWV0aG9kczpcbiAqXG4gKiAtIFtgYWRkQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZGRDbGFzcy8pXG4gKiAtIFtgYWZ0ZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZnRlci8pXG4gKiAtIFtgYXBwZW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYXBwZW5kLylcbiAqIC0gW2BhdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYXR0ci8pIC0gRG9lcyBub3Qgc3VwcG9ydCBmdW5jdGlvbnMgYXMgcGFyYW1ldGVyc1xuICogLSBbYGJpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9iaW5kLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BjaGlsZHJlbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NoaWxkcmVuLykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYGNsb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2xvbmUvKVxuICogLSBbYGNvbnRlbnRzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGVudHMvKVxuICogLSBbYGNzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nzcy8pIC0gT25seSByZXRyaWV2ZXMgaW5saW5lLXN0eWxlcywgZG9lcyBub3QgY2FsbCBgZ2V0Q29tcHV0ZWRTdHlsZSgpYFxuICogLSBbYGRhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kYXRhLylcbiAqIC0gW2BkZXRhY2goKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kZXRhY2gvKVxuICogLSBbYGVtcHR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZW1wdHkvKVxuICogLSBbYGVxKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZXEvKVxuICogLSBbYGZpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9maW5kLykgLSBMaW1pdGVkIHRvIGxvb2t1cHMgYnkgdGFnIG5hbWVcbiAqIC0gW2BoYXNDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2hhc0NsYXNzLylcbiAqIC0gW2BodG1sKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaHRtbC8pXG4gKiAtIFtgbmV4dCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL25leHQvKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgb24oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhXG4gKiAtIFtgb2ZmKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb2ZmLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3Igc2VsZWN0b3JzXG4gKiAtIFtgb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb25lLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3Igc2VsZWN0b3JzXG4gKiAtIFtgcGFyZW50KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYHByZXBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcmVwZW5kLylcbiAqIC0gW2Bwcm9wKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcHJvcC8pXG4gKiAtIFtgcmVhZHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZWFkeS8pXG4gKiAtIFtgcmVtb3ZlKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlLylcbiAqIC0gW2ByZW1vdmVBdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQXR0ci8pXG4gKiAtIFtgcmVtb3ZlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVDbGFzcy8pXG4gKiAtIFtgcmVtb3ZlRGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZURhdGEvKVxuICogLSBbYHJlcGxhY2VXaXRoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVwbGFjZVdpdGgvKVxuICogLSBbYHRleHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90ZXh0LylcbiAqIC0gW2B0b2dnbGVDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RvZ2dsZUNsYXNzLylcbiAqIC0gW2B0cmlnZ2VySGFuZGxlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RyaWdnZXJIYW5kbGVyLykgLSBQYXNzZXMgYSBkdW1teSBldmVudCBvYmplY3QgdG8gaGFuZGxlcnMuXG4gKiAtIFtgdW5iaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdW5iaW5kLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXNcbiAqIC0gW2B2YWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS92YWwvKVxuICogLSBbYHdyYXAoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS93cmFwLylcbiAqXG4gKiAjIyBqUXVlcnkvanFMaXRlIEV4dHJhc1xuICogQW5ndWxhciBhbHNvIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgYWRkaXRpb25hbCBtZXRob2RzIGFuZCBldmVudHMgdG8gYm90aCBqUXVlcnkgYW5kIGpxTGl0ZTpcbiAqXG4gKiAjIyMgRXZlbnRzXG4gKiAtIGAkZGVzdHJveWAgLSBBbmd1bGFySlMgaW50ZXJjZXB0cyBhbGwganFMaXRlL2pRdWVyeSdzIERPTSBkZXN0cnVjdGlvbiBhcGlzIGFuZCBmaXJlcyB0aGlzIGV2ZW50XG4gKiAgICBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNsZWFuIHVwIGFueSAzcmQgcGFydHkgYmluZGluZ3MgdG8gdGhlIERPTVxuICogICAgZWxlbWVudCBiZWZvcmUgaXQgaXMgcmVtb3ZlZC5cbiAqXG4gKiAjIyMgTWV0aG9kc1xuICogLSBgY29udHJvbGxlcihuYW1lKWAgLSByZXRyaWV2ZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LiBCeSBkZWZhdWx0XG4gKiAgIHJldHJpZXZlcyBjb250cm9sbGVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlLiBJZiBgbmFtZWAgaXMgcHJvdmlkZWQgYXNcbiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLlxuICogICBgJ25nTW9kZWwnYCkuXG4gKiAtIGBpbmplY3RvcigpYCAtIHJldHJpZXZlcyB0aGUgaW5qZWN0b3Igb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LlxuICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBvZiB0aGUgY3VycmVudFxuICogICBlbGVtZW50IG9yIGl0cyBwYXJlbnQuXG4gKiAtIGBpc29sYXRlU2NvcGUoKWAgLSByZXRyaWV2ZXMgYW4gaXNvbGF0ZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gaWYgb25lIGlzIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZVxuICogICBjdXJyZW50IGVsZW1lbnQuIFRoaXMgZ2V0dGVyIHNob3VsZCBiZSB1c2VkIG9ubHkgb24gZWxlbWVudHMgdGhhdCBjb250YWluIGEgZGlyZWN0aXZlIHdoaWNoIHN0YXJ0cyBhIG5ldyBpc29sYXRlXG4gKiAgIHNjb3BlLiBDYWxsaW5nIGBzY29wZSgpYCBvbiB0aGlzIGVsZW1lbnQgYWx3YXlzIHJldHVybnMgdGhlIG9yaWdpbmFsIG5vbi1pc29sYXRlIHNjb3BlLlxuICogLSBgaW5oZXJpdGVkRGF0YSgpYCAtIHNhbWUgYXMgYGRhdGEoKWAsIGJ1dCB3YWxrcyB1cCB0aGUgRE9NIHVudGlsIGEgdmFsdWUgaXMgZm91bmQgb3IgdGhlIHRvcFxuICogICBwYXJlbnQgZWxlbWVudCBpcyByZWFjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgSFRNTCBzdHJpbmcgb3IgRE9NRWxlbWVudCB0byBiZSB3cmFwcGVkIGludG8galF1ZXJ5LlxuICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC5cbiAqL1xuXG5KUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7XG5cbnZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sXG4gICAganFJZCA9IDEsXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH07XG5cbi8qXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgZnVuY3Rpb24gISEhXG4gKi9cbkpRTGl0ZS5fZGF0YSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgLy9qUXVlcnkgYWx3YXlzIHJldHVybnMgYW4gb2JqZWN0IG9uIGNhY2hlIG1pc3NcbiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTtcbn07XG5cbmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9XG5cblxudmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gLyhbXFw6XFwtXFxfXSsoLikpL2c7XG52YXIgTU9aX0hBQ0tfUkVHRVhQID0gL15tb3ooW0EtWl0pLztcbnZhciBNT1VTRV9FVkVOVF9NQVA9IHsgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLCBtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwifTtcbnZhciBqcUxpdGVNaW5FcnIgPSBtaW5FcnIoJ2pxTGl0ZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIHNuYWtlX2Nhc2UgdG8gY2FtZWxDYXNlLlxuICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLlxuICAgIHJlcGxhY2UoU1BFQ0lBTF9DSEFSU19SRUdFWFAsIGZ1bmN0aW9uKF8sIHNlcGFyYXRvciwgbGV0dGVyLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjtcbiAgICB9KS5cbiAgICByZXBsYWNlKE1PWl9IQUNLX1JFR0VYUCwgJ01veiQxJyk7XG59XG5cbnZhciBTSU5HTEVfVEFHX1JFR0VYUCA9IC9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLztcbnZhciBIVE1MX1JFR0VYUCA9IC88fCYjP1xcdys7LztcbnZhciBUQUdfTkFNRV9SRUdFWFAgPSAvPChbXFx3Ol0rKS87XG52YXIgWEhUTUxfVEFHX1JFR0VYUCA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naTtcblxudmFyIHdyYXBNYXAgPSB7XG4gICdvcHRpb24nOiBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJtdWx0aXBsZVwiPicsICc8L3NlbGVjdD4nXSxcblxuICAndGhlYWQnOiBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAndHInOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ3RkJzogWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J10sXG4gICdfZGVmYXVsdCc6IFswLCBcIlwiLCBcIlwiXVxufTtcblxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGpxTGl0ZUlzVGV4dE5vZGUoaHRtbCkge1xuICByZXR1cm4gIUhUTUxfUkVHRVhQLnRlc3QoaHRtbCk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUFjY2VwdHNEYXRhKG5vZGUpIHtcbiAgLy8gVGhlIHdpbmRvdyBvYmplY3QgY2FuIGFjY2VwdCBkYXRhIGJ1dCBoYXMgbm8gbm9kZVR5cGVcbiAgLy8gT3RoZXJ3aXNlIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gZWxlbWVudHMgKDEpIGFuZCBkb2N1bWVudHMgKDkpXG4gIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gIHJldHVybiBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQgfHwgIW5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlQ7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkge1xuICB2YXIgdG1wLCB0YWcsIHdyYXAsXG4gICAgICBmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgbm9kZXMgPSBbXSwgaTtcblxuICBpZiAoanFMaXRlSXNUZXh0Tm9kZShodG1sKSkge1xuICAgIC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuICAgIG5vZGVzLnB1c2goY29udGV4dC5jcmVhdGVUZXh0Tm9kZShodG1sKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG4gICAgdG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKGNvbnRleHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG4gICAgdGFnID0gKFRBR19OQU1FX1JFR0VYUC5leGVjKGh0bWwpIHx8IFtcIlwiLCBcIlwiXSlbMV0udG9Mb3dlckNhc2UoKTtcbiAgICB3cmFwID0gd3JhcE1hcFt0YWddIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG4gICAgdG1wLmlubmVySFRNTCA9IHdyYXBbMV0gKyBodG1sLnJlcGxhY2UoWEhUTUxfVEFHX1JFR0VYUCwgXCI8JDE+PC8kMj5cIikgKyB3cmFwWzJdO1xuXG4gICAgLy8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG4gICAgaSA9IHdyYXBbMF07XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdG1wID0gdG1wLmxhc3RDaGlsZDtcbiAgICB9XG5cbiAgICBub2RlcyA9IGNvbmNhdChub2RlcywgdG1wLmNoaWxkTm9kZXMpO1xuXG4gICAgdG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcbiAgICB0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuICB9XG5cbiAgLy8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuICBmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG4gIGZyYWdtZW50LmlubmVySFRNTCA9IFwiXCI7IC8vIENsZWFyIGlubmVyIEhUTUxcbiAgZm9yRWFjaChub2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICB9KTtcblxuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVBhcnNlSFRNTChodG1sLCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuICB2YXIgcGFyc2VkO1xuXG4gIGlmICgocGFyc2VkID0gU0lOR0xFX1RBR19SRUdFWFAuZXhlYyhodG1sKSkpIHtcbiAgICByZXR1cm4gW2NvbnRleHQuY3JlYXRlRWxlbWVudChwYXJzZWRbMV0pXTtcbiAgfVxuXG4gIGlmICgocGFyc2VkID0ganFMaXRlQnVpbGRGcmFnbWVudChodG1sLCBjb250ZXh0KSkpIHtcbiAgICByZXR1cm4gcGFyc2VkLmNoaWxkTm9kZXM7XG4gIH1cblxuICByZXR1cm4gW107XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gSlFMaXRlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBKUUxpdGUpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHZhciBhcmdJc1N0cmluZztcblxuICBpZiAoaXNTdHJpbmcoZWxlbWVudCkpIHtcbiAgICBlbGVtZW50ID0gdHJpbShlbGVtZW50KTtcbiAgICBhcmdJc1N0cmluZyA9IHRydWU7XG4gIH1cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEpRTGl0ZSkpIHtcbiAgICBpZiAoYXJnSXNTdHJpbmcgJiYgZWxlbWVudC5jaGFyQXQoMCkgIT0gJzwnKSB7XG4gICAgICB0aHJvdyBqcUxpdGVNaW5FcnIoJ25vc2VsJywgJ0xvb2tpbmcgdXAgZWxlbWVudHMgdmlhIHNlbGVjdG9ycyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGpxTGl0ZSEgU2VlOiBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9hbmd1bGFyLmVsZW1lbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBKUUxpdGUoZWxlbWVudCk7XG4gIH1cblxuICBpZiAoYXJnSXNTdHJpbmcpIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBqcUxpdGVQYXJzZUhUTUwoZWxlbWVudCkpO1xuICB9IGVsc2Uge1xuICAgIGpxTGl0ZUFkZE5vZGVzKHRoaXMsIGVsZW1lbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUNsb25lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVEZWFsb2MoZWxlbWVudCwgb25seURlc2NlbmRhbnRzKSB7XG4gIGlmICghb25seURlc2NlbmRhbnRzKSBqcUxpdGVSZW1vdmVEYXRhKGVsZW1lbnQpO1xuXG4gIGlmIChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpIHtcbiAgICB2YXIgZGVzY2VuZGFudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRlc2NlbmRhbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAganFMaXRlUmVtb3ZlRGF0YShkZXNjZW5kYW50c1tpXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZU9mZihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpIHtcbiAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb2ZmYXJncycsICdqcUxpdGUjb2ZmKCkgZG9lcyBub3Qgc3VwcG9ydCB0aGUgYHNlbGVjdG9yYCBhcmd1bWVudCcpO1xuXG4gIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCk7XG4gIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmV2ZW50cztcbiAgdmFyIGhhbmRsZSA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuaGFuZGxlO1xuXG4gIGlmICghaGFuZGxlKSByZXR1cm47IC8vbm8gbGlzdGVuZXJzIHJlZ2lzdGVyZWRcblxuICBpZiAoIXR5cGUpIHtcbiAgICBmb3IgKHR5cGUgaW4gZXZlbnRzKSB7XG4gICAgICBpZiAodHlwZSAhPT0gJyRkZXN0cm95Jykge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oZWxlbWVudCwgdHlwZSwgaGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKGZuKSkge1xuICAgICAgICB2YXIgbGlzdGVuZXJGbnMgPSBldmVudHNbdHlwZV07XG4gICAgICAgIGFycmF5UmVtb3ZlKGxpc3RlbmVyRm5zIHx8IFtdLCBmbik7XG4gICAgICAgIGlmIChsaXN0ZW5lckZucyAmJiBsaXN0ZW5lckZucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpO1xuICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmVEYXRhKGVsZW1lbnQsIG5hbWUpIHtcbiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnQubmczMzk7XG4gIHZhciBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdO1xuXG4gIGlmIChleHBhbmRvU3RvcmUpIHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgZGVsZXRlIGV4cGFuZG9TdG9yZS5kYXRhW25hbWVdO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChleHBhbmRvU3RvcmUuaGFuZGxlKSB7XG4gICAgICBpZiAoZXhwYW5kb1N0b3JlLmV2ZW50cy4kZGVzdHJveSkge1xuICAgICAgICBleHBhbmRvU3RvcmUuaGFuZGxlKHt9LCAnJGRlc3Ryb3knKTtcbiAgICAgIH1cbiAgICAgIGpxTGl0ZU9mZihlbGVtZW50KTtcbiAgICB9XG4gICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXTtcbiAgICBlbGVtZW50Lm5nMzM5ID0gdW5kZWZpbmVkOyAvLyBkb24ndCBkZWxldGUgRE9NIGV4cGFuZG9zLiBJRSBhbmQgQ2hyb21lIGRvbid0IGxpa2UgaXRcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCBjcmVhdGVJZk5lY2Vzc2FyeSkge1xuICB2YXIgZXhwYW5kb0lkID0gZWxlbWVudC5uZzMzOSxcbiAgICAgIGV4cGFuZG9TdG9yZSA9IGV4cGFuZG9JZCAmJiBqcUNhY2hlW2V4cGFuZG9JZF07XG5cbiAgaWYgKGNyZWF0ZUlmTmVjZXNzYXJ5ICYmICFleHBhbmRvU3RvcmUpIHtcbiAgICBlbGVtZW50Lm5nMzM5ID0gZXhwYW5kb0lkID0ganFOZXh0SWQoKTtcbiAgICBleHBhbmRvU3RvcmUgPSBqcUNhY2hlW2V4cGFuZG9JZF0gPSB7ZXZlbnRzOiB7fSwgZGF0YToge30sIGhhbmRsZTogdW5kZWZpbmVkfTtcbiAgfVxuXG4gIHJldHVybiBleHBhbmRvU3RvcmU7XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRGF0YShlbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gIGlmIChqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkge1xuXG4gICAgdmFyIGlzU2ltcGxlU2V0dGVyID0gaXNEZWZpbmVkKHZhbHVlKTtcbiAgICB2YXIgaXNTaW1wbGVHZXR0ZXIgPSAhaXNTaW1wbGVTZXR0ZXIgJiYga2V5ICYmICFpc09iamVjdChrZXkpO1xuICAgIHZhciBtYXNzR2V0dGVyID0gIWtleTtcbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsICFpc1NpbXBsZUdldHRlcik7XG4gICAgdmFyIGRhdGEgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmRhdGE7XG5cbiAgICBpZiAoaXNTaW1wbGVTZXR0ZXIpIHsgLy8gZGF0YSgna2V5JywgdmFsdWUpXG4gICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hc3NHZXR0ZXIpIHsgIC8vIGRhdGEoKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1NpbXBsZUdldHRlcikgeyAvLyBkYXRhKCdrZXknKVxuICAgICAgICAgIC8vIGRvbid0IGZvcmNlIGNyZWF0aW9uIG9mIGV4cGFuZG9TdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgICAgICAgIHJldHVybiBkYXRhICYmIGRhdGFba2V5XTtcbiAgICAgICAgfSBlbHNlIHsgLy8gbWFzcy1zZXR0ZXI6IGRhdGEoe2tleTE6IHZhbDEsIGtleTI6IHZhbDJ9KVxuICAgICAgICAgIGV4dGVuZChkYXRhLCBrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmICghZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICgoXCIgXCIgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCIpLnJlcGxhY2UoL1tcXG5cXHRdL2csIFwiIFwiKS5cbiAgICAgIGluZGV4T2YoXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiKSA+IC0xKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3Nlcykge1xuICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShcbiAgICAgICAgICAoXCIgXCIgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCIpXG4gICAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHRdL2csIFwiIFwiKVxuICAgICAgICAgIC5yZXBsYWNlKFwiIFwiICsgdHJpbShjc3NDbGFzcykgKyBcIiBcIiwgXCIgXCIpKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVBZGRDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7XG4gIGlmIChjc3NDbGFzc2VzICYmIGVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIGV4aXN0aW5nQ2xhc3NlcyA9ICgnICcgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFxuXFx0XS9nLCBcIiBcIik7XG5cbiAgICBmb3JFYWNoKGNzc0NsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY3NzQ2xhc3MpIHtcbiAgICAgIGNzc0NsYXNzID0gdHJpbShjc3NDbGFzcyk7XG4gICAgICBpZiAoZXhpc3RpbmdDbGFzc2VzLmluZGV4T2YoJyAnICsgY3NzQ2xhc3MgKyAnICcpID09PSAtMSkge1xuICAgICAgICBleGlzdGluZ0NsYXNzZXMgKz0gY3NzQ2xhc3MgKyAnICc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0cmltKGV4aXN0aW5nQ2xhc3NlcykpO1xuICB9XG59XG5cblxuZnVuY3Rpb24ganFMaXRlQWRkTm9kZXMocm9vdCwgZWxlbWVudHMpIHtcbiAgLy8gVEhJUyBDT0RFIElTIFZFUlkgSE9ULiBEb24ndCBtYWtlIGNoYW5nZXMgd2l0aG91dCBiZW5jaG1hcmtpbmcuXG5cbiAgaWYgKGVsZW1lbnRzKSB7XG5cbiAgICAvLyBpZiBhIE5vZGUgKHRoZSBtb3N0IGNvbW1vbiBjYXNlKVxuICAgIGlmIChlbGVtZW50cy5ub2RlVHlwZSkge1xuICAgICAgcm9vdFtyb290Lmxlbmd0aCsrXSA9IGVsZW1lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICAvLyBpZiBhbiBBcnJheSBvciBOb2RlTGlzdCBhbmQgbm90IGEgV2luZG93XG4gICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicgJiYgZWxlbWVudHMud2luZG93ICE9PSBlbGVtZW50cykge1xuICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcm9vdFtyb290Lmxlbmd0aCsrXSA9IGVsZW1lbnRzW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdFtyb290Lmxlbmd0aCsrXSA9IGVsZW1lbnRzO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZUNvbnRyb2xsZXIoZWxlbWVudCwgbmFtZSkge1xuICByZXR1cm4ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJCcgKyAobmFtZSB8fCAnbmdDb250cm9sbGVyJykgKyAnQ29udHJvbGxlcicpO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gIC8vIGlmIGVsZW1lbnQgaXMgdGhlIGRvY3VtZW50IG9iamVjdCB3b3JrIHdpdGggdGhlIGh0bWwgZWxlbWVudCBpbnN0ZWFkXG4gIC8vIHRoaXMgbWFrZXMgJChkb2N1bWVudCkuc2NvcGUoKSBwb3NzaWJsZVxuICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PSBOT0RFX1RZUEVfRE9DVU1FTlQpIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIG5hbWVzID0gaXNBcnJheShuYW1lKSA/IG5hbWUgOiBbbmFtZV07XG5cbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBpZiAoKHZhbHVlID0ganFMaXRlLmRhdGEoZWxlbWVudCwgbmFtZXNbaV0pKSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gSWYgZGVhbGluZyB3aXRoIGEgZG9jdW1lbnQgZnJhZ21lbnQgbm9kZSB3aXRoIGEgaG9zdCBlbGVtZW50LCBhbmQgbm8gcGFyZW50LCB1c2UgdGhlIGhvc3RcbiAgICAvLyBlbGVtZW50IGFzIHRoZSBwYXJlbnQuIFRoaXMgZW5hYmxlcyBkaXJlY3RpdmVzIHdpdGhpbiBhIFNoYWRvdyBET00gb3IgcG9seWZpbGxlZCBTaGFkb3cgRE9NXG4gICAgLy8gdG8gbG9va3VwIHBhcmVudCBjb250cm9sbGVycy5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlIHx8IChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgJiYgZWxlbWVudC5ob3N0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVFbXB0eShlbGVtZW50KSB7XG4gIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmUoZWxlbWVudCwga2VlcERhdGEpIHtcbiAgaWYgKCFrZWVwRGF0YSkganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRG9jdW1lbnRMb2FkZWQoYWN0aW9uLCB3aW4pIHtcbiAgd2luID0gd2luIHx8IHdpbmRvdztcbiAgaWYgKHdpbi5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgLy8gRm9yY2UgdGhlIGFjdGlvbiB0byBiZSBydW4gYXN5bmMgZm9yIGNvbnNpc3RlbnQgYmVoYXZpb3VyXG4gICAgLy8gZnJvbSB0aGUgYWN0aW9uJ3MgcG9pbnQgb2Ygdmlld1xuICAgIC8vIGkuZS4gaXQgd2lsbCBkZWZpbml0ZWx5IG5vdCBiZSBpbiBhICRhcHBseVxuICAgIHdpbi5zZXRUaW1lb3V0KGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm8gbmVlZCB0byB1bmJpbmQgdGhpcyBoYW5kbGVyIGFzIGxvYWQgaXMgb25seSBldmVyIGNhbGxlZCBvbmNlXG4gICAganFMaXRlKHdpbikub24oJ2xvYWQnLCBhY3Rpb24pO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIHdoaWNoIGFyZSBkZWNsYXJlZCBkaXJlY3RseS5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIEpRTGl0ZVByb3RvdHlwZSA9IEpRTGl0ZS5wcm90b3R5cGUgPSB7XG4gIHJlYWR5OiBmdW5jdGlvbihmbikge1xuICAgIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICAgIGlmIChmaXJlZCkgcmV0dXJuO1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgZm4oKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBkb2N1bWVudCBpcyBhbHJlYWR5IGxvYWRlZFxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICBzZXRUaW1lb3V0KHRyaWdnZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uKCdET01Db250ZW50TG9hZGVkJywgdHJpZ2dlcik7IC8vIHdvcmtzIGZvciBtb2Rlcm4gYnJvd3NlcnMgYW5kIElFOVxuICAgICAgLy8gd2UgY2FuIG5vdCB1c2UganFMaXRlIHNpbmNlIHdlIGFyZSBub3QgZG9uZSBsb2FkaW5nIGFuZCBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGxhdGVyLlxuICAgICAgLy8ganNoaW50IC1XMDY0XG4gICAgICBKUUxpdGUod2luZG93KS5vbignbG9hZCcsIHRyaWdnZXIpOyAvLyBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkIGZvciBvdGhlcnNcbiAgICAgIC8vIGpzaGludCArVzA2NFxuICAgIH1cbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgIGZvckVhY2godGhpcywgZnVuY3Rpb24oZSkgeyB2YWx1ZS5wdXNoKCcnICsgZSk7fSk7XG4gICAgcmV0dXJuICdbJyArIHZhbHVlLmpvaW4oJywgJykgKyAnXSc7XG4gIH0sXG5cbiAgZXE6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gKGluZGV4ID49IDApID8ganFMaXRlKHRoaXNbaW5kZXhdKSA6IGpxTGl0ZSh0aGlzW3RoaXMubGVuZ3RoICsgaW5kZXhdKTtcbiAgfSxcblxuICBsZW5ndGg6IDAsXG4gIHB1c2g6IHB1c2gsXG4gIHNvcnQ6IFtdLnNvcnQsXG4gIHNwbGljZTogW10uc3BsaWNlXG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgZ2V0dGVyL3NldHRlcnMuXG4vLyB0aGVzZSBmdW5jdGlvbnMgcmV0dXJuIHNlbGYgb24gc2V0dGVyIGFuZFxuLy8gdmFsdWUgb24gZ2V0LlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgQk9PTEVBTl9BVFRSID0ge307XG5mb3JFYWNoKCdtdWx0aXBsZSxzZWxlY3RlZCxjaGVja2VkLGRpc2FibGVkLHJlYWRPbmx5LHJlcXVpcmVkLG9wZW4nLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gIEJPT0xFQU5fQVRUUltsb3dlcmNhc2UodmFsdWUpXSA9IHZhbHVlO1xufSk7XG52YXIgQk9PTEVBTl9FTEVNRU5UUyA9IHt9O1xuZm9yRWFjaCgnaW5wdXQsc2VsZWN0LG9wdGlvbix0ZXh0YXJlYSxidXR0b24sZm9ybSxkZXRhaWxzJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkge1xuICBCT09MRUFOX0VMRU1FTlRTW3ZhbHVlXSA9IHRydWU7XG59KTtcbnZhciBBTElBU0VEX0FUVFIgPSB7XG4gICduZ01pbmxlbmd0aCc6ICdtaW5sZW5ndGgnLFxuICAnbmdNYXhsZW5ndGgnOiAnbWF4bGVuZ3RoJyxcbiAgJ25nTWluJzogJ21pbicsXG4gICduZ01heCc6ICdtYXgnLFxuICAnbmdQYXR0ZXJuJzogJ3BhdHRlcm4nXG59O1xuXG5mdW5jdGlvbiBnZXRCb29sZWFuQXR0ck5hbWUoZWxlbWVudCwgbmFtZSkge1xuICAvLyBjaGVjayBkb20gbGFzdCBzaW5jZSB3ZSB3aWxsIG1vc3QgbGlrZWx5IGZhaWwgb24gbmFtZVxuICB2YXIgYm9vbGVhbkF0dHIgPSBCT09MRUFOX0FUVFJbbmFtZS50b0xvd2VyQ2FzZSgpXTtcblxuICAvLyBib29sZWFuQXR0ciBpcyBoZXJlIHR3aWNlIHRvIG1pbmltaXplIERPTSBhY2Nlc3NcbiAgcmV0dXJuIGJvb2xlYW5BdHRyICYmIEJPT0xFQU5fRUxFTUVOVFNbbm9kZU5hbWVfKGVsZW1lbnQpXSAmJiBib29sZWFuQXR0cjtcbn1cblxuZnVuY3Rpb24gZ2V0QWxpYXNlZEF0dHJOYW1lKGVsZW1lbnQsIG5hbWUpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgcmV0dXJuIChub2RlTmFtZSA9PT0gJ0lOUFVUJyB8fCBub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJykgJiYgQUxJQVNFRF9BVFRSW25hbWVdO1xufVxuXG5mb3JFYWNoKHtcbiAgZGF0YToganFMaXRlRGF0YSxcbiAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgSlFMaXRlW25hbWVdID0gZm47XG59KTtcblxuZm9yRWFjaCh7XG4gIGRhdGE6IGpxTGl0ZURhdGEsXG4gIGluaGVyaXRlZERhdGE6IGpxTGl0ZUluaGVyaXRlZERhdGEsXG5cbiAgc2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSFcbiAgICByZXR1cm4ganFMaXRlLmRhdGEoZWxlbWVudCwgJyRzY29wZScpIHx8IGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQsIFsnJGlzb2xhdGVTY29wZScsICckc2NvcGUnXSk7XG4gIH0sXG5cbiAgaXNvbGF0ZVNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhXG4gICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlJykgfHwganFMaXRlLmRhdGEoZWxlbWVudCwgJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyk7XG4gIH0sXG5cbiAgY29udHJvbGxlcjoganFMaXRlQ29udHJvbGxlcixcblxuICBpbmplY3RvcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTtcbiAgfSxcblxuICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH0sXG5cbiAgaGFzQ2xhc3M6IGpxTGl0ZUhhc0NsYXNzLFxuXG4gIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gY2FtZWxDYXNlKG5hbWUpO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGxvd2VyY2FzZWROYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xuICAgIGlmIChCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICBpZiAoISF2YWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIGxvd2VyY2FzZWROYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50W25hbWVdID0gZmFsc2U7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobG93ZXJjYXNlZE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKGVsZW1lbnRbbmFtZV0gfHxcbiAgICAgICAgICAgICAgICAgKGVsZW1lbnQuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0obmFtZSl8fCBub29wKS5zcGVjaWZpZWQpXG4gICAgICAgICAgICAgICA/IGxvd2VyY2FzZWROYW1lXG4gICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICAvLyB0aGUgZXh0cmEgYXJndW1lbnQgXCIyXCIgaXMgdG8gZ2V0IHRoZSByaWdodCB0aGluZyBmb3IgYS5ocmVmIGluIElFLCBzZWUgalF1ZXJ5IGNvZGVcbiAgICAgIC8vIHNvbWUgZWxlbWVudHMgKGUuZy4gRG9jdW1lbnQpIGRvbid0IGhhdmUgZ2V0IGF0dHJpYnV0ZSwgc28gcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgdmFyIHJldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUsIDIpO1xuICAgICAgLy8gbm9ybWFsaXplIG5vbi1leGlzdGluZyBhdHRyaWJ1dGVzIHRvIHVuZGVmaW5lZCAoYXMgalF1ZXJ5KVxuICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcbiAgICB9XG4gIH0sXG5cbiAgcHJvcDogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudFtuYW1lXTtcbiAgICB9XG4gIH0sXG5cbiAgdGV4dDogKGZ1bmN0aW9uKCkge1xuICAgIGdldFRleHQuJGR2ID0gJyc7XG4gICAgcmV0dXJuIGdldFRleHQ7XG5cbiAgICBmdW5jdGlvbiBnZXRUZXh0KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgICAgIHJldHVybiAobm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCkgPyBlbGVtZW50LnRleHRDb250ZW50IDogJyc7XG4gICAgICB9XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfVxuICB9KSgpLFxuXG4gIHZhbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSAmJiBub2RlTmFtZV8oZWxlbWVudCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yRWFjaChlbGVtZW50Lm9wdGlvbnMsIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDAgPyBudWxsIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnQudmFsdWU7XG4gICAgfVxuICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgfSxcblxuICBodG1sOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTDtcbiAgICB9XG4gICAganFMaXRlRGVhbG9jKGVsZW1lbnQsIHRydWUpO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH0sXG5cbiAgZW1wdHk6IGpxTGl0ZUVtcHR5XG59LCBmdW5jdGlvbihmbiwgbmFtZSkge1xuICAvKipcbiAgICogUHJvcGVydGllczogd3JpdGVzIHJldHVybiBzZWxlY3Rpb24sIHJlYWRzIHJldHVybiBmaXJzdCB2YWx1ZVxuICAgKi9cbiAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHtcbiAgICB2YXIgaSwga2V5O1xuICAgIHZhciBub2RlQ291bnQgPSB0aGlzLmxlbmd0aDtcblxuICAgIC8vIGpxTGl0ZUhhc0NsYXNzIGhhcyBvbmx5IHR3byBhcmd1bWVudHMsIGJ1dCBpcyBhIGdldHRlci1vbmx5IGZuLCBzbyB3ZSBuZWVkIHRvIHNwZWNpYWwtY2FzZSBpdFxuICAgIC8vIGluIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uLlxuICAgIC8vIGpxTGl0ZUVtcHR5IHRha2VzIG5vIGFyZ3VtZW50cyBidXQgaXMgYSBzZXR0ZXIuXG4gICAgaWYgKGZuICE9PSBqcUxpdGVFbXB0eSAmJlxuICAgICAgICAoKChmbi5sZW5ndGggPT0gMiAmJiAoZm4gIT09IGpxTGl0ZUhhc0NsYXNzICYmIGZuICE9PSBqcUxpdGVDb250cm9sbGVyKSkgPyBhcmcxIDogYXJnMikgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgIGlmIChpc09iamVjdChhcmcxKSkge1xuXG4gICAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBidXQgdGhlIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSB0aGUga2V5L3ZhbHVlc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgICBpZiAoZm4gPT09IGpxTGl0ZURhdGEpIHtcbiAgICAgICAgICAgIC8vIGRhdGEoKSB0YWtlcyB0aGUgd2hvbGUgb2JqZWN0IGluIGpRdWVyeVxuICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZzEpIHtcbiAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyByZXR1cm4gc2VsZiBmb3IgY2hhaW5pbmdcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSBhcmUgYSByZWFkLCBzbyByZWFkIHRoZSBmaXJzdCBjaGlsZC5cbiAgICAgICAgLy8gVE9ETzogZG8gd2Ugc3RpbGwgbmVlZCB0aGlzP1xuICAgICAgICB2YXIgdmFsdWUgPSBmbi4kZHY7XG4gICAgICAgIC8vIE9ubHkgaWYgd2UgaGF2ZSAkZHYgZG8gd2UgaXRlcmF0ZSBvdmVyIGFsbCwgb3RoZXJ3aXNlIGl0IGlzIGp1c3QgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAgICAgIHZhciBqaiA9ICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IE1hdGgubWluKG5vZGVDb3VudCwgMSkgOiBub2RlQ291bnQ7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgamo7IGorKykge1xuICAgICAgICAgIHZhciBub2RlVmFsdWUgPSBmbih0aGlzW2pdLCBhcmcxLCBhcmcyKTtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlID8gdmFsdWUgKyBub2RlVmFsdWUgOiBub2RlVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB3ZSBhcmUgYSB3cml0ZSwgc28gYXBwbHkgdG8gYWxsIGNoaWxkcmVuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgZm4odGhpc1tpXSwgYXJnMSwgYXJnMik7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc2VsZiBmb3IgY2hhaW5pbmdcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKSB7XG4gIHZhciBldmVudEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCwgdHlwZSkge1xuICAgIC8vIGpRdWVyeSBzcGVjaWZpYyBhcGlcbiAgICBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBldmVudC5kZWZhdWx0UHJldmVudGVkO1xuICAgIH07XG5cbiAgICB2YXIgZXZlbnRGbnMgPSBldmVudHNbdHlwZSB8fCBldmVudC50eXBlXTtcbiAgICB2YXIgZXZlbnRGbnNMZW5ndGggPSBldmVudEZucyA/IGV2ZW50Rm5zLmxlbmd0aCA6IDA7XG5cbiAgICBpZiAoIWV2ZW50Rm5zTGVuZ3RoKSByZXR1cm47XG5cbiAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKSkge1xuICAgICAgdmFyIG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uO1xuICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgb3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24uY2FsbChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPT09IHRydWU7XG4gICAgfTtcblxuICAgIC8vIENvcHkgZXZlbnQgaGFuZGxlcnMgaW4gY2FzZSBldmVudCBoYW5kbGVycyBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgZXhlY3V0aW9uLlxuICAgIGlmICgoZXZlbnRGbnNMZW5ndGggPiAxKSkge1xuICAgICAgZXZlbnRGbnMgPSBzaGFsbG93Q29weShldmVudEZucyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEZuc0xlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgZXZlbnRGbnNbaV0uY2FsbChlbGVtZW50LCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrIGZvciBhbmd1bGFyTW9ja3MvY2xlYXJEYXRhQ2FjaGUgdGhhdCBtYWtlcyBpdCBwb3NzaWJsZSB0byBkZXJlZ2lzdGVyIGFsbFxuICAvLyAgICAgICBldmVudHMgb24gYGVsZW1lbnRgXG4gIGV2ZW50SGFuZGxlci5lbGVtID0gZWxlbWVudDtcbiAgcmV0dXJuIGV2ZW50SGFuZGxlcjtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgaXRlcmF0aW5nIHRyYXZlcnNhbC5cbi8vIFRoZXNlIGZ1bmN0aW9ucyBjaGFpbiByZXN1bHRzIGludG8gYSBzaW5nbGVcbi8vIHNlbGVjdG9yLlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mb3JFYWNoKHtcbiAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YSxcblxuICBvbjogZnVuY3Rpb24ganFMaXRlT24oZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb25hcmdzJywgJ2pxTGl0ZSNvbigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgb3IgYGV2ZW50RGF0YWAgcGFyYW1ldGVycycpO1xuXG4gICAgLy8gRG8gbm90IGFkZCBldmVudCBoYW5kbGVycyB0byBub24tZWxlbWVudHMgYmVjYXVzZSB0aGV5IHdpbGwgbm90IGJlIGNsZWFuZWQgdXAuXG4gICAgaWYgKCFqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgdHJ1ZSk7XG4gICAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gICAgdmFyIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGU7XG5cbiAgICBpZiAoIWhhbmRsZSkge1xuICAgICAgaGFuZGxlID0gZXhwYW5kb1N0b3JlLmhhbmRsZSA9IGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpO1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL3N0cmluZy1pbmRleG9mLXZzLXNwbGl0XG4gICAgdmFyIHR5cGVzID0gdHlwZS5pbmRleE9mKCcgJykgPj0gMCA/IHR5cGUuc3BsaXQoJyAnKSA6IFt0eXBlXTtcbiAgICB2YXIgaSA9IHR5cGVzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHR5cGUgPSB0eXBlc1tpXTtcbiAgICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKCFldmVudEZucykge1xuICAgICAgICBldmVudHNbdHlwZV0gPSBbXTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ21vdXNlZW50ZXInIHx8IHR5cGUgPT09ICdtb3VzZWxlYXZlJykge1xuICAgICAgICAgIC8vIFJlZmVyIHRvIGpRdWVyeSdzIGltcGxlbWVudGF0aW9uIG9mIG1vdXNlZW50ZXIgJiBtb3VzZWxlYXZlXG4gICAgICAgICAgLy8gUmVhZCBhYm91dCBtb3VzZWVudGVyIGFuZCBtb3VzZWxlYXZlOlxuICAgICAgICAgIC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX21vdXNlLmh0bWwjbGluazhcblxuICAgICAgICAgIGpxTGl0ZU9uKGVsZW1lbnQsIE1PVVNFX0VWRU5UX01BUFt0eXBlXSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLCByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICAgICAgICAgIC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cbiAgICAgICAgICAgIC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG4gICAgICAgICAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhdGFyZ2V0LmNvbnRhaW5zKHJlbGF0ZWQpKSkge1xuICAgICAgICAgICAgICBoYW5kbGUoZXZlbnQsIHR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScpIHtcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBldmVudEZucyA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIH1cbiAgICAgIGV2ZW50Rm5zLnB1c2goZm4pO1xuICAgIH1cbiAgfSxcblxuICBvZmY6IGpxTGl0ZU9mZixcblxuICBvbmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7XG4gICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcblxuICAgIC8vYWRkIHRoZSBsaXN0ZW5lciB0d2ljZSBzbyB0aGF0IHdoZW4gaXQgaXMgY2FsbGVkXG4gICAgLy95b3UgY2FuIHJlbW92ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gYW5kIHN0aWxsIGJlXG4gICAgLy9hYmxlIHRvIGNhbGwgZWxlbWVudC5vZmYoZXYsIGZuKSBub3JtYWxseVxuICAgIGVsZW1lbnQub24odHlwZSwgZnVuY3Rpb24gb25GbigpIHtcbiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIGZuKTtcbiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIG9uRm4pO1xuICAgIH0pO1xuICAgIGVsZW1lbnQub24odHlwZSwgZm4pO1xuICB9LFxuXG4gIHJlcGxhY2VXaXRoOiBmdW5jdGlvbihlbGVtZW50LCByZXBsYWNlTm9kZSkge1xuICAgIHZhciBpbmRleCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50KTtcbiAgICBmb3JFYWNoKG5ldyBKUUxpdGUocmVwbGFjZU5vZGUpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBpbmRleC5uZXh0U2libGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgaW5kZXggPSBub2RlO1xuICAgIH0pO1xuICB9LFxuXG4gIGNoaWxkcmVuOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yRWFjaChlbGVtZW50LmNoaWxkTm9kZXMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVClcbiAgICAgICAgY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH0sXG5cbiAgY29udGVudHM6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jb250ZW50RG9jdW1lbnQgfHwgZWxlbWVudC5jaGlsZE5vZGVzIHx8IFtdO1xuICB9LFxuXG4gIGFwcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xuICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgaWYgKG5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCAmJiBub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UKSByZXR1cm47XG5cbiAgICBub2RlID0gbmV3IEpRTGl0ZShub2RlKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7XG4gICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICB2YXIgaW5kZXggPSBlbGVtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBpbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgd3JhcDogZnVuY3Rpb24oZWxlbWVudCwgd3JhcE5vZGUpIHtcbiAgICB3cmFwTm9kZSA9IGpxTGl0ZSh3cmFwTm9kZSkuZXEoMCkuY2xvbmUoKVswXTtcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQod3JhcE5vZGUsIGVsZW1lbnQpO1xuICAgIH1cbiAgICB3cmFwTm9kZS5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfSxcblxuICByZW1vdmU6IGpxTGl0ZVJlbW92ZSxcblxuICBkZXRhY2g6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICBqcUxpdGVSZW1vdmUoZWxlbWVudCwgdHJ1ZSk7XG4gIH0sXG5cbiAgYWZ0ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5ld0VsZW1lbnQpIHtcbiAgICB2YXIgaW5kZXggPSBlbGVtZW50LCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgbmV3RWxlbWVudCA9IG5ldyBKUUxpdGUobmV3RWxlbWVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuZXdFbGVtZW50Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBub2RlID0gbmV3RWxlbWVudFtpXTtcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgaW5kZXggPSBub2RlO1xuICAgIH1cbiAgfSxcblxuICBhZGRDbGFzczoganFMaXRlQWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiBqcUxpdGVSZW1vdmVDbGFzcyxcblxuICB0b2dnbGVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IsIGNvbmRpdGlvbikge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgZm9yRWFjaChzZWxlY3Rvci5zcGxpdCgnICcpLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIGNsYXNzQ29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoY2xhc3NDb25kaXRpb24pKSB7XG4gICAgICAgICAgY2xhc3NDb25kaXRpb24gPSAhanFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAoY2xhc3NDb25kaXRpb24gPyBqcUxpdGVBZGRDbGFzcyA6IGpxTGl0ZVJlbW92ZUNsYXNzKShlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHBhcmVudDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCA/IHBhcmVudCA6IG51bGw7XG4gIH0sXG5cbiAgbmV4dDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGlmIChlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3Rvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH0sXG5cbiAgY2xvbmU6IGpxTGl0ZUNsb25lLFxuXG4gIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgZXh0cmFQYXJhbWV0ZXJzKSB7XG5cbiAgICB2YXIgZHVtbXlFdmVudCwgZXZlbnRGbnNDb3B5LCBoYW5kbGVyQXJncztcbiAgICB2YXIgZXZlbnROYW1lID0gZXZlbnQudHlwZSB8fCBldmVudDtcbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpO1xuICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmV2ZW50cztcbiAgICB2YXIgZXZlbnRGbnMgPSBldmVudHMgJiYgZXZlbnRzW2V2ZW50TmFtZV07XG5cbiAgICBpZiAoZXZlbnRGbnMpIHtcbiAgICAgIC8vIENyZWF0ZSBhIGR1bW15IGV2ZW50IHRvIHBhc3MgdG8gdGhlIGhhbmRsZXJzXG4gICAgICBkdW1teUV2ZW50ID0ge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7IHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7IH0sXG4gICAgICAgIGlzRGVmYXVsdFByZXZlbnRlZDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHRydWU7IH0sXG4gICAgICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7IHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTsgfSxcbiAgICAgICAgaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPT09IHRydWU7IH0sXG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbjogbm9vcCxcbiAgICAgICAgdHlwZTogZXZlbnROYW1lLFxuICAgICAgICB0YXJnZXQ6IGVsZW1lbnRcbiAgICAgIH07XG5cbiAgICAgIC8vIElmIGEgY3VzdG9tIGV2ZW50IHdhcyBwcm92aWRlZCB0aGVuIGV4dGVuZCBvdXIgZHVtbXkgZXZlbnQgd2l0aCBpdFxuICAgICAgaWYgKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgZHVtbXlFdmVudCA9IGV4dGVuZChkdW1teUV2ZW50LCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvcHkgZXZlbnQgaGFuZGxlcnMgaW4gY2FzZSBldmVudCBoYW5kbGVycyBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgZXhlY3V0aW9uLlxuICAgICAgZXZlbnRGbnNDb3B5ID0gc2hhbGxvd0NvcHkoZXZlbnRGbnMpO1xuICAgICAgaGFuZGxlckFyZ3MgPSBleHRyYVBhcmFtZXRlcnMgPyBbZHVtbXlFdmVudF0uY29uY2F0KGV4dHJhUGFyYW1ldGVycykgOiBbZHVtbXlFdmVudF07XG5cbiAgICAgIGZvckVhY2goZXZlbnRGbnNDb3B5LCBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAoIWR1bW15RXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgIGZuLmFwcGx5KGVsZW1lbnQsIGhhbmRsZXJBcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59LCBmdW5jdGlvbihmbiwgbmFtZSkge1xuICAvKipcbiAgICogY2hhaW5pbmcgZnVuY3Rpb25zXG4gICAqL1xuICBKUUxpdGUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIC8vIGFueSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgbmVlZHMgdG8gYmUgd3JhcHBlZFxuICAgICAgICAgIHZhbHVlID0ganFMaXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAganFMaXRlQWRkTm9kZXModmFsdWUsIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IHRoaXM7XG4gIH07XG5cbiAgLy8gYmluZCBsZWdhY3kgYmluZC91bmJpbmQgdG8gb24vb2ZmXG4gIEpRTGl0ZS5wcm90b3R5cGUuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub247XG4gIEpRTGl0ZS5wcm90b3R5cGUudW5iaW5kID0gSlFMaXRlLnByb3RvdHlwZS5vZmY7XG59KTtcblxuLyoqXG4gKiBDb21wdXRlcyBhIGhhc2ggb2YgYW4gJ29iaicuXG4gKiBIYXNoIG9mIGE6XG4gKiAgc3RyaW5nIGlzIHN0cmluZ1xuICogIG51bWJlciBpcyBudW1iZXIgYXMgc3RyaW5nXG4gKiAgb2JqZWN0IGlzIGVpdGhlciByZXN1bHQgb2YgY2FsbGluZyAkJGhhc2hLZXkgZnVuY3Rpb24gb24gdGhlIG9iamVjdCBvciB1bmlxdWVseSBnZW5lcmF0ZWQgaWQsXG4gKiAgICAgICAgIHRoYXQgaXMgYWxzbyBhc3NpZ25lZCB0byB0aGUgJCRoYXNoS2V5IHByb3BlcnR5IG9mIHRoZSBvYmplY3QuXG4gKlxuICogQHBhcmFtIG9ialxuICogQHJldHVybnMge3N0cmluZ30gaGFzaCBzdHJpbmcgc3VjaCB0aGF0IHRoZSBzYW1lIGlucHV0IHdpbGwgaGF2ZSB0aGUgc2FtZSBoYXNoIHN0cmluZy5cbiAqICAgICAgICAgVGhlIHJlc3VsdGluZyBzdHJpbmcga2V5IGlzIGluICd0eXBlOmhhc2hLZXknIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gaGFzaEtleShvYmosIG5leHRVaWRGbikge1xuICB2YXIga2V5ID0gb2JqICYmIG9iai4kJGhhc2hLZXk7XG5cbiAgaWYgKGtleSkge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBrZXkgPSBvYmouJCRoYXNoS2V5KCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH1cblxuICB2YXIgb2JqVHlwZSA9IHR5cGVvZiBvYmo7XG4gIGlmIChvYmpUeXBlID09ICdmdW5jdGlvbicgfHwgKG9ialR5cGUgPT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsKSkge1xuICAgIGtleSA9IG9iai4kJGhhc2hLZXkgPSBvYmpUeXBlICsgJzonICsgKG5leHRVaWRGbiB8fCBuZXh0VWlkKSgpO1xuICB9IGVsc2Uge1xuICAgIGtleSA9IG9ialR5cGUgKyAnOicgKyBvYmo7XG4gIH1cblxuICByZXR1cm4ga2V5O1xufVxuXG4vKipcbiAqIEhhc2hNYXAgd2hpY2ggY2FuIHVzZSBvYmplY3RzIGFzIGtleXNcbiAqL1xuZnVuY3Rpb24gSGFzaE1hcChhcnJheSwgaXNvbGF0ZWRVaWQpIHtcbiAgaWYgKGlzb2xhdGVkVWlkKSB7XG4gICAgdmFyIHVpZCA9IDA7XG4gICAgdGhpcy5uZXh0VWlkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKyt1aWQ7XG4gICAgfTtcbiAgfVxuICBmb3JFYWNoKGFycmF5LCB0aGlzLnB1dCwgdGhpcyk7XG59XG5IYXNoTWFwLnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIFN0b3JlIGtleSB2YWx1ZSBwYWlyXG4gICAqIEBwYXJhbSBrZXkga2V5IHRvIHN0b3JlIGNhbiBiZSBhbnkgdHlwZVxuICAgKiBAcGFyYW0gdmFsdWUgdmFsdWUgdG8gc3RvcmUgY2FuIGJlIGFueSB0eXBlXG4gICAqL1xuICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW2hhc2hLZXkoa2V5LCB0aGlzLm5leHRVaWQpXSA9IHZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ga2V5XG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHRoZSB2YWx1ZSBmb3IgdGhlIGtleVxuICAgKi9cbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1toYXNoS2V5KGtleSwgdGhpcy5uZXh0VWlkKV07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUga2V5L3ZhbHVlIHBhaXJcbiAgICogQHBhcmFtIGtleVxuICAgKi9cbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzW2tleSA9IGhhc2hLZXkoa2V5LCB0aGlzLm5leHRVaWQpXTtcbiAgICBkZWxldGUgdGhpc1trZXldO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBuYW1lIGFuZ3VsYXIuaW5qZWN0b3JcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGFuIGluamVjdG9yIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGZvciByZXRyaWV2aW5nIHNlcnZpY2VzIGFzIHdlbGwgYXMgZm9yXG4gKiBkZXBlbmRlbmN5IGluamVjdGlvbiAoc2VlIHtAbGluayBndWlkZS9kaSBkZXBlbmRlbmN5IGluamVjdGlvbn0pLlxuICpcblxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWVcbiAqICAgICAgICB7QGxpbmsgYW5ndWxhci5tb2R1bGV9LiBUaGUgYG5nYCBtb2R1bGUgbXVzdCBiZSBleHBsaWNpdGx5IGFkZGVkLlxuICogQHJldHVybnMge2luamVjdG9yfSBJbmplY3RvciBvYmplY3QuIFNlZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHlwaWNhbCB1c2FnZVxuICogYGBganNcbiAqICAgLy8gY3JlYXRlIGFuIGluamVjdG9yXG4gKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKFsnbmcnXSk7XG4gKlxuICogICAvLyB1c2UgdGhlIGluamVjdG9yIHRvIGtpY2sgb2ZmIHlvdXIgYXBwbGljYXRpb25cbiAqICAgLy8gdXNlIHRoZSB0eXBlIGluZmVyZW5jZSB0byBhdXRvIGluamVjdCBhcmd1bWVudHMsIG9yIHVzZSBpbXBsaWNpdCBpbmplY3Rpb25cbiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkcm9vdFNjb3BlLCAkY29tcGlsZSwgJGRvY3VtZW50KSB7XG4gKiAgICAgJGNvbXBpbGUoJGRvY3VtZW50KSgkcm9vdFNjb3BlKTtcbiAqICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBTb21ldGltZXMgeW91IHdhbnQgdG8gZ2V0IGFjY2VzcyB0byB0aGUgaW5qZWN0b3Igb2YgYSBjdXJyZW50bHkgcnVubmluZyBBbmd1bGFyIGFwcFxuICogZnJvbSBvdXRzaWRlIEFuZ3VsYXIuIFBlcmhhcHMsIHlvdSB3YW50IHRvIGluamVjdCBhbmQgY29tcGlsZSBzb21lIG1hcmt1cCBhZnRlciB0aGVcbiAqIGFwcGxpY2F0aW9uIGhhcyBiZWVuIGJvb3RzdHJhcHBlZC4gWW91IGNhbiBkbyB0aGlzIHVzaW5nIHRoZSBleHRyYSBgaW5qZWN0b3IoKWAgYWRkZWRcbiAqIHRvIEpRdWVyeS9qcUxpdGUgZWxlbWVudHMuIFNlZSB7QGxpbmsgYW5ndWxhci5lbGVtZW50fS5cbiAqXG4gKiAqVGhpcyBpcyBmYWlybHkgcmFyZSBidXQgY291bGQgYmUgdGhlIGNhc2UgaWYgYSB0aGlyZCBwYXJ0eSBsaWJyYXJ5IGlzIGluamVjdGluZyB0aGVcbiAqIG1hcmt1cC4qXG4gKlxuICogSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlIGEgbmV3IGJsb2NrIG9mIEhUTUwgY29udGFpbmluZyBhIGBuZy1jb250cm9sbGVyYFxuICogZGlyZWN0aXZlIGlzIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50IGJvZHkgYnkgSlF1ZXJ5LiBXZSB0aGVuIGNvbXBpbGUgYW5kIGxpbmtcbiAqIGl0IGludG8gdGhlIGN1cnJlbnQgQW5ndWxhckpTIHNjb3BlLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgJGRpdiA9ICQoJzxkaXYgbmctY29udHJvbGxlcj1cIk15Q3RybFwiPnt7Y29udGVudC5sYWJlbH19PC9kaXY+Jyk7XG4gKiAkKGRvY3VtZW50LmJvZHkpLmFwcGVuZCgkZGl2KTtcbiAqXG4gKiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmluamVjdG9yKCkuaW52b2tlKGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gKiAgIHZhciBzY29wZSA9IGFuZ3VsYXIuZWxlbWVudCgkZGl2KS5zY29wZSgpO1xuICogICAkY29tcGlsZSgkZGl2KShzY29wZSk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBhdXRvXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBJbXBsaWNpdCBtb2R1bGUgd2hpY2ggZ2V0cyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIGVhY2gge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gKi9cblxudmFyIEZOX0FSR1MgPSAvXmZ1bmN0aW9uXFxzKlteXFwoXSpcXChcXHMqKFteXFwpXSopXFwpL207XG52YXIgRk5fQVJHX1NQTElUID0gLywvO1xudmFyIEZOX0FSRyA9IC9eXFxzKihfPykoXFxTKz8pXFwxXFxzKiQvO1xudmFyIFNUUklQX0NPTU1FTlRTID0gLygoXFwvXFwvLiokKXwoXFwvXFwqW1xcc1xcU10qP1xcKlxcLykpL21nO1xudmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG5cbmZ1bmN0aW9uIGFub25Gbihmbikge1xuICAvLyBGb3IgYW5vbnltb3VzIGZ1bmN0aW9ucywgc2hvd2luZyBhdCB0aGUgdmVyeSBsZWFzdCB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIGNhbiBoZWxwIGluXG4gIC8vIGRlYnVnZ2luZy5cbiAgdmFyIGZuVGV4dCA9IGZuLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpLFxuICAgICAgYXJncyA9IGZuVGV4dC5tYXRjaChGTl9BUkdTKTtcbiAgaWYgKGFyZ3MpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyAoYXJnc1sxXSB8fCAnJykucmVwbGFjZSgvW1xcc1xcclxcbl0rLywgJyAnKSArICcpJztcbiAgfVxuICByZXR1cm4gJ2ZuJztcbn1cblxuZnVuY3Rpb24gYW5ub3RhdGUoZm4sIHN0cmljdERpLCBuYW1lKSB7XG4gIHZhciAkaW5qZWN0LFxuICAgICAgZm5UZXh0LFxuICAgICAgYXJnRGVjbCxcbiAgICAgIGxhc3Q7XG5cbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghKCRpbmplY3QgPSBmbi4kaW5qZWN0KSkge1xuICAgICAgJGluamVjdCA9IFtdO1xuICAgICAgaWYgKGZuLmxlbmd0aCkge1xuICAgICAgICBpZiAoc3RyaWN0RGkpIHtcbiAgICAgICAgICBpZiAoIWlzU3RyaW5nKG5hbWUpIHx8ICFuYW1lKSB7XG4gICAgICAgICAgICBuYW1lID0gZm4ubmFtZSB8fCBhbm9uRm4oZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3N0cmljdGRpJyxcbiAgICAgICAgICAgICd7MH0gaXMgbm90IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gYW5kIGNhbm5vdCBiZSBpbnZva2VkIGluIHN0cmljdCBtb2RlJywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm5UZXh0ID0gZm4udG9TdHJpbmcoKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyk7XG4gICAgICAgIGFyZ0RlY2wgPSBmblRleHQubWF0Y2goRk5fQVJHUyk7XG4gICAgICAgIGZvckVhY2goYXJnRGVjbFsxXS5zcGxpdChGTl9BUkdfU1BMSVQpLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICBhcmcucmVwbGFjZShGTl9BUkcsIGZ1bmN0aW9uKGFsbCwgdW5kZXJzY29yZSwgbmFtZSkge1xuICAgICAgICAgICAgJGluamVjdC5wdXNoKG5hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZuLiRpbmplY3QgPSAkaW5qZWN0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0FycmF5KGZuKSkge1xuICAgIGxhc3QgPSBmbi5sZW5ndGggLSAxO1xuICAgIGFzc2VydEFyZ0ZuKGZuW2xhc3RdLCAnZm4nKTtcbiAgICAkaW5qZWN0ID0gZm4uc2xpY2UoMCwgbGFzdCk7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0QXJnRm4oZm4sICdmbicsIHRydWUpO1xuICB9XG4gIHJldHVybiAkaW5qZWN0O1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGluamVjdG9yXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYCRpbmplY3RvcmAgaXMgdXNlZCB0byByZXRyaWV2ZSBvYmplY3QgaW5zdGFuY2VzIGFzIGRlZmluZWQgYnlcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlIHByb3ZpZGVyfSwgaW5zdGFudGlhdGUgdHlwZXMsIGludm9rZSBtZXRob2RzLFxuICogYW5kIGxvYWQgbW9kdWxlcy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGFsd2F5cyBob2xkcyB0cnVlOlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKCk7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuZ2V0KCckaW5qZWN0b3InKSkudG9CZSgkaW5qZWN0b3IpO1xuICogICBleHBlY3QoJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAqICAgICByZXR1cm4gJGluamVjdG9yO1xuICogICB9KSkudG9CZSgkaW5qZWN0b3IpO1xuICogYGBgXG4gKlxuICogIyBJbmplY3Rpb24gRnVuY3Rpb24gQW5ub3RhdGlvblxuICpcbiAqIEphdmFTY3JpcHQgZG9lcyBub3QgaGF2ZSBhbm5vdGF0aW9ucywgYW5kIGFubm90YXRpb25zIGFyZSBuZWVkZWQgZm9yIGRlcGVuZGVuY3kgaW5qZWN0aW9uLiBUaGVcbiAqIGZvbGxvd2luZyBhcmUgYWxsIHZhbGlkIHdheXMgb2YgYW5ub3RhdGluZyBmdW5jdGlvbiB3aXRoIGluamVjdGlvbiBhcmd1bWVudHMgYW5kIGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGluZmVycmVkIChvbmx5IHdvcmtzIGlmIGNvZGUgbm90IG1pbmlmaWVkL29iZnVzY2F0ZWQpXG4gKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oc2VydmljZUEpe30pO1xuICpcbiAqICAgLy8gYW5ub3RhdGVkXG4gKiAgIGZ1bmN0aW9uIGV4cGxpY2l0KHNlcnZpY2VBKSB7fTtcbiAqICAgZXhwbGljaXQuJGluamVjdCA9IFsnc2VydmljZUEnXTtcbiAqICAgJGluamVjdG9yLmludm9rZShleHBsaWNpdCk7XG4gKlxuICogICAvLyBpbmxpbmVcbiAqICAgJGluamVjdG9yLmludm9rZShbJ3NlcnZpY2VBJywgZnVuY3Rpb24oc2VydmljZUEpe31dKTtcbiAqIGBgYFxuICpcbiAqICMjIEluZmVyZW5jZVxuICpcbiAqIEluIEphdmFTY3JpcHQgY2FsbGluZyBgdG9TdHJpbmcoKWAgb24gYSBmdW5jdGlvbiByZXR1cm5zIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9uLiBUaGUgZGVmaW5pdGlvblxuICogY2FuIHRoZW4gYmUgcGFyc2VkIGFuZCB0aGUgZnVuY3Rpb24gYXJndW1lbnRzIGNhbiBiZSBleHRyYWN0ZWQuICpOT1RFOiogVGhpcyBkb2VzIG5vdCB3b3JrIHdpdGhcbiAqIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGUgYXJndW1lbnQgbmFtZXMuXG4gKlxuICogIyMgYCRpbmplY3RgIEFubm90YXRpb25cbiAqIEJ5IGFkZGluZyBhbiBgJGluamVjdGAgcHJvcGVydHkgb250byBhIGZ1bmN0aW9uIHRoZSBpbmplY3Rpb24gcGFyYW1ldGVycyBjYW4gYmUgc3BlY2lmaWVkLlxuICpcbiAqICMjIElubGluZVxuICogQXMgYW4gYXJyYXkgb2YgaW5qZWN0aW9uIG5hbWVzLCB3aGVyZSB0aGUgbGFzdCBpdGVtIGluIHRoZSBhcnJheSBpcyB0aGUgZnVuY3Rpb24gdG8gY2FsbC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNnZXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiBhbiBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UgdG8gcmV0cmlldmUuXG4gKiBAcmV0dXJuIHsqfSBUaGUgaW5zdGFuY2UuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjaW52b2tlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJbnZva2UgdGhlIG1ldGhvZCBhbmQgc3VwcGx5IHRoZSBtZXRob2QgYXJndW1lbnRzIGZyb20gdGhlIGAkaW5qZWN0b3JgLlxuICpcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLiBGdW5jdGlvbiBwYXJhbWV0ZXJzIGFyZSBpbmplY3RlZCBhY2NvcmRpbmcgdG8gdGhlXG4gKiAgIHtAbGluayBndWlkZS9kaSAkaW5qZWN0IEFubm90YXRpb259IHJ1bGVzLlxuICogQHBhcmFtIHtPYmplY3Q9fSBzZWxmIFRoZSBgdGhpc2AgZm9yIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cbiAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgdGhlIGludm9rZWQgYGZuYCBmdW5jdGlvbi5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNoYXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFsbG93cyB0aGUgdXNlciB0byBxdWVyeSBpZiB0aGUgcGFydGljdWxhciBzZXJ2aWNlIGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBpbmplY3RvciBoYXMgZ2l2ZW4gc2VydmljZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNpbnN0YW50aWF0ZVxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgSlMgdHlwZS4gVGhlIG1ldGhvZCB0YWtlcyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLCBpbnZva2VzIHRoZSBuZXdcbiAqIG9wZXJhdG9yLCBhbmQgc3VwcGxpZXMgYWxsIG9mIHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGFzIHNwZWNpZmllZCBieSB0aGVcbiAqIGNvbnN0cnVjdG9yIGFubm90YXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gVHlwZSBBbm5vdGF0ZWQgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdD19IGxvY2FscyBPcHRpb25hbCBvYmplY3QuIElmIHByZXNldCB0aGVuIGFueSBhcmd1bWVudCBuYW1lcyBhcmUgcmVhZCBmcm9tIHRoaXNcbiAqIG9iamVjdCBmaXJzdCwgYmVmb3JlIHRoZSBgJGluamVjdG9yYCBpcyBjb25zdWx0ZWQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBuZXcgaW5zdGFuY2Ugb2YgYFR5cGVgLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2Fubm90YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHNlcnZpY2UgbmFtZXMgd2hpY2ggdGhlIGZ1bmN0aW9uIGlzIHJlcXVlc3RpbmcgZm9yIGluamVjdGlvbi4gVGhpcyBBUEkgaXNcbiAqIHVzZWQgYnkgdGhlIGluamVjdG9yIHRvIGRldGVybWluZSB3aGljaCBzZXJ2aWNlcyBuZWVkIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uIHdoZW4gdGhlXG4gKiBmdW5jdGlvbiBpcyBpbnZva2VkLiBUaGVyZSBhcmUgdGhyZWUgd2F5cyBpbiB3aGljaCB0aGUgZnVuY3Rpb24gY2FuIGJlIGFubm90YXRlZCB3aXRoIHRoZSBuZWVkZWRcbiAqIGRlcGVuZGVuY2llcy5cbiAqXG4gKiAjIEFyZ3VtZW50IG5hbWVzXG4gKlxuICogVGhlIHNpbXBsZXN0IGZvcm0gaXMgdG8gZXh0cmFjdCB0aGUgZGVwZW5kZW5jaWVzIGZyb20gdGhlIGFyZ3VtZW50cyBvZiB0aGUgZnVuY3Rpb24uIFRoaXMgaXMgZG9uZVxuICogYnkgY29udmVydGluZyB0aGUgZnVuY3Rpb24gaW50byBhIHN0cmluZyB1c2luZyBgdG9TdHJpbmcoKWAgbWV0aG9kIGFuZCBleHRyYWN0aW5nIHRoZSBhcmd1bWVudFxuICogbmFtZXMuXG4gKiBgYGBqc1xuICogICAvLyBHaXZlblxuICogICBmdW5jdGlvbiBNeUNvbnRyb2xsZXIoJHNjb3BlLCAkcm91dGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfVxuICpcbiAqICAgLy8gVGhlblxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XG4gKiBgYGBcbiAqXG4gKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCB3b3JrIHdpdGggY29kZSBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbi4gRm9yIHRoaXMgcmVhc29uIHRoZSBmb2xsb3dpbmdcbiAqIGFubm90YXRpb24gc3RyYXRlZ2llcyBhcmUgc3VwcG9ydGVkLlxuICpcbiAqICMgVGhlIGAkaW5qZWN0YCBwcm9wZXJ0eVxuICpcbiAqIElmIGEgZnVuY3Rpb24gaGFzIGFuIGAkaW5qZWN0YCBwcm9wZXJ0eSBhbmQgaXRzIHZhbHVlIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MsIHRoZW4gdGhlIHN0cmluZ3NcbiAqIHJlcHJlc2VudCBuYW1lcyBvZiBzZXJ2aWNlcyB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmdW5jdGlvbi5cbiAqIGBgYGpzXG4gKiAgIC8vIEdpdmVuXG4gKiAgIHZhciBNeUNvbnRyb2xsZXIgPSBmdW5jdGlvbihvYmZ1c2NhdGVkU2NvcGUsIG9iZnVzY2F0ZWRSb3V0ZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XG4gKiAgIC8vIERlZmluZSBmdW5jdGlvbiBkZXBlbmRlbmNpZXNcbiAqICAgTXlDb250cm9sbGVyWyckaW5qZWN0J10gPSBbJyRzY29wZScsICckcm91dGUnXTtcbiAqXG4gKiAgIC8vIFRoZW5cbiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKE15Q29udHJvbGxlcikpLnRvRXF1YWwoWyckc2NvcGUnLCAnJHJvdXRlJ10pO1xuICogYGBgXG4gKlxuICogIyBUaGUgYXJyYXkgbm90YXRpb25cbiAqXG4gKiBJdCBpcyBvZnRlbiBkZXNpcmFibGUgdG8gaW5saW5lIEluamVjdGVkIGZ1bmN0aW9ucyBhbmQgdGhhdCdzIHdoZW4gc2V0dGluZyB0aGUgYCRpbmplY3RgIHByb3BlcnR5XG4gKiBpcyB2ZXJ5IGluY29udmVuaWVudC4gSW4gdGhlc2Ugc2l0dWF0aW9ucyB1c2luZyB0aGUgYXJyYXkgbm90YXRpb24gdG8gc3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGluXG4gKiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbiBpcyBhIGJldHRlciBjaG9pY2U6XG4gKlxuICogYGBganNcbiAqICAgLy8gV2Ugd2lzaCB0byB3cml0ZSB0aGlzIChub3QgbWluaWZpY2F0aW9uIC8gb2JmdXNjYXRpb24gc2FmZSlcbiAqICAgaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRjb21waWxlLCAkcm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH0pO1xuICpcbiAqICAgLy8gV2UgYXJlIGZvcmNlZCB0byB3cml0ZSBicmVhayBpbmxpbmluZ1xuICogICB2YXIgdG1wRm4gPSBmdW5jdGlvbihvYmZ1c2NhdGVkQ29tcGlsZSwgb2JmdXNjYXRlZFJvb3RTY29wZSkge1xuICogICAgIC8vIC4uLlxuICogICB9O1xuICogICB0bXBGbi4kaW5qZWN0ID0gWyckY29tcGlsZScsICckcm9vdFNjb3BlJ107XG4gKiAgIGluamVjdG9yLmludm9rZSh0bXBGbik7XG4gKlxuICogICAvLyBUbyBiZXR0ZXIgc3VwcG9ydCBpbmxpbmUgZnVuY3Rpb24gdGhlIGlubGluZSBhbm5vdGF0aW9uIGlzIHN1cHBvcnRlZFxuICogICBpbmplY3Rvci5pbnZva2UoWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmQ29tcGlsZSwgb2JmUm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1dKTtcbiAqXG4gKiAgIC8vIFRoZXJlZm9yZVxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoXG4gKiAgICAgIFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKG9iZnVzXyRjb21waWxlLCBvYmZ1c18kcm9vdFNjb3BlKSB7fV0pXG4gKiAgICApLnRvRXF1YWwoWyckY29tcGlsZScsICckcm9vdFNjb3BlJ10pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gZm4gRnVuY3Rpb24gZm9yIHdoaWNoIGRlcGVuZGVudCBzZXJ2aWNlIG5hbWVzIG5lZWQgdG9cbiAqIGJlIHJldHJpZXZlZCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gKlxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy5cbiAqL1xuXG5cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcHJvdmlkZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSAkcHJvdmlkZX0gc2VydmljZSBoYXMgYSBudW1iZXIgb2YgbWV0aG9kcyBmb3IgcmVnaXN0ZXJpbmcgY29tcG9uZW50c1xuICogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIE1hbnkgb2YgdGhlc2UgZnVuY3Rpb25zIGFyZSBhbHNvIGV4cG9zZWQgb25cbiAqIHtAbGluayBhbmd1bGFyLk1vZHVsZX0uXG4gKlxuICogQW4gQW5ndWxhciAqKnNlcnZpY2UqKiBpcyBhIHNpbmdsZXRvbiBvYmplY3QgY3JlYXRlZCBieSBhICoqc2VydmljZSBmYWN0b3J5KiouICBUaGVzZSAqKnNlcnZpY2VcbiAqIGZhY3RvcmllcyoqIGFyZSBmdW5jdGlvbnMgd2hpY2gsIGluIHR1cm4sIGFyZSBjcmVhdGVkIGJ5IGEgKipzZXJ2aWNlIHByb3ZpZGVyKiouXG4gKiBUaGUgKipzZXJ2aWNlIHByb3ZpZGVycyoqIGFyZSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMuIFdoZW4gaW5zdGFudGlhdGVkIHRoZXkgbXVzdCBjb250YWluIGFcbiAqIHByb3BlcnR5IGNhbGxlZCBgJGdldGAsIHdoaWNoIGhvbGRzIHRoZSAqKnNlcnZpY2UgZmFjdG9yeSoqIGZ1bmN0aW9uLlxuICpcbiAqIFdoZW4geW91IHJlcXVlc3QgYSBzZXJ2aWNlLCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0gaXMgcmVzcG9uc2libGUgZm9yIGZpbmRpbmcgdGhlXG4gKiBjb3JyZWN0ICoqc2VydmljZSBwcm92aWRlcioqLCBpbnN0YW50aWF0aW5nIGl0IGFuZCB0aGVuIGNhbGxpbmcgaXRzIGAkZ2V0YCAqKnNlcnZpY2UgZmFjdG9yeSoqXG4gKiBmdW5jdGlvbiB0byBnZXQgdGhlIGluc3RhbmNlIG9mIHRoZSAqKnNlcnZpY2UqKi5cbiAqXG4gKiBPZnRlbiBzZXJ2aWNlcyBoYXZlIG5vIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhbmQgdGhlcmUgaXMgbm8gbmVlZCB0byBhZGQgbWV0aG9kcyB0byB0aGUgc2VydmljZVxuICogcHJvdmlkZXIuICBUaGUgcHJvdmlkZXIgd2lsbCBiZSBubyBtb3JlIHRoYW4gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aXRoIGEgYCRnZXRgIHByb3BlcnR5LiBGb3JcbiAqIHRoZXNlIGNhc2VzIHRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSAkcHJvdmlkZX0gc2VydmljZSBoYXMgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyB0byByZWdpc3RlclxuICogc2VydmljZXMgd2l0aG91dCBzcGVjaWZ5aW5nIGEgcHJvdmlkZXIuXG4gKlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciBwcm92aWRlcihwcm92aWRlcil9IC0gcmVnaXN0ZXJzIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogd2l0aCB0aGVcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfVxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNjb25zdGFudCBjb25zdGFudChvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBiZSBhY2Nlc3NlZCBieVxuICogICAgIHByb3ZpZGVycyBhbmQgc2VydmljZXMuXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlKG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIG9ubHkgYmUgYWNjZXNzZWQgYnlcbiAqICAgICBzZXJ2aWNlcywgbm90IHByb3ZpZGVycy5cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSBmYWN0b3J5KGZuKX0gLSByZWdpc3RlcnMgYSBzZXJ2aWNlICoqZmFjdG9yeSBmdW5jdGlvbioqLCBgZm5gLFxuICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBjb250YWluIHRoZVxuICogICAgIGdpdmVuIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZShjbGFzcyl9IC0gcmVnaXN0ZXJzIGEgKipjb25zdHJ1Y3RvciBmdW5jdGlvbioqLCBgY2xhc3NgXG4gKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGluc3RhbnRpYXRlXG4gKiAgICAgIGEgbmV3IG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogU2VlIHRoZSBpbmRpdmlkdWFsIG1ldGhvZHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjcHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipwcm92aWRlciBmdW5jdGlvbioqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBQcm92aWRlciBmdW5jdGlvbnNcbiAqIGFyZSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMsIHdob3NlIGluc3RhbmNlcyBhcmUgcmVzcG9uc2libGUgZm9yIFwicHJvdmlkaW5nXCIgYSBmYWN0b3J5IGZvciBhXG4gKiBzZXJ2aWNlLlxuICpcbiAqIFNlcnZpY2UgcHJvdmlkZXIgbmFtZXMgc3RhcnQgd2l0aCB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSB0aGV5IHByb3ZpZGUgZm9sbG93ZWQgYnkgYFByb3ZpZGVyYC5cbiAqIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSBoYXMgYSBwcm92aWRlciBjYWxsZWRcbiAqIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfS5cbiAqXG4gKiBTZXJ2aWNlIHByb3ZpZGVyIG9iamVjdHMgY2FuIGhhdmUgYWRkaXRpb25hbCBtZXRob2RzIHdoaWNoIGFsbG93IGNvbmZpZ3VyYXRpb24gb2YgdGhlIHByb3ZpZGVyXG4gKiBhbmQgaXRzIHNlcnZpY2UuIEltcG9ydGFudGx5LCB5b3UgY2FuIGNvbmZpZ3VyZSB3aGF0IGtpbmQgb2Ygc2VydmljZSBpcyBjcmVhdGVkIGJ5IHRoZSBgJGdldGBcbiAqIG1ldGhvZCwgb3IgaG93IHRoYXQgc2VydmljZSB3aWxsIGFjdC4gRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyICRsb2dQcm92aWRlcn0gaGFzIGFcbiAqIG1ldGhvZCB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZCBkZWJ1Z0VuYWJsZWR9XG4gKiB3aGljaCBsZXRzIHlvdSBzcGVjaWZ5IHdoZXRoZXIgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2Ugd2lsbCBsb2cgZGVidWcgbWVzc2FnZXMgdG8gdGhlXG4gKiBjb25zb2xlIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuIE5PVEU6IHRoZSBwcm92aWRlciB3aWxsIGJlIGF2YWlsYWJsZSB1bmRlciBgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnUHJvdmlkZXInYCBrZXkuXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oKSl9IHByb3ZpZGVyIElmIHRoZSBwcm92aWRlciBpczpcbiAqXG4gKiAgIC0gYE9iamVjdGA6IHRoZW4gaXQgc2hvdWxkIGhhdmUgYSBgJGdldGAgbWV0aG9kLiBUaGUgYCRnZXRgIG1ldGhvZCB3aWxsIGJlIGludm9rZWQgdXNpbmdcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlICRpbmplY3Rvci5pbnZva2UoKX0gd2hlbiBhbiBpbnN0YW5jZSBuZWVkcyB0byBiZSBjcmVhdGVkLlxuICogICAtIGBDb25zdHJ1Y3RvcmA6IGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcm92aWRlciB3aWxsIGJlIGNyZWF0ZWQgdXNpbmdcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW5zdGFudGlhdGUgJGluamVjdG9yLmluc3RhbnRpYXRlKCl9LCB0aGVuIHRyZWF0ZWQgYXMgYG9iamVjdGAuXG4gKlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuXG4gKiBAZXhhbXBsZVxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gY3JlYXRlIGEgc2ltcGxlIGV2ZW50IHRyYWNraW5nIHNlcnZpY2UgYW5kIHJlZ2lzdGVyIGl0IHVzaW5nXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS5cbiAqXG4gKiBgYGBqc1xuICogIC8vIERlZmluZSB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgZnVuY3Rpb24gRXZlbnRUcmFja2VyUHJvdmlkZXIoKSB7XG4gKiAgICB2YXIgdHJhY2tpbmdVcmwgPSAnL3RyYWNrJztcbiAqXG4gKiAgICAvLyBBIHByb3ZpZGVyIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgd2hlcmUgdGhlIHRyYWNrZWQgZXZlbnRzIHNob3VsZCBiZWVuIHNhdmVkXG4gKiAgICB0aGlzLnNldFRyYWNraW5nVXJsID0gZnVuY3Rpb24odXJsKSB7XG4gKiAgICAgIHRyYWNraW5nVXJsID0gdXJsO1xuICogICAgfTtcbiAqXG4gKiAgICAvLyBUaGUgc2VydmljZSBmYWN0b3J5IGZ1bmN0aW9uXG4gKiAgICB0aGlzLiRnZXQgPSBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICAgdmFyIHRyYWNrZWRFdmVudHMgPSB7fTtcbiAqICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gdHJhY2sgYW4gZXZlbnRcbiAqICAgICAgICBldmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAqICAgICAgICAgIHZhciBjb3VudCA9IHRyYWNrZWRFdmVudHNbZXZlbnRdIHx8IDA7XG4gKiAgICAgICAgICBjb3VudCArPSAxO1xuICogICAgICAgICAgdHJhY2tlZEV2ZW50c1tldmVudF0gPSBjb3VudDtcbiAqICAgICAgICAgIHJldHVybiBjb3VudDtcbiAqICAgICAgICB9LFxuICogICAgICAgIC8vIENhbGwgdGhpcyB0byBzYXZlIHRoZSB0cmFja2VkIGV2ZW50cyB0byB0aGUgdHJhY2tpbmdVcmxcbiAqICAgICAgICBzYXZlOiBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICRodHRwLnBvc3QodHJhY2tpbmdVcmwsIHRyYWNrZWRFdmVudHMpO1xuICogICAgICAgIH1cbiAqICAgICAgfTtcbiAqICAgIH1dO1xuICogIH1cbiAqXG4gKiAgZGVzY3JpYmUoJ2V2ZW50VHJhY2tlcicsIGZ1bmN0aW9uKCkge1xuICogICAgdmFyIHBvc3RTcHk7XG4gKlxuICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAqICAgICAgLy8gUmVnaXN0ZXIgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogICAgICAkcHJvdmlkZS5wcm92aWRlcignZXZlbnRUcmFja2VyJywgRXZlbnRUcmFja2VyUHJvdmlkZXIpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKGV2ZW50VHJhY2tlclByb3ZpZGVyKSB7XG4gKiAgICAgIC8vIENvbmZpZ3VyZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICAgICAgZXZlbnRUcmFja2VyUHJvdmlkZXIuc2V0VHJhY2tpbmdVcmwoJy9jdXN0b20tdHJhY2snKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBpdCgndHJhY2tzIGV2ZW50cycsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIpIHtcbiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgxKTtcbiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgyKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBpdCgnc2F2ZXMgdG8gdGhlIHRyYWNraW5nIHVybCcsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIsICRodHRwKSB7XG4gKiAgICAgIHBvc3RTcHkgPSBzcHlPbigkaHR0cCwgJ3Bvc3QnKTtcbiAqICAgICAgZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpO1xuICogICAgICBldmVudFRyYWNrZXIuc2F2ZSgpO1xuICogICAgICBleHBlY3QocG9zdFNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzBdKS5ub3QudG9FcXVhbCgnL3RyYWNrJyk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLnRvRXF1YWwoJy9jdXN0b20tdHJhY2snKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1sxXSkudG9FcXVhbCh7ICdsb2dpbic6IDEgfSk7XG4gKiAgICB9KSk7XG4gKiAgfSk7XG4gKiBgYGBcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI2ZhY3RvcnlcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGZhY3RvcnkqKiwgd2hpY2ggd2lsbCBiZSBjYWxsZWQgdG8gcmV0dXJuIHRoZSBzZXJ2aWNlIGluc3RhbmNlLlxuICogVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cyBwcm92aWRlciBjb25zaXN0cyBvZiBvbmx5IGEgYCRnZXRgIHByb3BlcnR5LFxuICogd2hpY2ggaXMgdGhlIGdpdmVuIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvbi5cbiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeShnZXRGbil9IGlmIHlvdSBkbyBub3QgbmVlZCB0b1xuICogY29uZmlndXJlIHlvdXIgc2VydmljZSBpbiBhIHByb3ZpZGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gJGdldEZuIFRoZSAkZ2V0Rm4gZm9yIHRoZSBpbnN0YW5jZSBjcmVhdGlvbi4gSW50ZXJuYWxseSB0aGlzIGlzIGEgc2hvcnQgaGFuZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGAkcHJvdmlkZS5wcm92aWRlcihuYW1lLCB7JGdldDogJGdldEZufSlgLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlXG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS5mYWN0b3J5KCdwaW5nJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgcmV0dXJuIGZ1bmN0aW9uIHBpbmcoKSB7XG4gKiAgICAgICByZXR1cm4gJGh0dHAuc2VuZCgnL3BpbmcnKTtcbiAqICAgICB9O1xuICogICB9XSk7XG4gKiBgYGBcbiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6XG4gKiBgYGBqc1xuICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gKiAgICAgcGluZygpO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjc2VydmljZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgY29uc3RydWN0b3IqKiwgd2hpY2ggd2lsbCBiZSBpbnZva2VkIHdpdGggYG5ld2AgdG8gY3JlYXRlIHRoZSBzZXJ2aWNlXG4gKiBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIncyBgJGdldGAgcHJvcGVydHkgaXMgdGhlIHNlcnZpY2VcbiAqIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGluc3RhbnRpYXRlIHRoZSBzZXJ2aWNlIGluc3RhbmNlLlxuICpcbiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9IGlmIHlvdSBkZWZpbmUgeW91ciBzZXJ2aWNlXG4gKiBhcyBhIHR5cGUvY2xhc3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQSBjbGFzcyAoY29uc3RydWN0b3IgZnVuY3Rpb24pIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIHNlcnZpY2UgdXNpbmdcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9LlxuICogYGBganNcbiAqICAgdmFyIFBpbmcgPSBmdW5jdGlvbigkaHR0cCkge1xuICogICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAqICAgfTtcbiAqXG4gKiAgIFBpbmcuJGluamVjdCA9IFsnJGh0dHAnXTtcbiAqXG4gKiAgIFBpbmcucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4gdGhpcy4kaHR0cC5nZXQoJy9waW5nJyk7XG4gKiAgIH07XG4gKiAgICRwcm92aWRlLnNlcnZpY2UoJ3BpbmcnLCBQaW5nKTtcbiAqIGBgYFxuICogWW91IHdvdWxkIHRoZW4gaW5qZWN0IGFuZCB1c2UgdGhpcyBzZXJ2aWNlIGxpa2UgdGhpczpcbiAqIGBgYGpzXG4gKiAgIHNvbWVNb2R1bGUuY29udHJvbGxlcignQ3RybCcsIFsncGluZycsIGZ1bmN0aW9uKHBpbmcpIHtcbiAqICAgICBwaW5nLnNlbmQoKTtcbiAqICAgfV0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI3ZhbHVlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqdmFsdWUgc2VydmljZSoqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LCBzdWNoIGFzIGEgc3RyaW5nLCBhXG4gKiBudW1iZXIsIGFuIGFycmF5LCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbi4gIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHNcbiAqIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB0aGUgKip2YWx1ZVxuICogc2VydmljZSoqLlxuICpcbiAqIFZhbHVlIHNlcnZpY2VzIGFyZSBzaW1pbGFyIHRvIGNvbnN0YW50IHNlcnZpY2VzLCBleGNlcHQgdGhhdCB0aGV5IGNhbm5vdCBiZSBpbmplY3RlZCBpbnRvIGFcbiAqIG1vZHVsZSBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIChzZWUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ30pIGJ1dCB0aGV5IGNhbiBiZSBvdmVycmlkZGVuIGJ5XG4gKiBhbiBBbmd1bGFyXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBhcmUgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyB2YWx1ZSBzZXJ2aWNlcy5cbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLnZhbHVlKCdBRE1JTl9VU0VSJywgJ2FkbWluJyk7XG4gKlxuICogICAkcHJvdmlkZS52YWx1ZSgnUm9sZUxvb2t1cCcsIHsgYWRtaW46IDAsIHdyaXRlcjogMSwgcmVhZGVyOiAyIH0pO1xuICpcbiAqICAgJHByb3ZpZGUudmFsdWUoJ2hhbGZPZicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlIC8gMjtcbiAqICAgfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjY29uc3RhbnRcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipjb25zdGFudCBzZXJ2aWNlKiosIHN1Y2ggYXMgYSBzdHJpbmcsIGEgbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sXG4gKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gVW5saWtlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlfSBpdCBjYW4gYmVcbiAqIGluamVjdGVkIGludG8gYSBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBhbmQgaXQgY2Fubm90XG4gKiBiZSBvdmVycmlkZGVuIGJ5IGFuIEFuZ3VsYXIge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbnN0YW50LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgY29uc3RhbnQgdmFsdWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgYSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIGNvbnN0YW50czpcbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdTSEFSRF9IRUlHSFQnLCAzMDYpO1xuICpcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ01ZX0NPTE9VUlMnLCBbJ3JlZCcsICdibHVlJywgJ2dyZXknXSk7XG4gKlxuICogICAkcHJvdmlkZS5jb25zdGFudCgnZG91YmxlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUgKiAyO1xuICogICB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNkZWNvcmF0b3JcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGRlY29yYXRvcioqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBBIHNlcnZpY2UgZGVjb3JhdG9yXG4gKiBpbnRlcmNlcHRzIHRoZSBjcmVhdGlvbiBvZiBhIHNlcnZpY2UsIGFsbG93aW5nIGl0IHRvIG92ZXJyaWRlIG9yIG1vZGlmeSB0aGUgYmVoYXZpb3VyIG9mIHRoZVxuICogc2VydmljZS4gVGhlIG9iamVjdCByZXR1cm5lZCBieSB0aGUgZGVjb3JhdG9yIG1heSBiZSB0aGUgb3JpZ2luYWwgc2VydmljZSwgb3IgYSBuZXcgc2VydmljZVxuICogb2JqZWN0IHdoaWNoIHJlcGxhY2VzIG9yIHdyYXBzIGFuZCBkZWxlZ2F0ZXMgdG8gdGhlIG9yaWdpbmFsIHNlcnZpY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGRlY29yYXRvciBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBzZXJ2aWNlIG5lZWRzIHRvIGJlXG4gKiAgICBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHVzaW5nXG4gKiAgICB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuXG4gKiAgICBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOlxuICpcbiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIG1vbmtleSBwYXRjaGVkLCBjb25maWd1cmVkLFxuICogICAgICBkZWNvcmF0ZWQgb3IgZGVsZWdhdGVkIHRvLlxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIHdlIGRlY29yYXRlIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIHRvIGNvbnZlcnQgd2FybmluZ3MgdG8gZXJyb3JzIGJ5IGludGVyY2VwdGluZ1xuICogY2FsbHMgdG8ge0BsaW5rIG5nLiRsb2cjZXJyb3IgJGxvZy53YXJuKCl9LlxuICogYGBganNcbiAqICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckbG9nJywgWyckZGVsZWdhdGUnLCBmdW5jdGlvbigkZGVsZWdhdGUpIHtcbiAqICAgICAkZGVsZWdhdGUud2FybiA9ICRkZWxlZ2F0ZS5lcnJvcjtcbiAqICAgICByZXR1cm4gJGRlbGVnYXRlO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yKG1vZHVsZXNUb0xvYWQsIHN0cmljdERpKSB7XG4gIHN0cmljdERpID0gKHN0cmljdERpID09PSB0cnVlKTtcbiAgdmFyIElOU1RBTlRJQVRJTkcgPSB7fSxcbiAgICAgIHByb3ZpZGVyU3VmZml4ID0gJ1Byb3ZpZGVyJyxcbiAgICAgIHBhdGggPSBbXSxcbiAgICAgIGxvYWRlZE1vZHVsZXMgPSBuZXcgSGFzaE1hcChbXSwgdHJ1ZSksXG4gICAgICBwcm92aWRlckNhY2hlID0ge1xuICAgICAgICAkcHJvdmlkZToge1xuICAgICAgICAgICAgcHJvdmlkZXI6IHN1cHBvcnRPYmplY3QocHJvdmlkZXIpLFxuICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSxcbiAgICAgICAgICAgIHNlcnZpY2U6IHN1cHBvcnRPYmplY3Qoc2VydmljZSksXG4gICAgICAgICAgICB2YWx1ZTogc3VwcG9ydE9iamVjdCh2YWx1ZSksXG4gICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksXG4gICAgICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvclxuICAgICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlckluamVjdG9yID0gKHByb3ZpZGVyQ2FjaGUuJGluamVjdG9yID1cbiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKHByb3ZpZGVyQ2FjaGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCd1bnByJywgXCJVbmtub3duIHByb3ZpZGVyOiB7MH1cIiwgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgICAgICAgIH0pKSxcbiAgICAgIGluc3RhbmNlQ2FjaGUgPSB7fSxcbiAgICAgIGluc3RhbmNlSW5qZWN0b3IgPSAoaW5zdGFuY2VDYWNoZS4kaW5qZWN0b3IgPVxuICAgICAgICAgIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoaW5zdGFuY2VDYWNoZSwgZnVuY3Rpb24oc2VydmljZW5hbWUpIHtcbiAgICAgICAgICAgIHZhciBwcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VuYW1lICsgcHJvdmlkZXJTdWZmaXgpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyLCB1bmRlZmluZWQsIHNlcnZpY2VuYW1lKTtcbiAgICAgICAgICB9KSk7XG5cblxuICBmb3JFYWNoKGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpLCBmdW5jdGlvbihmbikgeyBpbnN0YW5jZUluamVjdG9yLmludm9rZShmbiB8fCBub29wKTsgfSk7XG5cbiAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3I7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vICRwcm92aWRlclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBmdW5jdGlvbiBzdXBwb3J0T2JqZWN0KGRlbGVnYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgIGZvckVhY2goa2V5LCByZXZlcnNlUGFyYW1zKGRlbGVnYXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVsZWdhdGUoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3ZpZGVyKG5hbWUsIHByb3ZpZGVyXykge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdzZXJ2aWNlJyk7XG4gICAgaWYgKGlzRnVuY3Rpb24ocHJvdmlkZXJfKSB8fCBpc0FycmF5KHByb3ZpZGVyXykpIHtcbiAgICAgIHByb3ZpZGVyXyA9IHByb3ZpZGVySW5qZWN0b3IuaW5zdGFudGlhdGUocHJvdmlkZXJfKTtcbiAgICB9XG4gICAgaWYgKCFwcm92aWRlcl8uJGdldCkge1xuICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdwZ2V0JywgXCJQcm92aWRlciAnezB9JyBtdXN0IGRlZmluZSAkZ2V0IGZhY3RvcnkgbWV0aG9kLlwiLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGVbbmFtZSArIHByb3ZpZGVyU3VmZml4XSA9IHByb3ZpZGVyXztcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGVuZm9yY2VkUmV0dXJuVmFsdWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZmFjdG9yeSwgdGhpcywgdW5kZWZpbmVkLCBuYW1lKTtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChyZXN1bHQpKSB7XG4gICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycigndW5kZWYnLCBcIlByb3ZpZGVyICd7MH0nIG11c3QgcmV0dXJuIGEgdmFsdWUgZnJvbSAkZ2V0IGZhY3RvcnkgbWV0aG9kLlwiLCBuYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZhY3RvcnkobmFtZSwgZmFjdG9yeUZuLCBlbmZvcmNlKSB7XG4gICAgcmV0dXJuIHByb3ZpZGVyKG5hbWUsIHtcbiAgICAgICRnZXQ6IGVuZm9yY2UgIT09IGZhbHNlID8gZW5mb3JjZVJldHVyblZhbHVlKG5hbWUsIGZhY3RvcnlGbikgOiBmYWN0b3J5Rm5cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcnZpY2UobmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gZmFjdG9yeShuYW1lLCBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5pbnN0YW50aWF0ZShjb25zdHJ1Y3Rvcik7XG4gICAgfV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsdWUobmFtZSwgdmFsKSB7IHJldHVybiBmYWN0b3J5KG5hbWUsIHZhbHVlRm4odmFsKSwgZmFsc2UpOyB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnY29uc3RhbnQnKTtcbiAgICBwcm92aWRlckNhY2hlW25hbWVdID0gdmFsdWU7XG4gICAgaW5zdGFuY2VDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjb3JhdG9yKHNlcnZpY2VOYW1lLCBkZWNvckZuKSB7XG4gICAgdmFyIG9yaWdQcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lICsgcHJvdmlkZXJTdWZmaXgpLFxuICAgICAgICBvcmlnJGdldCA9IG9yaWdQcm92aWRlci4kZ2V0O1xuXG4gICAgb3JpZ1Byb3ZpZGVyLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcmlnSW5zdGFuY2UgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShvcmlnJGdldCwgb3JpZ1Byb3ZpZGVyKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShkZWNvckZuLCBudWxsLCB7JGRlbGVnYXRlOiBvcmlnSW5zdGFuY2V9KTtcbiAgICB9O1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1vZHVsZSBMb2FkaW5nXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBmdW5jdGlvbiBsb2FkTW9kdWxlcyhtb2R1bGVzVG9Mb2FkKSB7XG4gICAgdmFyIHJ1bkJsb2NrcyA9IFtdLCBtb2R1bGVGbjtcbiAgICBmb3JFYWNoKG1vZHVsZXNUb0xvYWQsIGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgaWYgKGxvYWRlZE1vZHVsZXMuZ2V0KG1vZHVsZSkpIHJldHVybjtcbiAgICAgIGxvYWRlZE1vZHVsZXMucHV0KG1vZHVsZSwgdHJ1ZSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJ1bkludm9rZVF1ZXVlKHF1ZXVlKSB7XG4gICAgICAgIHZhciBpLCBpaTtcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBxdWV1ZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIGludm9rZUFyZ3MgPSBxdWV1ZVtpXSxcbiAgICAgICAgICAgICAgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChpbnZva2VBcmdzWzBdKTtcblxuICAgICAgICAgIHByb3ZpZGVyW2ludm9rZUFyZ3NbMV1dLmFwcGx5KHByb3ZpZGVyLCBpbnZva2VBcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaXNTdHJpbmcobW9kdWxlKSkge1xuICAgICAgICAgIG1vZHVsZUZuID0gYW5ndWxhck1vZHVsZShtb2R1bGUpO1xuICAgICAgICAgIHJ1bkJsb2NrcyA9IHJ1bkJsb2Nrcy5jb25jYXQobG9hZE1vZHVsZXMobW9kdWxlRm4ucmVxdWlyZXMpKS5jb25jYXQobW9kdWxlRm4uX3J1bkJsb2Nrcyk7XG4gICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2ludm9rZVF1ZXVlKTtcbiAgICAgICAgICBydW5JbnZva2VRdWV1ZShtb2R1bGVGbi5fY29uZmlnQmxvY2tzKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzZXJ0QXJnRm4obW9kdWxlLCAnbW9kdWxlJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZVttb2R1bGUubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUubWVzc2FnZSAmJiBlLnN0YWNrICYmIGUuc3RhY2suaW5kZXhPZihlLm1lc3NhZ2UpID09IC0xKSB7XG4gICAgICAgICAgLy8gU2FmYXJpICYgRkYncyBzdGFjayB0cmFjZXMgZG9uJ3QgY29udGFpbiBlcnJvci5tZXNzYWdlIGNvbnRlbnRcbiAgICAgICAgICAvLyB1bmxpa2UgdGhvc2Ugb2YgQ2hyb21lIGFuZCBJRVxuICAgICAgICAgIC8vIFNvIGlmIHN0YWNrIGRvZXNuJ3QgY29udGFpbiBtZXNzYWdlLCB3ZSBjcmVhdGUgYSBuZXcgc3RyaW5nIHRoYXQgY29udGFpbnMgYm90aC5cbiAgICAgICAgICAvLyBTaW5jZSBlcnJvci5zdGFjayBpcyByZWFkLW9ubHkgaW4gU2FmYXJpLCBJJ20gb3ZlcnJpZGluZyBlIGFuZCBub3QgZS5zdGFjayBoZXJlLlxuICAgICAgICAgIC8qIGpzaGludCAtVzAyMiAqL1xuICAgICAgICAgIGUgPSBlLm1lc3NhZ2UgKyAnXFxuJyArIGUuc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdtb2R1bGVycicsIFwiRmFpbGVkIHRvIGluc3RhbnRpYXRlIG1vZHVsZSB7MH0gZHVlIHRvOlxcbnsxfVwiLFxuICAgICAgICAgICAgICAgICAgbW9kdWxlLCBlLnN0YWNrIHx8IGUubWVzc2FnZSB8fCBlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcnVuQmxvY2tzO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIGludGVybmFsIEluamVjdG9yXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoY2FjaGUsIGZhY3RvcnkpIHtcblxuICAgIGZ1bmN0aW9uIGdldFNlcnZpY2Uoc2VydmljZU5hbWUpIHtcbiAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShzZXJ2aWNlTmFtZSkpIHtcbiAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignY2RlcCcsICdDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kOiB7MH0nLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZSArICcgPC0gJyArIHBhdGguam9pbignIDwtICcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwYXRoLnVuc2hpZnQoc2VydmljZU5hbWUpO1xuICAgICAgICAgIGNhY2hlW3NlcnZpY2VOYW1lXSA9IElOU1RBTlRJQVRJTkc7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlW3NlcnZpY2VOYW1lXSA9IGZhY3Rvcnkoc2VydmljZU5hbWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XG4gICAgICAgICAgICBkZWxldGUgY2FjaGVbc2VydmljZU5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgcGF0aC5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52b2tlKGZuLCBzZWxmLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIGxvY2FscyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2VydmljZU5hbWUgPSBsb2NhbHM7XG4gICAgICAgIGxvY2FscyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgJGluamVjdCA9IGFubm90YXRlKGZuLCBzdHJpY3REaSwgc2VydmljZU5hbWUpLFxuICAgICAgICAgIGxlbmd0aCwgaSxcbiAgICAgICAgICBrZXk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9ICRpbmplY3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0gJGluamVjdFtpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdpdGtuJyxcbiAgICAgICAgICAgICAgICAgICdJbmNvcnJlY3QgaW5qZWN0aW9uIHRva2VuISBFeHBlY3RlZCBzZXJ2aWNlIG5hbWUgYXMgc3RyaW5nLCBnb3QgezB9Jywga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnB1c2goXG4gICAgICAgICAgbG9jYWxzICYmIGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShrZXkpXG4gICAgICAgICAgPyBsb2NhbHNba2V5XVxuICAgICAgICAgIDogZ2V0U2VydmljZShrZXkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheShmbikpIHtcbiAgICAgICAgZm4gPSBmbltsZW5ndGhdO1xuICAgICAgfVxuXG4gICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9hbmd1bGFyanMtaW52b2tlLWFwcGx5LXZzLXN3aXRjaFxuICAgICAgLy8gIzUzODhcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YW50aWF0ZShUeXBlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgIGluc3RhbmNlLCByZXR1cm5lZFZhbHVlO1xuXG4gICAgICAvLyBDaGVjayBpZiBUeXBlIGlzIGFubm90YXRlZCBhbmQgdXNlIGp1c3QgdGhlIGdpdmVuIGZ1bmN0aW9uIGF0IG4tMSBhcyBwYXJhbWV0ZXJcbiAgICAgIC8vIGUuZy4gc29tZU1vZHVsZS5mYWN0b3J5KCdncmVldGVyJywgWyckd2luZG93JywgZnVuY3Rpb24ocmVuYW1lZCR3aW5kb3cpIHt9XSk7XG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSAoaXNBcnJheShUeXBlKSA/IFR5cGVbVHlwZS5sZW5ndGggLSAxXSA6IFR5cGUpLnByb3RvdHlwZTtcbiAgICAgIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICByZXR1cm5lZFZhbHVlID0gaW52b2tlKFR5cGUsIGluc3RhbmNlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKTtcblxuICAgICAgcmV0dXJuIGlzT2JqZWN0KHJldHVybmVkVmFsdWUpIHx8IGlzRnVuY3Rpb24ocmV0dXJuZWRWYWx1ZSkgPyByZXR1cm5lZFZhbHVlIDogaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGludm9rZTogaW52b2tlLFxuICAgICAgaW5zdGFudGlhdGU6IGluc3RhbnRpYXRlLFxuICAgICAgZ2V0OiBnZXRTZXJ2aWNlLFxuICAgICAgYW5ub3RhdGU6IGFubm90YXRlLFxuICAgICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlckNhY2hlLmhhc093blByb3BlcnR5KG5hbWUgKyBwcm92aWRlclN1ZmZpeCkgfHwgY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5jcmVhdGVJbmplY3Rvci4kJGFubm90YXRlID0gYW5ub3RhdGU7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGFuY2hvclNjcm9sbFByb3ZpZGVyYCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcgd2hlbmV2ZXJcbiAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIoKSB7XG5cbiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmdcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJ5IGRlZmF1bHQsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gd2lsbCBhdXRvbWF0aWNhbGx5IHdpbGwgZGV0ZWN0IGNoYW5nZXMgdG9cbiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGFuZCBzY3JvbGwgdG8gdGhlIGVsZW1lbnQgbWF0Y2hpbmcgdGhlIG5ldyBoYXNoLjxiciAvPlxuICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gZGlzYWJsZSBhdXRvbWF0aWMgc2Nyb2xsaW5nLlxuICAgKlxuICAgKiBJZiBhdXRvbWF0aWMgc2Nyb2xsaW5nIGlzIGRpc2FibGVkLCBvbmUgbXVzdCBleHBsaWNpdGx5IGNhbGxcbiAgICoge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwgJGFuY2hvclNjcm9sbCgpfSBpbiBvcmRlciB0byBzY3JvbGwgdG8gdGhlIGVsZW1lbnQgcmVsYXRlZCB0byB0aGVcbiAgICogY3VycmVudCBoYXNoLlxuICAgKi9cbiAgdGhpcy5kaXNhYmxlQXV0b1Njcm9sbGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRhbmNob3JTY3JvbGxcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICogQHJlcXVpcmVzICR3aW5kb3dcbiAgICogQHJlcXVpcmVzICRsb2NhdGlvblxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogV2hlbiBjYWxsZWQsIGl0IGNoZWNrcyB0aGUgY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gYW5kXG4gICAqIHNjcm9sbHMgdG8gdGhlIHJlbGF0ZWQgZWxlbWVudCwgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBzcGVjaWZpZWQgaW4gdGhlXG4gICAqIFtIdG1sNSBzcGVjXShodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjL092ZXJ2aWV3Lmh0bWwjdGhlLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCkuXG4gICAqXG4gICAqIEl0IGFsc28gd2F0Y2hlcyB0aGUge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGFuZCBhdXRvbWF0aWNhbGx5IHNjcm9sbHMgdG9cbiAgICogbWF0Y2ggYW55IGFuY2hvciB3aGVuZXZlciBpdCBjaGFuZ2VzLiBUaGlzIGNhbiBiZSBkaXNhYmxlZCBieSBjYWxsaW5nXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmcgJGFuY2hvclNjcm9sbFByb3ZpZGVyLmRpc2FibGVBdXRvU2Nyb2xsaW5nKCl9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gdXNlIGl0cyB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0IHlPZmZzZXR9IHByb3BlcnR5IHRvIHNwZWNpZnkgYVxuICAgKiB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChlaXRoZXIgZml4ZWQgb3IgZHluYW1pYykuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7KG51bWJlcnxmdW5jdGlvbnxqcUxpdGUpfSB5T2Zmc2V0XG4gICAqIElmIHNldCwgc3BlY2lmaWVzIGEgdmVydGljYWwgc2Nyb2xsLW9mZnNldC4gVGhpcyBpcyBvZnRlbiB1c2VmdWwgd2hlbiB0aGVyZSBhcmUgZml4ZWRcbiAgICogcG9zaXRpb25lZCBlbGVtZW50cyBhdCB0aGUgdG9wIG9mIHRoZSBwYWdlLCBzdWNoIGFzIG5hdmJhcnMsIGhlYWRlcnMgZXRjLlxuICAgKlxuICAgKiBgeU9mZnNldGAgY2FuIGJlIHNwZWNpZmllZCBpbiB2YXJpb3VzIHdheXM6XG4gICAqIC0gKipudW1iZXIqKjogQSBmaXhlZCBudW1iZXIgb2YgcGl4ZWxzIHRvIGJlIHVzZWQgYXMgb2Zmc2V0LjxiciAvPjxiciAvPlxuICAgKiAtICoqZnVuY3Rpb24qKjogQSBnZXR0ZXIgZnVuY3Rpb24gY2FsbGVkIGV2ZXJ5dGltZSBgJGFuY2hvclNjcm9sbCgpYCBpcyBleGVjdXRlZC4gTXVzdCByZXR1cm5cbiAgICogICBhIG51bWJlciByZXByZXNlbnRpbmcgdGhlIG9mZnNldCAoaW4gcGl4ZWxzKS48YnIgLz48YnIgLz5cbiAgICogLSAqKmpxTGl0ZSoqOiBBIGpxTGl0ZS9qUXVlcnkgZWxlbWVudCB0byBiZSB1c2VkIGZvciBzcGVjaWZ5aW5nIHRoZSBvZmZzZXQuIFRoZSBkaXN0YW5jZSBmcm9tXG4gICAqICAgdGhlIHRvcCBvZiB0aGUgcGFnZSB0byB0aGUgZWxlbWVudCdzIGJvdHRvbSB3aWxsIGJlIHVzZWQgYXMgb2Zmc2V0LjxiciAvPlxuICAgKiAgICoqTm90ZSoqOiBUaGUgZWxlbWVudCB3aWxsIGJlIHRha2VuIGludG8gYWNjb3VudCBvbmx5IGFzIGxvbmcgYXMgaXRzIGBwb3NpdGlvbmAgaXMgc2V0IHRvXG4gICAqICAgYGZpeGVkYC4gVGhpcyBvcHRpb24gaXMgdXNlZnVsLCB3aGVuIGRlYWxpbmcgd2l0aCByZXNwb25zaXZlIG5hdmJhcnMvaGVhZGVycyB0aGF0IGFkanVzdFxuICAgKiAgIHRoZWlyIGhlaWdodCBhbmQvb3IgcG9zaXRpb25pbmcgYWNjb3JkaW5nIHRvIHRoZSB2aWV3cG9ydCdzIHNpemUuXG4gICAqXG4gICAqIDxiciAvPlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiBJbiBvcmRlciBmb3IgYHlPZmZzZXRgIHRvIHdvcmsgcHJvcGVybHksIHNjcm9sbGluZyBzaG91bGQgdGFrZSBwbGFjZSBvbiB0aGUgZG9jdW1lbnQncyByb290IGFuZFxuICAgKiBub3Qgc29tZSBjaGlsZCBlbGVtZW50LlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwiYW5jaG9yU2Nyb2xsRXhhbXBsZVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IGlkPVwic2Nyb2xsQXJlYVwiIG5nLWNvbnRyb2xsZXI9XCJTY3JvbGxDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxhIG5nLWNsaWNrPVwiZ290b0JvdHRvbSgpXCI+R28gdG8gYm90dG9tPC9hPlxuICAgICAgICAgICA8YSBpZD1cImJvdHRvbVwiPjwvYT4gWW91J3JlIGF0IHRoZSBib3R0b20hXG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2FuY2hvclNjcm9sbEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ1Njcm9sbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJGFuY2hvclNjcm9sbCcsXG4gICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkYW5jaG9yU2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZ290b0JvdHRvbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGxvY2F0aW9uLmhhc2ggdG8gdGhlIGlkIG9mXG4gICAgICAgICAgICAgICAgIC8vIHRoZSBlbGVtZW50IHlvdSB3aXNoIHRvIHNjcm9sbCB0by5cbiAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLmhhc2goJ2JvdHRvbScpO1xuXG4gICAgICAgICAgICAgICAgIC8vIGNhbGwgJGFuY2hvclNjcm9sbCgpXG4gICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAjc2Nyb2xsQXJlYSB7XG4gICAgICAgICAgIGhlaWdodDogMjgwcHg7XG4gICAgICAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgICAgICAgfVxuXG4gICAgICAgICAjYm90dG9tIHtcbiAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgIG1hcmdpbi10b3A6IDIwMDBweDtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICpcbiAgICogPGhyIC8+XG4gICAqIFRoZSBleGFtcGxlIGJlbG93IGlsbHVzdHJhdGVzIHRoZSB1c2Ugb2YgYSB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChzcGVjaWZpZWQgYXMgYSBmaXhlZCB2YWx1ZSkuXG4gICAqIFNlZSB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0ICRhbmNob3JTY3JvbGwueU9mZnNldH0gZm9yIG1vcmUgZGV0YWlscy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwiYW5jaG9yU2Nyb2xsT2Zmc2V0RXhhbXBsZVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IGNsYXNzPVwiZml4ZWQtaGVhZGVyXCIgbmctY29udHJvbGxlcj1cImhlYWRlckN0cmxcIj5cbiAgICAgICAgICAgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwiZ290b0FuY2hvcih4KVwiIG5nLXJlcGVhdD1cInggaW4gWzEsMiwzLDQsNV1cIj5cbiAgICAgICAgICAgICBHbyB0byBhbmNob3Ige3t4fX1cbiAgICAgICAgICAgPC9hPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8ZGl2IGlkPVwiYW5jaG9ye3t4fX1cIiBjbGFzcz1cImFuY2hvclwiIG5nLXJlcGVhdD1cInggaW4gWzEsMiwzLDQsNV1cIj5cbiAgICAgICAgICAgQW5jaG9yIHt7eH19IG9mIDVcbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYW5jaG9yU2Nyb2xsT2Zmc2V0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAucnVuKFsnJGFuY2hvclNjcm9sbCcsIGZ1bmN0aW9uKCRhbmNob3JTY3JvbGwpIHtcbiAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsLnlPZmZzZXQgPSA1MDsgICAvLyBhbHdheXMgc2Nyb2xsIGJ5IDUwIGV4dHJhIHBpeGVsc1xuICAgICAgICAgICB9XSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ2hlYWRlckN0cmwnLCBbJyRhbmNob3JTY3JvbGwnLCAnJGxvY2F0aW9uJywgJyRzY29wZScsXG4gICAgICAgICAgICAgZnVuY3Rpb24gKCRhbmNob3JTY3JvbGwsICRsb2NhdGlvbiwgJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZ290b0FuY2hvciA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIG5ld0hhc2ggPSAnYW5jaG9yJyArIHg7XG4gICAgICAgICAgICAgICAgIGlmICgkbG9jYXRpb24uaGFzaCgpICE9PSBuZXdIYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSAkbG9jYXRpb24uaGFzaCB0byBgbmV3SGFzaGAgYW5kXG4gICAgICAgICAgICAgICAgICAgLy8gJGFuY2hvclNjcm9sbCB3aWxsIGF1dG9tYXRpY2FsbHkgc2Nyb2xsIHRvIGl0XG4gICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLmhhc2goJ2FuY2hvcicgKyB4KTtcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAvLyBjYWxsICRhbmNob3JTY3JvbGwoKSBleHBsaWNpdGx5LFxuICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlICRsb2NhdGlvbi5oYXNoIGhhc24ndCBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgXSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgIGJvZHkge1xuICAgICAgICAgICBwYWRkaW5nLXRvcDogNTBweDtcbiAgICAgICAgIH1cblxuICAgICAgICAgLmFuY2hvciB7XG4gICAgICAgICAgIGJvcmRlcjogMnB4IGRhc2hlZCBEYXJrT3JjaGlkO1xuICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDEwcHggMjAwcHggMTBweDtcbiAgICAgICAgIH1cblxuICAgICAgICAgLmZpeGVkLWhlYWRlciB7XG4gICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xuICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgIHRvcDogMDsgbGVmdDogMDsgcmlnaHQ6IDA7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5maXhlZC1oZWFkZXIgPiBhIHtcbiAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICBtYXJnaW46IDVweCAxNXB4O1xuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHdpbmRvdywgJGxvY2F0aW9uLCAkcm9vdFNjb3BlKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gJHdpbmRvdy5kb2N1bWVudDtcblxuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgZmlyc3QgYW5jaG9yIGZyb20gYSBOb2RlTGlzdFxuICAgIC8vICh1c2luZyBgQXJyYXkjc29tZSgpYCBpbnN0ZWFkIG9mIGBhbmd1bGFyI2ZvckVhY2goKWAgc2luY2UgaXQncyBtb3JlIHBlcmZvcm1hbnRcbiAgICAvLyAgYW5kIHdvcmtpbmcgaW4gYWxsIHN1cHBvcnRlZCBicm93c2Vycy4pXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3RBbmNob3IobGlzdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgICBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGxpc3QsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKG5vZGVOYW1lXyhlbGVtZW50KSA9PT0gJ2EnKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZWxlbWVudDtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFlPZmZzZXQoKSB7XG5cbiAgICAgIHZhciBvZmZzZXQgPSBzY3JvbGwueU9mZnNldDtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob2Zmc2V0KSkge1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50KG9mZnNldCkpIHtcbiAgICAgICAgdmFyIGVsZW0gPSBvZmZzZXRbMF07XG4gICAgICAgIHZhciBzdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgICAgaWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNOdW1iZXIob2Zmc2V0KSkge1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvKGVsZW0pIHtcbiAgICAgIGlmIChlbGVtKSB7XG4gICAgICAgIGVsZW0uc2Nyb2xsSW50b1ZpZXcoKTtcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gZ2V0WU9mZnNldCgpO1xuXG4gICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICAvLyBgb2Zmc2V0YCBpcyB0aGUgbnVtYmVyIG9mIHBpeGVscyB3ZSBzaG91bGQgc2Nyb2xsIFVQIGluIG9yZGVyIHRvIGFsaWduIGBlbGVtYCBwcm9wZXJseS5cbiAgICAgICAgICAvLyBUaGlzIGlzIHRydWUgT05MWSBpZiB0aGUgY2FsbCB0byBgZWxlbS5zY3JvbGxJbnRvVmlldygpYCBpbml0aWFsbHkgYWxpZ25zIGBlbGVtYCBhdCB0aGVcbiAgICAgICAgICAvLyB0b3Agb2YgdGhlIHZpZXdwb3J0LlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSUYgdGhlIG51bWJlciBvZiBwaXhlbHMgZnJvbSB0aGUgdG9wIG9mIGBlbGVtYCB0byB0aGUgZW5kIG9mIHRoZSBwYWdlJ3MgY29udGVudCBpcyBsZXNzXG4gICAgICAgICAgLy8gdGhhbiB0aGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydCwgdGhlbiBgZWxlbS5zY3JvbGxJbnRvVmlldygpYCB3aWxsIGFsaWduIHRoZSBgZWxlbWAgc29tZVxuICAgICAgICAgIC8vIHdheSBkb3duIHRoZSBwYWdlLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVGhpcyBpcyBvZnRlbiB0aGUgY2FzZSBmb3IgZWxlbWVudHMgbmVhciB0aGUgYm90dG9tIG9mIHRoZSBwYWdlLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSW4gc3VjaCBjYXNlcyB3ZSBkbyBub3QgbmVlZCB0byBzY3JvbGwgdGhlIHdob2xlIGBvZmZzZXRgIHVwLCBqdXN0IHRoZSBkaWZmZXJlbmNlIGJldHdlZW5cbiAgICAgICAgICAvLyB0aGUgdG9wIG9mIHRoZSBlbGVtZW50IGFuZCB0aGUgb2Zmc2V0LCB3aGljaCBpcyBlbm91Z2ggdG8gYWxpZ24gdGhlIHRvcCBvZiBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgLy8gZGVzaXJlZCBwb3NpdGlvbi5cbiAgICAgICAgICB2YXIgZWxlbVRvcCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICAgICR3aW5kb3cuc2Nyb2xsQnkoMCwgZWxlbVRvcCAtIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsKCkge1xuICAgICAgdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpLCBlbG07XG5cbiAgICAgIC8vIGVtcHR5IGhhc2gsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBpZiAoIWhhc2gpIHNjcm9sbFRvKG51bGwpO1xuXG4gICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWRcbiAgICAgIGVsc2UgaWYgKChlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKSkpIHNjcm9sbFRvKGVsbSk7XG5cbiAgICAgIC8vIGZpcnN0IGFuY2hvciB3aXRoIGdpdmVuIG5hbWUgOi1EXG4gICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgc2Nyb2xsVG8oZWxtKTtcblxuICAgICAgLy8gbm8gZWxlbWVudCBhbmQgaGFzaCA9PSAndG9wJywgc2Nyb2xsIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2VcbiAgICAgIGVsc2UgaWYgKGhhc2ggPT09ICd0b3AnKSBzY3JvbGxUbyhudWxsKTtcbiAgICB9XG5cbiAgICAvLyBkb2VzIG5vdCBzY3JvbGwgd2hlbiB1c2VyIGNsaWNrcyBvbiBhbmNob3IgbGluayB0aGF0IGlzIGN1cnJlbnRseSBvblxuICAgIC8vIChubyB1cmwgY2hhbmdlLCBubyAkbG9jYXRpb24uaGFzaCgpIGNoYW5nZSksIGJyb3dzZXIgbmF0aXZlIGRvZXMgc2Nyb2xsXG4gICAgaWYgKGF1dG9TY3JvbGxpbmdFbmFibGVkKSB7XG4gICAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2goKSB7cmV0dXJuICRsb2NhdGlvbi5oYXNoKCk7fSxcbiAgICAgICAgZnVuY3Rpb24gYXV0b1Njcm9sbFdhdGNoQWN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgLy8gc2tpcCB0aGUgaW5pdGlhbCBzY3JvbGwgaWYgJGxvY2F0aW9uLmhhc2ggaXMgZW1wdHlcbiAgICAgICAgICBpZiAobmV3VmFsID09PSBvbGRWYWwgJiYgbmV3VmFsID09PSAnJykgcmV0dXJuO1xuXG4gICAgICAgICAganFMaXRlRG9jdW1lbnRMb2FkZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoc2Nyb2xsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjcm9sbDtcbiAgfV07XG59XG5cbnZhciAkYW5pbWF0ZU1pbkVyciA9IG1pbkVycignJGFuaW1hdGUnKTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgJGFuaW1hdGUgdGhhdCBkb2Vzbid0IHBlcmZvcm0gYW55IGFuaW1hdGlvbnMsIGluc3RlYWQganVzdFxuICogc3luY2hyb25vdXNseSBwZXJmb3JtcyBET01cbiAqIHVwZGF0ZXMgYW5kIGNhbGxzIGRvbmUoKSBjYWxsYmFja3MuXG4gKlxuICogSW4gb3JkZXIgdG8gZW5hYmxlIGFuaW1hdGlvbnMgdGhlIG5nQW5pbWF0ZSBtb2R1bGUgaGFzIHRvIGJlIGxvYWRlZC5cbiAqXG4gKiBUbyBzZWUgdGhlIGZ1bmN0aW9uYWwgaW1wbGVtZW50YXRpb24gY2hlY2sgb3V0IHNyYy9uZ0FuaW1hdGUvYW5pbWF0ZS5qc1xuICovXG52YXIgJEFuaW1hdGVQcm92aWRlciA9IFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkge1xuXG5cbiAgdGhpcy4kJHNlbGVjdG9ycyA9IHt9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXJzIGEgbmV3IGluamVjdGFibGUgYW5pbWF0aW9uIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIHByb2R1Y2VzIHRoZVxuICAgKiBhbmltYXRpb24gb2JqZWN0IHdoaWNoIGNvbnRhaW5zIGNhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudCB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlXG4gICAqIGFuaW1hdGVkLlxuICAgKlxuICAgKiAgICogYGV2ZW50Rm5gOiBgZnVuY3Rpb24oRWxlbWVudCwgZG9uZUZ1bmN0aW9uKWAgVGhlIGVsZW1lbnQgdG8gYW5pbWF0ZSwgdGhlIGBkb25lRnVuY3Rpb25gXG4gICAqICAgbXVzdCBiZSBjYWxsZWQgb25jZSB0aGUgZWxlbWVudCBhbmltYXRpb24gaXMgY29tcGxldGUuIElmIGEgZnVuY3Rpb24gaXMgcmV0dXJuZWQgdGhlbiB0aGVcbiAgICogICBhbmltYXRpb24gc2VydmljZSB3aWxsIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uIHdoZW5ldmVyIGEgY2FuY2VsIGV2ZW50IGlzXG4gICAqICAgdHJpZ2dlcmVkLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHJldHVybiB7XG4gICAgICogICAgIGV2ZW50Rm4gOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7XG4gICAgICogICAgICAgLy9jb2RlIHRvIHJ1biB0aGUgYW5pbWF0aW9uXG4gICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gY2FuY2VsbGF0aW9uRnVuY3Rpb24oKSB7XG4gICAgICogICAgICAgICAvL2NvZGUgdG8gY2FuY2VsIHRoZSBhbmltYXRpb25cbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH1cbiAgICAgKiAgIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgVGhlIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHJldHVybiB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LlxuICAgKi9cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGZhY3RvcnkpIHtcbiAgICB2YXIga2V5ID0gbmFtZSArICctYW5pbWF0aW9uJztcbiAgICBpZiAobmFtZSAmJiBuYW1lLmNoYXJBdCgwKSAhPSAnLicpIHRocm93ICRhbmltYXRlTWluRXJyKCdub3Rjc2VsJyxcbiAgICAgICAgXCJFeHBlY3RpbmcgY2xhc3Mgc2VsZWN0b3Igc3RhcnRpbmcgd2l0aCAnLicgZ290ICd7MH0nLlwiLCBuYW1lKTtcbiAgICB0aGlzLiQkc2VsZWN0b3JzW25hbWUuc3Vic3RyKDEpXSA9IGtleTtcbiAgICAkcHJvdmlkZS5mYWN0b3J5KGtleSwgZmFjdG9yeSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNjbGFzc05hbWVGaWx0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgYW5kL29yIHJldHVybnMgdGhlIENTUyBjbGFzcyByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyBjaGVja2VkIHdoZW4gcGVyZm9ybWluZ1xuICAgKiBhbiBhbmltYXRpb24uIFVwb24gYm9vdHN0cmFwIHRoZSBjbGFzc05hbWVGaWx0ZXIgdmFsdWUgaXMgbm90IHNldCBhdCBhbGwgYW5kIHdpbGxcbiAgICogdGhlcmVmb3JlIGVuYWJsZSAkYW5pbWF0ZSB0byBhdHRlbXB0IHRvIHBlcmZvcm0gYW4gYW5pbWF0aW9uIG9uIGFueSBlbGVtZW50LlxuICAgKiBXaGVuIHNldHRpbmcgdGhlIGNsYXNzTmFtZUZpbHRlciB2YWx1ZSwgYW5pbWF0aW9ucyB3aWxsIG9ubHkgYmUgcGVyZm9ybWVkIG9uIGVsZW1lbnRzXG4gICAqIHRoYXQgc3VjY2Vzc2Z1bGx5IG1hdGNoIHRoZSBmaWx0ZXIgZXhwcmVzc2lvbi4gVGhpcyBpbiB0dXJuIGNhbiBib29zdCBwZXJmb3JtYW5jZVxuICAgKiBmb3IgbG93LXBvd2VyZWQgZGV2aWNlcyBhcyB3ZWxsIGFzIGFwcGxpY2F0aW9ucyBjb250YWluaW5nIGEgbG90IG9mIHN0cnVjdHVyYWwgb3BlcmF0aW9ucy5cbiAgICogQHBhcmFtIHtSZWdFeHA9fSBleHByZXNzaW9uIFRoZSBjbGFzc05hbWUgZXhwcmVzc2lvbiB3aGljaCB3aWxsIGJlIGNoZWNrZWQgYWdhaW5zdCBhbGwgYW5pbWF0aW9uc1xuICAgKiBAcmV0dXJuIHtSZWdFeHB9IFRoZSBjdXJyZW50IENTUyBjbGFzc05hbWUgZXhwcmVzc2lvbiB2YWx1ZS4gSWYgbnVsbCB0aGVuIHRoZXJlIGlzIG5vIGV4cHJlc3Npb24gdmFsdWVcbiAgICovXG4gIHRoaXMuY2xhc3NOYW1lRmlsdGVyID0gZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLiQkY2xhc3NOYW1lRmlsdGVyID0gKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBSZWdFeHApID8gZXhwcmVzc2lvbiA6IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiQkY2xhc3NOYW1lRmlsdGVyO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJCRxJywgJyQkYXN5bmNDYWxsYmFjaycsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJCRxLCAkJGFzeW5jQ2FsbGJhY2ssICRyb290U2NvcGUpIHtcblxuICAgIHZhciBjdXJyZW50RGVmZXI7XG5cbiAgICBmdW5jdGlvbiBydW5BbmltYXRpb25Qb3N0RGlnZXN0KGZuKSB7XG4gICAgICB2YXIgY2FuY2VsRm4sIGRlZmVyID0gJCRxLmRlZmVyKCk7XG4gICAgICBkZWZlci5wcm9taXNlLiQkY2FuY2VsRm4gPSBmdW5jdGlvbiBuZ0FuaW1hdGVNYXliZUNhbmNlbCgpIHtcbiAgICAgICAgY2FuY2VsRm4gJiYgY2FuY2VsRm4oKTtcbiAgICAgIH07XG5cbiAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uIG5nQW5pbWF0ZVBvc3REaWdlc3QoKSB7XG4gICAgICAgIGNhbmNlbEZuID0gZm4oZnVuY3Rpb24gbmdBbmltYXRlTm90aWZ5Q29tcGxldGUoKSB7XG4gICAgICAgICAgZGVmZXIucmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlRWxlbWVudENsYXNzZXMoZWxlbWVudCwgY2xhc3Nlcykge1xuICAgICAgdmFyIHRvQWRkID0gW10sIHRvUmVtb3ZlID0gW107XG5cbiAgICAgIHZhciBoYXNDbGFzc2VzID0gY3JlYXRlTWFwKCk7XG4gICAgICBmb3JFYWNoKChlbGVtZW50LmF0dHIoJ2NsYXNzJykgfHwgJycpLnNwbGl0KC9cXHMrLyksIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICBoYXNDbGFzc2VzW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgICAgfSk7XG5cbiAgICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oc3RhdHVzLCBjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIGhhc0NsYXNzID0gaGFzQ2xhc3Nlc1tjbGFzc05hbWVdO1xuXG4gICAgICAgIC8vIElmIHRoZSBtb3N0IHJlY2VudCBjbGFzcyBtYW5pcHVsYXRpb24gKHZpYSAkYW5pbWF0ZSkgd2FzIHRvIHJlbW92ZSB0aGUgY2xhc3MsIGFuZCB0aGVcbiAgICAgICAgLy8gZWxlbWVudCBjdXJyZW50bHkgaGFzIHRoZSBjbGFzcywgdGhlIGNsYXNzIGlzIHNjaGVkdWxlZCBmb3IgcmVtb3ZhbC4gT3RoZXJ3aXNlLCBpZlxuICAgICAgICAvLyB0aGUgbW9zdCByZWNlbnQgY2xhc3MgbWFuaXB1bGF0aW9uICh2aWEgJGFuaW1hdGUpIHdhcyB0byBhZGQgdGhlIGNsYXNzLCBhbmQgdGhlXG4gICAgICAgIC8vIGVsZW1lbnQgZG9lcyBub3QgY3VycmVudGx5IGhhdmUgdGhlIGNsYXNzLCB0aGUgY2xhc3MgaXMgc2NoZWR1bGVkIHRvIGJlIGFkZGVkLlxuICAgICAgICBpZiAoc3RhdHVzID09PSBmYWxzZSAmJiBoYXNDbGFzcykge1xuICAgICAgICAgIHRvUmVtb3ZlLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IHRydWUgJiYgIWhhc0NsYXNzKSB7XG4gICAgICAgICAgdG9BZGQucHVzaChjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuICh0b0FkZC5sZW5ndGggKyB0b1JlbW92ZS5sZW5ndGgpID4gMCAmJlxuICAgICAgICBbdG9BZGQubGVuZ3RoID8gdG9BZGQgOiBudWxsLCB0b1JlbW92ZS5sZW5ndGggPyB0b1JlbW92ZSA6IG51bGxdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhY2hlZENsYXNzTWFuaXB1bGF0aW9uKGNhY2hlLCBjbGFzc2VzLCBvcCkge1xuICAgICAgZm9yICh2YXIgaT0wLCBpaSA9IGNsYXNzZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gY2xhc3Nlc1tpXTtcbiAgICAgICAgY2FjaGVbY2xhc3NOYW1lXSA9IG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzeW5jUHJvbWlzZSgpIHtcbiAgICAgIC8vIG9ubHkgc2VydmUgb25lIGluc3RhbmNlIG9mIGEgcHJvbWlzZSBpbiBvcmRlciB0byBzYXZlIENQVSBjeWNsZXNcbiAgICAgIGlmICghY3VycmVudERlZmVyKSB7XG4gICAgICAgIGN1cnJlbnREZWZlciA9ICQkcS5kZWZlcigpO1xuICAgICAgICAkJGFzeW5jQ2FsbGJhY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY3VycmVudERlZmVyLnJlc29sdmUoKTtcbiAgICAgICAgICBjdXJyZW50RGVmZXIgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50RGVmZXIucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVN0eWxlcyhlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc3R5bGVzID0gZXh0ZW5kKG9wdGlvbnMuZnJvbSB8fCB7fSwgb3B0aW9ucy50byB8fCB7fSk7XG4gICAgICAgIGVsZW1lbnQuY3NzKHN0eWxlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRhbmltYXRlXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSAkYW5pbWF0ZSBzZXJ2aWNlIHByb3ZpZGVzIHJ1ZGltZW50YXJ5IERPTSBtYW5pcHVsYXRpb24gZnVuY3Rpb25zIHRvXG4gICAgICogaW5zZXJ0LCByZW1vdmUgYW5kIG1vdmUgZWxlbWVudHMgd2l0aGluIHRoZSBET00sIGFzIHdlbGwgYXMgYWRkaW5nIGFuZCByZW1vdmluZyBjbGFzc2VzLlxuICAgICAqIFRoaXMgc2VydmljZSBpcyB0aGUgY29yZSBzZXJ2aWNlIHVzZWQgYnkgdGhlIG5nQW5pbWF0ZSAkYW5pbWF0b3Igc2VydmljZSB3aGljaCBwcm92aWRlc1xuICAgICAqIGhpZ2gtbGV2ZWwgYW5pbWF0aW9uIGhvb2tzIGZvciBDU1MgYW5kIEphdmFTY3JpcHQuXG4gICAgICpcbiAgICAgKiAkYW5pbWF0ZSBpcyBhdmFpbGFibGUgaW4gdGhlIEFuZ3VsYXJKUyBjb3JlLCBob3dldmVyLCB0aGUgbmdBbmltYXRlIG1vZHVsZSBtdXN0IGJlIGluY2x1ZGVkXG4gICAgICogdG8gZW5hYmxlIGZ1bGwgb3V0IGFuaW1hdGlvbiBzdXBwb3J0LiBPdGhlcndpc2UsICRhbmltYXRlIHdpbGwgb25seSBwZXJmb3JtIHNpbXBsZSBET01cbiAgICAgKiBtYW5pcHVsYXRpb24gb3BlcmF0aW9ucy5cbiAgICAgKlxuICAgICAqIFRvIGxlYXJuIG1vcmUgYWJvdXQgZW5hYmxpbmcgYW5pbWF0aW9uIHN1cHBvcnQsIGNsaWNrIGhlcmUgdG8gdmlzaXQgdGhlIHtAbGluayBuZ0FuaW1hdGVcbiAgICAgKiBuZ0FuaW1hdGUgbW9kdWxlIHBhZ2V9IGFzIHdlbGwgYXMgdGhlIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGUgbmdBbmltYXRlICRhbmltYXRlIHNlcnZpY2VcbiAgICAgKiBwYWdlfS5cbiAgICAgKi9cbiAgICByZXR1cm4ge1xuICAgICAgYW5pbWF0ZTogZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgdG8pIHtcbiAgICAgICAgYXBwbHlTdHlsZXMoZWxlbWVudCwgeyBmcm9tOiBmcm9tLCB0bzogdG8gfSk7XG4gICAgICAgIHJldHVybiBhc3luY1Byb21pc2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2VudGVyXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgdGhlIGVsZW1lbnQgaW50byB0aGUgRE9NIGVpdGhlciBhZnRlciB0aGUgYGFmdGVyYCBlbGVtZW50IG9yXG4gICAgICAgKiBhcyB0aGUgZmlyc3QgY2hpbGQgd2l0aGluIHRoZSBgcGFyZW50YCBlbGVtZW50LiBXaGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgYSBwcm9taXNlXG4gICAgICAgKiBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYXQgYSBsYXRlciB0aW1lLlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQgYXNcbiAgICAgICAqICAgYSBjaGlsZCAoaWYgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnRcbiAgICAgICAqICAgYWZ0ZXIgaXRzZWxmXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgYXBwbHlTdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGFmdGVyID8gYWZ0ZXIuYWZ0ZXIoZWxlbWVudClcbiAgICAgICAgICAgICAgOiBwYXJlbnQucHJlcGVuZChlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGFzeW5jUHJvbWlzZSgpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjbGVhdmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyB0aGUgZWxlbWVudCBmcm9tIHRoZSBET00uIFdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBhIHByb21pc2VcbiAgICAgICAqIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIERPTVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICByZXR1cm4gYXN5bmNQcm9taXNlKCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNtb3ZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIE1vdmVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoaW4gdGhlIERPTSB0byBiZSBwbGFjZWRcbiAgICAgICAqIGVpdGhlciBhZnRlciB0aGUgYGFmdGVyYCBlbGVtZW50IG9yIGluc2lkZSBvZiB0aGUgYHBhcmVudGAgZWxlbWVudC4gV2hlbiB0aGUgZnVuY3Rpb25cbiAgICAgICAqIGlzIGNhbGxlZCBhIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGF0IGEgbGF0ZXIgdGltZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBtb3ZlZCBhcm91bmQgd2l0aGluIHRoZVxuICAgICAgICogICBET01cbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50IHRoZSBwYXJlbnQgZWxlbWVudCB3aGVyZSB0aGUgZWxlbWVudCB3aWxsIGJlXG4gICAgICAgKiAgIGluc2VydGVkIGludG8gKGlmIHRoZSBhZnRlciBlbGVtZW50IGlzIG5vdCBwcmVzZW50KVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IHdoZXJlIHRoZSBlbGVtZW50IHdpbGwgYmVcbiAgICAgICAqICAgcG9zaXRpb25lZCBuZXh0IHRvXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gRG8gbm90IHJlbW92ZSBlbGVtZW50IGJlZm9yZSBpbnNlcnQuIFJlbW92aW5nIHdpbGwgY2F1c2UgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlXG4gICAgICAgIC8vIGVsZW1lbnQgdG8gYmUgZHJvcHBlZC4gSW5zZXJ0IHdpbGwgaW1wbGljaXRseSBkbyB0aGUgcmVtb3ZlLlxuICAgICAgICByZXR1cm4gdGhpcy5lbnRlcihlbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2FkZENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEFkZHMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSBDU1MgY2xhc3MgdmFsdWUgdG8gdGhlIHByb3ZpZGVkIGVsZW1lbnQuXG4gICAgICAgKiBXaGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgYSBwcm9taXNlIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBoYXZlIHRoZSBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAqICAgYWRkZWQgdG8gaXRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyB3aGljaCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lLCBbXSwgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAkJGFkZENsYXNzSW1tZWRpYXRlbHk6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykge1xuICAgICAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuICAgICAgICBjbGFzc05hbWUgPSAhaXNTdHJpbmcoY2xhc3NOYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaXNBcnJheShjbGFzc05hbWUpID8gY2xhc3NOYW1lLmpvaW4oJyAnKSA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBjbGFzc05hbWU7XG4gICAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIGpxTGl0ZUFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcHBseVN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGFzeW5jUHJvbWlzZSgpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjcmVtb3ZlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyB0aGUgcHJvdmlkZWQgY2xhc3NOYW1lIENTUyBjbGFzcyB2YWx1ZSBmcm9tIHRoZSBwcm92aWRlZCBlbGVtZW50LlxuICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYXQgYSBsYXRlciB0aW1lLlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgaGF2ZSB0aGUgY2xhc3NOYW1lIHZhbHVlXG4gICAgICAgKiAgIHJlbW92ZWQgZnJvbSBpdFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50XG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2xhc3MoZWxlbWVudCwgW10sIGNsYXNzTmFtZSwgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAkJHJlbW92ZUNsYXNzSW1tZWRpYXRlbHk6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykge1xuICAgICAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuICAgICAgICBjbGFzc05hbWUgPSAhaXNTdHJpbmcoY2xhc3NOYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaXNBcnJheShjbGFzc05hbWUpID8gY2xhc3NOYW1lLmpvaW4oJyAnKSA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBjbGFzc05hbWU7XG4gICAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIGpxTGl0ZVJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcHBseVN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGFzeW5jUHJvbWlzZSgpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjc2V0Q2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQWRkcyBhbmQvb3IgcmVtb3ZlcyB0aGUgZ2l2ZW4gQ1NTIGNsYXNzZXMgdG8gYW5kIGZyb20gdGhlIGVsZW1lbnQuXG4gICAgICAgKiBXaGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgYSBwcm9taXNlIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBoYXZlIGl0cyBDU1MgY2xhc3NlcyBjaGFuZ2VkXG4gICAgICAgKiAgIHJlbW92ZWQgZnJvbSBpdFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGFkZCB0aGUgQ1NTIGNsYXNzZXMgd2hpY2ggd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJlbW92ZSB0aGUgQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50XG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGQsIHJlbW92ZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBTVE9SQUdFX0tFWSA9ICckJGFuaW1hdGVDbGFzc2VzJztcbiAgICAgICAgdmFyIGNyZWF0ZWRDYWNoZSA9IGZhbHNlO1xuICAgICAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuXG4gICAgICAgIHZhciBjYWNoZSA9IGVsZW1lbnQuZGF0YShTVE9SQUdFX0tFWSk7XG4gICAgICAgIGlmICghY2FjaGUpIHtcbiAgICAgICAgICBjYWNoZSA9IHtcbiAgICAgICAgICAgIGNsYXNzZXM6IHt9LFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH07XG4gICAgICAgICAgY3JlYXRlZENhY2hlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zICYmIGNhY2hlLm9wdGlvbnMpIHtcbiAgICAgICAgICBjYWNoZS5vcHRpb25zID0gYW5ndWxhci5leHRlbmQoY2FjaGUub3B0aW9ucyB8fCB7fSwgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2xhc3NlcyA9IGNhY2hlLmNsYXNzZXM7XG5cbiAgICAgICAgYWRkID0gaXNBcnJheShhZGQpID8gYWRkIDogYWRkLnNwbGl0KCcgJyk7XG4gICAgICAgIHJlbW92ZSA9IGlzQXJyYXkocmVtb3ZlKSA/IHJlbW92ZSA6IHJlbW92ZS5zcGxpdCgnICcpO1xuICAgICAgICBjYWNoZWRDbGFzc01hbmlwdWxhdGlvbihjbGFzc2VzLCBhZGQsIHRydWUpO1xuICAgICAgICBjYWNoZWRDbGFzc01hbmlwdWxhdGlvbihjbGFzc2VzLCByZW1vdmUsIGZhbHNlKTtcblxuICAgICAgICBpZiAoY3JlYXRlZENhY2hlKSB7XG4gICAgICAgICAgY2FjaGUucHJvbWlzZSA9IHJ1bkFuaW1hdGlvblBvc3REaWdlc3QoZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gZWxlbWVudC5kYXRhKFNUT1JBR0VfS0VZKTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YShTVE9SQUdFX0tFWSk7XG5cbiAgICAgICAgICAgIC8vIGluIHRoZSBldmVudCB0aGF0IHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgYmVmb3JlIHBvc3REaWdlc3RcbiAgICAgICAgICAgIC8vIGlzIHJ1biB0aGVuIHRoZSBjYWNoZSB3aWxsIGJlIHVuZGVmaW5lZCBhbmQgdGhlcmUgd2lsbCBiZVxuICAgICAgICAgICAgLy8gbm8gbmVlZCBhbnltb3JlIHRvIGFkZCBvciByZW1vdmUgYW5kIG9mIHRoZSBlbGVtZW50IGNsYXNzZXNcbiAgICAgICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IHJlc29sdmVFbGVtZW50Q2xhc3NlcyhlbGVtZW50LCBjYWNoZS5jbGFzc2VzKTtcbiAgICAgICAgICAgICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgICAgICAgICAgICBzZWxmLiQkc2V0Q2xhc3NJbW1lZGlhdGVseShlbGVtZW50LCBjbGFzc2VzWzBdLCBjbGFzc2VzWzFdLCBjYWNoZS5vcHRpb25zKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWxlbWVudC5kYXRhKFNUT1JBR0VfS0VZLCBjYWNoZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FjaGUucHJvbWlzZTtcbiAgICAgIH0sXG5cbiAgICAgICQkc2V0Q2xhc3NJbW1lZGlhdGVseTogZnVuY3Rpb24oZWxlbWVudCwgYWRkLCByZW1vdmUsIG9wdGlvbnMpIHtcbiAgICAgICAgYWRkICYmIHRoaXMuJCRhZGRDbGFzc0ltbWVkaWF0ZWx5KGVsZW1lbnQsIGFkZCk7XG4gICAgICAgIHJlbW92ZSAmJiB0aGlzLiQkcmVtb3ZlQ2xhc3NJbW1lZGlhdGVseShlbGVtZW50LCByZW1vdmUpO1xuICAgICAgICBhcHBseVN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGFzeW5jUHJvbWlzZSgpO1xuICAgICAgfSxcblxuICAgICAgZW5hYmxlZDogbm9vcCxcbiAgICAgIGNhbmNlbDogbm9vcFxuICAgIH07XG4gIH1dO1xufV07XG5cbmZ1bmN0aW9uICQkQXN5bmNDYWxsYmFja1Byb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyQkckFGJywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJCRyQUYsICR0aW1lb3V0KSB7XG4gICAgcmV0dXJuICQkckFGLnN1cHBvcnRlZFxuICAgICAgPyBmdW5jdGlvbihmbikgeyByZXR1cm4gJCRyQUYoZm4pOyB9XG4gICAgICA6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHJldHVybiAkdGltZW91dChmbiwgMCwgZmFsc2UpO1xuICAgICAgfTtcbiAgfV07XG59XG5cbi8qIGdsb2JhbCBzdHJpcEhhc2g6IHRydWUgKi9cblxuLyoqXG4gKiAhIFRoaXMgaXMgYSBwcml2YXRlIHVuZG9jdW1lbnRlZCBzZXJ2aWNlICFcbiAqXG4gKiBAbmFtZSAkYnJvd3NlclxuICogQHJlcXVpcmVzICRsb2dcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBvYmplY3QgaGFzIHR3byBnb2FsczpcbiAqXG4gKiAtIGhpZGUgYWxsIHRoZSBnbG9iYWwgc3RhdGUgaW4gdGhlIGJyb3dzZXIgY2F1c2VkIGJ5IHRoZSB3aW5kb3cgb2JqZWN0XG4gKiAtIGFic3RyYWN0IGF3YXkgYWxsIHRoZSBicm93c2VyIHNwZWNpZmljIGZlYXR1cmVzIGFuZCBpbmNvbnNpc3RlbmNpZXNcbiAqXG4gKiBGb3IgdGVzdHMgd2UgcHJvdmlkZSB7QGxpbmsgbmdNb2NrLiRicm93c2VyIG1vY2sgaW1wbGVtZW50YXRpb259IG9mIHRoZSBgJGJyb3dzZXJgXG4gKiBzZXJ2aWNlLCB3aGljaCBjYW4gYmUgdXNlZCBmb3IgY29udmVuaWVudCB0ZXN0aW5nIG9mIHRoZSBhcHBsaWNhdGlvbiB3aXRob3V0IHRoZSBpbnRlcmFjdGlvbiB3aXRoXG4gKiB0aGUgcmVhbCBicm93c2VyIGFwaXMuXG4gKi9cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHdpbmRvdyBUaGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QuXG4gKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgalF1ZXJ5IHdyYXBwZWQgZG9jdW1lbnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IFhIUiBYTUxIdHRwUmVxdWVzdCBjb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSB7b2JqZWN0fSAkbG9nIGNvbnNvbGUubG9nIG9yIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGludGVyZmFjZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSAkc25pZmZlciAkc25pZmZlciBzZXJ2aWNlXG4gKi9cbmZ1bmN0aW9uIEJyb3dzZXIod2luZG93LCBkb2N1bWVudCwgJGxvZywgJHNuaWZmZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgcmF3RG9jdW1lbnQgPSBkb2N1bWVudFswXSxcbiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5LFxuICAgICAgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0LFxuICAgICAgY2xlYXJUaW1lb3V0ID0gd2luZG93LmNsZWFyVGltZW91dCxcbiAgICAgIHBlbmRpbmdEZWZlcklkcyA9IHt9O1xuXG4gIHNlbGYuaXNNb2NrID0gZmFsc2U7XG5cbiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gMDtcbiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcyA9IFtdO1xuXG4gIC8vIFRPRE8odm9qdGEpOiByZW1vdmUgdGhpcyB0ZW1wb3JhcnkgYXBpXG4gIHNlbGYuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCA9IGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0O1xuICBzZWxmLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSBmdW5jdGlvbigpIHsgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsgfTtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24oc3VwcG9ydHMgY3VycnlpbmcpIGFuZCBkZWNyZW1lbnRzIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYFxuICAgKiBjb3VudGVyLiBJZiB0aGUgY291bnRlciByZWFjaGVzIDAsIGFsbCB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2AgYXJlIGV4ZWN1dGVkLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgc2xpY2VBcmdzKGFyZ3VtZW50cywgMSkpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudC0tO1xuICAgICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7XG4gICAgICAgIHdoaWxlIChvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIE5vdGU6IHRoaXMgbWV0aG9kIGlzIHVzZWQgb25seSBieSBzY2VuYXJpbyBydW5uZXJcbiAgICogVE9ETyh2b2p0YSk6IHByZWZpeCB0aGlzIG1ldGhvZCB3aXRoICQkID9cbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gbm8gb3V0c3RhbmRpbmcgcmVxdWVzdFxuICAgKi9cbiAgc2VsZi5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAvLyBmb3JjZSBicm93c2VyIHRvIGV4ZWN1dGUgYWxsIHBvbGxGbnMgLSB0aGlzIGlzIG5lZWRlZCBzbyB0aGF0IGNvb2tpZXMgYW5kIG90aGVyIHBvbGxlcnMgZmlyZVxuICAgIC8vIGF0IHNvbWUgZGV0ZXJtaW5pc3RpYyB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIHRlc3QgcnVubmVyJ3MgYWN0aW9ucy4gTGVhdmluZyB0aGluZ3MgdXAgdG8gdGhlXG4gICAgLy8gcmVndWxhciBwb2xsZXIgd291bGQgcmVzdWx0IGluIGZsYWt5IHRlc3RzLlxuICAgIGZvckVhY2gocG9sbEZucywgZnVuY3Rpb24ocG9sbEZuKSB7IHBvbGxGbigpOyB9KTtcblxuICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBQb2xsIFdhdGNoZXIgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHZhciBwb2xsRm5zID0gW10sXG4gICAgICBwb2xsVGltZW91dDtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjYWRkUG9sbEZuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gUG9sbCBmdW5jdGlvbiB0byBhZGRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFkZHMgYSBmdW5jdGlvbiB0byB0aGUgbGlzdCBvZiBmdW5jdGlvbnMgdGhhdCBwb2xsZXIgcGVyaW9kaWNhbGx5IGV4ZWN1dGVzLFxuICAgKiBhbmQgc3RhcnRzIHBvbGxpbmcgaWYgbm90IHN0YXJ0ZWQgeWV0LlxuICAgKlxuICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gdGhlIGFkZGVkIGZ1bmN0aW9uXG4gICAqL1xuICBzZWxmLmFkZFBvbGxGbiA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHBvbGxUaW1lb3V0KSkgc3RhcnRQb2xsZXIoMTAwLCBzZXRUaW1lb3V0KTtcbiAgICBwb2xsRm5zLnB1c2goZm4pO1xuICAgIHJldHVybiBmbjtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsIEhvdyBvZnRlbiBzaG91bGQgYnJvd3NlciBjYWxsIHBvbGwgZnVuY3Rpb25zIChtcylcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBzZXRUaW1lb3V0IFJlZmVyZW5jZSB0byBhIHJlYWwgb3IgZmFrZSBgc2V0VGltZW91dGAgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb25maWd1cmVzIHRoZSBwb2xsZXIgdG8gcnVuIGluIHRoZSBzcGVjaWZpZWQgaW50ZXJ2YWxzLCB1c2luZyB0aGUgc3BlY2lmaWVkXG4gICAqIHNldFRpbWVvdXQgZm4gYW5kIGtpY2tzIGl0IG9mZi5cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0UG9sbGVyKGludGVydmFsLCBzZXRUaW1lb3V0KSB7XG4gICAgKGZ1bmN0aW9uIGNoZWNrKCkge1xuICAgICAgZm9yRWFjaChwb2xsRm5zLCBmdW5jdGlvbihwb2xsRm4pIHsgcG9sbEZuKCk7IH0pO1xuICAgICAgcG9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGNoZWNrLCBpbnRlcnZhbCk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFVSTCBBUElcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICB2YXIgY2FjaGVkU3RhdGUsIGxhc3RIaXN0b3J5U3RhdGUsXG4gICAgICBsYXN0QnJvd3NlclVybCA9IGxvY2F0aW9uLmhyZWYsXG4gICAgICBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmZpbmQoJ2Jhc2UnKSxcbiAgICAgIHJlbG9hZExvY2F0aW9uID0gbnVsbDtcblxuICBjYWNoZVN0YXRlKCk7XG4gIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHRVRURVI6XG4gICAqIFdpdGhvdXQgYW55IGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgY3VycmVudCB2YWx1ZSBvZiBsb2NhdGlvbi5ocmVmLlxuICAgKlxuICAgKiBTRVRURVI6XG4gICAqIFdpdGggYXQgbGVhc3Qgb25lIGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBzZXRzIHVybCB0byBuZXcgdmFsdWUuXG4gICAqIElmIGh0bWw1IGhpc3RvcnkgYXBpIHN1cHBvcnRlZCwgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSBpcyB1c2VkLCBvdGhlcndpc2VcbiAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuXG4gICAqIFJldHVybnMgaXRzIG93biBpbnN0YW5jZSB0byBhbGxvdyBjaGFpbmluZ1xuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBjaGFuZ2UgdXJsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlcGxhY2UgU2hvdWxkIG5ldyB1cmwgcmVwbGFjZSBjdXJyZW50IGhpc3RvcnkgcmVjb3JkP1xuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlIG9iamVjdCB0byB1c2Ugd2l0aCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlXG4gICAqL1xuICBzZWxmLnVybCA9IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgYGhpc3Rvcnkuc3RhdGVgIGlzIGBudWxsYCBieSBkZWZhdWx0OyB0cmVhdGluZyBpdCBzZXBhcmF0ZWx5XG4gICAgLy8gZnJvbSBgdW5kZWZpbmVkYCB3b3VsZCBjYXVzZSBgJGJyb3dzZXIudXJsKCcvZm9vJylgIHRvIGNoYW5nZSBgaGlzdG9yeS5zdGF0ZWBcbiAgICAvLyB0byB1bmRlZmluZWQgdmlhIGBwdXNoU3RhdGVgLiBJbnN0ZWFkLCBsZXQncyBjaGFuZ2UgYHVuZGVmaW5lZGAgdG8gYG51bGxgIGhlcmUuXG4gICAgaWYgKGlzVW5kZWZpbmVkKHN0YXRlKSkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEFuZHJvaWQgQnJvd3NlciBCRkNhY2hlIGNhdXNlcyBsb2NhdGlvbiwgaGlzdG9yeSByZWZlcmVuY2UgdG8gYmVjb21lIHN0YWxlLlxuICAgIGlmIChsb2NhdGlvbiAhPT0gd2luZG93LmxvY2F0aW9uKSBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBpZiAoaGlzdG9yeSAhPT0gd2luZG93Lmhpc3RvcnkpIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICAgIC8vIHNldHRlclxuICAgIGlmICh1cmwpIHtcbiAgICAgIHZhciBzYW1lU3RhdGUgPSBsYXN0SGlzdG9yeVN0YXRlID09PSBzdGF0ZTtcblxuICAgICAgLy8gRG9uJ3QgY2hhbmdlIGFueXRoaW5nIGlmIHByZXZpb3VzIGFuZCBjdXJyZW50IFVSTHMgYW5kIHN0YXRlcyBtYXRjaC4gVGhpcyBhbHNvIHByZXZlbnRzXG4gICAgICAvLyBJRTwxMCBmcm9tIGdldHRpbmcgaW50byByZWRpcmVjdCBsb29wIHdoZW4gaW4gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwgbW9kZS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2NvbW1pdC9mZmIyNzAxXG4gICAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHVybCAmJiAoISRzbmlmZmVyLmhpc3RvcnkgfHwgc2FtZVN0YXRlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc2FtZUJhc2UgPSBsYXN0QnJvd3NlclVybCAmJiBzdHJpcEhhc2gobGFzdEJyb3dzZXJVcmwpID09PSBzdHJpcEhhc2godXJsKTtcbiAgICAgIGxhc3RCcm93c2VyVXJsID0gdXJsO1xuICAgICAgbGFzdEhpc3RvcnlTdGF0ZSA9IHN0YXRlO1xuICAgICAgLy8gRG9uJ3QgdXNlIGhpc3RvcnkgQVBJIGlmIG9ubHkgdGhlIGhhc2ggY2hhbmdlZFxuICAgICAgLy8gZHVlIHRvIGEgYnVnIGluIElFMTAvSUUxMSB3aGljaCBsZWFkc1xuICAgICAgLy8gdG8gbm90IGZpcmluZyBhIGBoYXNoY2hhbmdlYCBub3IgYHBvcHN0YXRlYCBldmVudFxuICAgICAgLy8gaW4gc29tZSBjYXNlcyAoc2VlICM5MTQzKS5cbiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5ICYmICghc2FtZUJhc2UgfHwgIXNhbWVTdGF0ZSkpIHtcbiAgICAgICAgaGlzdG9yeVtyZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oc3RhdGUsICcnLCB1cmwpO1xuICAgICAgICBjYWNoZVN0YXRlKCk7XG4gICAgICAgIC8vIERvIHRoZSBhc3NpZ25tZW50IGFnYWluIHNvIHRoYXQgdGhvc2UgdHdvIHZhcmlhYmxlcyBhcmUgcmVmZXJlbnRpYWxseSBpZGVudGljYWwuXG4gICAgICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghc2FtZUJhc2UpIHtcbiAgICAgICAgICByZWxvYWRMb2NhdGlvbiA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UodXJsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICAvLyBnZXR0ZXJcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gLSByZWxvYWRMb2NhdGlvbiBpcyBuZWVkZWQgYXMgYnJvd3NlcnMgZG9uJ3QgYWxsb3cgdG8gcmVhZCBvdXRcbiAgICAgIC8vICAgdGhlIG5ldyBsb2NhdGlvbi5ocmVmIGlmIGEgcmVsb2FkIGhhcHBlbmVkLlxuICAgICAgLy8gLSB0aGUgcmVwbGFjZW1lbnQgaXMgYSB3b3JrYXJvdW5kIGZvciBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00MDcxNzJcbiAgICAgIHJldHVybiByZWxvYWRMb2NhdGlvbiB8fCBsb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyUyNy9nLFwiJ1wiKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI3N0YXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBhIGdldHRlci5cbiAgICpcbiAgICogUmV0dXJuIGhpc3Rvcnkuc3RhdGUgb3IgbnVsbCBpZiBoaXN0b3J5LnN0YXRlIGlzIHVuZGVmaW5lZC5cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH0gc3RhdGVcbiAgICovXG4gIHNlbGYuc3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY2FjaGVkU3RhdGU7XG4gIH07XG5cbiAgdmFyIHVybENoYW5nZUxpc3RlbmVycyA9IFtdLFxuICAgICAgdXJsQ2hhbmdlSW5pdCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKCkge1xuICAgIGNhY2hlU3RhdGUoKTtcbiAgICBmaXJlVXJsQ2hhbmdlKCk7XG4gIH1cblxuICAvLyBUaGlzIHZhcmlhYmxlIHNob3VsZCBiZSB1c2VkICpvbmx5KiBpbnNpZGUgdGhlIGNhY2hlU3RhdGUgZnVuY3Rpb24uXG4gIHZhciBsYXN0Q2FjaGVkU3RhdGUgPSBudWxsO1xuICBmdW5jdGlvbiBjYWNoZVN0YXRlKCkge1xuICAgIC8vIFRoaXMgc2hvdWxkIGJlIHRoZSBvbmx5IHBsYWNlIGluICRicm93c2VyIHdoZXJlIGBoaXN0b3J5LnN0YXRlYCBpcyByZWFkLlxuICAgIGNhY2hlZFN0YXRlID0gd2luZG93Lmhpc3Rvcnkuc3RhdGU7XG4gICAgY2FjaGVkU3RhdGUgPSBpc1VuZGVmaW5lZChjYWNoZWRTdGF0ZSkgPyBudWxsIDogY2FjaGVkU3RhdGU7XG5cbiAgICAvLyBQcmV2ZW50IGNhbGxiYWNrcyBmbyBmaXJlIHR3aWNlIGlmIGJvdGggaGFzaGNoYW5nZSAmIHBvcHN0YXRlIHdlcmUgZmlyZWQuXG4gICAgaWYgKGVxdWFscyhjYWNoZWRTdGF0ZSwgbGFzdENhY2hlZFN0YXRlKSkge1xuICAgICAgY2FjaGVkU3RhdGUgPSBsYXN0Q2FjaGVkU3RhdGU7XG4gICAgfVxuICAgIGxhc3RDYWNoZWRTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlyZVVybENoYW5nZSgpIHtcbiAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHNlbGYudXJsKCkgJiYgbGFzdEhpc3RvcnlTdGF0ZSA9PT0gY2FjaGVkU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsYXN0QnJvd3NlclVybCA9IHNlbGYudXJsKCk7XG4gICAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgIGZvckVhY2godXJsQ2hhbmdlTGlzdGVuZXJzLCBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoc2VsZi51cmwoKSwgY2FjaGVkU3RhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI29uVXJsQ2hhbmdlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgKlxuICAgKiBJdCdzIG9ubHkgY2FsbGVkIHdoZW4gdGhlIHVybCBpcyBjaGFuZ2VkIGZyb20gb3V0c2lkZSBvZiBhbmd1bGFyOlxuICAgKiAtIHVzZXIgdHlwZXMgZGlmZmVyZW50IHVybCBpbnRvIGFkZHJlc3MgYmFyXG4gICAqIC0gdXNlciBjbGlja3Mgb24gaGlzdG9yeSAoZm9yd2FyZC9iYWNrKSBidXR0b25cbiAgICogLSB1c2VyIGNsaWNrcyBvbiBhIGxpbmtcbiAgICpcbiAgICogSXQncyBub3QgY2FsbGVkIHdoZW4gdXJsIGlzIGNoYW5nZWQgYnkgJGJyb3dzZXIudXJsKCkgbWV0aG9kXG4gICAqXG4gICAqIFRoZSBsaXN0ZW5lciBnZXRzIGNhbGxlZCB3aXRoIG5ldyB1cmwgYXMgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBtb25pdG9yIHVybCBjaGFuZ2VzIGluIGFuZ3VsYXIgYXBwcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBsaXN0ZW5lciBMaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB1cmwgY2hhbmdlcy5cbiAgICogQHJldHVybiB7ZnVuY3Rpb24oc3RyaW5nKX0gUmV0dXJucyB0aGUgcmVnaXN0ZXJlZCBsaXN0ZW5lciBmbiAtIGhhbmR5IGlmIHRoZSBmbiBpcyBhbm9ueW1vdXMuXG4gICAqL1xuICBzZWxmLm9uVXJsQ2hhbmdlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPKHZvanRhKTogcmVmYWN0b3IgdG8gdXNlIG5vZGUncyBzeW50YXggZm9yIGV2ZW50c1xuICAgIGlmICghdXJsQ2hhbmdlSW5pdCkge1xuICAgICAgLy8gV2UgbGlzdGVuIG9uIGJvdGggKGhhc2hjaGFuZ2UvcG9wc3RhdGUpIHdoZW4gYXZhaWxhYmxlLCBhcyBzb21lIGJyb3dzZXJzIChlLmcuIE9wZXJhKVxuICAgICAgLy8gZG9uJ3QgZmlyZSBwb3BzdGF0ZSB3aGVuIHVzZXIgY2hhbmdlIHRoZSBhZGRyZXNzIGJhciBhbmQgZG9uJ3QgZmlyZSBoYXNoY2hhbmdlIHdoZW4gdXJsXG4gICAgICAvLyBjaGFuZ2VkIGJ5IHB1c2gvcmVwbGFjZVN0YXRlXG5cbiAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnRcbiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5KSBqcUxpdGUod2luZG93KS5vbigncG9wc3RhdGUnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG4gICAgICAvLyBoYXNoY2hhbmdlIGV2ZW50XG4gICAgICBqcUxpdGUod2luZG93KS5vbignaGFzaGNoYW5nZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcblxuICAgICAgdXJsQ2hhbmdlSW5pdCA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJsQ2hhbmdlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHVybCBoYXMgY2hhbmdlZCBvdXRzaWRlIG9mIEFuZ3VsYXIuXG4gICAqIE5lZWRzIHRvIGJlIGV4cG9ydGVkIHRvIGJlIGFibGUgdG8gY2hlY2sgZm9yIGNoYW5nZXMgdGhhdCBoYXZlIGJlZW4gZG9uZSBpbiBzeW5jLFxuICAgKiBhcyBoYXNoY2hhbmdlL3BvcHN0YXRlIGV2ZW50cyBmaXJlIGluIGFzeW5jLlxuICAgKi9cbiAgc2VsZi4kJGNoZWNrVXJsQ2hhbmdlID0gZmlyZVVybENoYW5nZTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBNaXNjIEFQSVxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNiYXNlSHJlZlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0dXJucyBjdXJyZW50IDxiYXNlIGhyZWY+XG4gICAqIChhbHdheXMgcmVsYXRpdmUgLSB3aXRob3V0IGRvbWFpbilcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgYmFzZSBocmVmXG4gICAqL1xuICBzZWxmLmJhc2VIcmVmID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhyZWYgPSBiYXNlRWxlbWVudC5hdHRyKCdocmVmJyk7XG4gICAgcmV0dXJuIGhyZWYgPyBocmVmLnJlcGxhY2UoL14oaHR0cHM/XFw6KT9cXC9cXC9bXlxcL10qLywgJycpIDogJyc7XG4gIH07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gQ29va2llcyBBUElcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgdmFyIGxhc3RDb29raWVzID0ge307XG4gIHZhciBsYXN0Q29va2llU3RyaW5nID0gJyc7XG4gIHZhciBjb29raWVQYXRoID0gc2VsZi5iYXNlSHJlZigpO1xuXG4gIGZ1bmN0aW9uIHNhZmVEZWNvZGVVUklDb21wb25lbnQoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNjb29raWVzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBDb29raWUgbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIENvb2tpZSB2YWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGNvb2tpZXMgbWV0aG9kIHByb3ZpZGVzIGEgJ3ByaXZhdGUnIGxvdyBsZXZlbCBhY2Nlc3MgdG8gYnJvd3NlciBjb29raWVzLlxuICAgKiBJdCBpcyBub3QgbWVhbnQgdG8gYmUgdXNlZCBkaXJlY3RseSwgdXNlIHRoZSAkY29va2llIHNlcnZpY2UgaW5zdGVhZC5cbiAgICpcbiAgICogVGhlIHJldHVybiB2YWx1ZXMgdmFyeSBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50cyB0aGF0IHRoZSBtZXRob2Qgd2FzIGNhbGxlZCB3aXRoIGFzIGZvbGxvd3M6XG4gICAqXG4gICAqIC0gY29va2llcygpIC0+IGhhc2ggb2YgYWxsIGNvb2tpZXMsIHRoaXMgaXMgTk9UIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgc3RhdGUsIHNvIGRvIG5vdCBtb2RpZnlcbiAgICogICBpdFxuICAgKiAtIGNvb2tpZXMobmFtZSwgdmFsdWUpIC0+IHNldCBuYW1lIHRvIHZhbHVlLCBpZiB2YWx1ZSBpcyB1bmRlZmluZWQgZGVsZXRlIHRoZSBjb29raWVcbiAgICogLSBjb29raWVzKG5hbWUpIC0+IHRoZSBzYW1lIGFzIChuYW1lLCB1bmRlZmluZWQpID09IERFTEVURVMgKG5vIG9uZSBjYWxscyBpdCByaWdodCBub3cgdGhhdFxuICAgKiAgIHdheSlcbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gSGFzaCBvZiBhbGwgY29va2llcyAoaWYgY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlcilcbiAgICovXG4gIHNlbGYuY29va2llcyA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGNvb2tpZUxlbmd0aCwgY29va2llQXJyYXksIGNvb2tpZSwgaSwgaW5kZXg7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmF3RG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgXCI9O3BhdGg9XCIgKyBjb29raWVQYXRoICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI7ZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgIGNvb2tpZUxlbmd0aCA9IChyYXdEb2N1bWVudC5jb29raWUgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJztwYXRoPScgKyBjb29raWVQYXRoKS5sZW5ndGggKyAxO1xuXG4gICAgICAgICAgLy8gcGVyIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzIxMDkudHh0IGJyb3dzZXIgbXVzdCBhbGxvdyBhdCBtaW5pbXVtOlxuICAgICAgICAgIC8vIC0gMzAwIGNvb2tpZXNcbiAgICAgICAgICAvLyAtIDIwIGNvb2tpZXMgcGVyIHVuaXF1ZSBkb21haW5cbiAgICAgICAgICAvLyAtIDQwOTYgYnl0ZXMgcGVyIGNvb2tpZVxuICAgICAgICAgIGlmIChjb29raWVMZW5ndGggPiA0MDk2KSB7XG4gICAgICAgICAgICAkbG9nLndhcm4oXCJDb29raWUgJ1wiKyBuYW1lICtcbiAgICAgICAgICAgICAgXCInIHBvc3NpYmx5IG5vdCBzZXQgb3Igb3ZlcmZsb3dlZCBiZWNhdXNlIGl0IHdhcyB0b28gbGFyZ2UgKFwiK1xuICAgICAgICAgICAgICBjb29raWVMZW5ndGggKyBcIiA+IDQwOTYgYnl0ZXMpIVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJhd0RvY3VtZW50LmNvb2tpZSAhPT0gbGFzdENvb2tpZVN0cmluZykge1xuICAgICAgICBsYXN0Q29va2llU3RyaW5nID0gcmF3RG9jdW1lbnQuY29va2llO1xuICAgICAgICBjb29raWVBcnJheSA9IGxhc3RDb29raWVTdHJpbmcuc3BsaXQoXCI7IFwiKTtcbiAgICAgICAgbGFzdENvb2tpZXMgPSB7fTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29va2llQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb29raWUgPSBjb29raWVBcnJheVtpXTtcbiAgICAgICAgICBpbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XG4gICAgICAgICAgaWYgKGluZGV4ID4gMCkgeyAvL2lnbm9yZSBuYW1lbGVzcyBjb29raWVzXG4gICAgICAgICAgICBuYW1lID0gc2FmZURlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKDAsIGluZGV4KSk7XG4gICAgICAgICAgICAvLyB0aGUgZmlyc3QgdmFsdWUgdGhhdCBpcyBzZWVuIGZvciBhIGNvb2tpZSBpcyB0aGUgbW9zdFxuICAgICAgICAgICAgLy8gc3BlY2lmaWMgb25lLiAgdmFsdWVzIGZvciB0aGUgc2FtZSBjb29raWUgbmFtZSB0aGF0XG4gICAgICAgICAgICAvLyBmb2xsb3cgYXJlIGZvciBsZXNzIHNwZWNpZmljIHBhdGhzLlxuICAgICAgICAgICAgaWYgKGxhc3RDb29raWVzW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgbGFzdENvb2tpZXNbbmFtZV0gPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoaW5kZXggKyAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFzdENvb2tpZXM7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2RlZmVyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiwgd2hvJ3MgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWZlcnJlZC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gb2YgbWlsbGlzZWNvbmRzIHRvIGRlZmVyIHRoZSBmdW5jdGlvbiBleGVjdXRpb24uXG4gICAqIEByZXR1cm5zIHsqfSBEZWZlcklkIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSB0YXNrIHZpYSBgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKClgLlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRXhlY3V0ZXMgYSBmbiBhc3luY2hyb25vdXNseSB2aWEgYHNldFRpbWVvdXQoZm4sIGRlbGF5KWAuXG4gICAqXG4gICAqIFVubGlrZSB3aGVuIGNhbGxpbmcgYHNldFRpbWVvdXRgIGRpcmVjdGx5LCBpbiB0ZXN0IHRoaXMgZnVuY3Rpb24gaXMgbW9ja2VkIGFuZCBpbnN0ZWFkIG9mIHVzaW5nXG4gICAqIGBzZXRUaW1lb3V0YCBpbiB0ZXN0cywgdGhlIGZucyBhcmUgcXVldWVkIGluIGFuIGFycmF5LCB3aGljaCBjYW4gYmUgcHJvZ3JhbW1hdGljYWxseSBmbHVzaGVkXG4gICAqIHZpYSBgJGJyb3dzZXIuZGVmZXIuZmx1c2goKWAuXG4gICAqXG4gICAqL1xuICBzZWxmLmRlZmVyID0gZnVuY3Rpb24oZm4sIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVvdXRJZDtcbiAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCsrO1xuICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW3RpbWVvdXRJZF07XG4gICAgICBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChmbik7XG4gICAgfSwgZGVsYXkgfHwgMCk7XG4gICAgcGVuZGluZ0RlZmVySWRzW3RpbWVvdXRJZF0gPSB0cnVlO1xuICAgIHJldHVybiB0aW1lb3V0SWQ7XG4gIH07XG5cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXIuY2FuY2VsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYW5jZWxzIGEgZGVmZXJyZWQgdGFzayBpZGVudGlmaWVkIHdpdGggYGRlZmVySWRgLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGRlZmVySWQgVG9rZW4gcmV0dXJuZWQgYnkgdGhlIGAkYnJvd3Nlci5kZWZlcmAgZnVuY3Rpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFzayBoYXNuJ3QgZXhlY3V0ZWQgeWV0IGFuZCB3YXMgc3VjY2Vzc2Z1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgICBjYW5jZWxlZC5cbiAgICovXG4gIHNlbGYuZGVmZXIuY2FuY2VsID0gZnVuY3Rpb24oZGVmZXJJZCkge1xuICAgIGlmIChwZW5kaW5nRGVmZXJJZHNbZGVmZXJJZF0pIHtcbiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbZGVmZXJJZF07XG4gICAgICBjbGVhclRpbWVvdXQoZGVmZXJJZCk7XG4gICAgICBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChub29wKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbn1cblxuZnVuY3Rpb24gJEJyb3dzZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRsb2cnLCAnJHNuaWZmZXInLCAnJGRvY3VtZW50JyxcbiAgICAgIGZ1bmN0aW9uKCR3aW5kb3csICRsb2csICRzbmlmZmVyLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCcm93c2VyKCR3aW5kb3csICRkb2N1bWVudCwgJGxvZywgJHNuaWZmZXIpO1xuICAgICAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRjYWNoZUZhY3RvcnlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZhY3RvcnkgdGhhdCBjb25zdHJ1Y3RzIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3RzIGFuZCBnaXZlcyBhY2Nlc3MgdG9cbiAqIHRoZW0uXG4gKlxuICogYGBganNcbiAqXG4gKiAgdmFyIGNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpO1xuICogIGV4cGVjdCgkY2FjaGVGYWN0b3J5LmdldCgnY2FjaGVJZCcpKS50b0JlKGNhY2hlKTtcbiAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ25vU3VjaENhY2hlSWQnKSkubm90LnRvQmVEZWZpbmVkKCk7XG4gKlxuICogIGNhY2hlLnB1dChcImtleVwiLCBcInZhbHVlXCIpO1xuICogIGNhY2hlLnB1dChcImFub3RoZXIga2V5XCIsIFwiYW5vdGhlciB2YWx1ZVwiKTtcbiAqXG4gKiAgLy8gV2UndmUgc3BlY2lmaWVkIG5vIG9wdGlvbnMgb24gY3JlYXRpb25cbiAqICBleHBlY3QoY2FjaGUuaW5mbygpKS50b0VxdWFsKHtpZDogJ2NhY2hlSWQnLCBzaXplOiAyfSk7XG4gKlxuICogYGBgXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgY2FjaGUuXG4gKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgdGhhdCBzcGVjaWZpZXMgdGhlIGNhY2hlIGJlaGF2aW9yLiBQcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBge251bWJlcj19YCBgY2FwYWNpdHlgIOKAlCB0dXJucyB0aGUgY2FjaGUgaW50byBMUlUgY2FjaGUuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gTmV3bHkgY3JlYXRlZCBjYWNoZSBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHNldCBvZiBtZXRob2RzOlxuICpcbiAqIC0gYHtvYmplY3R9YCBgaW5mbygpYCDigJQgUmV0dXJucyBpZCwgc2l6ZSwgYW5kIG9wdGlvbnMgb2YgY2FjaGUuXG4gKiAtIGB7eyp9fWAgYHB1dCh7c3RyaW5nfSBrZXksIHsqfSB2YWx1ZSlgIOKAlCBQdXRzIGEgbmV3IGtleS12YWx1ZSBwYWlyIGludG8gdGhlIGNhY2hlIGFuZCByZXR1cm5zXG4gKiAgIGl0LlxuICogLSBge3sqfX1gIGBnZXQoe3N0cmluZ30ga2V5KWAg4oCUIFJldHVybnMgY2FjaGVkIHZhbHVlIGZvciBga2V5YCBvciB1bmRlZmluZWQgZm9yIGNhY2hlIG1pc3MuXG4gKiAtIGB7dm9pZH1gIGByZW1vdmUoe3N0cmluZ30ga2V5KWAg4oCUIFJlbW92ZXMgYSBrZXktdmFsdWUgcGFpciBmcm9tIHRoZSBjYWNoZS5cbiAqIC0gYHt2b2lkfWAgYHJlbW92ZUFsbCgpYCDigJQgUmVtb3ZlcyBhbGwgY2FjaGVkIHZhbHVlcy5cbiAqIC0gYHt2b2lkfWAgYGRlc3Ryb3koKWAg4oCUIFJlbW92ZXMgcmVmZXJlbmNlcyB0byB0aGlzIGNhY2hlIGZyb20gJGNhY2hlRmFjdG9yeS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY2FjaGVFeGFtcGxlQXBwXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ2FjaGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZUtleVwiIHBsYWNlaG9sZGVyPVwiS2V5XCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZVZhbHVlXCIgcGxhY2Vob2xkZXI9XCJWYWx1ZVwiPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInB1dChuZXdDYWNoZUtleSwgbmV3Q2FjaGVWYWx1ZSlcIj5DYWNoZTwvYnV0dG9uPlxuXG4gICAgICAgICA8cCBuZy1pZj1cImtleXMubGVuZ3RoXCI+Q2FjaGVkIFZhbHVlczwvcD5cbiAgICAgICAgIDxkaXYgbmctcmVwZWF0PVwia2V5IGluIGtleXNcIj5cbiAgICAgICAgICAgPHNwYW4gbmctYmluZD1cImtleVwiPjwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+XG4gICAgICAgICAgIDxiIG5nLWJpbmQ9XCJjYWNoZS5nZXQoa2V5KVwiPjwvYj5cbiAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICA8cD5DYWNoZSBJbmZvPC9wPlxuICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gY2FjaGUuaW5mbygpXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJrZXlcIj48L3NwYW4+XG4gICAgICAgICAgIDxzcGFuPjogPC9zcGFuPlxuICAgICAgICAgICA8YiBuZy1iaW5kPVwidmFsdWVcIj48L2I+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2NhY2hlRXhhbXBsZUFwcCcsIFtdKS5cbiAgICAgICAgIGNvbnRyb2xsZXIoJ0NhY2hlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkc2NvcGUsICRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAgICAgJHNjb3BlLmtleXMgPSBbXTtcbiAgICAgICAgICAgJHNjb3BlLmNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpO1xuICAgICAgICAgICAkc2NvcGUucHV0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgIGlmICgkc2NvcGUuY2FjaGUuZ2V0KGtleSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAkc2NvcGUuY2FjaGUucHV0KGtleSwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZSk7XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIHAge1xuICAgICAgICAgbWFyZ2luOiAxMHB4IDAgM3B4O1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIoKSB7XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhY2hlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gY2FjaGVGYWN0b3J5KGNhY2hlSWQsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChjYWNoZUlkIGluIGNhY2hlcykge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRjYWNoZUZhY3RvcnknKSgnaWlkJywgXCJDYWNoZUlkICd7MH0nIGlzIGFscmVhZHkgdGFrZW4hXCIsIGNhY2hlSWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2l6ZSA9IDAsXG4gICAgICAgICAgc3RhdHMgPSBleHRlbmQoe30sIG9wdGlvbnMsIHtpZDogY2FjaGVJZH0pLFxuICAgICAgICAgIGRhdGEgPSB7fSxcbiAgICAgICAgICBjYXBhY2l0eSA9IChvcHRpb25zICYmIG9wdGlvbnMuY2FwYWNpdHkpIHx8IE51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgbHJ1SGFzaCA9IHt9LFxuICAgICAgICAgIGZyZXNoRW5kID0gbnVsbCxcbiAgICAgICAgICBzdGFsZUVuZCA9IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHR5cGVcbiAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEEgY2FjaGUgb2JqZWN0IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIGRhdGEsIHByaW1hcmlseSB1c2VkIGJ5XG4gICAgICAgKiB7QGxpbmsgJGh0dHAgJGh0dHB9IGFuZCB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpzY3JpcHQgc2NyaXB0fSBkaXJlY3RpdmUgdG8gY2FjaGVcbiAgICAgICAqIHRlbXBsYXRlcyBhbmQgb3RoZXIgZGF0YS5cbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogIGFuZ3VsYXIubW9kdWxlKCdzdXBlckNhY2hlJylcbiAgICAgICAqICAgIC5mYWN0b3J5KCdzdXBlckNhY2hlJywgWyckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSkge1xuICAgICAgICogICAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgnc3VwZXItY2FjaGUnKTtcbiAgICAgICAqICAgIH1dKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGUgdGVzdDpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogIGl0KCdzaG91bGQgYmVoYXZlIGxpa2UgYSBjYWNoZScsIGluamVjdChmdW5jdGlvbihzdXBlckNhY2hlKSB7XG4gICAgICAgKiAgICBzdXBlckNhY2hlLnB1dCgna2V5JywgJ3ZhbHVlJyk7XG4gICAgICAgKiAgICBzdXBlckNhY2hlLnB1dCgnYW5vdGhlciBrZXknLCAnYW5vdGhlciB2YWx1ZScpO1xuICAgICAgICpcbiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmluZm8oKSkudG9FcXVhbCh7XG4gICAgICAgKiAgICAgIGlkOiAnc3VwZXItY2FjaGUnLFxuICAgICAgICogICAgICBzaXplOiAyXG4gICAgICAgKiAgICB9KTtcbiAgICAgICAqXG4gICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZSgnYW5vdGhlciBrZXknKTtcbiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmdldCgnYW5vdGhlciBrZXknKSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgICpcbiAgICAgICAqICAgIHN1cGVyQ2FjaGUucmVtb3ZlQWxsKCk7XG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoe1xuICAgICAgICogICAgICBpZDogJ3N1cGVyLWNhY2hlJyxcbiAgICAgICAqICAgICAgc2l6ZTogMFxuICAgICAgICogICAgfSk7XG4gICAgICAgKiAgfSkpO1xuICAgICAgICogYGBgXG4gICAgICAgKi9cbiAgICAgIHJldHVybiBjYWNoZXNbY2FjaGVJZF0gPSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNwdXRcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEluc2VydHMgYSBuYW1lZCBlbnRyeSBpbnRvIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0IHRvIGJlXG4gICAgICAgICAqIHJldHJpZXZlZCBsYXRlciwgYW5kIGluY3JlbWVudGluZyB0aGUgc2l6ZSBvZiB0aGUgY2FjaGUgaWYgdGhlIGtleSB3YXMgbm90IGFscmVhZHlcbiAgICAgICAgICogcHJlc2VudCBpbiB0aGUgY2FjaGUuIElmIGJlaGF2aW5nIGxpa2UgYW4gTFJVIGNhY2hlLCBpdCB3aWxsIGFsc28gcmVtb3ZlIHN0YWxlXG4gICAgICAgICAqIGVudHJpZXMgZnJvbSB0aGUgc2V0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJdCB3aWxsIG5vdCBpbnNlcnQgdW5kZWZpbmVkIHZhbHVlcyBpbnRvIHRoZSBjYWNoZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IHVuZGVyIHdoaWNoIHRoZSBjYWNoZWQgZGF0YSBpcyBzdG9yZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgdGhlIHZhbHVlIHRvIHN0b3JlIGFsb25nc2lkZSB0aGUga2V5LiBJZiBpdCBpcyB1bmRlZmluZWQsIHRoZSBrZXlcbiAgICAgICAgICogICAgd2lsbCBub3QgYmUgc3RvcmVkLlxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC5cbiAgICAgICAgICovXG4gICAgICAgIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0ge2tleToga2V5fSk7XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHNpemUrKztcbiAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAgIGlmIChzaXplID4gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN0YWxlRW5kLmtleSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjZ2V0XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSZXRyaWV2ZXMgbmFtZWQgZGF0YSBzdG9yZWQgaW4gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSBvZiB0aGUgZGF0YSB0byBiZSByZXRyaWV2ZWRcbiAgICAgICAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBzdG9yZWQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcblxuICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuO1xuXG4gICAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJlbW92ZXMgYW4gZW50cnkgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IG9mIHRoZSBlbnRyeSB0byBiZSByZW1vdmVkXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcblxuICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAobHJ1RW50cnkgPT0gZnJlc2hFbmQpIGZyZXNoRW5kID0gbHJ1RW50cnkucDtcbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PSBzdGFsZUVuZCkgc3RhbGVFbmQgPSBscnVFbnRyeS5uO1xuICAgICAgICAgICAgbGluayhscnVFbnRyeS5uLGxydUVudHJ5LnApO1xuXG4gICAgICAgICAgICBkZWxldGUgbHJ1SGFzaFtrZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgc2l6ZS0tO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVBbGxcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIENsZWFycyB0aGUgY2FjaGUgb2JqZWN0IG9mIGFueSBlbnRyaWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkYXRhID0ge307XG4gICAgICAgICAgc2l6ZSA9IDA7XG4gICAgICAgICAgbHJ1SGFzaCA9IHt9O1xuICAgICAgICAgIGZyZXNoRW5kID0gc3RhbGVFbmQgPSBudWxsO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNkZXN0cm95XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBEZXN0cm95cyB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCBlbnRpcmVseSxcbiAgICAgICAgICogcmVtb3ZpbmcgaXQgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0gc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgc3RhdHMgPSBudWxsO1xuICAgICAgICAgIGxydUhhc2ggPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZXNbY2FjaGVJZF07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2luZm9cbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBhIHBhcnRpY3VsYXIge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqICAgPHVsPlxuICAgICAgICAgKiAgICAgPGxpPioqaWQqKjogdGhlIGlkIG9mIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KipzaXplKio6IHRoZSBudW1iZXIgb2YgZW50cmllcyBrZXB0IGluIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KiouLi4qKjogYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCB3aGVuIGNyZWF0aW5nIHRoZVxuICAgICAgICAgKiAgICAgICBjYWNoZS48L2xpPlxuICAgICAgICAgKiAgIDwvdWw+XG4gICAgICAgICAqL1xuICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywge3NpemU6IHNpemV9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuXG4gICAgICAvKipcbiAgICAgICAqIG1ha2VzIHRoZSBgZW50cnlgIHRoZSBmcmVzaEVuZCBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlZnJlc2goZW50cnkpIHtcbiAgICAgICAgaWYgKGVudHJ5ICE9IGZyZXNoRW5kKSB7XG4gICAgICAgICAgaWYgKCFzdGFsZUVuZCkge1xuICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWxlRW5kID09IGVudHJ5KSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5Lm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluayhlbnRyeS5uLCBlbnRyeS5wKTtcbiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7XG4gICAgICAgICAgZnJlc2hFbmQgPSBlbnRyeTtcbiAgICAgICAgICBmcmVzaEVuZC5uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogYmlkaXJlY3Rpb25hbGx5IGxpbmtzIHR3byBlbnRyaWVzIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gbGluayhuZXh0RW50cnksIHByZXZFbnRyeSkge1xuICAgICAgICBpZiAobmV4dEVudHJ5ICE9IHByZXZFbnRyeSkge1xuICAgICAgICAgIGlmIChuZXh0RW50cnkpIG5leHRFbnRyeS5wID0gcHJldkVudHJ5OyAvL3Agc3RhbmRzIGZvciBwcmV2aW91cywgJ3ByZXYnIGRpZG4ndCBtaW5pZnlcbiAgICAgICAgICBpZiAocHJldkVudHJ5KSBwcmV2RW50cnkubiA9IG5leHRFbnRyeTsgLy9uIHN0YW5kcyBmb3IgbmV4dCwgJ25leHQnIGRpZG4ndCBtaW5pZnlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjYWNoZUZhY3RvcnkjaW5mb1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCB0aGUgY2FjaGVzIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gLSBrZXktdmFsdWUgbWFwIG9mIGBjYWNoZUlkYCB0byB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYGNhY2hlI2luZm9gXG4gICAqL1xuICAgIGNhY2hlRmFjdG9yeS5pbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaW5mbyA9IHt9O1xuICAgICAgZm9yRWFjaChjYWNoZXMsIGZ1bmN0aW9uKGNhY2hlLCBjYWNoZUlkKSB7XG4gICAgICAgIGluZm9bY2FjaGVJZF0gPSBjYWNoZS5pbmZvKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2dldFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR2V0IGFjY2VzcyB0byBhIGNhY2hlIG9iamVjdCBieSB0aGUgYGNhY2hlSWRgIHVzZWQgd2hlbiBpdCB3YXMgY3JlYXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiBhIGNhY2hlIHRvIGFjY2Vzcy5cbiAgICogQHJldHVybnMge29iamVjdH0gQ2FjaGUgb2JqZWN0IGlkZW50aWZpZWQgYnkgdGhlIGNhY2hlSWQgb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2ggY2FjaGUuXG4gICAqL1xuICAgIGNhY2hlRmFjdG9yeS5nZXQgPSBmdW5jdGlvbihjYWNoZUlkKSB7XG4gICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdO1xuICAgIH07XG5cblxuICAgIHJldHVybiBjYWNoZUZhY3Rvcnk7XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR0ZW1wbGF0ZUNhY2hlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZmlyc3QgdGltZSBhIHRlbXBsYXRlIGlzIHVzZWQsIGl0IGlzIGxvYWRlZCBpbiB0aGUgdGVtcGxhdGUgY2FjaGUgZm9yIHF1aWNrIHJldHJpZXZhbC4gWW91XG4gKiBjYW4gbG9hZCB0ZW1wbGF0ZXMgZGlyZWN0bHkgaW50byB0aGUgY2FjaGUgaW4gYSBgc2NyaXB0YCB0YWcsIG9yIGJ5IGNvbnN1bWluZyB0aGVcbiAqIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZSBkaXJlY3RseS5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSBgc2NyaXB0YCB0YWc6XG4gKlxuICogYGBgaHRtbFxuICogICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCJ0ZW1wbGF0ZUlkLmh0bWxcIj5cbiAqICAgICA8cD5UaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZTwvcD5cbiAqICAgPC9zY3JpcHQ+XG4gKiBgYGBcbiAqXG4gKiAqKk5vdGU6KiogdGhlIGBzY3JpcHRgIHRhZyBjb250YWluaW5nIHRoZSB0ZW1wbGF0ZSBkb2VzIG5vdCBuZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBgaGVhZGAgb2ZcbiAqIHRoZSBkb2N1bWVudCwgYnV0IGl0IG11c3QgYmUgYSBkZXNjZW5kZW50IG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RFbGVtZW50ICRyb290RWxlbWVudH0gKElFLFxuICogZWxlbWVudCB3aXRoIG5nLWFwcCBhdHRyaWJ1dGUpLCBvdGhlcndpc2UgdGhlIHRlbXBsYXRlIHdpbGwgYmUgaWdub3JlZC5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSAkdGVtcGxhdGVDYWNoZSBzZXJ2aWNlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgbXlBcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSk7XG4gKiBteUFwcC5ydW4oZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAqICAgJHRlbXBsYXRlQ2FjaGUucHV0KCd0ZW1wbGF0ZUlkLmh0bWwnLCAnVGhpcyBpcyB0aGUgY29udGVudCBvZiB0aGUgdGVtcGxhdGUnKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogVG8gcmV0cmlldmUgdGhlIHRlbXBsYXRlIGxhdGVyLCBzaW1wbHkgdXNlIGl0IGluIHlvdXIgSFRNTDpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctaW5jbHVkZT1cIiAndGVtcGxhdGVJZC5odG1sJyBcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIG9yIGdldCBpdCB2aWEgSmF2YXNjcmlwdDpcbiAqIGBgYGpzXG4gKiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3RlbXBsYXRlSWQuaHRtbCcpXG4gKiBgYGBcbiAqXG4gKiBTZWUge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0uXG4gKlxuICovXG5mdW5jdGlvbiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3RlbXBsYXRlcycpO1xuICB9XTtcbn1cblxuLyogISBWQVJJQUJMRS9GVU5DVElPTiBOQU1JTkcgQ09OVkVOVElPTlMgVEhBVCBBUFBMWSBUTyBUSElTIEZJTEUhXG4gKlxuICogRE9NLXJlbGF0ZWQgdmFyaWFibGVzOlxuICpcbiAqIC0gXCJub2RlXCIgLSBET00gTm9kZVxuICogLSBcImVsZW1lbnRcIiAtIERPTSBFbGVtZW50IG9yIE5vZGVcbiAqIC0gXCIkbm9kZVwiIG9yIFwiJGVsZW1lbnRcIiAtIGpxTGl0ZS13cmFwcGVkIG5vZGUgb3IgZWxlbWVudFxuICpcbiAqXG4gKiBDb21waWxlciByZWxhdGVkIHN0dWZmOlxuICpcbiAqIC0gXCJsaW5rRm5cIiAtIGxpbmtpbmcgZm4gb2YgYSBzaW5nbGUgZGlyZWN0aXZlXG4gKiAtIFwibm9kZUxpbmtGblwiIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBwYXJ0aWN1bGFyIG5vZGVcbiAqIC0gXCJjaGlsZExpbmtGblwiIC0gIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGNoaWxkIG5vZGVzIG9mIGEgcGFydGljdWxhciBub2RlXG4gKiAtIFwiY29tcG9zaXRlTGlua0ZuXCIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIGNvbXBpbGF0aW9uIHJvb3QgKG5vZGVMaXN0KVxuICovXG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGNvbXBpbGVcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21waWxlcyBhbiBIVE1MIHN0cmluZyBvciBET00gaW50byBhIHRlbXBsYXRlIGFuZCBwcm9kdWNlcyBhIHRlbXBsYXRlIGZ1bmN0aW9uLCB3aGljaFxuICogY2FuIHRoZW4gYmUgdXNlZCB0byBsaW5rIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIGBzY29wZWB9IGFuZCB0aGUgdGVtcGxhdGUgdG9nZXRoZXIuXG4gKlxuICogVGhlIGNvbXBpbGF0aW9uIGlzIGEgcHJvY2VzcyBvZiB3YWxraW5nIHRoZSBET00gdHJlZSBhbmQgbWF0Y2hpbmcgRE9NIGVsZW1lbnRzIHRvXG4gKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGlzIGRvY3VtZW50IGlzIGFuIGluLWRlcHRoIHJlZmVyZW5jZSBvZiBhbGwgZGlyZWN0aXZlIG9wdGlvbnMuXG4gKiBGb3IgYSBnZW50bGUgaW50cm9kdWN0aW9uIHRvIGRpcmVjdGl2ZXMgd2l0aCBleGFtcGxlcyBvZiBjb21tb24gdXNlIGNhc2VzLFxuICogc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZSBndWlkZX0uXG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBDb21wcmVoZW5zaXZlIERpcmVjdGl2ZSBBUElcbiAqXG4gKiBUaGVyZSBhcmUgbWFueSBkaWZmZXJlbnQgb3B0aW9ucyBmb3IgYSBkaXJlY3RpdmUuXG4gKlxuICogVGhlIGRpZmZlcmVuY2UgcmVzaWRlcyBpbiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmYWN0b3J5IGZ1bmN0aW9uLlxuICogWW91IGNhbiBlaXRoZXIgcmV0dXJuIGEgXCJEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3RcIiAoc2VlIGJlbG93KSB0aGF0IGRlZmluZXMgdGhlIGRpcmVjdGl2ZSBwcm9wZXJ0aWVzLFxuICogb3IganVzdCB0aGUgYHBvc3RMaW5rYCBmdW5jdGlvbiAoYWxsIG90aGVyIHByb3BlcnRpZXMgd2lsbCBoYXZlIHRoZSBkZWZhdWx0IHZhbHVlcykuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAqICoqQmVzdCBQcmFjdGljZToqKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgXCJkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3RcIiBmb3JtLlxuICogPC9kaXY+XG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgZGlyZWN0aXZlIGRlY2xhcmVkIHdpdGggYSBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3Q6XG4gKlxuICogYGBganNcbiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTtcbiAqXG4gKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHtcbiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHtcbiAqICAgICAgIHByaW9yaXR5OiAwLFxuICogICAgICAgdGVtcGxhdGU6ICc8ZGl2PjwvZGl2PicsIC8vIG9yIC8vIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsgLi4uIH0sXG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8gdGVtcGxhdGVVcmw6ICdkaXJlY3RpdmUuaHRtbCcsIC8vIG9yIC8vIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsgLi4uIH0sXG4gKiAgICAgICB0cmFuc2NsdWRlOiBmYWxzZSxcbiAqICAgICAgIHJlc3RyaWN0OiAnQScsXG4gKiAgICAgICB0ZW1wbGF0ZU5hbWVzcGFjZTogJ2h0bWwnLFxuICogICAgICAgc2NvcGU6IGZhbHNlLFxuICogICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdHJhbnNjbHVkZSwgb3RoZXJJbmplY3RhYmxlcykgeyAuLi4gfSxcbiAqICAgICAgIGNvbnRyb2xsZXJBczogJ3N0cmluZ0FsaWFzJyxcbiAqICAgICAgIHJlcXVpcmU6ICdzaWJsaW5nRGlyZWN0aXZlTmFtZScsIC8vIG9yIC8vIFsnXnBhcmVudERpcmVjdGl2ZU5hbWUnLCAnP29wdGlvbmFsRGlyZWN0aXZlTmFtZScsICc/Xm9wdGlvbmFsUGFyZW50J10sXG4gKiAgICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIHByZUxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH0sXG4gKiAgICAgICAgICAgcG9zdDogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH1cbiAqICAgICAgICAgfVxuICogICAgICAgICAvLyBvclxuICogICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8gbGluazoge1xuICogICAgICAgLy8gIHByZTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgIC8vICBwb3N0OiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfVxuICogICAgICAgLy8gfVxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKCAuLi4gKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIEFueSB1bnNwZWNpZmllZCBvcHRpb25zIHdpbGwgdXNlIHRoZSBkZWZhdWx0IHZhbHVlLiBZb3UgY2FuIHNlZSB0aGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGVyZWZvcmUgdGhlIGFib3ZlIGNhbiBiZSBzaW1wbGlmaWVkIGFzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKC4uLik7XG4gKlxuICogICBteU1vZHVsZS5kaXJlY3RpdmUoJ2RpcmVjdGl2ZU5hbWUnLCBmdW5jdGlvbiBmYWN0b3J5KGluamVjdGFibGVzKSB7XG4gKiAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7XG4gKiAgICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICAgIH07XG4gKiAgICAgcmV0dXJuIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3Q7XG4gKiAgICAgLy8gb3JcbiAqICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHsgLi4uIH1cbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKlxuICpcbiAqICMjIyBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3RcbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0IHByb3ZpZGVzIGluc3RydWN0aW9ucyB0byB0aGUge0BsaW5rIG5nLiRjb21waWxlXG4gKiBjb21waWxlcn0uIFRoZSBhdHRyaWJ1dGVzIGFyZTpcbiAqXG4gKiAjIyMjIGBtdWx0aUVsZW1lbnRgXG4gKiBXaGVuIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIHRydWUsIHRoZSBIVE1MIGNvbXBpbGVyIHdpbGwgY29sbGVjdCBET00gbm9kZXMgYmV0d2VlblxuICogbm9kZXMgd2l0aCB0aGUgYXR0cmlidXRlcyBgZGlyZWN0aXZlLW5hbWUtc3RhcnRgIGFuZCBgZGlyZWN0aXZlLW5hbWUtZW5kYCwgYW5kIGdyb3VwIHRoZW1cbiAqIHRvZ2V0aGVyIGFzIHRoZSBkaXJlY3RpdmUgZWxlbWVudHMuIEl0IGlzIHJlY29tZW5kZWQgdGhhdCB0aGlzIGZlYXR1cmUgYmUgdXNlZCBvbiBkaXJlY3RpdmVzXG4gKiB3aGljaCBhcmUgbm90IHN0cmljdGx5IGJlaGF2aW91cmFsIChzdWNoIGFzIHtAbGluayBuZ0NsaWNrfSksIGFuZCB3aGljaFxuICogZG8gbm90IG1hbmlwdWxhdGUgb3IgcmVwbGFjZSBjaGlsZCBub2RlcyAoc3VjaCBhcyB7QGxpbmsgbmdJbmNsdWRlfSkuXG4gKlxuICogIyMjIyBgcHJpb3JpdHlgXG4gKiBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBkaXJlY3RpdmVzIGRlZmluZWQgb24gYSBzaW5nbGUgRE9NIGVsZW1lbnQsIHNvbWV0aW1lcyBpdFxuICogaXMgbmVjZXNzYXJ5IHRvIHNwZWNpZnkgdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBkaXJlY3RpdmVzIGFyZSBhcHBsaWVkLiBUaGUgYHByaW9yaXR5YCBpcyB1c2VkXG4gKiB0byBzb3J0IHRoZSBkaXJlY3RpdmVzIGJlZm9yZSB0aGVpciBgY29tcGlsZWAgZnVuY3Rpb25zIGdldCBjYWxsZWQuIFByaW9yaXR5IGlzIGRlZmluZWQgYXMgYVxuICogbnVtYmVyLiBEaXJlY3RpdmVzIHdpdGggZ3JlYXRlciBudW1lcmljYWwgYHByaW9yaXR5YCBhcmUgY29tcGlsZWQgZmlyc3QuIFByZS1saW5rIGZ1bmN0aW9uc1xuICogYXJlIGFsc28gcnVuIGluIHByaW9yaXR5IG9yZGVyLCBidXQgcG9zdC1saW5rIGZ1bmN0aW9ucyBhcmUgcnVuIGluIHJldmVyc2Ugb3JkZXIuIFRoZSBvcmRlclxuICogb2YgZGlyZWN0aXZlcyB3aXRoIHRoZSBzYW1lIHByaW9yaXR5IGlzIHVuZGVmaW5lZC4gVGhlIGRlZmF1bHQgcHJpb3JpdHkgaXMgYDBgLlxuICpcbiAqICMjIyMgYHRlcm1pbmFsYFxuICogSWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgY3VycmVudCBgcHJpb3JpdHlgIHdpbGwgYmUgdGhlIGxhc3Qgc2V0IG9mIGRpcmVjdGl2ZXNcbiAqIHdoaWNoIHdpbGwgZXhlY3V0ZSAoYW55IGRpcmVjdGl2ZXMgYXQgdGhlIGN1cnJlbnQgcHJpb3JpdHkgd2lsbCBzdGlsbCBleGVjdXRlXG4gKiBhcyB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uIG9uIHNhbWUgYHByaW9yaXR5YCBpcyB1bmRlZmluZWQpLiBOb3RlIHRoYXQgZXhwcmVzc2lvbnNcbiAqIGFuZCBvdGhlciBkaXJlY3RpdmVzIHVzZWQgaW4gdGhlIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIHdpbGwgYWxzbyBiZSBleGNsdWRlZCBmcm9tIGV4ZWN1dGlvbi5cbiAqXG4gKiAjIyMjIGBzY29wZWBcbiAqICoqSWYgc2V0IHRvIGB0cnVlYCwqKiB0aGVuIGEgbmV3IHNjb3BlIHdpbGwgYmUgY3JlYXRlZCBmb3IgdGhpcyBkaXJlY3RpdmUuIElmIG11bHRpcGxlIGRpcmVjdGl2ZXMgb24gdGhlXG4gKiBzYW1lIGVsZW1lbnQgcmVxdWVzdCBhIG5ldyBzY29wZSwgb25seSBvbmUgbmV3IHNjb3BlIGlzIGNyZWF0ZWQuIFRoZSBuZXcgc2NvcGUgcnVsZSBkb2VzIG5vdFxuICogYXBwbHkgZm9yIHRoZSByb290IG9mIHRoZSB0ZW1wbGF0ZSBzaW5jZSB0aGUgcm9vdCBvZiB0aGUgdGVtcGxhdGUgYWx3YXlzIGdldHMgYSBuZXcgc2NvcGUuXG4gKlxuICogKipJZiBzZXQgdG8gYHt9YCAob2JqZWN0IGhhc2gpLCoqIHRoZW4gYSBuZXcgXCJpc29sYXRlXCIgc2NvcGUgaXMgY3JlYXRlZC4gVGhlICdpc29sYXRlJyBzY29wZSBkaWZmZXJzIGZyb21cbiAqIG5vcm1hbCBzY29wZSBpbiB0aGF0IGl0IGRvZXMgbm90IHByb3RvdHlwaWNhbGx5IGluaGVyaXQgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBUaGlzIGlzIHVzZWZ1bFxuICogd2hlbiBjcmVhdGluZyByZXVzYWJsZSBjb21wb25lbnRzLCB3aGljaCBzaG91bGQgbm90IGFjY2lkZW50YWxseSByZWFkIG9yIG1vZGlmeSBkYXRhIGluIHRoZVxuICogcGFyZW50IHNjb3BlLlxuICpcbiAqIFRoZSAnaXNvbGF0ZScgc2NvcGUgdGFrZXMgYW4gb2JqZWN0IGhhc2ggd2hpY2ggZGVmaW5lcyBhIHNldCBvZiBsb2NhbCBzY29wZSBwcm9wZXJ0aWVzXG4gKiBkZXJpdmVkIGZyb20gdGhlIHBhcmVudCBzY29wZS4gVGhlc2UgbG9jYWwgcHJvcGVydGllcyBhcmUgdXNlZnVsIGZvciBhbGlhc2luZyB2YWx1ZXMgZm9yXG4gKiB0ZW1wbGF0ZXMuIExvY2FscyBkZWZpbml0aW9uIGlzIGEgaGFzaCBvZiBsb2NhbCBzY29wZSBwcm9wZXJ0eSB0byBpdHMgc291cmNlOlxuICpcbiAqICogYEBgIG9yIGBAYXR0cmAgLSBiaW5kIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgdG8gdGhlIHZhbHVlIG9mIERPTSBhdHRyaWJ1dGUuIFRoZSByZXN1bHQgaXNcbiAqICAgYWx3YXlzIGEgc3RyaW5nIHNpbmNlIERPTSBhdHRyaWJ1dGVzIGFyZSBzdHJpbmdzLiBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgIHRoZW4gdGhlXG4gKiAgIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuXG4gKiAgIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9XCJoZWxsbyB7e25hbWV9fVwiPmAgYW5kIHdpZGdldCBkZWZpbml0aW9uXG4gKiAgIG9mIGBzY29wZTogeyBsb2NhbE5hbWU6J0BteUF0dHInIH1gLCB0aGVuIHdpZGdldCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxOYW1lYCB3aWxsIHJlZmxlY3RcbiAqICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiBgaGVsbG8ge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlXG4gKiAgIGBsb2NhbE5hbWVgIHByb3BlcnR5IG9uIHRoZSB3aWRnZXQgc2NvcGUuIFRoZSBgbmFtZWAgaXMgcmVhZCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUgKG5vdFxuICogICBjb21wb25lbnQgc2NvcGUpLlxuICpcbiAqICogYD1gIG9yIGA9YXR0cmAgLSBzZXQgdXAgYmktZGlyZWN0aW9uYWwgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIHRoZVxuICogICBwYXJlbnQgc2NvcGUgcHJvcGVydHkgb2YgbmFtZSBkZWZpbmVkIHZpYSB0aGUgdmFsdWUgb2YgdGhlIGBhdHRyYCBhdHRyaWJ1dGUuIElmIG5vIGBhdHRyYFxuICogICBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLlxuICogICBHaXZlbiBgPHdpZGdldCBteS1hdHRyPVwicGFyZW50TW9kZWxcIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZlxuICogICBgc2NvcGU6IHsgbG9jYWxNb2RlbDonPW15QXR0cicgfWAsIHRoZW4gd2lkZ2V0IHNjb3BlIHByb3BlcnR5IGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgdGhlXG4gKiAgIHZhbHVlIG9mIGBwYXJlbnRNb2RlbGAgb24gdGhlIHBhcmVudCBzY29wZS4gQW55IGNoYW5nZXMgdG8gYHBhcmVudE1vZGVsYCB3aWxsIGJlIHJlZmxlY3RlZFxuICogICBpbiBgbG9jYWxNb2RlbGAgYW5kIGFueSBjaGFuZ2VzIGluIGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgaW4gYHBhcmVudE1vZGVsYC4gSWYgdGhlIHBhcmVudFxuICogICBzY29wZSBwcm9wZXJ0eSBkb2Vzbid0IGV4aXN0LCBpdCB3aWxsIHRocm93IGEgTk9OX0FTU0lHTkFCTEVfTU9ERUxfRVhQUkVTU0lPTiBleGNlcHRpb24uIFlvdVxuICogICBjYW4gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2luZyBgPT9gIG9yIGA9P2F0dHJgIGluIG9yZGVyIHRvIGZsYWcgdGhlIHByb3BlcnR5IGFzIG9wdGlvbmFsLiBJZlxuICogICB5b3Ugd2FudCB0byBzaGFsbG93IHdhdGNoIGZvciBjaGFuZ2VzIChpLmUuICR3YXRjaENvbGxlY3Rpb24gaW5zdGVhZCBvZiAkd2F0Y2gpIHlvdSBjYW4gdXNlXG4gKiAgIGA9KmAgb3IgYD0qYXR0cmAgKGA9Kj9gIG9yIGA9Kj9hdHRyYCBpZiB0aGUgcHJvcGVydHkgaXMgb3B0aW9uYWwpLlxuICpcbiAqICogYCZgIG9yIGAmYXR0cmAgLSBwcm92aWRlcyBhIHdheSB0byBleGVjdXRlIGFuIGV4cHJlc3Npb24gaW4gdGhlIGNvbnRleHQgb2YgdGhlIHBhcmVudCBzY29wZS5cbiAqICAgSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlXG4gKiAgIGxvY2FsIG5hbWUuIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9XCJjb3VudCA9IGNvdW50ICsgdmFsdWVcIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZlxuICogICBgc2NvcGU6IHsgbG9jYWxGbjonJm15QXR0cicgfWAsIHRoZW4gaXNvbGF0ZSBzY29wZSBwcm9wZXJ0eSBgbG9jYWxGbmAgd2lsbCBwb2ludCB0b1xuICogICBhIGZ1bmN0aW9uIHdyYXBwZXIgZm9yIHRoZSBgY291bnQgPSBjb3VudCArIHZhbHVlYCBleHByZXNzaW9uLiBPZnRlbiBpdCdzIGRlc2lyYWJsZSB0b1xuICogICBwYXNzIGRhdGEgZnJvbSB0aGUgaXNvbGF0ZWQgc2NvcGUgdmlhIGFuIGV4cHJlc3Npb24gdG8gdGhlIHBhcmVudCBzY29wZSwgdGhpcyBjYW4gYmVcbiAqICAgZG9uZSBieSBwYXNzaW5nIGEgbWFwIG9mIGxvY2FsIHZhcmlhYmxlIG5hbWVzIGFuZCB2YWx1ZXMgaW50byB0aGUgZXhwcmVzc2lvbiB3cmFwcGVyIGZuLlxuICogICBGb3IgZXhhbXBsZSwgaWYgdGhlIGV4cHJlc3Npb24gaXMgYGluY3JlbWVudChhbW91bnQpYCB0aGVuIHdlIGNhbiBzcGVjaWZ5IHRoZSBhbW91bnQgdmFsdWVcbiAqICAgYnkgY2FsbGluZyB0aGUgYGxvY2FsRm5gIGFzIGBsb2NhbEZuKHthbW91bnQ6IDIyfSlgLlxuICpcbiAqXG4gKiAjIyMjIGBiaW5kVG9Db250cm9sbGVyYFxuICogV2hlbiBhbiBpc29sYXRlIHNjb3BlIGlzIHVzZWQgZm9yIGEgY29tcG9uZW50IChzZWUgYWJvdmUpLCBhbmQgYGNvbnRyb2xsZXJBc2AgaXMgdXNlZCwgYGJpbmRUb0NvbnRyb2xsZXJgIHdpbGxcbiAqIGFsbG93IGEgY29tcG9uZW50IHRvIGhhdmUgaXRzIHByb3BlcnRpZXMgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIsIHJhdGhlciB0aGFuIHRvIHNjb3BlLiBXaGVuIHRoZSBjb250cm9sbGVyXG4gKiBpcyBpbnN0YW50aWF0ZWQsIHRoZSBpbml0aWFsIHZhbHVlcyBvZiB0aGUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBhcmUgYWxyZWFkeSBhdmFpbGFibGUuXG4gKlxuICogIyMjIyBgY29udHJvbGxlcmBcbiAqIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIFRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBiZWZvcmUgdGhlXG4gKiBwcmUtbGlua2luZyBwaGFzZSBhbmQgaXQgaXMgc2hhcmVkIHdpdGggb3RoZXIgZGlyZWN0aXZlcyAoc2VlXG4gKiBgcmVxdWlyZWAgYXR0cmlidXRlKS4gVGhpcyBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gY29tbXVuaWNhdGUgd2l0aCBlYWNoIG90aGVyIGFuZCBhdWdtZW50XG4gKiBlYWNoIG90aGVyJ3MgYmVoYXZpb3IuIFRoZSBjb250cm9sbGVyIGlzIGluamVjdGFibGUgKGFuZCBzdXBwb3J0cyBicmFja2V0IG5vdGF0aW9uKSB3aXRoIHRoZSBmb2xsb3dpbmcgbG9jYWxzOlxuICpcbiAqICogYCRzY29wZWAgLSBDdXJyZW50IHNjb3BlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogKiBgJGVsZW1lbnRgIC0gQ3VycmVudCBlbGVtZW50XG4gKiAqIGAkYXR0cnNgIC0gQ3VycmVudCBhdHRyaWJ1dGVzIG9iamVjdCBmb3IgdGhlIGVsZW1lbnRcbiAqICogYCR0cmFuc2NsdWRlYCAtIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uIHByZS1ib3VuZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGU6XG4gKiAgIGBmdW5jdGlvbihbc2NvcGVdLCBjbG9uZUxpbmtpbmdGbiwgZnV0dXJlUGFyZW50RWxlbWVudClgLlxuICogICAgKiBgc2NvcGVgOiBvcHRpb25hbCBhcmd1bWVudCB0byBvdmVycmlkZSB0aGUgc2NvcGUuXG4gKiAgICAqIGBjbG9uZUxpbmtpbmdGbmA6IG9wdGlvbmFsIGFyZ3VtZW50IHRvIGNyZWF0ZSBjbG9uZXMgb2YgdGhlIG9yaWdpbmFsIHRyYW5zY2x1ZGVkIGNvbnRlbnQuXG4gKiAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YDpcbiAqICAgICAgICAqIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lTGlua2luZ0ZuYCB3aWxsIGFkZCB0aGUgY2xvbmVkIGVsZW1lbnRzLlxuICogICAgICAgICogZGVmYXVsdDogYCRlbGVtZW50LnBhcmVudCgpYCByZXNwLiBgJGVsZW1lbnRgIGZvciBgdHJhbnNjbHVkZTonZWxlbWVudCdgIHJlc3AuIGB0cmFuc2NsdWRlOnRydWVgLlxuICogICAgICAgICogb25seSBuZWVkZWQgZm9yIHRyYW5zY2x1ZGVzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY29udGFpbiBub24gaHRtbCBlbGVtZW50cyAoZS5nLiBTVkcgZWxlbWVudHMpXG4gKiAgICAgICAgICBhbmQgd2hlbiB0aGUgYGNsb25lTGlua2luRm5gIGlzIHBhc3NlZCxcbiAqICAgICAgICAgIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gY3JlYXRlZCBhbmQgY2xvbmVkIGluIGEgc3BlY2lhbCB3YXkgd2hlbiB0aGV5IGFyZSBkZWZpbmVkIG91dHNpZGUgdGhlaXJcbiAqICAgICAgICAgIHVzdWFsIGNvbnRhaW5lcnMgKGUuZy4gbGlrZSBgPHN2Zz5gKS5cbiAqICAgICAgICAqIFNlZSBhbHNvIHRoZSBgZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlYCBwcm9wZXJ0eS5cbiAqXG4gKlxuICogIyMjIyBgcmVxdWlyZWBcbiAqIFJlcXVpcmUgYW5vdGhlciBkaXJlY3RpdmUgYW5kIGluamVjdCBpdHMgY29udHJvbGxlciBhcyB0aGUgZm91cnRoIGFyZ3VtZW50IHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGVcbiAqIGByZXF1aXJlYCB0YWtlcyBhIHN0cmluZyBuYW1lIChvciBhcnJheSBvZiBzdHJpbmdzKSBvZiB0aGUgZGlyZWN0aXZlKHMpIHRvIHBhc3MgaW4uIElmIGFuIGFycmF5IGlzIHVzZWQsIHRoZVxuICogaW5qZWN0ZWQgYXJndW1lbnQgd2lsbCBiZSBhbiBhcnJheSBpbiBjb3JyZXNwb25kaW5nIG9yZGVyLiBJZiBubyBzdWNoIGRpcmVjdGl2ZSBjYW4gYmVcbiAqIGZvdW5kLCBvciBpZiB0aGUgZGlyZWN0aXZlIGRvZXMgbm90IGhhdmUgYSBjb250cm9sbGVyLCB0aGVuIGFuIGVycm9yIGlzIHJhaXNlZC4gVGhlIG5hbWUgY2FuIGJlIHByZWZpeGVkIHdpdGg6XG4gKlxuICogKiAobm8gcHJlZml4KSAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBvbiB0aGUgY3VycmVudCBlbGVtZW50LiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGA/YCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIG9yIHBhc3MgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLlxuICogKiBgXmAgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cy4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgXl5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCdzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYD9eYCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCBhbmQgaXRzIHBhcmVudHMgb3IgcGFzc1xuICogICBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKiAqIGA/Xl5gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cywgb3IgcGFzc1xuICogICBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKlxuICpcbiAqICMjIyMgYGNvbnRyb2xsZXJBc2BcbiAqIENvbnRyb2xsZXIgYWxpYXMgYXQgdGhlIGRpcmVjdGl2ZSBzY29wZS4gQW4gYWxpYXMgZm9yIHRoZSBjb250cm9sbGVyIHNvIGl0XG4gKiBjYW4gYmUgcmVmZXJlbmNlZCBhdCB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlLiBUaGUgZGlyZWN0aXZlIG5lZWRzIHRvIGRlZmluZSBhIHNjb3BlIGZvciB0aGlzXG4gKiBjb25maWd1cmF0aW9uIHRvIGJlIHVzZWQuIFVzZWZ1bCBpbiB0aGUgY2FzZSB3aGVuIGRpcmVjdGl2ZSBpcyB1c2VkIGFzIGNvbXBvbmVudC5cbiAqXG4gKlxuICogIyMjIyBgcmVzdHJpY3RgXG4gKiBTdHJpbmcgb2Ygc3Vic2V0IG9mIGBFQUNNYCB3aGljaCByZXN0cmljdHMgdGhlIGRpcmVjdGl2ZSB0byBhIHNwZWNpZmljIGRpcmVjdGl2ZVxuICogZGVjbGFyYXRpb24gc3R5bGUuIElmIG9taXR0ZWQsIHRoZSBkZWZhdWx0cyAoZWxlbWVudHMgYW5kIGF0dHJpYnV0ZXMpIGFyZSB1c2VkLlxuICpcbiAqICogYEVgIC0gRWxlbWVudCBuYW1lIChkZWZhdWx0KTogYDxteS1kaXJlY3RpdmU+PC9teS1kaXJlY3RpdmU+YFxuICogKiBgQWAgLSBBdHRyaWJ1dGUgKGRlZmF1bHQpOiBgPGRpdiBteS1kaXJlY3RpdmU9XCJleHBcIj48L2Rpdj5gXG4gKiAqIGBDYCAtIENsYXNzOiBgPGRpdiBjbGFzcz1cIm15LWRpcmVjdGl2ZTogZXhwO1wiPjwvZGl2PmBcbiAqICogYE1gIC0gQ29tbWVudDogYDwhLS0gZGlyZWN0aXZlOiBteS1kaXJlY3RpdmUgZXhwIC0tPmBcbiAqXG4gKlxuICogIyMjIyBgdGVtcGxhdGVOYW1lc3BhY2VgXG4gKiBTdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkb2N1bWVudCB0eXBlIHVzZWQgYnkgdGhlIG1hcmt1cCBpbiB0aGUgdGVtcGxhdGUuXG4gKiBBbmd1bGFySlMgbmVlZHMgdGhpcyBpbmZvcm1hdGlvbiBhcyB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGJlIGNyZWF0ZWQgYW5kIGNsb25lZFxuICogaW4gYSBzcGVjaWFsIHdheSB3aGVuIHRoZXkgYXJlIGRlZmluZWQgb3V0c2lkZSB0aGVpciB1c3VhbCBjb250YWluZXJzIGxpa2UgYDxzdmc+YCBhbmQgYDxtYXRoPmAuXG4gKlxuICogKiBgaHRtbGAgLSBBbGwgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIEhUTUwuIFJvb3Qgbm9kZXMgbWF5IGFsc28gYmVcbiAqICAgdG9wLWxldmVsIGVsZW1lbnRzIHN1Y2ggYXMgYDxzdmc+YCBvciBgPG1hdGg+YC5cbiAqICogYHN2Z2AgLSBUaGUgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIFNWRyBlbGVtZW50cyAoZXhjbHVkaW5nIGA8bWF0aD5gKS5cbiAqICogYG1hdGhgIC0gVGhlIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBNYXRoTUwgZWxlbWVudHMgKGV4Y2x1ZGluZyBgPHN2Zz5gKS5cbiAqXG4gKiBJZiBubyBgdGVtcGxhdGVOYW1lc3BhY2VgIGlzIHNwZWNpZmllZCwgdGhlbiB0aGUgbmFtZXNwYWNlIGlzIGNvbnNpZGVyZWQgdG8gYmUgYGh0bWxgLlxuICpcbiAqICMjIyMgYHRlbXBsYXRlYFxuICogSFRNTCBtYXJrdXAgdGhhdCBtYXk6XG4gKiAqIFJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IChkZWZhdWx0KS5cbiAqICogUmVwbGFjZSB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCBpdHNlbGYgKGlmIGByZXBsYWNlYCBpcyB0cnVlIC0gREVQUkVDQVRFRCkuXG4gKiAqIFdyYXAgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IChpZiBgdHJhbnNjbHVkZWAgaXMgdHJ1ZSkuXG4gKlxuICogVmFsdWUgbWF5IGJlOlxuICpcbiAqICogQSBzdHJpbmcuIEZvciBleGFtcGxlIGA8ZGl2IHJlZC1vbi1ob3Zlcj57e2RlbGV0ZV9zdHJ9fTwvZGl2PmAuXG4gKiAqIEEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvIGFyZ3VtZW50cyBgdEVsZW1lbnRgIGFuZCBgdEF0dHJzYCAoZGVzY3JpYmVkIGluIHRoZSBgY29tcGlsZWBcbiAqICAgZnVuY3Rpb24gYXBpIGJlbG93KSBhbmQgcmV0dXJucyBhIHN0cmluZyB2YWx1ZS5cbiAqXG4gKlxuICogIyMjIyBgdGVtcGxhdGVVcmxgXG4gKiBUaGlzIGlzIHNpbWlsYXIgdG8gYHRlbXBsYXRlYCBidXQgdGhlIHRlbXBsYXRlIGlzIGxvYWRlZCBmcm9tIHRoZSBzcGVjaWZpZWQgVVJMLCBhc3luY2hyb25vdXNseS5cbiAqXG4gKiBCZWNhdXNlIHRlbXBsYXRlIGxvYWRpbmcgaXMgYXN5bmNocm9ub3VzIHRoZSBjb21waWxlciB3aWxsIHN1c3BlbmQgY29tcGlsYXRpb24gb2YgZGlyZWN0aXZlcyBvbiB0aGF0IGVsZW1lbnRcbiAqIGZvciBsYXRlciB3aGVuIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiByZXNvbHZlZC4gIEluIHRoZSBtZWFudGltZSBpdCB3aWxsIGNvbnRpbnVlIHRvIGNvbXBpbGUgYW5kIGxpbmtcbiAqIHNpYmxpbmcgYW5kIHBhcmVudCBlbGVtZW50cyBhcyB0aG91Z2ggdGhpcyBlbGVtZW50IGhhZCBub3QgY29udGFpbmVkIGFueSBkaXJlY3RpdmVzLlxuICpcbiAqIFRoZSBjb21waWxlciBkb2VzIG5vdCBzdXNwZW5kIHRoZSBlbnRpcmUgY29tcGlsYXRpb24gdG8gd2FpdCBmb3IgdGVtcGxhdGVzIHRvIGJlIGxvYWRlZCBiZWNhdXNlIHRoaXNcbiAqIHdvdWxkIHJlc3VsdCBpbiB0aGUgd2hvbGUgYXBwIFwic3RhbGxpbmdcIiB1bnRpbCBhbGwgdGVtcGxhdGVzIGFyZSBsb2FkZWQgYXN5bmNocm9ub3VzbHkgLSBldmVuIGluIHRoZVxuICogY2FzZSB3aGVuIG9ubHkgb25lIGRlZXBseSBuZXN0ZWQgZGlyZWN0aXZlIGhhcyBgdGVtcGxhdGVVcmxgLlxuICpcbiAqIFRlbXBsYXRlIGxvYWRpbmcgaXMgYXN5bmNocm9ub3VzIGV2ZW4gaWYgdGhlIHRlbXBsYXRlIGhhcyBiZWVuIHByZWxvYWRlZCBpbnRvIHRoZSB7QGxpbmsgJHRlbXBsYXRlQ2FjaGV9XG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IGB0ZW1wbGF0ZVVybGAgYXMgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBVUkwgb3IgYXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d29cbiAqIGFyZ3VtZW50cyBgdEVsZW1lbnRgIGFuZCBgdEF0dHJzYCAoZGVzY3JpYmVkIGluIHRoZSBgY29tcGlsZWAgZnVuY3Rpb24gYXBpIGJlbG93KSBhbmQgcmV0dXJuc1xuICogYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSB1cmwuICBJbiBlaXRoZXIgY2FzZSwgdGhlIHRlbXBsYXRlIFVSTCBpcyBwYXNzZWQgdGhyb3VnaCB7QGxpbmtcbiAqICRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfS5cbiAqXG4gKlxuICogIyMjIyBgcmVwbGFjZWAgKFsqREVQUkVDQVRFRCohXSwgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWFqb3IgcmVsZWFzZSAtIGkuZS4gdjIuMClcbiAqIHNwZWNpZnkgd2hhdCB0aGUgdGVtcGxhdGUgc2hvdWxkIHJlcGxhY2UuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKlxuICogKiBgdHJ1ZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LlxuICogKiBgZmFsc2VgIC0gdGhlIHRlbXBsYXRlIHdpbGwgcmVwbGFjZSB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKlxuICogVGhlIHJlcGxhY2VtZW50IHByb2Nlc3MgbWlncmF0ZXMgYWxsIG9mIHRoZSBhdHRyaWJ1dGVzIC8gY2xhc3NlcyBmcm9tIHRoZSBvbGQgZWxlbWVudCB0byB0aGUgbmV3XG4gKiBvbmUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSN0ZW1wbGF0ZS1leHBhbmRpbmctZGlyZWN0aXZlXG4gKiBEaXJlY3RpdmVzIEd1aWRlfSBmb3IgYW4gZXhhbXBsZS5cbiAqXG4gKiBUaGVyZSBhcmUgdmVyeSBmZXcgc2NlbmFyaW9zIHdoZXJlIGVsZW1lbnQgcmVwbGFjZW1lbnQgaXMgcmVxdWlyZWQgZm9yIHRoZSBhcHBsaWNhdGlvbiBmdW5jdGlvbixcbiAqIHRoZSBtYWluIG9uZSBiZWluZyByZXVzYWJsZSBjdXN0b20gY29tcG9uZW50cyB0aGF0IGFyZSB1c2VkIHdpdGhpbiBTVkcgY29udGV4dHNcbiAqIChiZWNhdXNlIFNWRyBkb2Vzbid0IHdvcmsgd2l0aCBjdXN0b20gZWxlbWVudHMgaW4gdGhlIERPTSB0cmVlKS5cbiAqXG4gKiAjIyMjIGB0cmFuc2NsdWRlYFxuICogRXh0cmFjdCB0aGUgY29udGVudHMgb2YgdGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBhcHBlYXJzIGFuZCBtYWtlIGl0IGF2YWlsYWJsZSB0byB0aGUgZGlyZWN0aXZlLlxuICogVGhlIGNvbnRlbnRzIGFyZSBjb21waWxlZCBhbmQgcHJvdmlkZWQgdG8gdGhlIGRpcmVjdGl2ZSBhcyBhICoqdHJhbnNjbHVzaW9uIGZ1bmN0aW9uKiouIFNlZSB0aGVcbiAqIHtAbGluayAkY29tcGlsZSN0cmFuc2NsdXNpb24gVHJhbnNjbHVzaW9ufSBzZWN0aW9uIGJlbG93LlxuICpcbiAqIFRoZXJlIGFyZSB0d28ga2luZHMgb2YgdHJhbnNjbHVzaW9uIGRlcGVuZGluZyB1cG9uIHdoZXRoZXIgeW91IHdhbnQgdG8gdHJhbnNjbHVkZSBqdXN0IHRoZSBjb250ZW50cyBvZiB0aGVcbiAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgb3IgdGhlIGVudGlyZSBlbGVtZW50OlxuICpcbiAqICogYHRydWVgIC0gdHJhbnNjbHVkZSB0aGUgY29udGVudCAoaS5lLiB0aGUgY2hpbGQgbm9kZXMpIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LlxuICogKiBgJ2VsZW1lbnQnYCAtIHRyYW5zY2x1ZGUgdGhlIHdob2xlIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGluY2x1ZGluZyBhbnkgZGlyZWN0aXZlcyBvbiB0aGlzXG4gKiAgIGVsZW1lbnQgdGhhdCBkZWZpbmVkIGF0IGEgbG93ZXIgcHJpb3JpdHkgdGhhbiB0aGlzIGRpcmVjdGl2ZS4gV2hlbiB1c2VkLCB0aGUgYHRlbXBsYXRlYFxuICogICBwcm9wZXJ0eSBpcyBpZ25vcmVkLlxuICpcbiAqXG4gKiAjIyMjIGBjb21waWxlYFxuICpcbiAqIGBgYGpzXG4gKiAgIGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkgeyAuLi4gfVxuICogYGBgXG4gKlxuICogVGhlIGNvbXBpbGUgZnVuY3Rpb24gZGVhbHMgd2l0aCB0cmFuc2Zvcm1pbmcgdGhlIHRlbXBsYXRlIERPTS4gU2luY2UgbW9zdCBkaXJlY3RpdmVzIGRvIG5vdCBkb1xuICogdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24sIGl0IGlzIG5vdCB1c2VkIG9mdGVuLiBUaGUgY29tcGlsZSBmdW5jdGlvbiB0YWtlcyB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAqXG4gKiAgICogYHRFbGVtZW50YCAtIHRlbXBsYXRlIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGhhcyBiZWVuIGRlY2xhcmVkLiBJdCBpc1xuICogICAgIHNhZmUgdG8gZG8gdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24gb24gdGhlIGVsZW1lbnQgYW5kIGNoaWxkIGVsZW1lbnRzIG9ubHkuXG4gKlxuICogICAqIGB0QXR0cnNgIC0gdGVtcGxhdGUgYXR0cmlidXRlcyAtIE5vcm1hbGl6ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzIGRlY2xhcmVkIG9uIHRoaXMgZWxlbWVudCBzaGFyZWRcbiAqICAgICBiZXR3ZWVuIGFsbCBkaXJlY3RpdmUgY29tcGlsZSBmdW5jdGlvbnMuXG4gKlxuICogICAqIGB0cmFuc2NsdWRlYCAtICBbKkRFUFJFQ0FURUQqIV0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb246IGBmdW5jdGlvbihzY29wZSwgY2xvbmVMaW5raW5nRm4pYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogVGhlIHRlbXBsYXRlIGluc3RhbmNlIGFuZCB0aGUgbGluayBpbnN0YW5jZSBtYXkgYmUgZGlmZmVyZW50IG9iamVjdHMgaWYgdGhlIHRlbXBsYXRlIGhhc1xuICogYmVlbiBjbG9uZWQuIEZvciB0aGlzIHJlYXNvbiBpdCBpcyAqKm5vdCoqIHNhZmUgdG8gZG8gYW55dGhpbmcgb3RoZXIgdGhhbiBET00gdHJhbnNmb3JtYXRpb25zIHRoYXRcbiAqIGFwcGx5IHRvIGFsbCBjbG9uZWQgRE9NIG5vZGVzIHdpdGhpbiB0aGUgY29tcGlsZSBmdW5jdGlvbi4gU3BlY2lmaWNhbGx5LCBET00gbGlzdGVuZXIgcmVnaXN0cmF0aW9uXG4gKiBzaG91bGQgYmUgZG9uZSBpbiBhIGxpbmtpbmcgZnVuY3Rpb24gcmF0aGVyIHRoYW4gaW4gYSBjb21waWxlIGZ1bmN0aW9uLlxuICogPC9kaXY+XG5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogVGhlIGNvbXBpbGUgZnVuY3Rpb24gY2Fubm90IGhhbmRsZSBkaXJlY3RpdmVzIHRoYXQgcmVjdXJzaXZlbHkgdXNlIHRoZW1zZWx2ZXMgaW4gdGhlaXJcbiAqIG93biB0ZW1wbGF0ZXMgb3IgY29tcGlsZSBmdW5jdGlvbnMuIENvbXBpbGluZyB0aGVzZSBkaXJlY3RpdmVzIHJlc3VsdHMgaW4gYW4gaW5maW5pdGUgbG9vcCBhbmQgYVxuICogc3RhY2sgb3ZlcmZsb3cgZXJyb3JzLlxuICpcbiAqIFRoaXMgY2FuIGJlIGF2b2lkZWQgYnkgbWFudWFsbHkgdXNpbmcgJGNvbXBpbGUgaW4gdGhlIHBvc3RMaW5rIGZ1bmN0aW9uIHRvIGltcGVyYXRpdmVseSBjb21waWxlXG4gKiBhIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIGluc3RlYWQgb2YgcmVseWluZyBvbiBhdXRvbWF0aWMgdGVtcGxhdGUgY29tcGlsYXRpb24gdmlhIGB0ZW1wbGF0ZWAgb3JcbiAqIGB0ZW1wbGF0ZVVybGAgZGVjbGFyYXRpb24gb3IgbWFudWFsIGNvbXBpbGF0aW9uIGluc2lkZSB0aGUgY29tcGlsZSBmdW5jdGlvbi5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1lcnJvclwiPlxuICogKipOb3RlOioqIFRoZSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWQgdG8gdGhlIGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAqICAgZS5nLiBkb2VzIG5vdCBrbm93IGFib3V0IHRoZSByaWdodCBvdXRlciBzY29wZS4gUGxlYXNlIHVzZSB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiB0aGF0IGlzIHBhc3NlZFxuICogICB0byB0aGUgbGluayBmdW5jdGlvbiBpbnN0ZWFkLlxuICogPC9kaXY+XG5cbiAqIEEgY29tcGlsZSBmdW5jdGlvbiBjYW4gaGF2ZSBhIHJldHVybiB2YWx1ZSB3aGljaCBjYW4gYmUgZWl0aGVyIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0LlxuICpcbiAqICogcmV0dXJuaW5nIGEgKHBvc3QtbGluaykgZnVuY3Rpb24gLSBpcyBlcXVpdmFsZW50IHRvIHJlZ2lzdGVyaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHZpYSB0aGVcbiAqICAgYGxpbmtgIHByb3BlcnR5IG9mIHRoZSBjb25maWcgb2JqZWN0IHdoZW4gdGhlIGNvbXBpbGUgZnVuY3Rpb24gaXMgZW1wdHkuXG4gKlxuICogKiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggZnVuY3Rpb24ocykgcmVnaXN0ZXJlZCB2aWEgYHByZWAgYW5kIGBwb3N0YCBwcm9wZXJ0aWVzIC0gYWxsb3dzIHlvdSB0b1xuICogICBjb250cm9sIHdoZW4gYSBsaW5raW5nIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlLiBTZWUgaW5mbyBhYm91dFxuICogICBwcmUtbGlua2luZyBhbmQgcG9zdC1saW5raW5nIGZ1bmN0aW9ucyBiZWxvdy5cbiAqXG4gKlxuICogIyMjIyBgbGlua2BcbiAqIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBvbmx5IGlmIHRoZSBgY29tcGlsZWAgcHJvcGVydHkgaXMgbm90IGRlZmluZWQuXG4gKlxuICogYGBganNcbiAqICAgZnVuY3Rpb24gbGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlciwgdHJhbnNjbHVkZUZuKSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgbGluayBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgcmVnaXN0ZXJpbmcgRE9NIGxpc3RlbmVycyBhcyB3ZWxsIGFzIHVwZGF0aW5nIHRoZSBET00uIEl0IGlzXG4gKiBleGVjdXRlZCBhZnRlciB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gY2xvbmVkLiBUaGlzIGlzIHdoZXJlIG1vc3Qgb2YgdGhlIGRpcmVjdGl2ZSBsb2dpYyB3aWxsIGJlXG4gKiBwdXQuXG4gKlxuICogICAqIGBzY29wZWAgLSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gLSBUaGUgc2NvcGUgdG8gYmUgdXNlZCBieSB0aGVcbiAqICAgICBkaXJlY3RpdmUgZm9yIHJlZ2lzdGVyaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVzfS5cbiAqXG4gKiAgICogYGlFbGVtZW50YCAtIGluc3RhbmNlIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGlzIHRvIGJlIHVzZWQuIEl0IGlzIHNhZmUgdG9cbiAqICAgICBtYW5pcHVsYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGUgZWxlbWVudCBvbmx5IGluIGBwb3N0TGlua2AgZnVuY3Rpb24gc2luY2UgdGhlIGNoaWxkcmVuIGhhdmVcbiAqICAgICBhbHJlYWR5IGJlZW4gbGlua2VkLlxuICpcbiAqICAgKiBgaUF0dHJzYCAtIGluc3RhbmNlIGF0dHJpYnV0ZXMgLSBOb3JtYWxpemVkIGxpc3Qgb2YgYXR0cmlidXRlcyBkZWNsYXJlZCBvbiB0aGlzIGVsZW1lbnQgc2hhcmVkXG4gKiAgICAgYmV0d2VlbiBhbGwgZGlyZWN0aXZlIGxpbmtpbmcgZnVuY3Rpb25zLlxuICpcbiAqICAgKiBgY29udHJvbGxlcmAgLSBhIGNvbnRyb2xsZXIgaW5zdGFuY2UgLSBBIGNvbnRyb2xsZXIgaW5zdGFuY2UgaWYgYXQgbGVhc3Qgb25lIGRpcmVjdGl2ZSBvbiB0aGVcbiAqICAgICBlbGVtZW50IGRlZmluZXMgYSBjb250cm9sbGVyLiBUaGUgY29udHJvbGxlciBpcyBzaGFyZWQgYW1vbmcgYWxsIHRoZSBkaXJlY3RpdmVzLCB3aGljaCBhbGxvd3NcbiAqICAgICB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGNvbnRyb2xsZXJzIGFzIGEgY29tbXVuaWNhdGlvbiBjaGFubmVsLlxuICpcbiAqICAgKiBgdHJhbnNjbHVkZUZuYCAtIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uIHByZS1ib3VuZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiAgICAgVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgYCR0cmFuc2NsdWRlYFxuICogICAgIHBhcmFtZXRlciBvZiBkaXJlY3RpdmUgY29udHJvbGxlcnMsIHNlZSB0aGVyZSBmb3IgZGV0YWlscy5cbiAqICAgICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpYC5cbiAqXG4gKiAjIyMjIFByZS1saW5raW5nIGZ1bmN0aW9uXG4gKlxuICogRXhlY3V0ZWQgYmVmb3JlIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLiBOb3Qgc2FmZSB0byBkbyBET00gdHJhbnNmb3JtYXRpb24gc2luY2UgdGhlXG4gKiBjb21waWxlciBsaW5raW5nIGZ1bmN0aW9uIHdpbGwgZmFpbCB0byBsb2NhdGUgdGhlIGNvcnJlY3QgZWxlbWVudHMgZm9yIGxpbmtpbmcuXG4gKlxuICogIyMjIyBQb3N0LWxpbmtpbmcgZnVuY3Rpb25cbiAqXG4gKiBFeGVjdXRlZCBhZnRlciB0aGUgY2hpbGQgZWxlbWVudHMgYXJlIGxpbmtlZC5cbiAqXG4gKiBOb3RlIHRoYXQgY2hpbGQgZWxlbWVudHMgdGhhdCBjb250YWluIGB0ZW1wbGF0ZVVybGAgZGlyZWN0aXZlcyB3aWxsIG5vdCBoYXZlIGJlZW4gY29tcGlsZWRcbiAqIGFuZCBsaW5rZWQgc2luY2UgdGhleSBhcmUgd2FpdGluZyBmb3IgdGhlaXIgdGVtcGxhdGUgdG8gbG9hZCBhc3luY2hyb25vdXNseSBhbmQgdGhlaXIgb3duXG4gKiBjb21waWxhdGlvbiBhbmQgbGlua2luZyBoYXMgYmVlbiBzdXNwZW5kZWQgdW50aWwgdGhhdCBvY2N1cnMuXG4gKlxuICogSXQgaXMgc2FmZSB0byBkbyBET00gdHJhbnNmb3JtYXRpb24gaW4gdGhlIHBvc3QtbGlua2luZyBmdW5jdGlvbiBvbiBlbGVtZW50cyB0aGF0IGFyZSBub3Qgd2FpdGluZ1xuICogZm9yIHRoZWlyIGFzeW5jIHRlbXBsYXRlcyB0byBiZSByZXNvbHZlZC5cbiAqXG4gKlxuICogIyMjIFRyYW5zY2x1c2lvblxuICpcbiAqIFRyYW5zY2x1c2lvbiBpcyB0aGUgcHJvY2VzcyBvZiBleHRyYWN0aW5nIGEgY29sbGVjdGlvbiBvZiBET00gZWxlbWVudCBmcm9tIG9uZSBwYXJ0IG9mIHRoZSBET00gYW5kXG4gKiBjb3B5aW5nIHRoZW0gdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBET00sIHdoaWxlIG1haW50YWluaW5nIHRoZWlyIGNvbm5lY3Rpb24gdG8gdGhlIG9yaWdpbmFsIEFuZ3VsYXJKU1xuICogc2NvcGUgZnJvbSB3aGVyZSB0aGV5IHdlcmUgdGFrZW4uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHVzZWQgKG9mdGVuIHdpdGgge0BsaW5rIG5nVHJhbnNjbHVkZX0pIHRvIGluc2VydCB0aGVcbiAqIG9yaWdpbmFsIGNvbnRlbnRzIG9mIGEgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbnRvIGEgc3BlY2lmaWVkIHBsYWNlIGluIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgZGlyZWN0aXZlLlxuICogVGhlIGJlbmVmaXQgb2YgdHJhbnNjbHVzaW9uLCBvdmVyIHNpbXBseSBtb3ZpbmcgdGhlIERPTSBlbGVtZW50cyBtYW51YWxseSwgaXMgdGhhdCB0aGUgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBvbiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdCB3YXMgdGFrZW4sIGV2ZW4gaWYgdGhlIGRpcmVjdGl2ZVxuICogaGFzIGlzb2xhdGVkIHNjb3BlLlxuICogU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI2NyZWF0aW5nLWEtZGlyZWN0aXZlLXRoYXQtd3JhcHMtb3RoZXItZWxlbWVudHMgRGlyZWN0aXZlcyBHdWlkZX0uXG4gKlxuICogVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgdGhlIHdpZGdldCB0byBoYXZlIHByaXZhdGUgc3RhdGUgZm9yIGl0cyB0ZW1wbGF0ZSwgd2hpbGUgdGhlIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGhhcyBhY2Nlc3MgdG8gaXRzIG9yaWdpbmF0aW5nIHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogV2hlbiB0ZXN0aW5nIGFuIGVsZW1lbnQgdHJhbnNjbHVkZSBkaXJlY3RpdmUgeW91IG11c3Qgbm90IHBsYWNlIHRoZSBkaXJlY3RpdmUgYXQgdGhlIHJvb3Qgb2YgdGhlXG4gKiBET00gZnJhZ21lbnQgdGhhdCBpcyBiZWluZyBjb21waWxlZC4gU2VlIHtAbGluayBndWlkZS91bml0LXRlc3RpbmcjdGVzdGluZy10cmFuc2NsdXNpb24tZGlyZWN0aXZlc1xuICogVGVzdGluZyBUcmFuc2NsdXNpb24gRGlyZWN0aXZlc30uXG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyMjIFRyYW5zY2x1c2lvbiBGdW5jdGlvbnNcbiAqXG4gKiBXaGVuIGEgZGlyZWN0aXZlIHJlcXVlc3RzIHRyYW5zY2x1c2lvbiwgdGhlIGNvbXBpbGVyIGV4dHJhY3RzIGl0cyBjb250ZW50cyBhbmQgcHJvdmlkZXMgYSAqKnRyYW5zY2x1c2lvblxuICogZnVuY3Rpb24qKiB0byB0aGUgZGlyZWN0aXZlJ3MgYGxpbmtgIGZ1bmN0aW9uIGFuZCBgY29udHJvbGxlcmAuIFRoaXMgdHJhbnNjbHVzaW9uIGZ1bmN0aW9uIGlzIGEgc3BlY2lhbFxuICogKipsaW5raW5nIGZ1bmN0aW9uKiogdGhhdCB3aWxsIHJldHVybiB0aGUgY29tcGlsZWQgY29udGVudHMgbGlua2VkIHRvIGEgbmV3IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogSWYgeW91IGFyZSBqdXN0IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRoZW4geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhpcyBmdW5jdGlvbiwgc2luY2VcbiAqIG5nVHJhbnNjbHVkZSB3aWxsIGRlYWwgd2l0aCBpdCBmb3IgdXMuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byBtYW51YWxseSBjb250cm9sIHRoZSBpbnNlcnRpb24gYW5kIHJlbW92YWwgb2YgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaW4geW91ciBkaXJlY3RpdmVcbiAqIHRoZW4geW91IG11c3QgdXNlIHRoaXMgdHJhbnNjbHVkZSBmdW5jdGlvbi4gV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb24gaXQgcmV0dXJucyBhIGEganFMaXRlL0pRdWVyeVxuICogb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGNvbXBpbGVkIERPTSwgd2hpY2ggaXMgbGlua2VkIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqXG4gKiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVzaW9uIGZ1bmN0aW9uIHlvdSBjYW4gcGFzcyBpbiBhICoqY2xvbmUgYXR0YWNoIGZ1bmN0aW9uKiouIFRoaXMgZnVuY3Rpb24gYWNjZXB0c1xuICogdHdvIHBhcmFtZXRlcnMsIGBmdW5jdGlvbihjbG9uZSwgc2NvcGUpIHsgLi4uIH1gLCB3aGVyZSB0aGUgYGNsb25lYCBpcyBhIGZyZXNoIGNvbXBpbGVkIGNvcHkgb2YgeW91ciB0cmFuc2NsdWRlZFxuICogY29udGVudCBhbmQgdGhlIGBzY29wZWAgaXMgdGhlIG5ld2x5IGNyZWF0ZWQgdHJhbnNjbHVzaW9uIHNjb3BlLCB0byB3aGljaCB0aGUgY2xvbmUgaXMgYm91bmQuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqQmVzdCBQcmFjdGljZSoqOiBBbHdheXMgcHJvdmlkZSBhIGBjbG9uZUZuYCAoY2xvbmUgYXR0YWNoIGZ1bmN0aW9uKSB3aGVuIHlvdSBjYWxsIGEgdHJhbnNsdWRlIGZ1bmN0aW9uXG4gKiBzaW5jZSB5b3UgdGhlbiBnZXQgYSBmcmVzaCBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgRE9NIGFuZCBhbHNvIGhhdmUgYWNjZXNzIHRvIHRoZSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogPC9kaXY+XG4gKlxuICogSXQgaXMgbm9ybWFsIHByYWN0aWNlIHRvIGF0dGFjaCB5b3VyIHRyYW5zY2x1ZGVkIGNvbnRlbnQgKGBjbG9uZWApIHRvIHRoZSBET00gaW5zaWRlIHlvdXIgKipjbG9uZVxuICogYXR0YWNoIGZ1bmN0aW9uKio6XG4gKlxuICogYGBganNcbiAqIHZhciB0cmFuc2NsdWRlZENvbnRlbnQsIHRyYW5zY2x1c2lvblNjb3BlO1xuICpcbiAqICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lLCBzY29wZSkge1xuICogICBlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gKiAgIHRyYW5zY2x1ZGVkQ29udGVudCA9IGNsb25lO1xuICogICB0cmFuc2NsdXNpb25TY29wZSA9IHNjb3BlO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBMYXRlciwgaWYgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGZyb20geW91ciBET00gdGhlbiB5b3Ugc2hvdWxkIGFsc28gZGVzdHJveSB0aGVcbiAqIGFzc29jaWF0ZWQgdHJhbnNjbHVzaW9uIHNjb3BlOlxuICpcbiAqIGBgYGpzXG4gKiB0cmFuc2NsdWRlZENvbnRlbnQucmVtb3ZlKCk7XG4gKiB0cmFuc2NsdXNpb25TY29wZS4kZGVzdHJveSgpO1xuICogYGBgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqQmVzdCBQcmFjdGljZSoqOiBpZiB5b3UgaW50ZW5kIHRvIGFkZCBhbmQgcmVtb3ZlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgbWFudWFsbHkgaW4geW91ciBkaXJlY3RpdmVcbiAqIChieSBjYWxsaW5nIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHRvIGdldCB0aGUgRE9NIGFuZCBhbmQgY2FsbGluZyBgZWxlbWVudC5yZW1vdmUoKWAgdG8gcmVtb3ZlIGl0KSxcbiAqIHRoZW4geW91IGFyZSBhbHNvIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIGAkZGVzdHJveWAgb24gdGhlIHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqIDwvZGl2PlxuICpcbiAqIFRoZSBidWlsdC1pbiBET00gbWFuaXB1bGF0aW9uIGRpcmVjdGl2ZXMsIHN1Y2ggYXMge0BsaW5rIG5nSWZ9LCB7QGxpbmsgbmdTd2l0Y2h9IGFuZCB7QGxpbmsgbmdSZXBlYXR9XG4gKiBhdXRvbWF0aWNhbGx5IGRlc3Ryb3kgdGhlaXIgdHJhbnNsdWRlZCBjbG9uZXMgYXMgbmVjZXNzYXJ5IHNvIHlvdSBkbyBub3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGlzIGlmXG4gKiB5b3UgYXJlIHNpbXBseSB1c2luZyB7QGxpbmsgbmdUcmFuc2NsdWRlfSB0byBpbmplY3QgdGhlIHRyYW5zY2x1c2lvbiBpbnRvIHlvdXIgZGlyZWN0aXZlLlxuICpcbiAqXG4gKiAjIyMjIFRyYW5zY2x1c2lvbiBTY29wZXNcbiAqXG4gKiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVkZSBmdW5jdGlvbiBpdCByZXR1cm5zIGEgRE9NIGZyYWdtZW50IHRoYXQgaXMgcHJlLWJvdW5kIHRvIGEgKip0cmFuc2NsdXNpb25cbiAqIHNjb3BlKiouIFRoaXMgc2NvcGUgaXMgc3BlY2lhbCwgaW4gdGhhdCBpdCBpcyBhIGNoaWxkIG9mIHRoZSBkaXJlY3RpdmUncyBzY29wZSAoYW5kIHNvIGdldHMgZGVzdHJveWVkXG4gKiB3aGVuIHRoZSBkaXJlY3RpdmUncyBzY29wZSBnZXRzIGRlc3Ryb3llZCkgYnV0IGl0IGluaGVyaXRzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBzY29wZSBmcm9tIHdoaWNoIGl0XG4gKiB3YXMgdGFrZW4uXG4gKlxuICogRm9yIGV4YW1wbGUgY29uc2lkZXIgYSBkaXJlY3RpdmUgdGhhdCB1c2VzIHRyYW5zY2x1c2lvbiBhbmQgaXNvbGF0ZWQgc2NvcGUuIFRoZSBET00gaGllcmFyY2h5IG1pZ2h0IGxvb2tcbiAqIGxpa2UgdGhpczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLWFwcD5cbiAqICAgPGRpdiBpc29sYXRlPlxuICogICAgIDxkaXYgdHJhbnNjbHVzaW9uPlxuICogICAgIDwvZGl2PlxuICogICA8L2Rpdj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogVGhlIGAkcGFyZW50YCBzY29wZSBoaWVyYXJjaHkgd2lsbCBsb29rIGxpa2UgdGhpczpcbiAqXG4gKiBgYGBcbiAqIC0gJHJvb3RTY29wZVxuICogICAtIGlzb2xhdGVcbiAqICAgICAtIHRyYW5zY2x1c2lvblxuICogYGBgXG4gKlxuICogYnV0IHRoZSBzY29wZXMgd2lsbCBpbmhlcml0IHByb3RvdHlwaWNhbGx5IGZyb20gZGlmZmVyZW50IHNjb3BlcyB0byB0aGVpciBgJHBhcmVudGAuXG4gKlxuICogYGBgXG4gKiAtICRyb290U2NvcGVcbiAqICAgLSB0cmFuc2NsdXNpb25cbiAqIC0gaXNvbGF0ZVxuICogYGBgXG4gKlxuICpcbiAqICMjIyBBdHRyaWJ1dGVzXG4gKlxuICogVGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyBBdHRyaWJ1dGVzfSBvYmplY3QgLSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIgaW4gdGhlXG4gKiBgbGluaygpYCBvciBgY29tcGlsZSgpYCBmdW5jdGlvbnMuIEl0IGhhcyBhIHZhcmlldHkgb2YgdXNlcy5cbiAqXG4gKiBhY2Nlc3NpbmcgKk5vcm1hbGl6ZWQgYXR0cmlidXRlIG5hbWVzOipcbiAqIERpcmVjdGl2ZXMgbGlrZSAnbmdCaW5kJyBjYW4gYmUgZXhwcmVzc2VkIGluIG1hbnkgd2F5czogJ25nOmJpbmQnLCBgZGF0YS1uZy1iaW5kYCwgb3IgJ3gtbmctYmluZCcuXG4gKiB0aGUgYXR0cmlidXRlcyBvYmplY3QgYWxsb3dzIGZvciBub3JtYWxpemVkIGFjY2VzcyB0b1xuICogICB0aGUgYXR0cmlidXRlcy5cbiAqXG4gKiAqICpEaXJlY3RpdmUgaW50ZXItY29tbXVuaWNhdGlvbjoqIEFsbCBkaXJlY3RpdmVzIHNoYXJlIHRoZSBzYW1lIGluc3RhbmNlIG9mIHRoZSBhdHRyaWJ1dGVzXG4gKiAgIG9iamVjdCB3aGljaCBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gdXNlIHRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhcyBpbnRlciBkaXJlY3RpdmVcbiAqICAgY29tbXVuaWNhdGlvbi5cbiAqXG4gKiAqICpTdXBwb3J0cyBpbnRlcnBvbGF0aW9uOiogSW50ZXJwb2xhdGlvbiBhdHRyaWJ1dGVzIGFyZSBhc3NpZ25lZCB0byB0aGUgYXR0cmlidXRlIG9iamVjdFxuICogICBhbGxvd2luZyBvdGhlciBkaXJlY3RpdmVzIHRvIHJlYWQgdGhlIGludGVycG9sYXRlZCB2YWx1ZS5cbiAqXG4gKiAqICpPYnNlcnZpbmcgaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZXM6KiBVc2UgYCRvYnNlcnZlYCB0byBvYnNlcnZlIHRoZSB2YWx1ZSBjaGFuZ2VzIG9mIGF0dHJpYnV0ZXNcbiAqICAgdGhhdCBjb250YWluIGludGVycG9sYXRpb24gKGUuZy4gYHNyYz1cInt7YmFyfX1cImApLiBOb3Qgb25seSBpcyB0aGlzIHZlcnkgZWZmaWNpZW50IGJ1dCBpdCdzIGFsc29cbiAqICAgdGhlIG9ubHkgd2F5IHRvIGVhc2lseSBnZXQgdGhlIGFjdHVhbCB2YWx1ZSBiZWNhdXNlIGR1cmluZyB0aGUgbGlua2luZyBwaGFzZSB0aGUgaW50ZXJwb2xhdGlvblxuICogICBoYXNuJ3QgYmVlbiBldmFsdWF0ZWQgeWV0IGFuZCBzbyB0aGUgdmFsdWUgaXMgYXQgdGhpcyB0aW1lIHNldCB0byBgdW5kZWZpbmVkYC5cbiAqXG4gKiBgYGBqc1xuICogZnVuY3Rpb24gbGlua2luZ0ZuKHNjb3BlLCBlbG0sIGF0dHJzLCBjdHJsKSB7XG4gKiAgIC8vIGdldCB0aGUgYXR0cmlidXRlIHZhbHVlXG4gKiAgIGNvbnNvbGUubG9nKGF0dHJzLm5nTW9kZWwpO1xuICpcbiAqICAgLy8gY2hhbmdlIHRoZSBhdHRyaWJ1dGVcbiAqICAgYXR0cnMuJHNldCgnbmdNb2RlbCcsICduZXcgdmFsdWUnKTtcbiAqXG4gKiAgIC8vIG9ic2VydmUgY2hhbmdlcyB0byBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlXG4gKiAgIGF0dHJzLiRvYnNlcnZlKCduZ01vZGVsJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICBjb25zb2xlLmxvZygnbmdNb2RlbCBoYXMgY2hhbmdlZCB2YWx1ZSB0byAnICsgdmFsdWUpO1xuICogICB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlKio6IFR5cGljYWxseSBkaXJlY3RpdmVzIGFyZSByZWdpc3RlcmVkIHdpdGggYG1vZHVsZS5kaXJlY3RpdmVgLiBUaGUgZXhhbXBsZSBiZWxvdyBpc1xuICogdG8gaWxsdXN0cmF0ZSBob3cgYCRjb21waWxlYCB3b3Jrcy5cbiAqIDwvZGl2PlxuICpcbiA8ZXhhbXBsZSBtb2R1bGU9XCJjb21waWxlRXhhbXBsZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2NvbXBpbGVFeGFtcGxlJywgW10sIGZ1bmN0aW9uKCRjb21waWxlUHJvdmlkZXIpIHtcbiAgICAgICAgLy8gY29uZmlndXJlIG5ldyAnY29tcGlsZScgZGlyZWN0aXZlIGJ5IHBhc3NpbmcgYSBkaXJlY3RpdmVcbiAgICAgICAgLy8gZmFjdG9yeSBmdW5jdGlvbi4gVGhlIGZhY3RvcnkgZnVuY3Rpb24gaW5qZWN0cyB0aGUgJyRjb21waWxlJ1xuICAgICAgICAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgnY29tcGlsZScsIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gICAgICAgICAgLy8gZGlyZWN0aXZlIGZhY3RvcnkgY3JlYXRlcyBhIGxpbmsgZnVuY3Rpb25cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgIC8vIHdhdGNoIHRoZSAnY29tcGlsZScgZXhwcmVzc2lvbiBmb3IgY2hhbmdlc1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS4kZXZhbChhdHRycy5jb21waWxlKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSAnY29tcGlsZScgZXhwcmVzc2lvbiBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgLy8gYXNzaWduIGl0IGludG8gdGhlIGN1cnJlbnQgRE9NXG4gICAgICAgICAgICAgICAgZWxlbWVudC5odG1sKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGUgdGhlIG5ldyBET00gYW5kIGxpbmsgaXQgdG8gdGhlIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAvLyBzY29wZS5cbiAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBvbmx5IGNvbXBpbGUgLmNoaWxkTm9kZXMgc28gdGhhdFxuICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IGdldCBpbnRvIGluZmluaXRlIGxvb3AgY29tcGlsaW5nIG91cnNlbHZlc1xuICAgICAgICAgICAgICAgICRjb21waWxlKGVsZW1lbnQuY29udGVudHMoKSkoc2NvcGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jb250cm9sbGVyKCdHcmVldGVyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICRzY29wZS5uYW1lID0gJ0FuZ3VsYXInO1xuICAgICAgICAkc2NvcGUuaHRtbCA9ICdIZWxsbyB7e25hbWV9fSc7XG4gICAgICB9XSk7XG4gICAgPC9zY3JpcHQ+XG4gICAgPGRpdiBuZy1jb250cm9sbGVyPVwiR3JlZXRlckNvbnRyb2xsZXJcIj5cbiAgICAgIDxpbnB1dCBuZy1tb2RlbD1cIm5hbWVcIj4gPGJyPlxuICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwiaHRtbFwiPjwvdGV4dGFyZWE+IDxicj5cbiAgICAgIDxkaXYgY29tcGlsZT1cImh0bWxcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgaXQoJ3Nob3VsZCBhdXRvIGNvbXBpbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICB2YXIgdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScpO1xuICAgICAgIHZhciBvdXRwdXQgPSAkKCdkaXZbY29tcGlsZV0nKTtcbiAgICAgICAvLyBUaGUgaW5pdGlhbCBzdGF0ZSByZWFkcyAnSGVsbG8gQW5ndWxhcicuXG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIEFuZ3VsYXInKTtcbiAgICAgICB0ZXh0YXJlYS5jbGVhcigpO1xuICAgICAgIHRleHRhcmVhLnNlbmRLZXlzKCd7e25hbWV9fSEnKTtcbiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9CZSgnQW5ndWxhciEnKTtcbiAgICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBvciBIVE1MIHN0cmluZyB0byBjb21waWxlIGludG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzLlxuICogQHBhcmFtIHtudW1iZXJ9IG1heFByaW9yaXR5IG9ubHkgYXBwbHkgZGlyZWN0aXZlcyBsb3dlciB0aGFuIGdpdmVuIHByaW9yaXR5IChPbmx5IGVmZmVjdHMgdGhlXG4gKiAgICAgICAgICAgICAgICAgcm9vdCBlbGVtZW50KHMpLCBub3QgdGhlaXIgY2hpbGRyZW4pXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc2NvcGUsIGNsb25lQXR0YWNoRm49KX0gYSBsaW5rIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gYmluZCB0ZW1wbGF0ZVxuICogKGEgRE9NIGVsZW1lbnQvdHJlZSkgdG8gYSBzY29wZS4gV2hlcmU6XG4gKlxuICogICogYHNjb3BlYCAtIEEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IHRvIGJpbmQgdG8uXG4gKiAgKiBgY2xvbmVBdHRhY2hGbmAgLSBJZiBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGxpbmsgZnVuY3Rpb24gd2lsbCBjbG9uZSB0aGVcbiAqICBgdGVtcGxhdGVgIGFuZCBjYWxsIHRoZSBgY2xvbmVBdHRhY2hGbmAgZnVuY3Rpb24gYWxsb3dpbmcgdGhlIGNhbGxlciB0byBhdHRhY2ggdGhlXG4gKiAgY2xvbmVkIGVsZW1lbnRzIHRvIHRoZSBET00gZG9jdW1lbnQgYXQgdGhlIGFwcHJvcHJpYXRlIHBsYWNlLiBUaGUgYGNsb25lQXR0YWNoRm5gIGlzXG4gKiAgY2FsbGVkIGFzOiA8YnI+IGBjbG9uZUF0dGFjaEZuKGNsb25lZEVsZW1lbnQsIHNjb3BlKWAgd2hlcmU6XG4gKlxuICogICAgICAqIGBjbG9uZWRFbGVtZW50YCAtIGlzIGEgY2xvbmUgb2YgdGhlIG9yaWdpbmFsIGBlbGVtZW50YCBwYXNzZWQgaW50byB0aGUgY29tcGlsZXIuXG4gKiAgICAgICogYHNjb3BlYCAtIGlzIHRoZSBjdXJyZW50IHNjb3BlIHdpdGggd2hpY2ggdGhlIGxpbmtpbmcgZnVuY3Rpb24gaXMgd29ya2luZyB3aXRoLlxuICpcbiAqIENhbGxpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgdGVtcGxhdGUuIEl0IGlzIGVpdGhlciB0aGUgb3JpZ2luYWxcbiAqIGVsZW1lbnQgcGFzc2VkIGluLCBvciB0aGUgY2xvbmUgb2YgdGhlIGVsZW1lbnQgaWYgdGhlIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZC5cbiAqXG4gKiBBZnRlciBsaW5raW5nIHRoZSB2aWV3IGlzIG5vdCB1cGRhdGVkIHVudGlsIGFmdGVyIGEgY2FsbCB0byAkZGlnZXN0IHdoaWNoIHR5cGljYWxseSBpcyBkb25lIGJ5XG4gKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogSWYgeW91IG5lZWQgYWNjZXNzIHRvIHRoZSBib3VuZCB2aWV3LCB0aGVyZSBhcmUgdHdvIHdheXMgdG8gZG8gaXQ6XG4gKlxuICogLSBJZiB5b3UgYXJlIG5vdCBhc2tpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gdG8gY2xvbmUgdGhlIHRlbXBsYXRlLCBjcmVhdGUgdGhlIERPTSBlbGVtZW50KHMpXG4gKiAgIGJlZm9yZSB5b3Ugc2VuZCB0aGVtIHRvIHRoZSBjb21waWxlciBhbmQga2VlcCB0aGlzIHJlZmVyZW5jZSBhcm91bmQuXG4gKiAgIGBgYGpzXG4gKiAgICAgdmFyIGVsZW1lbnQgPSAkY29tcGlsZSgnPHA+e3t0b3RhbH19PC9wPicpKHNjb3BlKTtcbiAqICAgYGBgXG4gKlxuICogLSBpZiBvbiB0aGUgb3RoZXIgaGFuZCwgeW91IG5lZWQgdGhlIGVsZW1lbnQgdG8gYmUgY2xvbmVkLCB0aGUgdmlldyByZWZlcmVuY2UgZnJvbSB0aGUgb3JpZ2luYWxcbiAqICAgZXhhbXBsZSB3b3VsZCBub3QgcG9pbnQgdG8gdGhlIGNsb25lLCBidXQgcmF0aGVyIHRvIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB0aGF0IHdhcyBjbG9uZWQuIEluXG4gKiAgIHRoaXMgY2FzZSwgeW91IGNhbiBhY2Nlc3MgdGhlIGNsb25lIHZpYSB0aGUgY2xvbmVBdHRhY2hGbjpcbiAqICAgYGBganNcbiAqICAgICB2YXIgdGVtcGxhdGVFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCc8cD57e3RvdGFsfX08L3A+JyksXG4gKiAgICAgICAgIHNjb3BlID0gLi4uLjtcbiAqXG4gKiAgICAgdmFyIGNsb25lZEVsZW1lbnQgPSAkY29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpKHNjb3BlLCBmdW5jdGlvbihjbG9uZWRFbGVtZW50LCBzY29wZSkge1xuICogICAgICAgLy9hdHRhY2ggdGhlIGNsb25lIHRvIERPTSBkb2N1bWVudCBhdCB0aGUgcmlnaHQgcGxhY2VcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgLy9ub3cgd2UgaGF2ZSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBET00gdmlhIGBjbG9uZWRFbGVtZW50YFxuICogICBgYGBcbiAqXG4gKlxuICogRm9yIGluZm9ybWF0aW9uIG9uIGhvdyB0aGUgY29tcGlsZXIgd29ya3MsIHNlZSB0aGVcbiAqIHtAbGluayBndWlkZS9jb21waWxlciBBbmd1bGFyIEhUTUwgQ29tcGlsZXJ9IHNlY3Rpb24gb2YgdGhlIERldmVsb3BlciBHdWlkZS5cbiAqL1xuXG52YXIgJGNvbXBpbGVNaW5FcnIgPSBtaW5FcnIoJyRjb21waWxlJyk7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKi9cbiRDb21waWxlUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnLCAnJCRzYW5pdGl6ZVVyaVByb3ZpZGVyJ107XG5mdW5jdGlvbiAkQ29tcGlsZVByb3ZpZGVyKCRwcm92aWRlLCAkJHNhbml0aXplVXJpUHJvdmlkZXIpIHtcbiAgdmFyIGhhc0RpcmVjdGl2ZXMgPSB7fSxcbiAgICAgIFN1ZmZpeCA9ICdEaXJlY3RpdmUnLFxuICAgICAgQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQID0gL15cXHMqZGlyZWN0aXZlXFw6XFxzKihbXFx3XFwtXSspXFxzKyguKikkLyxcbiAgICAgIENMQVNTX0RJUkVDVElWRV9SRUdFWFAgPSAvKChbXFx3XFwtXSspKD86XFw6KFteO10rKSk/Oz8pLyxcbiAgICAgIEFMTF9PUl9OT1RISU5HX0FUVFJTID0gbWFrZU1hcCgnbmdTcmMsbmdTcmNzZXQsc3JjLHNyY3NldCcpLFxuICAgICAgUkVRVUlSRV9QUkVGSVhfUkVHRVhQID0gL14oPzooXFxeXFxePyk/KFxcPyk/KFxcXlxcXj8pPyk/LztcblxuICAvLyBSZWY6IGh0dHA6Ly9kZXZlbG9wZXJzLndoYXR3Zy5vcmcvd2ViYXBwYXBpcy5odG1sI2V2ZW50LWhhbmRsZXItaWRsLWF0dHJpYnV0ZXNcbiAgLy8gVGhlIGFzc3VtcHRpb24gaXMgdGhhdCBmdXR1cmUgRE9NIGV2ZW50IGF0dHJpYnV0ZSBuYW1lcyB3aWxsIGJlZ2luIHdpdGhcbiAgLy8gJ29uJyBhbmQgYmUgY29tcG9zZWQgb2Ygb25seSBFbmdsaXNoIGxldHRlcnMuXG4gIHZhciBFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQID0gL14ob25bYS16XSt8Zm9ybWFjdGlvbikkLztcblxuICBmdW5jdGlvbiBwYXJzZUlzb2xhdGVCaW5kaW5ncyhzY29wZSwgZGlyZWN0aXZlTmFtZSkge1xuICAgIHZhciBMT0NBTF9SRUdFWFAgPSAvXlxccyooW0AmXXw9KFxcKj8pKShcXD8/KVxccyooXFx3KilcXHMqJC87XG5cbiAgICB2YXIgYmluZGluZ3MgPSB7fTtcblxuICAgIGZvckVhY2goc2NvcGUsIGZ1bmN0aW9uKGRlZmluaXRpb24sIHNjb3BlTmFtZSkge1xuICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdGlvbi5tYXRjaChMT0NBTF9SRUdFWFApO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJyxcbiAgICAgICAgICAgIFwiSW52YWxpZCBpc29sYXRlIHNjb3BlIGRlZmluaXRpb24gZm9yIGRpcmVjdGl2ZSAnezB9Jy5cIiArXG4gICAgICAgICAgICBcIiBEZWZpbml0aW9uOiB7Li4uIHsxfTogJ3syfScgLi4ufVwiLFxuICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgc2NvcGVOYW1lLCBkZWZpbml0aW9uKTtcbiAgICAgIH1cblxuICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IHtcbiAgICAgICAgbW9kZTogbWF0Y2hbMV1bMF0sXG4gICAgICAgIGNvbGxlY3Rpb246IG1hdGNoWzJdID09PSAnKicsXG4gICAgICAgIG9wdGlvbmFsOiBtYXRjaFszXSA9PT0gJz8nLFxuICAgICAgICBhdHRyTmFtZTogbWF0Y2hbNF0gfHwgc2NvcGVOYW1lXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJpbmRpbmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGEgbmV3IGRpcmVjdGl2ZSB3aXRoIHRoZSBjb21waWxlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBpbiBjYW1lbC1jYXNlIChpLmUuIDxjb2RlPm5nQmluZDwvY29kZT4gd2hpY2hcbiAgICogICAgd2lsbCBtYXRjaCBhcyA8Y29kZT5uZy1iaW5kPC9jb2RlPiksIG9yIGFuIG9iamVjdCBtYXAgb2YgZGlyZWN0aXZlcyB3aGVyZSB0aGUga2V5cyBhcmUgdGhlXG4gICAqICAgIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBkaXJlY3RpdmVGYWN0b3J5IEFuIGluamVjdGFibGUgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24uIFNlZVxuICAgKiAgICB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlfSBmb3IgbW9yZSBpbmZvLlxuICAgKiBAcmV0dXJucyB7bmcuJGNvbXBpbGVQcm92aWRlcn0gU2VsZiBmb3IgY2hhaW5pbmcuXG4gICAqL1xuICAgdGhpcy5kaXJlY3RpdmUgPSBmdW5jdGlvbiByZWdpc3RlckRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmVGYWN0b3J5KSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2RpcmVjdGl2ZScpO1xuICAgIGlmIChpc1N0cmluZyhuYW1lKSkge1xuICAgICAgYXNzZXJ0QXJnKGRpcmVjdGl2ZUZhY3RvcnksICdkaXJlY3RpdmVGYWN0b3J5Jyk7XG4gICAgICBpZiAoIWhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXSA9IFtdO1xuICAgICAgICAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBTdWZmaXgsIFsnJGluamVjdG9yJywgJyRleGNlcHRpb25IYW5kbGVyJyxcbiAgICAgICAgICBmdW5jdGlvbigkaW5qZWN0b3IsICRleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xuICAgICAgICAgICAgZm9yRWFjaChoYXNEaXJlY3RpdmVzW25hbWVdLCBmdW5jdGlvbihkaXJlY3RpdmVGYWN0b3J5LCBpbmRleCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBkaXJlY3RpdmUgPSAkaW5qZWN0b3IuaW52b2tlKGRpcmVjdGl2ZUZhY3RvcnkpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSA9IHsgY29tcGlsZTogdmFsdWVGbihkaXJlY3RpdmUpIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGlyZWN0aXZlLmNvbXBpbGUgJiYgZGlyZWN0aXZlLmxpbmspIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5jb21waWxlID0gdmFsdWVGbihkaXJlY3RpdmUubGluayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5wcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eSB8fCAwO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5pbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5uYW1lID0gZGlyZWN0aXZlLm5hbWUgfHwgbmFtZTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlIHx8IChkaXJlY3RpdmUuY29udHJvbGxlciAmJiBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZGlyZWN0aXZlLnJlc3RyaWN0IHx8ICdFQSc7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZS5zY29wZSkpIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkaXJlY3RpdmVzO1xuICAgICAgICAgIH1dKTtcbiAgICAgIH1cbiAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0ucHVzaChkaXJlY3RpdmVGYWN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaChuYW1lLCByZXZlcnNlUGFyYW1zKHJlZ2lzdGVyRGlyZWN0aXZlKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCgpO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChyZWdleHApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWRcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gZW5hYmxlZCB1cGRhdGUgdGhlIGRlYnVnSW5mb0VuYWJsZWQgc3RhdGUgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSBqdXN0IHJldHVybiB0aGVcbiAgICogY3VycmVudCBkZWJ1Z0luZm9FbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHZhcmlvdXMgZGVidWcgcnVudGltZSBpbmZvcm1hdGlvbiBpbiB0aGUgY29tcGlsZXIgc3VjaCBhcyBhZGRpbmdcbiAgICogYmluZGluZyBpbmZvcm1hdGlvbiBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgc2NvcGUgb24gdG8gRE9NIGVsZW1lbnRzLlxuICAgKiBJZiBlbmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBhZGQgdGhlIGZvbGxvd2luZyB0byBET00gZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gYm91bmQgdG8gdGhlIHNjb3BlXG4gICAqICogYG5nLWJpbmRpbmdgIENTUyBjbGFzc1xuICAgKiAqIGAkYmluZGluZ2AgZGF0YSBwcm9wZXJ0eSBjb250YWluaW5nIGFuIGFycmF5IG9mIHRoZSBiaW5kaW5nIGV4cHJlc3Npb25zXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byB1c2UgdGhpcyBpbiBwcm9kdWN0aW9uIGZvciBhIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGJvb3N0LiBTZWVcbiAgICoge0BsaW5rIGd1aWRlL3Byb2R1Y3Rpb24jZGlzYWJsaW5nLWRlYnVnLWRhdGEgRGlzYWJsaW5nIERlYnVnIERhdGF9IGZvciBtb3JlLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgdmFyIGRlYnVnSW5mb0VuYWJsZWQgPSB0cnVlO1xuICB0aGlzLmRlYnVnSW5mb0VuYWJsZWQgPSBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZChlbmFibGVkKSkge1xuICAgICAgZGVidWdJbmZvRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGRlYnVnSW5mb0VuYWJsZWQ7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gW1xuICAgICAgICAgICAgJyRpbmplY3RvcicsICckaW50ZXJwb2xhdGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHRlbXBsYXRlUmVxdWVzdCcsICckcGFyc2UnLFxuICAgICAgICAgICAgJyRjb250cm9sbGVyJywgJyRyb290U2NvcGUnLCAnJGRvY3VtZW50JywgJyRzY2UnLCAnJGFuaW1hdGUnLCAnJCRzYW5pdGl6ZVVyaScsXG4gICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICRpbnRlcnBvbGF0ZSwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkdGVtcGxhdGVSZXF1ZXN0LCAgICRwYXJzZSxcbiAgICAgICAgICAgICAkY29udHJvbGxlciwgICAkcm9vdFNjb3BlLCAgICRkb2N1bWVudCwgICAkc2NlLCAgICRhbmltYXRlLCAgICQkc2FuaXRpemVVcmkpIHtcblxuICAgIHZhciBBdHRyaWJ1dGVzID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlc1RvQ29weSkge1xuICAgICAgaWYgKGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzVG9Db3B5KTtcbiAgICAgICAgdmFyIGksIGwsIGtleTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIHRoaXNba2V5XSA9IGF0dHJpYnV0ZXNUb0NvcHlba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kYXR0ciA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLiQkZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfTtcblxuICAgIEF0dHJpYnV0ZXMucHJvdG90eXBlID0ge1xuICAgICAgJG5vcm1hbGl6ZTogZGlyZWN0aXZlTm9ybWFsaXplLFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGFkZENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQWRkcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIHRvIHRoZSBlbGVtZW50LiBJZiBhbmltYXRpb25zXG4gICAgICAgKiBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIGFkZGl0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudFxuICAgICAgICovXG4gICAgICAkYWRkQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7XG4gICAgICAgIGlmIChjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkcmVtb3ZlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZW1vdmVzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgZnJvbSB0aGUgZWxlbWVudC4gSWZcbiAgICAgICAqIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyByZW1vdmFsLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgJHJlbW92ZUNsYXNzOiBmdW5jdGlvbihjbGFzc1ZhbCkge1xuICAgICAgICBpZiAoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBjbGFzc1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHVwZGF0ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQWRkcyBhbmQgcmVtb3ZlcyB0aGUgYXBwcm9wcmlhdGUgQ1NTIGNsYXNzIHZhbHVlcyB0byB0aGUgZWxlbWVudCBiYXNlZCBvbiB0aGUgZGlmZmVyZW5jZVxuICAgICAgICogYmV0d2VlbiB0aGUgbmV3IGFuZCBvbGQgQ1NTIGNsYXNzIHZhbHVlcyAoc3BlY2lmaWVkIGFzIG5ld0NsYXNzZXMgYW5kIG9sZENsYXNzZXMpLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdDbGFzc2VzIFRoZSBjdXJyZW50IENTUyBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRDbGFzc2VzIFRoZSBmb3JtZXIgQ1NTIGNsYXNzTmFtZSB2YWx1ZVxuICAgICAgICovXG4gICAgICAkdXBkYXRlQ2xhc3M6IGZ1bmN0aW9uKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpIHtcbiAgICAgICAgdmFyIHRvQWRkID0gdG9rZW5EaWZmZXJlbmNlKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpO1xuICAgICAgICBpZiAodG9BZGQgJiYgdG9BZGQubGVuZ3RoKSB7XG4gICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvQWRkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b1JlbW92ZSA9IHRva2VuRGlmZmVyZW5jZShvbGRDbGFzc2VzLCBuZXdDbGFzc2VzKTtcbiAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCB0b1JlbW92ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0IGEgbm9ybWFsaXplZCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaW4gYSB3YXkgc3VjaCB0aGF0IGFsbCBkaXJlY3RpdmVzXG4gICAgICAgKiBjYW4gc2hhcmUgdGhlIGF0dHJpYnV0ZS4gVGhpcyBmdW5jdGlvbiBwcm9wZXJseSBoYW5kbGVzIGJvb2xlYW4gYXR0cmlidXRlcy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSlcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuIElmIGBudWxsYCBhdHRyaWJ1dGUgd2lsbCBiZSBkZWxldGVkLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gd3JpdGVBdHRyIElmIGZhbHNlLCBkb2VzIG5vdCB3cml0ZSB0aGUgdmFsdWUgdG8gRE9NIGVsZW1lbnQgYXR0cmlidXRlLlxuICAgICAgICogICAgIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJOYW1lIE9wdGlvbmFsIG5vbmUgbm9ybWFsaXplZCBuYW1lLiBEZWZhdWx0cyB0byBrZXkuXG4gICAgICAgKi9cbiAgICAgICRzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHdyaXRlQXR0ciwgYXR0ck5hbWUpIHtcbiAgICAgICAgLy8gVE9ETzogZGVjaWRlIHdoZXRoZXIgb3Igbm90IHRvIHRocm93IGFuIGVycm9yIGlmIFwiY2xhc3NcIlxuICAgICAgICAvL2lzIHNldCB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc2luY2UgaXQgbWF5IGNhdXNlICR1cGRhdGVDbGFzcyB0b1xuICAgICAgICAvL2JlY29tZSB1bnN0YWJsZS5cblxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuJCRlbGVtZW50WzBdLFxuICAgICAgICAgICAgYm9vbGVhbktleSA9IGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBrZXkpLFxuICAgICAgICAgICAgYWxpYXNlZEtleSA9IGdldEFsaWFzZWRBdHRyTmFtZShub2RlLCBrZXkpLFxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBrZXksXG4gICAgICAgICAgICBub2RlTmFtZTtcblxuICAgICAgICBpZiAoYm9vbGVhbktleSkge1xuICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnByb3Aoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgYXR0ck5hbWUgPSBib29sZWFuS2V5O1xuICAgICAgICB9IGVsc2UgaWYgKGFsaWFzZWRLZXkpIHtcbiAgICAgICAgICB0aGlzW2FsaWFzZWRLZXldID0gdmFsdWU7XG4gICAgICAgICAgb2JzZXJ2ZXIgPSBhbGlhc2VkS2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG5cbiAgICAgICAgLy8gdHJhbnNsYXRlIG5vcm1hbGl6ZWQga2V5IHRvIGFjdHVhbCBrZXlcbiAgICAgICAgaWYgKGF0dHJOYW1lKSB7XG4gICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXR0ck5hbWUgPSB0aGlzLiRhdHRyW2tleV07XG4gICAgICAgICAgaWYgKCFhdHRyTmFtZSkge1xuICAgICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWUgPSBzbmFrZV9jYXNlKGtleSwgJy0nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBub2RlTmFtZSA9IG5vZGVOYW1lXyh0aGlzLiQkZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKChub2RlTmFtZSA9PT0gJ2EnICYmIGtleSA9PT0gJ2hyZWYnKSB8fFxuICAgICAgICAgICAgKG5vZGVOYW1lID09PSAnaW1nJyAmJiBrZXkgPT09ICdzcmMnKSkge1xuICAgICAgICAgIC8vIHNhbml0aXplIGFbaHJlZl0gYW5kIGltZ1tzcmNdIHZhbHVlc1xuICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlID0gJCRzYW5pdGl6ZVVyaSh2YWx1ZSwga2V5ID09PSAnc3JjJyk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZU5hbWUgPT09ICdpbWcnICYmIGtleSA9PT0gJ3NyY3NldCcpIHtcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBpbWdbc3Jjc2V0XSB2YWx1ZXNcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcblxuICAgICAgICAgIC8vIGZpcnN0IGNoZWNrIGlmIHRoZXJlIGFyZSBzcGFjZXMgYmVjYXVzZSBpdCdzIG5vdCB0aGUgc2FtZSBwYXR0ZXJuXG4gICAgICAgICAgdmFyIHRyaW1tZWRTcmNzZXQgPSB0cmltKHZhbHVlKTtcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAoICAgOTk5eCAgICx8ICAgOTk5dyAgICx8ICAgLHwsICAgKVxuICAgICAgICAgIHZhciBzcmNQYXR0ZXJuID0gLyhcXHMrXFxkK3hcXHMqLHxcXHMrXFxkK3dcXHMqLHxcXHMrLHwsXFxzKykvO1xuICAgICAgICAgIHZhciBwYXR0ZXJuID0gL1xccy8udGVzdCh0cmltbWVkU3Jjc2V0KSA/IHNyY1BhdHRlcm4gOiAvKCwpLztcblxuICAgICAgICAgIC8vIHNwbGl0IHNyY3NldCBpbnRvIHR1cGxlIG9mIHVyaSBhbmQgZGVzY3JpcHRvciBleGNlcHQgZm9yIHRoZSBsYXN0IGl0ZW1cbiAgICAgICAgICB2YXIgcmF3VXJpcyA9IHRyaW1tZWRTcmNzZXQuc3BsaXQocGF0dGVybik7XG5cbiAgICAgICAgICAvLyBmb3IgZWFjaCB0dXBsZXNcbiAgICAgICAgICB2YXIgbmJyVXJpc1dpdGgycGFydHMgPSBNYXRoLmZsb29yKHJhd1VyaXMubGVuZ3RoIC8gMik7XG4gICAgICAgICAgZm9yICh2YXIgaT0wOyBpPG5iclVyaXNXaXRoMnBhcnRzOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbm5lcklkeCA9IGkqMjtcbiAgICAgICAgICAgIC8vIHNhbml0aXplIHRoZSB1cmlcbiAgICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0ocmF3VXJpc1tpbm5lcklkeF0pLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgZGVzY3JpcHRvclxuICAgICAgICAgICAgcmVzdWx0ICs9IChcIiBcIiArIHRyaW0ocmF3VXJpc1tpbm5lcklkeCsxXSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNwbGl0IHRoZSBsYXN0IGl0ZW0gaW50byB1cmkgYW5kIGRlc2NyaXB0b3JcbiAgICAgICAgICB2YXIgbGFzdFR1cGxlID0gdHJpbShyYXdVcmlzW2kqMl0pLnNwbGl0KC9cXHMvKTtcblxuICAgICAgICAgIC8vIHNhbml0aXplIHRoZSBsYXN0IHVyaVxuICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0obGFzdFR1cGxlWzBdKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAvLyBhbmQgYWRkIHRoZSBsYXN0IGRlc2NyaXB0b3IgaWYgYW55XG4gICAgICAgICAgaWYgKGxhc3RUdXBsZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAoXCIgXCIgKyB0cmltKGxhc3RUdXBsZVsxXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9IHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3cml0ZUF0dHIgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnJlbW92ZUF0dHIoYXR0ck5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5hdHRyKGF0dHJOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmlyZSBvYnNlcnZlcnNcbiAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gdGhpcy4kJG9ic2VydmVycztcbiAgICAgICAgJCRvYnNlcnZlcnMgJiYgZm9yRWFjaCgkJG9ic2VydmVyc1tvYnNlcnZlcl0sIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRvYnNlcnZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogT2JzZXJ2ZXMgYW4gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIG9uY2UgZHVyaW5nIHRoZSBuZXh0IGAkZGlnZXN0YCBmb2xsb3dpbmdcbiAgICAgICAqIGNvbXBpbGF0aW9uLiBUaGUgb2JzZXJ2ZXIgaXMgdGhlbiBpbnZva2VkIHdoZW5ldmVyIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWVcbiAgICAgICAqIGNoYW5nZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKSAuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGludGVycG9sYXRlZFZhbHVlKX0gZm4gRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlclxuICAgICAgICAgICAgICAgIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBjaGFuZ2VzLlxuICAgICAgICogICAgICAgIFNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSN0ZXh0LWFuZC1hdHRyaWJ1dGUtYmluZGluZ3MgRGlyZWN0aXZlc30gZ3VpZGUgZm9yIG1vcmUgaW5mby5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgb2JzZXJ2ZXIuXG4gICAgICAgKi9cbiAgICAgICRvYnNlcnZlOiBmdW5jdGlvbihrZXksIGZuKSB7XG4gICAgICAgIHZhciBhdHRycyA9IHRoaXMsXG4gICAgICAgICAgICAkJG9ic2VydmVycyA9IChhdHRycy4kJG9ic2VydmVycyB8fCAoYXR0cnMuJCRvYnNlcnZlcnMgPSBjcmVhdGVNYXAoKSkpLFxuICAgICAgICAgICAgbGlzdGVuZXJzID0gKCQkb2JzZXJ2ZXJzW2tleV0gfHwgKCQkb2JzZXJ2ZXJzW2tleV0gPSBbXSkpO1xuXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGZuKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghbGlzdGVuZXJzLiQkaW50ZXIgJiYgYXR0cnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgLy8gbm8gb25lIHJlZ2lzdGVyZWQgYXR0cmlidXRlIGludGVycG9sYXRpb24gZnVuY3Rpb24sIHNvIGxldHMgY2FsbCBpdCBtYW51YWxseVxuICAgICAgICAgICAgZm4oYXR0cnNba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJzLCBmbik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlnbm9yZSwgc2luY2UgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIHNldCBjbGFzcyBvblxuICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuXG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICBkZW5vcm1hbGl6ZVRlbXBsYXRlID0gKHN0YXJ0U3ltYm9sID09ICd7eycgfHwgZW5kU3ltYm9sICA9PSAnfX0nKVxuICAgICAgICAgICAgPyBpZGVudGl0eVxuICAgICAgICAgICAgOiBmdW5jdGlvbiBkZW5vcm1hbGl6ZVRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXHsvZywgc3RhcnRTeW1ib2wpLnJlcGxhY2UoL319L2csIGVuZFN5bWJvbCk7XG4gICAgICAgIH0sXG4gICAgICAgIE5HX0FUVFJfQklORElORyA9IC9ebmdBdHRyW0EtWl0vO1xuXG4gICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkQmluZGluZ0luZm8oJGVsZW1lbnQsIGJpbmRpbmcpIHtcbiAgICAgIHZhciBiaW5kaW5ncyA9ICRlbGVtZW50LmRhdGEoJyRiaW5kaW5nJykgfHwgW107XG5cbiAgICAgIGlmIChpc0FycmF5KGJpbmRpbmcpKSB7XG4gICAgICAgIGJpbmRpbmdzID0gYmluZGluZ3MuY29uY2F0KGJpbmRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmluZGluZ3MucHVzaChiaW5kaW5nKTtcbiAgICAgIH1cblxuICAgICAgJGVsZW1lbnQuZGF0YSgnJGJpbmRpbmcnLCBiaW5kaW5ncyk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICBjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkQmluZGluZ0NsYXNzKCRlbGVtZW50KSB7XG4gICAgICBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsICduZy1iaW5kaW5nJyk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkU2NvcGVJbmZvKCRlbGVtZW50LCBzY29wZSwgaXNvbGF0ZWQsIG5vVGVtcGxhdGUpIHtcbiAgICAgIHZhciBkYXRhTmFtZSA9IGlzb2xhdGVkID8gKG5vVGVtcGxhdGUgPyAnJGlzb2xhdGVTY29wZU5vVGVtcGxhdGUnIDogJyRpc29sYXRlU2NvcGUnKSA6ICckc2NvcGUnO1xuICAgICAgJGVsZW1lbnQuZGF0YShkYXRhTmFtZSwgc2NvcGUpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MgPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRTY29wZUNsYXNzKCRlbGVtZW50LCBpc29sYXRlZCkge1xuICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCBpc29sYXRlZCA/ICduZy1pc29sYXRlLXNjb3BlJyA6ICduZy1zY29wZScpO1xuICAgIH0gOiBub29wO1xuXG4gICAgcmV0dXJuIGNvbXBpbGU7XG5cbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBmdW5jdGlvbiBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIGlmICghKCRjb21waWxlTm9kZXMgaW5zdGFuY2VvZiBqcUxpdGUpKSB7XG4gICAgICAgIC8vIGpxdWVyeSBhbHdheXMgcmV3cmFwcywgd2hlcmVhcyB3ZSBuZWVkIHRvIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzZWxlY3RvciBzbyB0aGF0IHdlIGNhblxuICAgICAgICAvLyBtb2RpZnkgaXQuXG4gICAgICAgICRjb21waWxlTm9kZXMgPSBqcUxpdGUoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICB9XG4gICAgICAvLyBXZSBjYW4gbm90IGNvbXBpbGUgdG9wIGxldmVsIHRleHQgZWxlbWVudHMgc2luY2UgdGV4dCBub2RlcyBjYW4gYmUgbWVyZ2VkIGFuZCB3ZSB3aWxsXG4gICAgICAvLyBub3QgYmUgYWJsZSB0byBhdHRhY2ggc2NvcGUgZGF0YSB0byB0aGVtLCBzbyB3ZSB3aWxsIHdyYXAgdGhlbSBpbiA8c3Bhbj5cbiAgICAgIGZvckVhY2goJGNvbXBpbGVOb2RlcywgZnVuY3Rpb24obm9kZSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gTk9ERV9UWVBFX1RFWFQgJiYgbm9kZS5ub2RlVmFsdWUubWF0Y2goL1xcUysvKSAvKiBub24tZW1wdHkgKi8gKSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2Rlc1tpbmRleF0gPSBqcUxpdGUobm9kZSkud3JhcCgnPHNwYW4+PC9zcGFuPicpLnBhcmVudCgpWzBdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBjb21wb3NpdGVMaW5rRm4gPVxuICAgICAgICAgICAgICBjb21waWxlTm9kZXMoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcygkY29tcGlsZU5vZGVzKTtcbiAgICAgIHZhciBuYW1lc3BhY2UgPSBudWxsO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHB1YmxpY0xpbmtGbihzY29wZSwgY2xvbmVDb25uZWN0Rm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycywgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTtcbiAgICAgICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgICAgICBuYW1lc3BhY2UgPSBkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzKGZ1dHVyZVBhcmVudEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkbGlua05vZGU7XG4gICAgICAgIGlmIChuYW1lc3BhY2UgIT09ICdodG1sJykge1xuICAgICAgICAgIC8vIFdoZW4gdXNpbmcgYSBkaXJlY3RpdmUgd2l0aCByZXBsYWNlOnRydWUgYW5kIHRlbXBsYXRlVXJsIHRoZSAkY29tcGlsZU5vZGVzXG4gICAgICAgICAgLy8gKG9yIGEgY2hpbGQgZWxlbWVudCBpbnNpZGUgb2YgdGhlbSlcbiAgICAgICAgICAvLyBtaWdodCBjaGFuZ2UsIHNvIHdlIG5lZWQgdG8gcmVjcmVhdGUgdGhlIG5hbWVzcGFjZSBhZGFwdGVkIGNvbXBpbGVOb2Rlc1xuICAgICAgICAgIC8vIGZvciBjYWxsIHRvIHRoZSBsaW5rIGZ1bmN0aW9uLlxuICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHJlYWR5IGNsb25lIHRoZSBub2Rlcy4uLlxuICAgICAgICAgICRsaW5rTm9kZSA9IGpxTGl0ZShcbiAgICAgICAgICAgIHdyYXBUZW1wbGF0ZShuYW1lc3BhY2UsIGpxTGl0ZSgnPGRpdj4nKS5hcHBlbmQoJGNvbXBpbGVOb2RlcykuaHRtbCgpKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2xvbmVDb25uZWN0Rm4pIHtcbiAgICAgICAgICAvLyBpbXBvcnRhbnQhITogd2UgbXVzdCBjYWxsIG91ciBqcUxpdGUuY2xvbmUoKSBzaW5jZSB0aGUgalF1ZXJ5IG9uZSBpcyB0cnlpbmcgdG8gYmUgc21hcnRcbiAgICAgICAgICAvLyBhbmQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgRE9NLlxuICAgICAgICAgICRsaW5rTm9kZSA9IEpRTGl0ZVByb3RvdHlwZS5jbG9uZS5jYWxsKCRjb21waWxlTm9kZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRsaW5rTm9kZSA9ICRjb21waWxlTm9kZXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNjbHVkZUNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgZm9yICh2YXIgY29udHJvbGxlck5hbWUgaW4gdHJhbnNjbHVkZUNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgICAkbGlua05vZGUuZGF0YSgnJCcgKyBjb250cm9sbGVyTmFtZSArICdDb250cm9sbGVyJywgdHJhbnNjbHVkZUNvbnRyb2xsZXJzW2NvbnRyb2xsZXJOYW1lXS5pbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbygkbGlua05vZGUsIHNjb3BlKTtcblxuICAgICAgICBpZiAoY2xvbmVDb25uZWN0Rm4pIGNsb25lQ29ubmVjdEZuKCRsaW5rTm9kZSwgc2NvcGUpO1xuICAgICAgICBpZiAoY29tcG9zaXRlTGlua0ZuKSBjb21wb3NpdGVMaW5rRm4oc2NvcGUsICRsaW5rTm9kZSwgJGxpbmtOb2RlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgIHJldHVybiAkbGlua05vZGU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMocGFyZW50RWxlbWVudCkge1xuICAgICAgLy8gVE9ETzogTWFrZSB0aGlzIGRldGVjdCBNYXRoTUwgYXMgd2VsbC4uLlxuICAgICAgdmFyIG5vZGUgPSBwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnRbMF07XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuICdodG1sJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBub2RlTmFtZV8obm9kZSkgIT09ICdmb3JlaWdub2JqZWN0JyAmJiBub2RlLnRvU3RyaW5nKCkubWF0Y2goL1NWRy8pID8gJ3N2Zyc6ICdodG1sJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21waWxlIGZ1bmN0aW9uIG1hdGNoZXMgZWFjaCBub2RlIGluIG5vZGVMaXN0IGFnYWluc3QgdGhlIGRpcmVjdGl2ZXMuIE9uY2UgYWxsIGRpcmVjdGl2ZXNcbiAgICAgKiBmb3IgYSBwYXJ0aWN1bGFyIG5vZGUgYXJlIGNvbGxlY3RlZCB0aGVpciBjb21waWxlIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQuIFRoZSBjb21waWxlXG4gICAgICogZnVuY3Rpb25zIHJldHVybiB2YWx1ZXMgLSB0aGUgbGlua2luZyBmdW5jdGlvbnMgLSBhcmUgY29tYmluZWQgaW50byBhIGNvbXBvc2l0ZSBsaW5raW5nXG4gICAgICogZnVuY3Rpb24sIHdoaWNoIGlzIHRoZSBhIGxpbmtpbmcgZnVuY3Rpb24gZm9yIHRoZSBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZUxpc3QgYW4gYXJyYXkgb2Ygbm9kZXMgb3IgTm9kZUxpc3QgdG8gY29tcGlsZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlRm4gQSBsaW5raW5nIGZ1bmN0aW9uLCB3aGVyZSB0aGVcbiAgICAgKiAgICAgICAgc2NvcGUgYXJndW1lbnQgaXMgYXV0by1nZW5lcmF0ZWQgdG8gdGhlIG5ldyBjaGlsZCBvZiB0aGUgdHJhbnNjbHVkZWQgcGFyZW50IHNjb3BlLlxuICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19ICRyb290RWxlbWVudCBJZiB0aGUgbm9kZUxpc3QgaXMgdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGF0aW9uIHRyZWUgdGhlblxuICAgICAqICAgICAgICB0aGUgcm9vdEVsZW1lbnQgbXVzdCBiZSBzZXQgdGhlIGpxTGl0ZSBjb2xsZWN0aW9uIG9mIHRoZSBjb21waWxlIHJvb3QuIFRoaXMgaXNcbiAgICAgKiAgICAgICAgbmVlZGVkIHNvIHRoYXQgdGhlIGpxTGl0ZSBjb2xsZWN0aW9uIGl0ZW1zIGNhbiBiZSByZXBsYWNlZCB3aXRoIHdpZGdldHMuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhQcmlvcml0eSBNYXggZGlyZWN0aXZlIHByaW9yaXR5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBjb21wb3NpdGUgbGlua2luZyBmdW5jdGlvbiBvZiBhbGwgb2YgdGhlIG1hdGNoZWQgZGlyZWN0aXZlcyBvciBudWxsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBpbGVOb2Rlcyhub2RlTGlzdCwgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgdmFyIGxpbmtGbnMgPSBbXSxcbiAgICAgICAgICBhdHRycywgZGlyZWN0aXZlcywgbm9kZUxpbmtGbiwgY2hpbGROb2RlcywgY2hpbGRMaW5rRm4sIGxpbmtGbkZvdW5kLCBub2RlTGlua0ZuRm91bmQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXR0cnMgPSBuZXcgQXR0cmlidXRlcygpO1xuXG4gICAgICAgIC8vIHdlIG11c3QgYWx3YXlzIHJlZmVyIHRvIG5vZGVMaXN0W2ldIHNpbmNlIHRoZSBub2RlcyBjYW4gYmUgcmVwbGFjZWQgdW5kZXJuZWF0aCB1cy5cbiAgICAgICAgZGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKG5vZGVMaXN0W2ldLCBbXSwgYXR0cnMsIGkgPT09IDAgPyBtYXhQcmlvcml0eSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVEaXJlY3RpdmUpO1xuXG4gICAgICAgIG5vZGVMaW5rRm4gPSAoZGlyZWN0aXZlcy5sZW5ndGgpXG4gICAgICAgICAgICA/IGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBub2RlTGlzdFtpXSwgYXR0cnMsIHRyYW5zY2x1ZGVGbiwgJHJvb3RFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLCBbXSwgW10sIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpXG4gICAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi5zY29wZSkge1xuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKGF0dHJzLiQkZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZExpbmtGbiA9IChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4udGVybWluYWwgfHxcbiAgICAgICAgICAgICAgICAgICAgICAhKGNoaWxkTm9kZXMgPSBub2RlTGlzdFtpXS5jaGlsZE5vZGVzKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICFjaGlsZE5vZGVzLmxlbmd0aClcbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiBjb21waWxlTm9kZXMoY2hpbGROb2RlcyxcbiAgICAgICAgICAgICAgICAgbm9kZUxpbmtGbiA/IChcbiAgICAgICAgICAgICAgICAgIChub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50IHx8ICFub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgICYmIG5vZGVMaW5rRm4udHJhbnNjbHVkZSkgOiB0cmFuc2NsdWRlRm4pO1xuXG4gICAgICAgIGlmIChub2RlTGlua0ZuIHx8IGNoaWxkTGlua0ZuKSB7XG4gICAgICAgICAgbGlua0Zucy5wdXNoKGksIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuKTtcbiAgICAgICAgICBsaW5rRm5Gb3VuZCA9IHRydWU7XG4gICAgICAgICAgbm9kZUxpbmtGbkZvdW5kID0gbm9kZUxpbmtGbkZvdW5kIHx8IG5vZGVMaW5rRm47XG4gICAgICAgIH1cblxuICAgICAgICAvL3VzZSB0aGUgcHJldmlvdXMgY29udGV4dCBvbmx5IGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgdmlydHVhbCBncm91cFxuICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gcmV0dXJuIGEgbGlua2luZyBmdW5jdGlvbiBpZiB3ZSBoYXZlIGZvdW5kIGFueXRoaW5nLCBudWxsIG90aGVyd2lzZVxuICAgICAgcmV0dXJuIGxpbmtGbkZvdW5kID8gY29tcG9zaXRlTGlua0ZuIDogbnVsbDtcblxuICAgICAgZnVuY3Rpb24gY29tcG9zaXRlTGlua0ZuKHNjb3BlLCBub2RlTGlzdCwgJHJvb3RFbGVtZW50LCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICB2YXIgbm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4sIG5vZGUsIGNoaWxkU2NvcGUsIGksIGlpLCBpZHgsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIHZhciBzdGFibGVOb2RlTGlzdDtcblxuXG4gICAgICAgIGlmIChub2RlTGlua0ZuRm91bmQpIHtcbiAgICAgICAgICAvLyBjb3B5IG5vZGVMaXN0IHNvIHRoYXQgaWYgYSBub2RlTGlua0ZuIHJlbW92ZXMgb3IgYWRkcyBhbiBlbGVtZW50IGF0IHRoaXMgRE9NIGxldmVsIG91clxuICAgICAgICAgIC8vIG9mZnNldHMgZG9uJ3QgZ2V0IHNjcmV3ZWQgdXBcbiAgICAgICAgICB2YXIgbm9kZUxpc3RMZW5ndGggPSBub2RlTGlzdC5sZW5ndGg7XG4gICAgICAgICAgc3RhYmxlTm9kZUxpc3QgPSBuZXcgQXJyYXkobm9kZUxpc3RMZW5ndGgpO1xuXG4gICAgICAgICAgLy8gY3JlYXRlIGEgc3BhcnNlIGFycmF5IGJ5IG9ubHkgY29weWluZyB0aGUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIGxpbmtGblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaW5rRm5zLmxlbmd0aDsgaSs9Mykge1xuICAgICAgICAgICAgaWR4ID0gbGlua0Zuc1tpXTtcbiAgICAgICAgICAgIHN0YWJsZU5vZGVMaXN0W2lkeF0gPSBub2RlTGlzdFtpZHhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5vZGVMaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBsaW5rRm5zLmxlbmd0aDsgaSA8IGlpOykge1xuICAgICAgICAgIG5vZGUgPSBzdGFibGVOb2RlTGlzdFtsaW5rRm5zW2krK11dO1xuICAgICAgICAgIG5vZGVMaW5rRm4gPSBsaW5rRm5zW2krK107XG4gICAgICAgICAgY2hpbGRMaW5rRm4gPSBsaW5rRm5zW2krK107XG5cbiAgICAgICAgICBpZiAobm9kZUxpbmtGbikge1xuICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyhqcUxpdGUobm9kZSksIGNoaWxkU2NvcGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oXG4gICAgICAgICAgICAgICAgICBzY29wZSwgbm9kZUxpbmtGbi50cmFuc2NsdWRlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICAgICAgICAgIG5vZGVMaW5rRm4uZWxlbWVudFRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICghbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQgJiYgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgY2hpbGRTY29wZSwgbm9kZSwgJHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICAgIGNoaWxkTGlua0ZuKHNjb3BlLCBub2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4sIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4sIGVsZW1lbnRUcmFuc2NsdXNpb24pIHtcblxuICAgICAgdmFyIGJvdW5kVHJhbnNjbHVkZUZuID0gZnVuY3Rpb24odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIGNvbnRhaW5pbmdTY29wZSkge1xuXG4gICAgICAgIGlmICghdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUgPSBzY29wZS4kbmV3KGZhbHNlLCBjb250YWluaW5nU2NvcGUpO1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIGNvbnRyb2xsZXJzLCBwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb29rcyBmb3IgZGlyZWN0aXZlcyBvbiB0aGUgZ2l2ZW4gbm9kZSBhbmQgYWRkcyB0aGVtIHRvIHRoZSBkaXJlY3RpdmUgY29sbGVjdGlvbiB3aGljaCBpc1xuICAgICAqIHNvcnRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBub2RlIE5vZGUgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSBkaXJlY3RpdmVzIEFuIGFycmF5IHRvIHdoaWNoIHRoZSBkaXJlY3RpdmVzIGFyZSBhZGRlZCB0by4gVGhpcyBhcnJheSBpcyBzb3J0ZWQgYmVmb3JlXG4gICAgICogICAgICAgIHRoZSBmdW5jdGlvbiByZXR1cm5zLlxuICAgICAqIEBwYXJhbSBhdHRycyBUaGUgc2hhcmVkIGF0dHJzIG9iamVjdCB3aGljaCBpcyB1c2VkIHRvIHBvcHVsYXRlIHRoZSBub3JtYWxpemVkIGF0dHJpYnV0ZXMuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhQcmlvcml0eSBNYXggZGlyZWN0aXZlIHByaW9yaXR5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbGxlY3REaXJlY3RpdmVzKG5vZGUsIGRpcmVjdGl2ZXMsIGF0dHJzLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSB7XG4gICAgICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlLFxuICAgICAgICAgIGF0dHJzTWFwID0gYXR0cnMuJGF0dHIsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgY2xhc3NOYW1lO1xuXG4gICAgICBzd2l0Y2ggKG5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgTk9ERV9UWVBFX0VMRU1FTlQ6IC8qIEVsZW1lbnQgKi9cbiAgICAgICAgICAvLyB1c2UgdGhlIG5vZGUgbmFtZTogPGRpcmVjdGl2ZT5cbiAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcyxcbiAgICAgICAgICAgICAgZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lXyhub2RlKSksICdFJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSk7XG5cbiAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIGF0dHJpYnV0ZXNcbiAgICAgICAgICBmb3IgKHZhciBhdHRyLCBuYW1lLCBuTmFtZSwgbmdBdHRyTmFtZSwgdmFsdWUsIGlzTmdBdHRyLCBuQXR0cnMgPSBub2RlLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgICAgaiA9IDAsIGpqID0gbkF0dHJzICYmIG5BdHRycy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgICB2YXIgYXR0clN0YXJ0TmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGF0dHJFbmROYW1lID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGF0dHIgPSBuQXR0cnNbal07XG4gICAgICAgICAgICBuYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICAgICAgdmFsdWUgPSB0cmltKGF0dHIudmFsdWUpO1xuXG4gICAgICAgICAgICAvLyBzdXBwb3J0IG5nQXR0ciBhdHRyaWJ1dGUgYmluZGluZ1xuICAgICAgICAgICAgbmdBdHRyTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0ciA9IE5HX0FUVFJfQklORElORy50ZXN0KG5nQXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgIG5hbWUgPSBzbmFrZV9jYXNlKG5nQXR0ck5hbWUuc3Vic3RyKDYpLCAnLScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlTk5hbWUgPSBuZ0F0dHJOYW1lLnJlcGxhY2UoLyhTdGFydHxFbmQpJC8sICcnKTtcbiAgICAgICAgICAgIGlmIChkaXJlY3RpdmVJc011bHRpRWxlbWVudChkaXJlY3RpdmVOTmFtZSkpIHtcbiAgICAgICAgICAgICAgaWYgKG5nQXR0ck5hbWUgPT09IGRpcmVjdGl2ZU5OYW1lICsgJ1N0YXJ0Jykge1xuICAgICAgICAgICAgICAgIGF0dHJTdGFydE5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIGF0dHJFbmROYW1lID0gbmFtZS5zdWJzdHIoMCwgbmFtZS5sZW5ndGggLSA1KSArICdlbmQnO1xuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICBhdHRyc01hcFtuTmFtZV0gPSBuYW1lO1xuICAgICAgICAgICAgaWYgKGlzTmdBdHRyIHx8ICFhdHRycy5oYXNPd25Qcm9wZXJ0eShuTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0Qm9vbGVhbkF0dHJOYW1lKG5vZGUsIG5OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJ1ZTsgLy8gcHJlc2VuY2UgbWVhbnMgdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbk5hbWUsIGlzTmdBdHRyKTtcbiAgICAgICAgICAgIGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ0EnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBhdHRyU3RhcnROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyRW5kTmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdXNlIGNsYXNzIGFzIGRpcmVjdGl2ZVxuICAgICAgICAgIGNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lO1xuICAgICAgICAgIGlmIChpc1N0cmluZyhjbGFzc05hbWUpICYmIGNsYXNzTmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IENMQVNTX0RJUkVDVElWRV9SRUdFWFAuZXhlYyhjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzJdKTtcbiAgICAgICAgICAgICAgaWYgKGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ0MnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbM10pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zdWJzdHIobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfVEVYVDogLyogVGV4dCBOb2RlICovXG4gICAgICAgICAgYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfQ09NTUVOVDogLyogQ29tbWVudCAqL1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXRjaCA9IENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUC5leGVjKG5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShtYXRjaFsxXSk7XG4gICAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cmltKG1hdGNoWzJdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHR1cm5zIG91dCB0aGF0IHVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcyBJRTkgdGhyb3dzIGVycm9ycyB3aGVuIG9uZSBhdHRlbXB0cyB0byByZWFkXG4gICAgICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS5cbiAgICAgICAgICAgIC8vIEp1c3QgaWdub3JlIGl0IGFuZCBjb250aW51ZS4gKENhbid0IHNlZW0gdG8gcmVwcm9kdWNlIGluIHRlc3QgY2FzZS4pXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVzLnNvcnQoYnlQcmlvcml0eSk7XG4gICAgICByZXR1cm4gZGlyZWN0aXZlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIG5vZGUgd2l0aCBhbiBkaXJlY3RpdmUtc3RhcnQgaXQgY29sbGVjdHMgYWxsIG9mIHRoZSBzaWJsaW5ncyB1bnRpbCBpdCBmaW5kc1xuICAgICAqIGRpcmVjdGl2ZS1lbmQuXG4gICAgICogQHBhcmFtIG5vZGVcbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBncm91cFNjYW4obm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICAgIHZhciBkZXB0aCA9IDA7XG4gICAgICBpZiAoYXR0clN0YXJ0ICYmIG5vZGUuaGFzQXR0cmlidXRlICYmIG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3V0ZXJkaXInLFxuICAgICAgICAgICAgICAgICAgICAgIFwiVW50ZXJtaW5hdGVkIGF0dHJpYnV0ZSwgZm91bmQgJ3swfScgYnV0IG5vIG1hdGNoaW5nICd7MX0nIGZvdW5kLlwiLFxuICAgICAgICAgICAgICAgICAgICAgIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkgZGVwdGgrKztcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyRW5kKSkgZGVwdGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqcUxpdGUobm9kZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgZm9yIGxpbmtpbmcgZnVuY3Rpb24gd2hpY2ggY29udmVydHMgbm9ybWFsIGxpbmtpbmcgZnVuY3Rpb24gaW50byBhIGdyb3VwZWRcbiAgICAgKiBsaW5raW5nIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBsaW5rRm5cbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIobGlua0ZuLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgZWxlbWVudCA9IGdyb3VwU2NhbihlbGVtZW50WzBdLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICByZXR1cm4gbGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uY2UgdGhlIGRpcmVjdGl2ZXMgaGF2ZSBiZWVuIGNvbGxlY3RlZCwgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGlzIG1ldGhvZFxuICAgICAqIGlzIHJlc3BvbnNpYmxlIGZvciBpbmxpbmluZyBkaXJlY3RpdmUgdGVtcGxhdGVzIGFzIHdlbGwgYXMgdGVybWluYXRpbmcgdGhlIGFwcGxpY2F0aW9uXG4gICAgICogb2YgdGhlIGRpcmVjdGl2ZXMgaWYgdGhlIHRlcm1pbmFsIGRpcmVjdGl2ZSBoYXMgYmVlbiByZWFjaGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGlyZWN0aXZlcyBBcnJheSBvZiBjb2xsZWN0ZWQgZGlyZWN0aXZlcyB0byBleGVjdXRlIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb24uXG4gICAgICogICAgICAgIHRoaXMgbmVlZHMgdG8gYmUgcHJlLXNvcnRlZCBieSBwcmlvcml0eSBvcmRlci5cbiAgICAgKiBAcGFyYW0ge05vZGV9IGNvbXBpbGVOb2RlIFRoZSByYXcgRE9NIG5vZGUgdG8gYXBwbHkgdGhlIGNvbXBpbGUgZnVuY3Rpb25zIHRvXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlQXR0cnMgVGhlIHNoYXJlZCBhdHRyaWJ1dGUgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZUZuIEEgbGlua2luZyBmdW5jdGlvbiwgd2hlcmUgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXdcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cbiAgICAgKiBAcGFyYW0ge0pRTGl0ZX0ganFDb2xsZWN0aW9uIElmIHdlIGFyZSB3b3JraW5nIG9uIHRoZSByb290IG9mIHRoZSBjb21waWxlIHRyZWUgdGhlbiB0aGlzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCBoYXMgdGhlIHJvb3QganFMaXRlIGFycmF5IHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIGl0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlIEFuIG9wdGlvbmFsIGRpcmVjdGl2ZSB0aGF0IHdpbGwgYmUgaWdub3JlZCB3aGVuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGlsaW5nIHRoZSB0cmFuc2NsdXNpb24uXG4gICAgICogQHBhcmFtIHtBcnJheS48RnVuY3Rpb24+fSBwcmVMaW5rRm5zXG4gICAgICogQHBhcmFtIHtBcnJheS48RnVuY3Rpb24+fSBwb3N0TGlua0Zuc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IENvbnRleHQgdXNlZCBmb3IgcHJldmlvdXMgY29tcGlsYXRpb24gb2YgdGhlIGN1cnJlbnRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBsaW5rRm5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIHRyYW5zY2x1ZGVGbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganFDb2xsZWN0aW9uLCBvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUsIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0ID0gcHJldmlvdXNDb21waWxlQ29udGV4dCB8fCB7fTtcblxuICAgICAgdmFyIHRlcm1pbmFsUHJpb3JpdHkgPSAtTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQuY29udHJvbGxlckRpcmVjdGl2ZXMsXG4gICAgICAgICAgY29udHJvbGxlcnMsXG4gICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LnRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGZhbHNlLFxuICAgICAgICAgIGhhc1RlbXBsYXRlID0gZmFsc2UsXG4gICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGVOb2RlKSxcbiAgICAgICAgICBkaXJlY3RpdmUsXG4gICAgICAgICAgZGlyZWN0aXZlTmFtZSxcbiAgICAgICAgICAkdGVtcGxhdGUsXG4gICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSxcbiAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGVGbixcbiAgICAgICAgICBsaW5rRm4sXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWU7XG5cbiAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICB2YXIgYXR0clN0YXJ0ID0gZGlyZWN0aXZlLiQkc3RhcnQ7XG4gICAgICAgIHZhciBhdHRyRW5kID0gZGlyZWN0aXZlLiQkZW5kO1xuXG4gICAgICAgIC8vIGNvbGxlY3QgbXVsdGlibG9jayBzZWN0aW9uc1xuICAgICAgICBpZiAoYXR0clN0YXJ0KSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICB9XG4gICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGVybWluYWxQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkge1xuICAgICAgICAgIGJyZWFrOyAvLyBwcmV2ZW50IGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiBkaXJlY3RpdmVzXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUuc2NvcGUpIHtcblxuICAgICAgICAgIC8vIHNraXAgdGhlIGNoZWNrIGZvciBkaXJlY3RpdmVzIHdpdGggYXN5bmMgdGVtcGxhdGVzLCB3ZSdsbCBjaGVjayB0aGUgZGVyaXZlZCBzeW5jXG4gICAgICAgICAgLy8gZGlyZWN0aXZlIHdoZW4gdGhlIHRlbXBsYXRlIGFycml2ZXNcbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGFuIGlzb2xhdGVkIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIHNjb3BlIG9mIGFueSBraW5kIGFscmVhZHlcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGEgY2hpbGQgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gaXNvbGF0ZWQgc2NvcGUgYWxyZWFkeVxuICAgICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBkaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBuZXdTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlLm5hbWU7XG5cbiAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5jb250cm9sbGVyO1xuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gY29udHJvbGxlckRpcmVjdGl2ZXMgfHwge307XG4gICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoXCInXCIgKyBkaXJlY3RpdmVOYW1lICsgXCInIGNvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0sIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50cmFuc2NsdWRlKSB7XG4gICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgbmdJZiBhbmQgbmdSZXBlYXQgc28gdGhhdCB3ZSBkb24ndCBjb21wbGFpbiBhYm91dCBkdXBsaWNhdGUgdHJhbnNjbHVzaW9uLlxuICAgICAgICAgIC8vIFRoaXMgb3B0aW9uIHNob3VsZCBvbmx5IGJlIHVzZWQgYnkgZGlyZWN0aXZlcyB0aGF0IGtub3cgaG93IHRvIHNhZmVseSBoYW5kbGUgZWxlbWVudCB0cmFuc2NsdXNpb24sXG4gICAgICAgICAgLy8gd2hlcmUgdGhlIHRyYW5zY2x1ZGVkIG5vZGVzIGFyZSBhZGRlZCBvciByZXBsYWNlZCBhZnRlciBsaW5raW5nLlxuICAgICAgICAgIGlmICghZGlyZWN0aXZlLiQkdGxiKSB7XG4gICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndHJhbnNjbHVzaW9uJywgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPT0gJ2VsZW1lbnQnKSB7XG4gICAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5O1xuICAgICAgICAgICAgJHRlbXBsYXRlID0gJGNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPVxuICAgICAgICAgICAgICAgIGpxTGl0ZShkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgJyArIGRpcmVjdGl2ZU5hbWUgKyAnOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzW2RpcmVjdGl2ZU5hbWVdICsgJyAnKSk7XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXTtcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgc2xpY2VBcmdzKCR0ZW1wbGF0ZSksIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB0ZXJtaW5hbFByaW9yaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgJiYgcmVwbGFjZURpcmVjdGl2ZS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBwYXNzIGluOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBjb250cm9sbGVyRGlyZWN0aXZlcyAtIG90aGVyd2lzZSB3ZSdsbCBjcmVhdGUgZHVwbGljYXRlcyBjb250cm9sbGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgb3IgdGVtcGxhdGVEaXJlY3RpdmUgLSBjb21iaW5pbmcgdGVtcGxhdGVzIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZWxlbWVudCB0cmFuc2NsdXNpb24gZG9lc24ndCBtYWtlIHNlbnNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgb25seSBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlIHNvIHRoYXQgd2UgcHJldmVudCBwdXR0aW5nIHRyYW5zY2x1c2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb24gdGhlIHNhbWUgZWxlbWVudCBtb3JlIHRoYW4gb25jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKSkuY29udGVudHMoKTtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpOyAvLyBjbGVhciBjb250ZW50c1xuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlKSB7XG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IChpc0Z1bmN0aW9uKGRpcmVjdGl2ZS50ZW1wbGF0ZSkpXG4gICAgICAgICAgICAgID8gZGlyZWN0aXZlLnRlbXBsYXRlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycylcbiAgICAgICAgICAgICAgOiBkaXJlY3RpdmUudGVtcGxhdGU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoZGlyZWN0aXZlVmFsdWUpKSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKGRpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZSwgdHJpbShkaXJlY3RpdmVWYWx1ZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdO1xuXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLFxuICAgICAgICAgICAgICAgICAgXCJUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlICd7MH0nIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfVwiLFxuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXBsYWNlV2l0aChqcUNvbGxlY3Rpb24sICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xuXG4gICAgICAgICAgICB2YXIgbmV3VGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319O1xuXG4gICAgICAgICAgICAvLyBjb21iaW5lIGRpcmVjdGl2ZXMgZnJvbSB0aGUgb3JpZ2luYWwgbm9kZSBhbmQgZnJvbSB0aGUgdGVtcGxhdGU6XG4gICAgICAgICAgICAvLyAtIHRha2UgdGhlIGFycmF5IG9mIGRpcmVjdGl2ZXMgZm9yIHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgLy8gLSBzcGxpdCBpdCBpbnRvIHR3byBwYXJ0cywgdGhvc2UgdGhhdCBhbHJlYWR5IGFwcGxpZWQgKHByb2Nlc3NlZCkgYW5kIHRob3NlIHRoYXQgd2VyZW4ndCAodW5wcm9jZXNzZWQpXG4gICAgICAgICAgICAvLyAtIGNvbGxlY3QgZGlyZWN0aXZlcyBmcm9tIHRoZSB0ZW1wbGF0ZSBhbmQgc29ydCB0aGVtIGJ5IHByaW9yaXR5XG4gICAgICAgICAgICAvLyAtIGNvbWJpbmUgZGlyZWN0aXZlcyBhczogcHJvY2Vzc2VkICsgdGVtcGxhdGUgKyB1bnByb2Nlc3NlZFxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgbmV3VGVtcGxhdGVBdHRycyk7XG4gICAgICAgICAgICB2YXIgdW5wcm9jZXNzZWREaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5zcGxpY2UoaSArIDEsIGRpcmVjdGl2ZXMubGVuZ3RoIC0gKGkgKyAxKSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgbWFya0RpcmVjdGl2ZXNBc0lzb2xhdGUodGVtcGxhdGVEaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLmNvbmNhdCh0ZW1wbGF0ZURpcmVjdGl2ZXMpLmNvbmNhdCh1bnByb2Nlc3NlZERpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModGVtcGxhdGVBdHRycywgbmV3VGVtcGxhdGVBdHRycyk7XG5cbiAgICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGRpcmVjdGl2ZVZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbm9kZUxpbmtGbiA9IGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLnNwbGljZShpLCBkaXJlY3RpdmVzLmxlbmd0aCAtIGkpLCAkY29tcGlsZU5vZGUsXG4gICAgICAgICAgICAgIHRlbXBsYXRlQXR0cnMsIGpxQ29sbGVjdGlvbiwgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSAmJiBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlczogY29udHJvbGxlckRpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlOiBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmU6IHRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3RpdmUuY29tcGlsZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsaW5rRm4gPSBkaXJlY3RpdmUuY29tcGlsZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIGNoaWxkVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpbmtGbikpIHtcbiAgICAgICAgICAgICAgYWRkTGlua0ZucyhudWxsLCBsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmtGbikge1xuICAgICAgICAgICAgICBhZGRMaW5rRm5zKGxpbmtGbi5wcmUsIGxpbmtGbi5wb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRjb21waWxlTm9kZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmUudGVybWluYWwpIHtcbiAgICAgICAgICBub2RlTGlua0ZuLnRlcm1pbmFsID0gdHJ1ZTtcbiAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gTWF0aC5tYXgodGVybWluYWxQcmlvcml0eSwgZGlyZWN0aXZlLnByaW9yaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIG5vZGVMaW5rRm4uc2NvcGUgPSBuZXdTY29wZURpcmVjdGl2ZSAmJiBuZXdTY29wZURpcmVjdGl2ZS5zY29wZSA9PT0gdHJ1ZTtcbiAgICAgIG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgPSBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlO1xuICAgICAgbm9kZUxpbmtGbi5lbGVtZW50VHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZTtcbiAgICAgIG5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50ID0gaGFzVGVtcGxhdGU7XG4gICAgICBub2RlTGlua0ZuLnRyYW5zY2x1ZGUgPSBjaGlsZFRyYW5zY2x1ZGVGbjtcblxuICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlO1xuXG4gICAgICAvLyBtaWdodCBiZSBub3JtYWwgb3IgZGVsYXllZCBub2RlTGlua0ZuIGRlcGVuZGluZyBvbiBpZiB0ZW1wbGF0ZVVybCBpcyBwcmVzZW50XG4gICAgICByZXR1cm4gbm9kZUxpbmtGbjtcblxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgZnVuY3Rpb24gYWRkTGlua0ZucyhwcmUsIHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCkge1xuICAgICAgICBpZiAocHJlKSB7XG4gICAgICAgICAgaWYgKGF0dHJTdGFydCkgcHJlID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocHJlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgIHByZS5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgcHJlLmRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOYW1lO1xuICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPT09IGRpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUpIHtcbiAgICAgICAgICAgIHByZSA9IGNsb25lQW5kQW5ub3RhdGVGbihwcmUsIHtpc29sYXRlU2NvcGU6IHRydWV9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJlTGlua0Zucy5wdXNoKHByZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc3QpIHtcbiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSBwb3N0ID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICBwb3N0LnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICBwb3N0LmRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOYW1lO1xuICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPT09IGRpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUpIHtcbiAgICAgICAgICAgIHBvc3QgPSBjbG9uZUFuZEFubm90YXRlRm4ocG9zdCwge2lzb2xhdGVTY29wZTogdHJ1ZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb3N0TGlua0Zucy5wdXNoKHBvc3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgICB2YXIgdmFsdWUsIHJldHJpZXZhbE1ldGhvZCA9ICdkYXRhJywgb3B0aW9uYWwgPSBmYWxzZTtcbiAgICAgICAgdmFyICRzZWFyY2hFbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHJlcXVpcmUpKSB7XG4gICAgICAgICAgbWF0Y2ggPSByZXF1aXJlLm1hdGNoKFJFUVVJUkVfUFJFRklYX1JFR0VYUCk7XG4gICAgICAgICAgcmVxdWlyZSA9IHJlcXVpcmUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG5cbiAgICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgIGlmIChtYXRjaFsxXSkgbWF0Y2hbM10gPSBudWxsO1xuICAgICAgICAgICAgZWxzZSBtYXRjaFsxXSA9IG1hdGNoWzNdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF0Y2hbMV0gPT09ICdeJykge1xuICAgICAgICAgICAgcmV0cmlldmFsTWV0aG9kID0gJ2luaGVyaXRlZERhdGEnO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMV0gPT09ICdeXicpIHtcbiAgICAgICAgICAgIHJldHJpZXZhbE1ldGhvZCA9ICdpbmhlcml0ZWREYXRhJztcbiAgICAgICAgICAgICRzZWFyY2hFbGVtZW50ID0gJGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXRjaFsyXSA9PT0gJz8nKSB7XG4gICAgICAgICAgICBvcHRpb25hbCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFsdWUgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGVsZW1lbnRDb250cm9sbGVycyAmJiByZXRyaWV2YWxNZXRob2QgPT09ICdkYXRhJykge1xuICAgICAgICAgICAgaWYgKHZhbHVlID0gZWxlbWVudENvbnRyb2xsZXJzW3JlcXVpcmVdKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gdmFsdWUgfHwgJHNlYXJjaEVsZW1lbnRbcmV0cmlldmFsTWV0aG9kXSgnJCcgKyByZXF1aXJlICsgJ0NvbnRyb2xsZXInKTtcblxuICAgICAgICAgIGlmICghdmFsdWUgJiYgIW9wdGlvbmFsKSB7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignY3RyZXEnLFxuICAgICAgICAgICAgICAgIFwiQ29udHJvbGxlciAnezB9JywgcmVxdWlyZWQgYnkgZGlyZWN0aXZlICd7MX0nLCBjYW4ndCBiZSBmb3VuZCFcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShyZXF1aXJlKSkge1xuICAgICAgICAgIHZhbHVlID0gW107XG4gICAgICAgICAgZm9yRWFjaChyZXF1aXJlLCBmdW5jdGlvbihyZXF1aXJlKSB7XG4gICAgICAgICAgICB2YWx1ZS5wdXNoKGdldENvbnRyb2xsZXJzKGRpcmVjdGl2ZU5hbWUsIHJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cblxuICAgICAgZnVuY3Rpb24gbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBpLCBpaSwgbGlua0ZuLCBjb250cm9sbGVyLCBpc29sYXRlU2NvcGUsIGVsZW1lbnRDb250cm9sbGVycywgdHJhbnNjbHVkZUZuLCAkZWxlbWVudCxcbiAgICAgICAgICAgIGF0dHJzO1xuXG4gICAgICAgIGlmIChjb21waWxlTm9kZSA9PT0gbGlua05vZGUpIHtcbiAgICAgICAgICBhdHRycyA9IHRlbXBsYXRlQXR0cnM7XG4gICAgICAgICAgJGVsZW1lbnQgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkZWxlbWVudCA9IGpxTGl0ZShsaW5rTm9kZSk7XG4gICAgICAgICAgYXR0cnMgPSBuZXcgQXR0cmlidXRlcygkZWxlbWVudCwgdGVtcGxhdGVBdHRycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgaXNvbGF0ZVNjb3BlID0gc2NvcGUuJG5ldyh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuICYmIGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlO1xuICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICAvLyBUT0RPOiBtZXJnZSBgY29udHJvbGxlcnNgIGFuZCBgZWxlbWVudENvbnRyb2xsZXJzYCBpbnRvIHNpbmdsZSBvYmplY3QuXG4gICAgICAgICAgY29udHJvbGxlcnMgPSB7fTtcbiAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnMgPSB7fTtcbiAgICAgICAgICBmb3JFYWNoKGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBmdW5jdGlvbihkaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbHMgPSB7XG4gICAgICAgICAgICAgICRzY29wZTogZGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICAgICAgICAgICAgJGF0dHJzOiBhdHRycyxcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGU6IHRyYW5zY2x1ZGVGblxuICAgICAgICAgICAgfSwgY29udHJvbGxlckluc3RhbmNlO1xuXG4gICAgICAgICAgICBjb250cm9sbGVyID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICBpZiAoY29udHJvbGxlciA9PSAnQCcpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlciA9IGF0dHJzW2RpcmVjdGl2ZS5uYW1lXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlID0gJGNvbnRyb2xsZXIoY29udHJvbGxlciwgbG9jYWxzLCB0cnVlLCBkaXJlY3RpdmUuY29udHJvbGxlckFzKTtcblxuICAgICAgICAgICAgLy8gRm9yIGRpcmVjdGl2ZXMgd2l0aCBlbGVtZW50IHRyYW5zY2x1c2lvbiB0aGUgZWxlbWVudCBpcyBhIGNvbW1lbnQsXG4gICAgICAgICAgICAvLyBidXQgalF1ZXJ5IC5kYXRhIGRvZXNuJ3Qgc3VwcG9ydCBhdHRhY2hpbmcgZGF0YSB0byBjb21tZW50IG5vZGVzIGFzIGl0J3MgaGFyZCB0b1xuICAgICAgICAgICAgLy8gY2xlYW4gdXAgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzgzMzUpLlxuICAgICAgICAgICAgLy8gSW5zdGVhZCwgd2Ugc2F2ZSB0aGUgY29udHJvbGxlcnMgZm9yIHRoZSBlbGVtZW50IGluIGEgbG9jYWwgaGFzaCBhbmQgYXR0YWNoIHRvIC5kYXRhXG4gICAgICAgICAgICAvLyBsYXRlciwgb25jZSB3ZSBoYXZlIHRoZSBhY3R1YWwgZWxlbWVudC5cbiAgICAgICAgICAgIGVsZW1lbnRDb250cm9sbGVyc1tkaXJlY3RpdmUubmFtZV0gPSBjb250cm9sbGVySW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoIWhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgZGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJJbnN0YW5jZS5pbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRyb2xsZXJzW2RpcmVjdGl2ZS5uYW1lXSA9IGNvbnRyb2xsZXJJbnN0YW5jZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKCRlbGVtZW50LCBpc29sYXRlU2NvcGUsIHRydWUsICEodGVtcGxhdGVEaXJlY3RpdmUgJiYgKHRlbXBsYXRlRGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHxcbiAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJG9yaWdpbmFsRGlyZWN0aXZlKSkpO1xuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKCRlbGVtZW50LCB0cnVlKTtcblxuICAgICAgICAgIHZhciBpc29sYXRlU2NvcGVDb250cm9sbGVyID0gY29udHJvbGxlcnMgJiYgY29udHJvbGxlcnNbbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLm5hbWVdO1xuICAgICAgICAgIHZhciBpc29sYXRlQmluZGluZ0NvbnRleHQgPSBpc29sYXRlU2NvcGU7XG4gICAgICAgICAgaWYgKGlzb2xhdGVTY29wZUNvbnRyb2xsZXIgJiYgaXNvbGF0ZVNjb3BlQ29udHJvbGxlci5pZGVudGlmaWVyICYmXG4gICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpc29sYXRlQmluZGluZ0NvbnRleHQgPSBpc29sYXRlU2NvcGVDb250cm9sbGVyLmluc3RhbmNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvckVhY2goaXNvbGF0ZVNjb3BlLiQkaXNvbGF0ZUJpbmRpbmdzID0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkaXNvbGF0ZUJpbmRpbmdzLCBmdW5jdGlvbihkZWZpbml0aW9uLCBzY29wZU5hbWUpIHtcbiAgICAgICAgICAgIHZhciBhdHRyTmFtZSA9IGRlZmluaXRpb24uYXR0ck5hbWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uYWwgPSBkZWZpbml0aW9uLm9wdGlvbmFsLFxuICAgICAgICAgICAgICAgIG1vZGUgPSBkZWZpbml0aW9uLm1vZGUsIC8vIEAsID0sIG9yICZcbiAgICAgICAgICAgICAgICBsYXN0VmFsdWUsXG4gICAgICAgICAgICAgICAgcGFyZW50R2V0LCBwYXJlbnRTZXQsIGNvbXBhcmU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAobW9kZSkge1xuXG4gICAgICAgICAgICAgIGNhc2UgJ0AnOlxuICAgICAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKGF0dHJOYW1lLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhdHRycy4kJG9ic2VydmVyc1thdHRyTmFtZV0uJCRzY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgICAgIGlmIChhdHRyc1thdHRyTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcHJvdmlkZWQgdGhlbiB3ZSB0cmlnZ2VyIGFuIGludGVycG9sYXRpb24gdG8gZW5zdXJlXG4gICAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgaXMgdGhlcmUgZm9yIHVzZSBpbiB0aGUgbGluayBmblxuICAgICAgICAgICAgICAgICAgaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSAkaW50ZXJwb2xhdGUoYXR0cnNbYXR0ck5hbWVdKShzY29wZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudEdldCA9ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRHZXQubGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgICAgY29tcGFyZSA9IGVxdWFscztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29tcGFyZSA9IGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEgPT09IGIgfHwgKGEgIT09IGEgJiYgYiAhPT0gYik7IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudFNldCA9IHBhcmVudEdldC5hc3NpZ24gfHwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAvLyByZXNldCB0aGUgY2hhbmdlLCBvciB3ZSB3aWxsIHRocm93IHRoaXMgZXhjZXB0aW9uIG9uIGV2ZXJ5ICRkaWdlc3RcbiAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGlzb2xhdGVCaW5kaW5nQ29udGV4dFtzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub25hc3NpZ24nLFxuICAgICAgICAgICAgICAgICAgICAgIFwiRXhwcmVzc2lvbiAnezB9JyB1c2VkIHdpdGggZGlyZWN0aXZlICd7MX0nIGlzIG5vbi1hc3NpZ25hYmxlIVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRWYWx1ZVdhdGNoID0gZnVuY3Rpb24gcGFyZW50VmFsdWVXYXRjaChwYXJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBpc29sYXRlQmluZGluZ0NvbnRleHRbc2NvcGVOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIG91dCBvZiBzeW5jIGFuZCBuZWVkIHRvIGNvcHlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50IGNoYW5nZWQgYW5kIGl0IGhhcyBwcmVjZWRlbmNlXG4gICAgICAgICAgICAgICAgICAgICAgaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcGFyZW50IGNhbiBiZSBhc3NpZ25lZCB0aGVuIGRvIHNvXG4gICAgICAgICAgICAgICAgICAgICAgcGFyZW50U2V0KHNjb3BlLCBwYXJlbnRWYWx1ZSA9IGlzb2xhdGVCaW5kaW5nQ29udGV4dFtzY29wZU5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZSA9IHBhcmVudFZhbHVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcGFyZW50VmFsdWVXYXRjaC4kc3RhdGVmdWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciB1bndhdGNoO1xuICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uLmNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGF0dHJzW2F0dHJOYW1lXSwgcGFyZW50VmFsdWVXYXRjaCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSwgcGFyZW50VmFsdWVXYXRjaCksIG51bGwsIHBhcmVudEdldC5saXRlcmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXNvbGF0ZVNjb3BlLiRvbignJGRlc3Ryb3knLCB1bndhdGNoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlICcmJzpcbiAgICAgICAgICAgICAgICBwYXJlbnRHZXQgPSAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgICAgICAgICBpc29sYXRlQmluZGluZ0NvbnRleHRbc2NvcGVOYW1lXSA9IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEdldChzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250cm9sbGVycykge1xuICAgICAgICAgIGZvckVhY2goY29udHJvbGxlcnMsIGZ1bmN0aW9uKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb250cm9sbGVycyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQUkVMSU5LSU5HXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJlTGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgbGlua0ZuID0gcHJlTGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJFQ1VSU0lPTlxuICAgICAgICAvLyBXZSBvbmx5IHBhc3MgdGhlIGlzb2xhdGUgc2NvcGUsIGlmIHRoZSBpc29sYXRlIGRpcmVjdGl2ZSBoYXMgYSB0ZW1wbGF0ZSxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBjaGlsZCBlbGVtZW50cyBkbyBub3QgYmVsb25nIHRvIHRoZSBpc29sYXRlIGRpcmVjdGl2ZS5cbiAgICAgICAgdmFyIHNjb3BlVG9DaGlsZCA9IHNjb3BlO1xuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlICYmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGUgfHwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlVXJsID09PSBudWxsKSkge1xuICAgICAgICAgIHNjb3BlVG9DaGlsZCA9IGlzb2xhdGVTY29wZTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZExpbmtGbiAmJiBjaGlsZExpbmtGbihzY29wZVRvQ2hpbGQsIGxpbmtOb2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pO1xuXG4gICAgICAgIC8vIFBPU1RMSU5LSU5HXG4gICAgICAgIGZvciAoaSA9IHBvc3RMaW5rRm5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgbGlua0ZuID0gcG9zdExpbmtGbnNbaV07XG4gICAgICAgICAgaW52b2tlTGlua0ZuKGxpbmtGbixcbiAgICAgICAgICAgICAgbGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgICAgICAgYXR0cnMsXG4gICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5kaXJlY3RpdmVOYW1lLCBsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksXG4gICAgICAgICAgICAgIHRyYW5zY2x1ZGVGblxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGluamVjdGVkIGFzIGAkdHJhbnNjbHVkZWAuXG4gICAgICAgIC8vIE5vdGU6IGFsbCBhcmd1bWVudHMgYXJlIG9wdGlvbmFsIVxuICAgICAgICBmdW5jdGlvbiBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZShzY29wZSwgY2xvbmVBdHRhY2hGbiwgZnV0dXJlUGFyZW50RWxlbWVudCkge1xuICAgICAgICAgIHZhciB0cmFuc2NsdWRlQ29udHJvbGxlcnM7XG5cbiAgICAgICAgICAvLyBObyBzY29wZSBwYXNzZWQgaW46XG4gICAgICAgICAgaWYgKCFpc1Njb3BlKHNjb3BlKSkge1xuICAgICAgICAgICAgZnV0dXJlUGFyZW50RWxlbWVudCA9IGNsb25lQXR0YWNoRm47XG4gICAgICAgICAgICBjbG9uZUF0dGFjaEZuID0gc2NvcGU7XG4gICAgICAgICAgICBzY29wZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHRyYW5zY2x1ZGVDb250cm9sbGVycyA9IGVsZW1lbnRDb250cm9sbGVycztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFmdXR1cmVQYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPyAkZWxlbWVudC5wYXJlbnQoKSA6ICRlbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGNsb25lQXR0YWNoRm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycywgZnV0dXJlUGFyZW50RWxlbWVudCwgc2NvcGVUb0NoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcmtEaXJlY3RpdmVzQXNJc29sYXRlKGRpcmVjdGl2ZXMpIHtcbiAgICAgIC8vIG1hcmsgYWxsIGRpcmVjdGl2ZXMgYXMgbmVlZGluZyBpc29sYXRlIHNjb3BlLlxuICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0gZGlyZWN0aXZlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgIGRpcmVjdGl2ZXNbal0gPSBpbmhlcml0KGRpcmVjdGl2ZXNbal0sIHskJGlzb2xhdGVTY29wZTogdHJ1ZX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIGRlY29yYXRlcyBpdCB3aXRoIGV4Y2VwdGlvbiBoYW5kbGluZyBhbmQgcHJvcGVyIHBhcmFtZXRlcnMuIFdlXG4gICAgICogY2FsbCB0aGlzIHRoZSBib3VuZERpcmVjdGl2ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBUaGUgZGlyZWN0aXZlIG11c3QgYmUgZm91bmQgaW4gc3BlY2lmaWMgZm9ybWF0LlxuICAgICAqICAgU3RyaW5nIGNvbnRhaW5pbmcgYW55IG9mIHRoZXNlcyBjaGFyYWN0ZXJzOlxuICAgICAqXG4gICAgICogICAqIGBFYDogZWxlbWVudCBuYW1lXG4gICAgICogICAqIGBBJzogYXR0cmlidXRlXG4gICAgICogICAqIGBDYDogY2xhc3NcbiAgICAgKiAgICogYE1gOiBjb21tZW50XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgZGlyZWN0aXZlIHdhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGREaXJlY3RpdmUodERpcmVjdGl2ZXMsIG5hbWUsIGxvY2F0aW9uLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBzdGFydEF0dHJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRBdHRyTmFtZSkge1xuICAgICAgaWYgKG5hbWUgPT09IGlnbm9yZURpcmVjdGl2ZSkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgbWF0Y2ggPSBudWxsO1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpPGlpOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTtcbiAgICAgICAgICAgIGlmICgobWF4UHJpb3JpdHkgPT09IHVuZGVmaW5lZCB8fCBtYXhQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkgJiZcbiAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0LmluZGV4T2YobG9jYXRpb24pICE9IC0xKSB7XG4gICAgICAgICAgICAgIGlmIChzdGFydEF0dHJOYW1lKSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlID0gaW5oZXJpdChkaXJlY3RpdmUsIHskJHN0YXJ0OiBzdGFydEF0dHJOYW1lLCAkJGVuZDogZW5kQXR0ck5hbWV9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0RGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgIG1hdGNoID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogbG9va3MgdXAgdGhlIGRpcmVjdGl2ZSBhbmQgcmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgbXVsdGktZWxlbWVudCBkaXJlY3RpdmUsXG4gICAgICogYW5kIHRoZXJlZm9yZSByZXF1aXJlcyBET00gbm9kZXMgYmV0d2VlbiAtc3RhcnQgYW5kIC1lbmQgbWFya2VycyB0byBiZSBncm91cGVkXG4gICAgICogdG9nZXRoZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgcmVnaXN0ZXJlZCBhcyBtdWx0aS1lbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG5hbWUpIHtcbiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGZvciAodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksXG4gICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaTxpaTsgaSsrKSB7XG4gICAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTtcbiAgICAgICAgICBpZiAoZGlyZWN0aXZlLm11bHRpRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgZWxlbWVudCBpcyByZXBsYWNlZCB3aXRoIEhUTUwgdGVtcGxhdGUgdGhlbiB0aGUgbmV3IGF0dHJpYnV0ZXNcbiAgICAgKiBvbiB0aGUgdGVtcGxhdGUgbmVlZCB0byBiZSBtZXJnZWQgd2l0aCB0aGUgZXhpc3RpbmcgYXR0cmlidXRlcyBpbiB0aGUgRE9NLlxuICAgICAqIFRoZSBkZXNpcmVkIGVmZmVjdCBpcyB0byBoYXZlIGJvdGggb2YgdGhlIGF0dHJpYnV0ZXMgcHJlc2VudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkc3QgZGVzdGluYXRpb24gYXR0cmlidXRlcyAob3JpZ2luYWwgRE9NKVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzcmMgc291cmNlIGF0dHJpYnV0ZXMgKGZyb20gdGhlIGRpcmVjdGl2ZSB0ZW1wbGF0ZSlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyhkc3QsIHNyYykge1xuICAgICAgdmFyIHNyY0F0dHIgPSBzcmMuJGF0dHIsXG4gICAgICAgICAgZHN0QXR0ciA9IGRzdC4kYXR0cixcbiAgICAgICAgICAkZWxlbWVudCA9IGRzdC4kJGVsZW1lbnQ7XG5cbiAgICAgIC8vIHJlYXBwbHkgdGhlIG9sZCBhdHRyaWJ1dGVzIHRvIHRoZSBuZXcgZWxlbWVudFxuICAgICAgZm9yRWFjaChkc3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgIT0gJyQnKSB7XG4gICAgICAgICAgaWYgKHNyY1trZXldICYmIHNyY1trZXldICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUgKz0gKGtleSA9PT0gJ3N0eWxlJyA/ICc7JyA6ICcgJykgKyBzcmNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZHN0LiRzZXQoa2V5LCB2YWx1ZSwgdHJ1ZSwgc3JjQXR0cltrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGNvcHkgdGhlIG5ldyBhdHRyaWJ1dGVzIG9uIHRoZSBvbGQgYXR0cnMgb2JqZWN0XG4gICAgICBmb3JFYWNoKHNyYywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoa2V5ID09ICdjbGFzcycpIHtcbiAgICAgICAgICBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsIHZhbHVlKTtcbiAgICAgICAgICBkc3RbJ2NsYXNzJ10gPSAoZHN0WydjbGFzcyddID8gZHN0WydjbGFzcyddICsgJyAnIDogJycpICsgdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09ICdzdHlsZScpIHtcbiAgICAgICAgICAkZWxlbWVudC5hdHRyKCdzdHlsZScsICRlbGVtZW50LmF0dHIoJ3N0eWxlJykgKyAnOycgKyB2YWx1ZSk7XG4gICAgICAgICAgZHN0WydzdHlsZSddID0gKGRzdFsnc3R5bGUnXSA/IGRzdFsnc3R5bGUnXSArICc7JyA6ICcnKSArIHZhbHVlO1xuICAgICAgICAgIC8vIGBkc3RgIHdpbGwgbmV2ZXIgY29udGFpbiBoYXNPd25Qcm9wZXJ0eSBhcyBET00gcGFyc2VyIHdvbid0IGxldCBpdC5cbiAgICAgICAgICAvLyBZb3Ugd2lsbCBnZXQgYW4gXCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3I6IERPTSBFeGNlcHRpb24gNVwiIGVycm9yIGlmIHlvdVxuICAgICAgICAgIC8vIGhhdmUgYW4gYXR0cmlidXRlIGxpa2UgXCJoYXMtb3duLXByb3BlcnR5XCIgb3IgXCJkYXRhLWhhcy1vd24tcHJvcGVydHlcIiwgZXRjLlxuICAgICAgICB9IGVsc2UgaWYgKGtleS5jaGFyQXQoMCkgIT0gJyQnICYmICFkc3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGRzdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgZHN0QXR0cltrZXldID0gc3JjQXR0cltrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLCAkY29tcGlsZU5vZGUsIHRBdHRycyxcbiAgICAgICAgJHJvb3RFbGVtZW50LCBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBsaW5rUXVldWUgPSBbXSxcbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbixcbiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sXG4gICAgICAgICAgYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXSxcbiAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUgPSBkaXJlY3RpdmVzLnNoaWZ0KCksXG4gICAgICAgICAgLy8gVGhlIGZhY3QgdGhhdCB3ZSBoYXZlIHRvIGNvcHkgYW5kIHBhdGNoIHRoZSBkaXJlY3RpdmUgc2VlbXMgd3JvbmchXG4gICAgICAgICAgZGVyaXZlZFN5bmNEaXJlY3RpdmUgPSBleHRlbmQoe30sIG9yaWdBc3luY0RpcmVjdGl2ZSwge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IG51bGwsIHRyYW5zY2x1ZGU6IG51bGwsIHJlcGxhY2U6IG51bGwsICQkb3JpZ2luYWxEaXJlY3RpdmU6IG9yaWdBc3luY0RpcmVjdGl2ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHRlbXBsYXRlVXJsID0gKGlzRnVuY3Rpb24ob3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKSlcbiAgICAgICAgICAgICAgPyBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwoJGNvbXBpbGVOb2RlLCB0QXR0cnMpXG4gICAgICAgICAgICAgIDogb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsLFxuICAgICAgICAgIHRlbXBsYXRlTmFtZXNwYWNlID0gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlO1xuXG4gICAgICAkY29tcGlsZU5vZGUuZW1wdHkoKTtcblxuICAgICAgJHRlbXBsYXRlUmVxdWVzdCgkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh0ZW1wbGF0ZVVybCkpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgICB2YXIgY29tcGlsZU5vZGUsIHRlbXBUZW1wbGF0ZUF0dHJzLCAkdGVtcGxhdGUsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm47XG5cbiAgICAgICAgICBjb250ZW50ID0gZGVub3JtYWxpemVUZW1wbGF0ZShjb250ZW50KTtcblxuICAgICAgICAgIGlmIChvcmlnQXN5bmNEaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSByZW1vdmVDb21tZW50cyh3cmFwVGVtcGxhdGUodGVtcGxhdGVOYW1lc3BhY2UsIHRyaW0oY29udGVudCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdO1xuXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLFxuICAgICAgICAgICAgICAgICAgXCJUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlICd7MH0nIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfVwiLFxuICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLm5hbWUsIHRlbXBsYXRlVXJsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGVtcFRlbXBsYXRlQXR0cnMgPSB7JGF0dHI6IHt9fTtcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCB0ZW1wVGVtcGxhdGVBdHRycyk7XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdChvcmlnQXN5bmNEaXJlY3RpdmUuc2NvcGUpKSB7XG4gICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVzQXNJc29sYXRlKHRlbXBsYXRlRGlyZWN0aXZlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3RpdmVzID0gdGVtcGxhdGVEaXJlY3RpdmVzLmNvbmNhdChkaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRBdHRycywgdGVtcFRlbXBsYXRlQXR0cnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGU7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChjb250ZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXJlY3RpdmVzLnVuc2hpZnQoZGVyaXZlZFN5bmNEaXJlY3RpdmUpO1xuXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4gPSBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgY29tcGlsZU5vZGUsIHRBdHRycyxcbiAgICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4sICRjb21waWxlTm9kZSwgb3JpZ0FzeW5jRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucyxcbiAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICAgICAgZm9yRWFjaCgkcm9vdEVsZW1lbnQsIGZ1bmN0aW9uKG5vZGUsIGkpIHtcbiAgICAgICAgICAgIGlmIChub2RlID09IGNvbXBpbGVOb2RlKSB7XG4gICAgICAgICAgICAgICRyb290RWxlbWVudFtpXSA9ICRjb21waWxlTm9kZVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4gPSBjb21waWxlTm9kZXMoJGNvbXBpbGVOb2RlWzBdLmNoaWxkTm9kZXMsIGNoaWxkVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgIHdoaWxlIChsaW5rUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgc2NvcGUgPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgbGlua1Jvb3RFbGVtZW50ID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgYm91bmRUcmFuc2NsdWRlRm4gPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBsaW5rTm9kZSA9ICRjb21waWxlTm9kZVswXTtcblxuICAgICAgICAgICAgaWYgKHNjb3BlLiQkZGVzdHJveWVkKSBjb250aW51ZTtcblxuICAgICAgICAgICAgaWYgKGJlZm9yZVRlbXBsYXRlTGlua05vZGUgIT09IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUpIHtcbiAgICAgICAgICAgICAgdmFyIG9sZENsYXNzZXMgPSBiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlLmNsYXNzTmFtZTtcblxuICAgICAgICAgICAgICBpZiAoIShwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlICYmXG4gICAgICAgICAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUucmVwbGFjZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBpdCB3YXMgY2xvbmVkIHRoZXJlZm9yZSB3ZSBoYXZlIHRvIGNsb25lIGFzIHdlbGwuXG4gICAgICAgICAgICAgICAgbGlua05vZGUgPSBqcUxpdGVDbG9uZShjb21waWxlTm9kZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVwbGFjZVdpdGgobGlua1Jvb3RFbGVtZW50LCBqcUxpdGUoYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSksIGxpbmtOb2RlKTtcblxuICAgICAgICAgICAgICAvLyBDb3B5IGluIENTUyBjbGFzc2VzIGZyb20gb3JpZ2luYWwgbm9kZVxuICAgICAgICAgICAgICBzYWZlQWRkQ2xhc3MoanFMaXRlKGxpbmtOb2RlKSwgb2xkQ2xhc3Nlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlLCBib3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBsaW5rTm9kZSwgJHJvb3RFbGVtZW50LFxuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGlua1F1ZXVlID0gbnVsbDtcbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxheWVkTm9kZUxpbmtGbihpZ25vcmVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBib3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICB2YXIgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGxpbmtRdWV1ZSkge1xuICAgICAgICAgIGxpbmtRdWV1ZS5wdXNoKHNjb3BlKTtcbiAgICAgICAgICBsaW5rUXVldWUucHVzaChub2RlKTtcbiAgICAgICAgICBsaW5rUXVldWUucHVzaChyb290RWxlbWVudCk7XG4gICAgICAgICAgbGlua1F1ZXVlLnB1c2goY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGUsIGJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogU29ydGluZyBmdW5jdGlvbiBmb3IgYm91bmQgZGlyZWN0aXZlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBieVByaW9yaXR5KGEsIGIpIHtcbiAgICAgIHZhciBkaWZmID0gYi5wcmlvcml0eSAtIGEucHJpb3JpdHk7XG4gICAgICBpZiAoZGlmZiAhPT0gMCkgcmV0dXJuIGRpZmY7XG4gICAgICBpZiAoYS5uYW1lICE9PSBiLm5hbWUpIHJldHVybiAoYS5uYW1lIDwgYi5uYW1lKSA/IC0xIDogMTtcbiAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFzc2VydE5vRHVwbGljYXRlKHdoYXQsIHByZXZpb3VzRGlyZWN0aXZlLCBkaXJlY3RpdmUsIGVsZW1lbnQpIHtcbiAgICAgIGlmIChwcmV2aW91c0RpcmVjdGl2ZSkge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbXVsdGlkaXInLCAnTXVsdGlwbGUgZGlyZWN0aXZlcyBbezB9LCB7MX1dIGFza2luZyBmb3IgezJ9IG9uOiB7M30nLFxuICAgICAgICAgICAgcHJldmlvdXNEaXJlY3RpdmUubmFtZSwgZGlyZWN0aXZlLm5hbWUsIHdoYXQsIHN0YXJ0aW5nVGFnKGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZShkaXJlY3RpdmVzLCB0ZXh0KSB7XG4gICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh0ZXh0LCB0cnVlKTtcbiAgICAgIGlmIChpbnRlcnBvbGF0ZUZuKSB7XG4gICAgICAgIGRpcmVjdGl2ZXMucHVzaCh7XG4gICAgICAgICAgcHJpb3JpdHk6IDAsXG4gICAgICAgICAgY29tcGlsZTogZnVuY3Rpb24gdGV4dEludGVycG9sYXRlQ29tcGlsZUZuKHRlbXBsYXRlTm9kZSkge1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlTm9kZVBhcmVudCA9IHRlbXBsYXRlTm9kZS5wYXJlbnQoKSxcbiAgICAgICAgICAgICAgICBoYXNDb21waWxlUGFyZW50ID0gISF0ZW1wbGF0ZU5vZGVQYXJlbnQubGVuZ3RoO1xuXG4gICAgICAgICAgICAvLyBXaGVuIHRyYW5zY2x1ZGluZyBhIHRlbXBsYXRlIHRoYXQgaGFzIGJpbmRpbmdzIGluIHRoZSByb290XG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBoYXZlIGEgcGFyZW50IGFuZCB0aHVzIG5lZWQgdG8gYWRkIHRoZSBjbGFzcyBkdXJpbmcgbGlua2luZyBmbi5cbiAgICAgICAgICAgIGlmIChoYXNDb21waWxlUGFyZW50KSBjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlTm9kZVBhcmVudCk7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiB0ZXh0SW50ZXJwb2xhdGVMaW5rRm4oc2NvcGUsIG5vZGUpIHtcbiAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50KCk7XG4gICAgICAgICAgICAgIGlmICghaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyhwYXJlbnQpO1xuICAgICAgICAgICAgICBjb21waWxlLiQkYWRkQmluZGluZ0luZm8ocGFyZW50LCBpbnRlcnBvbGF0ZUZuLmV4cHJlc3Npb25zKTtcbiAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIG5vZGVbMF0ubm9kZVZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gd3JhcFRlbXBsYXRlKHR5cGUsIHRlbXBsYXRlKSB7XG4gICAgICB0eXBlID0gbG93ZXJjYXNlKHR5cGUgfHwgJ2h0bWwnKTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnc3ZnJzpcbiAgICAgIGNhc2UgJ21hdGgnOlxuICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB3cmFwcGVyLmlubmVySFRNTCA9ICc8Jyt0eXBlKyc+Jyt0ZW1wbGF0ZSsnPC8nK3R5cGUrJz4nO1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBnZXRUcnVzdGVkQ29udGV4dChub2RlLCBhdHRyTm9ybWFsaXplZE5hbWUpIHtcbiAgICAgIGlmIChhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJzcmNkb2NcIikge1xuICAgICAgICByZXR1cm4gJHNjZS5IVE1MO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IG5vZGVOYW1lXyhub2RlKTtcbiAgICAgIC8vIG1hY3Rpb25beGxpbms6aHJlZl0gY2FuIHNvdXJjZSBTVkcuICBJdCdzIG5vdCBsaW1pdGVkIHRvIDxtYWN0aW9uPi5cbiAgICAgIGlmIChhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJ4bGlua0hyZWZcIiB8fFxuICAgICAgICAgICh0YWcgPT0gXCJmb3JtXCIgJiYgYXR0ck5vcm1hbGl6ZWROYW1lID09IFwiYWN0aW9uXCIpIHx8XG4gICAgICAgICAgKHRhZyAhPSBcImltZ1wiICYmIChhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJzcmNcIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOb3JtYWxpemVkTmFtZSA9PSBcIm5nU3JjXCIpKSkge1xuICAgICAgICByZXR1cm4gJHNjZS5SRVNPVVJDRV9VUkw7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5hbWUsIGFsbE9yTm90aGluZykge1xuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodmFsdWUsIHRydWUpO1xuXG4gICAgICAvLyBubyBpbnRlcnBvbGF0aW9uIGZvdW5kIC0+IGlnbm9yZVxuICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47XG5cblxuICAgICAgaWYgKG5hbWUgPT09IFwibXVsdGlwbGVcIiAmJiBub2RlTmFtZV8obm9kZSkgPT09IFwic2VsZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoXCJzZWxtdWx0aVwiLFxuICAgICAgICAgICAgXCJCaW5kaW5nIHRvIHRoZSAnbXVsdGlwbGUnIGF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkLiBFbGVtZW50OiB7MH1cIixcbiAgICAgICAgICAgIHN0YXJ0aW5nVGFnKG5vZGUpKTtcbiAgICAgIH1cblxuICAgICAgZGlyZWN0aXZlcy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZVByZUxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgICAgICAgIHZhciAkJG9ic2VydmVycyA9IChhdHRyLiQkb2JzZXJ2ZXJzIHx8IChhdHRyLiQkb2JzZXJ2ZXJzID0ge30pKTtcblxuICAgICAgICAgICAgICAgIGlmIChFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub2RvbWV2ZW50cycsXG4gICAgICAgICAgICAgICAgICAgICAgXCJJbnRlcnBvbGF0aW9ucyBmb3IgSFRNTCBET00gZXZlbnQgYXR0cmlidXRlcyBhcmUgZGlzYWxsb3dlZC4gIFBsZWFzZSB1c2UgdGhlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuZy0gdmVyc2lvbnMgKHN1Y2ggYXMgbmctY2xpY2sgaW5zdGVhZCBvZiBvbmNsaWNrKSBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYXR0cmlidXRlIHdhcyByZW1vdmVkLCB0aGVuIHdlIGFyZSBkb25lXG4gICAgICAgICAgICAgICAgaWYgKCFhdHRyW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBpbnRlcnBvbGF0ZSBhZ2FpbiwgaW4gY2FzZSB0aGUgYXR0cmlidXRlIHZhbHVlIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICAvLyAoZS5nLiBieSBhbm90aGVyIGRpcmVjdGl2ZSdzIGNvbXBpbGUgZnVuY3Rpb24pXG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShhdHRyW25hbWVdLCB0cnVlLCBnZXRUcnVzdGVkQ29udGV4dChub2RlLCBuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgQUxMX09SX05PVEhJTkdfQVRUUlNbbmFtZV0gfHwgYWxsT3JOb3RoaW5nKTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIGF0dHJpYnV0ZSB3YXMgdXBkYXRlZCBzbyB0aGF0IHRoZXJlIGlzIG5vIGludGVycG9sYXRpb24gZ29pbmcgb24gd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAgICAgICAgIC8vIHJlZ2lzdGVyIGFueSBvYnNlcnZlcnNcbiAgICAgICAgICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemUgYXR0ciBvYmplY3Qgc28gdGhhdCBpdCdzIHJlYWR5IGluIGNhc2Ugd2UgbmVlZCB0aGUgdmFsdWUgZm9yIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBzY29wZSBpbml0aWFsaXphdGlvbiwgb3RoZXJ3aXNlIHRoZSB2YWx1ZSB3b3VsZCBub3QgYmUgYXZhaWxhYmxlIGZyb20gaXNvbGF0ZVxuICAgICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZSdzIGxpbmtpbmcgZm4gZHVyaW5nIGxpbmtpbmcgcGhhc2VcbiAgICAgICAgICAgICAgICBhdHRyW25hbWVdID0gaW50ZXJwb2xhdGVGbihzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAoJCRvYnNlcnZlcnNbbmFtZV0gfHwgKCQkb2JzZXJ2ZXJzW25hbWVdID0gW10pKS4kJGludGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAoYXR0ci4kJG9ic2VydmVycyAmJiBhdHRyLiQkb2JzZXJ2ZXJzW25hbWVdLiQkc2NvcGUgfHwgc2NvcGUpLlxuICAgICAgICAgICAgICAgICAgJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIGNsYXNzIGF0dHJpYnV0ZSBhZGRpdGlvbiArIHJlbW92YWxcbiAgICAgICAgICAgICAgICAgICAgLy9zbyB0aGF0IGNsYXNzIGNoYW5nZXMgY2FuIHRhcCBpbnRvIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy9ob29rcyBwcm92aWRlZCBieSB0aGUgJGFuaW1hdGUgc2VydmljZS4gQmUgc3VyZSB0b1xuICAgICAgICAgICAgICAgICAgICAvL3NraXAgYW5pbWF0aW9ucyB3aGVuIHRoZSBmaXJzdCBkaWdlc3Qgb2NjdXJzICh3aGVuXG4gICAgICAgICAgICAgICAgICAgIC8vYm90aCB0aGUgbmV3IGFuZCB0aGUgb2xkIHZhbHVlcyBhcmUgdGhlIHNhbWUpIHNpbmNlXG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIENTUyBjbGFzc2VzIGFyZSB0aGUgbm9uLWludGVycG9sYXRlZCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdjbGFzcycgJiYgbmV3VmFsdWUgIT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyLiR1cGRhdGVDbGFzcyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHIuJHNldChuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVGhpcyBpcyBhIHNwZWNpYWwganFMaXRlLnJlcGxhY2VXaXRoLCB3aGljaCBjYW4gcmVwbGFjZSBpdGVtcyB3aGljaFxuICAgICAqIGhhdmUgbm8gcGFyZW50cywgcHJvdmlkZWQgdGhhdCB0aGUgY29udGFpbmluZyBqcUxpdGUgY29sbGVjdGlvbiBpcyBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SnFMaXRlPX0gJHJvb3RFbGVtZW50IFRoZSByb290IG9mIHRoZSBjb21waWxlIHRyZWUuIFVzZWQgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSBub2Rlc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSByb290IG9mIHRoZSB0cmVlLlxuICAgICAqIEBwYXJhbSB7SnFMaXRlfSBlbGVtZW50c1RvUmVtb3ZlIFRoZSBqcUxpdGUgZWxlbWVudCB3aGljaCB3ZSBhcmUgZ29pbmcgdG8gcmVwbGFjZS4gV2Uga2VlcFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzaGVsbCwgYnV0IHJlcGxhY2UgaXRzIERPTSBub2RlIHJlZmVyZW5jZS5cbiAgICAgKiBAcGFyYW0ge05vZGV9IG5ld05vZGUgVGhlIG5ldyBET00gbm9kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsIGVsZW1lbnRzVG9SZW1vdmUsIG5ld05vZGUpIHtcbiAgICAgIHZhciBmaXJzdEVsZW1lbnRUb1JlbW92ZSA9IGVsZW1lbnRzVG9SZW1vdmVbMF0sXG4gICAgICAgICAgcmVtb3ZlQ291bnQgPSBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCxcbiAgICAgICAgICBwYXJlbnQgPSBmaXJzdEVsZW1lbnRUb1JlbW92ZS5wYXJlbnROb2RlLFxuICAgICAgICAgIGksIGlpO1xuXG4gICAgICBpZiAoJHJvb3RFbGVtZW50KSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gJHJvb3RFbGVtZW50Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50W2ldID09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAkcm9vdEVsZW1lbnRbaSsrXSA9IG5ld05vZGU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSwgajIgPSBqICsgcmVtb3ZlQ291bnQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgamogPSAkcm9vdEVsZW1lbnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICBqIDwgamo7IGorKywgajIrKykge1xuICAgICAgICAgICAgICBpZiAoajIgPCBqaikge1xuICAgICAgICAgICAgICAgICRyb290RWxlbWVudFtqXSA9ICRyb290RWxlbWVudFtqMl07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRyb290RWxlbWVudFtqXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHJvb3RFbGVtZW50Lmxlbmd0aCAtPSByZW1vdmVDb3VudCAtIDE7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSByZXBsYWNlZCBlbGVtZW50IGlzIGFsc28gdGhlIGpRdWVyeSAuY29udGV4dCB0aGVuIHJlcGxhY2UgaXRcbiAgICAgICAgICAgIC8vIC5jb250ZXh0IGlzIGEgZGVwcmVjYXRlZCBqUXVlcnkgYXBpLCBzbyB3ZSBzaG91bGQgc2V0IGl0IG9ubHkgd2hlbiBqUXVlcnkgc2V0IGl0XG4gICAgICAgICAgICAvLyBodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGV4dC9cbiAgICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnQuY29udGV4dCA9PT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50LmNvbnRleHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdOb2RlLCBmaXJzdEVsZW1lbnRUb1JlbW92ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE8ocGVyZik6IHdoYXQncyB0aGlzIGRvY3VtZW50IGZyYWdtZW50IGZvcj8gaXMgaXQgbmVlZGVkPyBjYW4gd2UgYXQgbGVhc3QgcmV1c2UgaXQ/XG4gICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChmaXJzdEVsZW1lbnRUb1JlbW92ZSk7XG5cbiAgICAgIC8vIENvcHkgb3ZlciB1c2VyIGRhdGEgKHRoYXQgaW5jbHVkZXMgQW5ndWxhcidzICRzY29wZSBldGMuKS4gRG9uJ3QgY29weSBwcml2YXRlXG4gICAgICAvLyBkYXRhIGhlcmUgYmVjYXVzZSB0aGVyZSdzIG5vIHB1YmxpYyBpbnRlcmZhY2UgaW4galF1ZXJ5IHRvIGRvIHRoYXQgYW5kIGNvcHlpbmcgb3ZlclxuICAgICAgLy8gZXZlbnQgbGlzdGVuZXJzICh3aGljaCBpcyB0aGUgbWFpbiB1c2Ugb2YgcHJpdmF0ZSBkYXRhKSB3b3VsZG4ndCB3b3JrIGFueXdheS5cbiAgICAgIGpxTGl0ZShuZXdOb2RlKS5kYXRhKGpxTGl0ZShmaXJzdEVsZW1lbnRUb1JlbW92ZSkuZGF0YSgpKTtcblxuICAgICAgLy8gUmVtb3ZlIGRhdGEgb2YgdGhlIHJlcGxhY2VkIGVsZW1lbnQuIFdlIGNhbm5vdCBqdXN0IGNhbGwgLnJlbW92ZSgpXG4gICAgICAvLyBvbiB0aGUgZWxlbWVudCBpdCBzaW5jZSB0aGF0IHdvdWxkIGRlYWxsb2NhdGUgc2NvcGUgdGhhdCBpcyBuZWVkZWRcbiAgICAgIC8vIGZvciB0aGUgbmV3IG5vZGUuIEluc3RlYWQsIHJlbW92ZSB0aGUgZGF0YSBcIm1hbnVhbGx5XCIuXG4gICAgICBpZiAoIWpRdWVyeSkge1xuICAgICAgICBkZWxldGUganFMaXRlLmNhY2hlW2ZpcnN0RWxlbWVudFRvUmVtb3ZlW2pxTGl0ZS5leHBhbmRvXV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBqUXVlcnkgMi54IGRvZXNuJ3QgZXhwb3NlIHRoZSBkYXRhIHN0b3JhZ2UuIFVzZSBqUXVlcnkuY2xlYW5EYXRhIHRvIGNsZWFuIHVwIGFmdGVyXG4gICAgICAgIC8vIHRoZSByZXBsYWNlZCBlbGVtZW50LiBUaGUgY2xlYW5EYXRhIHZlcnNpb24gbW9ua2V5LXBhdGNoZWQgYnkgQW5ndWxhciB3b3VsZCBjYXVzZVxuICAgICAgICAvLyB0aGUgc2NvcGUgdG8gYmUgdHJhc2hlZCBhbmQgd2UgZG8gbmVlZCB0aGUgdmVyeSBzYW1lIHNjb3BlIHRvIHdvcmsgd2l0aCB0aGUgbmV3XG4gICAgICAgIC8vIGVsZW1lbnQuIEhvd2V2ZXIsIHdlIGNhbm5vdCBqdXN0IGNhY2hlIHRoZSBub24tcGF0Y2hlZCB2ZXJzaW9uIGFuZCB1c2UgaXQgaGVyZSBhc1xuICAgICAgICAvLyB0aGF0IHdvdWxkIGJyZWFrIGlmIGFub3RoZXIgbGlicmFyeSBwYXRjaGVzIHRoZSBtZXRob2QgYWZ0ZXIgQW5ndWxhciBkb2VzIChvbmVcbiAgICAgICAgLy8gZXhhbXBsZSBpcyBqUXVlcnkgVUkpLiBJbnN0ZWFkLCBzZXQgYSBmbGFnIGluZGljYXRpbmcgc2NvcGUgZGVzdHJveWluZyBzaG91bGQgYmVcbiAgICAgICAgLy8gc2tpcHBlZCB0aGlzIG9uZSB0aW1lLlxuICAgICAgICBza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSA9IHRydWU7XG4gICAgICAgIGpRdWVyeS5jbGVhbkRhdGEoW2ZpcnN0RWxlbWVudFRvUmVtb3ZlXSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGsgPSAxLCBrayA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoOyBrIDwga2s7IGsrKykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzVG9SZW1vdmVba107XG4gICAgICAgIGpxTGl0ZShlbGVtZW50KS5yZW1vdmUoKTsgLy8gbXVzdCBkbyB0aGlzIHdheSB0byBjbGVhbiB1cCBleHBhbmRvXG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICBkZWxldGUgZWxlbWVudHNUb1JlbW92ZVtrXTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudHNUb1JlbW92ZVswXSA9IG5ld05vZGU7XG4gICAgICBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCA9IDE7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjbG9uZUFuZEFubm90YXRlRm4oZm4sIGFubm90YXRpb24pIHtcbiAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oKSB7IHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9LCBmbiwgYW5ub3RhdGlvbik7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbnZva2VMaW5rRm4obGlua0ZuLCBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuICB9XTtcbn1cblxudmFyIFBSRUZJWF9SRUdFWFAgPSAvXigoPzp4fGRhdGEpW1xcOlxcLV9dKS9pO1xuLyoqXG4gKiBDb252ZXJ0cyBhbGwgYWNjZXB0ZWQgZGlyZWN0aXZlcyBmb3JtYXQgaW50byBwcm9wZXIgZGlyZWN0aXZlIG5hbWUuXG4gKiBBbGwgb2YgdGhlc2Ugd2lsbCBiZWNvbWUgJ215RGlyZWN0aXZlJzpcbiAqICAgbXk6RGlyZWN0aXZlXG4gKiAgIG15LWRpcmVjdGl2ZVxuICogICB4LW15LWRpcmVjdGl2ZVxuICogICBkYXRhLW15OmRpcmVjdGl2ZVxuICpcbiAqIEFsc28gdGhlcmUgaXMgc3BlY2lhbCBjYXNlIGZvciBNb3ogcHJlZml4IHN0YXJ0aW5nIHdpdGggdXBwZXIgY2FzZSBsZXR0ZXIuXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICovXG5mdW5jdGlvbiBkaXJlY3RpdmVOb3JtYWxpemUobmFtZSkge1xuICByZXR1cm4gY2FtZWxDYXNlKG5hbWUucmVwbGFjZShQUkVGSVhfUkVHRVhQLCAnJykpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBzaGFyZWQgb2JqZWN0IGJldHdlZW4gZGlyZWN0aXZlIGNvbXBpbGUgLyBsaW5raW5nIGZ1bmN0aW9ucyB3aGljaCBjb250YWlucyBub3JtYWxpemVkIERPTVxuICogZWxlbWVudCBhdHRyaWJ1dGVzLiBUaGUgdmFsdWVzIHJlZmxlY3QgY3VycmVudCBiaW5kaW5nIHN0YXRlIGB7eyB9fWAuIFRoZSBub3JtYWxpemF0aW9uIGlzXG4gKiBuZWVkZWQgc2luY2UgYWxsIG9mIHRoZXNlIGFyZSB0cmVhdGVkIGFzIGVxdWl2YWxlbnQgaW4gQW5ndWxhcjpcbiAqXG4gKiBgYGBcbiAqICAgIDxzcGFuIG5nOmJpbmQ9XCJhXCIgbmctYmluZD1cImFcIiBkYXRhLW5nLWJpbmQ9XCJhXCIgeC1uZy1iaW5kPVwiYVwiPlxuICogYGBgXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvcGVydHlcbiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhdHRyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIG1hcCBvZiBET00gZWxlbWVudCBhdHRyaWJ1dGUgbmFtZXMgdG8gdGhlIG5vcm1hbGl6ZWQgbmFtZS4gVGhpcyBpc1xuICogbmVlZGVkIHRvIGRvIHJldmVyc2UgbG9va3VwIGZyb20gbm9ybWFsaXplZCBuYW1lIGJhY2sgdG8gYWN0dWFsIG5hbWUuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRzZXRcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXQgRE9NIGVsZW1lbnQgYXR0cmlidXRlIHZhbHVlLlxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOb3JtYWxpemVkIGVsZW1lbnQgYXR0cmlidXRlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIG1vZGlmeS4gVGhlIG5hbWUgaXNcbiAqICAgICAgICAgIHJldmVyc2UtdHJhbnNsYXRlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhdHRyICRhdHRyfVxuICogICAgICAgICAgcHJvcGVydHkgdG8gdGhlIG9yaWdpbmFsIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gc2V0IHRoZSBhdHRyaWJ1dGUgdG8uIFRoZSB2YWx1ZSBjYW4gYmUgYW4gaW50ZXJwb2xhdGVkIHN0cmluZy5cbiAqL1xuXG5cblxuLyoqXG4gKiBDbG9zdXJlIGNvbXBpbGVyIHR5cGUgaW5mb3JtYXRpb25cbiAqL1xuXG5mdW5jdGlvbiBub2Rlc2V0TGlua2luZ0ZuKFxuICAvKiBhbmd1bGFyLlNjb3BlICovIHNjb3BlLFxuICAvKiBOb2RlTGlzdCAqLyBub2RlTGlzdCxcbiAgLyogRWxlbWVudCAqLyByb290RWxlbWVudCxcbiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovIGJvdW5kVHJhbnNjbHVkZUZuXG4pIHt9XG5cbmZ1bmN0aW9uIGRpcmVjdGl2ZUxpbmtpbmdGbihcbiAgLyogbm9kZXNldExpbmtpbmdGbiAqLyBub2Rlc2V0TGlua2luZ0ZuLFxuICAvKiBhbmd1bGFyLlNjb3BlICovIHNjb3BlLFxuICAvKiBOb2RlICovIG5vZGUsXG4gIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsXG4gIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGblxuKSB7fVxuXG5mdW5jdGlvbiB0b2tlbkRpZmZlcmVuY2Uoc3RyMSwgc3RyMikge1xuICB2YXIgdmFsdWVzID0gJycsXG4gICAgICB0b2tlbnMxID0gc3RyMS5zcGxpdCgvXFxzKy8pLFxuICAgICAgdG9rZW5zMiA9IHN0cjIuc3BsaXQoL1xccysvKTtcblxuICBvdXRlcjpcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMxLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRva2VuczIubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmICh0b2tlbiA9PSB0b2tlbnMyW2pdKSBjb250aW51ZSBvdXRlcjtcbiAgICB9XG4gICAgdmFsdWVzICs9ICh2YWx1ZXMubGVuZ3RoID4gMCA/ICcgJyA6ICcnKSArIHRva2VuO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNvbW1lbnRzKGpxTm9kZXMpIHtcbiAganFOb2RlcyA9IGpxTGl0ZShqcU5vZGVzKTtcbiAgdmFyIGkgPSBqcU5vZGVzLmxlbmd0aDtcblxuICBpZiAoaSA8PSAxKSB7XG4gICAgcmV0dXJuIGpxTm9kZXM7XG4gIH1cblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIG5vZGUgPSBqcU5vZGVzW2ldO1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfQ09NTUVOVCkge1xuICAgICAgc3BsaWNlLmNhbGwoanFOb2RlcywgaSwgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBqcU5vZGVzO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyIHNlcnZpY2V9IGlzIHVzZWQgYnkgQW5ndWxhciB0byBjcmVhdGUgbmV3XG4gKiBjb250cm9sbGVycy5cbiAqXG4gKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBjb250cm9sbGVyIHJlZ2lzdHJhdGlvbiB2aWEgdGhlXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciByZWdpc3Rlcn0gbWV0aG9kLlxuICovXG5mdW5jdGlvbiAkQ29udHJvbGxlclByb3ZpZGVyKCkge1xuICB2YXIgY29udHJvbGxlcnMgPSB7fSxcbiAgICAgIGdsb2JhbHMgPSBmYWxzZSxcbiAgICAgIENOVFJMX1JFRyA9IC9eKFxcUyspKFxccythc1xccysoXFx3KykpPyQvO1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlclxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZSBrZXlzIGFyZVxuICAgKiAgICB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZm4gKG9wdGlvbmFsbHkgZGVjb3JhdGVkIHdpdGggRElcbiAgICogICAgYW5ub3RhdGlvbnMgaW4gdGhlIGFycmF5IG5vdGF0aW9uKS5cbiAgICovXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBjb25zdHJ1Y3Rvcikge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb250cm9sbGVyJyk7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICBleHRlbmQoY29udHJvbGxlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250cm9sbGVyc1tuYW1lXSA9IGNvbnN0cnVjdG9yO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFsc1xuICAgKiBAZGVzY3JpcHRpb24gSWYgY2FsbGVkLCBhbGxvd3MgYCRjb250cm9sbGVyYCB0byBmaW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3JzIG9uIGB3aW5kb3dgXG4gICAqL1xuICB0aGlzLmFsbG93R2xvYmFscyA9IGZ1bmN0aW9uKCkge1xuICAgIGdsb2JhbHMgPSB0cnVlO1xuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRpbmplY3RvciwgJHdpbmRvdykge1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkY29udHJvbGxlclxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBjb25zdHJ1Y3RvciBJZiBjYWxsZWQgd2l0aCBhIGZ1bmN0aW9uIHRoZW4gaXQncyBjb25zaWRlcmVkIHRvIGJlIHRoZVxuICAgICAqICAgIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIE90aGVyd2lzZSBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgYSBzdHJpbmcgd2hpY2ggaXMgdXNlZFxuICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6XG4gICAgICpcbiAgICAgKiAgICAqIGNoZWNrIGlmIGEgY29udHJvbGxlciB3aXRoIGdpdmVuIG5hbWUgaXMgcmVnaXN0ZXJlZCB2aWEgYCRjb250cm9sbGVyUHJvdmlkZXJgXG4gICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yXG4gICAgICogICAgKiBpZiAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscywgY2hlY2sgYHdpbmRvd1tjb25zdHJ1Y3Rvcl1gIG9uIHRoZSBnbG9iYWxcbiAgICAgKiAgICAgIGB3aW5kb3dgIG9iamVjdCAobm90IHJlY29tbWVuZGVkKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxvY2FscyBJbmplY3Rpb24gbG9jYWxzIGZvciBDb250cm9sbGVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgZ2l2ZW4gY29udHJvbGxlci5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGAkY29udHJvbGxlcmAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgaW5zdGFudGlhdGluZyBjb250cm9sbGVycy5cbiAgICAgKlxuICAgICAqIEl0J3MganVzdCBhIHNpbXBsZSBjYWxsIHRvIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LCBidXQgZXh0cmFjdGVkIGludG9cbiAgICAgKiBhIHNlcnZpY2UsIHNvIHRoYXQgb25lIGNhbiBvdmVycmlkZSB0aGlzIHNlcnZpY2Ugd2l0aCBbQkMgdmVyc2lvbl0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTY0OTc4OCkuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGxvY2FscywgbGF0ZXIsIGlkZW50KSB7XG4gICAgICAvLyBQUklWQVRFIEFQSTpcbiAgICAgIC8vICAgcGFyYW0gYGxhdGVyYCAtLS0gaW5kaWNhdGVzIHRoYXQgdGhlIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3RvciBpcyBpbnZva2VkIGF0IGEgbGF0ZXIgdGltZS5cbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgSWYgdHJ1ZSwgJGNvbnRyb2xsZXIgd2lsbCBhbGxvY2F0ZSB0aGUgb2JqZWN0IHdpdGggdGhlIGNvcnJlY3RcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgcHJvdG90eXBlIGNoYWluLCBidXQgd2lsbCBub3QgaW52b2tlIHRoZSBjb250cm9sbGVyIHVudGlsIGEgcmV0dXJuZWRcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgaXMgaW52b2tlZC5cbiAgICAgIC8vICAgcGFyYW0gYGlkZW50YCAtLS0gQW4gb3B0aW9uYWwgbGFiZWwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBsYWJlbCBwYXJzZWQgZnJvbSB0aGUgY29udHJvbGxlclxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCBpZiBhbnkuXG4gICAgICB2YXIgaW5zdGFuY2UsIG1hdGNoLCBjb25zdHJ1Y3RvciwgaWRlbnRpZmllcjtcbiAgICAgIGxhdGVyID0gbGF0ZXIgPT09IHRydWU7XG4gICAgICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSB7XG4gICAgICAgIGlkZW50aWZpZXIgPSBpZGVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKGV4cHJlc3Npb24pKSB7XG4gICAgICAgIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaChDTlRSTF9SRUcpLFxuICAgICAgICBjb25zdHJ1Y3RvciA9IG1hdGNoWzFdLFxuICAgICAgICBpZGVudGlmaWVyID0gaWRlbnRpZmllciB8fCBtYXRjaFszXTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGNvbnRyb2xsZXJzLmhhc093blByb3BlcnR5KGNvbnN0cnVjdG9yKVxuICAgICAgICAgICAgPyBjb250cm9sbGVyc1tjb25zdHJ1Y3Rvcl1cbiAgICAgICAgICAgIDogZ2V0dGVyKGxvY2Fscy4kc2NvcGUsIGNvbnN0cnVjdG9yLCB0cnVlKSB8fFxuICAgICAgICAgICAgICAgIChnbG9iYWxzID8gZ2V0dGVyKCR3aW5kb3csIGNvbnN0cnVjdG9yLCB0cnVlKSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgYXNzZXJ0QXJnRm4oZXhwcmVzc2lvbiwgY29uc3RydWN0b3IsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGF0ZXIpIHtcbiAgICAgICAgLy8gSW5zdGFudGlhdGUgY29udHJvbGxlciBsYXRlcjpcbiAgICAgICAgLy8gVGhpcyBtYWNoaW5lcnkgaXMgdXNlZCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG9iamVjdCBiZWZvcmUgY2FsbGluZyB0aGVcbiAgICAgICAgLy8gY29udHJvbGxlcidzIGNvbnN0cnVjdG9yIGl0c2VsZi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlciBiZWZvcmUgdGhlIGNvbnN0cnVjdG9yIGlzXG4gICAgICAgIC8vIGludm9rZWQuIFByaW1hcmlseSwgdGhpcyBpcyB1c2VkIGZvciBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIGluICRjb21waWxlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGZlYXR1cmUgaXMgbm90IGludGVuZGVkIGZvciB1c2UgYnkgYXBwbGljYXRpb25zLCBhbmQgaXMgdGh1cyBub3QgZG9jdW1lbnRlZFxuICAgICAgICAvLyBwdWJsaWNseS5cbiAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gKGlzQXJyYXkoZXhwcmVzc2lvbikgP1xuICAgICAgICAgIGV4cHJlc3Npb25bZXhwcmVzc2lvbi5sZW5ndGggLSAxXSA6IGV4cHJlc3Npb24pLnByb3RvdHlwZTtcbiAgICAgICAgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcblxuICAgICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGluamVjdG9yLmludm9rZShleHByZXNzaW9uLCBpbnN0YW5jZSwgbG9jYWxzLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGluc3RhbmNlID0gJGluamVjdG9yLmluc3RhbnRpYXRlKGV4cHJlc3Npb24sIGxvY2FscywgY29uc3RydWN0b3IpO1xuXG4gICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBuYW1lKSB7XG4gICAgICBpZiAoIShsb2NhbHMgJiYgaXNPYmplY3QobG9jYWxzLiRzY29wZSkpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGNvbnRyb2xsZXInKSgnbm9zY3AnLFxuICAgICAgICAgIFwiQ2Fubm90IGV4cG9ydCBjb250cm9sbGVyICd7MH0nIGFzICd7MX0nISBObyAkc2NvcGUgb2JqZWN0IHByb3ZpZGVkIHZpYSBgbG9jYWxzYC5cIixcbiAgICAgICAgICBuYW1lLCBpZGVudGlmaWVyKTtcbiAgICAgIH1cblxuICAgICAgbG9jYWxzLiRzY29wZVtpZGVudGlmaWVyXSA9IGluc3RhbmNlO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRkb2N1bWVudFxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEge0BsaW5rIGFuZ3VsYXIuZWxlbWVudCBqUXVlcnkgb3IganFMaXRlfSB3cmFwcGVyIGZvciB0aGUgYnJvd3NlcidzIGB3aW5kb3cuZG9jdW1lbnRgIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiZG9jdW1lbnRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPiRkb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cInRpdGxlXCI+PC9iPjwvcD5cbiAgICAgICAgIDxwPndpbmRvdy5kb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cIndpbmRvd1RpdGxlXCI+PC9iPjwvcD5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2RvY3VtZW50RXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJGRvY3VtZW50WzBdLnRpdGxlO1xuICAgICAgICAgICAkc2NvcGUud2luZG93VGl0bGUgPSBhbmd1bGFyLmVsZW1lbnQod2luZG93LmRvY3VtZW50KVswXS50aXRsZTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkRG9jdW1lbnRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24od2luZG93KSB7XG4gICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpO1xuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGV4Y2VwdGlvbkhhbmRsZXJcbiAqIEByZXF1aXJlcyBuZy4kbG9nXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBbnkgdW5jYXVnaHQgZXhjZXB0aW9uIGluIGFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGVsZWdhdGVkIHRvIHRoaXMgc2VydmljZS5cbiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSBkZWxlZ2F0ZXMgdG8gYCRsb2cuZXJyb3JgIHdoaWNoIGxvZ3MgaXQgaW50b1xuICogdGhlIGJyb3dzZXIgY29uc29sZS5cbiAqXG4gKiBJbiB1bml0IHRlc3RzLCBpZiBgYW5ndWxhci1tb2Nrcy5qc2AgaXMgbG9hZGVkLCB0aGlzIHNlcnZpY2UgaXMgb3ZlcnJpZGRlbiBieVxuICoge0BsaW5rIG5nTW9jay4kZXhjZXB0aW9uSGFuZGxlciBtb2NrICRleGNlcHRpb25IYW5kbGVyfSB3aGljaCBhaWRzIGluIHRlc3RpbmcuXG4gKlxuICogIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogICBhbmd1bGFyLm1vZHVsZSgnZXhjZXB0aW9uT3ZlcnJpZGUnLCBbXSkuZmFjdG9yeSgnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICogICAgICAgZXhjZXB0aW9uLm1lc3NhZ2UgKz0gJyAoY2F1c2VkIGJ5IFwiJyArIGNhdXNlICsgJ1wiKSc7XG4gKiAgICAgICB0aHJvdyBleGNlcHRpb247XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGV4YW1wbGUgd2lsbCBvdmVycmlkZSB0aGUgbm9ybWFsIGFjdGlvbiBvZiBgJGV4Y2VwdGlvbkhhbmRsZXJgLCB0byBtYWtlIGFuZ3VsYXJcbiAqIGV4Y2VwdGlvbnMgZmFpbCBoYXJkIHdoZW4gdGhleSBoYXBwZW4sIGluc3RlYWQgb2YganVzdCBsb2dnaW5nIHRvIHRoZSBjb25zb2xlLlxuICpcbiAqIDxociAvPlxuICogTm90ZSwgdGhhdCBjb2RlIGV4ZWN1dGVkIGluIGV2ZW50LWxpc3RlbmVycyAoZXZlbiB0aG9zZSByZWdpc3RlcmVkIHVzaW5nIGpxTGl0ZSdzIGBvbmAvYGJpbmRgXG4gKiBtZXRob2RzKSBkb2VzIG5vdCBkZWxlZ2F0ZSBleGNlcHRpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9XG4gKiAodW5sZXNzIGV4ZWN1dGVkIGR1cmluZyBhIGRpZ2VzdCkuXG4gKlxuICogSWYgeW91IHdpc2gsIHlvdSBjYW4gbWFudWFsbHkgZGVsZWdhdGUgZXhjZXB0aW9ucywgZS5nLlxuICogYHRyeSB7IC4uLiB9IGNhdGNoKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1gXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXhjZXB0aW9uIEV4Y2VwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLlxuICogQHBhcmFtIHtzdHJpbmc9fSBjYXVzZSBvcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29udGV4dCBpbiB3aGljaFxuICogICAgICAgdGhlIGVycm9yIHdhcyB0aHJvd24uXG4gKlxuICovXG5mdW5jdGlvbiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRsb2cnLCBmdW5jdGlvbigkbG9nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XTtcbn1cblxudmFyIEFQUExJQ0FUSU9OX0pTT04gPSAnYXBwbGljYXRpb24vanNvbic7XG52YXIgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSB7J0NvbnRlbnQtVHlwZSc6IEFQUExJQ0FUSU9OX0pTT04gKyAnO2NoYXJzZXQ9dXRmLTgnfTtcbnZhciBKU09OX1NUQVJUID0gL15cXHMqKFxcW3xcXHtbXlxce10pLztcbnZhciBKU09OX0VORCA9IC9bXFx9XFxdXVxccyokLztcbnZhciBKU09OX1BST1RFQ1RJT05fUFJFRklYID0gL15cXClcXF1cXH0nLD9cXG4vO1xuXG5mdW5jdGlvbiBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtKGRhdGEsIGhlYWRlcnMpIHtcbiAgaWYgKGlzU3RyaW5nKGRhdGEpKSB7XG4gICAgLy8gc3RyaXAganNvbiB2dWxuZXJhYmlsaXR5IHByb3RlY3Rpb24gcHJlZml4XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZShKU09OX1BST1RFQ1RJT05fUFJFRklYLCAnJyk7XG4gICAgdmFyIGNvbnRlbnRUeXBlID0gaGVhZGVycygnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmRleE9mKEFQUExJQ0FUSU9OX0pTT04pID09PSAwKSB8fFxuICAgICAgICAoSlNPTl9TVEFSVC50ZXN0KGRhdGEpICYmIEpTT05fRU5ELnRlc3QoZGF0YSkpKSB7XG4gICAgICBkYXRhID0gZnJvbUpzb24oZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBrZXkgdmFsdWUgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlcnMgUmF3IGhlYWRlcnMgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhcnNlZCBoZWFkZXJzIGFzIGtleSB2YWx1ZSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9LCBrZXksIHZhbCwgaTtcblxuICBpZiAoIWhlYWRlcnMpIHJldHVybiBwYXJzZWQ7XG5cbiAgZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24obGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsb3dlcmNhc2UodHJpbShsaW5lLnN1YnN0cigwLCBpKSkpO1xuICAgIHZhbCA9IHRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHBhcnNlZCBoZWFkZXJzLlxuICpcbiAqIEhlYWRlcnMgYXJlIGxhenkgcGFyc2VkIHdoZW4gZmlyc3QgcmVxdWVzdGVkLlxuICogQHNlZSBwYXJzZUhlYWRlcnNcbiAqXG4gKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KX0gaGVhZGVycyBIZWFkZXJzIHRvIHByb3ZpZGUgYWNjZXNzIHRvLlxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZz0pfSBSZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIHdoaWNoIGlmIGNhbGxlZCB3aXRoOlxuICpcbiAqICAgLSBpZiBjYWxsZWQgd2l0aCBzaW5nbGUgYW4gYXJndW1lbnQgcmV0dXJucyBhIHNpbmdsZSBoZWFkZXIgdmFsdWUgb3IgbnVsbFxuICogICAtIGlmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCBoZWFkZXJzLlxuICovXG5mdW5jdGlvbiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnNPYmogPSBpc09iamVjdChoZWFkZXJzKSA/IGhlYWRlcnMgOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoIWhlYWRlcnNPYmopIGhlYWRlcnNPYmogPSAgcGFyc2VIZWFkZXJzKGhlYWRlcnMpO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiBoZWFkZXJzT2JqW2xvd2VyY2FzZShuYW1lKV0gfHwgbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVhZGVyc09iajtcbiAgfTtcbn1cblxuXG4vKipcbiAqIENoYWluIGFsbCBnaXZlbiBmdW5jdGlvbnNcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGJvdGggcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtaW5nXG4gKlxuICogQHBhcmFtIHsqfSBkYXRhIERhdGEgdG8gdHJhbnNmb3JtLlxuICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmc9KX0gaGVhZGVycyBIdHRwIGhlYWRlcnMgZ2V0dGVyIGZuLlxuICogQHBhcmFtIHsoRnVuY3Rpb258QXJyYXkuPEZ1bmN0aW9uPil9IGZucyBGdW5jdGlvbiBvciBhbiBhcnJheSBvZiBmdW5jdGlvbnMuXG4gKiBAcmV0dXJucyB7Kn0gVHJhbnNmb3JtZWQgZGF0YS5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZm5zKSlcbiAgICByZXR1cm4gZm5zKGRhdGEsIGhlYWRlcnMpO1xuXG4gIGZvckVhY2goZm5zLCBmdW5jdGlvbihmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cblxuZnVuY3Rpb24gaXNTdWNjZXNzKHN0YXR1cykge1xuICByZXR1cm4gMjAwIDw9IHN0YXR1cyAmJiBzdGF0dXMgPCAzMDA7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRodHRwUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIGAkaHR0cFByb3ZpZGVyYCB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gc2VydmljZS5cbiAqICovXG5mdW5jdGlvbiAkSHR0cFByb3ZpZGVyKCkge1xuICAvKipcbiAgICogQG5nZG9jIHByb3BlcnR5XG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjZGVmYXVsdHNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamVjdCBjb250YWluaW5nIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwge0BsaW5rIG5nLiRodHRwICRodHRwfSByZXF1ZXN0cy5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy54c3JmQ29va2llTmFtZWAqKiAtIHtzdHJpbmd9IC0gTmFtZSBvZiBjb29raWUgY29udGFpbmluZyB0aGUgWFNSRiB0b2tlbi5cbiAgICogRGVmYXVsdHMgdmFsdWUgaXMgYCdYU1JGLVRPS0VOJ2AuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMueHNyZkhlYWRlck5hbWVgKiogLSB7c3RyaW5nfSAtIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGVcbiAgICogWFNSRiB0b2tlbi4gRGVmYXVsdHMgdmFsdWUgaXMgYCdYLVhTUkYtVE9LRU4nYC5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5oZWFkZXJzYCoqIC0ge09iamVjdH0gLSBEZWZhdWx0IGhlYWRlcnMgZm9yIGFsbCAkaHR0cCByZXF1ZXN0cy5cbiAgICogUmVmZXIgdG8ge0BsaW5rIG5nLiRodHRwI3NldHRpbmctaHR0cC1oZWFkZXJzICRodHRwfSBmb3IgZG9jdW1lbnRhdGlvbiBvblxuICAgKiBzZXR0aW5nIGRlZmF1bHQgaGVhZGVycy5cbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5jb21tb25gKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wb3N0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucHV0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucGF0Y2hgKipcbiAgICoqL1xuICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0ge1xuICAgIC8vIHRyYW5zZm9ybSBpbmNvbWluZyByZXNwb25zZSBkYXRhXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IFtkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtXSxcblxuICAgIC8vIHRyYW5zZm9ybSBvdXRnb2luZyByZXF1ZXN0IGRhdGFcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0KGQpICYmICFpc0ZpbGUoZCkgJiYgIWlzQmxvYihkKSA/IHRvSnNvbihkKSA6IGQ7XG4gICAgfV0sXG5cbiAgICAvLyBkZWZhdWx0IGhlYWRlcnNcbiAgICBoZWFkZXJzOiB7XG4gICAgICBjb21tb246IHtcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgICB9LFxuICAgICAgcG9zdDogICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiksXG4gICAgICBwdXQ6ICAgIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSxcbiAgICAgIHBhdGNoOiAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pXG4gICAgfSxcblxuICAgIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gICAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nXG4gIH07XG5cbiAgdmFyIHVzZUFwcGx5QXN5bmMgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGh0dHBQcm92aWRlciN1c2VBcHBseUFzeW5jXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBDb25maWd1cmUgJGh0dHAgc2VydmljZSB0byBjb21iaW5lIHByb2Nlc3Npbmcgb2YgbXVsdGlwbGUgaHR0cCByZXNwb25zZXMgcmVjZWl2ZWQgYXQgYXJvdW5kXG4gICAqIHRoZSBzYW1lIHRpbWUgdmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jICRyb290U2NvcGUuJGFwcGx5QXN5bmN9LiBUaGlzIGNhbiByZXN1bHQgaW5cbiAgICogc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQgZm9yIGJpZ2dlciBhcHBsaWNhdGlvbnMgdGhhdCBtYWtlIG1hbnkgSFRUUCByZXF1ZXN0c1xuICAgKiBjb25jdXJyZW50bHkgKGNvbW1vbiBkdXJpbmcgYXBwbGljYXRpb24gYm9vdHN0cmFwKS5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gZmFsc2UuIElmIG5vIHZhbHVlIGlzIHNwZWNpZmVkLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHRydWUsIHdoZW4gcmVxdWVzdHMgYXJlIGxvYWRlZCwgdGhleSB3aWxsIHNjaGVkdWxlIGEgZGVmZXJyZWRcbiAgICogICAgXCJhcHBseVwiIG9uIHRoZSBuZXh0IHRpY2ssIGdpdmluZyB0aW1lIGZvciBzdWJzZXF1ZW50IHJlcXVlc3RzIGluIGEgcm91Z2hseSB+MTBtcyB3aW5kb3dcbiAgICogICAgdG8gbG9hZCBhbmQgc2hhcmUgdGhlIHNhbWUgZGlnZXN0IGN5Y2xlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxPYmplY3R9IElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSAkaHR0cFByb3ZpZGVyIGZvciBjaGFpbmluZy5cbiAgICogICAgb3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqKi9cbiAgdGhpcy51c2VBcHBseUFzeW5jID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgdXNlQXBwbHlBc3luYyA9ICEhdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHVzZUFwcGx5QXN5bmM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2ludGVyY2VwdG9yc1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXJyYXkgY29udGFpbmluZyBzZXJ2aWNlIGZhY3RvcmllcyBmb3IgYWxsIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cyB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9XG4gICAqIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLlxuICAgKlxuICAgKiBUaGVzZSBzZXJ2aWNlIGZhY3RvcmllcyBhcmUgb3JkZXJlZCBieSByZXF1ZXN0LCBpLmUuIHRoZXkgYXJlIGFwcGxpZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4gICAqIGFycmF5LCBvbiByZXF1ZXN0LCBidXQgcmV2ZXJzZSBvcmRlciwgb24gcmVzcG9uc2UuXG4gICAqXG4gICAqIHtAbGluayBuZy4kaHR0cCNpbnRlcmNlcHRvcnMgSW50ZXJjZXB0b3JzIGRldGFpbGVkIGluZm99XG4gICAqKi9cbiAgdmFyIGludGVyY2VwdG9yRmFjdG9yaWVzID0gdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcblxuICB0aGlzLiRnZXQgPSBbJyRodHRwQmFja2VuZCcsICckYnJvd3NlcicsICckY2FjaGVGYWN0b3J5JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGluamVjdG9yJyxcbiAgICAgIGZ1bmN0aW9uKCRodHRwQmFja2VuZCwgJGJyb3dzZXIsICRjYWNoZUZhY3RvcnksICRyb290U2NvcGUsICRxLCAkaW5qZWN0b3IpIHtcblxuICAgIHZhciBkZWZhdWx0Q2FjaGUgPSAkY2FjaGVGYWN0b3J5KCckaHR0cCcpO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJjZXB0b3JzIHN0b3JlZCBpbiByZXZlcnNlIG9yZGVyLiBJbm5lciBpbnRlcmNlcHRvcnMgYmVmb3JlIG91dGVyIGludGVyY2VwdG9ycy5cbiAgICAgKiBUaGUgcmV2ZXJzYWwgaXMgbmVlZGVkIHNvIHRoYXQgd2UgY2FuIGJ1aWxkIHVwIHRoZSBpbnRlcmNlcHRpb24gY2hhaW4gYXJvdW5kIHRoZVxuICAgICAqIHNlcnZlciByZXF1ZXN0LlxuICAgICAqL1xuICAgIHZhciByZXZlcnNlZEludGVyY2VwdG9ycyA9IFtdO1xuXG4gICAgZm9yRWFjaChpbnRlcmNlcHRvckZhY3RvcmllcywgZnVuY3Rpb24oaW50ZXJjZXB0b3JGYWN0b3J5KSB7XG4gICAgICByZXZlcnNlZEludGVyY2VwdG9ycy51bnNoaWZ0KGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSlcbiAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoaW50ZXJjZXB0b3JGYWN0b3J5KSA6ICRpbmplY3Rvci5pbnZva2UoaW50ZXJjZXB0b3JGYWN0b3J5KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJGh0dHBcbiAgICAgKiBAcmVxdWlyZXMgbmcuJGh0dHBCYWNrZW5kXG4gICAgICogQHJlcXVpcmVzICRjYWNoZUZhY3RvcnlcbiAgICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgICAqIEByZXF1aXJlcyAkcVxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBjb3JlIEFuZ3VsYXIgc2VydmljZSB0aGF0IGZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gd2l0aCB0aGUgcmVtb3RlXG4gICAgICogSFRUUCBzZXJ2ZXJzIHZpYSB0aGUgYnJvd3NlcidzIFtYTUxIdHRwUmVxdWVzdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4veG1saHR0cHJlcXVlc3QpXG4gICAgICogb2JqZWN0IG9yIHZpYSBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApLlxuICAgICAqXG4gICAgICogRm9yIHVuaXQgdGVzdGluZyBhcHBsaWNhdGlvbnMgdGhhdCB1c2UgYCRodHRwYCBzZXJ2aWNlLCBzZWVcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCAkaHR0cEJhY2tlbmQgbW9ja30uXG4gICAgICpcbiAgICAgKiBGb3IgYSBoaWdoZXIgbGV2ZWwgb2YgYWJzdHJhY3Rpb24sIHBsZWFzZSBjaGVjayBvdXQgdGhlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZVxuICAgICAqICRyZXNvdXJjZX0gc2VydmljZS5cbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBBUEkgaXMgYmFzZWQgb24gdGhlIHtAbGluayBuZy4kcSBkZWZlcnJlZC9wcm9taXNlIEFQSXN9IGV4cG9zZWQgYnlcbiAgICAgKiB0aGUgJHEgc2VydmljZS4gV2hpbGUgZm9yIHNpbXBsZSB1c2FnZSBwYXR0ZXJucyB0aGlzIGRvZXNuJ3QgbWF0dGVyIG11Y2gsIGZvciBhZHZhbmNlZCB1c2FnZVxuICAgICAqIGl0IGlzIGltcG9ydGFudCB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZXNlIEFQSXMgYW5kIHRoZSBndWFyYW50ZWVzIHRoZXkgcHJvdmlkZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgR2VuZXJhbCB1c2FnZVxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudCDigJQgYSBjb25maWd1cmF0aW9uIG9iamVjdCDigJRcbiAgICAgKiB0aGF0IGlzIHVzZWQgdG8gZ2VuZXJhdGUgYW4gSFRUUCByZXF1ZXN0IGFuZCByZXR1cm5zICBhIHtAbGluayBuZy4kcSBwcm9taXNlfVxuICAgICAqIHdpdGggdHdvICRodHRwIHNwZWNpZmljIG1ldGhvZHM6IGBzdWNjZXNzYCBhbmQgYGVycm9yYC5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAvLyBTaW1wbGUgR0VUIHJlcXVlc3QgZXhhbXBsZSA6XG4gICAgICogICAkaHR0cC5nZXQoJy9zb21lVXJsJykuXG4gICAgICogICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXG4gICAgICogICAgIH0pLlxuICAgICAqICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnNcbiAgICAgKiAgICAgICAvLyBvciBzZXJ2ZXIgcmV0dXJucyByZXNwb25zZSB3aXRoIGFuIGVycm9yIHN0YXR1cy5cbiAgICAgKiAgICAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgLy8gU2ltcGxlIFBPU1QgcmVxdWVzdCBleGFtcGxlIChwYXNzaW5nIGRhdGEpIDpcbiAgICAgKiAgICRodHRwLnBvc3QoJy9zb21lVXJsJywge21zZzonaGVsbG8gd29yZCEnfSkuXG4gICAgICogICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXG4gICAgICogICAgIH0pLlxuICAgICAqICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnNcbiAgICAgKiAgICAgICAvLyBvciBzZXJ2ZXIgcmV0dXJucyByZXNwb25zZSB3aXRoIGFuIGVycm9yIHN0YXR1cy5cbiAgICAgKiAgICAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKlxuICAgICAqIFNpbmNlIHRoZSByZXR1cm5lZCB2YWx1ZSBvZiBjYWxsaW5nIHRoZSAkaHR0cCBmdW5jdGlvbiBpcyBhIGBwcm9taXNlYCwgeW91IGNhbiBhbHNvIHVzZVxuICAgICAqIHRoZSBgdGhlbmAgbWV0aG9kIHRvIHJlZ2lzdGVyIGNhbGxiYWNrcywgYW5kIHRoZXNlIGNhbGxiYWNrcyB3aWxsIHJlY2VpdmUgYSBzaW5nbGUgYXJndW1lbnQg4oCTXG4gICAgICogYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVzcG9uc2UuIFNlZSB0aGUgQVBJIHNpZ25hdHVyZSBhbmQgdHlwZSBpbmZvIGJlbG93IGZvciBtb3JlXG4gICAgICogZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEEgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgYmV0d2VlbiAyMDAgYW5kIDI5OSBpcyBjb25zaWRlcmVkIGEgc3VjY2VzcyBzdGF0dXMgYW5kXG4gICAgICogd2lsbCByZXN1bHQgaW4gdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgYmVpbmcgY2FsbGVkLiBOb3RlIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsXG4gICAgICogWE1MSHR0cFJlcXVlc3Qgd2lsbCB0cmFuc3BhcmVudGx5IGZvbGxvdyBpdCwgbWVhbmluZyB0aGF0IHRoZSBlcnJvciBjYWxsYmFjayB3aWxsIG5vdCBiZVxuICAgICAqIGNhbGxlZCBmb3Igc3VjaCByZXNwb25zZXMuXG4gICAgICpcbiAgICAgKiAjIyBXcml0aW5nIFVuaXQgVGVzdHMgdGhhdCB1c2UgJGh0dHBcbiAgICAgKiBXaGVuIHVuaXQgdGVzdGluZyAodXNpbmcge0BsaW5rIG5nTW9jayBuZ01vY2t9KSwgaXQgaXMgbmVjZXNzYXJ5IHRvIGNhbGxcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCNmbHVzaCAkaHR0cEJhY2tlbmQuZmx1c2goKX0gdG8gZmx1c2ggZWFjaCBwZW5kaW5nXG4gICAgICogcmVxdWVzdCB1c2luZyB0cmFpbmVkIHJlc3BvbnNlcy5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICRodHRwQmFja2VuZC5leHBlY3RHRVQoLi4uKTtcbiAgICAgKiAkaHR0cC5nZXQoLi4uKTtcbiAgICAgKiAkaHR0cEJhY2tlbmQuZmx1c2goKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFNob3J0Y3V0IG1ldGhvZHNcbiAgICAgKlxuICAgICAqIFNob3J0Y3V0IG1ldGhvZHMgYXJlIGFsc28gYXZhaWxhYmxlLiBBbGwgc2hvcnRjdXQgbWV0aG9kcyByZXF1aXJlIHBhc3NpbmcgaW4gdGhlIFVSTCwgYW5kXG4gICAgICogcmVxdWVzdCBkYXRhIG11c3QgYmUgcGFzc2VkIGluIGZvciBQT1NUL1BVVCByZXF1ZXN0cy5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAkaHR0cC5nZXQoJy9zb21lVXJsJykuc3VjY2VzcyhzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhKS5zdWNjZXNzKHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBDb21wbGV0ZSBsaXN0IG9mIHNob3J0Y3V0IG1ldGhvZHM6XG4gICAgICpcbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNnZXQgJGh0dHAuZ2V0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2hlYWQgJGh0dHAuaGVhZH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwb3N0ICRodHRwLnBvc3R9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcHV0ICRodHRwLnB1dH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNkZWxldGUgJGh0dHAuZGVsZXRlfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2pzb25wICRodHRwLmpzb25wfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3BhdGNoICRodHRwLnBhdGNofVxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBTZXR0aW5nIEhUVFAgSGVhZGVyc1xuICAgICAqXG4gICAgICogVGhlICRodHRwIHNlcnZpY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGFkZCBjZXJ0YWluIEhUVFAgaGVhZGVycyB0byBhbGwgcmVxdWVzdHMuIFRoZXNlIGRlZmF1bHRzXG4gICAgICogY2FuIGJlIGZ1bGx5IGNvbmZpZ3VyZWQgYnkgYWNjZXNzaW5nIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzYCBjb25maWd1cmF0aW9uXG4gICAgICogb2JqZWN0LCB3aGljaCBjdXJyZW50bHkgY29udGFpbnMgdGhpcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb246XG4gICAgICpcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uYCAoaGVhZGVycyB0aGF0IGFyZSBjb21tb24gZm9yIGFsbCByZXF1ZXN0cyk6XG4gICAgICogICAtIGBBY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICogLyAqYFxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cylcbiAgICAgKiAgIC0gYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbmBcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBQVVQgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICpcbiAgICAgKiBUbyBhZGQgb3Igb3ZlcndyaXRlIHRoZXNlIGRlZmF1bHRzLCBzaW1wbHkgYWRkIG9yIHJlbW92ZSBhIHByb3BlcnR5IGZyb20gdGhlc2UgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdFxuICAgICAqIHdpdGggdGhlIGxvd2VyY2FzZWQgSFRUUCBtZXRob2QgbmFtZSBhcyB0aGUga2V5LCBlLmcuXG4gICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7ICdNeS1IZWFkZXInIDogJ3ZhbHVlJyB9LlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHRzIGNhbiBhbHNvIGJlIHNldCBhdCBydW50aW1lIHZpYSB0aGUgYCRodHRwLmRlZmF1bHRzYCBvYmplY3QgaW4gdGhlIHNhbWVcbiAgICAgKiBmYXNoaW9uLiBGb3IgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIG1vZHVsZS5ydW4oZnVuY3Rpb24oJGh0dHApIHtcbiAgICAgKiAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgWW1WbGNEcGliMjl3J1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24sIHlvdSBjYW4gc3VwcGx5IGEgYGhlYWRlcnNgIHByb3BlcnR5IGluIHRoZSBjb25maWcgb2JqZWN0IHBhc3NlZCB3aGVuXG4gICAgICogY2FsbGluZyBgJGh0dHAoY29uZmlnKWAsIHdoaWNoIG92ZXJyaWRlcyB0aGUgZGVmYXVsdHMgd2l0aG91dCBjaGFuZ2luZyB0aGVtIGdsb2JhbGx5LlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1xuICAgICAqXG4gICAgICogQm90aCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGNhbiBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnM6IGB0cmFuc2Zvcm1SZXF1ZXN0YFxuICAgICAqIGFuZCBgdHJhbnNmb3JtUmVzcG9uc2VgLiBUaGVzZSBwcm9wZXJ0aWVzIGNhbiBiZSBhIHNpbmdsZSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgKGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcilgKSBvciBhbiBhcnJheSBvZiBzdWNoIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9ucyxcbiAgICAgKiB3aGljaCBhbGxvd3MgeW91IHRvIGBwdXNoYCBvciBgdW5zaGlmdGAgYSBuZXcgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gaW50byB0aGUgdHJhbnNmb3JtYXRpb24gY2hhaW4uXG4gICAgICpcbiAgICAgKiAjIyMgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnNcbiAgICAgKlxuICAgICAqIFRoZSBgJGh0dHBQcm92aWRlcmAgcHJvdmlkZXIgYW5kIGAkaHR0cGAgc2VydmljZSBleHBvc2UgYGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZFxuICAgICAqIGBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcy4gSWYgYSByZXF1ZXN0IGRvZXMgbm90IHByb3ZpZGUgaXRzIG93biB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgKiB0aGVuIHRoZXNlIHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gYXVnbWVudCBvciByZXBsYWNlIHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyBieSBtb2RpZnlpbmcgdGhlc2UgcHJvcGVydGllcyBieSBhZGRpbmcgdG8gb3JcbiAgICAgKiByZXBsYWNpbmcgdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQW5ndWxhciBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zOlxuICAgICAqXG4gICAgICogUmVxdWVzdCB0cmFuc2Zvcm1hdGlvbnMgKGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGApOlxuICAgICAqXG4gICAgICogLSBJZiB0aGUgYGRhdGFgIHByb3BlcnR5IG9mIHRoZSByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5zIGFuIG9iamVjdCwgc2VyaWFsaXplIGl0XG4gICAgICogICBpbnRvIEpTT04gZm9ybWF0LlxuICAgICAqXG4gICAgICogUmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zIChgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgYW5kIGAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWApOlxuICAgICAqXG4gICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykuXG4gICAgICogIC0gSWYgSlNPTiByZXNwb25zZSBpcyBkZXRlY3RlZCwgZGVzZXJpYWxpemUgaXQgdXNpbmcgYSBKU09OIHBhcnNlci5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMjIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zIFBlciBSZXF1ZXN0XG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd2lzaCBvdmVycmlkZSB0aGUgcmVxdWVzdC9yZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMgb25seSBmb3IgYSBzaW5nbGUgcmVxdWVzdCB0aGVuIHByb3ZpZGVcbiAgICAgKiBgdHJhbnNmb3JtUmVxdWVzdGAgYW5kL29yIGB0cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcyBvbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QgcGFzc2VkXG4gICAgICogaW50byBgJGh0dHBgLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGlmIHlvdSBwcm92aWRlIHRoZXNlIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZyBvYmplY3QgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHdpbGwgYmVcbiAgICAgKiBvdmVyd3JpdHRlbi4gSWYgeW91IHdpc2ggdG8gYXVnbWVudCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgdGhlbiB5b3UgbXVzdCBpbmNsdWRlIHRoZW0gaW4geW91clxuICAgICAqIGxvY2FsIHRyYW5zZm9ybWF0aW9uIGFycmF5LlxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBjb2RlIGRlbW9uc3RyYXRlcyBhZGRpbmcgYSBuZXcgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb24gdG8gYmUgcnVuIGFmdGVyIHRoZSBkZWZhdWx0IHJlc3BvbnNlXG4gICAgICogdHJhbnNmb3JtYXRpb25zIGhhdmUgYmVlbiBydW4uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGZ1bmN0aW9uIGFwcGVuZFRyYW5zZm9ybShkZWZhdWx0cywgdHJhbnNmb3JtKSB7XG4gICAgICpcbiAgICAgKiAgIC8vIFdlIGNhbid0IGd1YXJhbnRlZSB0aGF0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9uIGlzIGFuIGFycmF5XG4gICAgICogICBkZWZhdWx0cyA9IGFuZ3VsYXIuaXNBcnJheShkZWZhdWx0cykgPyBkZWZhdWx0cyA6IFtkZWZhdWx0c107XG4gICAgICpcbiAgICAgKiAgIC8vIEFwcGVuZCB0aGUgbmV3IHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBkZWZhdWx0c1xuICAgICAqICAgcmV0dXJuIGRlZmF1bHRzLmNvbmNhdCh0cmFuc2Zvcm0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHtcbiAgICAgKiAgIHVybDogJy4uLicsXG4gICAgICogICBtZXRob2Q6ICdHRVQnLFxuICAgICAqICAgdHJhbnNmb3JtUmVzcG9uc2U6IGFwcGVuZFRyYW5zZm9ybSgkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICAgcmV0dXJuIGRvVHJhbnNmb3JtKHZhbHVlKTtcbiAgICAgKiAgIH0pXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIENhY2hpbmdcbiAgICAgKlxuICAgICAqIFRvIGVuYWJsZSBjYWNoaW5nLCBzZXQgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCAodG8gdXNlIGRlZmF1bHRcbiAgICAgKiBjYWNoZSkgb3IgdG8gYSBjdXN0b20gY2FjaGUgb2JqZWN0IChidWlsdCB3aXRoIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pLlxuICAgICAqIFdoZW4gdGhlIGNhY2hlIGlzIGVuYWJsZWQsIGAkaHR0cGAgc3RvcmVzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdGhlIHNwZWNpZmllZFxuICAgICAqIGNhY2hlLiBUaGUgbmV4dCB0aW1lIHRoZSBzYW1lIHJlcXVlc3QgaXMgbWFkZSwgdGhlIHJlc3BvbnNlIGlzIHNlcnZlZCBmcm9tIHRoZSBjYWNoZSB3aXRob3V0XG4gICAgICogc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBldmVuIGlmIHRoZSByZXNwb25zZSBpcyBzZXJ2ZWQgZnJvbSBjYWNoZSwgZGVsaXZlcnkgb2YgdGhlIGRhdGEgaXMgYXN5bmNocm9ub3VzIGluXG4gICAgICogdGhlIHNhbWUgd2F5IHRoYXQgcmVhbCByZXF1ZXN0cyBhcmUuXG4gICAgICpcbiAgICAgKiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgR0VUIHJlcXVlc3RzIGZvciB0aGUgc2FtZSBVUkwgdGhhdCBzaG91bGQgYmUgY2FjaGVkIHVzaW5nIHRoZSBzYW1lXG4gICAgICogY2FjaGUsIGJ1dCB0aGUgY2FjaGUgaXMgbm90IHBvcHVsYXRlZCB5ZXQsIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB3aWxsIGJlIG1hZGUgYW5kXG4gICAgICogdGhlIHJlbWFpbmluZyByZXF1ZXN0cyB3aWxsIGJlIGZ1bGZpbGxlZCB1c2luZyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgZmlyc3QgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gY2hhbmdlIHRoZSBkZWZhdWx0IGNhY2hlIHRvIGEgbmV3IG9iamVjdCAoYnVpbHQgd2l0aFxuICAgICAqIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pIGJ5IHVwZGF0aW5nIHRoZVxuICAgICAqIHtAbGluayBuZy4kaHR0cCNkZWZhdWx0cyBgJGh0dHAuZGVmYXVsdHMuY2FjaGVgfSBwcm9wZXJ0eS4gQWxsIHJlcXVlc3RzIHdobyBzZXRcbiAgICAgKiB0aGVpciBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCB3aWxsIG5vdyB1c2UgdGhpcyBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJZiB5b3Ugc2V0IHRoZSBkZWZhdWx0IGNhY2hlIHRvIGBmYWxzZWAgdGhlbiBvbmx5IHJlcXVlc3RzIHRoYXQgc3BlY2lmeSB0aGVpciBvd24gY3VzdG9tXG4gICAgICogY2FjaGUgb2JqZWN0IHdpbGwgYmUgY2FjaGVkLlxuICAgICAqXG4gICAgICogIyMgSW50ZXJjZXB0b3JzXG4gICAgICpcbiAgICAgKiBCZWZvcmUgeW91IHN0YXJ0IGNyZWF0aW5nIGludGVyY2VwdG9ycywgYmUgc3VyZSB0byB1bmRlcnN0YW5kIHRoZVxuICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS5cbiAgICAgKlxuICAgICAqIEZvciBwdXJwb3NlcyBvZiBnbG9iYWwgZXJyb3IgaGFuZGxpbmcsIGF1dGhlbnRpY2F0aW9uLCBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvclxuICAgICAqIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZyBvZiByZXF1ZXN0IG9yIHBvc3Rwcm9jZXNzaW5nIG9mIHJlc3BvbnNlcywgaXQgaXMgZGVzaXJhYmxlIHRvIGJlXG4gICAgICogYWJsZSB0byBpbnRlcmNlcHQgcmVxdWVzdHMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCB0byB0aGUgc2VydmVyIGFuZFxuICAgICAqIHJlc3BvbnNlcyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdFxuICAgICAqIGluaXRpYXRlZCB0aGVzZSByZXF1ZXN0cy4gVGhlIGludGVyY2VwdG9ycyBsZXZlcmFnZSB0aGUge0BsaW5rIG5nLiRxXG4gICAgICogcHJvbWlzZSBBUElzfSB0byBmdWxmaWxsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nLlxuICAgICAqXG4gICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGh0dHBQcm92aWRlcmAgYnlcbiAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzYCBhcnJheS4gVGhlIGZhY3RvcnkgaXMgY2FsbGVkIGFuZFxuICAgICAqIGluamVjdGVkIHdpdGggZGVwZW5kZW5jaWVzIChpZiBzcGVjaWZpZWQpIGFuZCByZXR1cm5zIHRoZSBpbnRlcmNlcHRvci5cbiAgICAgKlxuICAgICAqIFRoZXJlIGFyZSB0d28ga2luZHMgb2YgaW50ZXJjZXB0b3JzIChhbmQgdHdvIGtpbmRzIG9mIHJlamVjdGlvbiBpbnRlcmNlcHRvcnMpOlxuICAgICAqXG4gICAgICogICAqIGByZXF1ZXN0YDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBhIGh0dHAgYGNvbmZpZ2Agb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGBjb25maWdgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgY29uZmlnYFxuICAgICAqICAgICBvYmplY3QgZGlyZWN0bHksIG9yIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBgY29uZmlnYCBvciBhIG5ldyBgY29uZmlnYCBvYmplY3QuXG4gICAgICogICAqIGByZXF1ZXN0RXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKiAgICogYHJlc3BvbnNlYDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBodHRwIGByZXNwb25zZWAgb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGByZXNwb25zZWAgb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGByZXNwb25zZWBcbiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhcyBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYHJlc3BvbnNlYCBvciBhIG5ldyBgcmVzcG9uc2VgIG9iamVjdC5cbiAgICAgKiAgICogYHJlc3BvbnNlRXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2VcbiAgICAgKiAgICRwcm92aWRlLmZhY3RvcnkoJ215SHR0cEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2Vzc1xuICAgICAqICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVxdWVzdEVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcbiAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlamVjdGlvbikpIHtcbiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlXG4gICAgICogICAgICAgICB9XG4gICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqXG4gICAgICpcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAqICAgICAgICAgfVxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdteUh0dHBJbnRlcmNlcHRvcicpO1xuICAgICAqXG4gICAgICpcbiAgICAgKiAgIC8vIGFsdGVybmF0aXZlbHksIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciB2aWEgYW4gYW5vbnltb3VzIGZhY3RvcnlcbiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlXG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnNcbiAgICAgKlxuICAgICAqIFdoZW4gZGVzaWduaW5nIHdlYiBhcHBsaWNhdGlvbnMsIGNvbnNpZGVyIHNlY3VyaXR5IHRocmVhdHMgZnJvbTpcbiAgICAgKlxuICAgICAqIC0gW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KVxuICAgICAqIC0gW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpXG4gICAgICpcbiAgICAgKiBCb3RoIHNlcnZlciBhbmQgdGhlIGNsaWVudCBtdXN0IGNvb3BlcmF0ZSBpbiBvcmRlciB0byBlbGltaW5hdGUgdGhlc2UgdGhyZWF0cy4gQW5ndWxhciBjb21lc1xuICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlclxuICAgICAqIGNvb3BlcmF0aW9uIGlzIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogIyMjIEpTT04gVnVsbmVyYWJpbGl0eSBQcm90ZWN0aW9uXG4gICAgICpcbiAgICAgKiBBIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweClcbiAgICAgKiBhbGxvd3MgdGhpcmQgcGFydHkgd2Vic2l0ZSB0byB0dXJuIHlvdXIgSlNPTiByZXNvdXJjZSBVUkwgaW50b1xuICAgICAqIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkgcmVxdWVzdCB1bmRlciBzb21lIGNvbmRpdGlvbnMuIFRvXG4gICAgICogY291bnRlciB0aGlzIHlvdXIgc2VydmVyIGNhbiBwcmVmaXggYWxsIEpTT04gcmVxdWVzdHMgd2l0aCBmb2xsb3dpbmcgc3RyaW5nIGBcIildfScsXFxuXCJgLlxuICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlIGlmIHlvdXIgc2VydmVyIG5lZWRzIHRvIHJldHVybjpcbiAgICAgKiBgYGBqc1xuICAgICAqIFsnb25lJywndHdvJ11cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIHdoaWNoIGlzIHZ1bG5lcmFibGUgdG8gYXR0YWNrLCB5b3VyIHNlcnZlciBjYW4gcmV0dXJuOlxuICAgICAqIGBgYGpzXG4gICAgICogKV19JyxcbiAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBBbmd1bGFyIHdpbGwgc3RyaXAgdGhlIHByZWZpeCwgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIEpTT04uXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBDcm9zcyBTaXRlIFJlcXVlc3QgRm9yZ2VyeSAoWFNSRikgUHJvdGVjdGlvblxuICAgICAqXG4gICAgICogW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpIGlzIGEgdGVjaG5pcXVlIGJ5IHdoaWNoXG4gICAgICogYW4gdW5hdXRob3JpemVkIHNpdGUgY2FuIGdhaW4geW91ciB1c2VyJ3MgcHJpdmF0ZSBkYXRhLiBBbmd1bGFyIHByb3ZpZGVzIGEgbWVjaGFuaXNtXG4gICAgICogdG8gY291bnRlciBYU1JGLiBXaGVuIHBlcmZvcm1pbmcgWEhSIHJlcXVlc3RzLCB0aGUgJGh0dHAgc2VydmljZSByZWFkcyBhIHRva2VuIGZyb20gYSBjb29raWVcbiAgICAgKiAoYnkgZGVmYXVsdCwgYFhTUkYtVE9LRU5gKSBhbmQgc2V0cyBpdCBhcyBhbiBIVFRQIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5XG4gICAgICogSmF2YVNjcmlwdCB0aGF0IHJ1bnMgb24geW91ciBkb21haW4gY291bGQgcmVhZCB0aGUgY29va2llLCB5b3VyIHNlcnZlciBjYW4gYmUgYXNzdXJlZCB0aGF0XG4gICAgICogdGhlIFhIUiBjYW1lIGZyb20gSmF2YVNjcmlwdCBydW5uaW5nIG9uIHlvdXIgZG9tYWluLiBUaGUgaGVhZGVyIHdpbGwgbm90IGJlIHNldCBmb3JcbiAgICAgKiBjcm9zcy1kb21haW4gcmVxdWVzdHMuXG4gICAgICpcbiAgICAgKiBUbyB0YWtlIGFkdmFudGFnZSBvZiB0aGlzLCB5b3VyIHNlcnZlciBuZWVkcyB0byBzZXQgYSB0b2tlbiBpbiBhIEphdmFTY3JpcHQgcmVhZGFibGUgc2Vzc2lvblxuICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIHRoZSBmaXJzdCBIVFRQIEdFVCByZXF1ZXN0LiBPbiBzdWJzZXF1ZW50IFhIUiByZXF1ZXN0cyB0aGVcbiAgICAgKiBzZXJ2ZXIgY2FuIHZlcmlmeSB0aGF0IHRoZSBjb29raWUgbWF0Y2hlcyBgWC1YU1JGLVRPS0VOYCBIVFRQIGhlYWRlciwgYW5kIHRoZXJlZm9yZSBiZSBzdXJlXG4gICAgICogdGhhdCBvbmx5IEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbiBjb3VsZCBoYXZlIHNlbnQgdGhlIHJlcXVlc3QuIFRoZSB0b2tlbiBtdXN0IGJlXG4gICAgICogdW5pcXVlIGZvciBlYWNoIHVzZXIgYW5kIG11c3QgYmUgdmVyaWZpYWJsZSBieSB0aGUgc2VydmVyICh0byBwcmV2ZW50IHRoZSBKYXZhU2NyaXB0IGZyb21cbiAgICAgKiBtYWtpbmcgdXAgaXRzIG93biB0b2tlbnMpLiBXZSByZWNvbW1lbmQgdGhhdCB0aGUgdG9rZW4gaXMgYSBkaWdlc3Qgb2YgeW91ciBzaXRlJ3NcbiAgICAgKiBhdXRoZW50aWNhdGlvbiBjb29raWUgd2l0aCBhIFtzYWx0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TYWx0XyhjcnlwdG9ncmFwaHkmIzQxOylcbiAgICAgKiBmb3IgYWRkZWQgc2VjdXJpdHkuXG4gICAgICpcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaGVhZGVycyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHRoZSB4c3JmSGVhZGVyTmFtZSBhbmQgeHNyZkNvb2tpZU5hbWVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGVpdGhlciAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzIGF0IGNvbmZpZy10aW1lLCAkaHR0cC5kZWZhdWx0cyBhdCBydW4tdGltZSxcbiAgICAgKiBvciB0aGUgcGVyLXJlcXVlc3QgY29uZmlnIG9iamVjdC5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBPYmplY3QgZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCBob3cgaXQgc2hvdWxkIGJlXG4gICAgICogICAgcHJvY2Vzc2VkLiBUaGUgb2JqZWN0IGhhcyBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgKlxuICAgICAqICAgIC0gKiptZXRob2QqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBtZXRob2QgKGUuZy4gJ0dFVCcsICdQT1NUJywgZXRjKVxuICAgICAqICAgIC0gKip1cmwqKiDigJMgYHtzdHJpbmd9YCDigJMgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZC5cbiAgICAgKiAgICAtICoqcGFyYW1zKiog4oCTIGB7T2JqZWN0LjxzdHJpbmd8T2JqZWN0Pn1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHdoaWNoIHdpbGwgYmUgdHVybmVkXG4gICAgICogICAgICB0byBgP2tleTE9dmFsdWUxJmtleTI9dmFsdWUyYCBhZnRlciB0aGUgdXJsLiBJZiB0aGUgdmFsdWUgaXMgbm90IGEgc3RyaW5nLCBpdCB3aWxsIGJlXG4gICAgICogICAgICBKU09OaWZpZWQuXG4gICAgICogICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIERhdGEgdG8gYmUgc2VudCBhcyB0aGUgcmVxdWVzdCBtZXNzYWdlIGRhdGEuXG4gICAgICogICAgLSAqKmhlYWRlcnMqKiDigJMgYHtPYmplY3R9YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3IgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBzdHJpbmdzIHJlcHJlc2VudGluZ1xuICAgICAqICAgICAgSFRUUCBoZWFkZXJzIHRvIHNlbmQgdG8gdGhlIHNlcnZlci4gSWYgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIGlzIG51bGwsIHRoZVxuICAgICAqICAgICAgaGVhZGVyIHdpbGwgbm90IGJlIHNlbnQuXG4gICAgICogICAgLSAqKnhzcmZIZWFkZXJOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGUgWFNSRiB0b2tlbi5cbiAgICAgKiAgICAtICoqeHNyZkNvb2tpZU5hbWUqKiDigJMgYHtzdHJpbmd9YCDigJMgTmFtZSBvZiBjb29raWUgY29udGFpbmluZyB0aGUgWFNSRiB0b2tlbi5cbiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVxdWVzdCoqIOKAk1xuICAgICAqICAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcik+fWAg4oCTXG4gICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHBcbiAgICAgKiAgICAgIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBzZXJpYWxpemVkKSB2ZXJzaW9uLlxuICAgICAqICAgICAgU2VlIHtAbGluayAjb3ZlcnJpZGluZy10aGUtZGVmYXVsdC10cmFuc2Zvcm1hdGlvbnMtcGVyLXJlcXVlc3QgT3ZlcnJpZGluZyB0aGUgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnN9XG4gICAgICogICAgLSAqKnRyYW5zZm9ybVJlc3BvbnNlKiog4oCTXG4gICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJNcbiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICAgICAqICAgICAgcmVzcG9uc2UgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBkZXNlcmlhbGl6ZWQpIHZlcnNpb24uXG4gICAgICogICAgICBTZWUge0BsaW5rICNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdCBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc31cbiAgICAgKiAgICAtICoqY2FjaGUqKiDigJMgYHtib29sZWFufENhY2hlfWAg4oCTIElmIHRydWUsIGEgZGVmYXVsdCAkaHR0cCBjYWNoZSB3aWxsIGJlIHVzZWQgdG8gY2FjaGUgdGhlXG4gICAgICogICAgICBHRVQgcmVxdWVzdCwgb3RoZXJ3aXNlIGlmIGEgY2FjaGUgaW5zdGFuY2UgYnVpbHQgd2l0aFxuICAgICAqICAgICAge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0sIHRoaXMgY2FjaGUgd2lsbCBiZSB1c2VkIGZvclxuICAgICAqICAgICAgY2FjaGluZy5cbiAgICAgKiAgICAtICoqdGltZW91dCoqIOKAkyBge251bWJlcnxQcm9taXNlfWAg4oCTIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLCBvciB7QGxpbmsgbmcuJHEgcHJvbWlzZX1cbiAgICAgKiAgICAgIHRoYXQgc2hvdWxkIGFib3J0IHRoZSByZXF1ZXN0IHdoZW4gcmVzb2x2ZWQuXG4gICAgICogICAgLSAqKndpdGhDcmVkZW50aWFscyoqIC0gYHtib29sZWFufWAgLSB3aGV0aGVyIHRvIHNldCB0aGUgYHdpdGhDcmVkZW50aWFsc2AgZmxhZyBvbiB0aGVcbiAgICAgKiAgICAgIFhIUiBvYmplY3QuIFNlZSBbcmVxdWVzdHMgd2l0aCBjcmVkZW50aWFsc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRUUC9BY2Nlc3NfY29udHJvbF9DT1JTI1JlcXVlc3RzX3dpdGhfY3JlZGVudGlhbHMpXG4gICAgICogICAgICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiAgICAtICoqcmVzcG9uc2VUeXBlKiogLSBge3N0cmluZ31gIC0gc2VlXG4gICAgICogICAgICBbcmVxdWVzdFR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvRE9NL1hNTEh0dHBSZXF1ZXN0I3Jlc3BvbnNlVHlwZSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IFJldHVybnMgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0gb2JqZWN0IHdpdGggdGhlXG4gICAgICogICBzdGFuZGFyZCBgdGhlbmAgbWV0aG9kIGFuZCB0d28gaHR0cCBzcGVjaWZpYyBtZXRob2RzOiBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAuIFRoZSBgdGhlbmBcbiAgICAgKiAgIG1ldGhvZCB0YWtlcyB0d28gYXJndW1lbnRzIGEgc3VjY2VzcyBhbmQgYW4gZXJyb3IgY2FsbGJhY2sgd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2l0aCBhXG4gICAgICogICByZXNwb25zZSBvYmplY3QuIFRoZSBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgbWV0aG9kcyB0YWtlIGEgc2luZ2xlIGFyZ3VtZW50IC0gYSBmdW5jdGlvbiB0aGF0XG4gICAgICogICB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IHN1Y2NlZWRzIG9yIGZhaWxzIHJlc3BlY3RpdmVseS4gVGhlIGFyZ3VtZW50cyBwYXNzZWQgaW50b1xuICAgICAqICAgdGhlc2UgZnVuY3Rpb25zIGFyZSBkZXN0cnVjdHVyZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlc3BvbnNlIG9iamVjdCBwYXNzZWQgaW50byB0aGVcbiAgICAgKiAgIGB0aGVuYCBtZXRob2QuIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHRoZXNlIHByb3BlcnRpZXM6XG4gICAgICpcbiAgICAgKiAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBUaGUgcmVzcG9uc2UgYm9keSB0cmFuc2Zvcm1lZCB3aXRoIHRoZSB0cmFuc2Zvcm1cbiAgICAgKiAgICAgZnVuY3Rpb25zLlxuICAgICAqICAgLSAqKnN0YXR1cyoqIOKAkyBge251bWJlcn1gIOKAkyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS5cbiAgICAgKiAgIC0gKipoZWFkZXJzKiog4oCTIGB7ZnVuY3Rpb24oW2hlYWRlck5hbWVdKX1gIOKAkyBIZWFkZXIgZ2V0dGVyIGZ1bmN0aW9uLlxuICAgICAqICAgLSAqKmNvbmZpZyoqIOKAkyBge09iamVjdH1gIOKAkyBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVxdWVzdC5cbiAgICAgKiAgIC0gKipzdGF0dXNUZXh0Kiog4oCTIGB7c3RyaW5nfWAg4oCTIEhUVFAgc3RhdHVzIHRleHQgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn0gcGVuZGluZ1JlcXVlc3RzIEFycmF5IG9mIGNvbmZpZyBvYmplY3RzIGZvciBjdXJyZW50bHkgcGVuZGluZ1xuICAgICAqICAgcmVxdWVzdHMuIFRoaXMgaXMgcHJpbWFyaWx5IG1lYW50IHRvIGJlIHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbjxleGFtcGxlIG1vZHVsZT1cImh0dHBFeGFtcGxlXCI+XG48ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJGZXRjaENvbnRyb2xsZXJcIj5cbiAgICA8c2VsZWN0IG5nLW1vZGVsPVwibWV0aG9kXCI+XG4gICAgICA8b3B0aW9uPkdFVDwvb3B0aW9uPlxuICAgICAgPG9wdGlvbj5KU09OUDwvb3B0aW9uPlxuICAgIDwvc2VsZWN0PlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXJsXCIgc2l6ZT1cIjgwXCIvPlxuICAgIDxidXR0b24gaWQ9XCJmZXRjaGJ0blwiIG5nLWNsaWNrPVwiZmV0Y2goKVwiPmZldGNoPC9idXR0b24+PGJyPlxuICAgIDxidXR0b24gaWQ9XCJzYW1wbGVnZXRidG5cIiBuZy1jbGljaz1cInVwZGF0ZU1vZGVsKCdHRVQnLCAnaHR0cC1oZWxsby5odG1sJylcIj5TYW1wbGUgR0VUPC9idXR0b24+XG4gICAgPGJ1dHRvbiBpZD1cInNhbXBsZWpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJyxcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9ncmVldC5waHA/Y2FsbGJhY2s9SlNPTl9DQUxMQkFDSyZuYW1lPVN1cGVyJTIwSGVybycpXCI+XG4gICAgICBTYW1wbGUgSlNPTlBcbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwiaW52YWxpZGpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJywgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCZjYWxsYmFjaz1KU09OX0NBTExCQUNLJylcIj5cbiAgICAgICAgSW52YWxpZCBKU09OUFxuICAgICAgPC9idXR0b24+XG4gICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+XG4gICAgPHByZT5odHRwIHJlc3BvbnNlIGRhdGE6IHt7ZGF0YX19PC9wcmU+XG4gIDwvZGl2PlxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICBhbmd1bGFyLm1vZHVsZSgnaHR0cEV4YW1wbGUnLCBbXSlcbiAgICAuY29udHJvbGxlcignRmV0Y2hDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLFxuICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICAgICAgJHNjb3BlLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAkc2NvcGUudXJsID0gJ2h0dHAtaGVsbG8uaHRtbCc7XG5cbiAgICAgICAgJHNjb3BlLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmNvZGUgPSBudWxsO1xuICAgICAgICAgICRzY29wZS5yZXNwb25zZSA9IG51bGw7XG5cbiAgICAgICAgICAkaHR0cCh7bWV0aG9kOiAkc2NvcGUubWV0aG9kLCB1cmw6ICRzY29wZS51cmwsIGNhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLlxuICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSBkYXRhIHx8IFwiUmVxdWVzdCBmYWlsZWRcIjtcbiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudXBkYXRlTW9kZWwgPSBmdW5jdGlvbihtZXRob2QsIHVybCkge1xuICAgICAgICAgICRzY29wZS5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgICAgJHNjb3BlLnVybCA9IHVybDtcbiAgICAgICAgfTtcbiAgICAgIH1dKTtcbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJodHRwLWhlbGxvLmh0bWxcIj5cbiAgSGVsbG8sICRodHRwIVxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICB2YXIgc3RhdHVzID0gZWxlbWVudChieS5iaW5kaW5nKCdzdGF0dXMnKSk7XG4gIHZhciBkYXRhID0gZWxlbWVudChieS5iaW5kaW5nKCdkYXRhJykpO1xuICB2YXIgZmV0Y2hCdG4gPSBlbGVtZW50KGJ5LmlkKCdmZXRjaGJ0bicpKTtcbiAgdmFyIHNhbXBsZUdldEJ0biA9IGVsZW1lbnQoYnkuaWQoJ3NhbXBsZWdldGJ0bicpKTtcbiAgdmFyIHNhbXBsZUpzb25wQnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlanNvbnBidG4nKSk7XG4gIHZhciBpbnZhbGlkSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbnZhbGlkanNvbnBidG4nKSk7XG5cbiAgaXQoJ3Nob3VsZCBtYWtlIGFuIHhociBHRVQgcmVxdWVzdCcsIGZ1bmN0aW9uKCkge1xuICAgIHNhbXBsZUdldEJ0bi5jbGljaygpO1xuICAgIGZldGNoQnRuLmNsaWNrKCk7XG4gICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvSGVsbG8sIFxcJGh0dHAhLyk7XG4gIH0pO1xuXG4vLyBDb21tZW50ZWQgb3V0IGR1ZSB0byBmbGFrZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTg1XG4vLyBpdCgnc2hvdWxkIG1ha2UgYSBKU09OUCByZXF1ZXN0IHRvIGFuZ3VsYXJqcy5vcmcnLCBmdW5jdGlvbigpIHtcbi8vICAgc2FtcGxlSnNvbnBCdG4uY2xpY2soKTtcbi8vICAgZmV0Y2hCdG4uY2xpY2soKTtcbi8vICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuLy8gICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goL1N1cGVyIEhlcm8hLyk7XG4vLyB9KTtcblxuICBpdCgnc2hvdWxkIG1ha2UgSlNPTlAgcmVxdWVzdCB0byBpbnZhbGlkIFVSTCBhbmQgaW52b2tlIHRoZSBlcnJvciBoYW5kbGVyJyxcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgIGludmFsaWRKc29ucEJ0bi5jbGljaygpO1xuICAgIGZldGNoQnRuLmNsaWNrKCk7XG4gICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzAnKTtcbiAgICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goJ1JlcXVlc3QgZmFpbGVkJyk7XG4gIH0pO1xuPC9maWxlPlxuPC9leGFtcGxlPlxuICAgICAqL1xuICAgIGZ1bmN0aW9uICRodHRwKHJlcXVlc3RDb25maWcpIHtcbiAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3QsXG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgfTtcbiAgICAgIHZhciBoZWFkZXJzID0gbWVyZ2VIZWFkZXJzKHJlcXVlc3RDb25maWcpO1xuXG4gICAgICBleHRlbmQoY29uZmlnLCByZXF1ZXN0Q29uZmlnKTtcbiAgICAgIGNvbmZpZy5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgIGNvbmZpZy5tZXRob2QgPSB1cHBlcmNhc2UoY29uZmlnLm1ldGhvZCk7XG5cbiAgICAgIHZhciBzZXJ2ZXJSZXF1ZXN0ID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIGhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICAgICAgdmFyIHJlcURhdGEgPSB0cmFuc2Zvcm1EYXRhKGNvbmZpZy5kYXRhLCBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLCBjb25maWcudHJhbnNmb3JtUmVxdWVzdCk7XG5cbiAgICAgICAgLy8gc3RyaXAgY29udGVudC10eXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChyZXFEYXRhKSkge1xuICAgICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGhlYWRlcikge1xuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZShoZWFkZXIpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykgJiYgIWlzVW5kZWZpbmVkKGRlZmF1bHRzLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzID0gZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2VuZCByZXF1ZXN0XG4gICAgICAgIHJldHVybiBzZW5kUmVxKGNvbmZpZywgcmVxRGF0YSwgaGVhZGVycykudGhlbih0cmFuc2Zvcm1SZXNwb25zZSwgdHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGNoYWluID0gW3NlcnZlclJlcXVlc3QsIHVuZGVmaW5lZF07XG4gICAgICB2YXIgcHJvbWlzZSA9ICRxLndoZW4oY29uZmlnKTtcblxuICAgICAgLy8gYXBwbHkgaW50ZXJjZXB0b3JzXG4gICAgICBmb3JFYWNoKHJldmVyc2VkSW50ZXJjZXB0b3JzLCBmdW5jdGlvbihpbnRlcmNlcHRvcikge1xuICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVxdWVzdCB8fCBpbnRlcmNlcHRvci5yZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLnJlcXVlc3QsIGludGVyY2VwdG9yLnJlcXVlc3RFcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlc3BvbnNlIHx8IGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpIHtcbiAgICAgICAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLnJlc3BvbnNlLCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHRoZW5GbiA9IGNoYWluLnNoaWZ0KCk7XG4gICAgICAgIHZhciByZWplY3RGbiA9IGNoYWluLnNoaWZ0KCk7XG5cbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbih0aGVuRm4sIHJlamVjdEZuKTtcbiAgICAgIH1cblxuICAgICAgcHJvbWlzZS5zdWNjZXNzID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9O1xuXG4gICAgICBwcm9taXNlLmVycm9yID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKG51bGwsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcblxuICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgLy8gbWFrZSBhIGNvcHkgc2luY2UgdGhlIHJlc3BvbnNlIG11c3QgYmUgY2FjaGVhYmxlXG4gICAgICAgIHZhciByZXNwID0gZXh0ZW5kKHt9LCByZXNwb25zZSk7XG4gICAgICAgIGlmICghcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgIHJlc3AuZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzcC5kYXRhID0gdHJhbnNmb3JtRGF0YShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoaXNTdWNjZXNzKHJlc3BvbnNlLnN0YXR1cykpXG4gICAgICAgICAgPyByZXNwXG4gICAgICAgICAgOiAkcS5yZWplY3QocmVzcCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1lcmdlSGVhZGVycyhjb25maWcpIHtcbiAgICAgICAgdmFyIGRlZkhlYWRlcnMgPSBkZWZhdWx0cy5oZWFkZXJzLFxuICAgICAgICAgICAgcmVxSGVhZGVycyA9IGV4dGVuZCh7fSwgY29uZmlnLmhlYWRlcnMpLFxuICAgICAgICAgICAgZGVmSGVhZGVyTmFtZSwgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSwgcmVxSGVhZGVyTmFtZTtcblxuICAgICAgICBkZWZIZWFkZXJzID0gZXh0ZW5kKHt9LCBkZWZIZWFkZXJzLmNvbW1vbiwgZGVmSGVhZGVyc1tsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCldKTtcblxuICAgICAgICAvLyB1c2luZyBmb3ItaW4gaW5zdGVhZCBvZiBmb3JFYWNoIHRvIGF2b2lkIHVuZWNlc3NhcnkgaXRlcmF0aW9uIGFmdGVyIGhlYWRlciBoYXMgYmVlbiBmb3VuZFxuICAgICAgICBkZWZhdWx0SGVhZGVyc0l0ZXJhdGlvbjpcbiAgICAgICAgZm9yIChkZWZIZWFkZXJOYW1lIGluIGRlZkhlYWRlcnMpIHtcbiAgICAgICAgICBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lID0gbG93ZXJjYXNlKGRlZkhlYWRlck5hbWUpO1xuXG4gICAgICAgICAgZm9yIChyZXFIZWFkZXJOYW1lIGluIHJlcUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UocmVxSGVhZGVyTmFtZSkgPT09IGxvd2VyY2FzZURlZkhlYWRlck5hbWUpIHtcbiAgICAgICAgICAgICAgY29udGludWUgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVxSGVhZGVyc1tkZWZIZWFkZXJOYW1lXSA9IGRlZkhlYWRlcnNbZGVmSGVhZGVyTmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBleGVjdXRlIGlmIGhlYWRlciB2YWx1ZSBpcyBhIGZ1bmN0aW9uIGZvciBtZXJnZWQgaGVhZGVyc1xuICAgICAgICBleGVjSGVhZGVycyhyZXFIZWFkZXJzKTtcbiAgICAgICAgcmV0dXJuIHJlcUhlYWRlcnM7XG5cbiAgICAgICAgZnVuY3Rpb24gZXhlY0hlYWRlcnMoaGVhZGVycykge1xuICAgICAgICAgIHZhciBoZWFkZXJDb250ZW50O1xuXG4gICAgICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbihoZWFkZXJGbiwgaGVhZGVyKSB7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihoZWFkZXJGbikpIHtcbiAgICAgICAgICAgICAgaGVhZGVyQ29udGVudCA9IGhlYWRlckZuKCk7XG4gICAgICAgICAgICAgIGlmIChoZWFkZXJDb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzW2hlYWRlcl0gPSBoZWFkZXJDb250ZW50O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlcl07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICRodHRwLnBlbmRpbmdSZXF1ZXN0cyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2dldFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEdFVGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNkZWxldGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBERUxFVEVgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjaGVhZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEhFQURgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjanNvbnBcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBKU09OUGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0LlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgVGhlIG5hbWUgb2YgdGhlIGNhbGxiYWNrIHNob3VsZCBiZSB0aGUgc3RyaW5nIGBKU09OX0NBTExCQUNLYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuICAgIGNyZWF0ZVNob3J0TWV0aG9kcygnZ2V0JywgJ2RlbGV0ZScsICdoZWFkJywgJ2pzb25wJyk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjcG9zdFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBPU1RgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI3B1dFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBVVGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJGh0dHAjcGF0Y2hcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQQVRDSGAgcmVxdWVzdC5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxuICAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgICovXG4gICAgY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEoJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgKiBAbmFtZSAkaHR0cCNkZWZhdWx0c1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUnVudGltZSBlcXVpdmFsZW50IG9mIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0c2AgcHJvcGVydHkuIEFsbG93cyBjb25maWd1cmF0aW9uIG9mXG4gICAgICAgICAqIGRlZmF1bHQgaGVhZGVycywgd2l0aENyZWRlbnRpYWxzIGFzIHdlbGwgYXMgcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgXCJTZXR0aW5nIEhUVFAgSGVhZGVyc1wiIGFuZCBcIlRyYW5zZm9ybWluZyBSZXF1ZXN0cyBhbmQgUmVzcG9uc2VzXCIgc2VjdGlvbnMgYWJvdmUuXG4gICAgICAgICAqL1xuICAgICRodHRwLmRlZmF1bHRzID0gZGVmYXVsdHM7XG5cblxuICAgIHJldHVybiAkaHR0cDtcblxuXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzKG5hbWVzKSB7XG4gICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuICRodHRwKGV4dGVuZChjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcbiAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YShuYW1lKSB7XG4gICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuICRodHRwKGV4dGVuZChjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogTWFrZXMgdGhlIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiAhISEgQUNDRVNTRVMgQ0xPU1VSRSBWQVJTOlxuICAgICAqICRodHRwQmFja2VuZCwgZGVmYXVsdHMsICRsb2csICRyb290U2NvcGUsIGRlZmF1bHRDYWNoZSwgJGh0dHAucGVuZGluZ1JlcXVlc3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2VuZFJlcShjb25maWcsIHJlcURhdGEsIHJlcUhlYWRlcnMpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksXG4gICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgY2FjaGVkUmVzcCxcbiAgICAgICAgICB1cmwgPSBidWlsZFVybChjb25maWcudXJsLCBjb25maWcucGFyYW1zKTtcblxuICAgICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnB1c2goY29uZmlnKTtcbiAgICAgIHByb21pc2UudGhlbihyZW1vdmVQZW5kaW5nUmVxLCByZW1vdmVQZW5kaW5nUmVxKTtcblxuXG4gICAgICBpZiAoKGNvbmZpZy5jYWNoZSB8fCBkZWZhdWx0cy5jYWNoZSkgJiYgY29uZmlnLmNhY2hlICE9PSBmYWxzZSAmJlxuICAgICAgICAgIChjb25maWcubWV0aG9kID09PSAnR0VUJyB8fCBjb25maWcubWV0aG9kID09PSAnSlNPTlAnKSkge1xuICAgICAgICBjYWNoZSA9IGlzT2JqZWN0KGNvbmZpZy5jYWNoZSkgPyBjb25maWcuY2FjaGVcbiAgICAgICAgICAgICAgOiBpc09iamVjdChkZWZhdWx0cy5jYWNoZSkgPyBkZWZhdWx0cy5jYWNoZVxuICAgICAgICAgICAgICA6IGRlZmF1bHRDYWNoZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlZFJlc3AgPSBjYWNoZS5nZXQodXJsKTtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChjYWNoZWRSZXNwKSkge1xuICAgICAgICAgIGlmIChpc1Byb21pc2VMaWtlKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgICAvLyBjYWNoZWQgcmVxdWVzdCBoYXMgYWxyZWFkeSBiZWVuIHNlbnQsIGJ1dCB0aGVyZSBpcyBubyByZXNwb25zZSB5ZXRcbiAgICAgICAgICAgIGNhY2hlZFJlc3AudGhlbihyZW1vdmVQZW5kaW5nUmVxLCByZW1vdmVQZW5kaW5nUmVxKTtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRSZXNwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZXJ2aW5nIGZyb20gY2FjaGVcbiAgICAgICAgICAgIGlmIChpc0FycmF5KGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3BbMV0sIGNhY2hlZFJlc3BbMF0sIHNoYWxsb3dDb3B5KGNhY2hlZFJlc3BbMl0pLCBjYWNoZWRSZXNwWzNdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3AsIDIwMCwge30sICdPSycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBwdXQgdGhlIHByb21pc2UgZm9yIHRoZSBub24tdHJhbnNmb3JtZWQgcmVzcG9uc2UgaW50byBjYWNoZSBhcyBhIHBsYWNlaG9sZGVyXG4gICAgICAgICAgY2FjaGUucHV0KHVybCwgcHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvLyBpZiB3ZSB3b24ndCBoYXZlIHRoZSByZXNwb25zZSBpbiBjYWNoZSwgc2V0IHRoZSB4c3JmIGhlYWRlcnMgYW5kXG4gICAgICAvLyBzZW5kIHRoZSByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kXG4gICAgICBpZiAoaXNVbmRlZmluZWQoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgdmFyIHhzcmZWYWx1ZSA9IHVybElzU2FtZU9yaWdpbihjb25maWcudXJsKVxuICAgICAgICAgICAgPyAkYnJvd3Nlci5jb29raWVzKClbY29uZmlnLnhzcmZDb29raWVOYW1lIHx8IGRlZmF1bHRzLnhzcmZDb29raWVOYW1lXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgICByZXFIZWFkZXJzWyhjb25maWcueHNyZkhlYWRlck5hbWUgfHwgZGVmYXVsdHMueHNyZkhlYWRlck5hbWUpXSA9IHhzcmZWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgICRodHRwQmFja2VuZChjb25maWcubWV0aG9kLCB1cmwsIHJlcURhdGEsIGRvbmUsIHJlcUhlYWRlcnMsIGNvbmZpZy50aW1lb3V0LFxuICAgICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscywgY29uZmlnLnJlc3BvbnNlVHlwZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbGJhY2sgcmVnaXN0ZXJlZCB0byAkaHR0cEJhY2tlbmQoKTpcbiAgICAgICAqICAtIGNhY2hlcyB0aGUgcmVzcG9uc2UgaWYgZGVzaXJlZFxuICAgICAgICogIC0gcmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlXG4gICAgICAgKiAgLSBjYWxscyAkYXBwbHlcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZG9uZShzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KSB7XG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgIGlmIChpc1N1Y2Nlc3Moc3RhdHVzKSkge1xuICAgICAgICAgICAgY2FjaGUucHV0KHVybCwgW3N0YXR1cywgcmVzcG9uc2UsIHBhcnNlSGVhZGVycyhoZWFkZXJzU3RyaW5nKSwgc3RhdHVzVGV4dF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgcHJvbWlzZSBmcm9tIHRoZSBjYWNoZVxuICAgICAgICAgICAgY2FjaGUucmVtb3ZlKHVybCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUh0dHBQcm9taXNlKCkge1xuICAgICAgICAgIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUFwcGx5QXN5bmMpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseUFzeW5jKHJlc29sdmVIdHRwUHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZUh0dHBQcm9taXNlKCk7XG4gICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgc3RhdHVzVGV4dCkge1xuICAgICAgICAvLyBub3JtYWxpemUgaW50ZXJuYWwgc3RhdHVzZXMgdG8gMFxuICAgICAgICBzdGF0dXMgPSBNYXRoLm1heChzdGF0dXMsIDApO1xuXG4gICAgICAgIChpc1N1Y2Nlc3Moc3RhdHVzKSA/IGRlZmVycmVkLnJlc29sdmUgOiBkZWZlcnJlZC5yZWplY3QpKHtcbiAgICAgICAgICBkYXRhOiByZXNwb25zZSxcbiAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLFxuICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHN0YXR1c1RleHRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlUGVuZGluZ1JlcSgpIHtcbiAgICAgICAgdmFyIGlkeCA9ICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5pbmRleE9mKGNvbmZpZyk7XG4gICAgICAgIGlmIChpZHggIT09IC0xKSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBidWlsZFVybCh1cmwsIHBhcmFtcykge1xuICAgICAgaWYgKCFwYXJhbXMpIHJldHVybiB1cmw7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIGZvckVhY2hTb3J0ZWQocGFyYW1zLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlKSkgdmFsdWUgPSBbdmFsdWVdO1xuXG4gICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QodikpIHtcbiAgICAgICAgICAgIGlmIChpc0RhdGUodikpIHtcbiAgICAgICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHYgPSB0b0pzb24odik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5KSArICc9JyArXG4gICAgICAgICAgICAgICAgICAgICBlbmNvZGVVcmlRdWVyeSh2KSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBpZiAocGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICB1cmwgKz0gKCh1cmwuaW5kZXhPZignPycpID09IC0xKSA/ICc/JyA6ICcmJykgKyBwYXJ0cy5qb2luKCcmJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfV07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVhocigpIHtcbiAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaHR0cEJhY2tlbmRcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVFRQIGJhY2tlbmQgdXNlZCBieSB0aGUge0BsaW5rIG5nLiRodHRwIHNlcnZpY2V9IHRoYXQgZGVsZWdhdGVzIHRvXG4gKiBYTUxIdHRwUmVxdWVzdCBvYmplY3Qgb3IgSlNPTlAgYW5kIGRlYWxzIHdpdGggYnJvd3NlciBpbmNvbXBhdGliaWxpdGllcy5cbiAqXG4gKiBZb3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gdXNlIHRoaXMgc2VydmljZSBkaXJlY3RseSwgaW5zdGVhZCB1c2UgdGhlIGhpZ2hlci1sZXZlbCBhYnN0cmFjdGlvbnM6XG4gKiB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IG9yIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZSAkcmVzb3VyY2V9LlxuICpcbiAqIER1cmluZyB0ZXN0aW5nIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgc3dhcHBlZCB3aXRoIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kIG1vY2tcbiAqICRodHRwQmFja2VuZH0gd2hpY2ggY2FuIGJlIHRyYWluZWQgd2l0aCByZXNwb25zZXMuXG4gKi9cbmZ1bmN0aW9uICRIdHRwQmFja2VuZFByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyR3aW5kb3cnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJGJyb3dzZXIsICR3aW5kb3csICRkb2N1bWVudCkge1xuICAgIHJldHVybiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgY3JlYXRlWGhyLCAkYnJvd3Nlci5kZWZlciwgJHdpbmRvdy5hbmd1bGFyLmNhbGxiYWNrcywgJGRvY3VtZW50WzBdKTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCBjcmVhdGVYaHIsICRicm93c2VyRGVmZXIsIGNhbGxiYWNrcywgcmF3RG9jdW1lbnQpIHtcbiAgLy8gVE9ETyh2b2p0YSk6IGZpeCB0aGUgc2lnbmF0dXJlXG4gIHJldHVybiBmdW5jdGlvbihtZXRob2QsIHVybCwgcG9zdCwgY2FsbGJhY2ssIGhlYWRlcnMsIHRpbWVvdXQsIHdpdGhDcmVkZW50aWFscywgcmVzcG9uc2VUeXBlKSB7XG4gICAgJGJyb3dzZXIuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCgpO1xuICAgIHVybCA9IHVybCB8fCAkYnJvd3Nlci51cmwoKTtcblxuICAgIGlmIChsb3dlcmNhc2UobWV0aG9kKSA9PSAnanNvbnAnKSB7XG4gICAgICB2YXIgY2FsbGJhY2tJZCA9ICdfJyArIChjYWxsYmFja3MuY291bnRlcisrKS50b1N0cmluZygzNik7XG4gICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0gPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXS5kYXRhID0gZGF0YTtcbiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmNhbGxlZCA9IHRydWU7XG4gICAgICB9O1xuXG4gICAgICB2YXIganNvbnBEb25lID0ganNvbnBSZXEodXJsLnJlcGxhY2UoJ0pTT05fQ0FMTEJBQ0snLCAnYW5ndWxhci5jYWxsYmFja3MuJyArIGNhbGxiYWNrSWQpLFxuICAgICAgICAgIGNhbGxiYWNrSWQsIGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmRhdGEsIFwiXCIsIHRleHQpO1xuICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0gPSBub29wO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgdmFyIHhociA9IGNyZWF0ZVhocigpO1xuXG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uIHJlcXVlc3RMb2FkZWQoKSB7XG4gICAgICAgIHZhciBzdGF0dXNUZXh0ID0geGhyLnN0YXR1c1RleHQgfHwgJyc7XG5cbiAgICAgICAgLy8gcmVzcG9uc2VUZXh0IGlzIHRoZSBvbGQtc2Nob29sIHdheSBvZiByZXRyaWV2aW5nIHJlc3BvbnNlIChzdXBwb3J0ZWQgYnkgSUU4ICYgOSlcbiAgICAgICAgLy8gcmVzcG9uc2UvcmVzcG9uc2VUeXBlIHByb3BlcnRpZXMgd2VyZSBpbnRyb2R1Y2VkIGluIFhIUiBMZXZlbDIgc3BlYyAoc3VwcG9ydGVkIGJ5IElFMTApXG4gICAgICAgIHZhciByZXNwb25zZSA9ICgncmVzcG9uc2UnIGluIHhocikgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xuXG4gICAgICAgIC8vIG5vcm1hbGl6ZSBJRTkgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKVxuICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXM7XG5cbiAgICAgICAgLy8gZml4IHN0YXR1cyBjb2RlIHdoZW4gaXQgaXMgMCAoMCBzdGF0dXMgaXMgdW5kb2N1bWVudGVkKS5cbiAgICAgICAgLy8gT2NjdXJzIHdoZW4gYWNjZXNzaW5nIGZpbGUgcmVzb3VyY2VzIG9yIG9uIEFuZHJvaWQgNC4xIHN0b2NrIGJyb3dzZXJcbiAgICAgICAgLy8gd2hpbGUgcmV0cmlldmluZyBmaWxlcyBmcm9tIGFwcGxpY2F0aW9uIGNhY2hlLlxuICAgICAgICBpZiAoc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgc3RhdHVzID0gcmVzcG9uc2UgPyAyMDAgOiB1cmxSZXNvbHZlKHVybCkucHJvdG9jb2wgPT0gJ2ZpbGUnID8gNDA0IDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjayxcbiAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLFxuICAgICAgICAgICAgc3RhdHVzVGV4dCk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVxdWVzdEVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFRoZSByZXNwb25zZSBpcyBhbHdheXMgZW1wdHlcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8veGhyLnNwZWMud2hhdHdnLm9yZy8jcmVxdWVzdC1lcnJvci1zdGVwcyBhbmQgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbmV0d29yay1lcnJvclxuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIC0xLCBudWxsLCBudWxsLCAnJyk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub25lcnJvciA9IHJlcXVlc3RFcnJvcjtcbiAgICAgIHhoci5vbmFib3J0ID0gcmVxdWVzdEVycm9yO1xuXG4gICAgICBpZiAod2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFdlYktpdCBhZGRlZCBzdXBwb3J0IGZvciB0aGUganNvbiByZXNwb25zZVR5cGUgdmFsdWUgb24gMDkvMDMvMjAxM1xuICAgICAgICAgIC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD03MzY0OC4gVmVyc2lvbnMgb2YgU2FmYXJpIHByaW9yIHRvIDcgYXJlXG4gICAgICAgICAgLy8ga25vd24gdG8gdGhyb3cgd2hlbiBzZXR0aW5nIHRoZSB2YWx1ZSBcImpzb25cIiBhcyB0aGUgcmVzcG9uc2UgdHlwZS4gT3RoZXIgb2xkZXJcbiAgICAgICAgICAvLyBicm93c2VycyBpbXBsZW1lbnRpbmcgdGhlIHJlc3BvbnNlVHlwZVxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVGhlIGpzb24gcmVzcG9uc2UgdHlwZSBjYW4gYmUgaWdub3JlZCBpZiBub3Qgc3VwcG9ydGVkLCBiZWNhdXNlIEpTT04gcGF5bG9hZHMgYXJlXG4gICAgICAgICAgLy8gcGFyc2VkIG9uIHRoZSBjbGllbnQtc2lkZSByZWdhcmRsZXNzLlxuICAgICAgICAgIGlmIChyZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQocG9zdCB8fCBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgIHZhciB0aW1lb3V0SWQgPSAkYnJvd3NlckRlZmVyKHRpbWVvdXRSZXF1ZXN0LCB0aW1lb3V0KTtcbiAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZUxpa2UodGltZW91dCkpIHtcbiAgICAgIHRpbWVvdXQudGhlbih0aW1lb3V0UmVxdWVzdCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiB0aW1lb3V0UmVxdWVzdCgpIHtcbiAgICAgIGpzb25wRG9uZSAmJiBqc29ucERvbmUoKTtcbiAgICAgIHhociAmJiB4aHIuYWJvcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpIHtcbiAgICAgIC8vIGNhbmNlbCB0aW1lb3V0IGFuZCBzdWJzZXF1ZW50IHRpbWVvdXQgcHJvbWlzZSByZXNvbHV0aW9uXG4gICAgICB0aW1lb3V0SWQgJiYgJGJyb3dzZXJEZWZlci5jYW5jZWwodGltZW91dElkKTtcbiAgICAgIGpzb25wRG9uZSA9IHhociA9IG51bGw7XG5cbiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpO1xuICAgICAgJGJyb3dzZXIuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChub29wKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24ganNvbnBSZXEodXJsLCBjYWxsYmFja0lkLCBkb25lKSB7XG4gICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHNoaXQgd2l0aCBzY3JpcHQgZWxlbWVudHMsIGUuZy46XG4gICAgLy8gLSBmZXRjaGVzIGxvY2FsIHNjcmlwdHMgdmlhIFhIUiBhbmQgZXZhbHMgdGhlbVxuICAgIC8vIC0gYWRkcyBhbmQgaW1tZWRpYXRlbHkgcmVtb3ZlcyBzY3JpcHQgZWxlbWVudHMgZnJvbSB0aGUgZG9jdW1lbnRcbiAgICB2YXIgc2NyaXB0ID0gcmF3RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksIGNhbGxiYWNrID0gbnVsbDtcbiAgICBzY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gICAgc2NyaXB0LnNyYyA9IHVybDtcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuXG4gICAgY2FsbGJhY2sgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgXCJsb2FkXCIsIGNhbGxiYWNrKTtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihzY3JpcHQsIFwiZXJyb3JcIiwgY2FsbGJhY2spO1xuICAgICAgcmF3RG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgIHZhciBzdGF0dXMgPSAtMTtcbiAgICAgIHZhciB0ZXh0ID0gXCJ1bmtub3duXCI7XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJsb2FkXCIgJiYgIWNhbGxiYWNrc1tjYWxsYmFja0lkXS5jYWxsZWQpIHtcbiAgICAgICAgICBldmVudCA9IHsgdHlwZTogXCJlcnJvclwiIH07XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGV2ZW50LnR5cGU7XG4gICAgICAgIHN0YXR1cyA9IGV2ZW50LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgZG9uZShzdGF0dXMsIHRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBhZGRFdmVudExpc3RlbmVyRm4oc2NyaXB0LCBcImxvYWRcIiwgY2FsbGJhY2spO1xuICAgIGFkZEV2ZW50TGlzdGVuZXJGbihzY3JpcHQsIFwiZXJyb3JcIiwgY2FsbGJhY2spO1xuICAgIHJhd0RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH1cbn1cblxudmFyICRpbnRlcnBvbGF0ZU1pbkVyciA9IG1pbkVycignJGludGVycG9sYXRlJyk7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFVzZWQgZm9yIGNvbmZpZ3VyaW5nIHRoZSBpbnRlcnBvbGF0aW9uIG1hcmt1cC4gRGVmYXVsdHMgdG8gYHt7YCBhbmQgYH19YC5cbiAqXG4gKiBAZXhhbXBsZVxuPGV4YW1wbGUgbW9kdWxlPVwiY3VzdG9tSW50ZXJwb2xhdGlvbkFwcFwiPlxuPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbjxzY3JpcHQ+XG4gIHZhciBjdXN0b21JbnRlcnBvbGF0aW9uQXBwID0gYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUludGVycG9sYXRpb25BcHAnLCBbXSk7XG5cbiAgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcC5jb25maWcoZnVuY3Rpb24oJGludGVycG9sYXRlUHJvdmlkZXIpIHtcbiAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbCgnLy8nKTtcbiAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5lbmRTeW1ib2woJy8vJyk7XG4gIH0pO1xuXG5cbiAgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcC5jb250cm9sbGVyKCdEZW1vQ29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5sYWJlbCA9IFwiVGhpcyBiaW5kaW5nIGlzIGJyb3VnaHQgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy5cIjtcbiAgfSk7XG48L3NjcmlwdD5cbjxkaXYgbmctYXBwPVwiQXBwXCIgbmctY29udHJvbGxlcj1cIkRlbW9Db250cm9sbGVyIGFzIGRlbW9cIj5cbiAgICAvL2RlbW8ubGFiZWwvL1xuPC9kaXY+XG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gIGl0KCdzaG91bGQgaW50ZXJwb2xhdGUgYmluZGluZyB3aXRoIGN1c3RvbSBzeW1ib2xzJywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZGVtby5sYWJlbCcpKS5nZXRUZXh0KCkpLnRvQmUoJ1RoaXMgYmluZGluZyBpcyBicm91Z2h0IHlvdSBieSAvLyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuJyk7XG4gIH0pO1xuPC9maWxlPlxuPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkSW50ZXJwb2xhdGVQcm92aWRlcigpIHtcbiAgdmFyIHN0YXJ0U3ltYm9sID0gJ3t7JztcbiAgdmFyIGVuZFN5bWJvbCA9ICd9fSc7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2xcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFN5bWJvbCB0byBkZW5vdGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBzdGFydGluZyBzeW1ib2wgdG8uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuXG4gICAqL1xuICB0aGlzLnN0YXJ0U3ltYm9sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHN0YXJ0U3ltYm9sID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2xcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIGVuZGluZyBzeW1ib2wgdG8uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuXG4gICAqL1xuICB0aGlzLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBlbmRTeW1ib2wgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZW5kU3ltYm9sO1xuICAgIH1cbiAgfTtcblxuXG4gIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRzY2UnLCBmdW5jdGlvbigkcGFyc2UsICRleGNlcHRpb25IYW5kbGVyLCAkc2NlKSB7XG4gICAgdmFyIHN0YXJ0U3ltYm9sTGVuZ3RoID0gc3RhcnRTeW1ib2wubGVuZ3RoLFxuICAgICAgICBlbmRTeW1ib2xMZW5ndGggPSBlbmRTeW1ib2wubGVuZ3RoLFxuICAgICAgICBlc2NhcGVkU3RhcnRSZWdleHAgPSBuZXcgUmVnRXhwKHN0YXJ0U3ltYm9sLnJlcGxhY2UoLy4vZywgZXNjYXBlKSwgJ2cnKSxcbiAgICAgICAgZXNjYXBlZEVuZFJlZ2V4cCA9IG5ldyBSZWdFeHAoZW5kU3ltYm9sLnJlcGxhY2UoLy4vZywgZXNjYXBlKSwgJ2cnKTtcblxuICAgIGZ1bmN0aW9uIGVzY2FwZShjaCkge1xuICAgICAgcmV0dXJuICdcXFxcXFxcXFxcXFwnICsgY2g7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQHJlcXVpcmVzICRwYXJzZVxuICAgICAqIEByZXF1aXJlcyAkc2NlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIENvbXBpbGVzIGEgc3RyaW5nIHdpdGggbWFya3VwIGludG8gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gVGhpcyBzZXJ2aWNlIGlzIHVzZWQgYnkgdGhlXG4gICAgICogSFRNTCB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9IHNlcnZpY2UgZm9yIGRhdGEgYmluZGluZy4gU2VlXG4gICAgICoge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyICRpbnRlcnBvbGF0ZVByb3ZpZGVyfSBmb3IgY29uZmlndXJpbmcgdGhlXG4gICAgICogaW50ZXJwb2xhdGlvbiBtYXJrdXAuXG4gICAgICpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZFxuICAgICAqICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgnSGVsbG8ge3tuYW1lIHwgdXBwZXJjYXNlfX0hJyk7XG4gICAgICogICBleHBlY3QoZXhwKHtuYW1lOidBbmd1bGFyJ30pLnRvRXF1YWwoJ0hlbGxvIEFOR1VMQVIhJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgJGludGVycG9sYXRlYCB0YWtlcyBhbiBvcHRpb25hbCBmb3VydGggYXJndW1lbnQsIGBhbGxPck5vdGhpbmdgLiBJZiBgYWxsT3JOb3RoaW5nYCBpc1xuICAgICAqIGB0cnVlYCwgdGhlIGludGVycG9sYXRpb24gZnVuY3Rpb24gd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgdW5sZXNzIGFsbCBlbWJlZGRlZCBleHByZXNzaW9uc1xuICAgICAqIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZFxuICAgICAqICAgdmFyIGNvbnRleHQgPSB7Z3JlZXRpbmc6ICdIZWxsbycsIG5hbWU6IHVuZGVmaW5lZCB9O1xuICAgICAqXG4gICAgICogICAvLyBkZWZhdWx0IFwiZm9yZ2l2aW5nXCIgbW9kZVxuICAgICAqICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgne3tncmVldGluZ319IHt7bmFtZX19IScpO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gIScpO1xuICAgICAqXG4gICAgICogICAvLyBcImFsbE9yTm90aGluZ1wiIG1vZGVcbiAgICAgKiAgIGV4cCA9ICRpbnRlcnBvbGF0ZSgne3tncmVldGluZ319IHt7bmFtZX19IScsIGZhbHNlLCBudWxsLCB0cnVlKTtcbiAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgKiAgIGNvbnRleHQubmFtZSA9ICdBbmd1bGFyJztcbiAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvRXF1YWwoJ0hlbGxvIEFuZ3VsYXIhJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYWxsT3JOb3RoaW5nYCBpcyB1c2VmdWwgZm9yIGludGVycG9sYXRpbmcgVVJMcy4gYG5nU3JjYCBhbmQgYG5nU3Jjc2V0YCB1c2UgdGhpcyBiZWhhdmlvci5cbiAgICAgKlxuICAgICAqICMjIyNFc2NhcGVkIEludGVycG9sYXRpb25cbiAgICAgKiAkaW50ZXJwb2xhdGUgcHJvdmlkZXMgYSBtZWNoYW5pc20gZm9yIGVzY2FwaW5nIGludGVycG9sYXRpb24gbWFya2Vycy4gU3RhcnQgYW5kIGVuZCBtYXJrZXJzXG4gICAgICogY2FuIGJlIGVzY2FwZWQgYnkgcHJlY2VkaW5nIGVhY2ggb2YgdGhlaXIgY2hhcmFjdGVycyB3aXRoIGEgUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKS5cbiAgICAgKiBJdCB3aWxsIGJlIHJlbmRlcmVkIGFzIGEgcmVndWxhciBzdGFydC9lbmQgbWFya2VyLCBhbmQgd2lsbCBub3QgYmUgaW50ZXJwcmV0ZWQgYXMgYW4gZXhwcmVzc2lvblxuICAgICAqIG9yIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIGVuYWJsZXMgd2ViLXNlcnZlcnMgdG8gcHJldmVudCBzY3JpcHQgaW5qZWN0aW9uIGF0dGFja3MgYW5kIGRlZmFjaW5nIGF0dGFja3MsIHRvIHNvbWVcbiAgICAgKiBkZWdyZWUsIHdoaWxlIGFsc28gZW5hYmxpbmcgY29kZSBleGFtcGxlcyB0byB3b3JrIHdpdGhvdXQgcmVseWluZyBvbiB0aGVcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTm9uQmluZGFibGUgbmdOb25CaW5kYWJsZX0gZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogKipGb3Igc2VjdXJpdHkgcHVycG9zZXMsIGl0IGlzIHN0cm9uZ2x5IGVuY291cmFnZWQgdGhhdCB3ZWIgc2VydmVycyBlc2NhcGUgdXNlci1zdXBwbGllZCBkYXRhLFxuICAgICAqIHJlcGxhY2luZyBhbmdsZSBicmFja2V0cyAoJmx0OywgJmd0Oykgd2l0aCAmYW1wO2x0OyBhbmQgJmFtcDtndDsgcmVzcGVjdGl2ZWx5LCBhbmQgcmVwbGFjaW5nIGFsbFxuICAgICAqIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCB0aGVpciBlc2NhcGVkIGNvdW50ZXJwYXJ0cy4qKlxuICAgICAqXG4gICAgICogRXNjYXBlZCBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgYXJlIG9ubHkgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIGludGVycG9sYXRpb24gbWFya2VycyBpbiByZW5kZXJlZFxuICAgICAqIG91dHB1dCB3aGVuIHRoZSAkaW50ZXJwb2xhdGUgc2VydmljZSBwcm9jZXNzZXMgdGhlIHRleHQuIFNvLCBmb3IgSFRNTCBlbGVtZW50cyBpbnRlcnBvbGF0ZWRcbiAgICAgKiBieSB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9LCBvciBvdGhlcndpc2UgaW50ZXJwb2xhdGVkIHdpdGggdGhlIGBtdXN0SGF2ZUV4cHJlc3Npb25gIHBhcmFtZXRlclxuICAgICAqIHNldCB0byBgdHJ1ZWAsIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dCBtdXN0IGNvbnRhaW4gYW4gdW5lc2NhcGVkIGludGVycG9sYXRpb24gZXhwcmVzc2lvbi4gQXMgc3VjaCxcbiAgICAgKiB0aGlzIGlzIHR5cGljYWxseSB1c2VmdWwgb25seSB3aGVuIHVzZXItZGF0YSBpcyB1c2VkIGluIHJlbmRlcmluZyBhIHRlbXBsYXRlIGZyb20gdGhlIHNlcnZlciwgb3JcbiAgICAgKiB3aGVuIG90aGVyd2lzZSB1bnRydXN0ZWQgZGF0YSBpcyB1c2VkIGJ5IGEgZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogPGV4YW1wbGU+XG4gICAgICogIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICogICAgPGRpdiBuZy1pbml0PVwidXNlcm5hbWU9J0EgdXNlcidcIj5cbiAgICAgKiAgICAgIDxwIG5nLWluaXQ9XCJhcHB0aXRsZT0nRXNjYXBpbmcgZGVtbydcIj57e2FwcHRpdGxlfX06IFxce1xceyB1c2VybmFtZSA9IFwiZGVmYWNlZCB2YWx1ZVwiOyBcXH1cXH1cbiAgICAgKiAgICAgICAgPC9wPlxuICAgICAqICAgICAgPHA+PHN0cm9uZz57e3VzZXJuYW1lfX08L3N0cm9uZz4gYXR0ZW1wdHMgdG8gaW5qZWN0IGNvZGUgd2hpY2ggd2lsbCBkZWZhY2UgdGhlXG4gICAgICogICAgICAgIGFwcGxpY2F0aW9uLCBidXQgZmFpbHMgdG8gYWNjb21wbGlzaCB0aGVpciB0YXNrLCBiZWNhdXNlIHRoZSBzZXJ2ZXIgaGFzIGNvcnJlY3RseVxuICAgICAqICAgICAgICBlc2NhcGVkIHRoZSBpbnRlcnBvbGF0aW9uIHN0YXJ0L2VuZCBtYXJrZXJzIHdpdGggUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKVxuICAgICAqICAgICAgICBjaGFyYWN0ZXJzLjwvcD5cbiAgICAgKiAgICAgIDxwPkluc3RlYWQsIHRoZSByZXN1bHQgb2YgdGhlIGF0dGVtcHRlZCBzY3JpcHQgaW5qZWN0aW9uIGlzIHZpc2libGUsIGFuZCBjYW4gYmUgcmVtb3ZlZFxuICAgICAqICAgICAgICBmcm9tIHRoZSBkYXRhYmFzZSBieSBhbiBhZG1pbmlzdHJhdG9yLjwvcD5cbiAgICAgKiAgICA8L2Rpdj5cbiAgICAgKiAgPC9maWxlPlxuICAgICAqIDwvZXhhbXBsZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHdpdGggbWFya3VwIHRvIGludGVycG9sYXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG11c3RIYXZlRXhwcmVzc2lvbiBpZiBzZXQgdG8gdHJ1ZSB0aGVuIHRoZSBpbnRlcnBvbGF0aW9uIHN0cmluZyBtdXN0IGhhdmVcbiAgICAgKiAgICBlbWJlZGRlZCBleHByZXNzaW9uIGluIG9yZGVyIHRvIHJldHVybiBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLiBTdHJpbmdzIHdpdGggbm9cbiAgICAgKiAgICBlbWJlZGRlZCBleHByZXNzaW9uIHdpbGwgcmV0dXJuIG51bGwgZm9yIHRoZSBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHJ1c3RlZENvbnRleHQgd2hlbiBwcm92aWRlZCwgdGhlIHJldHVybmVkIGZ1bmN0aW9uIHBhc3NlcyB0aGUgaW50ZXJwb2xhdGVkXG4gICAgICogICAgcmVzdWx0IHRocm91Z2gge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWQoaW50ZXJwb2xhdGVkUmVzdWx0LFxuICAgICAqICAgIHRydXN0ZWRDb250ZXh0KX0gYmVmb3JlIHJldHVybmluZyBpdC4gIFJlZmVyIHRvIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlIHRoYXRcbiAgICAgKiAgICBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBmb3IgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBhbGxPck5vdGhpbmcgaWYgYHRydWVgLCB0aGVuIHRoZSByZXR1cm5lZCBmdW5jdGlvbiByZXR1cm5zIHVuZGVmaW5lZFxuICAgICAqICAgIHVubGVzcyBhbGwgZW1iZWRkZWQgZXhwcmVzc2lvbnMgZXZhbHVhdGUgdG8gYSB2YWx1ZSBvdGhlciB0aGFuIGB1bmRlZmluZWRgLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0KX0gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gICAgICogICAgaW50ZXJwb2xhdGVkIHN0cmluZy4gVGhlIGZ1bmN0aW9uIGhhcyB0aGVzZSBwYXJhbWV0ZXJzOlxuICAgICAqXG4gICAgICogLSBgY29udGV4dGA6IGV2YWx1YXRpb24gY29udGV4dCBmb3IgYWxsIGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dFxuICAgICAqL1xuICAgIGZ1bmN0aW9uICRpbnRlcnBvbGF0ZSh0ZXh0LCBtdXN0SGF2ZUV4cHJlc3Npb24sIHRydXN0ZWRDb250ZXh0LCBhbGxPck5vdGhpbmcpIHtcbiAgICAgIGFsbE9yTm90aGluZyA9ICEhYWxsT3JOb3RoaW5nO1xuICAgICAgdmFyIHN0YXJ0SW5kZXgsXG4gICAgICAgICAgZW5kSW5kZXgsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGV4cHJlc3Npb25zID0gW10sXG4gICAgICAgICAgcGFyc2VGbnMgPSBbXSxcbiAgICAgICAgICB0ZXh0TGVuZ3RoID0gdGV4dC5sZW5ndGgsXG4gICAgICAgICAgZXhwLFxuICAgICAgICAgIGNvbmNhdCA9IFtdLFxuICAgICAgICAgIGV4cHJlc3Npb25Qb3NpdGlvbnMgPSBbXTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgdGV4dExlbmd0aCkge1xuICAgICAgICBpZiAoKChzdGFydEluZGV4ID0gdGV4dC5pbmRleE9mKHN0YXJ0U3ltYm9sLCBpbmRleCkpICE9IC0xKSAmJlxuICAgICAgICAgICAgICgoZW5kSW5kZXggPSB0ZXh0LmluZGV4T2YoZW5kU3ltYm9sLCBzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgpKSAhPSAtMSkpIHtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgIGNvbmNhdC5wdXNoKHVuZXNjYXBlVGV4dCh0ZXh0LnN1YnN0cmluZyhpbmRleCwgc3RhcnRJbmRleCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXhwID0gdGV4dC5zdWJzdHJpbmcoc3RhcnRJbmRleCArIHN0YXJ0U3ltYm9sTGVuZ3RoLCBlbmRJbmRleCk7XG4gICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChleHApO1xuICAgICAgICAgIHBhcnNlRm5zLnB1c2goJHBhcnNlKGV4cCwgcGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvcikpO1xuICAgICAgICAgIGluZGV4ID0gZW5kSW5kZXggKyBlbmRTeW1ib2xMZW5ndGg7XG4gICAgICAgICAgZXhwcmVzc2lvblBvc2l0aW9ucy5wdXNoKGNvbmNhdC5sZW5ndGgpO1xuICAgICAgICAgIGNvbmNhdC5wdXNoKCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3ZSBkaWQgbm90IGZpbmQgYW4gaW50ZXJwb2xhdGlvbiwgc28gd2UgaGF2ZSB0byBhZGQgdGhlIHJlbWFpbmRlciB0byB0aGUgc2VwYXJhdG9ycyBhcnJheVxuICAgICAgICAgIGlmIChpbmRleCAhPT0gdGV4dExlbmd0aCkge1xuICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDb25jYXRlbmF0aW5nIGV4cHJlc3Npb25zIG1ha2VzIGl0IGhhcmQgdG8gcmVhc29uIGFib3V0IHdoZXRoZXIgc29tZSBjb21iaW5hdGlvbiBvZlxuICAgICAgLy8gY29uY2F0ZW5hdGVkIHZhbHVlcyBhcmUgdW5zYWZlIHRvIHVzZSBhbmQgY291bGQgZWFzaWx5IGxlYWQgdG8gWFNTLiAgQnkgcmVxdWlyaW5nIHRoYXQgYVxuICAgICAgLy8gc2luZ2xlIGV4cHJlc3Npb24gYmUgdXNlZCBmb3IgaWZyYW1lW3NyY10sIG9iamVjdFtzcmNdLCBldGMuLCB3ZSBlbnN1cmUgdGhhdCB0aGUgdmFsdWVcbiAgICAgIC8vIHRoYXQncyB1c2VkIGlzIGFzc2lnbmVkIG9yIGNvbnN0cnVjdGVkIGJ5IHNvbWUgSlMgY29kZSBzb21ld2hlcmUgdGhhdCBpcyBtb3JlIHRlc3RhYmxlIG9yXG4gICAgICAvLyBtYWtlIGl0IG9idmlvdXMgdGhhdCB5b3UgYm91bmQgdGhlIHZhbHVlIHRvIHNvbWUgdXNlciBjb250cm9sbGVkIHZhbHVlLiAgVGhpcyBoZWxwcyByZWR1Y2VcbiAgICAgIC8vIHRoZSBsb2FkIHdoZW4gYXVkaXRpbmcgZm9yIFhTUyBpc3N1ZXMuXG4gICAgICBpZiAodHJ1c3RlZENvbnRleHQgJiYgY29uY2F0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB0aHJvdyAkaW50ZXJwb2xhdGVNaW5FcnIoJ25vY29uY2F0JyxcbiAgICAgICAgICAgICAgXCJFcnJvciB3aGlsZSBpbnRlcnBvbGF0aW5nOiB7MH1cXG5TdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkaXNhbGxvd3MgXCIgK1xuICAgICAgICAgICAgICBcImludGVycG9sYXRpb25zIHRoYXQgY29uY2F0ZW5hdGUgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hlbiBhIHRydXN0ZWQgdmFsdWUgaXMgXCIgK1xuICAgICAgICAgICAgICBcInJlcXVpcmVkLiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2VcIiwgdGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVzdEhhdmVFeHByZXNzaW9uIHx8IGV4cHJlc3Npb25zLmxlbmd0aCkge1xuICAgICAgICB2YXIgY29tcHV0ZSA9IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhbGxPck5vdGhpbmcgJiYgaXNVbmRlZmluZWQodmFsdWVzW2ldKSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uY2F0W2V4cHJlc3Npb25Qb3NpdGlvbnNbaV1dID0gdmFsdWVzW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29uY2F0LmpvaW4oJycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydXN0ZWRDb250ZXh0ID9cbiAgICAgICAgICAgICRzY2UuZ2V0VHJ1c3RlZCh0cnVzdGVkQ29udGV4dCwgdmFsdWUpIDpcbiAgICAgICAgICAgICRzY2UudmFsdWVPZih2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHsgLy8gbnVsbCB8fCB1bmRlZmluZWRcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgdmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHZhbHVlID0gdG9Kc29uKHZhbHVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiBpbnRlcnBvbGF0aW9uRm4oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgdmFyIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShpaSk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZvciAoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHBhcnNlRm5zW2ldKGNvbnRleHQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGUodmFsdWVzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICB2YXIgbmV3RXJyID0gJGludGVycG9sYXRlTWluRXJyKCdpbnRlcnInLCBcIkNhbid0IGludGVycG9sYXRlOiB7MH1cXG57MX1cIiwgdGV4dCxcbiAgICAgICAgICAgICAgICAgIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIobmV3RXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAvLyBhbGwgb2YgdGhlc2UgcHJvcGVydGllcyBhcmUgdW5kb2N1bWVudGVkIGZvciBub3dcbiAgICAgICAgICBleHA6IHRleHQsIC8vanVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHJlZ3VsYXIgd2F0Y2hlcnMgY3JlYXRlZCB2aWEgJHdhdGNoXG4gICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zLFxuICAgICAgICAgICQkd2F0Y2hEZWxlZ2F0ZTogZnVuY3Rpb24oc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSkge1xuICAgICAgICAgICAgdmFyIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2hHcm91cChwYXJzZUZucywgZnVuY3Rpb24gaW50ZXJwb2xhdGVGbldhdGNoZXIodmFsdWVzLCBvbGRWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgdmFyIGN1cnJWYWx1ZSA9IGNvbXB1dGUodmFsdWVzKTtcbiAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBjdXJyVmFsdWUsIHZhbHVlcyAhPT0gb2xkVmFsdWVzID8gbGFzdFZhbHVlIDogY3VyclZhbHVlLCBzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gY3VyclZhbHVlO1xuICAgICAgICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVuZXNjYXBlVGV4dCh0ZXh0KSB7XG4gICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoZXNjYXBlZFN0YXJ0UmVnZXhwLCBzdGFydFN5bWJvbCkuXG4gICAgICAgICAgcmVwbGFjZShlc2NhcGVkRW5kUmVnZXhwLCBlbmRTeW1ib2wpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZ2lmeShnZXRWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB2YXIgbmV3RXJyID0gJGludGVycG9sYXRlTWluRXJyKCdpbnRlcnInLCBcIkNhbid0IGludGVycG9sYXRlOiB7MH1cXG57MX1cIiwgdGV4dCxcbiAgICAgICAgICAgIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihuZXdFcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlI3N0YXJ0U3ltYm9sXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cbiAgICAgKlxuICAgICAqIFVzZSB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2wgYCRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sYH0gdG8gY2hhbmdlXG4gICAgICogdGhlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHN0YXJ0IHN5bWJvbC5cbiAgICAgKi9cbiAgICAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGFydFN5bWJvbDtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlI2VuZFN5bWJvbFxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLlxuICAgICAqXG4gICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2wgYCRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbGB9IHRvIGNoYW5nZVxuICAgICAqIHRoZSBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBlbmQgc3ltYm9sLlxuICAgICAqL1xuICAgICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2wgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgfTtcblxuICAgIHJldHVybiAkaW50ZXJwb2xhdGU7XG4gIH1dO1xufVxuXG5mdW5jdGlvbiAkSW50ZXJ2YWxQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyR3aW5kb3cnLCAnJHEnLCAnJCRxJyxcbiAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAgICR3aW5kb3csICAgJHEsICAgJCRxKSB7XG4gICAgdmFyIGludGVydmFscyA9IHt9O1xuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICAqIEBuYW1lICRpbnRlcnZhbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQW5ndWxhcidzIHdyYXBwZXIgZm9yIGB3aW5kb3cuc2V0SW50ZXJ2YWxgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyBleGVjdXRlZCBldmVyeSBgZGVsYXlgXG4gICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgICpcbiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiByZWdpc3RlcmluZyBhbiBpbnRlcnZhbCBmdW5jdGlvbiBpcyBhIHByb21pc2UuIFRoaXMgcHJvbWlzZSB3aWxsIGJlXG4gICAgICAqIG5vdGlmaWVkIHVwb24gZWFjaCB0aWNrIG9mIHRoZSBpbnRlcnZhbCwgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgYWZ0ZXIgYGNvdW50YCBpdGVyYXRpb25zLCBvclxuICAgICAgKiBydW4gaW5kZWZpbml0ZWx5IGlmIGBjb3VudGAgaXMgbm90IGRlZmluZWQuIFRoZSB2YWx1ZSBvZiB0aGUgbm90aWZpY2F0aW9uIHdpbGwgYmUgdGhlXG4gICAgICAqIG51bWJlciBvZiBpdGVyYXRpb25zIHRoYXQgaGF2ZSBydW4uXG4gICAgICAqIFRvIGNhbmNlbCBhbiBpbnRlcnZhbCwgY2FsbCBgJGludGVydmFsLmNhbmNlbChwcm9taXNlKWAuXG4gICAgICAqXG4gICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJGludGVydmFsI2ZsdXNoIGAkaW50ZXJ2YWwuZmx1c2gobWlsbGlzKWB9IHRvXG4gICAgICAqIG1vdmUgZm9yd2FyZCBieSBgbWlsbGlzYCBtaWxsaXNlY29uZHMgYW5kIHRyaWdnZXIgYW55IGZ1bmN0aW9ucyBzY2hlZHVsZWQgdG8gcnVuIGluIHRoYXRcbiAgICAgICogdGltZS5cbiAgICAgICpcbiAgICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgICogKipOb3RlKio6IEludGVydmFscyBjcmVhdGVkIGJ5IHRoaXMgc2VydmljZSBtdXN0IGJlIGV4cGxpY2l0bHkgZGVzdHJveWVkIHdoZW4geW91IGFyZSBmaW5pc2hlZFxuICAgICAgKiB3aXRoIHRoZW0uICBJbiBwYXJ0aWN1bGFyIHRoZXkgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IGRlc3Ryb3llZCB3aGVuIGEgY29udHJvbGxlcidzIHNjb3BlIG9yIGFcbiAgICAgICogZGlyZWN0aXZlJ3MgZWxlbWVudCBhcmUgZGVzdHJveWVkLlxuICAgICAgKiBZb3Ugc2hvdWxkIHRha2UgdGhpcyBpbnRvIGNvbnNpZGVyYXRpb24gYW5kIG1ha2Ugc3VyZSB0byBhbHdheXMgY2FuY2VsIHRoZSBpbnRlcnZhbCBhdCB0aGVcbiAgICAgICogYXBwcm9wcmlhdGUgbW9tZW50LiAgU2VlIHRoZSBleGFtcGxlIGJlbG93IGZvciBtb3JlIGRldGFpbHMgb24gaG93IGFuZCB3aGVuIHRvIGRvIHRoaXMuXG4gICAgICAqIDwvZGl2PlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgY2FsbGVkIHJlcGVhdGVkbHkuXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gZWFjaCBmdW5jdGlvbiBjYWxsLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtjb3VudD0wXSBOdW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LiBJZiBub3Qgc2V0LCBvciAwLCB3aWxsIHJlcGVhdFxuICAgICAgKiAgIGluZGVmaW5pdGVseS5cbiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2VcbiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suXG4gICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2Ugd2hpY2ggd2lsbCBiZSBub3RpZmllZCBvbiBlYWNoIGl0ZXJhdGlvbi5cbiAgICAgICpcbiAgICAgICogQGV4YW1wbGVcbiAgICAgICogPGV4YW1wbGUgbW9kdWxlPVwiaW50ZXJ2YWxFeGFtcGxlXCI+XG4gICAgICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAqICAgPHNjcmlwdD5cbiAgICAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdpbnRlcnZhbEV4YW1wbGUnLCBbXSlcbiAgICAgICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGludGVydmFsJyxcbiAgICAgICogICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRpbnRlcnZhbCkge1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmZvcm1hdCA9ICdNL2QveXkgaDptbTpzcyBhJztcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAxMjA7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICB2YXIgc3RvcDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5maWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAvLyBEb24ndCBzdGFydCBhIG5ldyBmaWdodCBpZiB3ZSBhcmUgYWxyZWFkeSBmaWdodGluZ1xuICAgICAgKiAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgc3RvcCA9ICRpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgaWYgKCRzY29wZS5ibG9vZF8xID4gMCAmJiAkc2NvcGUuYmxvb2RfMiA+IDApIHtcbiAgICAgICogICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9ICRzY29wZS5ibG9vZF8xIC0gMztcbiAgICAgICogICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMiA9ICRzY29wZS5ibG9vZF8yIC0gNDtcbiAgICAgICogICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICogICAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgICAgIH1cbiAgICAgICogICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAqICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoc3RvcCkpIHtcbiAgICAgICogICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wKTtcbiAgICAgICogICAgICAgICAgICAgc3RvcCA9IHVuZGVmaW5lZDtcbiAgICAgICogICAgICAgICAgIH1cbiAgICAgICogICAgICAgICB9O1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICRzY29wZS5yZXNldEZpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9IDEwMDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgKiAgICAgICAgIH07XG4gICAgICAqXG4gICAgICAqICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWQgdG9vXG4gICAgICAqICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgfSk7XG4gICAgICAqICAgICAgIH1dKVxuICAgICAgKiAgICAgICAvLyBSZWdpc3RlciB0aGUgJ215Q3VycmVudFRpbWUnIGRpcmVjdGl2ZSBmYWN0b3J5IG1ldGhvZC5cbiAgICAgICogICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS5cbiAgICAgICogICAgICAgLmRpcmVjdGl2ZSgnbXlDdXJyZW50VGltZScsIFsnJGludGVydmFsJywgJ2RhdGVGaWx0ZXInLFxuICAgICAgKiAgICAgICAgIGZ1bmN0aW9uKCRpbnRlcnZhbCwgZGF0ZUZpbHRlcikge1xuICAgICAgKiAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi4gKGNvbXBpbGUgZnVuY3Rpb24gbm90IG5lZWRlZClcbiAgICAgICogICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICogICAgICAgICAgICAgdmFyIGZvcm1hdCwgIC8vIGRhdGUgZm9ybWF0XG4gICAgICAqICAgICAgICAgICAgICAgICBzdG9wVGltZTsgLy8gc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSB0aW1lIHVwZGF0ZXNcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gdXNlZCB0byB1cGRhdGUgdGhlIFVJXG4gICAgICAqICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0KGRhdGVGaWx0ZXIobmV3IERhdGUoKSwgZm9ybWF0KSk7XG4gICAgICAqICAgICAgICAgICAgIH1cbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gd2F0Y2ggdGhlIGV4cHJlc3Npb24sIGFuZCB1cGRhdGUgdGhlIFVJIG9uIGNoYW5nZS5cbiAgICAgICogICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLm15Q3VycmVudFRpbWUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7XG4gICAgICAqICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpO1xuICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgc3RvcFRpbWUgPSAkaW50ZXJ2YWwodXBkYXRlVGltZSwgMTAwMCk7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiBET00gZGVzdHJveSAocmVtb3ZhbCkgZXZlbnQsIGFuZCBjYW5jZWwgdGhlIG5leHQgVUkgdXBkYXRlXG4gICAgICAqICAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdXBkYXRpbmcgdGltZSBhZnRlciB0aGUgRE9NIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gICAgICAqICAgICAgICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wVGltZSk7XG4gICAgICAqICAgICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgIH1dKTtcbiAgICAgICogICA8L3NjcmlwdD5cbiAgICAgICpcbiAgICAgICogICA8ZGl2PlxuICAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICogICAgICAgRGF0ZSBmb3JtYXQ6IDxpbnB1dCBuZy1tb2RlbD1cImZvcm1hdFwiPiA8aHIvPlxuICAgICAgKiAgICAgICBDdXJyZW50IHRpbWUgaXM6IDxzcGFuIG15LWN1cnJlbnQtdGltZT1cImZvcm1hdFwiPjwvc3Bhbj5cbiAgICAgICogICAgICAgPGhyLz5cbiAgICAgICogICAgICAgQmxvb2QgMSA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMX19PC9mb250PlxuICAgICAgKiAgICAgICBCbG9vZCAyIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8yfX08L2ZvbnQ+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJmaWdodCgpXCI+RmlnaHQ8L2J1dHRvbj5cbiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1uZy1jbGljaz1cInN0b3BGaWdodCgpXCI+U3RvcEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJyZXNldEZpZ2h0KClcIj5yZXNldEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICA8L2Rpdj5cbiAgICAgICogICA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogPC9maWxlPlxuICAgICAgKiA8L2V4YW1wbGU+XG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIGludGVydmFsKGZuLCBkZWxheSwgY291bnQsIGludm9rZUFwcGx5KSB7XG4gICAgICB2YXIgc2V0SW50ZXJ2YWwgPSAkd2luZG93LnNldEludGVydmFsLFxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwgPSAkd2luZG93LmNsZWFySW50ZXJ2YWwsXG4gICAgICAgICAgaXRlcmF0aW9uID0gMCxcbiAgICAgICAgICBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICBjb3VudCA9IGlzRGVmaW5lZChjb3VudCkgPyBjb3VudCA6IDA7XG5cbiAgICAgIHByb21pc2UudGhlbihudWxsLCBudWxsLCBmbik7XG5cbiAgICAgIHByb21pc2UuJCRpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgZGVmZXJyZWQubm90aWZ5KGl0ZXJhdGlvbisrKTtcblxuICAgICAgICBpZiAoY291bnQgPiAwICYmIGl0ZXJhdGlvbiA+PSBjb3VudCkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoaXRlcmF0aW9uKTtcbiAgICAgICAgICBjbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTtcbiAgICAgICAgICBkZWxldGUgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2tpcEFwcGx5KSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuXG4gICAgICB9LCBkZWxheSk7XG5cbiAgICAgIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF0gPSBkZWZlcnJlZDtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJGludGVydmFsI2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7cHJvbWlzZX0gcHJvbWlzZSByZXR1cm5lZCBieSB0aGUgYCRpbnRlcnZhbGAgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFzayB3YXMgc3VjY2Vzc2Z1bGx5IGNhbmNlbGVkLlxuICAgICAgKi9cbiAgICBpbnRlcnZhbC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLiQkaW50ZXJ2YWxJZCBpbiBpbnRlcnZhbHMpIHtcbiAgICAgICAgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXS5yZWplY3QoJ2NhbmNlbGVkJyk7XG4gICAgICAgICR3aW5kb3cuY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7XG4gICAgICAgIGRlbGV0ZSBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGludGVydmFsO1xuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGxvY2FsZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogJGxvY2FsZSBzZXJ2aWNlIHByb3ZpZGVzIGxvY2FsaXphdGlvbiBydWxlcyBmb3IgdmFyaW91cyBBbmd1bGFyIGNvbXBvbmVudHMuIEFzIG9mIHJpZ2h0IG5vdyB0aGVcbiAqIG9ubHkgcHVibGljIGFwaSBpczpcbiAqXG4gKiAqIGBpZGAg4oCTIGB7c3RyaW5nfWAg4oCTIGxvY2FsZSBpZCBmb3JtYXR0ZWQgYXMgYGxhbmd1YWdlSWQtY291bnRyeUlkYCAoZS5nLiBgZW4tdXNgKVxuICovXG5mdW5jdGlvbiAkTG9jYWxlUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogJ2VuLXVzJyxcblxuICAgICAgTlVNQkVSX0ZPUk1BVFM6IHtcbiAgICAgICAgREVDSU1BTF9TRVA6ICcuJyxcbiAgICAgICAgR1JPVVBfU0VQOiAnLCcsXG4gICAgICAgIFBBVFRFUk5TOiBbXG4gICAgICAgICAgeyAvLyBEZWNpbWFsIFBhdHRlcm5cbiAgICAgICAgICAgIG1pbkludDogMSxcbiAgICAgICAgICAgIG1pbkZyYWM6IDAsXG4gICAgICAgICAgICBtYXhGcmFjOiAzLFxuICAgICAgICAgICAgcG9zUHJlOiAnJyxcbiAgICAgICAgICAgIHBvc1N1ZjogJycsXG4gICAgICAgICAgICBuZWdQcmU6ICctJyxcbiAgICAgICAgICAgIG5lZ1N1ZjogJycsXG4gICAgICAgICAgICBnU2l6ZTogMyxcbiAgICAgICAgICAgIGxnU2l6ZTogM1xuICAgICAgICAgIH0seyAvL0N1cnJlbmN5IFBhdHRlcm5cbiAgICAgICAgICAgIG1pbkludDogMSxcbiAgICAgICAgICAgIG1pbkZyYWM6IDIsXG4gICAgICAgICAgICBtYXhGcmFjOiAyLFxuICAgICAgICAgICAgcG9zUHJlOiAnXFx1MDBBNCcsXG4gICAgICAgICAgICBwb3NTdWY6ICcnLFxuICAgICAgICAgICAgbmVnUHJlOiAnKFxcdTAwQTQnLFxuICAgICAgICAgICAgbmVnU3VmOiAnKScsXG4gICAgICAgICAgICBnU2l6ZTogMyxcbiAgICAgICAgICAgIGxnU2l6ZTogM1xuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgQ1VSUkVOQ1lfU1lNOiAnJCdcbiAgICAgIH0sXG5cbiAgICAgIERBVEVUSU1FX0ZPUk1BVFM6IHtcbiAgICAgICAgTU9OVEg6XG4gICAgICAgICAgICAnSmFudWFyeSxGZWJydWFyeSxNYXJjaCxBcHJpbCxNYXksSnVuZSxKdWx5LEF1Z3VzdCxTZXB0ZW1iZXIsT2N0b2JlcixOb3ZlbWJlcixEZWNlbWJlcidcbiAgICAgICAgICAgIC5zcGxpdCgnLCcpLFxuICAgICAgICBTSE9SVE1PTlRIOiAgJ0phbixGZWIsTWFyLEFwcixNYXksSnVuLEp1bCxBdWcsU2VwLE9jdCxOb3YsRGVjJy5zcGxpdCgnLCcpLFxuICAgICAgICBEQVk6ICdTdW5kYXksTW9uZGF5LFR1ZXNkYXksV2VkbmVzZGF5LFRodXJzZGF5LEZyaWRheSxTYXR1cmRheScuc3BsaXQoJywnKSxcbiAgICAgICAgU0hPUlREQVk6ICdTdW4sTW9uLFR1ZSxXZWQsVGh1LEZyaSxTYXQnLnNwbGl0KCcsJyksXG4gICAgICAgIEFNUE1TOiBbJ0FNJywnUE0nXSxcbiAgICAgICAgbWVkaXVtOiAnTU1NIGQsIHkgaDptbTpzcyBhJyxcbiAgICAgICAgJ3Nob3J0JzogJ00vZC95eSBoOm1tIGEnLFxuICAgICAgICBmdWxsRGF0ZTogJ0VFRUUsIE1NTU0gZCwgeScsXG4gICAgICAgIGxvbmdEYXRlOiAnTU1NTSBkLCB5JyxcbiAgICAgICAgbWVkaXVtRGF0ZTogJ01NTSBkLCB5JyxcbiAgICAgICAgc2hvcnREYXRlOiAnTS9kL3l5JyxcbiAgICAgICAgbWVkaXVtVGltZTogJ2g6bW06c3MgYScsXG4gICAgICAgIHNob3J0VGltZTogJ2g6bW0gYSdcbiAgICAgIH0sXG5cbiAgICAgIHBsdXJhbENhdDogZnVuY3Rpb24obnVtKSB7XG4gICAgICAgIGlmIChudW0gPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gJ29uZSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdvdGhlcic7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIFBBVEhfTUFUQ0ggPSAvXihbXlxcPyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyxcbiAgICBERUZBVUxUX1BPUlRTID0geydodHRwJzogODAsICdodHRwcyc6IDQ0MywgJ2Z0cCc6IDIxfTtcbnZhciAkbG9jYXRpb25NaW5FcnIgPSBtaW5FcnIoJyRsb2NhdGlvbicpO1xuXG5cbi8qKlxuICogRW5jb2RlIHBhdGggdXNpbmcgZW5jb2RlVXJpU2VnbWVudCwgaWdub3JpbmcgZm9yd2FyZCBzbGFzaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBlbmNvZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcvJyksXG4gICAgICBpID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBzZWdtZW50c1tpXSA9IGVuY29kZVVyaVNlZ21lbnQoc2VnbWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBYnNvbHV0ZVVybChhYnNvbHV0ZVVybCwgbG9jYXRpb25PYmosIGFwcEJhc2UpIHtcbiAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUoYWJzb2x1dGVVcmwsIGFwcEJhc2UpO1xuXG4gIGxvY2F0aW9uT2JqLiQkcHJvdG9jb2wgPSBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIGxvY2F0aW9uT2JqLiQkaG9zdCA9IHBhcnNlZFVybC5ob3N0bmFtZTtcbiAgbG9jYXRpb25PYmouJCRwb3J0ID0gaW50KHBhcnNlZFVybC5wb3J0KSB8fCBERUZBVUxUX1BPUlRTW3BhcnNlZFVybC5wcm90b2NvbF0gfHwgbnVsbDtcbn1cblxuXG5mdW5jdGlvbiBwYXJzZUFwcFVybChyZWxhdGl2ZVVybCwgbG9jYXRpb25PYmosIGFwcEJhc2UpIHtcbiAgdmFyIHByZWZpeGVkID0gKHJlbGF0aXZlVXJsLmNoYXJBdCgwKSAhPT0gJy8nKTtcbiAgaWYgKHByZWZpeGVkKSB7XG4gICAgcmVsYXRpdmVVcmwgPSAnLycgKyByZWxhdGl2ZVVybDtcbiAgfVxuICB2YXIgbWF0Y2ggPSB1cmxSZXNvbHZlKHJlbGF0aXZlVXJsLCBhcHBCYXNlKTtcbiAgbG9jYXRpb25PYmouJCRwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KHByZWZpeGVkICYmIG1hdGNoLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nID9cbiAgICAgIG1hdGNoLnBhdGhuYW1lLnN1YnN0cmluZygxKSA6IG1hdGNoLnBhdGhuYW1lKTtcbiAgbG9jYXRpb25PYmouJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKG1hdGNoLnNlYXJjaCk7XG4gIGxvY2F0aW9uT2JqLiQkaGFzaCA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5oYXNoKTtcblxuICAvLyBtYWtlIHN1cmUgcGF0aCBzdGFydHMgd2l0aCAnLyc7XG4gIGlmIChsb2NhdGlvbk9iai4kJHBhdGggJiYgbG9jYXRpb25PYmouJCRwYXRoLmNoYXJBdCgwKSAhPSAnLycpIHtcbiAgICBsb2NhdGlvbk9iai4kJHBhdGggPSAnLycgKyBsb2NhdGlvbk9iai4kJHBhdGg7XG4gIH1cbn1cblxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmVnaW5cbiAqIEBwYXJhbSB7c3RyaW5nfSB3aG9sZVxuICogQHJldHVybnMge3N0cmluZ30gcmV0dXJucyB0ZXh0IGZyb20gd2hvbGUgYWZ0ZXIgYmVnaW4gb3IgdW5kZWZpbmVkIGlmIGl0IGRvZXMgbm90IGJlZ2luIHdpdGhcbiAqICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmVnaW5zV2l0aChiZWdpbiwgd2hvbGUpIHtcbiAgaWYgKHdob2xlLmluZGV4T2YoYmVnaW4pID09PSAwKSB7XG4gICAgcmV0dXJuIHdob2xlLnN1YnN0cihiZWdpbi5sZW5ndGgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaW5kZXggPT0gLTEgPyB1cmwgOiB1cmwuc3Vic3RyKDAsIGluZGV4KTtcbn1cblxuXG5mdW5jdGlvbiBzdHJpcEZpbGUodXJsKSB7XG4gIHJldHVybiB1cmwuc3Vic3RyKDAsIHN0cmlwSGFzaCh1cmwpLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cblxuLyogcmV0dXJuIHRoZSBzZXJ2ZXIgb25seSAoc2NoZW1lOi8vaG9zdDpwb3J0KSAqL1xuZnVuY3Rpb24gc2VydmVyQmFzZSh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJy8nLCB1cmwuaW5kZXhPZignLy8nKSArIDIpKTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSHRtbDVVcmwgcmVwcmVzZW50cyBhbiB1cmxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBIVE1MNSBtb2RlIGlzIGVuYWJsZWQgYW5kIHN1cHBvcnRlZFxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUHJlZml4IHVybCBwYXRoIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkh0bWw1VXJsKGFwcEJhc2UsIGJhc2VQcmVmaXgpIHtcbiAgdGhpcy4kJGh0bWw1ID0gdHJ1ZTtcbiAgYmFzZVByZWZpeCA9IGJhc2VQcmVmaXggfHwgJyc7XG4gIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpO1xuICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMsIGFwcEJhc2UpO1xuXG5cbiAgLyoqXG4gICAqIFBhcnNlIGdpdmVuIGh0bWw1IChyZWd1bGFyKSB1cmwgc3RyaW5nIGludG8gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhUTUw1IHVybFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7XG4gICAgdmFyIHBhdGhVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCk7XG4gICAgaWYgKCFpc1N0cmluZyhwYXRoVXJsKSkge1xuICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpcHRocHJmeCcsICdJbnZhbGlkIHVybCBcInswfVwiLCBtaXNzaW5nIHBhdGggcHJlZml4IFwiezF9XCIuJywgdXJsLFxuICAgICAgICAgIGFwcEJhc2VOb0ZpbGUpO1xuICAgIH1cblxuICAgIHBhcnNlQXBwVXJsKHBhdGhVcmwsIHRoaXMsIGFwcEJhc2UpO1xuXG4gICAgaWYgKCF0aGlzLiQkcGF0aCkge1xuICAgICAgdGhpcy4kJHBhdGggPSAnLyc7XG4gICAgfVxuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcbiAgfTtcblxuICAvKipcbiAgICogQ29tcG9zZSB1cmwgYW5kIHVwZGF0ZSBgYWJzVXJsYCBwcm9wZXJ0eVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSxcbiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoO1xuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlTm9GaWxlICsgdGhpcy4kJHVybC5zdWJzdHIoMSk7IC8vIGZpcnN0IGNoYXIgaXMgYWx3YXlzICcvJ1xuICB9O1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAocmVsSHJlZiAmJiByZWxIcmVmWzBdID09PSAnIycpIHtcbiAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgbGlua3MgdG8gaGFzaCBmcmFnbWVudHM6XG4gICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnRcbiAgICAgIHRoaXMuaGFzaChyZWxIcmVmLnNsaWNlKDEpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgYXBwVXJsLCBwcmV2QXBwVXJsO1xuICAgIHZhciByZXdyaXR0ZW5Vcmw7XG5cbiAgICBpZiAoKGFwcFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZSwgdXJsKSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJldkFwcFVybCA9IGFwcFVybDtcbiAgICAgIGlmICgoYXBwVXJsID0gYmVnaW5zV2l0aChiYXNlUHJlZml4LCBhcHBVcmwpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGUgKyAoYmVnaW5zV2l0aCgnLycsIGFwcFVybCkgfHwgYXBwVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2UgKyBwcmV2QXBwVXJsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKGFwcFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZSArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT0gdXJsICsgJy8nKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlO1xuICAgIH1cbiAgICBpZiAocmV3cml0dGVuVXJsKSB7XG4gICAgICB0aGlzLiQkcGFyc2UocmV3cml0dGVuVXJsKTtcbiAgICB9XG4gICAgcmV0dXJuICEhcmV3cml0dGVuVXJsO1xuICB9O1xufVxuXG5cbi8qKlxuICogTG9jYXRpb25IYXNoYmFuZ1VybCByZXByZXNlbnRzIHVybFxuICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIGRldmVsb3BlciBkb2Vzbid0IG9wdCBpbnRvIGh0bWw1IG1vZGUuXG4gKiBJdCBhbHNvIHNlcnZlcyBhcyB0aGUgYmFzZSBjbGFzcyBmb3IgaHRtbDUgbW9kZSBmYWxsYmFjayBvbiBsZWdhY3kgYnJvd3NlcnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdVcmwoYXBwQmFzZSwgaGFzaFByZWZpeCkge1xuICB2YXIgYXBwQmFzZU5vRmlsZSA9IHN0cmlwRmlsZShhcHBCYXNlKTtcblxuICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMsIGFwcEJhc2UpO1xuXG5cbiAgLyoqXG4gICAqIFBhcnNlIGdpdmVuIGhhc2hiYW5nIHVybCBpbnRvIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyB1cmxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciB3aXRob3V0QmFzZVVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZSwgdXJsKSB8fCBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCk7XG4gICAgdmFyIHdpdGhvdXRIYXNoVXJsID0gd2l0aG91dEJhc2VVcmwuY2hhckF0KDApID09ICcjJ1xuICAgICAgICA/IGJlZ2luc1dpdGgoaGFzaFByZWZpeCwgd2l0aG91dEJhc2VVcmwpXG4gICAgICAgIDogKHRoaXMuJCRodG1sNSlcbiAgICAgICAgICA/IHdpdGhvdXRCYXNlVXJsXG4gICAgICAgICAgOiAnJztcblxuICAgIGlmICghaXNTdHJpbmcod2l0aG91dEhhc2hVcmwpKSB7XG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2loc2hwcmZ4JywgJ0ludmFsaWQgdXJsIFwiezB9XCIsIG1pc3NpbmcgaGFzaCBwcmVmaXggXCJ7MX1cIi4nLCB1cmwsXG4gICAgICAgICAgaGFzaFByZWZpeCk7XG4gICAgfVxuICAgIHBhcnNlQXBwVXJsKHdpdGhvdXRIYXNoVXJsLCB0aGlzLCBhcHBCYXNlKTtcblxuICAgIHRoaXMuJCRwYXRoID0gcmVtb3ZlV2luZG93c0RyaXZlTmFtZSh0aGlzLiQkcGF0aCwgd2l0aG91dEhhc2hVcmwsIGFwcEJhc2UpO1xuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcblxuICAgIC8qXG4gICAgICogSW4gV2luZG93cywgb24gYW4gYW5jaG9yIG5vZGUgb24gZG9jdW1lbnRzIGxvYWRlZCBmcm9tXG4gICAgICogdGhlIGZpbGVzeXN0ZW0sIHRoZSBicm93c2VyIHdpbGwgcmV0dXJuIGEgcGF0aG5hbWVcbiAgICAgKiBwcmVmaXhlZCB3aXRoIHRoZSBkcml2ZSBuYW1lICgnL0M6L3BhdGgnKSB3aGVuIGFcbiAgICAgKiBwYXRobmFtZSB3aXRob3V0IGEgZHJpdmUgaXMgc2V0OlxuICAgICAqICAqIGEuc2V0QXR0cmlidXRlKCdocmVmJywgJy9mb28nKVxuICAgICAqICAgKiBhLnBhdGhuYW1lID09PSAnL0M6L2ZvbycgLy90cnVlXG4gICAgICpcbiAgICAgKiBJbnNpZGUgb2YgQW5ndWxhciwgd2UncmUgYWx3YXlzIHVzaW5nIHBhdGhuYW1lcyB0aGF0XG4gICAgICogZG8gbm90IGluY2x1ZGUgZHJpdmUgbmFtZXMgZm9yIHJvdXRpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlV2luZG93c0RyaXZlTmFtZShwYXRoLCB1cmwsIGJhc2UpIHtcbiAgICAgIC8qXG4gICAgICBNYXRjaGVzIHBhdGhzIGZvciBmaWxlIHByb3RvY29sIG9uIHdpbmRvd3MsXG4gICAgICBzdWNoIGFzIC9DOi9mb28vYmFyLCBhbmQgY2FwdHVyZXMgb25seSAvZm9vL2Jhci5cbiAgICAgICovXG4gICAgICB2YXIgd2luZG93c0ZpbGVQYXRoRXhwID0gL15cXC9bQS1aXTooXFwvLiopLztcblxuICAgICAgdmFyIGZpcnN0UGF0aFNlZ21lbnRNYXRjaDtcblxuICAgICAgLy9HZXQgdGhlIHJlbGF0aXZlIHBhdGggZnJvbSB0aGUgaW5wdXQgVVJMLlxuICAgICAgaWYgKHVybC5pbmRleE9mKGJhc2UpID09PSAwKSB7XG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKGJhc2UsICcnKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGlucHV0IFVSTCBpbnRlbnRpb25hbGx5IGNvbnRhaW5zIGEgZmlyc3QgcGF0aCBzZWdtZW50IHRoYXQgZW5kcyB3aXRoIGEgY29sb24uXG4gICAgICBpZiAod2luZG93c0ZpbGVQYXRoRXhwLmV4ZWModXJsKSkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH1cblxuICAgICAgZmlyc3RQYXRoU2VnbWVudE1hdGNoID0gd2luZG93c0ZpbGVQYXRoRXhwLmV4ZWMocGF0aCk7XG4gICAgICByZXR1cm4gZmlyc3RQYXRoU2VnbWVudE1hdGNoID8gZmlyc3RQYXRoU2VnbWVudE1hdGNoWzFdIDogcGF0aDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXBvc2UgaGFzaGJhbmcgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7XG5cbiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDtcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArICh0aGlzLiQkdXJsID8gaGFzaFByZWZpeCArIHRoaXMuJCR1cmwgOiAnJyk7XG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChzdHJpcEhhc2goYXBwQmFzZSkgPT0gc3RyaXBIYXNoKHVybCkpIHtcbiAgICAgIHRoaXMuJCRwYXJzZSh1cmwpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyB1cmxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBodG1sNSBoaXN0b3J5IGFwaSBpcyBlbmFibGVkIGJ1dCB0aGUgYnJvd3NlclxuICogZG9lcyBub3Qgc3VwcG9ydCBpdC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwoYXBwQmFzZSwgaGFzaFByZWZpeCkge1xuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICBMb2NhdGlvbkhhc2hiYW5nVXJsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJld3JpdHRlblVybDtcbiAgICB2YXIgYXBwVXJsO1xuXG4gICAgaWYgKGFwcEJhc2UgPT0gc3RyaXBIYXNoKHVybCkpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IHVybDtcbiAgICB9IGVsc2UgaWYgKChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT09IHVybCArICcvJykge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICB9XG4gICAgaWYgKHJld3JpdHRlblVybCkge1xuICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgfVxuICAgIHJldHVybiAhIXJld3JpdHRlblVybDtcbiAgfTtcblxuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgLy8gaW5jbHVkZSBoYXNoUHJlZml4IGluICQkYWJzVXJsIHdoZW4gJCR1cmwgaXMgZW1wdHkgc28gSUU4ICYgOSBkbyBub3QgcmVsb2FkIHBhZ2UgYmVjYXVzZSBvZiByZW1vdmFsIG9mICcjJ1xuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIHRoaXMuJCR1cmw7XG4gIH07XG5cbn1cblxuXG52YXIgbG9jYXRpb25Qcm90b3R5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEFyZSB3ZSBpbiBodG1sNSBtb2RlP1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgJCRodG1sNTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEhhcyBhbnkgY2hhbmdlIGJlZW4gcmVwbGFjaW5nP1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgJCRyZXBsYWNlOiBmYWxzZSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jYWJzVXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGZ1bGwgdXJsIHJlcHJlc2VudGF0aW9uIHdpdGggYWxsIHNlZ21lbnRzIGVuY29kZWQgYWNjb3JkaW5nIHRvIHJ1bGVzIHNwZWNpZmllZCBpblxuICAgKiBbUkZDIDM5ODZdKGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0KS5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBmdWxsIHVybFxuICAgKi9cbiAgYWJzVXJsOiBsb2NhdGlvbkdldHRlcignJCRhYnNVcmwnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiB1cmwgKGUuZy4gYC9wYXRoP2E9YiNoYXNoYCkgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgcGF0aCwgc2VhcmNoIGFuZCBoYXNoLCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHVybCBOZXcgdXJsIHdpdGhvdXQgYmFzZSBwcmVmaXggKGUuZy4gYC9wYXRoP2E9YiNoYXNoYClcbiAgICogQHJldHVybiB7c3RyaW5nfSB1cmxcbiAgICovXG4gIHVybDogZnVuY3Rpb24odXJsKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHVybCkpXG4gICAgICByZXR1cm4gdGhpcy4kJHVybDtcblxuICAgIHZhciBtYXRjaCA9IFBBVEhfTUFUQ0guZXhlYyh1cmwpO1xuICAgIGlmIChtYXRjaFsxXSkgdGhpcy5wYXRoKGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSkpO1xuICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSkgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpO1xuICAgIHRoaXMuaGFzaChtYXRjaFs1XSB8fCAnJyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcHJvdG9jb2xcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gcHJvdG9jb2wgb2YgY3VycmVudCB1cmwuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcHJvdG9jb2wgb2YgY3VycmVudCB1cmxcbiAgICovXG4gIHByb3RvY29sOiBsb2NhdGlvbkdldHRlcignJCRwcm90b2NvbCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNob3N0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGhvc3Qgb2YgY3VycmVudCB1cmwuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gaG9zdCBvZiBjdXJyZW50IHVybC5cbiAgICovXG4gIGhvc3Q6IGxvY2F0aW9uR2V0dGVyKCckJGhvc3QnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcG9ydFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgdXJsLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHBvcnRcbiAgICovXG4gIHBvcnQ6IGxvY2F0aW9uR2V0dGVyKCckJHBvcnQnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcGF0aFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gcGF0aCBvZiBjdXJyZW50IHVybCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSBwYXRoIHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqIE5vdGU6IFBhdGggc2hvdWxkIGFsd2F5cyBiZWdpbiB3aXRoIGZvcndhcmQgc2xhc2ggKC8pLCB0aGlzIG1ldGhvZCB3aWxsIGFkZCB0aGUgZm9yd2FyZCBzbGFzaFxuICAgKiBpZiBpdCBpcyBtaXNzaW5nLlxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IHBhdGggTmV3IHBhdGhcbiAgICogQHJldHVybiB7c3RyaW5nfSBwYXRoXG4gICAqL1xuICBwYXRoOiBsb2NhdGlvbkdldHRlclNldHRlcignJCRwYXRoJywgZnVuY3Rpb24ocGF0aCkge1xuICAgIHBhdGggPSBwYXRoICE9PSBudWxsID8gcGF0aC50b1N0cmluZygpIDogJyc7XG4gICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xuICB9KSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jc2VhcmNoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBzZWFyY2ggcGFydCAoYXMgb2JqZWN0KSBvZiBjdXJyZW50IHVybCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSBzZWFyY2ggcGFydCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHNlYXJjaE9iamVjdCA9ICRsb2NhdGlvbi5zZWFyY2goKTtcbiAgICogLy8gPT4ge2ZvbzogJ2JhcicsIGJhejogJ3hveG8nfVxuICAgKlxuICAgKlxuICAgKiAvLyBzZXQgZm9vIHRvICd5aXBlZSdcbiAgICogJGxvY2F0aW9uLnNlYXJjaCgnZm9vJywgJ3lpcGVlJyk7XG4gICAqIC8vID0+ICRsb2NhdGlvblxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmc+fE9iamVjdC48QXJyYXkuPHN0cmluZz4+fSBzZWFyY2ggTmV3IHNlYXJjaCBwYXJhbXMgLSBzdHJpbmcgb3JcbiAgICogaGFzaCBvYmplY3QuXG4gICAqXG4gICAqIFdoZW4gY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhlIG1ldGhvZCBhY3RzIGFzIGEgc2V0dGVyLCBzZXR0aW5nIHRoZSBgc2VhcmNoYCBjb21wb25lbnRcbiAgICogb2YgYCRsb2NhdGlvbmAgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAgICpcbiAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgaGFzaCBvYmplY3QgY29udGFpbmluZyBhbiBhcnJheSBvZiB2YWx1ZXMsIHRoZXNlIHZhbHVlcyB3aWxsIGJlIGVuY29kZWRcbiAgICogYXMgZHVwbGljYXRlIHNlYXJjaCBwYXJhbWV0ZXJzIGluIHRoZSB1cmwuXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xOdW1iZXJ8QXJyYXk8c3RyaW5nPnxib29sZWFuKT19IHBhcmFtVmFsdWUgSWYgYHNlYXJjaGAgaXMgYSBzdHJpbmcgb3IgbnVtYmVyLCB0aGVuIGBwYXJhbVZhbHVlYFxuICAgKiB3aWxsIG92ZXJyaWRlIG9ubHkgYSBzaW5nbGUgc2VhcmNoIHByb3BlcnR5LlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYW4gYXJyYXksIGl0IHdpbGwgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IG9mIHRoZSBgc2VhcmNoYCBjb21wb25lbnQgb2ZcbiAgICogYCRsb2NhdGlvbmAgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgbnVsbGAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGRlbGV0ZWQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgdHJ1ZWAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGFkZGVkIHdpdGggbm9cbiAgICogdmFsdWUgbm9yIHRyYWlsaW5nIGVxdWFsIHNpZ24uXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gSWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgdGhlIHBhcnNlZCBgc2VhcmNoYCBvYmplY3QuIElmIGNhbGxlZCB3aXRoXG4gICAqIG9uZSBvciBtb3JlIGFyZ3VtZW50cyByZXR1cm5zIGAkbG9jYXRpb25gIG9iamVjdCBpdHNlbGYuXG4gICAqL1xuICBzZWFyY2g6IGZ1bmN0aW9uKHNlYXJjaCwgcGFyYW1WYWx1ZSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy4kJHNlYXJjaDtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaWYgKGlzU3RyaW5nKHNlYXJjaCkgfHwgaXNOdW1iZXIoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IHNlYXJjaC50b1N0cmluZygpO1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKHNlYXJjaCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IGNvcHkoc2VhcmNoLCB7fSk7XG4gICAgICAgICAgLy8gcmVtb3ZlIG9iamVjdCB1bmRlZmluZWQgb3IgbnVsbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgZm9yRWFjaChzZWFyY2gsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSBkZWxldGUgc2VhcmNoW2tleV07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gc2VhcmNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaXNyY2hhcmcnLFxuICAgICAgICAgICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBgJGxvY2F0aW9uI3NlYXJjaCgpYCBjYWxsIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHBhcmFtVmFsdWUpIHx8IHBhcmFtVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy4kJHNlYXJjaFtzZWFyY2hdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2hbc2VhcmNoXSA9IHBhcmFtVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNoYXNoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBoYXNoIGZyYWdtZW50IHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBoYXNoIE5ldyBoYXNoIGZyYWdtZW50XG4gICAqIEByZXR1cm4ge3N0cmluZ30gaGFzaFxuICAgKi9cbiAgaGFzaDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkaGFzaCcsIGZ1bmN0aW9uKGhhc2gpIHtcbiAgICByZXR1cm4gaGFzaCAhPT0gbnVsbCA/IGhhc2gudG9TdHJpbmcoKSA6ICcnO1xuICB9KSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcmVwbGFjZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSWYgY2FsbGVkLCBhbGwgY2hhbmdlcyB0byAkbG9jYXRpb24gZHVyaW5nIGN1cnJlbnQgYCRkaWdlc3RgIHdpbGwgYmUgcmVwbGFjaW5nIGN1cnJlbnQgaGlzdG9yeVxuICAgKiByZWNvcmQsIGluc3RlYWQgb2YgYWRkaW5nIG5ldyBvbmUuXG4gICAqL1xuICByZXBsYWNlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkcmVwbGFjZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbmZvckVhY2goW0xvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsLCBMb2NhdGlvbkhhc2hiYW5nVXJsLCBMb2NhdGlvbkh0bWw1VXJsXSwgZnVuY3Rpb24oTG9jYXRpb24pIHtcbiAgTG9jYXRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShsb2NhdGlvblByb3RvdHlwZSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3N0YXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiB0aGUgaGlzdG9yeSBzdGF0ZSBvYmplY3Qgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgdGhlIGhpc3Rvcnkgc3RhdGUgb2JqZWN0IHdoZW4gY2FsbGVkIHdpdGggb25lIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKiBUaGUgc3RhdGUgb2JqZWN0IGlzIGxhdGVyIHBhc3NlZCB0byBgcHVzaFN0YXRlYCBvciBgcmVwbGFjZVN0YXRlYC5cbiAgICpcbiAgICogTk9URTogVGhpcyBtZXRob2QgaXMgc3VwcG9ydGVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nXG4gICAqIHRoZSBIVE1MNSBIaXN0b3J5IEFQSSAoaS5lLiBtZXRob2RzIGBwdXNoU3RhdGVgIGFuZCBgcmVwbGFjZVN0YXRlYCkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnRcbiAgICogb2xkZXIgYnJvd3NlcnMgKGxpa2UgSUU5IG9yIEFuZHJvaWQgPCA0LjApLCBkb24ndCB1c2UgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGUgU3RhdGUgb2JqZWN0IGZvciBwdXNoU3RhdGUgb3IgcmVwbGFjZVN0YXRlXG4gICAqIEByZXR1cm4ge29iamVjdH0gc3RhdGVcbiAgICovXG4gIExvY2F0aW9uLnByb3RvdHlwZS5zdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgcmV0dXJuIHRoaXMuJCRzdGF0ZTtcblxuICAgIGlmIChMb2NhdGlvbiAhPT0gTG9jYXRpb25IdG1sNVVybCB8fCAhdGhpcy4kJGh0bWw1KSB7XG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ25vc3RhdGUnLCAnSGlzdG9yeSBBUEkgc3RhdGUgc3VwcG9ydCBpcyBhdmFpbGFibGUgb25seSAnICtcbiAgICAgICAgJ2luIEhUTUw1IG1vZGUgYW5kIG9ubHkgaW4gYnJvd3NlcnMgc3VwcG9ydGluZyBIVE1MNSBIaXN0b3J5IEFQSScpO1xuICAgIH1cbiAgICAvLyBUaGUgdXNlciBtaWdodCBtb2RpZnkgYHN0YXRlT2JqZWN0YCBhZnRlciBpbnZva2luZyBgJGxvY2F0aW9uLnN0YXRlKHN0YXRlT2JqZWN0KWBcbiAgICAvLyBidXQgd2UncmUgY2hhbmdpbmcgdGhlICQkc3RhdGUgcmVmZXJlbmNlIHRvICRicm93c2VyLnN0YXRlKCkgZHVyaW5nIHRoZSAkZGlnZXN0XG4gICAgLy8gc28gdGhlIG1vZGlmaWNhdGlvbiB3aW5kb3cgaXMgbmFycm93LlxuICAgIHRoaXMuJCRzdGF0ZSA9IGlzVW5kZWZpbmVkKHN0YXRlKSA/IG51bGwgOiBzdGF0ZTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cblxuZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXIocHJvcGVydHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcbiAgfTtcbn1cblxuXG5mdW5jdGlvbiBsb2NhdGlvbkdldHRlclNldHRlcihwcm9wZXJ0eSwgcHJlcHJvY2Vzcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuXG4gICAgdGhpc1twcm9wZXJ0eV0gPSBwcmVwcm9jZXNzKHZhbHVlKTtcbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGxvY2F0aW9uXG4gKlxuICogQHJlcXVpcmVzICRyb290RWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlICRsb2NhdGlvbiBzZXJ2aWNlIHBhcnNlcyB0aGUgVVJMIGluIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyIChiYXNlZCBvbiB0aGVcbiAqIFt3aW5kb3cubG9jYXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL3dpbmRvdy5sb2NhdGlvbikpIGFuZCBtYWtlcyB0aGUgVVJMXG4gKiBhdmFpbGFibGUgdG8geW91ciBhcHBsaWNhdGlvbi4gQ2hhbmdlcyB0byB0aGUgVVJMIGluIHRoZSBhZGRyZXNzIGJhciBhcmUgcmVmbGVjdGVkIGludG9cbiAqICRsb2NhdGlvbiBzZXJ2aWNlIGFuZCBjaGFuZ2VzIHRvICRsb2NhdGlvbiBhcmUgcmVmbGVjdGVkIGludG8gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIuXG4gKlxuICogKipUaGUgJGxvY2F0aW9uIHNlcnZpY2U6KipcbiAqXG4gKiAtIEV4cG9zZXMgdGhlIGN1cnJlbnQgVVJMIGluIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLCBzbyB5b3UgY2FuXG4gKiAgIC0gV2F0Y2ggYW5kIG9ic2VydmUgdGhlIFVSTC5cbiAqICAgLSBDaGFuZ2UgdGhlIFVSTC5cbiAqIC0gU3luY2hyb25pemVzIHRoZSBVUkwgd2l0aCB0aGUgYnJvd3NlciB3aGVuIHRoZSB1c2VyXG4gKiAgIC0gQ2hhbmdlcyB0aGUgYWRkcmVzcyBiYXIuXG4gKiAgIC0gQ2xpY2tzIHRoZSBiYWNrIG9yIGZvcndhcmQgYnV0dG9uIChvciBjbGlja3MgYSBIaXN0b3J5IGxpbmspLlxuICogICAtIENsaWNrcyBvbiBhIGxpbmsuXG4gKiAtIFJlcHJlc2VudHMgdGhlIFVSTCBvYmplY3QgYXMgYSBzZXQgb2YgbWV0aG9kcyAocHJvdG9jb2wsIGhvc3QsIHBvcnQsIHBhdGgsIHNlYXJjaCwgaGFzaCkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHtAbGluayBndWlkZS8kbG9jYXRpb24gRGV2ZWxvcGVyIEd1aWRlOiBVc2luZyAkbG9jYXRpb259XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRsb2NhdGlvblByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGUgYCRsb2NhdGlvblByb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBkZWVwIGxpbmtpbmcgcGF0aHMgYXJlIHN0b3JlZC5cbiAqL1xuZnVuY3Rpb24gJExvY2F0aW9uUHJvdmlkZXIoKSB7XG4gIHZhciBoYXNoUHJlZml4ID0gJycsXG4gICAgICBodG1sNU1vZGUgPSB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICByZXF1aXJlQmFzZTogdHJ1ZSxcbiAgICAgICAgcmV3cml0ZUxpbmtzOiB0cnVlXG4gICAgICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvblByb3ZpZGVyI2hhc2hQcmVmaXhcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcHJlZml4IFByZWZpeCBmb3IgaGFzaCBwYXJ0IChjb250YWluaW5nIHBhdGggYW5kIHNlYXJjaClcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuaGFzaFByZWZpeCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIGlmIChpc0RlZmluZWQocHJlZml4KSkge1xuICAgICAgaGFzaFByZWZpeCA9IHByZWZpeDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGFzaFByZWZpeDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXIjaHRtbDVNb2RlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBAcGFyYW0geyhib29sZWFufE9iamVjdCk9fSBtb2RlIElmIGJvb2xlYW4sIHNldHMgYGh0bWw1TW9kZS5lbmFibGVkYCB0byB2YWx1ZS5cbiAgICogICBJZiBvYmplY3QsIHNldHMgYGVuYWJsZWRgLCBgcmVxdWlyZUJhc2VgIGFuZCBgcmV3cml0ZUxpbmtzYCB0byByZXNwZWN0aXZlIHZhbHVlcy4gU3VwcG9ydGVkXG4gICAqICAgcHJvcGVydGllczpcbiAgICogICAtICoqZW5hYmxlZCoqIOKAkyBge2Jvb2xlYW59YCDigJMgKGRlZmF1bHQ6IGZhbHNlKSBJZiB0cnVlLCB3aWxsIHJlbHkgb24gYGhpc3RvcnkucHVzaFN0YXRlYCB0b1xuICAgKiAgICAgY2hhbmdlIHVybHMgd2hlcmUgc3VwcG9ydGVkLiBXaWxsIGZhbGwgYmFjayB0byBoYXNoLXByZWZpeGVkIHBhdGhzIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90XG4gICAqICAgICBzdXBwb3J0IGBwdXNoU3RhdGVgLlxuICAgKiAgIC0gKipyZXF1aXJlQmFzZSoqIC0gYHtib29sZWFufWAgLSAoZGVmYXVsdDogYHRydWVgKSBXaGVuIGh0bWw1TW9kZSBpcyBlbmFibGVkLCBzcGVjaWZpZXNcbiAgICogICAgIHdoZXRoZXIgb3Igbm90IGEgPGJhc2U+IHRhZyBpcyByZXF1aXJlZCB0byBiZSBwcmVzZW50LiBJZiBgZW5hYmxlZGAgYW5kIGByZXF1aXJlQmFzZWAgYXJlXG4gICAqICAgICB0cnVlLCBhbmQgYSBiYXNlIHRhZyBpcyBub3QgcHJlc2VudCwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24gd2hlbiBgJGxvY2F0aW9uYCBpcyBpbmplY3RlZC5cbiAgICogICAgIFNlZSB0aGUge0BsaW5rIGd1aWRlLyRsb2NhdGlvbiAkbG9jYXRpb24gZ3VpZGUgZm9yIG1vcmUgaW5mb3JtYXRpb259XG4gICAqICAgLSAqKnJld3JpdGVMaW5rcyoqIC0gYHtib29sZWFufWAgLSAoZGVmYXVsdDogYHRydWVgKSBXaGVuIGh0bWw1TW9kZSBpcyBlbmFibGVkLFxuICAgKiAgICAgZW5hYmxlcy9kaXNhYmxlcyB1cmwgcmV3cml0aW5nIGZvciByZWxhdGl2ZSBsaW5rcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gaHRtbDVNb2RlIG9iamVjdCBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5odG1sNU1vZGUgPSBmdW5jdGlvbihtb2RlKSB7XG4gICAgaWYgKGlzQm9vbGVhbihtb2RlKSkge1xuICAgICAgaHRtbDVNb2RlLmVuYWJsZWQgPSBtb2RlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChtb2RlKSkge1xuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUuZW5hYmxlZCkpIHtcbiAgICAgICAgaHRtbDVNb2RlLmVuYWJsZWQgPSBtb2RlLmVuYWJsZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5yZXF1aXJlQmFzZSkpIHtcbiAgICAgICAgaHRtbDVNb2RlLnJlcXVpcmVCYXNlID0gbW9kZS5yZXF1aXJlQmFzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLnJld3JpdGVMaW5rcykpIHtcbiAgICAgICAgaHRtbDVNb2RlLnJld3JpdGVMaW5rcyA9IG1vZGUucmV3cml0ZUxpbmtzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGh0bWw1TW9kZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBldmVudFxuICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3RhcnRcbiAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQnJvYWRjYXN0ZWQgYmVmb3JlIGEgVVJMIHdpbGwgY2hhbmdlLlxuICAgKlxuICAgKiBUaGlzIGNoYW5nZSBjYW4gYmUgcHJldmVudGVkIGJ5IGNhbGxpbmdcbiAgICogYHByZXZlbnREZWZhdWx0YCBtZXRob2Qgb2YgdGhlIGV2ZW50LiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBmb3IgbW9yZVxuICAgKiBkZXRhaWxzIGFib3V0IGV2ZW50IG9iamVjdC4gVXBvbiBzdWNjZXNzZnVsIGNoYW5nZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MgJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc30gaXMgZmlyZWQuXG4gICAqXG4gICAqIFRoZSBgbmV3U3RhdGVgIGFuZCBgb2xkU3RhdGVgIHBhcmFtZXRlcnMgbWF5IGJlIGRlZmluZWQgb25seSBpbiBIVE1MNSBtb2RlIGFuZCB3aGVuXG4gICAqIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBIVE1MNSBIaXN0b3J5IEFQSS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VXJsIE5ldyBVUkxcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZXdTdGF0ZSBOZXcgaGlzdG9yeSBzdGF0ZSBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRTdGF0ZSBIaXN0b3J5IHN0YXRlIG9iamVjdCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZXZlbnRcbiAgICogQG5hbWUgJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NcbiAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQnJvYWRjYXN0ZWQgYWZ0ZXIgYSBVUkwgd2FzIGNoYW5nZWQuXG4gICAqXG4gICAqIFRoZSBgbmV3U3RhdGVgIGFuZCBgb2xkU3RhdGVgIHBhcmFtZXRlcnMgbWF5IGJlIGRlZmluZWQgb25seSBpbiBIVE1MNSBtb2RlIGFuZCB3aGVuXG4gICAqIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBIVE1MNSBIaXN0b3J5IEFQSS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VXJsIE5ldyBVUkxcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZXdTdGF0ZSBOZXcgaGlzdG9yeSBzdGF0ZSBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRTdGF0ZSBIaXN0b3J5IHN0YXRlIG9iamVjdCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqL1xuXG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckc25pZmZlcicsICckcm9vdEVsZW1lbnQnLFxuICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgJGJyb3dzZXIsICRzbmlmZmVyLCAkcm9vdEVsZW1lbnQpIHtcbiAgICB2YXIgJGxvY2F0aW9uLFxuICAgICAgICBMb2NhdGlvbk1vZGUsXG4gICAgICAgIGJhc2VIcmVmID0gJGJyb3dzZXIuYmFzZUhyZWYoKSwgLy8gaWYgYmFzZVtocmVmXSBpcyB1bmRlZmluZWQsIGl0IGRlZmF1bHRzIHRvICcnXG4gICAgICAgIGluaXRpYWxVcmwgPSAkYnJvd3Nlci51cmwoKSxcbiAgICAgICAgYXBwQmFzZTtcblxuICAgIGlmIChodG1sNU1vZGUuZW5hYmxlZCkge1xuICAgICAgaWYgKCFiYXNlSHJlZiAmJiBodG1sNU1vZGUucmVxdWlyZUJhc2UpIHtcbiAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdub2Jhc2UnLFxuICAgICAgICAgIFwiJGxvY2F0aW9uIGluIEhUTUw1IG1vZGUgcmVxdWlyZXMgYSA8YmFzZT4gdGFnIHRvIGJlIHByZXNlbnQhXCIpO1xuICAgICAgfVxuICAgICAgYXBwQmFzZSA9IHNlcnZlckJhc2UoaW5pdGlhbFVybCkgKyAoYmFzZUhyZWYgfHwgJy8nKTtcbiAgICAgIExvY2F0aW9uTW9kZSA9ICRzbmlmZmVyLmhpc3RvcnkgPyBMb2NhdGlvbkh0bWw1VXJsIDogTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwcEJhc2UgPSBzdHJpcEhhc2goaW5pdGlhbFVybCk7XG4gICAgICBMb2NhdGlvbk1vZGUgPSBMb2NhdGlvbkhhc2hiYW5nVXJsO1xuICAgIH1cbiAgICAkbG9jYXRpb24gPSBuZXcgTG9jYXRpb25Nb2RlKGFwcEJhc2UsICcjJyArIGhhc2hQcmVmaXgpO1xuICAgICRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChpbml0aWFsVXJsLCBpbml0aWFsVXJsKTtcblxuICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcblxuICAgIHZhciBJR05PUkVfVVJJX1JFR0VYUCA9IC9eXFxzKihqYXZhc2NyaXB0fG1haWx0byk6L2k7XG5cbiAgICBmdW5jdGlvbiBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAgICB2YXIgb2xkU3RhdGUgPSAkbG9jYXRpb24uJCRzdGF0ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgICRicm93c2VyLnVybCh1cmwsIHJlcGxhY2UsIHN0YXRlKTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgJGxvY2F0aW9uLnN0YXRlKCkgcmV0dXJucyByZWZlcmVudGlhbGx5IGlkZW50aWNhbCAobm90IGp1c3QgZGVlcGx5IGVxdWFsKVxuICAgICAgICAvLyBzdGF0ZSBvYmplY3Q7IHRoaXMgbWFrZXMgcG9zc2libGUgcXVpY2sgY2hlY2tpbmcgaWYgdGhlIHN0YXRlIGNoYW5nZWQgaW4gdGhlIGRpZ2VzdFxuICAgICAgICAvLyBsb29wLiBDaGVja2luZyBkZWVwIGVxdWFsaXR5IHdvdWxkIGJlIHRvbyBleHBlbnNpdmUuXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gUmVzdG9yZSBvbGQgdmFsdWVzIGlmIHB1c2hTdGF0ZSBmYWlsc1xuICAgICAgICAkbG9jYXRpb24udXJsKG9sZFVybCk7XG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG5cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkcm9vdEVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIC8vIFRPRE8odm9qdGEpOiByZXdyaXRlIGxpbmsgd2hlbiBvcGVuaW5nIGluIG5ldyB0YWIvd2luZG93IChpbiBsZWdhY3kgYnJvd3NlcilcbiAgICAgIC8vIGN1cnJlbnRseSB3ZSBvcGVuIG5pY2UgdXJsIGxpbmsgYW5kIHJlZGlyZWN0IHRoZW5cblxuICAgICAgaWYgKCFodG1sNU1vZGUucmV3cml0ZUxpbmtzIHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC53aGljaCA9PSAyKSByZXR1cm47XG5cbiAgICAgIHZhciBlbG0gPSBqcUxpdGUoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgLy8gdHJhdmVyc2UgdGhlIERPTSB1cCB0byBmaW5kIGZpcnN0IEEgdGFnXG4gICAgICB3aGlsZSAobm9kZU5hbWVfKGVsbVswXSkgIT09ICdhJykge1xuICAgICAgICAvLyBpZ25vcmUgcmV3cml0aW5nIGlmIG5vIEEgdGFnIChyZWFjaGVkIHJvb3QgZWxlbWVudCwgb3Igbm8gcGFyZW50IC0gcmVtb3ZlZCBmcm9tIGRvY3VtZW50KVxuICAgICAgICBpZiAoZWxtWzBdID09PSAkcm9vdEVsZW1lbnRbMF0gfHwgIShlbG0gPSBlbG0ucGFyZW50KCkpWzBdKSByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhYnNIcmVmID0gZWxtLnByb3AoJ2hyZWYnKTtcbiAgICAgIC8vIGdldCB0aGUgYWN0dWFsIGhyZWYgYXR0cmlidXRlIC0gc2VlXG4gICAgICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZGQzNDcxNDgodj12cy44NSkuYXNweFxuICAgICAgdmFyIHJlbEhyZWYgPSBlbG0uYXR0cignaHJlZicpIHx8IGVsbS5hdHRyKCd4bGluazpocmVmJyk7XG5cbiAgICAgIGlmIChpc09iamVjdChhYnNIcmVmKSAmJiBhYnNIcmVmLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHtcbiAgICAgICAgLy8gU1ZHQW5pbWF0ZWRTdHJpbmcuYW5pbVZhbCBzaG91bGQgYmUgaWRlbnRpY2FsIHRvIFNWR0FuaW1hdGVkU3RyaW5nLmJhc2VWYWwsIHVubGVzcyBkdXJpbmdcbiAgICAgICAgLy8gYW4gYW5pbWF0aW9uLlxuICAgICAgICBhYnNIcmVmID0gdXJsUmVzb2x2ZShhYnNIcmVmLmFuaW1WYWwpLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIC8vIElnbm9yZSB3aGVuIHVybCBpcyBzdGFydGVkIHdpdGggamF2YXNjcmlwdDogb3IgbWFpbHRvOlxuICAgICAgaWYgKElHTk9SRV9VUklfUkVHRVhQLnRlc3QoYWJzSHJlZikpIHJldHVybjtcblxuICAgICAgaWYgKGFic0hyZWYgJiYgIWVsbS5hdHRyKCd0YXJnZXQnKSAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgaWYgKCRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChhYnNIcmVmLCByZWxIcmVmKSkge1xuICAgICAgICAgIC8vIFdlIGRvIGEgcHJldmVudERlZmF1bHQgZm9yIGFsbCB1cmxzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGFuZ3VsYXIgYXBwbGljYXRpb24sXG4gICAgICAgICAgLy8gaW4gaHRtbDVtb2RlIGFuZCBhbHNvIHdpdGhvdXQsIHNvIHRoYXQgd2UgYXJlIGFibGUgdG8gYWJvcnQgbmF2aWdhdGlvbiB3aXRob3V0XG4gICAgICAgICAgLy8gZ2V0dGluZyBkb3VibGUgZW50cmllcyBpbiB0aGUgbG9jYXRpb24gaGlzdG9yeS5cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIC8vIHVwZGF0ZSBsb2NhdGlvbiBtYW51YWxseVxuICAgICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT0gJGJyb3dzZXIudXJsKCkpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAvLyBoYWNrIHRvIHdvcmsgYXJvdW5kIEZGNiBidWcgNjg0MjA4IHdoZW4gc2NlbmFyaW8gcnVubmVyIGNsaWNrcyBvbiBsaW5rc1xuICAgICAgICAgICAgd2luZG93LmFuZ3VsYXJbJ2ZmLTY4NDIwOC1wcmV2ZW50RGVmYXVsdCddID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgLy8gcmV3cml0ZSBoYXNoYmFuZyB1cmwgPD4gaHRtbDUgdXJsXG4gICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPSBpbml0aWFsVXJsKSB7XG4gICAgICAkYnJvd3Nlci51cmwoJGxvY2F0aW9uLmFic1VybCgpLCB0cnVlKTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAgIC8vIHVwZGF0ZSAkbG9jYXRpb24gd2hlbiAkYnJvd3NlciB1cmwgY2hhbmdlc1xuICAgICRicm93c2VyLm9uVXJsQ2hhbmdlKGZ1bmN0aW9uKG5ld1VybCwgbmV3U3RhdGUpIHtcbiAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9sZFVybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTtcbiAgICAgICAgdmFyIG9sZFN0YXRlID0gJGxvY2F0aW9uLiQkc3RhdGU7XG5cbiAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2UobmV3VXJsKTtcbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgICAgaWYgKCRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCBuZXdVcmwsIG9sZFVybCxcbiAgICAgICAgICAgIG5ld1N0YXRlLCBvbGRTdGF0ZSkuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICAgICAgICBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKG9sZFVybCwgZmFsc2UsIG9sZFN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCwgb2xkU3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBicm93c2VyXG4gICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gJGxvY2F0aW9uV2F0Y2goKSB7XG4gICAgICB2YXIgb2xkVXJsID0gJGJyb3dzZXIudXJsKCk7XG4gICAgICB2YXIgb2xkU3RhdGUgPSAkYnJvd3Nlci5zdGF0ZSgpO1xuICAgICAgdmFyIGN1cnJlbnRSZXBsYWNlID0gJGxvY2F0aW9uLiQkcmVwbGFjZTtcbiAgICAgIHZhciB1cmxPclN0YXRlQ2hhbmdlZCA9IG9sZFVybCAhPT0gJGxvY2F0aW9uLmFic1VybCgpIHx8XG4gICAgICAgICgkbG9jYXRpb24uJCRodG1sNSAmJiAkc25pZmZlci5oaXN0b3J5ICYmIG9sZFN0YXRlICE9PSAkbG9jYXRpb24uJCRzdGF0ZSk7XG5cbiAgICAgIGlmIChpbml0aWFsaXppbmcgfHwgdXJsT3JTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwsXG4gICAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSkuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1cmxPclN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKCRsb2NhdGlvbi5hYnNVcmwoKSwgY3VycmVudFJlcGxhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkU3RhdGUgPT09ICRsb2NhdGlvbi4kJHN0YXRlID8gbnVsbCA6ICRsb2NhdGlvbi4kJHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgJGxvY2F0aW9uLiQkcmVwbGFjZSA9IGZhbHNlO1xuXG4gICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIHJldHVybiBhbnl0aGluZyBiZWNhdXNlICRldmFsQXN5bmMgd2lsbCBtYWtlIHRoZSBkaWdlc3QgbG9vcCBkaXJ0eSB3aGVuXG4gICAgICAvLyB0aGVyZSBpcyBhIGNoYW5nZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuICRsb2NhdGlvbjtcblxuICAgIGZ1bmN0aW9uIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSkge1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwsXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSk7XG4gICAgfVxufV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2dcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTaW1wbGUgc2VydmljZSBmb3IgbG9nZ2luZy4gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzYWZlbHkgd3JpdGVzIHRoZSBtZXNzYWdlXG4gKiBpbnRvIHRoZSBicm93c2VyJ3MgY29uc29sZSAoaWYgcHJlc2VudCkuXG4gKlxuICogVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHNlcnZpY2UgaXMgdG8gc2ltcGxpZnkgZGVidWdnaW5nIGFuZCB0cm91Ymxlc2hvb3RpbmcuXG4gKlxuICogVGhlIGRlZmF1bHQgaXMgdG8gbG9nIGBkZWJ1Z2AgbWVzc2FnZXMuIFlvdSBjYW4gdXNlXG4gKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWR9IHRvIGNoYW5nZSB0aGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsb2dFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbG9nRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0xvZ0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9nJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nKSB7XG4gICAgICAgICAgICRzY29wZS4kbG9nID0gJGxvZztcbiAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSAnSGVsbG8gV29ybGQhJztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkxvZ0NvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPlJlbG9hZCB0aGlzIHBhZ2Ugd2l0aCBvcGVuIGNvbnNvbGUsIGVudGVyIHRleHQgYW5kIGhpdCB0aGUgbG9nIGJ1dHRvbi4uLjwvcD5cbiAgICAgICAgIE1lc3NhZ2U6XG4gICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1lc3NhZ2VcIi8+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5sb2cobWVzc2FnZSlcIj5sb2c8L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLndhcm4obWVzc2FnZSlcIj53YXJuPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5pbmZvKG1lc3NhZ2UpXCI+aW5mbzwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cuZXJyb3IobWVzc2FnZSlcIj5lcnJvcjwvYnV0dG9uPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRsb2dQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhlIGAkbG9nUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGxvZ3MgbWVzc2FnZXNcbiAqL1xuZnVuY3Rpb24gJExvZ1Byb3ZpZGVyKCkge1xuICB2YXIgZGVidWcgPSB0cnVlLFxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHtib29sZWFuPX0gZmxhZyBlbmFibGUgb3IgZGlzYWJsZSBkZWJ1ZyBsZXZlbCBtZXNzYWdlc1xuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5kZWJ1Z0VuYWJsZWQgPSBmdW5jdGlvbihmbGFnKSB7XG4gICAgaWYgKGlzRGVmaW5lZChmbGFnKSkge1xuICAgICAgZGVidWcgPSBmbGFnO1xuICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVidWc7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2xvZ1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBsb2cgbWVzc2FnZVxuICAgICAgICovXG4gICAgICBsb2c6IGNvbnNvbGVMb2coJ2xvZycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjaW5mb1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYW4gaW5mb3JtYXRpb24gbWVzc2FnZVxuICAgICAgICovXG4gICAgICBpbmZvOiBjb25zb2xlTG9nKCdpbmZvJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyN3YXJuXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBXcml0ZSBhIHdhcm5pbmcgbWVzc2FnZVxuICAgICAgICovXG4gICAgICB3YXJuOiBjb25zb2xlTG9nKCd3YXJuJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNlcnJvclxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYW4gZXJyb3IgbWVzc2FnZVxuICAgICAgICovXG4gICAgICBlcnJvcjogY29uc29sZUxvZygnZXJyb3InKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2RlYnVnXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBXcml0ZSBhIGRlYnVnIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZGVidWc6IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGZuID0gY29uc29sZUxvZygnZGVidWcnKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICBmbi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0oKSlcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0RXJyb3IoYXJnKSB7XG4gICAgICBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgaWYgKGFyZy5zdGFjaykge1xuICAgICAgICAgIGFyZyA9IChhcmcubWVzc2FnZSAmJiBhcmcuc3RhY2suaW5kZXhPZihhcmcubWVzc2FnZSkgPT09IC0xKVxuICAgICAgICAgICAgICA/ICdFcnJvcjogJyArIGFyZy5tZXNzYWdlICsgJ1xcbicgKyBhcmcuc3RhY2tcbiAgICAgICAgICAgICAgOiBhcmcuc3RhY2s7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJnLnNvdXJjZVVSTCkge1xuICAgICAgICAgIGFyZyA9IGFyZy5tZXNzYWdlICsgJ1xcbicgKyBhcmcuc291cmNlVVJMICsgJzonICsgYXJnLmxpbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc29sZUxvZyh0eXBlKSB7XG4gICAgICB2YXIgY29uc29sZSA9ICR3aW5kb3cuY29uc29sZSB8fCB7fSxcbiAgICAgICAgICBsb2dGbiA9IGNvbnNvbGVbdHlwZV0gfHwgY29uc29sZS5sb2cgfHwgbm9vcCxcbiAgICAgICAgICBoYXNBcHBseSA9IGZhbHNlO1xuXG4gICAgICAvLyBOb3RlOiByZWFkaW5nIGxvZ0ZuLmFwcGx5IHRocm93cyBhbiBlcnJvciBpbiBJRTExIGluIElFOCBkb2N1bWVudCBtb2RlLlxuICAgICAgLy8gVGhlIHJlYXNvbiBiZWhpbmQgdGhpcyBpcyB0aGF0IGNvbnNvbGUubG9nIGhhcyB0eXBlIFwib2JqZWN0XCIgaW4gSUU4Li4uXG4gICAgICB0cnkge1xuICAgICAgICBoYXNBcHBseSA9ICEhbG9nRm4uYXBwbHk7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICBpZiAoaGFzQXBwbHkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgICAgYXJncy5wdXNoKGZvcm1hdEVycm9yKGFyZykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBsb2dGbi5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gd2UgYXJlIElFIHdoaWNoIGVpdGhlciBkb2Vzbid0IGhhdmUgd2luZG93LmNvbnNvbGUgPT4gdGhpcyBpcyBub29wIGFuZCB3ZSBkbyBub3RoaW5nLFxuICAgICAgLy8gb3Igd2UgYXJlIElFIHdoZXJlIGNvbnNvbGUubG9nIGRvZXNuJ3QgaGF2ZSBhcHBseSBzbyB3ZSBsb2cgYXQgbGVhc3QgZmlyc3QgMiBhcmdzXG4gICAgICByZXR1cm4gZnVuY3Rpb24oYXJnMSwgYXJnMikge1xuICAgICAgICBsb2dGbihhcmcxLCBhcmcyID09IG51bGwgPyAnJyA6IGFyZzIpO1xuICAgICAgfTtcbiAgICB9XG4gIH1dO1xufVxuXG52YXIgJHBhcnNlTWluRXJyID0gbWluRXJyKCckcGFyc2UnKTtcblxuLy8gU2FuZGJveGluZyBBbmd1bGFyIEV4cHJlc3Npb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEFuZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIGdlbmVyYWxseSBjb25zaWRlcmVkIHNhZmUgYmVjYXVzZSB0aGVzZSBleHByZXNzaW9ucyBvbmx5IGhhdmUgZGlyZWN0XG4vLyBhY2Nlc3MgdG8gJHNjb3BlIGFuZCBsb2NhbHMuIEhvd2V2ZXIsIG9uZSBjYW4gb2J0YWluIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IEpTIGNvZGUgYnlcbi8vIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byBuYXRpdmUgSlMgZnVuY3Rpb25zIHN1Y2ggYXMgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yLlxuLy9cbi8vIEFzIGFuIGV4YW1wbGUsIGNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgQW5ndWxhciBleHByZXNzaW9uOlxuLy9cbi8vICAge30udG9TdHJpbmcuY29uc3RydWN0b3IoJ2FsZXJ0KFwiZXZpbCBKUyBjb2RlXCIpJylcbi8vXG4vLyBUaGlzIHNhbmRib3hpbmcgdGVjaG5pcXVlIGlzIG5vdCBwZXJmZWN0IGFuZCBkb2Vzbid0IGFpbSB0byBiZS4gVGhlIGdvYWwgaXMgdG8gcHJldmVudCBleHBsb2l0c1xuLy8gYWdhaW5zdCB0aGUgZXhwcmVzc2lvbiBsYW5ndWFnZSwgYnV0IG5vdCB0byBwcmV2ZW50IGV4cGxvaXRzIHRoYXQgd2VyZSBlbmFibGVkIGJ5IGV4cG9zaW5nXG4vLyBzZW5zaXRpdmUgSmF2YVNjcmlwdCBvciBicm93c2VyIGFwaXMgb24gU2NvcGUuIEV4cG9zaW5nIHN1Y2ggb2JqZWN0cyBvbiBhIFNjb3BlIGlzIG5ldmVyIGEgZ29vZFxuLy8gcHJhY3RpY2UgYW5kIHRoZXJlZm9yZSB3ZSBhcmUgbm90IGV2ZW4gdHJ5aW5nIHRvIHByb3RlY3QgYWdhaW5zdCBpbnRlcmFjdGlvbiB3aXRoIGFuIG9iamVjdFxuLy8gZXhwbGljaXRseSBleHBvc2VkIGluIHRoaXMgd2F5LlxuLy9cbi8vIEluIGdlbmVyYWwsIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBhY2Nlc3MgYSBXaW5kb3cgb2JqZWN0IGZyb20gYW4gYW5ndWxhciBleHByZXNzaW9uIHVubGVzcyBhXG4vLyB3aW5kb3cgb3Igc29tZSBET00gb2JqZWN0IHRoYXQgaGFzIGEgcmVmZXJlbmNlIHRvIHdpbmRvdyBpcyBwdWJsaXNoZWQgb250byBhIFNjb3BlLlxuLy8gU2ltaWxhcmx5IHdlIHByZXZlbnQgaW52b2NhdGlvbnMgb2YgZnVuY3Rpb24ga25vd24gdG8gYmUgZGFuZ2Vyb3VzLCBhcyB3ZWxsIGFzIGFzc2lnbm1lbnRzIHRvXG4vLyBuYXRpdmUgb2JqZWN0cy5cblxuXG5mdW5jdGlvbiBlbnN1cmVTYWZlTWVtYmVyTmFtZShuYW1lLCBmdWxsRXhwcmVzc2lvbikge1xuICBpZiAobmFtZSA9PT0gXCJfX2RlZmluZUdldHRlcl9fXCIgfHwgbmFtZSA9PT0gXCJfX2RlZmluZVNldHRlcl9fXCJcbiAgICAgIHx8IG5hbWUgPT09IFwiX19sb29rdXBHZXR0ZXJfX1wiIHx8IG5hbWUgPT09IFwiX19sb29rdXBTZXR0ZXJfX1wiXG4gICAgICB8fCBuYW1lID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZmxkJyxcbiAgICAgICAgJ0F0dGVtcHRpbmcgdG8gYWNjZXNzIGEgZGlzYWxsb3dlZCBmaWVsZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zISAnXG4gICAgICAgICsnRXhwcmVzc2lvbjogezB9JywgZnVsbEV4cHJlc3Npb24pO1xuICB9XG4gIHJldHVybiBuYW1lO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVTYWZlT2JqZWN0KG9iaiwgZnVsbEV4cHJlc3Npb24pIHtcbiAgLy8gbmlmdHkgY2hlY2sgaWYgb2JqIGlzIEZ1bmN0aW9uIHRoYXQgaXMgZmFzdCBhbmQgd29ya3MgYWNyb3NzIGlmcmFtZXMgYW5kIG90aGVyIGNvbnRleHRzXG4gIGlmIChvYmopIHtcbiAgICBpZiAob2JqLmNvbnN0cnVjdG9yID09PSBvYmopIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZuJyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgRnVuY3Rpb24gaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICAgIGZ1bGxFeHByZXNzaW9uKTtcbiAgICB9IGVsc2UgaWYgKC8vIGlzV2luZG93KG9iailcbiAgICAgICAgb2JqLndpbmRvdyA9PT0gb2JqKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWN3aW5kb3cnLFxuICAgICAgICAgICdSZWZlcmVuY2luZyB0aGUgV2luZG93IGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmICgvLyBpc0VsZW1lbnQob2JqKVxuICAgICAgICBvYmouY2hpbGRyZW4gJiYgKG9iai5ub2RlTmFtZSB8fCAob2JqLnByb3AgJiYgb2JqLmF0dHIgJiYgb2JqLmZpbmQpKSkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZG9tJyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgRE9NIG5vZGVzIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmICgvLyBibG9jayBPYmplY3Qgc28gdGhhdCB3ZSBjYW4ndCBnZXQgaG9sZCBvZiBkYW5nZXJvdXMgT2JqZWN0LiogbWV0aG9kc1xuICAgICAgICBvYmogPT09IE9iamVjdCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2Vjb2JqJyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgT2JqZWN0IGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbnZhciBDQUxMID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG52YXIgQVBQTFkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG52YXIgQklORCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuXG5mdW5jdGlvbiBlbnN1cmVTYWZlRnVuY3Rpb24ob2JqLCBmdWxsRXhwcmVzc2lvbikge1xuICBpZiAob2JqKSB7XG4gICAgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gb2JqKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbicsXG4gICAgICAgICdSZWZlcmVuY2luZyBGdW5jdGlvbiBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgIGZ1bGxFeHByZXNzaW9uKTtcbiAgICB9IGVsc2UgaWYgKG9iaiA9PT0gQ0FMTCB8fCBvYmogPT09IEFQUExZIHx8IG9iaiA9PT0gQklORCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZmYnLFxuICAgICAgICAnUmVmZXJlbmNpbmcgY2FsbCwgYXBwbHkgb3IgYmluZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgIGZ1bGxFeHByZXNzaW9uKTtcbiAgICB9XG4gIH1cbn1cblxuLy9LZXl3b3JkIGNvbnN0YW50c1xudmFyIENPTlNUQU5UUyA9IGNyZWF0ZU1hcCgpO1xuZm9yRWFjaCh7XG4gICdudWxsJzogZnVuY3Rpb24oKSB7IHJldHVybiBudWxsOyB9LFxuICAndHJ1ZSc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgJ2ZhbHNlJzogZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgJ3VuZGVmaW5lZCc6IGZ1bmN0aW9uKCkge31cbn0sIGZ1bmN0aW9uKGNvbnN0YW50R2V0dGVyLCBuYW1lKSB7XG4gIGNvbnN0YW50R2V0dGVyLmNvbnN0YW50ID0gY29uc3RhbnRHZXR0ZXIubGl0ZXJhbCA9IGNvbnN0YW50R2V0dGVyLnNoYXJlZEdldHRlciA9IHRydWU7XG4gIENPTlNUQU5UU1tuYW1lXSA9IGNvbnN0YW50R2V0dGVyO1xufSk7XG5cbi8vTm90IHF1aXRlIGEgY29uc3RhbnQsIGJ1dCBjYW4gYmUgbGV4L3BhcnNlZCB0aGUgc2FtZVxuQ09OU1RBTlRTWyd0aGlzJ10gPSBmdW5jdGlvbihzZWxmKSB7IHJldHVybiBzZWxmOyB9O1xuQ09OU1RBTlRTWyd0aGlzJ10uc2hhcmVkR2V0dGVyID0gdHJ1ZTtcblxuXG4vL09wZXJhdG9ycyAtIHdpbGwgYmUgd3JhcHBlZCBieSBiaW5hcnlGbi91bmFyeUZuL2Fzc2lnbm1lbnQvZmlsdGVyXG52YXIgT1BFUkFUT1JTID0gZXh0ZW5kKGNyZWF0ZU1hcCgpLCB7XG4gICAgJysnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge1xuICAgICAgYT1hKHNlbGYsIGxvY2Fscyk7IGI9YihzZWxmLCBsb2NhbHMpO1xuICAgICAgaWYgKGlzRGVmaW5lZChhKSkge1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGIpKSB7XG4gICAgICAgICAgcmV0dXJuIGEgKyBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzRGVmaW5lZChiKT9iOnVuZGVmaW5lZDt9LFxuICAgICctJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpIHtcbiAgICAgICAgICBhPWEoc2VsZiwgbG9jYWxzKTsgYj1iKHNlbGYsIGxvY2Fscyk7XG4gICAgICAgICAgcmV0dXJuIChpc0RlZmluZWQoYSk/YTowKS0oaXNEZWZpbmVkKGIpP2I6MCk7XG4gICAgICAgIH0sXG4gICAgJyonOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2FscykqYihzZWxmLCBsb2NhbHMpO30sXG4gICAgJy8nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2FscykvYihzZWxmLCBsb2NhbHMpO30sXG4gICAgJyUnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2FscyklYihzZWxmLCBsb2NhbHMpO30sXG4gICAgJz09PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKSB7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKT09PWIoc2VsZiwgbG9jYWxzKTt9LFxuICAgICchPT0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2FscykhPT1iKHNlbGYsIGxvY2Fscyk7fSxcbiAgICAnPT0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2Fscyk9PWIoc2VsZiwgbG9jYWxzKTt9LFxuICAgICchPSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKSB7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSE9YihzZWxmLCBsb2NhbHMpO30sXG4gICAgJzwnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2Fscyk8YihzZWxmLCBsb2NhbHMpO30sXG4gICAgJz4nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2Fscyk+YihzZWxmLCBsb2NhbHMpO30sXG4gICAgJzw9JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpIHtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPD1iKHNlbGYsIGxvY2Fscyk7fSxcbiAgICAnPj0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2Fscyk+PWIoc2VsZiwgbG9jYWxzKTt9LFxuICAgICcmJic6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKSB7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSYmYihzZWxmLCBsb2NhbHMpO30sXG4gICAgJ3x8JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpIHtyZXR1cm4gYShzZWxmLCBsb2NhbHMpfHxiKHNlbGYsIGxvY2Fscyk7fSxcbiAgICAnISc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhKSB7cmV0dXJuICFhKHNlbGYsIGxvY2Fscyk7fSxcblxuICAgIC8vVG9rZW5pemVkIGFzIG9wZXJhdG9ycyBidXQgcGFyc2VkIGFzIGFzc2lnbm1lbnQvZmlsdGVyc1xuICAgICc9Jzp0cnVlLFxuICAgICd8Jzp0cnVlXG59KTtcbnZhciBFU0NBUEUgPSB7XCJuXCI6XCJcXG5cIiwgXCJmXCI6XCJcXGZcIiwgXCJyXCI6XCJcXHJcIiwgXCJ0XCI6XCJcXHRcIiwgXCJ2XCI6XCJcXHZcIiwgXCInXCI6XCInXCIsICdcIic6J1wiJ307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTGV4ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5MZXhlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMZXhlcixcblxuICBsZXg6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHRoaXMuY2ggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50b2tlbnMgPSBbXTtcblxuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdGhpcy5jaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICBpZiAodGhpcy5pcygnXCJcXCcnKSkge1xuICAgICAgICB0aGlzLnJlYWRTdHJpbmcodGhpcy5jaCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOdW1iZXIodGhpcy5jaCkgfHwgdGhpcy5pcygnLicpICYmIHRoaXMuaXNOdW1iZXIodGhpcy5wZWVrKCkpKSB7XG4gICAgICAgIHRoaXMucmVhZE51bWJlcigpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzSWRlbnQodGhpcy5jaCkpIHtcbiAgICAgICAgdGhpcy5yZWFkSWRlbnQoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pcygnKCl7fVtdLiw7Oj8nKSkge1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICB0ZXh0OiB0aGlzLmNoXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNXaGl0ZXNwYWNlKHRoaXMuY2gpKSB7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaDIgPSB0aGlzLmNoICsgdGhpcy5wZWVrKCk7XG4gICAgICAgIHZhciBjaDMgPSBjaDIgKyB0aGlzLnBlZWsoMik7XG4gICAgICAgIHZhciBmbiA9IE9QRVJBVE9SU1t0aGlzLmNoXTtcbiAgICAgICAgdmFyIGZuMiA9IE9QRVJBVE9SU1tjaDJdO1xuICAgICAgICB2YXIgZm4zID0gT1BFUkFUT1JTW2NoM107XG4gICAgICAgIGlmIChmbjMpIHtcbiAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtpbmRleDogdGhpcy5pbmRleCwgdGV4dDogY2gzLCBmbjogZm4zfSk7XG4gICAgICAgICAgdGhpcy5pbmRleCArPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKGZuMikge1xuICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiBjaDIsIGZuOiBmbjJ9KTtcbiAgICAgICAgICB0aGlzLmluZGV4ICs9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAoZm4pIHtcbiAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgdGV4dDogdGhpcy5jaCxcbiAgICAgICAgICAgIGZuOiBmblxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuaW5kZXggKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ1VuZXhwZWN0ZWQgbmV4dCBjaGFyYWN0ZXIgJywgdGhpcy5pbmRleCwgdGhpcy5pbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2VucztcbiAgfSxcblxuICBpczogZnVuY3Rpb24oY2hhcnMpIHtcbiAgICByZXR1cm4gY2hhcnMuaW5kZXhPZih0aGlzLmNoKSAhPT0gLTE7XG4gIH0sXG5cbiAgcGVlazogZnVuY3Rpb24oaSkge1xuICAgIHZhciBudW0gPSBpIHx8IDE7XG4gICAgcmV0dXJuICh0aGlzLmluZGV4ICsgbnVtIDwgdGhpcy50ZXh0Lmxlbmd0aCkgPyB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXggKyBudW0pIDogZmFsc2U7XG4gIH0sXG5cbiAgaXNOdW1iZXI6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuICgnMCcgPD0gY2ggJiYgY2ggPD0gJzknKTtcbiAgfSxcblxuICBpc1doaXRlc3BhY2U6IGZ1bmN0aW9uKGNoKSB7XG4gICAgLy8gSUUgdHJlYXRzIG5vbi1icmVha2luZyBzcGFjZSBhcyBcXHUwMEEwXG4gICAgcmV0dXJuIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFxyJyB8fCBjaCA9PT0gJ1xcdCcgfHxcbiAgICAgICAgICAgIGNoID09PSAnXFxuJyB8fCBjaCA9PT0gJ1xcdicgfHwgY2ggPT09ICdcXHUwMEEwJyk7XG4gIH0sXG5cbiAgaXNJZGVudDogZnVuY3Rpb24oY2gpIHtcbiAgICByZXR1cm4gKCdhJyA8PSBjaCAmJiBjaCA8PSAneicgfHxcbiAgICAgICAgICAgICdBJyA8PSBjaCAmJiBjaCA8PSAnWicgfHxcbiAgICAgICAgICAgICdfJyA9PT0gY2ggfHwgY2ggPT09ICckJyk7XG4gIH0sXG5cbiAgaXNFeHBPcGVyYXRvcjogZnVuY3Rpb24oY2gpIHtcbiAgICByZXR1cm4gKGNoID09PSAnLScgfHwgY2ggPT09ICcrJyB8fCB0aGlzLmlzTnVtYmVyKGNoKSk7XG4gIH0sXG5cbiAgdGhyb3dFcnJvcjogZnVuY3Rpb24oZXJyb3IsIHN0YXJ0LCBlbmQpIHtcbiAgICBlbmQgPSBlbmQgfHwgdGhpcy5pbmRleDtcbiAgICB2YXIgY29sU3RyID0gKGlzRGVmaW5lZChzdGFydClcbiAgICAgICAgICAgID8gJ3MgJyArIHN0YXJ0ICsgICctJyArIHRoaXMuaW5kZXggKyAnIFsnICsgdGhpcy50ZXh0LnN1YnN0cmluZyhzdGFydCwgZW5kKSArICddJ1xuICAgICAgICAgICAgOiAnICcgKyBlbmQpO1xuICAgIHRocm93ICRwYXJzZU1pbkVycignbGV4ZXJyJywgJ0xleGVyIEVycm9yOiB7MH0gYXQgY29sdW1uezF9IGluIGV4cHJlc3Npb24gW3syfV0uJyxcbiAgICAgICAgZXJyb3IsIGNvbFN0ciwgdGhpcy50ZXh0KTtcbiAgfSxcblxuICByZWFkTnVtYmVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbnVtYmVyID0gJyc7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IGxvd2VyY2FzZSh0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpKTtcbiAgICAgIGlmIChjaCA9PSAnLicgfHwgdGhpcy5pc051bWJlcihjaCkpIHtcbiAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBlZWtDaCA9IHRoaXMucGVlaygpO1xuICAgICAgICBpZiAoY2ggPT0gJ2UnICYmIHRoaXMuaXNFeHBPcGVyYXRvcihwZWVrQ2gpKSB7XG4gICAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiZcbiAgICAgICAgICAgIHBlZWtDaCAmJiB0aGlzLmlzTnVtYmVyKHBlZWtDaCkgJiZcbiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09ICdlJykge1xuICAgICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRXhwT3BlcmF0b3IoY2gpICYmXG4gICAgICAgICAgICAoIXBlZWtDaCB8fCAhdGhpcy5pc051bWJlcihwZWVrQ2gpKSAmJlxuICAgICAgICAgICAgbnVtYmVyLmNoYXJBdChudW1iZXIubGVuZ3RoIC0gMSkgPT0gJ2UnKSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIGV4cG9uZW50Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgbnVtYmVyID0gMSAqIG51bWJlcjtcbiAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgIHRleHQ6IG51bWJlcixcbiAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgZm46IGZ1bmN0aW9uKCkgeyByZXR1cm4gbnVtYmVyOyB9XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZElkZW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXhwcmVzc2lvbiA9IHRoaXMudGV4dDtcblxuICAgIHZhciBpZGVudCA9ICcnO1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG5cbiAgICB2YXIgbGFzdERvdCwgcGVla0luZGV4LCBtZXRob2ROYW1lLCBjaDtcblxuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpO1xuICAgICAgaWYgKGNoID09PSAnLicgfHwgdGhpcy5pc0lkZW50KGNoKSB8fCB0aGlzLmlzTnVtYmVyKGNoKSkge1xuICAgICAgICBpZiAoY2ggPT09ICcuJykgbGFzdERvdCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIGlkZW50ICs9IGNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgfVxuXG4gICAgLy9jaGVjayBpZiB0aGUgaWRlbnRpZmllciBlbmRzIHdpdGggLiBhbmQgaWYgc28gbW92ZSBiYWNrIG9uZSBjaGFyXG4gICAgaWYgKGxhc3REb3QgJiYgaWRlbnRbaWRlbnQubGVuZ3RoIC0gMV0gPT09ICcuJykge1xuICAgICAgdGhpcy5pbmRleC0tO1xuICAgICAgaWRlbnQgPSBpZGVudC5zbGljZSgwLCAtMSk7XG4gICAgICBsYXN0RG90ID0gaWRlbnQubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIGlmIChsYXN0RG90ID09PSAtMSkge1xuICAgICAgICBsYXN0RG90ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vY2hlY2sgaWYgdGhpcyBpcyBub3QgYSBtZXRob2QgaW52b2NhdGlvbiBhbmQgaWYgaXQgaXMgYmFjayBvdXQgdG8gbGFzdCBkb3RcbiAgICBpZiAobGFzdERvdCkge1xuICAgICAgcGVla0luZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgIHdoaWxlIChwZWVrSW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICAgIGNoID0gdGhpcy50ZXh0LmNoYXJBdChwZWVrSW5kZXgpO1xuICAgICAgICBpZiAoY2ggPT09ICcoJykge1xuICAgICAgICAgIG1ldGhvZE5hbWUgPSBpZGVudC5zdWJzdHIobGFzdERvdCAtIHN0YXJ0ICsgMSk7XG4gICAgICAgICAgaWRlbnQgPSBpZGVudC5zdWJzdHIoMCwgbGFzdERvdCAtIHN0YXJ0KTtcbiAgICAgICAgICB0aGlzLmluZGV4ID0gcGVla0luZGV4O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzV2hpdGVzcGFjZShjaCkpIHtcbiAgICAgICAgICBwZWVrSW5kZXgrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgaW5kZXg6IHN0YXJ0LFxuICAgICAgdGV4dDogaWRlbnQsXG4gICAgICBmbjogQ09OU1RBTlRTW2lkZW50XSB8fCBnZXR0ZXJGbihpZGVudCwgdGhpcy5vcHRpb25zLCBleHByZXNzaW9uKVxuICAgIH0pO1xuXG4gICAgaWYgKG1ldGhvZE5hbWUpIHtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICBpbmRleDogbGFzdERvdCxcbiAgICAgICAgdGV4dDogJy4nXG4gICAgICB9KTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICBpbmRleDogbGFzdERvdCArIDEsXG4gICAgICAgIHRleHQ6IG1ldGhvZE5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICByZWFkU3RyaW5nOiBmdW5jdGlvbihxdW90ZSkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgdGhpcy5pbmRleCsrO1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICB2YXIgcmF3U3RyaW5nID0gcXVvdGU7XG4gICAgdmFyIGVzY2FwZSA9IGZhbHNlO1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIHJhd1N0cmluZyArPSBjaDtcbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgaWYgKGNoID09PSAndScpIHtcbiAgICAgICAgICB2YXIgaGV4ID0gdGhpcy50ZXh0LnN1YnN0cmluZyh0aGlzLmluZGV4ICsgMSwgdGhpcy5pbmRleCArIDUpO1xuICAgICAgICAgIGlmICghaGV4Lm1hdGNoKC9bXFxkYS1mXXs0fS9pKSlcbiAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFxcXHUnICsgaGV4ICsgJ10nKTtcbiAgICAgICAgICB0aGlzLmluZGV4ICs9IDQ7XG4gICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXAgPSBFU0NBUEVbY2hdO1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIChyZXAgfHwgY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVzY2FwZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGVzY2FwZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSBxdW90ZSkge1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgICAgICB0ZXh0OiByYXdTdHJpbmcsXG4gICAgICAgICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgICAgZm46IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3RyaW5nOyB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJpbmcgKz0gY2g7XG4gICAgICB9XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgfVxuICAgIHRoaXMudGhyb3dFcnJvcignVW50ZXJtaW5hdGVkIHF1b3RlJywgc3RhcnQpO1xuICB9XG59O1xuXG5cbmZ1bmN0aW9uIGlzQ29uc3RhbnQoZXhwKSB7XG4gIHJldHVybiBleHAuY29uc3RhbnQ7XG59XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBQYXJzZXIgPSBmdW5jdGlvbihsZXhlciwgJGZpbHRlciwgb3B0aW9ucykge1xuICB0aGlzLmxleGVyID0gbGV4ZXI7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5QYXJzZXIuWkVSTyA9IGV4dGVuZChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIDA7XG59LCB7XG4gIHNoYXJlZEdldHRlcjogdHJ1ZSxcbiAgY29uc3RhbnQ6IHRydWVcbn0pO1xuXG5QYXJzZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGFyc2VyLFxuXG4gIHBhcnNlOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLnRva2VucyA9IHRoaXMubGV4ZXIubGV4KHRleHQpO1xuXG4gICAgdmFyIHZhbHVlID0gdGhpcy5zdGF0ZW1lbnRzKCk7XG5cbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIGFuIHVuZXhwZWN0ZWQgdG9rZW4nLCB0aGlzLnRva2Vuc1swXSk7XG4gICAgfVxuXG4gICAgdmFsdWUubGl0ZXJhbCA9ICEhdmFsdWUubGl0ZXJhbDtcbiAgICB2YWx1ZS5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG5cbiAgcHJpbWFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByaW1hcnk7XG4gICAgaWYgKHRoaXMuZXhwZWN0KCcoJykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmZpbHRlckNoYWluKCk7XG4gICAgICB0aGlzLmNvbnN1bWUoJyknKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCdbJykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmFycmF5RGVjbGFyYXRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCd7JykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLm9iamVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLmV4cGVjdCgpO1xuICAgICAgcHJpbWFyeSA9IHRva2VuLmZuO1xuICAgICAgaWYgKCFwcmltYXJ5KSB7XG4gICAgICAgIHRoaXMudGhyb3dFcnJvcignbm90IGEgcHJpbWFyeSBleHByZXNzaW9uJywgdG9rZW4pO1xuICAgICAgfVxuICAgICAgaWYgKHRva2VuLmNvbnN0YW50KSB7XG4gICAgICAgIHByaW1hcnkuY29uc3RhbnQgPSB0cnVlO1xuICAgICAgICBwcmltYXJ5LmxpdGVyYWwgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBuZXh0LCBjb250ZXh0O1xuICAgIHdoaWxlICgobmV4dCA9IHRoaXMuZXhwZWN0KCcoJywgJ1snLCAnLicpKSkge1xuICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7XG4gICAgICAgIHByaW1hcnkgPSB0aGlzLmZ1bmN0aW9uQ2FsbChwcmltYXJ5LCBjb250ZXh0KTtcbiAgICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJ1snKSB7XG4gICAgICAgIGNvbnRleHQgPSBwcmltYXJ5O1xuICAgICAgICBwcmltYXJ5ID0gdGhpcy5vYmplY3RJbmRleChwcmltYXJ5KTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dC50ZXh0ID09PSAnLicpIHtcbiAgICAgICAgY29udGV4dCA9IHByaW1hcnk7XG4gICAgICAgIHByaW1hcnkgPSB0aGlzLmZpZWxkQWNjZXNzKHByaW1hcnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJTVBPU1NJQkxFJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmltYXJ5O1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKG1zZywgdG9rZW4pIHtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3N5bnRheCcsXG4gICAgICAgICdTeW50YXggRXJyb3I6IFRva2VuIFxcJ3swfVxcJyB7MX0gYXQgY29sdW1uIHsyfSBvZiB0aGUgZXhwcmVzc2lvbiBbezN9XSBzdGFydGluZyBhdCBbezR9XS4nLFxuICAgICAgICAgIHRva2VuLnRleHQsIG1zZywgKHRva2VuLmluZGV4ICsgMSksIHRoaXMudGV4dCwgdGhpcy50ZXh0LnN1YnN0cmluZyh0b2tlbi5pbmRleCkpO1xuICB9LFxuXG4gIHBlZWtUb2tlbjogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMClcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycigndWVvZScsICdVbmV4cGVjdGVkIGVuZCBvZiBleHByZXNzaW9uOiB7MH0nLCB0aGlzLnRleHQpO1xuICAgIHJldHVybiB0aGlzLnRva2Vuc1swXTtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2Vuc1swXTtcbiAgICAgIHZhciB0ID0gdG9rZW4udGV4dDtcbiAgICAgIGlmICh0ID09PSBlMSB8fCB0ID09PSBlMiB8fCB0ID09PSBlMyB8fCB0ID09PSBlNCB8fFxuICAgICAgICAgICghZTEgJiYgIWUyICYmICFlMyAmJiAhZTQpKSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGV4cGVjdDogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLnBlZWsoZTEsIGUyLCBlMywgZTQpO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgdGhpcy50b2tlbnMuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGNvbnN1bWU6IGZ1bmN0aW9uKGUxKSB7XG4gICAgaWYgKCF0aGlzLmV4cGVjdChlMSkpIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFsnICsgZTEgKyAnXScsIHRoaXMucGVlaygpKTtcbiAgICB9XG4gIH0sXG5cbiAgdW5hcnlGbjogZnVuY3Rpb24oZm4sIHJpZ2h0KSB7XG4gICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VVbmFyeUZuKHNlbGYsIGxvY2Fscykge1xuICAgICAgcmV0dXJuIGZuKHNlbGYsIGxvY2FscywgcmlnaHQpO1xuICAgIH0sIHtcbiAgICAgIGNvbnN0YW50OnJpZ2h0LmNvbnN0YW50LFxuICAgICAgaW5wdXRzOiBbcmlnaHRdXG4gICAgfSk7XG4gIH0sXG5cbiAgYmluYXJ5Rm46IGZ1bmN0aW9uKGxlZnQsIGZuLCByaWdodCwgaXNCcmFuY2hpbmcpIHtcbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRwYXJzZUJpbmFyeUZuKHNlbGYsIGxvY2Fscykge1xuICAgICAgcmV0dXJuIGZuKHNlbGYsIGxvY2FscywgbGVmdCwgcmlnaHQpO1xuICAgIH0sIHtcbiAgICAgIGNvbnN0YW50OiBsZWZ0LmNvbnN0YW50ICYmIHJpZ2h0LmNvbnN0YW50LFxuICAgICAgaW5wdXRzOiAhaXNCcmFuY2hpbmcgJiYgW2xlZnQsIHJpZ2h0XVxuICAgIH0pO1xuICB9LFxuXG4gIHN0YXRlbWVudHM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGF0ZW1lbnRzID0gW107XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiAwICYmICF0aGlzLnBlZWsoJ30nLCAnKScsICc7JywgJ10nKSlcbiAgICAgICAgc3RhdGVtZW50cy5wdXNoKHRoaXMuZmlsdGVyQ2hhaW4oKSk7XG4gICAgICBpZiAoIXRoaXMuZXhwZWN0KCc7JykpIHtcbiAgICAgICAgLy8gb3B0aW1pemUgZm9yIHRoZSBjb21tb24gY2FzZSB3aGVyZSB0aGVyZSBpcyBvbmx5IG9uZSBzdGF0ZW1lbnQuXG4gICAgICAgIC8vIFRPRE8oc2l6ZSk6IG1heWJlIHdlIHNob3VsZCBub3Qgc3VwcG9ydCBtdWx0aXBsZSBzdGF0ZW1lbnRzP1xuICAgICAgICByZXR1cm4gKHN0YXRlbWVudHMubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgPyBzdGF0ZW1lbnRzWzBdXG4gICAgICAgICAgICA6IGZ1bmN0aW9uICRwYXJzZVN0YXRlbWVudHMoc2VsZiwgbG9jYWxzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHN0YXRlbWVudHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBzdGF0ZW1lbnRzW2ldKHNlbGYsIGxvY2Fscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZmlsdGVyQ2hhaW46IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnfCcpKSkge1xuICAgICAgbGVmdCA9IHRoaXMuZmlsdGVyKGxlZnQpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBmaWx0ZXI6IGZ1bmN0aW9uKGlucHV0Rm4pIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLmV4cGVjdCgpO1xuICAgIHZhciBmbiA9IHRoaXMuJGZpbHRlcih0b2tlbi50ZXh0KTtcbiAgICB2YXIgYXJnc0ZuO1xuICAgIHZhciBhcmdzO1xuXG4gICAgaWYgKHRoaXMucGVlaygnOicpKSB7XG4gICAgICBhcmdzRm4gPSBbXTtcbiAgICAgIGFyZ3MgPSBbXTsgLy8gd2UgY2FuIHNhZmVseSByZXVzZSB0aGUgYXJyYXlcbiAgICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnOicpKSB7XG4gICAgICAgIGFyZ3NGbi5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaW5wdXRzID0gW2lucHV0Rm5dLmNvbmNhdChhcmdzRm4gfHwgW10pO1xuXG4gICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VGaWx0ZXIoc2VsZiwgbG9jYWxzKSB7XG4gICAgICB2YXIgaW5wdXQgPSBpbnB1dEZuKHNlbGYsIGxvY2Fscyk7XG4gICAgICBpZiAoYXJncykge1xuICAgICAgICBhcmdzWzBdID0gaW5wdXQ7XG5cbiAgICAgICAgdmFyIGkgPSBhcmdzRm4ubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgYXJnc1tpICsgMV0gPSBhcmdzRm5baV0oc2VsZiwgbG9jYWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oaW5wdXQpO1xuICAgIH0sIHtcbiAgICAgIGNvbnN0YW50OiAhZm4uJHN0YXRlZnVsICYmIGlucHV0cy5ldmVyeShpc0NvbnN0YW50KSxcbiAgICAgIGlucHV0czogIWZuLiRzdGF0ZWZ1bCAmJiBpbnB1dHNcbiAgICB9KTtcbiAgfSxcblxuICBleHByZXNzaW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hc3NpZ25tZW50KCk7XG4gIH0sXG5cbiAgYXNzaWdubWVudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLnRlcm5hcnkoKTtcbiAgICB2YXIgcmlnaHQ7XG4gICAgdmFyIHRva2VuO1xuICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPScpKSkge1xuICAgICAgaWYgKCFsZWZ0LmFzc2lnbikge1xuICAgICAgICB0aGlzLnRocm93RXJyb3IoJ2ltcGxpZXMgYXNzaWdubWVudCBidXQgWycgK1xuICAgICAgICAgICAgdGhpcy50ZXh0LnN1YnN0cmluZygwLCB0b2tlbi5pbmRleCkgKyAnXSBjYW4gbm90IGJlIGFzc2lnbmVkIHRvJywgdG9rZW4pO1xuICAgICAgfVxuICAgICAgcmlnaHQgPSB0aGlzLnRlcm5hcnkoKTtcbiAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJHBhcnNlQXNzaWdubWVudChzY29wZSwgbG9jYWxzKSB7XG4gICAgICAgIHJldHVybiBsZWZ0LmFzc2lnbihzY29wZSwgcmlnaHQoc2NvcGUsIGxvY2FscyksIGxvY2Fscyk7XG4gICAgICB9LCB7XG4gICAgICAgIGlucHV0czogW2xlZnQsIHJpZ2h0XVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIHRlcm5hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5sb2dpY2FsT1IoKTtcbiAgICB2YXIgbWlkZGxlO1xuICAgIHZhciB0b2tlbjtcbiAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJz8nKSkpIHtcbiAgICAgIG1pZGRsZSA9IHRoaXMuYXNzaWdubWVudCgpO1xuICAgICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc6JykpKSB7XG4gICAgICAgIHZhciByaWdodCA9IHRoaXMuYXNzaWdubWVudCgpO1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJHBhcnNlVGVybmFyeShzZWxmLCBsb2NhbHMpIHtcbiAgICAgICAgICByZXR1cm4gbGVmdChzZWxmLCBsb2NhbHMpID8gbWlkZGxlKHNlbGYsIGxvY2FscykgOiByaWdodChzZWxmLCBsb2NhbHMpO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgY29uc3RhbnQ6IGxlZnQuY29uc3RhbnQgJiYgbWlkZGxlLmNvbnN0YW50ICYmIHJpZ2h0LmNvbnN0YW50XG4gICAgICAgIH0pO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRocm93RXJyb3IoJ2V4cGVjdGVkIDonLCB0b2tlbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgbG9naWNhbE9SOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMubG9naWNhbEFORCgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJ3x8JykpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5iaW5hcnlGbihsZWZ0LCB0b2tlbi5mbiwgdGhpcy5sb2dpY2FsQU5EKCksIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBsb2dpY2FsQU5EOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMuZXF1YWxpdHkoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCcmJicpKSkge1xuICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMubG9naWNhbEFORCgpLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgZXF1YWxpdHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5yZWxhdGlvbmFsKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPT0nLCchPScsJz09PScsJyE9PScpKSkge1xuICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMuZXF1YWxpdHkoKSk7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIHJlbGF0aW9uYWw6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5hZGRpdGl2ZSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJzwnLCAnPicsICc8PScsICc+PScpKSkge1xuICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMucmVsYXRpb25hbCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgYWRkaXRpdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5tdWx0aXBsaWNhdGl2ZSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJysnLCctJykpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5iaW5hcnlGbihsZWZ0LCB0b2tlbi5mbiwgdGhpcy5tdWx0aXBsaWNhdGl2ZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgbXVsdGlwbGljYXRpdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy51bmFyeSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJyonLCcvJywnJScpKSkge1xuICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMudW5hcnkoKSk7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIHVuYXJ5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG9rZW47XG4gICAgaWYgKHRoaXMuZXhwZWN0KCcrJykpIHtcbiAgICAgIHJldHVybiB0aGlzLnByaW1hcnkoKTtcbiAgICB9IGVsc2UgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCctJykpKSB7XG4gICAgICByZXR1cm4gdGhpcy5iaW5hcnlGbihQYXJzZXIuWkVSTywgdG9rZW4uZm4sIHRoaXMudW5hcnkoKSk7XG4gICAgfSBlbHNlIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnIScpKSkge1xuICAgICAgcmV0dXJuIHRoaXMudW5hcnlGbih0b2tlbi5mbiwgdGhpcy51bmFyeSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeSgpO1xuICAgIH1cbiAgfSxcblxuICBmaWVsZEFjY2VzczogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLnRleHQ7XG4gICAgdmFyIGZpZWxkID0gdGhpcy5leHBlY3QoKS50ZXh0O1xuICAgIHZhciBnZXR0ZXIgPSBnZXR0ZXJGbihmaWVsZCwgdGhpcy5vcHRpb25zLCBleHByZXNzaW9uKTtcblxuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJHBhcnNlRmllbGRBY2Nlc3Moc2NvcGUsIGxvY2Fscywgc2VsZikge1xuICAgICAgcmV0dXJuIGdldHRlcihzZWxmIHx8IG9iamVjdChzY29wZSwgbG9jYWxzKSk7XG4gICAgfSwge1xuICAgICAgYXNzaWduOiBmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2Fscykge1xuICAgICAgICB2YXIgbyA9IG9iamVjdChzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgaWYgKCFvKSBvYmplY3QuYXNzaWduKHNjb3BlLCBvID0ge30pO1xuICAgICAgICByZXR1cm4gc2V0dGVyKG8sIGZpZWxkLCB2YWx1ZSwgZXhwcmVzc2lvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgb2JqZWN0SW5kZXg6IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBleHByZXNzaW9uID0gdGhpcy50ZXh0O1xuXG4gICAgdmFyIGluZGV4Rm4gPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICB0aGlzLmNvbnN1bWUoJ10nKTtcblxuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJHBhcnNlT2JqZWN0SW5kZXgoc2VsZiwgbG9jYWxzKSB7XG4gICAgICB2YXIgbyA9IG9iaihzZWxmLCBsb2NhbHMpLFxuICAgICAgICAgIGkgPSBpbmRleEZuKHNlbGYsIGxvY2FscyksXG4gICAgICAgICAgdjtcblxuICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoaSwgZXhwcmVzc2lvbik7XG4gICAgICBpZiAoIW8pIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB2ID0gZW5zdXJlU2FmZU9iamVjdChvW2ldLCBleHByZXNzaW9uKTtcbiAgICAgIHJldHVybiB2O1xuICAgIH0sIHtcbiAgICAgIGFzc2lnbjogZnVuY3Rpb24oc2VsZiwgdmFsdWUsIGxvY2Fscykge1xuICAgICAgICB2YXIga2V5ID0gZW5zdXJlU2FmZU1lbWJlck5hbWUoaW5kZXhGbihzZWxmLCBsb2NhbHMpLCBleHByZXNzaW9uKTtcbiAgICAgICAgLy8gcHJldmVudCBvdmVyd3JpdGluZyBvZiBGdW5jdGlvbi5jb25zdHJ1Y3RvciB3aGljaCB3b3VsZCBicmVhayBlbnN1cmVTYWZlT2JqZWN0IGNoZWNrXG4gICAgICAgIHZhciBvID0gZW5zdXJlU2FmZU9iamVjdChvYmooc2VsZiwgbG9jYWxzKSwgZXhwcmVzc2lvbik7XG4gICAgICAgIGlmICghbykgb2JqLmFzc2lnbihzZWxmLCBvID0ge30pO1xuICAgICAgICByZXR1cm4gb1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgZnVuY3Rpb25DYWxsOiBmdW5jdGlvbihmbkdldHRlciwgY29udGV4dEdldHRlcikge1xuICAgIHZhciBhcmdzRm4gPSBbXTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnKScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgYXJnc0ZuLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnKScpO1xuXG4gICAgdmFyIGV4cHJlc3Npb25UZXh0ID0gdGhpcy50ZXh0O1xuICAgIC8vIHdlIGNhbiBzYWZlbHkgcmV1c2UgdGhlIGFycmF5IGFjcm9zcyBpbnZvY2F0aW9uc1xuICAgIHZhciBhcmdzID0gYXJnc0ZuLmxlbmd0aCA/IFtdIDogbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAkcGFyc2VGdW5jdGlvbkNhbGwoc2NvcGUsIGxvY2Fscykge1xuICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0R2V0dGVyID8gY29udGV4dEdldHRlcihzY29wZSwgbG9jYWxzKSA6IHNjb3BlO1xuICAgICAgdmFyIGZuID0gZm5HZXR0ZXIoc2NvcGUsIGxvY2FscywgY29udGV4dCkgfHwgbm9vcDtcblxuICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgdmFyIGkgPSBhcmdzRm4ubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGVuc3VyZVNhZmVPYmplY3QoYXJnc0ZuW2ldKHNjb3BlLCBsb2NhbHMpLCBleHByZXNzaW9uVGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZW5zdXJlU2FmZU9iamVjdChjb250ZXh0LCBleHByZXNzaW9uVGV4dCk7XG4gICAgICBlbnN1cmVTYWZlRnVuY3Rpb24oZm4sIGV4cHJlc3Npb25UZXh0KTtcblxuICAgICAgLy8gSUUgc3R1cGlkaXR5ISAoSUUgZG9lc24ndCBoYXZlIGFwcGx5IGZvciBzb21lIG5hdGl2ZSBmdW5jdGlvbnMpXG4gICAgICB2YXIgdiA9IGZuLmFwcGx5XG4gICAgICAgICAgICA/IGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpXG4gICAgICAgICAgICA6IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuXG4gICAgICByZXR1cm4gZW5zdXJlU2FmZU9iamVjdCh2LCBleHByZXNzaW9uVGV4dCk7XG4gICAgfTtcbiAgfSxcblxuICAvLyBUaGlzIGlzIHVzZWQgd2l0aCBqc29uIGFycmF5IGRlY2xhcmF0aW9uXG4gIGFycmF5RGVjbGFyYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbGVtZW50Rm5zID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJ10nKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICh0aGlzLnBlZWsoJ10nKSkge1xuICAgICAgICAgIC8vIFN1cHBvcnQgdHJhaWxpbmcgY29tbWFzIHBlciBFUzUuMS5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWxlbWVudEZuID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgIGVsZW1lbnRGbnMucHVzaChlbGVtZW50Rm4pO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnXScpO1xuXG4gICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VBcnJheUxpdGVyYWwoc2VsZiwgbG9jYWxzKSB7XG4gICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGVsZW1lbnRGbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBhcnJheS5wdXNoKGVsZW1lbnRGbnNbaV0oc2VsZiwgbG9jYWxzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfSwge1xuICAgICAgbGl0ZXJhbDogdHJ1ZSxcbiAgICAgIGNvbnN0YW50OiBlbGVtZW50Rm5zLmV2ZXJ5KGlzQ29uc3RhbnQpLFxuICAgICAgaW5wdXRzOiBlbGVtZW50Rm5zXG4gICAgfSk7XG4gIH0sXG5cbiAgb2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdLCB2YWx1ZUZucyA9IFtdO1xuICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICd9Jykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAodGhpcy5wZWVrKCd9JykpIHtcbiAgICAgICAgICAvLyBTdXBwb3J0IHRyYWlsaW5nIGNvbW1hcyBwZXIgRVM1LjEuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoKTtcbiAgICAgICAga2V5cy5wdXNoKHRva2VuLnN0cmluZyB8fCB0b2tlbi50ZXh0KTtcbiAgICAgICAgdGhpcy5jb25zdW1lKCc6Jyk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICB2YWx1ZUZucy5wdXNoKHZhbHVlKTtcbiAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgIH1cbiAgICB0aGlzLmNvbnN1bWUoJ30nKTtcblxuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJHBhcnNlT2JqZWN0TGl0ZXJhbChzZWxmLCBsb2NhbHMpIHtcbiAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHZhbHVlRm5zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgb2JqZWN0W2tleXNbaV1dID0gdmFsdWVGbnNbaV0oc2VsZiwgbG9jYWxzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSwge1xuICAgICAgbGl0ZXJhbDogdHJ1ZSxcbiAgICAgIGNvbnN0YW50OiB2YWx1ZUZucy5ldmVyeShpc0NvbnN0YW50KSxcbiAgICAgIGlucHV0czogdmFsdWVGbnNcbiAgICB9KTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gUGFyc2VyIGhlbHBlciBmdW5jdGlvbnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIHNldHRlcihvYmosIHBhdGgsIHNldFZhbHVlLCBmdWxsRXhwKSB7XG4gIGVuc3VyZVNhZmVPYmplY3Qob2JqLCBmdWxsRXhwKTtcblxuICB2YXIgZWxlbWVudCA9IHBhdGguc3BsaXQoJy4nKSwga2V5O1xuICBmb3IgKHZhciBpID0gMDsgZWxlbWVudC5sZW5ndGggPiAxOyBpKyspIHtcbiAgICBrZXkgPSBlbnN1cmVTYWZlTWVtYmVyTmFtZShlbGVtZW50LnNoaWZ0KCksIGZ1bGxFeHApO1xuICAgIHZhciBwcm9wZXJ0eU9iaiA9IGVuc3VyZVNhZmVPYmplY3Qob2JqW2tleV0sIGZ1bGxFeHApO1xuICAgIGlmICghcHJvcGVydHlPYmopIHtcbiAgICAgIHByb3BlcnR5T2JqID0ge307XG4gICAgICBvYmpba2V5XSA9IHByb3BlcnR5T2JqO1xuICAgIH1cbiAgICBvYmogPSBwcm9wZXJ0eU9iajtcbiAgfVxuICBrZXkgPSBlbnN1cmVTYWZlTWVtYmVyTmFtZShlbGVtZW50LnNoaWZ0KCksIGZ1bGxFeHApO1xuICBlbnN1cmVTYWZlT2JqZWN0KG9ialtrZXldLCBmdWxsRXhwKTtcbiAgb2JqW2tleV0gPSBzZXRWYWx1ZTtcbiAgcmV0dXJuIHNldFZhbHVlO1xufVxuXG52YXIgZ2V0dGVyRm5DYWNoZSA9IGNyZWF0ZU1hcCgpO1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBcIkJsYWNrIEhvbGVcIiB2YXJpYW50IGZyb206XG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXJqcy1wYXJzZS1nZXR0ZXIvNFxuICogLSBodHRwOi8vanNwZXJmLmNvbS9wYXRoLWV2YWx1YXRpb24tc2ltcGxpZmllZC83XG4gKi9cbmZ1bmN0aW9uIGNzcFNhZmVHZXR0ZXJGbihrZXkwLCBrZXkxLCBrZXkyLCBrZXkzLCBrZXk0LCBmdWxsRXhwKSB7XG4gIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGtleTAsIGZ1bGxFeHApO1xuICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXkxLCBmdWxsRXhwKTtcbiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MiwgZnVsbEV4cCk7XG4gIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGtleTMsIGZ1bGxFeHApO1xuICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXk0LCBmdWxsRXhwKTtcblxuICByZXR1cm4gZnVuY3Rpb24gY3NwU2FmZUdldHRlcihzY29wZSwgbG9jYWxzKSB7XG4gICAgdmFyIHBhdGhWYWwgPSAobG9jYWxzICYmIGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShrZXkwKSkgPyBsb2NhbHMgOiBzY29wZTtcblxuICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiBwYXRoVmFsO1xuICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTBdO1xuXG4gICAgaWYgKCFrZXkxKSByZXR1cm4gcGF0aFZhbDtcbiAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTFdO1xuXG4gICAgaWYgKCFrZXkyKSByZXR1cm4gcGF0aFZhbDtcbiAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTJdO1xuXG4gICAgaWYgKCFrZXkzKSByZXR1cm4gcGF0aFZhbDtcbiAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTNdO1xuXG4gICAgaWYgKCFrZXk0KSByZXR1cm4gcGF0aFZhbDtcbiAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTRdO1xuXG4gICAgcmV0dXJuIHBhdGhWYWw7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldHRlckZuKHBhdGgsIG9wdGlvbnMsIGZ1bGxFeHApIHtcbiAgdmFyIGZuID0gZ2V0dGVyRm5DYWNoZVtwYXRoXTtcblxuICBpZiAoZm4pIHJldHVybiBmbjtcblxuICB2YXIgcGF0aEtleXMgPSBwYXRoLnNwbGl0KCcuJyksXG4gICAgICBwYXRoS2V5c0xlbmd0aCA9IHBhdGhLZXlzLmxlbmd0aDtcblxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9hbmd1bGFyanMtcGFyc2UtZ2V0dGVyLzZcbiAgaWYgKG9wdGlvbnMuY3NwKSB7XG4gICAgaWYgKHBhdGhLZXlzTGVuZ3RoIDwgNikge1xuICAgICAgZm4gPSBjc3BTYWZlR2V0dGVyRm4ocGF0aEtleXNbMF0sIHBhdGhLZXlzWzFdLCBwYXRoS2V5c1syXSwgcGF0aEtleXNbM10sIHBhdGhLZXlzWzRdLCBmdWxsRXhwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm4gPSBmdW5jdGlvbiBjc3BTYWZlR2V0dGVyKHNjb3BlLCBsb2NhbHMpIHtcbiAgICAgICAgdmFyIGkgPSAwLCB2YWw7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICB2YWwgPSBjc3BTYWZlR2V0dGVyRm4ocGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aEtleXNbaSsrXSwgZnVsbEV4cCkoc2NvcGUsIGxvY2Fscyk7XG5cbiAgICAgICAgICBsb2NhbHMgPSB1bmRlZmluZWQ7IC8vIGNsZWFyIGFmdGVyIGZpcnN0IGl0ZXJhdGlvblxuICAgICAgICAgIHNjb3BlID0gdmFsO1xuICAgICAgICB9IHdoaWxlIChpIDwgcGF0aEtleXNMZW5ndGgpO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICBmb3JFYWNoKHBhdGhLZXlzLCBmdW5jdGlvbihrZXksIGluZGV4KSB7XG4gICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXksIGZ1bGxFeHApO1xuICAgICAgY29kZSArPSAnaWYocyA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xcbicgK1xuICAgICAgICAgICAgICAncz0nKyAoaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBzaW1wbHkgZGVyZWZlcmVuY2UgJ3MnIG9uIGFueSAuZG90IG5vdGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgPyAncydcbiAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgaWYgd2UgYXJlIGZpcnN0IHRoZW4gd2UgY2hlY2sgbG9jYWxzIGZpcnN0LCBhbmQgaWYgc28gcmVhZCBpdCBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAgIDogJygobCYmbC5oYXNPd25Qcm9wZXJ0eShcIicgKyBrZXkgKyAnXCIpKT9sOnMpJykgKyAnLicgKyBrZXkgKyAnO1xcbic7XG4gICAgfSk7XG4gICAgY29kZSArPSAncmV0dXJuIHM7JztcblxuICAgIC8qIGpzaGludCAtVzA1NCAqL1xuICAgIHZhciBldmFsZWRGbkdldHRlciA9IG5ldyBGdW5jdGlvbigncycsICdsJywgY29kZSk7IC8vIHM9c2NvcGUsIGw9bG9jYWxzXG4gICAgLyoganNoaW50ICtXMDU0ICovXG4gICAgZXZhbGVkRm5HZXR0ZXIudG9TdHJpbmcgPSB2YWx1ZUZuKGNvZGUpO1xuXG4gICAgZm4gPSBldmFsZWRGbkdldHRlcjtcbiAgfVxuXG4gIGZuLnNoYXJlZEdldHRlciA9IHRydWU7XG4gIGZuLmFzc2lnbiA9IGZ1bmN0aW9uKHNlbGYsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHNldHRlcihzZWxmLCBwYXRoLCB2YWx1ZSwgcGF0aCk7XG4gIH07XG4gIGdldHRlckZuQ2FjaGVbcGF0aF0gPSBmbjtcbiAgcmV0dXJuIGZuO1xufVxuXG52YXIgb2JqZWN0VmFsdWVPZiA9IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZjtcblxuZnVuY3Rpb24gZ2V0VmFsdWVPZih2YWx1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZS52YWx1ZU9mKSA/IHZhbHVlLnZhbHVlT2YoKSA6IG9iamVjdFZhbHVlT2YuY2FsbCh2YWx1ZSk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRwYXJzZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogICB2YXIgZ2V0dGVyID0gJHBhcnNlKCd1c2VyLm5hbWUnKTtcbiAqICAgdmFyIHNldHRlciA9IGdldHRlci5hc3NpZ247XG4gKiAgIHZhciBjb250ZXh0ID0ge3VzZXI6e25hbWU6J2FuZ3VsYXInfX07XG4gKiAgIHZhciBsb2NhbHMgPSB7dXNlcjp7bmFtZTonbG9jYWwnfX07XG4gKlxuICogICBleHBlY3QoZ2V0dGVyKGNvbnRleHQpKS50b0VxdWFsKCdhbmd1bGFyJyk7XG4gKiAgIHNldHRlcihjb250ZXh0LCAnbmV3VmFsdWUnKTtcbiAqICAgZXhwZWN0KGNvbnRleHQudXNlci5uYW1lKS50b0VxdWFsKCduZXdWYWx1ZScpO1xuICogICBleHBlY3QoZ2V0dGVyKGNvbnRleHQsIGxvY2FscykpLnRvRXF1YWwoJ2xvY2FsJyk7XG4gKiBgYGBcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gKlxuICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gKiAgICAgIGBjb250ZXh0YC5cbiAqXG4gKiAgICBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gYWxzbyBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogICAgICAqIGBsaXRlcmFsYCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24ncyB0b3AtbGV2ZWwgbm9kZSBpcyBhIEphdmFTY3JpcHRcbiAqICAgICAgICBsaXRlcmFsLlxuICogICAgICAqIGBjb25zdGFudGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB3aGV0aGVyIHRoZSBleHByZXNzaW9uIGlzIG1hZGUgZW50aXJlbHkgb2YgSmF2YVNjcmlwdFxuICogICAgICAgIGNvbnN0YW50IGxpdGVyYWxzLlxuICogICAgICAqIGBhc3NpZ25gIOKAkyBgez9mdW5jdGlvbihjb250ZXh0LCB2YWx1ZSl9YCDigJMgaWYgdGhlIGV4cHJlc3Npb24gaXMgYXNzaWduYWJsZSwgdGhpcyB3aWxsIGJlXG4gKiAgICAgICAgc2V0IHRvIGEgZnVuY3Rpb24gdG8gY2hhbmdlIGl0cyB2YWx1ZSBvbiB0aGUgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHBhcnNlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkcGFyc2VQcm92aWRlcmAgY2FuIGJlIHVzZWQgZm9yIGNvbmZpZ3VyaW5nIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmcuJHBhcnNlICRwYXJzZX1cbiAqICBzZXJ2aWNlLlxuICovXG5mdW5jdGlvbiAkUGFyc2VQcm92aWRlcigpIHtcbiAgdmFyIGNhY2hlID0gY3JlYXRlTWFwKCk7XG5cbiAgdmFyICRwYXJzZU9wdGlvbnMgPSB7XG4gICAgY3NwOiBmYWxzZVxuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckZmlsdGVyJywgJyRzbmlmZmVyJywgZnVuY3Rpb24oJGZpbHRlciwgJHNuaWZmZXIpIHtcbiAgICAkcGFyc2VPcHRpb25zLmNzcCA9ICRzbmlmZmVyLmNzcDtcblxuICAgIGZ1bmN0aW9uIHdyYXBTaGFyZWRFeHByZXNzaW9uKGV4cCkge1xuICAgICAgdmFyIHdyYXBwZWQgPSBleHA7XG5cbiAgICAgIGlmIChleHAuc2hhcmVkR2V0dGVyKSB7XG4gICAgICAgIHdyYXBwZWQgPSBmdW5jdGlvbiAkcGFyc2VXcmFwcGVyKHNlbGYsIGxvY2Fscykge1xuICAgICAgICAgIHJldHVybiBleHAoc2VsZiwgbG9jYWxzKTtcbiAgICAgICAgfTtcbiAgICAgICAgd3JhcHBlZC5saXRlcmFsID0gZXhwLmxpdGVyYWw7XG4gICAgICAgIHdyYXBwZWQuY29uc3RhbnQgPSBleHAuY29uc3RhbnQ7XG4gICAgICAgIHdyYXBwZWQuYXNzaWduID0gZXhwLmFzc2lnbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdyYXBwZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICRwYXJzZShleHAsIGludGVyY2VwdG9yRm4pIHtcbiAgICAgIHZhciBwYXJzZWRFeHByZXNzaW9uLCBvbmVUaW1lLCBjYWNoZUtleTtcblxuICAgICAgc3dpdGNoICh0eXBlb2YgZXhwKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgY2FjaGVLZXkgPSBleHAgPSBleHAudHJpbSgpO1xuXG4gICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbiA9IGNhY2hlW2NhY2hlS2V5XTtcblxuICAgICAgICAgIGlmICghcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgaWYgKGV4cC5jaGFyQXQoMCkgPT09ICc6JyAmJiBleHAuY2hhckF0KDEpID09PSAnOicpIHtcbiAgICAgICAgICAgICAgb25lVGltZSA9IHRydWU7XG4gICAgICAgICAgICAgIGV4cCA9IGV4cC5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsZXhlciA9IG5ldyBMZXhlcigkcGFyc2VPcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKGxleGVyLCAkZmlsdGVyLCAkcGFyc2VPcHRpb25zKTtcbiAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSBwYXJzZXIucGFyc2UoZXhwKTtcblxuICAgICAgICAgICAgaWYgKHBhcnNlZEV4cHJlc3Npb24uY29uc3RhbnQpIHtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBjb25zdGFudFdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9uZVRpbWUpIHtcbiAgICAgICAgICAgICAgLy9vbmVUaW1lIGlzIG5vdCBwYXJ0IG9mIHRoZSBleHAgcGFzc2VkIHRvIHRoZSBQYXJzZXIgc28gd2UgbWF5IGhhdmUgdG9cbiAgICAgICAgICAgICAgLy93cmFwIHRoZSBwYXJzZWRFeHByZXNzaW9uIGJlZm9yZSBhZGRpbmcgYSAkJHdhdGNoRGVsZWdhdGVcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbiA9IHdyYXBTaGFyZWRFeHByZXNzaW9uKHBhcnNlZEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24ubGl0ZXJhbCA/XG4gICAgICAgICAgICAgICAgb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIDogb25lVGltZVdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzKSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gcGFyc2VkRXhwcmVzc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKHBhcnNlZEV4cHJlc3Npb24sIGludGVyY2VwdG9yRm4pO1xuXG4gICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3IoZXhwLCBpbnRlcmNlcHRvckZuKTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihub29wLCBpbnRlcmNlcHRvckZuKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY29sbGVjdEV4cHJlc3Npb25JbnB1dHMoaW5wdXRzLCBsaXN0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgaW5wdXQgPSBpbnB1dHNbaV07XG4gICAgICAgIGlmICghaW5wdXQuY29uc3RhbnQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRzKSB7XG4gICAgICAgICAgICBjb2xsZWN0RXhwcmVzc2lvbklucHV0cyhpbnB1dC5pbnB1dHMsIGxpc3QpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobGlzdC5pbmRleE9mKGlucHV0KSA9PT0gLTEpIHsgLy8gVE9ETyhwZXJmKSBjYW4gd2UgZG8gYmV0dGVyP1xuICAgICAgICAgICAgbGlzdC5wdXNoKGlucHV0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdWYWx1ZSwgb2xkVmFsdWVPZlZhbHVlKSB7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PSBudWxsIHx8IG9sZFZhbHVlT2ZWYWx1ZSA9PSBudWxsKSB7IC8vIG51bGwvdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gb2xkVmFsdWVPZlZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgIC8vIGF0dGVtcHQgdG8gY29udmVydCB0aGUgdmFsdWUgdG8gYSBwcmltaXRpdmUgdHlwZVxuICAgICAgICAvLyBUT0RPKGRvY3MpOiBhZGQgYSBub3RlIHRvIGRvY3MgdGhhdCBieSBpbXBsZW1lbnRpbmcgdmFsdWVPZiBldmVuIG9iamVjdHMgYW5kIGFycmF5cyBjYW5cbiAgICAgICAgLy8gICAgICAgICAgICAgYmUgY2hlYXBseSBkaXJ0eS1jaGVja2VkXG4gICAgICAgIG5ld1ZhbHVlID0gZ2V0VmFsdWVPZihuZXdWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAvLyBvYmplY3RzL2FycmF5cyBhcmUgbm90IHN1cHBvcnRlZCAtIGRlZXAtd2F0Y2hpbmcgdGhlbSB3b3VsZCBiZSB0b28gZXhwZW5zaXZlXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmFsbC10aHJvdWdoIHRvIHRoZSBwcmltaXRpdmUgZXF1YWxpdHkgY2hlY2tcbiAgICAgIH1cblxuICAgICAgLy9QcmltaXRpdmUgb3IgTmFOXG4gICAgICByZXR1cm4gbmV3VmFsdWUgPT09IG9sZFZhbHVlT2ZWYWx1ZSB8fCAobmV3VmFsdWUgIT09IG5ld1ZhbHVlICYmIG9sZFZhbHVlT2ZWYWx1ZSAhPT0gb2xkVmFsdWVPZlZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnB1dHNXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBpbnB1dEV4cHJlc3Npb25zID0gcGFyc2VkRXhwcmVzc2lvbi4kJGlucHV0cyB8fFxuICAgICAgICAgICAgICAgICAgICAocGFyc2VkRXhwcmVzc2lvbi4kJGlucHV0cyA9IGNvbGxlY3RFeHByZXNzaW9uSW5wdXRzKHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzLCBbXSkpO1xuXG4gICAgICB2YXIgbGFzdFJlc3VsdDtcblxuICAgICAgaWYgKGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBvbGRJbnB1dFZhbHVlID0gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjazsgLy8gaW5pdCB0byBzb21ldGhpbmcgdW5pcXVlIHNvIHRoYXQgZXF1YWxzIGNoZWNrIGZhaWxzXG4gICAgICAgIGlucHV0RXhwcmVzc2lvbnMgPSBpbnB1dEV4cHJlc3Npb25zWzBdO1xuICAgICAgICByZXR1cm4gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dFdhdGNoKHNjb3BlKSB7XG4gICAgICAgICAgdmFyIG5ld0lucHV0VmFsdWUgPSBpbnB1dEV4cHJlc3Npb25zKHNjb3BlKTtcbiAgICAgICAgICBpZiAoIWV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3SW5wdXRWYWx1ZSwgb2xkSW5wdXRWYWx1ZSkpIHtcbiAgICAgICAgICAgIGxhc3RSZXN1bHQgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWUgPSBuZXdJbnB1dFZhbHVlICYmIGdldFZhbHVlT2YobmV3SW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldID0gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjazsgLy8gaW5pdCB0byBzb21ldGhpbmcgdW5pcXVlIHNvIHRoYXQgZXF1YWxzIGNoZWNrIGZhaWxzXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzY29wZS4kd2F0Y2goZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0c1dhdGNoKHNjb3BlKSB7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW5wdXRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIG5ld0lucHV0VmFsdWUgPSBpbnB1dEV4cHJlc3Npb25zW2ldKHNjb3BlKTtcbiAgICAgICAgICBpZiAoY2hhbmdlZCB8fCAoY2hhbmdlZCA9ICFleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld0lucHV0VmFsdWUsIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSkpKSB7XG4gICAgICAgICAgICBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0gPSBuZXdJbnB1dFZhbHVlICYmIGdldFZhbHVlT2YobmV3SW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICBsYXN0UmVzdWx0ID0gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lVGltZVdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgdmFyIHVud2F0Y2gsIGxhc3RWYWx1ZTtcbiAgICAgIHJldHVybiB1bndhdGNoID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG9uZVRpbWVXYXRjaChzY29wZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICB9LCBmdW5jdGlvbiBvbmVUaW1lTGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHtcbiAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgdW53YXRjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBvYmplY3RFcXVhbGl0eSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciB1bndhdGNoLCBsYXN0VmFsdWU7XG4gICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBvbmVUaW1lV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgZnVuY3Rpb24gb25lVGltZUxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7XG4gICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHZhbHVlLCBvbGQsIHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBbGxEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0FsbERlZmluZWQobGFzdFZhbHVlKSkgdW53YXRjaCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBvYmplY3RFcXVhbGl0eSk7XG5cbiAgICAgIGZ1bmN0aW9uIGlzQWxsRGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICB2YXIgYWxsRGVmaW5lZCA9IHRydWU7XG4gICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIGlmICghaXNEZWZpbmVkKHZhbCkpIGFsbERlZmluZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhbGxEZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaDtcbiAgICAgIHJldHVybiB1bndhdGNoID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2goc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgZnVuY3Rpb24gY29uc3RhbnRMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHVud2F0Y2goKTtcbiAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKSB7XG4gICAgICBpZiAoIWludGVyY2VwdG9yRm4pIHJldHVybiBwYXJzZWRFeHByZXNzaW9uO1xuXG4gICAgICB2YXIgZm4gPSBmdW5jdGlvbiBpbnRlcmNlcHRlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2Fscykge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJjZXB0b3JGbih2YWx1ZSwgc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgIC8vIHdlIG9ubHkgcmV0dXJuIHRoZSBpbnRlcmNlcHRvcidzIHJlc3VsdCBpZiB0aGVcbiAgICAgICAgLy8gaW5pdGlhbCB2YWx1ZSBpcyBkZWZpbmVkIChmb3IgYmluZC1vbmNlKVxuICAgICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSA/IHJlc3VsdCA6IHZhbHVlO1xuICAgICAgfTtcblxuICAgICAgLy8gUHJvcGFnYXRlICQkd2F0Y2hEZWxlZ2F0ZXMgb3RoZXIgdGhlbiBpbnB1dHNXYXRjaERlbGVnYXRlXG4gICAgICBpZiAocGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgJiZcbiAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSAhPT0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZSkge1xuICAgICAgICBmbi4kJHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZTtcbiAgICAgIH0gZWxzZSBpZiAoIWludGVyY2VwdG9yRm4uJHN0YXRlZnVsKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGludGVyY2VwdG9yLCBidXQgbm8gd2F0Y2hEZWxlZ2F0ZSB0aGVuIHRyZWF0IHRoZSBpbnRlcmNlcHRvciBsaWtlXG4gICAgICAgIC8vIHdlIHRyZWF0IGZpbHRlcnMgLSBpdCBpcyBhc3N1bWVkIHRvIGJlIGEgcHVyZSBmdW5jdGlvbiB1bmxlc3MgZmxhZ2dlZCB3aXRoICRzdGF0ZWZ1bFxuICAgICAgICBmbi4kJHdhdGNoRGVsZWdhdGUgPSBpbnB1dHNXYXRjaERlbGVnYXRlO1xuICAgICAgICBmbi5pbnB1dHMgPSBbcGFyc2VkRXhwcmVzc2lvbl07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcVxuICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgcHJvbWlzZS9kZWZlcnJlZCBpbXBsZW1lbnRhdGlvbiBpbnNwaXJlZCBieSBbS3JpcyBLb3dhbCdzIFFdKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkuXG4gKlxuICogJHEgY2FuIGJlIHVzZWQgaW4gdHdvIGZhc2hpb25zIC0tLSBvbmUgd2hpY2ggaXMgbW9yZSBzaW1pbGFyIHRvIEtyaXMgS293YWwncyBRIG9yIGpRdWVyeSdzIERlZmVycmVkXG4gKiBpbXBsZW1lbnRhdGlvbnMsIGFuZCB0aGUgb3RoZXIgd2hpY2ggcmVzZW1ibGVzIEVTNiBwcm9taXNlcyB0byBzb21lIGRlZ3JlZS5cbiAqXG4gKiAjICRxIGNvbnN0cnVjdG9yXG4gKlxuICogVGhlIHN0cmVhbWxpbmVkIEVTNiBzdHlsZSBwcm9taXNlIGlzIGVzc2VudGlhbGx5IGp1c3QgdXNpbmcgJHEgYXMgYSBjb25zdHJ1Y3RvciB3aGljaCB0YWtlcyBhIGByZXNvbHZlcmBcbiAqIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4gVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSBuYXRpdmUgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBmcm9tIEVTNiBIYXJtb255LFxuICogc2VlIFtNRE5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UpLlxuICpcbiAqIFdoaWxlIHRoZSBjb25zdHJ1Y3Rvci1zdHlsZSB1c2UgaXMgc3VwcG9ydGVkLCBub3QgYWxsIG9mIHRoZSBzdXBwb3J0aW5nIG1ldGhvZHMgZnJvbSBFUzYgSGFybW9ueSBwcm9taXNlcyBhcmVcbiAqIGF2YWlsYWJsZSB5ZXQuXG4gKlxuICogSXQgY2FuIGJlIHVzZWQgbGlrZSBzbzpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YFxuICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuXG4gKlxuICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHtcbiAqICAgICAvLyBwZXJmb3JtIHNvbWUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbiwgcmVzb2x2ZSBvciByZWplY3QgdGhlIHByb21pc2Ugd2hlbiBhcHByb3ByaWF0ZS5cbiAqICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gKiAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgICAgcmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAqICAgICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgICByZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgICAgfVxuICogICAgICAgfSwgMTAwMCk7XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogTm90ZTogcHJvZ3Jlc3Mvbm90aWZ5IGNhbGxiYWNrcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgdmlhIHRoZSBFUzYtc3R5bGUgaW50ZXJmYWNlLlxuICpcbiAqIEhvd2V2ZXIsIHRoZSBtb3JlIHRyYWRpdGlvbmFsIENvbW1vbkpTLXN0eWxlIHVzYWdlIGlzIHN0aWxsIGF2YWlsYWJsZSwgYW5kIGRvY3VtZW50ZWQgYmVsb3cuXG4gKlxuICogW1RoZSBDb21tb25KUyBQcm9taXNlIHByb3Bvc2FsXShodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcykgZGVzY3JpYmVzIGEgcHJvbWlzZSBhcyBhblxuICogaW50ZXJmYWNlIGZvciBpbnRlcmFjdGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHJlc3VsdCBvZiBhbiBhY3Rpb24gdGhhdCBpc1xuICogcGVyZm9ybWVkIGFzeW5jaHJvbm91c2x5LCBhbmQgbWF5IG9yIG1heSBub3QgYmUgZmluaXNoZWQgYXQgYW55IGdpdmVuIHBvaW50IGluIHRpbWUuXG4gKlxuICogRnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgZGVhbGluZyB3aXRoIGVycm9yIGhhbmRsaW5nLCBkZWZlcnJlZCBhbmQgcHJvbWlzZSBBUElzIGFyZSB0b1xuICogYXN5bmNocm9ub3VzIHByb2dyYW1taW5nIHdoYXQgYHRyeWAsIGBjYXRjaGAgYW5kIGB0aHJvd2Aga2V5d29yZHMgYXJlIHRvIHN5bmNocm9ub3VzIHByb2dyYW1taW5nLlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBva1RvR3JlZXRgXG4gKiAgIC8vIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZSAodGhleSBjb3VsZCBoYXZlIGJlZW4gaW5qZWN0ZWQgb3IgcGFzc2VkIGluKS5cbiAqXG4gKiAgIGZ1bmN0aW9uIGFzeW5jR3JlZXQobmFtZSkge1xuICogICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKlxuICogICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICBkZWZlcnJlZC5ub3RpZnkoJ0Fib3V0IHRvIGdyZWV0ICcgKyBuYW1lICsgJy4nKTtcbiAqXG4gKiAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7XG4gKiAgICAgICB9IGVsc2Uge1xuICogICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgIH1cbiAqICAgICB9LCAxMDAwKTtcbiAqXG4gKiAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0sIGZ1bmN0aW9uKHVwZGF0ZSkge1xuICogICAgIGFsZXJ0KCdHb3Qgbm90aWZpY2F0aW9uOiAnICsgdXBkYXRlKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBBdCBmaXJzdCBpdCBtaWdodCBub3QgYmUgb2J2aW91cyB3aHkgdGhpcyBleHRyYSBjb21wbGV4aXR5IGlzIHdvcnRoIHRoZSB0cm91YmxlLiBUaGUgcGF5b2ZmXG4gKiBjb21lcyBpbiB0aGUgd2F5IG9mIGd1YXJhbnRlZXMgdGhhdCBwcm9taXNlIGFuZCBkZWZlcnJlZCBBUElzIG1ha2UsIHNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC91bmNvbW1vbmpzL2Jsb2IvbWFzdGVyL3Byb21pc2VzL3NwZWNpZmljYXRpb24ubWQuXG4gKlxuICogQWRkaXRpb25hbGx5IHRoZSBwcm9taXNlIGFwaSBhbGxvd3MgZm9yIGNvbXBvc2l0aW9uIHRoYXQgaXMgdmVyeSBoYXJkIHRvIGRvIHdpdGggdGhlXG4gKiB0cmFkaXRpb25hbCBjYWxsYmFjayAoW0NQU10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db250aW51YXRpb24tcGFzc2luZ19zdHlsZSkpIGFwcHJvYWNoLlxuICogRm9yIG1vcmUgb24gdGhpcyBwbGVhc2Ugc2VlIHRoZSBbUSBkb2N1bWVudGF0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpIGVzcGVjaWFsbHkgdGhlXG4gKiBzZWN0aW9uIG9uIHNlcmlhbCBvciBwYXJhbGxlbCBqb2luaW5nIG9mIHByb21pc2VzLlxuICpcbiAqICMgVGhlIERlZmVycmVkIEFQSVxuICpcbiAqIEEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkIGlzIGNvbnN0cnVjdGVkIGJ5IGNhbGxpbmcgYCRxLmRlZmVyKClgLlxuICpcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBkZWZlcnJlZCBvYmplY3QgaXMgdG8gZXhwb3NlIHRoZSBhc3NvY2lhdGVkIFByb21pc2UgaW5zdGFuY2UgYXMgd2VsbCBhcyBBUElzXG4gKiB0aGF0IGNhbiBiZSB1c2VkIGZvciBzaWduYWxpbmcgdGhlIHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsIGNvbXBsZXRpb24sIGFzIHdlbGwgYXMgdGhlIHN0YXR1c1xuICogb2YgdGhlIHRhc2suXG4gKlxuICogKipNZXRob2RzKipcbiAqXG4gKiAtIGByZXNvbHZlKHZhbHVlKWAg4oCTIHJlc29sdmVzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHZhbHVlYC4gSWYgdGhlIHZhbHVlIGlzIGEgcmVqZWN0aW9uXG4gKiAgIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YCwgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpbnN0ZWFkLlxuICogLSBgcmVqZWN0KHJlYXNvbilgIOKAkyByZWplY3RzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHJlYXNvbmAuIFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICogICByZXNvbHZpbmcgaXQgd2l0aCBhIHJlamVjdGlvbiBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAuXG4gKiAtIGBub3RpZnkodmFsdWUpYCAtIHByb3ZpZGVzIHVwZGF0ZXMgb24gdGhlIHN0YXR1cyBvZiB0aGUgcHJvbWlzZSdzIGV4ZWN1dGlvbi4gVGhpcyBtYXkgYmUgY2FsbGVkXG4gKiAgIG11bHRpcGxlIHRpbWVzIGJlZm9yZSB0aGUgcHJvbWlzZSBpcyBlaXRoZXIgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKlxuICogKipQcm9wZXJ0aWVzKipcbiAqXG4gKiAtIHByb21pc2Ug4oCTIGB7UHJvbWlzZX1gIOKAkyBwcm9taXNlIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZWZlcnJlZC5cbiAqXG4gKlxuICogIyBUaGUgUHJvbWlzZSBBUElcbiAqXG4gKiBBIG5ldyBwcm9taXNlIGluc3RhbmNlIGlzIGNyZWF0ZWQgd2hlbiBhIGRlZmVycmVkIGluc3RhbmNlIGlzIGNyZWF0ZWQgYW5kIGNhbiBiZSByZXRyaWV2ZWQgYnlcbiAqIGNhbGxpbmcgYGRlZmVycmVkLnByb21pc2VgLlxuICpcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBwcm9taXNlIG9iamVjdCBpcyB0byBhbGxvdyBmb3IgaW50ZXJlc3RlZCBwYXJ0aWVzIHRvIGdldCBhY2Nlc3MgdG8gdGhlIHJlc3VsdFxuICogb2YgdGhlIGRlZmVycmVkIHRhc2sgd2hlbiBpdCBjb21wbGV0ZXMuXG4gKlxuICogKipNZXRob2RzKipcbiAqXG4gKiAtIGB0aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaywgbm90aWZ5Q2FsbGJhY2spYCDigJMgcmVnYXJkbGVzcyBvZiB3aGVuIHRoZSBwcm9taXNlIHdhcyBvclxuICogICB3aWxsIGJlIHJlc29sdmVkIG9yIHJlamVjdGVkLCBgdGhlbmAgY2FsbHMgb25lIG9mIHRoZSBzdWNjZXNzIG9yIGVycm9yIGNhbGxiYWNrcyBhc3luY2hyb25vdXNseVxuICogICBhcyBzb29uIGFzIHRoZSByZXN1bHQgaXMgYXZhaWxhYmxlLiBUaGUgY2FsbGJhY2tzIGFyZSBjYWxsZWQgd2l0aCBhIHNpbmdsZSBhcmd1bWVudDogdGhlIHJlc3VsdFxuICogICBvciByZWplY3Rpb24gcmVhc29uLiBBZGRpdGlvbmFsbHksIHRoZSBub3RpZnkgY2FsbGJhY2sgbWF5IGJlIGNhbGxlZCB6ZXJvIG9yIG1vcmUgdGltZXMgdG9cbiAqICAgcHJvdmlkZSBhIHByb2dyZXNzIGluZGljYXRpb24sIGJlZm9yZSB0aGUgcHJvbWlzZSBpcyByZXNvbHZlZCBvciByZWplY3RlZC5cbiAqXG4gKiAgIFRoaXMgbWV0aG9kICpyZXR1cm5zIGEgbmV3IHByb21pc2UqIHdoaWNoIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZVxuICogICBgc3VjY2Vzc0NhbGxiYWNrYCwgYGVycm9yQ2FsbGJhY2tgLiBJdCBhbHNvIG5vdGlmaWVzIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZVxuICogICBgbm90aWZ5Q2FsbGJhY2tgIG1ldGhvZC4gVGhlIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIG9yIHJlamVjdGVkIGZyb20gdGhlIG5vdGlmeUNhbGxiYWNrXG4gKiAgIG1ldGhvZC5cbiAqXG4gKiAtIGBjYXRjaChlcnJvckNhbGxiYWNrKWAg4oCTIHNob3J0aGFuZCBmb3IgYHByb21pc2UudGhlbihudWxsLCBlcnJvckNhbGxiYWNrKWBcbiAqXG4gKiAtIGBmaW5hbGx5KGNhbGxiYWNrKWAg4oCTIGFsbG93cyB5b3UgdG8gb2JzZXJ2ZSBlaXRoZXIgdGhlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBvZiBhIHByb21pc2UsXG4gKiAgIGJ1dCB0byBkbyBzbyB3aXRob3V0IG1vZGlmeWluZyB0aGUgZmluYWwgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIHRvIHJlbGVhc2UgcmVzb3VyY2VzIG9yIGRvIHNvbWVcbiAqICAgY2xlYW4tdXAgdGhhdCBuZWVkcyB0byBiZSBkb25lIHdoZXRoZXIgdGhlIHByb21pc2Ugd2FzIHJlamVjdGVkIG9yIHJlc29sdmVkLiBTZWUgdGhlIFtmdWxsXG4gKiAgIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS93aWtpL0FQSS1SZWZlcmVuY2UjcHJvbWlzZWZpbmFsbHljYWxsYmFjaykgZm9yXG4gKiAgIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogICBCZWNhdXNlIGBmaW5hbGx5YCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gSmF2YVNjcmlwdCBhbmQgcmVzZXJ2ZWQga2V5d29yZHMgYXJlIG5vdCBzdXBwb3J0ZWQgYXNcbiAqICAgcHJvcGVydHkgbmFtZXMgYnkgRVMzLCB5b3UnbGwgbmVlZCB0byBpbnZva2UgdGhlIG1ldGhvZCBsaWtlIGBwcm9taXNlWydmaW5hbGx5J10oY2FsbGJhY2spYCB0b1xuICogICBtYWtlIHlvdXIgY29kZSBJRTggYW5kIEFuZHJvaWQgMi54IGNvbXBhdGlibGUuXG4gKlxuICogIyBDaGFpbmluZyBwcm9taXNlc1xuICpcbiAqIEJlY2F1c2UgY2FsbGluZyB0aGUgYHRoZW5gIG1ldGhvZCBvZiBhIHByb21pc2UgcmV0dXJucyBhIG5ldyBkZXJpdmVkIHByb21pc2UsIGl0IGlzIGVhc2lseVxuICogcG9zc2libGUgdG8gY3JlYXRlIGEgY2hhaW4gb2YgcHJvbWlzZXM6XG4gKlxuICogYGBganNcbiAqICAgcHJvbWlzZUIgPSBwcm9taXNlQS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICogICAgIHJldHVybiByZXN1bHQgKyAxO1xuICogICB9KTtcbiAqXG4gKiAgIC8vIHByb21pc2VCIHdpbGwgYmUgcmVzb2x2ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgcHJvbWlzZUEgaXMgcmVzb2x2ZWQgYW5kIGl0cyB2YWx1ZVxuICogICAvLyB3aWxsIGJlIHRoZSByZXN1bHQgb2YgcHJvbWlzZUEgaW5jcmVtZW50ZWQgYnkgMVxuICogYGBgXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gY3JlYXRlIGNoYWlucyBvZiBhbnkgbGVuZ3RoIGFuZCBzaW5jZSBhIHByb21pc2UgY2FuIGJlIHJlc29sdmVkIHdpdGggYW5vdGhlclxuICogcHJvbWlzZSAod2hpY2ggd2lsbCBkZWZlciBpdHMgcmVzb2x1dGlvbiBmdXJ0aGVyKSwgaXQgaXMgcG9zc2libGUgdG8gcGF1c2UvZGVmZXIgcmVzb2x1dGlvbiBvZlxuICogdGhlIHByb21pc2VzIGF0IGFueSBwb2ludCBpbiB0aGUgY2hhaW4uIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gaW1wbGVtZW50IHBvd2VyZnVsIEFQSXMgbGlrZVxuICogJGh0dHAncyByZXNwb25zZSBpbnRlcmNlcHRvcnMuXG4gKlxuICpcbiAqICMgRGlmZmVyZW5jZXMgYmV0d2VlbiBLcmlzIEtvd2FsJ3MgUSBhbmQgJHFcbiAqXG4gKiAgVGhlcmUgYXJlIHR3byBtYWluIGRpZmZlcmVuY2VzOlxuICpcbiAqIC0gJHEgaXMgaW50ZWdyYXRlZCB3aXRoIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZX0gU2NvcGUgbW9kZWwgb2JzZXJ2YXRpb25cbiAqICAgbWVjaGFuaXNtIGluIGFuZ3VsYXIsIHdoaWNoIG1lYW5zIGZhc3RlciBwcm9wYWdhdGlvbiBvZiByZXNvbHV0aW9uIG9yIHJlamVjdGlvbiBpbnRvIHlvdXJcbiAqICAgbW9kZWxzIGFuZCBhdm9pZGluZyB1bm5lY2Vzc2FyeSBicm93c2VyIHJlcGFpbnRzLCB3aGljaCB3b3VsZCByZXN1bHQgaW4gZmxpY2tlcmluZyBVSS5cbiAqIC0gUSBoYXMgbWFueSBtb3JlIGZlYXR1cmVzIHRoYW4gJHEsIGJ1dCB0aGF0IGNvbWVzIGF0IGEgY29zdCBvZiBieXRlcy4gJHEgaXMgdGlueSwgYnV0IGNvbnRhaW5zXG4gKiAgIGFsbCB0aGUgaW1wb3J0YW50IGZ1bmN0aW9uYWxpdHkgbmVlZGVkIGZvciBjb21tb24gYXN5bmMgdGFza3MuXG4gKlxuICogICMgVGVzdGluZ1xuICpcbiAqICBgYGBqc1xuICogICAgaXQoJ3Nob3VsZCBzaW11bGF0ZSBwcm9taXNlJywgaW5qZWN0KGZ1bmN0aW9uKCRxLCAkcm9vdFNjb3BlKSB7XG4gKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKiAgICAgIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgICAgdmFyIHJlc29sdmVkVmFsdWU7XG4gKlxuICogICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsgcmVzb2x2ZWRWYWx1ZSA9IHZhbHVlOyB9KTtcbiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvQmVVbmRlZmluZWQoKTtcbiAqXG4gKiAgICAgIC8vIFNpbXVsYXRlIHJlc29sdmluZyBvZiBwcm9taXNlXG4gKiAgICAgIGRlZmVycmVkLnJlc29sdmUoMTIzKTtcbiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LlxuICogICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudCB0aGUgcHJvbWlzZSBBUEkgdG8gYWx3YXlzIGJlIGFzeW5jLCB3aGV0aGVyIG9yIG5vdFxuICogICAgICAvLyBpdCBnb3QgY2FsbGVkIHN5bmNocm9ub3VzbHkgb3IgYXN5bmNocm9ub3VzbHkuXG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBQcm9wYWdhdGUgcHJvbWlzZSByZXNvbHV0aW9uIHRvICd0aGVuJyBmdW5jdGlvbnMgdXNpbmcgJGFwcGx5KCkuXG4gKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0VxdWFsKDEyMyk7XG4gKiAgICB9KSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbiwgZnVuY3Rpb24pfSByZXNvbHZlciBGdW5jdGlvbiB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgcmVzb2x2aW5nIG9yXG4gKiAgIHJlamVjdGluZyB0aGUgbmV3bHkgY3JlYXRlZCBwcm9taXNlLiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlXG4gKiAgIHByb21pc2UsIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS5cbiAqL1xuZnVuY3Rpb24gJFFQcm92aWRlcigpIHtcblxuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlcik7XG4gIH1dO1xufVxuXG5mdW5jdGlvbiAkJFFQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRicm93c2VyLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIuZGVmZXIoY2FsbGJhY2spO1xuICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTtcbiAgfV07XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHByb21pc2UgbWFuYWdlci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uKX0gbmV4dFRpY2sgRnVuY3Rpb24gZm9yIGV4ZWN1dGluZyBmdW5jdGlvbnMgaW4gdGhlIG5leHQgdHVybi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uKil9IGV4Y2VwdGlvbkhhbmRsZXIgRnVuY3Rpb24gaW50byB3aGljaCB1bmV4cGVjdGVkIGV4Y2VwdGlvbnMgYXJlIHBhc3NlZCBmb3JcbiAqICAgICBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuXG4gKi9cbmZ1bmN0aW9uIHFGYWN0b3J5KG5leHRUaWNrLCBleGNlcHRpb25IYW5kbGVyKSB7XG4gIHZhciAkcU1pbkVyciA9IG1pbkVycignJHEnLCBUeXBlRXJyb3IpO1xuICBmdW5jdGlvbiBjYWxsT25jZShzZWxmLCByZXNvbHZlRm4sIHJlamVjdEZuKSB7XG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIHdyYXAoZm4pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwoc2VsZiwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3dyYXAocmVzb2x2ZUZuKSwgd3JhcChyZWplY3RGbildO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmcuJHEjZGVmZXJcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQuXG4gICAqL1xuICB2YXIgZGVmZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gUHJvbWlzZSgpIHtcbiAgICB0aGlzLiQkc3RhdGUgPSB7IHN0YXR1czogMCB9O1xuICB9XG5cbiAgUHJvbWlzZS5wcm90b3R5cGUgPSB7XG4gICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFjaykge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgICB0aGlzLiQkc3RhdGUucGVuZGluZyA9IHRoaXMuJCRzdGF0ZS5wZW5kaW5nIHx8IFtdO1xuICAgICAgdGhpcy4kJHN0YXRlLnBlbmRpbmcucHVzaChbcmVzdWx0LCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvZ3Jlc3NCYWNrXSk7XG4gICAgICBpZiAodGhpcy4kJHN0YXRlLnN0YXR1cyA+IDApIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHRoaXMuJCRzdGF0ZSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIFwiZmluYWxseVwiOiBmdW5jdGlvbihjYWxsYmFjaywgcHJvZ3Jlc3NCYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgdHJ1ZSwgY2FsbGJhY2spO1xuICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGVycm9yLCBmYWxzZSwgY2FsbGJhY2spO1xuICAgICAgfSwgcHJvZ3Jlc3NCYWNrKTtcbiAgICB9XG4gIH07XG5cbiAgLy9GYXN0ZXIsIG1vcmUgYmFzaWMgdGhhbiBhbmd1bGFyLmJpbmQgaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhci1iaW5kLXZzLWN1c3RvbS12cy1uYXRpdmVcbiAgZnVuY3Rpb24gc2ltcGxlQmluZChjb250ZXh0LCBmbikge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgZm4uY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIHZhciBmbiwgcHJvbWlzZSwgcGVuZGluZztcblxuICAgIHBlbmRpbmcgPSBzdGF0ZS5wZW5kaW5nO1xuICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzdGF0ZS5wZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBlbmRpbmcubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgcHJvbWlzZSA9IHBlbmRpbmdbaV1bMF07XG4gICAgICBmbiA9IHBlbmRpbmdbaV1bc3RhdGUuc3RhdHVzXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZShmbihzdGF0ZS52YWx1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLnN0YXR1cyA9PT0gMSkge1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZShzdGF0ZS52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvbWlzZS5yZWplY3Qoc3RhdGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgfHwgIXN0YXRlLnBlbmRpbmcpIHJldHVybjtcbiAgICBzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBuZXh0VGljayhmdW5jdGlvbigpIHsgcHJvY2Vzc1F1ZXVlKHN0YXRlKTsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBEZWZlcnJlZCgpIHtcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgpO1xuICAgIC8vTmVjZXNzYXJ5IHRvIHN1cHBvcnQgdW5ib3VuZCBleGVjdXRpb24gOi9cbiAgICB0aGlzLnJlc29sdmUgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMucmVzb2x2ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMucmVqZWN0KTtcbiAgICB0aGlzLm5vdGlmeSA9IHNpbXBsZUJpbmQodGhpcywgdGhpcy5ub3RpZnkpO1xuICB9XG5cbiAgRGVmZXJyZWQucHJvdG90eXBlID0ge1xuICAgIHJlc29sdmU6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cykgcmV0dXJuO1xuICAgICAgaWYgKHZhbCA9PT0gdGhpcy5wcm9taXNlKSB7XG4gICAgICAgIHRoaXMuJCRyZWplY3QoJHFNaW5FcnIoXG4gICAgICAgICAgJ3FjeWNsZScsXG4gICAgICAgICAgXCJFeHBlY3RlZCBwcm9taXNlIHRvIGJlIHJlc29sdmVkIHdpdGggdmFsdWUgb3RoZXIgdGhhbiBpdHNlbGYgJ3swfSdcIixcbiAgICAgICAgICB2YWwpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLiQkcmVzb2x2ZSh2YWwpO1xuICAgICAgfVxuXG4gICAgfSxcblxuICAgICQkcmVzb2x2ZTogZnVuY3Rpb24odmFsKSB7XG4gICAgICB2YXIgdGhlbiwgZm5zO1xuXG4gICAgICBmbnMgPSBjYWxsT25jZSh0aGlzLCB0aGlzLiQkcmVzb2x2ZSwgdGhpcy4kJHJlamVjdCk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoKGlzT2JqZWN0KHZhbCkgfHwgaXNGdW5jdGlvbih2YWwpKSkgdGhlbiA9IHZhbCAmJiB2YWwudGhlbjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAtMTtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsLCBmbnNbMF0sIGZuc1sxXSwgdGhpcy5ub3RpZnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnZhbHVlID0gdmFsO1xuICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IDE7XG4gICAgICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGZuc1sxXShlKTtcbiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVqZWN0OiBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgIGlmICh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICAgIHRoaXMuJCRyZWplY3QocmVhc29uKTtcbiAgICB9LFxuXG4gICAgJCRyZWplY3Q6IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUudmFsdWUgPSByZWFzb247XG4gICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAyO1xuICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpO1xuICAgIH0sXG5cbiAgICBub3RpZnk6IGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5wcm9taXNlLiQkc3RhdGUucGVuZGluZztcblxuICAgICAgaWYgKCh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPD0gMCkgJiYgY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrLCByZXN1bHQ7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrc1tpXVswXTtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldWzNdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzdWx0Lm5vdGlmeShpc0Z1bmN0aW9uKGNhbGxiYWNrKSA/IGNhbGxiYWNrKHByb2dyZXNzKSA6IHByb2dyZXNzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSNyZWplY3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGByZWFzb25gLiBUaGlzIGFwaSBzaG91bGQgYmVcbiAgICogdXNlZCB0byBmb3J3YXJkIHJlamVjdGlvbiBpbiBhIGNoYWluIG9mIHByb21pc2VzLiBJZiB5b3UgYXJlIGRlYWxpbmcgd2l0aCB0aGUgbGFzdCBwcm9taXNlIGluXG4gICAqIGEgcHJvbWlzZSBjaGFpbiwgeW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgaXQuXG4gICAqXG4gICAqIFdoZW4gY29tcGFyaW5nIGRlZmVycmVkcy9wcm9taXNlcyB0byB0aGUgZmFtaWxpYXIgYmVoYXZpb3Igb2YgdHJ5L2NhdGNoL3Rocm93LCB0aGluayBvZlxuICAgKiBgcmVqZWN0YCBhcyB0aGUgYHRocm93YCBrZXl3b3JkIGluIEphdmFTY3JpcHQuIFRoaXMgYWxzbyBtZWFucyB0aGF0IGlmIHlvdSBcImNhdGNoXCIgYW4gZXJyb3IgdmlhXG4gICAqIGEgcHJvbWlzZSBlcnJvciBjYWxsYmFjayBhbmQgeW91IHdhbnQgdG8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHByb21pc2UgZGVyaXZlZCBmcm9tIHRoZVxuICAgKiBjdXJyZW50IHByb21pc2UsIHlvdSBoYXZlIHRvIFwicmV0aHJvd1wiIHRoZSBlcnJvciBieSByZXR1cm5pbmcgYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhXG4gICAqIGByZWplY3RgLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICogICAgIC8vIHN1Y2Nlc3M6IGRvIHNvbWV0aGluZyBhbmQgcmVzb2x2ZSBwcm9taXNlQlxuICAgKiAgICAgLy8gICAgICAgICAgd2l0aCB0aGUgb2xkIG9yIGEgbmV3IHJlc3VsdFxuICAgKiAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICogICAgIC8vIGVycm9yOiBoYW5kbGUgdGhlIGVycm9yIGlmIHBvc3NpYmxlIGFuZFxuICAgKiAgICAgLy8gICAgICAgIHJlc29sdmUgcHJvbWlzZUIgd2l0aCBuZXdQcm9taXNlT3JWYWx1ZSxcbiAgICogICAgIC8vICAgICAgICBvdGhlcndpc2UgZm9yd2FyZCB0aGUgcmVqZWN0aW9uIHRvIHByb21pc2VCXG4gICAqICAgICBpZiAoY2FuSGFuZGxlKHJlYXNvbikpIHtcbiAgICogICAgICAvLyBoYW5kbGUgdGhlIGVycm9yIGFuZCByZWNvdmVyXG4gICAqICAgICAgcmV0dXJuIG5ld1Byb21pc2VPclZhbHVlO1xuICAgKiAgICAgfVxuICAgKiAgICAgcmV0dXJuICRxLnJlamVjdChyZWFzb24pO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsqfSByZWFzb24gQ29uc3RhbnQsIG1lc3NhZ2UsIGV4Y2VwdGlvbiBvciBhbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZWplY3Rpb24gcmVhc29uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2UgdGhhdCB3YXMgYWxyZWFkeSByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBgcmVhc29uYC5cbiAgICovXG4gIHZhciByZWplY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7XG4gICAgcmVzdWx0LnJlamVjdChyZWFzb24pO1xuICAgIHJldHVybiByZXN1bHQucHJvbWlzZTtcbiAgfTtcblxuICB2YXIgbWFrZVByb21pc2UgPSBmdW5jdGlvbiBtYWtlUHJvbWlzZSh2YWx1ZSwgcmVzb2x2ZWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7XG4gICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICByZXN1bHQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5yZWplY3QodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNhbGxiYWNrID0gZnVuY3Rpb24gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIGlzUmVzb2x2ZWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNhbGxiYWNrT3V0cHV0ID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spKSBjYWxsYmFja091dHB1dCA9IGNhbGxiYWNrKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKGUsIGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKGlzUHJvbWlzZUxpa2UoY2FsbGJhY2tPdXRwdXQpKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2tPdXRwdXQudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKHZhbHVlLCBpc1Jlc29sdmVkKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBtYWtlUHJvbWlzZShlcnJvciwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYWtlUHJvbWlzZSh2YWx1ZSwgaXNSZXNvbHZlZCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3doZW5cbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdyYXBzIGFuIG9iamVjdCB0aGF0IG1pZ2h0IGJlIGEgdmFsdWUgb3IgYSAoM3JkIHBhcnR5KSB0aGVuLWFibGUgcHJvbWlzZSBpbnRvIGEgJHEgcHJvbWlzZS5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3UgYXJlIGRlYWxpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCBtaWdodCBvciBtaWdodCBub3QgYmUgYSBwcm9taXNlLCBvciBpZlxuICAgKiB0aGUgcHJvbWlzZSBjb21lcyBmcm9tIGEgc291cmNlIHRoYXQgY2FuJ3QgYmUgdHJ1c3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgKi9cblxuXG4gIHZhciB3aGVuID0gZnVuY3Rpb24odmFsdWUsIGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7XG4gICAgcmVzdWx0LnJlc29sdmUodmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQucHJvbWlzZS50aGVuKGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI2FsbFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29tYmluZXMgbXVsdGlwbGUgcHJvbWlzZXMgaW50byBhIHNpbmdsZSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBhbGwgb2YgdGhlIGlucHV0XG4gICAqIHByb21pc2VzIGFyZSByZXNvbHZlZC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheS48UHJvbWlzZT58T2JqZWN0LjxQcm9taXNlPn0gcHJvbWlzZXMgQW4gYXJyYXkgb3IgaGFzaCBvZiBwcm9taXNlcy5cbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBzaW5nbGUgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBhbiBhcnJheS9oYXNoIG9mIHZhbHVlcyxcbiAgICogICBlYWNoIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb21pc2UgYXQgdGhlIHNhbWUgaW5kZXgva2V5IGluIHRoZSBgcHJvbWlzZXNgIGFycmF5L2hhc2guXG4gICAqICAgSWYgYW55IG9mIHRoZSBwcm9taXNlcyBpcyByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLCB0aGlzIHJlc3VsdGluZyBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWRcbiAgICogICB3aXRoIHRoZSBzYW1lIHJlamVjdGlvbiB2YWx1ZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCksXG4gICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICByZXN1bHRzID0gaXNBcnJheShwcm9taXNlcykgPyBbXSA6IHt9O1xuXG4gICAgZm9yRWFjaChwcm9taXNlcywgZnVuY3Rpb24ocHJvbWlzZSwga2V5KSB7XG4gICAgICBjb3VudGVyKys7XG4gICAgICB3aGVuKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHJlc3VsdHMuaGFzT3duUHJvcGVydHkoa2V5KSkgcmV0dXJuO1xuICAgICAgICByZXN1bHRzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKCEoLS1jb3VudGVyKSkgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICBpZiAocmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm47XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAoY291bnRlciA9PT0gMCkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIHZhciAkUSA9IGZ1bmN0aW9uIFEocmVzb2x2ZXIpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgICB0aHJvdyAkcU1pbkVycignbm9yc2x2cicsIFwiRXhwZWN0ZWQgcmVzb2x2ZXJGbiwgZ290ICd7MH0nXCIsIHJlc29sdmVyKTtcbiAgICB9XG5cbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUSkpIHtcbiAgICAgIC8vIE1vcmUgdXNlZnVsIHdoZW4gJFEgaXMgdGhlIFByb21pc2UgaXRzZWxmLlxuICAgICAgcmV0dXJuIG5ldyBRKHJlc29sdmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVGbih2YWx1ZSkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVqZWN0Rm4ocmVhc29uKSB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICB9XG5cbiAgICByZXNvbHZlcihyZXNvbHZlRm4sIHJlamVjdEZuKTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9O1xuXG4gICRRLmRlZmVyID0gZGVmZXI7XG4gICRRLnJlamVjdCA9IHJlamVjdDtcbiAgJFEud2hlbiA9IHdoZW47XG4gICRRLmFsbCA9IGFsbDtcblxuICByZXR1cm4gJFE7XG59XG5cbmZ1bmN0aW9uICQkUkFGUHJvdmlkZXIoKSB7IC8vckFGXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckdGltZW91dCcsIGZ1bmN0aW9uKCR3aW5kb3csICR0aW1lb3V0KSB7XG4gICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgdmFyIGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gJHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICB2YXIgcmFmU3VwcG9ydGVkID0gISFyZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgdmFyIHJhZiA9IHJhZlN1cHBvcnRlZFxuICAgICAgPyBmdW5jdGlvbihmbikge1xuICAgICAgICAgIHZhciBpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB2YXIgdGltZXIgPSAkdGltZW91dChmbiwgMTYuNjYsIGZhbHNlKTsgLy8gMTAwMCAvIDYwID0gMTYuNjY2XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRpbWVyKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgcmFmLnN1cHBvcnRlZCA9IHJhZlN1cHBvcnRlZDtcblxuICAgIHJldHVybiByYWY7XG4gIH1dO1xufVxuXG4vKipcbiAqIERFU0lHTiBOT1RFU1xuICpcbiAqIFRoZSBkZXNpZ24gZGVjaXNpb25zIGJlaGluZCB0aGUgc2NvcGUgYXJlIGhlYXZpbHkgZmF2b3JlZCBmb3Igc3BlZWQgYW5kIG1lbW9yeSBjb25zdW1wdGlvbi5cbiAqXG4gKiBUaGUgdHlwaWNhbCB1c2Ugb2Ygc2NvcGUgaXMgdG8gd2F0Y2ggdGhlIGV4cHJlc3Npb25zLCB3aGljaCBtb3N0IG9mIHRoZSB0aW1lIHJldHVybiB0aGUgc2FtZVxuICogdmFsdWUgYXMgbGFzdCB0aW1lIHNvIHdlIG9wdGltaXplIHRoZSBvcGVyYXRpb24uXG4gKlxuICogQ2xvc3VyZXMgY29uc3RydWN0aW9uIGlzIGV4cGVuc2l2ZSBpbiB0ZXJtcyBvZiBzcGVlZCBhcyB3ZWxsIGFzIG1lbW9yeTpcbiAqICAgLSBObyBjbG9zdXJlcywgaW5zdGVhZCB1c2UgcHJvdG90eXBpY2FsIGluaGVyaXRhbmNlIGZvciBBUElcbiAqICAgLSBJbnRlcm5hbCBzdGF0ZSBuZWVkcyB0byBiZSBzdG9yZWQgb24gc2NvcGUgZGlyZWN0bHksIHdoaWNoIG1lYW5zIHRoYXQgcHJpdmF0ZSBzdGF0ZSBpc1xuICogICAgIGV4cG9zZWQgYXMgJCRfX19fIHByb3BlcnRpZXNcbiAqXG4gKiBMb29wIG9wZXJhdGlvbnMgYXJlIG9wdGltaXplZCBieSB1c2luZyB3aGlsZShjb3VudC0tKSB7IC4uLiB9XG4gKiAgIC0gdGhpcyBtZWFucyB0aGF0IGluIG9yZGVyIHRvIGtlZXAgdGhlIHNhbWUgb3JkZXIgb2YgZXhlY3V0aW9uIGFzIGFkZGl0aW9uIHdlIGhhdmUgdG8gYWRkXG4gKiAgICAgaXRlbXMgdG8gdGhlIGFycmF5IGF0IHRoZSBiZWdpbm5pbmcgKHVuc2hpZnQpIGluc3RlYWQgb2YgYXQgdGhlIGVuZCAocHVzaClcbiAqXG4gKiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgYW5kIHJlbW92ZWQgb2Z0ZW5cbiAqICAgLSBVc2luZyBhbiBhcnJheSB3b3VsZCBiZSBzbG93IHNpbmNlIGluc2VydHMgaW4gbWlkZGxlIGFyZSBleHBlbnNpdmUgc28gd2UgdXNlIGxpbmtlZCBsaXN0XG4gKlxuICogVGhlcmUgYXJlIGZldyB3YXRjaGVzIHRoZW4gYSBsb3Qgb2Ygb2JzZXJ2ZXJzLiBUaGlzIGlzIHdoeSB5b3UgZG9uJ3Qgd2FudCB0aGUgb2JzZXJ2ZXIgdG8gYmVcbiAqIGltcGxlbWVudGVkIGluIHRoZSBzYW1lIHdheSBhcyB3YXRjaC4gV2F0Y2ggcmVxdWlyZXMgcmV0dXJuIG9mIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHdoaWNoXG4gKiBhcmUgZXhwZW5zaXZlIHRvIGNvbnN0cnVjdC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcm9vdFNjb3BlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFByb3ZpZGVyIGZvciB0aGUgJHJvb3RTY29wZSBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyI2RpZ2VzdFR0bFxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2V0cyB0aGUgbnVtYmVyIG9mIGAkZGlnZXN0YCBpdGVyYXRpb25zIHRoZSBzY29wZSBzaG91bGQgYXR0ZW1wdCB0byBleGVjdXRlIGJlZm9yZSBnaXZpbmcgdXAgYW5kXG4gKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS5cbiAqXG4gKiBUaGUgY3VycmVudCBkZWZhdWx0IGlzIDEwIGl0ZXJhdGlvbnMuXG4gKlxuICogSW4gY29tcGxleCBhcHBsaWNhdGlvbnMgaXQncyBwb3NzaWJsZSB0aGF0IHRoZSBkZXBlbmRlbmNpZXMgYmV0d2VlbiBgJHdhdGNoYHMgd2lsbCByZXN1bHQgaW5cbiAqIHNldmVyYWwgZGlnZXN0IGl0ZXJhdGlvbnMuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwIGRpZ2VzdFxuICogaXRlcmF0aW9ucyBmb3IgaXRzIG1vZGVsIHRvIHN0YWJpbGl6ZSB0aGVuIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgd2hhdCBpcyBjYXVzaW5nIHRoZSBtb2RlbCB0b1xuICogY29udGludW91c2x5IGNoYW5nZSBkdXJpbmcgdGhlIGRpZ2VzdC5cbiAqXG4gKiBJbmNyZWFzaW5nIHRoZSBUVEwgY291bGQgaGF2ZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMsIHNvIHlvdSBzaG91bGQgbm90IGNoYW5nZSBpdCB3aXRob3V0XG4gKiBwcm9wZXIganVzdGlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbGltaXQgVGhlIG51bWJlciBvZiBkaWdlc3QgaXRlcmF0aW9ucy5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRyb290U2NvcGVcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEV2ZXJ5IGFwcGxpY2F0aW9uIGhhcyBhIHNpbmdsZSByb290IHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfS5cbiAqIEFsbCBvdGhlciBzY29wZXMgYXJlIGRlc2NlbmRhbnQgc2NvcGVzIG9mIHRoZSByb290IHNjb3BlLiBTY29wZXMgcHJvdmlkZSBzZXBhcmF0aW9uXG4gKiBiZXR3ZWVuIHRoZSBtb2RlbCBhbmQgdGhlIHZpZXcsIHZpYSBhIG1lY2hhbmlzbSBmb3Igd2F0Y2hpbmcgdGhlIG1vZGVsIGZvciBjaGFuZ2VzLlxuICogVGhleSBhbHNvIHByb3ZpZGUgYW4gZXZlbnQgZW1pc3Npb24vYnJvYWRjYXN0IGFuZCBzdWJzY3JpcHRpb24gZmFjaWxpdHkuIFNlZSB0aGVcbiAqIHtAbGluayBndWlkZS9zY29wZSBkZXZlbG9wZXIgZ3VpZGUgb24gc2NvcGVzfS5cbiAqL1xuZnVuY3Rpb24gJFJvb3RTY29wZVByb3ZpZGVyKCkge1xuICB2YXIgVFRMID0gMTA7XG4gIHZhciAkcm9vdFNjb3BlTWluRXJyID0gbWluRXJyKCckcm9vdFNjb3BlJyk7XG4gIHZhciBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gIHZhciBhcHBseUFzeW5jSWQgPSBudWxsO1xuXG4gIHRoaXMuZGlnZXN0VHRsID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgVFRMID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBUVEw7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHBhcnNlJywgJyRicm93c2VyJyxcbiAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgJGV4Y2VwdGlvbkhhbmRsZXIsICRwYXJzZSwgJGJyb3dzZXIpIHtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSByb290IHNjb3BlIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlICRyb290U2NvcGV9IGtleSBmcm9tIHRoZVxuICAgICAqIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgdXNpbmcgdGhlXG4gICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlblxuICAgICAqIGNvbXBpbGVkIEhUTUwgdGVtcGxhdGUgaXMgZXhlY3V0ZWQuKVxuICAgICAqXG4gICAgICogSGVyZSBpcyBhIHNpbXBsZSBzY29wZSBzbmlwcGV0IHRvIHNob3cgaG93IHlvdSBjYW4gaW50ZXJhY3Qgd2l0aCB0aGUgc2NvcGUuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxmaWxlIHNyYz1cIi4vdGVzdC9uZy9yb290U2NvcGVTcGVjLmpzXCIgdGFnPVwiZG9jczFcIiAvPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyBJbmhlcml0YW5jZVxuICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICAgICB2YXIgcGFyZW50ID0gJHJvb3RTY29wZTtcbiAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7XG5cbiAgICAgICAgIHBhcmVudC5zYWx1dGF0aW9uID0gXCJIZWxsb1wiO1xuICAgICAgICAgY2hpbGQubmFtZSA9IFwiV29ybGRcIjtcbiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpO1xuXG4gICAgICAgICBjaGlsZC5zYWx1dGF0aW9uID0gXCJXZWxjb21lXCI7XG4gICAgICAgICBleHBlY3QoY2hpbGQuc2FsdXRhdGlvbikudG9FcXVhbCgnV2VsY29tZScpO1xuICAgICAgICAgZXhwZWN0KHBhcmVudC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbigpPj19IHByb3ZpZGVycyBNYXAgb2Ygc2VydmljZSBmYWN0b3J5IHdoaWNoIG5lZWQgdG8gYmVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkIGZvciB0aGUgY3VycmVudCBzY29wZS4gRGVmYXVsdHMgdG8ge0BsaW5rIG5nfS5cbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPj19IGluc3RhbmNlQ2FjaGUgUHJvdmlkZXMgcHJlLWluc3RhbnRpYXRlZCBzZXJ2aWNlcyB3aGljaCBzaG91bGRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZC9vdmVycmlkZSBzZXJ2aWNlcyBwcm92aWRlZCBieSBgcHJvdmlkZXJzYC4gVGhpcyBpcyBoYW5keVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB1bml0LXRlc3RpbmcgYW5kIGhhdmluZyB0aGUgbmVlZCB0byBvdmVycmlkZSBhIGRlZmF1bHRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gTmV3bHkgY3JlYXRlZCBzY29wZS5cbiAgICAgKlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNjb3BlKCkge1xuICAgICAgdGhpcy4kaWQgPSBuZXh0VWlkKCk7XG4gICAgICB0aGlzLiQkcGhhc2UgPSB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkd2F0Y2hlcnMgPVxuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nID1cbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuJCRjaGlsZEhlYWQgPSB0aGlzLiQkY2hpbGRUYWlsID0gbnVsbDtcbiAgICAgIHRoaXMuJHJvb3QgPSB0aGlzO1xuICAgICAgdGhpcy4kJGRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9O1xuICAgICAgdGhpcy4kJGxpc3RlbmVyQ291bnQgPSB7fTtcbiAgICAgIHRoaXMuJCRpc29sYXRlQmluZGluZ3MgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGlkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBVbmlxdWUgc2NvcGUgSUQgKG1vbm90b25pY2FsbHkgaW5jcmVhc2luZykgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuXG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRwYXJlbnRcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIFJlZmVyZW5jZSB0byB0aGUgcGFyZW50IHNjb3BlLlxuICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHJvb3RcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgcm9vdCBzY29wZS5cbiAgICAgICAqL1xuXG4gICAgU2NvcGUucHJvdG90eXBlID0ge1xuICAgICAgY29uc3RydWN0b3I6IFNjb3BlLFxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRuZXdcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBDcmVhdGVzIGEgbmV3IGNoaWxkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgcGFyZW50IHNjb3BlIHdpbGwgcHJvcGFnYXRlIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gZXZlbnQuXG4gICAgICAgKiBUaGUgc2NvcGUgY2FuIGJlIHJlbW92ZWQgZnJvbSB0aGUgc2NvcGUgaGllcmFyY2h5IHVzaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95ICRkZXN0cm95KCl9LlxuICAgICAgICpcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95ICRkZXN0cm95KCl9IG11c3QgYmUgY2FsbGVkIG9uIGEgc2NvcGUgd2hlbiBpdCBpc1xuICAgICAgICogZGVzaXJlZCBmb3IgdGhlIHNjb3BlIGFuZCBpdHMgY2hpbGQgc2NvcGVzIHRvIGJlIHBlcm1hbmVudGx5IGRldGFjaGVkIGZyb20gdGhlIHBhcmVudCBhbmRcbiAgICAgICAqIHRodXMgc3RvcCBwYXJ0aWNpcGF0aW5nIGluIG1vZGVsIGNoYW5nZSBkZXRlY3Rpb24gYW5kIGxpc3RlbmVyIG5vdGlmaWNhdGlvbiBieSBpbnZva2luZy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzb2xhdGUgSWYgdHJ1ZSwgdGhlbiB0aGUgc2NvcGUgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIHRoZVxuICAgICAgICogICAgICAgICBwYXJlbnQgc2NvcGUuIFRoZSBzY29wZSBpcyBpc29sYXRlZCwgYXMgaXQgY2FuIG5vdCBzZWUgcGFyZW50IHNjb3BlIHByb3BlcnRpZXMuXG4gICAgICAgKiAgICAgICAgIFdoZW4gY3JlYXRpbmcgd2lkZ2V0cywgaXQgaXMgdXNlZnVsIGZvciB0aGUgd2lkZ2V0IHRvIG5vdCBhY2NpZGVudGFsbHkgcmVhZCBwYXJlbnRcbiAgICAgICAqICAgICAgICAgc3RhdGUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtTY29wZX0gW3BhcmVudD10aGlzXSBUaGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgYFNjb3BlYH0gdGhhdCB3aWxsIGJlIHRoZSBgJHBhcmVudGBcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgc2NvcGUuIERlZmF1bHRzIHRvIGB0aGlzYCBzY29wZSBpZiBub3QgcHJvdmlkZWQuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgdXNlZCB3aGVuIGNyZWF0aW5nIGEgdHJhbnNjbHVkZSBzY29wZSB0byBjb3JyZWN0bHkgcGxhY2UgaXRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHNjb3BlIGhpZXJhcmNoeSB3aGlsZSBtYWludGFpbmluZyB0aGUgY29ycmVjdCBwcm90b3R5cGljYWxcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2UuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge09iamVjdH0gVGhlIG5ld2x5IGNyZWF0ZWQgY2hpbGQgc2NvcGUuXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICAkbmV3OiBmdW5jdGlvbihpc29sYXRlLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkO1xuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudCB8fCB0aGlzO1xuXG4gICAgICAgIGlmIChpc29sYXRlKSB7XG4gICAgICAgICAgY2hpbGQgPSBuZXcgU2NvcGUoKTtcbiAgICAgICAgICBjaGlsZC4kcm9vdCA9IHRoaXMuJHJvb3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT25seSBjcmVhdGUgYSBjaGlsZCBzY29wZSBjbGFzcyBpZiBzb21lYm9keSBhc2tzIGZvciBvbmUsXG4gICAgICAgICAgLy8gYnV0IGNhY2hlIGl0IHRvIGFsbG93IHRoZSBWTSB0byBvcHRpbWl6ZSBsb29rdXBzLlxuICAgICAgICAgIGlmICghdGhpcy4kJENoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMuJCRDaGlsZFNjb3BlID0gZnVuY3Rpb24gQ2hpbGRTY29wZSgpIHtcbiAgICAgICAgICAgICAgdGhpcy4kJHdhdGNoZXJzID0gdGhpcy4kJG5leHRTaWJsaW5nID1cbiAgICAgICAgICAgICAgICAgIHRoaXMuJCRjaGlsZEhlYWQgPSB0aGlzLiQkY2hpbGRUYWlsID0gbnVsbDtcbiAgICAgICAgICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9O1xuICAgICAgICAgICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgICAgICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTtcbiAgICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuJCRDaGlsZFNjb3BlLnByb3RvdHlwZSA9IHRoaXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkID0gbmV3IHRoaXMuJCRDaGlsZFNjb3BlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDtcbiAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCkge1xuICAgICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRIZWFkID0gcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRoZSBuZXcgc2NvcGUgaXMgbm90IGlzb2xhdGVkIG9yIHdlIGluaGVyaXQgZnJvbSBgdGhpc2AsIGFuZFxuICAgICAgICAvLyB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZCwgdGhlIHByb3BlcnR5IGAkJGRlc3Ryb3llZGAgaXMgaW5oZXJpdGVkXG4gICAgICAgIC8vIHByb3RvdHlwaWNhbGx5LiBJbiBhbGwgb3RoZXIgY2FzZXMsIHRoaXMgcHJvcGVydHkgbmVlZHMgdG8gYmUgc2V0XG4gICAgICAgIC8vIHdoZW4gdGhlIHBhcmVudCBzY29wZSBpcyBkZXN0cm95ZWQuXG4gICAgICAgIC8vIFRoZSBsaXN0ZW5lciBuZWVkcyB0byBiZSBhZGRlZCBhZnRlciB0aGUgcGFyZW50IGlzIHNldFxuICAgICAgICBpZiAoaXNvbGF0ZSB8fCBwYXJlbnQgIT0gdGhpcykgY2hpbGQuJG9uKCckZGVzdHJveScsIGRlc3Ryb3lDaGlsZCk7XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuXG4gICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3lDaGlsZCgpIHtcbiAgICAgICAgICBjaGlsZC4kJGRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2hcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZWdpc3RlcnMgYSBgbGlzdGVuZXJgIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGB3YXRjaEV4cHJlc3Npb25gIGlzIGNhbGxlZCBvbiBldmVyeSBjYWxsIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3RcbiAgICAgICAqICAgJGRpZ2VzdCgpfSBhbmQgc2hvdWxkIHJldHVybiB0aGUgdmFsdWUgdGhhdCB3aWxsIGJlIHdhdGNoZWQuIChTaW5jZVxuICAgICAgICogICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gcmVydW5zIHdoZW4gaXQgZGV0ZWN0cyBjaGFuZ2VzIHRoZVxuICAgICAgICogICBgd2F0Y2hFeHByZXNzaW9uYCBjYW4gZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBwZXJcbiAgICAgICAqICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGFuZCBzaG91bGQgYmUgaWRlbXBvdGVudC4pXG4gICAgICAgKiAtIFRoZSBgbGlzdGVuZXJgIGlzIGNhbGxlZCBvbmx5IHdoZW4gdGhlIHZhbHVlIGZyb20gdGhlIGN1cnJlbnQgYHdhdGNoRXhwcmVzc2lvbmAgYW5kIHRoZVxuICAgICAgICogICBwcmV2aW91cyBjYWxsIHRvIGB3YXRjaEV4cHJlc3Npb25gIGFyZSBub3QgZXF1YWwgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgaW5pdGlhbCBydW4sXG4gICAgICAgKiAgIHNlZSBiZWxvdykuIEluZXF1YWxpdHkgaXMgZGV0ZXJtaW5lZCBhY2NvcmRpbmcgdG8gcmVmZXJlbmNlIGluZXF1YWxpdHksXG4gICAgICAgKiAgIFtzdHJpY3QgY29tcGFyaXNvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL0NvbXBhcmlzb25fT3BlcmF0b3JzKVxuICAgICAgICogICAgdmlhIHRoZSBgIT09YCBKYXZhc2NyaXB0IG9wZXJhdG9yLCB1bmxlc3MgYG9iamVjdEVxdWFsaXR5ID09IHRydWVgXG4gICAgICAgKiAgIChzZWUgbmV4dCBwb2ludClcbiAgICAgICAqIC0gV2hlbiBgb2JqZWN0RXF1YWxpdHkgPT0gdHJ1ZWAsIGluZXF1YWxpdHkgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gIGlzIGRldGVybWluZWRcbiAgICAgICAqICAgYWNjb3JkaW5nIHRvIHRoZSB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uLiBUbyBzYXZlIHRoZSB2YWx1ZSBvZiB0aGUgb2JqZWN0IGZvclxuICAgICAgICogICBsYXRlciBjb21wYXJpc29uLCB0aGUge0BsaW5rIGFuZ3VsYXIuY29weX0gZnVuY3Rpb24gaXMgdXNlZC4gVGhpcyB0aGVyZWZvcmUgbWVhbnMgdGhhdFxuICAgICAgICogICB3YXRjaGluZyBjb21wbGV4IG9iamVjdHMgd2lsbCBoYXZlIGFkdmVyc2UgbWVtb3J5IGFuZCBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMuXG4gICAgICAgKiAtIFRoZSB3YXRjaCBgbGlzdGVuZXJgIG1heSBjaGFuZ2UgdGhlIG1vZGVsLCB3aGljaCBtYXkgdHJpZ2dlciBvdGhlciBgbGlzdGVuZXJgcyB0byBmaXJlLlxuICAgICAgICogICBUaGlzIGlzIGFjaGlldmVkIGJ5IHJlcnVubmluZyB0aGUgd2F0Y2hlcnMgdW50aWwgbm8gY2hhbmdlcyBhcmUgZGV0ZWN0ZWQuIFRoZSByZXJ1blxuICAgICAgICogICBpdGVyYXRpb24gbGltaXQgaXMgMTAgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIGRlYWRsb2NrLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGlzIGNhbGxlZCxcbiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYSBgd2F0Y2hFeHByZXNzaW9uYCBmdW5jdGlvbiB3aXRoIG5vIGBsaXN0ZW5lcmAuIChTaW5jZSBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogY2FuIGV4ZWN1dGUgbXVsdGlwbGUgdGltZXMgcGVyIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUgd2hlbiBhXG4gICAgICAgKiBjaGFuZ2UgaXMgZGV0ZWN0ZWQsIGJlIHByZXBhcmVkIGZvciBtdWx0aXBsZSBjYWxscyB0byB5b3VyIGxpc3RlbmVyLilcbiAgICAgICAqXG4gICAgICAgKiBBZnRlciBhIHdhdGNoZXIgaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBzY29wZSwgdGhlIGBsaXN0ZW5lcmAgZm4gaXMgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICAgKiAodmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmMgJGV2YWxBc3luY30pIHRvIGluaXRpYWxpemUgdGhlXG4gICAgICAgKiB3YXRjaGVyLiBJbiByYXJlIGNhc2VzLCB0aGlzIGlzIHVuZGVzaXJhYmxlIGJlY2F1c2UgdGhlIGxpc3RlbmVyIGlzIGNhbGxlZCB3aGVuIHRoZSByZXN1bHRcbiAgICAgICAqIG9mIGB3YXRjaEV4cHJlc3Npb25gIGRpZG4ndCBjaGFuZ2UuIFRvIGRldGVjdCB0aGlzIHNjZW5hcmlvIHdpdGhpbiB0aGUgYGxpc3RlbmVyYCBmbiwgeW91XG4gICAgICAgKiBjYW4gY29tcGFyZSB0aGUgYG5ld1ZhbGAgYW5kIGBvbGRWYWxgLiBJZiB0aGVzZSB0d28gdmFsdWVzIGFyZSBpZGVudGljYWwgKGA9PT1gKSB0aGVuIHRoZVxuICAgICAgICogbGlzdGVuZXIgd2FzIGNhbGxlZCBkdWUgdG8gaW5pdGlhbGl6YXRpb24uXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIC8vIGxldCdzIGFzc3VtZSB0aGF0IHNjb3BlIHdhcyBkZXBlbmRlbmN5IGluamVjdGVkIGFzIHRoZSAkcm9vdFNjb3BlXG4gICAgICAgICAgIHZhciBzY29wZSA9ICRyb290U2NvcGU7XG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nO1xuICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZFxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlc1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpO1xuXG5cblxuICAgICAgICAgICAvLyBVc2luZyBhIGZ1bmN0aW9uIGFzIGEgd2F0Y2hFeHByZXNzaW9uXG4gICAgICAgICAgIHZhciBmb29kO1xuICAgICAgICAgICBzY29wZS5mb29kQ291bnRlciA9IDA7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdmFsdWUgYmVpbmcgd2F0Y2hlZC4gSXQgaXMgY2FsbGVkIGZvciBlYWNoIHR1cm4gb2YgdGhlICRkaWdlc3QgbG9vcFxuICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gZm9vZDsgfSxcbiAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBjaGFuZ2UgbGlzdGVuZXIsIGNhbGxlZCB3aGVuIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBhYm92ZSBmdW5jdGlvbiBjaGFuZ2VzXG4gICAgICAgICAgICAgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICBpZiAoIG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSApIHtcbiAgICAgICAgICAgICAgICAgLy8gT25seSBpbmNyZW1lbnQgdGhlIGNvdW50ZXIgaWYgdGhlIHZhbHVlIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSBzY29wZS5mb29kQ291bnRlciArIDE7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICApO1xuICAgICAgICAgICAvLyBObyBkaWdlc3QgaGFzIGJlZW4gcnVuIHNvIHRoZSBjb3VudGVyIHdpbGwgYmUgemVyb1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgLy8gUnVuIHRoZSBkaWdlc3QgYnV0IHNpbmNlIGZvb2QgaGFzIG5vdCBjaGFuZ2VkIGNvdW50IHdpbGwgc3RpbGwgYmUgemVyb1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTtcblxuICAgICAgICAgICAvLyBVcGRhdGUgZm9vZCBhbmQgcnVuIGRpZ2VzdC4gIE5vdyB0aGUgY291bnRlciB3aWxsIGluY3JlbWVudFxuICAgICAgICAgICBmb29kID0gJ2NoZWVzZWJ1cmdlcic7XG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KGZ1bmN0aW9uKCl8c3RyaW5nKX0gd2F0Y2hFeHByZXNzaW9uIEV4cHJlc3Npb24gdGhhdCBpcyBldmFsdWF0ZWQgb24gZWFjaFxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQSBjaGFuZ2UgaW4gdGhlIHJldHVybiB2YWx1ZSB0cmlnZ2Vyc1xuICAgICAgICogICAgYSBjYWxsIHRvIHRoZSBgbGlzdGVuZXJgLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufVxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogY2FsbGVkIHdpdGggY3VycmVudCBgc2NvcGVgIGFzIGEgcGFyYW1ldGVyLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCwgc2NvcGUpfSBsaXN0ZW5lciBDYWxsYmFjayBjYWxsZWQgd2hlbmV2ZXIgdGhlIHZhbHVlXG4gICAgICAgKiAgICBvZiBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYG5ld1ZhbGAgY29udGFpbnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICAtIGBvbGRWYWxgIGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAqICAgIC0gYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9iamVjdEVxdWFsaXR5IENvbXBhcmUgZm9yIG9iamVjdCBlcXVhbGl0eSB1c2luZyB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGluc3RlYWQgb2ZcbiAgICAgICAqICAgICBjb21wYXJpbmcgZm9yIHJlZmVyZW5jZSBlcXVhbGl0eS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaDogZnVuY3Rpb24od2F0Y2hFeHAsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSkge1xuICAgICAgICB2YXIgZ2V0ID0gJHBhcnNlKHdhdGNoRXhwKTtcblxuICAgICAgICBpZiAoZ2V0LiQkd2F0Y2hEZWxlZ2F0ZSkge1xuICAgICAgICAgIHJldHVybiBnZXQuJCR3YXRjaERlbGVnYXRlKHRoaXMsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzLFxuICAgICAgICAgICAgd2F0Y2hlciA9IHtcbiAgICAgICAgICAgICAgZm46IGxpc3RlbmVyLFxuICAgICAgICAgICAgICBsYXN0OiBpbml0V2F0Y2hWYWwsXG4gICAgICAgICAgICAgIGdldDogZ2V0LFxuICAgICAgICAgICAgICBleHA6IHdhdGNoRXhwLFxuICAgICAgICAgICAgICBlcTogISFvYmplY3RFcXVhbGl0eVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG5cbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIHdhdGNoZXIuZm4gPSBub29wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhcnJheSkge1xuICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIHVzZSB1bnNoaWZ0IHNpbmNlIHdlIHVzZSBhIHdoaWxlIGxvb3AgaW4gJGRpZ2VzdCBmb3Igc3BlZWQuXG4gICAgICAgIC8vIHRoZSB3aGlsZSBsb29wIHJlYWRzIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICAgIGFycmF5LnVuc2hpZnQod2F0Y2hlcik7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaCgpIHtcbiAgICAgICAgICBhcnJheVJlbW92ZShhcnJheSwgd2F0Y2hlcik7XG4gICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaEdyb3VwXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQSB2YXJpYW50IG9mIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX0gd2hlcmUgaXQgd2F0Y2hlcyBhbiBhcnJheSBvZiBgd2F0Y2hFeHByZXNzaW9uc2AuXG4gICAgICAgKiBJZiBhbnkgb25lIGV4cHJlc3Npb24gaW4gdGhlIGNvbGxlY3Rpb24gY2hhbmdlcyB0aGUgYGxpc3RlbmVyYCBpcyBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAtIFRoZSBpdGVtcyBpbiB0aGUgYHdhdGNoRXhwcmVzc2lvbnNgIGFycmF5IGFyZSBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgYXJlIGV4YW1pbmVkIG9uIGV2ZXJ5XG4gICAgICAgKiAgIGNhbGwgdG8gJGRpZ2VzdCgpIHRvIHNlZSBpZiBhbnkgaXRlbXMgY2hhbmdlcy5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueSBleHByZXNzaW9uIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24oc2NvcGUpPn0gd2F0Y2hFeHByZXNzaW9ucyBBcnJheSBvZiBleHByZXNzaW9ucyB0aGF0IHdpbGwgYmUgaW5kaXZpZHVhbGx5XG4gICAgICAgKiB3YXRjaGVkIHVzaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld1ZhbHVlcywgb2xkVmFsdWVzLCBzY29wZSl9IGxpc3RlbmVyIENhbGxiYWNrIGNhbGxlZCB3aGVuZXZlciB0aGUgcmV0dXJuIHZhbHVlIG9mIGFueVxuICAgICAgICogICAgZXhwcmVzc2lvbiBpbiBgd2F0Y2hFeHByZXNzaW9uc2AgY2hhbmdlc1xuICAgICAgICogICAgVGhlIGBuZXdWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlcyBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbnNgLCB3aXRoIHRoZSBpbmRleGVzIG1hdGNoaW5nXG4gICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgYW5kIHRoZSBgb2xkVmFsdWVzYCBhcnJheSBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBUaGUgYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgYWxsIGxpc3RlbmVycy5cbiAgICAgICAqL1xuICAgICAgJHdhdGNoR3JvdXA6IGZ1bmN0aW9uKHdhdGNoRXhwcmVzc2lvbnMsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgbmV3VmFsdWVzID0gbmV3IEFycmF5KHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoKTtcbiAgICAgICAgdmFyIGRlcmVnaXN0ZXJGbnMgPSBbXTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGZpcnN0UnVuID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIXdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gTm8gZXhwcmVzc2lvbnMgbWVhbnMgd2UgY2FsbCB0aGUgbGlzdGVuZXIgQVNBUFxuICAgICAgICAgIHZhciBzaG91bGRDYWxsID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2FsbCkgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICAgIHNob3VsZENhbGwgPSBmYWxzZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHNpemUgb2Ygb25lXG4gICAgICAgICAgcmV0dXJuIHRoaXMuJHdhdGNoKHdhdGNoRXhwcmVzc2lvbnNbMF0sIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24odmFsdWUsIG9sZFZhbHVlLCBzY29wZSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzWzBdID0gdmFsdWU7XG4gICAgICAgICAgICBvbGRWYWx1ZXNbMF0gPSBvbGRWYWx1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlcywgKHZhbHVlID09PSBvbGRWYWx1ZSkgPyBuZXdWYWx1ZXMgOiBvbGRWYWx1ZXMsIHNjb3BlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvckVhY2god2F0Y2hFeHByZXNzaW9ucywgZnVuY3Rpb24oZXhwciwgaSkge1xuICAgICAgICAgIHZhciB1bndhdGNoRm4gPSBzZWxmLiR3YXRjaChleHByLCBmdW5jdGlvbiB3YXRjaEdyb3VwU3ViQWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICBvbGRWYWx1ZXNbaV0gPSBvbGRWYWx1ZTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBzZWxmLiRldmFsQXN5bmMod2F0Y2hHcm91cEFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVyZWdpc3RlckZucy5wdXNoKHVud2F0Y2hGbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24oKSB7XG4gICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgICAgICAgZmlyc3RSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlcywgbmV3VmFsdWVzLCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICB3aGlsZSAoZGVyZWdpc3RlckZucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJGbnMuc2hpZnQoKSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb25cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaGFsbG93IHdhdGNoZXMgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZCBmaXJlcyB3aGVuZXZlciBhbnkgb2YgdGhlIHByb3BlcnRpZXMgY2hhbmdlXG4gICAgICAgKiAoZm9yIGFycmF5cywgdGhpcyBpbXBsaWVzIHdhdGNoaW5nIHRoZSBhcnJheSBpdGVtczsgZm9yIG9iamVjdCBtYXBzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmdcbiAgICAgICAqIHRoZSBwcm9wZXJ0aWVzKS4gSWYgYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQsIHRoZSBgbGlzdGVuZXJgIGNhbGxiYWNrIGlzIGZpcmVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGBvYmpgIGNvbGxlY3Rpb24gaXMgb2JzZXJ2ZWQgdmlhIHN0YW5kYXJkICR3YXRjaCBvcGVyYXRpb24gYW5kIGlzIGV4YW1pbmVkIG9uIGV2ZXJ5XG4gICAgICAgKiAgIGNhbGwgdG8gJGRpZ2VzdCgpIHRvIHNlZSBpZiBhbnkgaXRlbXMgaGF2ZSBiZWVuIGFkZGVkLCByZW1vdmVkLCBvciBtb3ZlZC5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueXRoaW5nIHdpdGhpbiB0aGUgYG9iamAgaGFzIGNoYW5nZWQuIEV4YW1wbGVzIGluY2x1ZGVcbiAgICAgICAqICAgYWRkaW5nLCByZW1vdmluZywgYW5kIG1vdmluZyBpdGVtcyBiZWxvbmdpbmcgdG8gYW4gb2JqZWN0IG9yIGFycmF5LlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydpZ29yJywgJ21hdGlhcycsICdtaXNrbycsICdqYW1lcyddO1xuICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSA0O1xuXG4gICAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ25hbWVzJywgZnVuY3Rpb24obmV3TmFtZXMsIG9sZE5hbWVzKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGF0YUNvdW50ID0gbmV3TmFtZXMubGVuZ3RoO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vc3RpbGwgYXQgNCAuLi4gbm8gY2hhbmdlc1xuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDQpO1xuXG4gICAgICAgICAgJHNjb3BlLm5hbWVzLnBvcCgpO1xuICAgICAgICAgICRzY29wZS4kZGlnZXN0KCk7XG5cbiAgICAgICAgICAvL25vdyB0aGVyZSdzIGJlZW4gYSBjaGFuZ2VcbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCgzKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbihzY29wZSl9IG9iaiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uIFRoZVxuICAgICAgICogICAgZXhwcmVzc2lvbiB2YWx1ZSBzaG91bGQgZXZhbHVhdGUgdG8gYW4gb2JqZWN0IG9yIGFuIGFycmF5IHdoaWNoIGlzIG9ic2VydmVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEFueSBzaGFsbG93IGNoYW5nZSB3aXRoaW4gdGhlXG4gICAgICAgKiAgICBjb2xsZWN0aW9uIHdpbGwgdHJpZ2dlciBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXdDb2xsZWN0aW9uLCBvbGRDb2xsZWN0aW9uLCBzY29wZSl9IGxpc3RlbmVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkXG4gICAgICAgKiAgICB3aGVuIGEgY2hhbmdlIGlzIGRldGVjdGVkLlxuICAgICAgICogICAgLSBUaGUgYG5ld0NvbGxlY3Rpb25gIG9iamVjdCBpcyB0aGUgbmV3bHkgbW9kaWZpZWQgZGF0YSBvYnRhaW5lZCBmcm9tIHRoZSBgb2JqYCBleHByZXNzaW9uXG4gICAgICAgKiAgICAtIFRoZSBgb2xkQ29sbGVjdGlvbmAgb2JqZWN0IGlzIGEgY29weSBvZiB0aGUgZm9ybWVyIGNvbGxlY3Rpb24gZGF0YS5cbiAgICAgICAqICAgICAgRHVlIHRvIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zLCB0aGVgb2xkQ29sbGVjdGlvbmAgdmFsdWUgaXMgY29tcHV0ZWQgb25seSBpZiB0aGVcbiAgICAgICAqICAgICAgYGxpc3RlbmVyYCBmdW5jdGlvbiBkZWNsYXJlcyB0d28gb3IgbW9yZSBhcmd1bWVudHMuXG4gICAgICAgKiAgICAtIFRoZSBgc2NvcGVgIGFyZ3VtZW50IHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4gV2hlbiB0aGVcbiAgICAgICAqICAgIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBpcyBleGVjdXRlZCwgdGhlIGludGVybmFsIHdhdGNoIG9wZXJhdGlvbiBpcyB0ZXJtaW5hdGVkLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmosIGxpc3RlbmVyKSB7XG4gICAgICAgICR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvci4kc3RhdGVmdWwgPSB0cnVlO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgdmFsdWUsIHVwZGF0ZWQgb24gZWFjaCBkaXJ0eS1jaGVjayBydW5cbiAgICAgICAgdmFyIG5ld1ZhbHVlO1xuICAgICAgICAvLyBhIHNoYWxsb3cgY29weSBvZiB0aGUgbmV3VmFsdWUgZnJvbSB0aGUgbGFzdCBkaXJ0eS1jaGVjayBydW4sXG4gICAgICAgIC8vIHVwZGF0ZWQgdG8gbWF0Y2ggbmV3VmFsdWUgZHVyaW5nIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgb2xkVmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHdoZW4gdGhlIGxhc3QgY2hhbmdlIGhhcHBlbmVkXG4gICAgICAgIHZhciB2ZXJ5T2xkVmFsdWU7XG4gICAgICAgIC8vIG9ubHkgdHJhY2sgdmVyeU9sZFZhbHVlIGlmIHRoZSBsaXN0ZW5lciBpcyBhc2tpbmcgZm9yIGl0XG4gICAgICAgIHZhciB0cmFja1ZlcnlPbGRWYWx1ZSA9IChsaXN0ZW5lci5sZW5ndGggPiAxKTtcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdGVkID0gMDtcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdG9yID0gJHBhcnNlKG9iaiwgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKTtcbiAgICAgICAgdmFyIGludGVybmFsQXJyYXkgPSBbXTtcbiAgICAgICAgdmFyIGludGVybmFsT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBpbml0UnVuID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9sZExlbmd0aCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKF92YWx1ZSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICAgIHZhciBuZXdMZW5ndGgsIGtleSwgYm90aE5hTiwgbmV3SXRlbSwgb2xkSXRlbTtcblxuICAgICAgICAgIGlmICghaXNPYmplY3QobmV3VmFsdWUpKSB7IC8vIGlmIHByaW1pdGl2ZVxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBvbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IGludGVybmFsQXJyYXkpIHtcbiAgICAgICAgICAgICAgLy8gd2UgYXJlIHRyYW5zaXRpb25pbmcgZnJvbSBzb21ldGhpbmcgd2hpY2ggd2FzIG5vdCBhbiBhcnJheSBpbnRvIGFycmF5LlxuICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGludGVybmFsQXJyYXk7XG4gICAgICAgICAgICAgIG9sZExlbmd0aCA9IG9sZFZhbHVlLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld0xlbmd0aCA9IG5ld1ZhbHVlLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKG9sZExlbmd0aCAhPT0gbmV3TGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIGlmIGxlbmd0aHMgZG8gbm90IG1hdGNoIHdlIG5lZWQgdG8gdHJpZ2dlciBjaGFuZ2Ugbm90aWZpY2F0aW9uXG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgIG9sZFZhbHVlLmxlbmd0aCA9IG9sZExlbmd0aCA9IG5ld0xlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvcHkgdGhlIGl0ZW1zIHRvIG9sZFZhbHVlIGFuZCBsb29rIGZvciBjaGFuZ2VzLlxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBvbGRJdGVtID0gb2xkVmFsdWVbaV07XG4gICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdWYWx1ZVtpXTtcblxuICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTtcbiAgICAgICAgICAgICAgaWYgKCFib3RoTmFOICYmIChvbGRJdGVtICE9PSBuZXdJdGVtKSkge1xuICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWVbaV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxPYmplY3QpIHtcbiAgICAgICAgICAgICAgLy8gd2UgYXJlIHRyYW5zaXRpb25pbmcgZnJvbSBzb21ldGhpbmcgd2hpY2ggd2FzIG5vdCBhbiBvYmplY3QgaW50byBvYmplY3QuXG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvcHkgdGhlIGl0ZW1zIHRvIG9sZFZhbHVlIGFuZCBsb29rIGZvciBjaGFuZ2VzLlxuICAgICAgICAgICAgbmV3TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChuZXdWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbmV3TGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTtcbiAgICAgICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiAob2xkSXRlbSAhPT0gbmV3SXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aCsrO1xuICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyB3ZSB1c2VkIHRvIGhhdmUgbW9yZSBrZXlzLCBuZWVkIHRvIGZpbmQgdGhlbSBhbmQgZGVzdHJveSB0aGVtLlxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghbmV3VmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICBkZWxldGUgb2xkVmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNoYW5nZURldGVjdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkFjdGlvbigpIHtcbiAgICAgICAgICBpZiAoaW5pdFJ1bikge1xuICAgICAgICAgICAgaW5pdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIG5ld1ZhbHVlLCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIHZlcnlPbGRWYWx1ZSwgc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbWFrZSBhIGNvcHkgZm9yIHRoZSBuZXh0IHRpbWUgYSBjb2xsZWN0aW9uIGlzIGNoYW5nZWRcbiAgICAgICAgICBpZiAodHJhY2tWZXJ5T2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghaXNPYmplY3QobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vcHJpbWl0aXZlXG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3IEFycmF5KG5ld1ZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWVbaV0gPSBuZXdWYWx1ZVtpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgb2JqZWN0XG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2tleV0gPSBuZXdWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLiR3YXRjaChjaGFuZ2VEZXRlY3RvciwgJHdhdGNoQ29sbGVjdGlvbkFjdGlvbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFByb2Nlc3NlcyBhbGwgb2YgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc30gb2YgdGhlIGN1cnJlbnQgc2NvcGUgYW5kXG4gICAgICAgKiBpdHMgY2hpbGRyZW4uIEJlY2F1c2UgYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcn0ncyBsaXN0ZW5lciBjYW4gY2hhbmdlXG4gICAgICAgKiB0aGUgbW9kZWwsIHRoZSBgJGRpZ2VzdCgpYCBrZWVwcyBjYWxsaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9XG4gICAgICAgKiB1bnRpbCBubyBtb3JlIGxpc3RlbmVycyBhcmUgZmlyaW5nLiBUaGlzIG1lYW5zIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gZ2V0IGludG8gYW4gaW5maW5pdGVcbiAgICAgICAqIGxvb3AuIFRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBgJ01heGltdW0gaXRlcmF0aW9uIGxpbWl0IGV4Y2VlZGVkLidgIGlmIHRoZSBudW1iZXIgb2ZcbiAgICAgICAqIGl0ZXJhdGlvbnMgZXhjZWVkcyAxMC5cbiAgICAgICAqXG4gICAgICAgKiBVc3VhbGx5LCB5b3UgZG9uJ3QgY2FsbCBgJGRpZ2VzdCgpYCBkaXJlY3RseSBpblxuICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NvbnRyb2xsZXIgY29udHJvbGxlcnN9IG9yIGluXG4gICAgICAgKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gICAgICAgKiBJbnN0ZWFkLCB5b3Ugc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseSgpfSAodHlwaWNhbGx5IGZyb20gd2l0aGluXG4gICAgICAgKiBhIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmV9KSwgd2hpY2ggd2lsbCBmb3JjZSBhIGAkZGlnZXN0KClgLlxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIGAkZGlnZXN0KClgIGlzIGNhbGxlZCxcbiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYSBgd2F0Y2hFeHByZXNzaW9uYCBmdW5jdGlvbiB3aXRoXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggJHdhdGNoKCl9IHdpdGggbm8gYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBJbiB1bml0IHRlc3RzLCB5b3UgbWF5IG5lZWQgdG8gY2FsbCBgJGRpZ2VzdCgpYCB0byBzaW11bGF0ZSB0aGUgc2NvcGUgbGlmZSBjeWNsZS5cbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIHZhciBzY29wZSA9IC4uLjtcbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdtaXNrbyc7XG4gICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIHRoZSBsaXN0ZW5lciBpcyBhbHdheXMgY2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgJGRpZ2VzdCBsb29wIGFmdGVyIGl0IHdhcyByZWdpc3RlcmVkXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gYnV0IG5vdyBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIHRoZSB2YWx1ZSBjaGFuZ2VzXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnYWRhbSc7XG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMik7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgICRkaWdlc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgd2F0Y2gsIHZhbHVlLCBsYXN0LFxuICAgICAgICAgICAgd2F0Y2hlcnMsXG4gICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgICBkaXJ0eSwgdHRsID0gVFRMLFxuICAgICAgICAgICAgbmV4dCwgY3VycmVudCwgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgICAgIHdhdGNoTG9nID0gW10sXG4gICAgICAgICAgICBsb2dJZHgsIGxvZ01zZywgYXN5bmNUYXNrO1xuXG4gICAgICAgIGJlZ2luUGhhc2UoJyRkaWdlc3QnKTtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGNoYW5nZXMgdG8gYnJvd3NlciB1cmwgdGhhdCBoYXBwZW5lZCBpbiBzeW5jIGJlZm9yZSB0aGUgY2FsbCB0byAkZGlnZXN0XG4gICAgICAgICRicm93c2VyLiQkY2hlY2tVcmxDaGFuZ2UoKTtcblxuICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSAmJiBhcHBseUFzeW5jSWQgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSByb290IHNjb3BlLCBhbmQgJGFwcGx5QXN5bmMgaGFzIHNjaGVkdWxlZCBhIGRlZmVycmVkICRhcHBseSgpLCB0aGVuXG4gICAgICAgICAgLy8gY2FuY2VsIHRoZSBzY2hlZHVsZWQgJGFwcGx5IGFuZCBmbHVzaCB0aGUgcXVldWUgb2YgZXhwcmVzc2lvbnMgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICAgICRicm93c2VyLmRlZmVyLmNhbmNlbChhcHBseUFzeW5jSWQpO1xuICAgICAgICAgIGZsdXNoQXBwbHlBc3luYygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuXG4gICAgICAgIGRvIHsgLy8gXCJ3aGlsZSBkaXJ0eVwiIGxvb3BcbiAgICAgICAgICBkaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgIGN1cnJlbnQgPSB0YXJnZXQ7XG5cbiAgICAgICAgICB3aGlsZSAoYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGFzeW5jVGFzayA9IGFzeW5jUXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgYXN5bmNUYXNrLnNjb3BlLiRldmFsKGFzeW5jVGFzay5leHByZXNzaW9uKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJhdmVyc2VTY29wZXNMb29wOlxuICAgICAgICAgIGRvIHsgLy8gXCJ0cmF2ZXJzZSB0aGUgc2NvcGVzXCIgbG9vcFxuICAgICAgICAgICAgaWYgKCh3YXRjaGVycyA9IGN1cnJlbnQuJCR3YXRjaGVycykpIHtcbiAgICAgICAgICAgICAgLy8gcHJvY2VzcyBvdXIgd2F0Y2hlc1xuICAgICAgICAgICAgICBsZW5ndGggPSB3YXRjaGVycy5sZW5ndGg7XG4gICAgICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB3YXRjaCA9IHdhdGNoZXJzW2xlbmd0aF07XG4gICAgICAgICAgICAgICAgICAvLyBNb3N0IGNvbW1vbiB3YXRjaGVzIGFyZSBvbiBwcmltaXRpdmVzLCBpbiB3aGljaCBjYXNlIHdlIGNhbiBzaG9ydFxuICAgICAgICAgICAgICAgICAgLy8gY2lyY3VpdCBpdCB3aXRoID09PSBvcGVyYXRvciwgb25seSB3aGVuID09PSBmYWlscyBkbyB3ZSB1c2UgLmVxdWFsc1xuICAgICAgICAgICAgICAgICAgaWYgKHdhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgPSB3YXRjaC5nZXQoY3VycmVudCkpICE9PSAobGFzdCA9IHdhdGNoLmxhc3QpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhKHdhdGNoLmVxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlcXVhbHModmFsdWUsIGxhc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgbGFzdCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBpc05hTih2YWx1ZSkgJiYgaXNOYU4obGFzdCkpKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IHdhdGNoO1xuICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmxhc3QgPSB3YXRjaC5lcSA/IGNvcHkodmFsdWUsIG51bGwpIDogdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgd2F0Y2guZm4odmFsdWUsICgobGFzdCA9PT0gaW5pdFdhdGNoVmFsKSA/IHZhbHVlIDogbGFzdCksIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh0dGwgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dJZHggPSA0IC0gdHRsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXRjaExvZ1tsb2dJZHhdKSB3YXRjaExvZ1tsb2dJZHhdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dNc2cgPSAoaXNGdW5jdGlvbih3YXRjaC5leHApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2ZuOiAnICsgKHdhdGNoLmV4cC5uYW1lIHx8IHdhdGNoLmV4cC50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogd2F0Y2guZXhwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nTXNnICs9ICc7IG5ld1ZhbDogJyArIHRvSnNvbih2YWx1ZSkgKyAnOyBvbGRWYWw6ICcgKyB0b0pzb24obGFzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXRjaExvZ1tsb2dJZHhdLnB1c2gobG9nTXNnKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2F0Y2ggPT09IGxhc3REaXJ0eVdhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG1vc3QgcmVjZW50bHkgZGlydHkgd2F0Y2hlciBpcyBub3cgY2xlYW4sIHNob3J0IGNpcmN1aXQgc2luY2UgdGhlIHJlbWFpbmluZyB3YXRjaGVyc1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGhhdmUgYWxyZWFkeSBiZWVuIHRlc3RlZC5cbiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIHRyYXZlcnNlU2NvcGVzTG9vcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWxcbiAgICAgICAgICAgIC8vIHllcywgdGhpcyBjb2RlIGlzIGEgYml0IGNyYXp5LCBidXQgaXQgd29ya3MgYW5kIHdlIGhhdmUgdGVzdHMgdG8gcHJvdmUgaXQhXG4gICAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRicm9hZGNhc3RcbiAgICAgICAgICAgIGlmICghKG5leHQgPSAoY3VycmVudC4kJGNoaWxkSGVhZCB8fFxuICAgICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IG5leHQpKTtcblxuICAgICAgICAgIC8vIGBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7YCB0YWtlcyB1cyB0byBoZXJlXG5cbiAgICAgICAgICBpZiAoKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKSAmJiAhKHR0bC0tKSkge1xuICAgICAgICAgICAgY2xlYXJQaGFzZSgpO1xuICAgICAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5mZGlnJyxcbiAgICAgICAgICAgICAgICAnezB9ICRkaWdlc3QoKSBpdGVyYXRpb25zIHJlYWNoZWQuIEFib3J0aW5nIVxcbicgK1xuICAgICAgICAgICAgICAgICdXYXRjaGVycyBmaXJlZCBpbiB0aGUgbGFzdCA1IGl0ZXJhdGlvbnM6IHsxfScsXG4gICAgICAgICAgICAgICAgVFRMLCB0b0pzb24od2F0Y2hMb2cpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSB3aGlsZSAoZGlydHkgfHwgYXN5bmNRdWV1ZS5sZW5ndGgpO1xuXG4gICAgICAgIGNsZWFyUGhhc2UoKTtcblxuICAgICAgICB3aGlsZSAocG9zdERpZ2VzdFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwb3N0RGlnZXN0UXVldWUuc2hpZnQoKSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveVxuICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gc2NvcGUgYmVpbmcgZGVzdHJveWVkXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBCcm9hZGNhc3RlZCB3aGVuIGEgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbiBhcmUgYmVpbmcgZGVzdHJveWVkLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVtb3ZlcyB0aGUgY3VycmVudCBzY29wZSAoYW5kIGFsbCBvZiBpdHMgY2hpbGRyZW4pIGZyb20gdGhlIHBhcmVudCBzY29wZS4gUmVtb3ZhbCBpbXBsaWVzXG4gICAgICAgKiB0aGF0IGNhbGxzIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSB3aWxsIG5vIGxvbmdlclxuICAgICAgICogcHJvcGFnYXRlIHRvIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uIFJlbW92YWwgYWxzbyBpbXBsaWVzIHRoYXQgdGhlIGN1cnJlbnRcbiAgICAgICAqIHNjb3BlIGlzIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZGVzdHJveSgpYCBpcyB1c3VhbGx5IHVzZWQgYnkgZGlyZWN0aXZlcyBzdWNoIGFzXG4gICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fSBmb3IgbWFuYWdpbmcgdGhlXG4gICAgICAgKiB1bnJvbGxpbmcgb2YgdGhlIGxvb3AuXG4gICAgICAgKlxuICAgICAgICogSnVzdCBiZWZvcmUgYSBzY29wZSBpcyBkZXN0cm95ZWQsIGEgYCRkZXN0cm95YCBldmVudCBpcyBicm9hZGNhc3RlZCBvbiB0aGlzIHNjb3BlLlxuICAgICAgICogQXBwbGljYXRpb24gY29kZSBjYW4gcmVnaXN0ZXIgYSBgJGRlc3Ryb3lgIGV2ZW50IGhhbmRsZXIgdGhhdCB3aWxsIGdpdmUgaXQgYSBjaGFuY2UgdG9cbiAgICAgICAqIHBlcmZvcm0gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cbiAgICAgICRkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gd2UgY2FuJ3QgZGVzdHJveSB0aGUgcm9vdCBzY29wZSBvciBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWRcbiAgICAgICAgaWYgKHRoaXMuJCRkZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuJHBhcmVudDtcblxuICAgICAgICB0aGlzLiRicm9hZGNhc3QoJyRkZXN0cm95Jyk7XG4gICAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSkgcmV0dXJuO1xuXG4gICAgICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiB0aGlzLiQkbGlzdGVuZXJDb3VudCkge1xuICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQodGhpcywgdGhpcy4kJGxpc3RlbmVyQ291bnRbZXZlbnROYW1lXSwgZXZlbnROYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldmVyIGFsbCB0aGUgcmVmZXJlbmNlcyB0byBwYXJlbnQgc2NvcGVzIChhZnRlciB0aGlzIGNsZWFudXAsIHRoZSBjdXJyZW50IHNjb3BlIHNob3VsZFxuICAgICAgICAvLyBub3QgYmUgcmV0YWluZWQgYnkgYW55IG9mIG91ciByZWZlcmVuY2VzIGFuZCBzaG91bGQgYmUgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbilcbiAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCA9PSB0aGlzKSBwYXJlbnQuJCRjaGlsZEhlYWQgPSB0aGlzLiQkbmV4dFNpYmxpbmc7XG4gICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuICAgICAgICBpZiAodGhpcy4kJHByZXZTaWJsaW5nKSB0aGlzLiQkcHJldlNpYmxpbmcuJCRuZXh0U2libGluZyA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7XG5cbiAgICAgICAgLy8gRGlzYWJsZSBsaXN0ZW5lcnMsIHdhdGNoZXJzIGFuZCBhcHBseS9kaWdlc3QgbWV0aG9kc1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gdGhpcy4kZGlnZXN0ID0gdGhpcy4kYXBwbHkgPSB0aGlzLiRldmFsQXN5bmMgPSB0aGlzLiRhcHBseUFzeW5jID0gbm9vcDtcbiAgICAgICAgdGhpcy4kb24gPSB0aGlzLiR3YXRjaCA9IHRoaXMuJHdhdGNoR3JvdXAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5vb3A7IH07XG4gICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcblxuICAgICAgICAvLyBBbGwgb2YgdGhlIGNvZGUgYmVsb3cgaXMgYm9ndXMgY29kZSB0aGF0IHdvcmtzIGFyb3VuZCBWOCdzIG1lbW9yeSBsZWFrIHZpYSBvcHRpbWl6ZWQgY29kZVxuICAgICAgICAvLyBhbmQgaW5saW5lIGNhY2hlcy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gc2VlOlxuICAgICAgICAvLyAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDczI2MyNlxuICAgICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzY3OTQjaXNzdWVjb21tZW50LTM4NjQ4OTA5XG4gICAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTMxMyNpc3N1ZWNvbW1lbnQtMTAzNzg0NTFcblxuICAgICAgICB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkY2hpbGRIZWFkID1cbiAgICAgICAgICAgIHRoaXMuJCRjaGlsZFRhaWwgPSB0aGlzLiRyb290ID0gdGhpcy4kJHdhdGNoZXJzID0gbnVsbDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZXZhbFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEV4ZWN1dGVzIHRoZSBgZXhwcmVzc2lvbmAgb24gdGhlIGN1cnJlbnQgc2NvcGUgYW5kIHJldHVybnMgdGhlIHJlc3VsdC4gQW55IGV4Y2VwdGlvbnMgaW5cbiAgICAgICAqIHRoZSBleHByZXNzaW9uIGFyZSBwcm9wYWdhdGVkICh1bmNhdWdodCkuIFRoaXMgaXMgdXNlZnVsIHdoZW4gZXZhbHVhdGluZyBBbmd1bGFyXG4gICAgICAgKiBleHByZXNzaW9ucy5cbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIHZhciBzY29wZSA9IG5nLiRyb290U2NvcGUuU2NvcGUoKTtcbiAgICAgICAgICAgc2NvcGUuYSA9IDE7XG4gICAgICAgICAgIHNjb3BlLmIgPSAyO1xuXG4gICAgICAgICAgIGV4cGVjdChzY29wZS4kZXZhbCgnYStiJykpLnRvRXF1YWwoMyk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS4kZXZhbChmdW5jdGlvbihzY29wZSl7IHJldHVybiBzY29wZS5hICsgc2NvcGUuYjsgfSkpLnRvRXF1YWwoMyk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluICB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsob2JqZWN0KT19IGxvY2FscyBMb2NhbCB2YXJpYWJsZXMgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluIHNjb3BlLlxuICAgICAgICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgJGV2YWw6IGZ1bmN0aW9uKGV4cHIsIGxvY2Fscykge1xuICAgICAgICByZXR1cm4gJHBhcnNlKGV4cHIpKHRoaXMsIGxvY2Fscyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWxBc3luY1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIG9uIHRoZSBjdXJyZW50IHNjb3BlIGF0IGEgbGF0ZXIgcG9pbnQgaW4gdGltZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYCRldmFsQXN5bmNgIG1ha2VzIG5vIGd1YXJhbnRlZXMgYXMgdG8gd2hlbiB0aGUgYGV4cHJlc3Npb25gIHdpbGwgYmUgZXhlY3V0ZWQsIG9ubHlcbiAgICAgICAqIHRoYXQ6XG4gICAgICAgKlxuICAgICAgICogICAtIGl0IHdpbGwgZXhlY3V0ZSBhZnRlciB0aGUgZnVuY3Rpb24gdGhhdCBzY2hlZHVsZWQgdGhlIGV2YWx1YXRpb24gKHByZWZlcmFibHkgYmVmb3JlIERPTVxuICAgICAgICogICAgIHJlbmRlcmluZykuXG4gICAgICAgKiAgIC0gYXQgbGVhc3Qgb25lIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCBjeWNsZX0gd2lsbCBiZSBwZXJmb3JtZWQgYWZ0ZXJcbiAgICAgICAqICAgICBgZXhwcmVzc2lvbmAgZXhlY3V0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgICoge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICpcbiAgICAgICAqIF9fTm90ZTpfXyBpZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgYCRkaWdlc3RgIGN5Y2xlLCBhIG5ldyBgJGRpZ2VzdGAgY3ljbGVcbiAgICAgICAqIHdpbGwgYmUgc2NoZWR1bGVkLiBIb3dldmVyLCBpdCBpcyBlbmNvdXJhZ2VkIHRvIGFsd2F5cyBjYWxsIGNvZGUgdGhhdCBjaGFuZ2VzIHRoZSBtb2RlbFxuICAgICAgICogZnJvbSB3aXRoaW4gYW4gYCRhcHBseWAgY2FsbC4gVGhhdCBpbmNsdWRlcyBjb2RlIGV2YWx1YXRlZCB2aWEgYCRldmFsQXN5bmNgLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cHJlc3Npb24gQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgJGV2YWxBc3luYzogZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAvLyBpZiB3ZSBhcmUgb3V0c2lkZSBvZiBhbiAkZGlnZXN0IGxvb3AgYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgd2UgYXJlIHNjaGVkdWxpbmcgYXN5bmNcbiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2hcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UgJiYgIWFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBleHByZXNzaW9uOiBleHByfSk7XG4gICAgICB9LFxuXG4gICAgICAkJHBvc3REaWdlc3Q6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHBvc3REaWdlc3RRdWV1ZS5wdXNoKGZuKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYXBwbHlcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBgJGFwcGx5KClgIGlzIHVzZWQgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIGFuZ3VsYXIgZnJvbSBvdXRzaWRlIG9mIHRoZSBhbmd1bGFyXG4gICAgICAgKiBmcmFtZXdvcmsuIChGb3IgZXhhbXBsZSBmcm9tIGJyb3dzZXIgRE9NIGV2ZW50cywgc2V0VGltZW91dCwgWEhSIG9yIHRoaXJkIHBhcnR5IGxpYnJhcmllcykuXG4gICAgICAgKiBCZWNhdXNlIHdlIGFyZSBjYWxsaW5nIGludG8gdGhlIGFuZ3VsYXIgZnJhbWV3b3JrIHdlIG5lZWQgdG8gcGVyZm9ybSBwcm9wZXIgc2NvcGUgbGlmZVxuICAgICAgICogY3ljbGUgb2Yge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyIGV4Y2VwdGlvbiBoYW5kbGluZ30sXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0IGV4ZWN1dGluZyB3YXRjaGVzfS5cbiAgICAgICAqXG4gICAgICAgKiAjIyBMaWZlIGN5Y2xlXG4gICAgICAgKlxuICAgICAgICogIyBQc2V1ZG8tQ29kZSBvZiBgJGFwcGx5KClgXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICBmdW5jdGlvbiAkYXBwbHkoZXhwcikge1xuICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICByZXR1cm4gJGV2YWwoZXhwcik7XG4gICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICRyb290LiRkaWdlc3QoKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH1cbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBTY29wZSdzIGAkYXBwbHkoKWAgbWV0aG9kIHRyYW5zaXRpb25zIHRocm91Z2ggdGhlIGZvbGxvd2luZyBzdGFnZXM6XG4gICAgICAgKlxuICAgICAgICogMS4gVGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIGV4ZWN1dGVkIHVzaW5nIHRoZVxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWwgJGV2YWwoKX0gbWV0aG9kLlxuICAgICAgICogMi4gQW55IGV4Y2VwdGlvbnMgZnJvbSB0aGUgZXhlY3V0aW9uIG9mIHRoZSBleHByZXNzaW9uIGFyZSBmb3J3YXJkZWQgdG8gdGhlXG4gICAgICAgKiAgICB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKiAzLiBUaGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNofSBsaXN0ZW5lcnMgYXJlIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZVxuICAgICAgICogICAgZXhwcmVzc2lvbiB3YXMgZXhlY3V0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBtZXRob2QuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cCBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLlxuICAgICAgICovXG4gICAgICAkYXBwbHk6IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBiZWdpblBoYXNlKCckYXBwbHknKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy4kZXZhbChleHByKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGNsZWFyUGhhc2UoKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2NoZWR1bGUgdGhlIGludm9rYXRpb24gb2YgJGFwcGx5IHRvIG9jY3VyIGF0IGEgbGF0ZXIgdGltZS4gVGhlIGFjdHVhbCB0aW1lIGRpZmZlcmVuY2VcbiAgICAgICAqIHZhcmllcyBhY3Jvc3MgYnJvd3NlcnMsIGJ1dCBpcyB0eXBpY2FsbHkgYXJvdW5kIH4xMCBtaWxsaXNlY29uZHMuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBxdWV1ZSB1cCBtdWx0aXBsZSBleHByZXNzaW9ucyB3aGljaCBuZWVkIHRvIGJlIGV2YWx1YXRlZCBpbiB0aGUgc2FtZVxuICAgICAgICogZGlnZXN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cCBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5QXN5bmM6IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcztcbiAgICAgICAgZXhwciAmJiBhcHBseUFzeW5jUXVldWUucHVzaCgkYXBwbHlBc3luY0V4cHJlc3Npb24pO1xuICAgICAgICBzY2hlZHVsZUFwcGx5QXN5bmMoKTtcblxuICAgICAgICBmdW5jdGlvbiAkYXBwbHlBc3luY0V4cHJlc3Npb24oKSB7XG4gICAgICAgICAgc2NvcGUuJGV2YWwoZXhwcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkb25cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBMaXN0ZW5zIG9uIGV2ZW50cyBvZiBhIGdpdmVuIHR5cGUuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZW1pdCAkZW1pdH0gZm9yXG4gICAgICAgKiBkaXNjdXNzaW9uIG9mIGV2ZW50IGxpZmUgY3ljbGUuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uIGZvcm1hdCBpczogYGZ1bmN0aW9uKGV2ZW50LCBhcmdzLi4uKWAuIFRoZSBgZXZlbnRgIG9iamVjdFxuICAgICAgICogcGFzc2VkIGludG8gdGhlIGxpc3RlbmVyIGhhcyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gICAgICAgKlxuICAgICAgICogICAtIGB0YXJnZXRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBzY29wZSBvbiB3aGljaCB0aGUgZXZlbnQgd2FzIGAkZW1pdGAtZWQgb3JcbiAgICAgICAqICAgICBgJGJyb2FkY2FzdGAtZWQuXG4gICAgICAgKiAgIC0gYGN1cnJlbnRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBzY29wZSB0aGF0IGlzIGN1cnJlbnRseSBoYW5kbGluZyB0aGUgZXZlbnQuIE9uY2UgdGhlXG4gICAgICAgKiAgICAgZXZlbnQgcHJvcGFnYXRlcyB0aHJvdWdoIHRoZSBzY29wZSBoaWVyYXJjaHksIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIG51bGwuXG4gICAgICAgKiAgIC0gYG5hbWVgIC0gYHtzdHJpbmd9YDogbmFtZSBvZiB0aGUgZXZlbnQuXG4gICAgICAgKiAgIC0gYHN0b3BQcm9wYWdhdGlvbmAgLSBge2Z1bmN0aW9uPX1gOiBjYWxsaW5nIGBzdG9wUHJvcGFnYXRpb25gIGZ1bmN0aW9uIHdpbGwgY2FuY2VsXG4gICAgICAgKiAgICAgZnVydGhlciBldmVudCBwcm9wYWdhdGlvbiAoYXZhaWxhYmxlIG9ubHkgZm9yIGV2ZW50cyB0aGF0IHdlcmUgYCRlbWl0YC1lZCkuXG4gICAgICAgKiAgIC0gYHByZXZlbnREZWZhdWx0YCAtIGB7ZnVuY3Rpb259YDogY2FsbGluZyBgcHJldmVudERlZmF1bHRgIHNldHMgYGRlZmF1bHRQcmV2ZW50ZWRgIGZsYWdcbiAgICAgICAqICAgICB0byB0cnVlLlxuICAgICAgICogICAtIGBkZWZhdWx0UHJldmVudGVkYCAtIGB7Ym9vbGVhbn1gOiB0cnVlIGlmIGBwcmV2ZW50RGVmYXVsdGAgd2FzIGNhbGxlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGxpc3RlbiBvbi5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQsIC4uLmFyZ3MpfSBsaXN0ZW5lciBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLlxuICAgICAgICovXG4gICAgICAkb246IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBuYW1lZExpc3RlbmVycyA9IHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV07XG4gICAgICAgIGlmICghbmFtZWRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICB0aGlzLiQkbGlzdGVuZXJzW25hbWVdID0gbmFtZWRMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBuYW1lZExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXM7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoIWN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdKSB7XG4gICAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdKys7XG4gICAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KSk7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGluZGV4T2ZMaXN0ZW5lciA9IG5hbWVkTGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICAgIGlmIChpbmRleE9mTGlzdGVuZXIgIT09IC0xKSB7XG4gICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpbmRleE9mTGlzdGVuZXJdID0gbnVsbDtcbiAgICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQoc2VsZiwgMSwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGVtaXRcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCB1cHdhcmRzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSBub3RpZnlpbmcgdGhlXG4gICAgICAgKiByZWdpc3RlcmVkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gbGlzdGVuZXJzLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRlbWl0YCB3YXMgY2FsbGVkLiBBbGxcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IGxpc3RlbmluZyBmb3IgYG5hbWVgIGV2ZW50IG9uIHRoaXMgc2NvcGUgZ2V0XG4gICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHRyYXZlcnNlcyB1cHdhcmRzIHRvd2FyZCB0aGUgcm9vdCBzY29wZSBhbmQgY2FsbHMgYWxsXG4gICAgICAgKiByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgd2lsbCBzdG9wIHByb3BhZ2F0aW5nIGlmIG9uZSBvZiB0aGUgbGlzdGVuZXJzXG4gICAgICAgKiBjYW5jZWxzIGl0LlxuICAgICAgICpcbiAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZFxuICAgICAgICogb250byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gZW1pdC5cbiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBvbmUgb3IgbW9yZSBhcmd1bWVudHMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgb250byB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QgKHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259KS5cbiAgICAgICAqL1xuICAgICAgJGVtaXQ6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gW10sXG4gICAgICAgICAgICBuYW1lZExpc3RlbmVycyxcbiAgICAgICAgICAgIHNjb3BlID0gdGhpcyxcbiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbiA9IGZhbHNlLFxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIHRhcmdldFNjb3BlOiBzY29wZSxcbiAgICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtzdG9wUHJvcGFnYXRpb24gPSB0cnVlO30sXG4gICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaXN0ZW5lckFyZ3MgPSBjb25jYXQoW2V2ZW50XSwgYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGksIGxlbmd0aDtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgbmFtZWRMaXN0ZW5lcnMgPSBzY29wZS4kJGxpc3RlbmVyc1tuYW1lXSB8fCBlbXB0eTtcbiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBzY29wZTtcbiAgICAgICAgICBmb3IgKGk9MCwgbGVuZ3RoPW5hbWVkTGlzdGVuZXJzLmxlbmd0aDsgaTxsZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAvLyBpZiBsaXN0ZW5lcnMgd2VyZSBkZXJlZ2lzdGVyZWQsIGRlZnJhZ21lbnQgdGhlIGFycmF5XG4gICAgICAgICAgICBpZiAoIW5hbWVkTGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvL2FsbG93IGFsbCBsaXN0ZW5lcnMgYXR0YWNoZWQgdG8gdGhlIGN1cnJlbnQgc2NvcGUgdG8gcnVuXG4gICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGxpc3RlbmVyQXJncyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvL2lmIGFueSBsaXN0ZW5lciBvbiB0aGUgY3VycmVudCBzY29wZSBzdG9wcyBwcm9wYWdhdGlvbiwgcHJldmVudCBidWJibGluZ1xuICAgICAgICAgIGlmIChzdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vdHJhdmVyc2UgdXB3YXJkc1xuICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudDtcbiAgICAgICAgfSB3aGlsZSAoc2NvcGUpO1xuXG4gICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGJyb2FkY2FzdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIGRvd253YXJkcyB0byBhbGwgY2hpbGQgc2NvcGVzIChhbmQgdGhlaXIgY2hpbGRyZW4pIG5vdGlmeWluZyB0aGVcbiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGJyb2FkY2FzdGAgd2FzIGNhbGxlZC4gQWxsXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldFxuICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCBwcm9wYWdhdGVzIHRvIGFsbCBkaXJlY3QgYW5kIGluZGlyZWN0IHNjb3BlcyBvZiB0aGUgY3VycmVudFxuICAgICAgICogc2NvcGUgYW5kIGNhbGxzIGFsbCByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgY2Fubm90IGJlIGNhbmNlbGVkLlxuICAgICAgICpcbiAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZFxuICAgICAgICogb250byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gYnJvYWRjYXN0LlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIG9uZSBvciBtb3JlIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCwgc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn1cbiAgICAgICAqL1xuICAgICAgJGJyb2FkY2FzdDogZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgICAgIGN1cnJlbnQgPSB0YXJnZXQsXG4gICAgICAgICAgICBuZXh0ID0gdGFyZ2V0LFxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIHRhcmdldFNjb3BlOiB0YXJnZXQsXG4gICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgaWYgKCF0YXJnZXQuJCRsaXN0ZW5lckNvdW50W25hbWVdKSByZXR1cm4gZXZlbnQ7XG5cbiAgICAgICAgdmFyIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgbGlzdGVuZXJzLCBpLCBsZW5ndGg7XG5cbiAgICAgICAgLy9kb3duIHdoaWxlIHlvdSBjYW4sIHRoZW4gdXAgYW5kIG5leHQgc2libGluZyBvciB1cCBhbmQgbmV4dCBzaWJsaW5nIHVudGlsIGJhY2sgYXQgcm9vdFxuICAgICAgICB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSkge1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgbGlzdGVuZXJzID0gY3VycmVudC4kJGxpc3RlbmVyc1tuYW1lXSB8fCBbXTtcbiAgICAgICAgICBmb3IgKGk9MCwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaTxsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgaWYgKCFsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWxcbiAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxuICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGRpZ2VzdFxuICAgICAgICAgIC8vICh0aG91Z2ggaXQgZGlmZmVycyBkdWUgdG8gaGF2aW5nIHRoZSBleHRyYSBjaGVjayBmb3IgJCRsaXN0ZW5lckNvdW50KVxuICAgICAgICAgIGlmICghKG5leHQgPSAoKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdICYmIGN1cnJlbnQuJCRjaGlsZEhlYWQpIHx8XG4gICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciAkcm9vdFNjb3BlID0gbmV3IFNjb3BlKCk7XG5cbiAgICAvL1RoZSBpbnRlcm5hbCBxdWV1ZXMuIEV4cG9zZSB0aGVtIG9uIHRoZSAkcm9vdFNjb3BlIGZvciBkZWJ1Z2dpbmcvdGVzdGluZyBwdXJwb3Nlcy5cbiAgICB2YXIgYXN5bmNRdWV1ZSA9ICRyb290U2NvcGUuJCRhc3luY1F1ZXVlID0gW107XG4gICAgdmFyIHBvc3REaWdlc3RRdWV1ZSA9ICRyb290U2NvcGUuJCRwb3N0RGlnZXN0UXVldWUgPSBbXTtcbiAgICB2YXIgYXBwbHlBc3luY1F1ZXVlID0gJHJvb3RTY29wZS4kJGFwcGx5QXN5bmNRdWV1ZSA9IFtdO1xuXG4gICAgcmV0dXJuICRyb290U2NvcGU7XG5cblxuICAgIGZ1bmN0aW9uIGJlZ2luUGhhc2UocGhhc2UpIHtcbiAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5wcm9nJywgJ3swfSBhbHJlYWR5IGluIHByb2dyZXNzJywgJHJvb3RTY29wZS4kJHBoYXNlKTtcbiAgICAgIH1cblxuICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gcGhhc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJQaGFzZSgpIHtcbiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IG51bGw7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KGN1cnJlbnQsIGNvdW50LCBuYW1lKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdIC09IGNvdW50O1xuXG4gICAgICAgIGlmIChjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9PT0gMCkge1xuICAgICAgICAgIGRlbGV0ZSBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiB1c2VkIGFzIGFuIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzLlxuICAgICAqIGJlY2F1c2UgaXQncyB1bmlxdWUgd2UgY2FuIGVhc2lseSB0ZWxsIGl0IGFwYXJ0IGZyb20gb3RoZXIgdmFsdWVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdFdhdGNoVmFsKCkge31cblxuICAgIGZ1bmN0aW9uIGZsdXNoQXBwbHlBc3luYygpIHtcbiAgICAgIHdoaWxlIChhcHBseUFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXBwbHlBc3luY1F1ZXVlLnNoaWZ0KCkoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBseUFzeW5jSWQgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlQXBwbHlBc3luYygpIHtcbiAgICAgIGlmIChhcHBseUFzeW5jSWQgPT09IG51bGwpIHtcbiAgICAgICAgYXBwbHlBc3luY0lkID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZmx1c2hBcHBseUFzeW5jKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFByaXZhdGUgc2VydmljZSB0byBzYW5pdGl6ZSB1cmlzIGZvciBsaW5rcyBhbmQgaW1hZ2VzLiBVc2VkIGJ5ICRjb21waWxlIGFuZCAkc2FuaXRpemUuXG4gKi9cbmZ1bmN0aW9uICQkU2FuaXRpemVVcmlQcm92aWRlcigpIHtcbiAgdmFyIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gL15cXHMqKGh0dHBzP3xmdHB8bWFpbHRvfHRlbHxmaWxlKTovLFxuICAgIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXFxzKigoaHR0cHM/fGZ0cHxmaWxlfGJsb2IpOnxkYXRhOmltYWdlXFwvKS87XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGFbaHJlZl0gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50IFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IHJlZ2V4cDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7XG4gIH07XG5cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50IFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGltZ1tzcmNdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2FuaXRpemVVcmkodXJpLCBpc0ltYWdlKSB7XG4gICAgICB2YXIgcmVnZXggPSBpc0ltYWdlID8gaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0IDogYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7XG4gICAgICB2YXIgbm9ybWFsaXplZFZhbDtcbiAgICAgIG5vcm1hbGl6ZWRWYWwgPSB1cmxSZXNvbHZlKHVyaSkuaHJlZjtcbiAgICAgIGlmIChub3JtYWxpemVkVmFsICE9PSAnJyAmJiAhbm9ybWFsaXplZFZhbC5tYXRjaChyZWdleCkpIHtcbiAgICAgICAgcmV0dXJuICd1bnNhZmU6Jytub3JtYWxpemVkVmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVyaTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgJHNjZU1pbkVyciA9IG1pbkVycignJHNjZScpO1xuXG52YXIgU0NFX0NPTlRFWFRTID0ge1xuICBIVE1MOiAnaHRtbCcsXG4gIENTUzogJ2NzcycsXG4gIFVSTDogJ3VybCcsXG4gIC8vIFJFU09VUkNFX1VSTCBpcyBhIHN1YnR5cGUgb2YgVVJMIHVzZWQgaW4gY29udGV4dHMgd2hlcmUgYSBwcml2aWxlZ2VkIHJlc291cmNlIGlzIHNvdXJjZWQgZnJvbSBhXG4gIC8vIHVybC4gIChlLmcuIG5nLWluY2x1ZGUsIHNjcmlwdCBzcmMsIHRlbXBsYXRlVXJsKVxuICBSRVNPVVJDRV9VUkw6ICdyZXNvdXJjZVVybCcsXG4gIEpTOiAnanMnXG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb25zIGZvbGxvdy5cblxuZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSB7XG4gIGlmIChtYXRjaGVyID09PSAnc2VsZicpIHtcbiAgICByZXR1cm4gbWF0Y2hlcjtcbiAgfSBlbHNlIGlmIChpc1N0cmluZyhtYXRjaGVyKSkge1xuICAgIC8vIFN0cmluZ3MgbWF0Y2ggZXhhY3RseSBleGNlcHQgZm9yIDIgd2lsZGNhcmRzIC0gJyonIGFuZCAnKionLlxuICAgIC8vICcqJyBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgZXhjZXB0IHRob3NlIGZyb20gdGhlIHNldCAnOi8uPyYnLlxuICAgIC8vICcqKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIChsaWtlIC4qIGluIGEgUmVnRXhwKS5cbiAgICAvLyBNb3JlIHRoYW4gMiAqJ3MgcmFpc2VzIGFuIGVycm9yIGFzIGl0J3MgaWxsIGRlZmluZWQuXG4gICAgaWYgKG1hdGNoZXIuaW5kZXhPZignKioqJykgPiAtMSkge1xuICAgICAgdGhyb3cgJHNjZU1pbkVycignaXdjYXJkJyxcbiAgICAgICAgICAnSWxsZWdhbCBzZXF1ZW5jZSAqKiogaW4gc3RyaW5nIG1hdGNoZXIuICBTdHJpbmc6IHswfScsIG1hdGNoZXIpO1xuICAgIH1cbiAgICBtYXRjaGVyID0gZXNjYXBlRm9yUmVnZXhwKG1hdGNoZXIpLlxuICAgICAgICAgICAgICAgICAgcmVwbGFjZSgnXFxcXCpcXFxcKicsICcuKicpLlxuICAgICAgICAgICAgICAgICAgcmVwbGFjZSgnXFxcXConLCAnW146Ly4/JjtdKicpO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXIgKyAnJCcpO1xuICB9IGVsc2UgaWYgKGlzUmVnRXhwKG1hdGNoZXIpKSB7XG4gICAgLy8gVGhlIG9ubHkgb3RoZXIgdHlwZSBvZiBtYXRjaGVyIGFsbG93ZWQgaXMgYSBSZWdleHAuXG4gICAgLy8gTWF0Y2ggZW50aXJlIFVSTCAvIGRpc2FsbG93IHBhcnRpYWwgbWF0Y2hlcy5cbiAgICAvLyBGbGFncyBhcmUgcmVzZXQgKGkuZS4gbm8gZ2xvYmFsLCBpZ25vcmVDYXNlIG9yIG11bHRpbGluZSlcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyLnNvdXJjZSArICckJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgJHNjZU1pbkVycignaW1hdGNoZXInLFxuICAgICAgICAnTWF0Y2hlcnMgbWF5IG9ubHkgYmUgXCJzZWxmXCIsIHN0cmluZyBwYXR0ZXJucyBvciBSZWdFeHAgb2JqZWN0cycpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcnMobWF0Y2hlcnMpIHtcbiAgdmFyIGFkanVzdGVkTWF0Y2hlcnMgPSBbXTtcbiAgaWYgKGlzRGVmaW5lZChtYXRjaGVycykpIHtcbiAgICBmb3JFYWNoKG1hdGNoZXJzLCBmdW5jdGlvbihtYXRjaGVyKSB7XG4gICAgICBhZGp1c3RlZE1hdGNoZXJzLnB1c2goYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGFkanVzdGVkTWF0Y2hlcnM7XG59XG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNjZURlbGVnYXRlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlRGVsZWdhdGVgIGlzIGEgc2VydmljZSB0aGF0IGlzIHVzZWQgYnkgdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIHByb3ZpZGUge0BsaW5rIG5nLiRzY2UgU3RyaWN0XG4gKiBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfSBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogVHlwaWNhbGx5LCB5b3Ugd291bGQgY29uZmlndXJlIG9yIG92ZXJyaWRlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlICRzY2VEZWxlZ2F0ZX0gaW5zdGVhZCBvZlxuICogdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIGN1c3RvbWl6ZSB0aGUgd2F5IFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIHdvcmtzIGluIEFuZ3VsYXJKUy4gIFRoaXMgaXNcbiAqIGJlY2F1c2UsIHdoaWxlIHRoZSBgJHNjZWAgcHJvdmlkZXMgbnVtZXJvdXMgc2hvcnRoYW5kIG1ldGhvZHMsIGV0Yy4sIHlvdSByZWFsbHkgb25seSBuZWVkIHRvXG4gKiBvdmVycmlkZSAzIGNvcmUgZnVuY3Rpb25zIChgdHJ1c3RBc2AsIGBnZXRUcnVzdGVkYCBhbmQgYHZhbHVlT2ZgKSB0byByZXBsYWNlIHRoZSB3YXkgdGhpbmdzXG4gKiB3b3JrIGJlY2F1c2UgYCRzY2VgIGRlbGVnYXRlcyB0byBgJHNjZURlbGVnYXRlYCBmb3IgdGhlc2Ugb3BlcmF0aW9ucy5cbiAqXG4gKiBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IHRvIGNvbmZpZ3VyZSB0aGlzIHNlcnZpY2UuXG4gKlxuICogVGhlIGRlZmF1bHQgaW5zdGFuY2Ugb2YgYCRzY2VEZWxlZ2F0ZWAgc2hvdWxkIHdvcmsgb3V0IG9mIHRoZSBib3ggd2l0aCBsaXR0bGUgcGFpbi4gIFdoaWxlIHlvdVxuICogY2FuIG92ZXJyaWRlIGl0IGNvbXBsZXRlbHkgdG8gY2hhbmdlIHRoZSBiZWhhdmlvciBvZiBgJHNjZWAsIHRoZSBjb21tb24gY2FzZSB3b3VsZFxuICogaW52b2x2ZSBjb25maWd1cmluZyB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSBpbnN0ZWFkIGJ5IHNldHRpbmdcbiAqIHlvdXIgb3duIHdoaXRlbGlzdHMgYW5kIGJsYWNrbGlzdHMgZm9yIHRydXN0aW5nIFVSTHMgdXNlZCBmb3IgbG9hZGluZyBBbmd1bGFySlMgcmVzb3VyY2VzIHN1Y2ggYXNcbiAqIHRlbXBsYXRlcy4gIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdFxuICogJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9IGFuZCB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fVxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGAkc2NlRGVsZWdhdGVQcm92aWRlcmAgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlXG4gKiAkc2NlRGVsZWdhdGV9IHNlcnZpY2UuICBUaGlzIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZVxuICogdGhhdCB0aGUgVVJMcyB1c2VkIGZvciBzb3VyY2luZyBBbmd1bGFyIHRlbXBsYXRlcyBhcmUgc2FmZS4gIFJlZmVyIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9IGFuZFxuICoge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fVxuICpcbiAqIEZvciB0aGUgZ2VuZXJhbCBkZXRhaWxzIGFib3V0IHRoaXMgc2VydmljZSBpbiBBbmd1bGFyLCByZWFkIHRoZSBtYWluIHBhZ2UgZm9yIHtAbGluayBuZy4kc2NlXG4gKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKlxuICogKipFeGFtcGxlKio6ICBDb25zaWRlciB0aGUgZm9sbG93aW5nIGNhc2UuIDxhIG5hbWU9XCJleGFtcGxlXCI+PC9hPlxuICpcbiAqIC0geW91ciBhcHAgaXMgaG9zdGVkIGF0IHVybCBgaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2BcbiAqIC0gYnV0IHNvbWUgb2YgeW91ciB0ZW1wbGF0ZXMgYXJlIGhvc3RlZCBvbiBvdGhlciBkb21haW5zIHlvdSBjb250cm9sIHN1Y2ggYXNcbiAqICAgYGh0dHA6Ly9zcnYwMS5hc3NldHMuZXhhbXBsZS5jb20vYCzCoCBgaHR0cDovL3NydjAyLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBldGMuXG4gKiAtIGFuZCB5b3UgaGF2ZSBhbiBvcGVuIHJlZGlyZWN0IGF0IGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1Py4uLmAuXG4gKlxuICogSGVyZSBpcyB3aGF0IGEgc2VjdXJlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgc2NlbmFyaW8gbWlnaHQgbG9vayBsaWtlOlxuICpcbiAqIGBgYFxuICogIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHtcbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAqICAgICAgLy8gQWxsb3cgc2FtZSBvcmlnaW4gcmVzb3VyY2UgbG9hZHMuXG4gKiAgICAgICdzZWxmJyxcbiAqICAgICAgLy8gQWxsb3cgbG9hZGluZyBmcm9tIG91ciBhc3NldHMgZG9tYWluLiAgTm90aWNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gKiBhbmQgKiouXG4gKiAgICAgICdodHRwOi8vc3J2Ki5hc3NldHMuZXhhbXBsZS5jb20vKionXG4gKiAgICBdKTtcbiAqXG4gKiAgICAvLyBUaGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0IHNvIHRoZSBvcGVuIHJlZGlyZWN0IGhlcmUgaXMgYmxvY2tlZC5cbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0KFtcbiAqICAgICAgJ2h0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnUqKidcbiAqICAgIF0pO1xuICogIH0pO1xuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gJFNjZURlbGVnYXRlUHJvdmlkZXIoKSB7XG4gIHRoaXMuU0NFX0NPTlRFWFRTID0gU0NFX0NPTlRFWFRTO1xuXG4gIC8vIFJlc291cmNlIFVSTHMgY2FuIGFsc28gYmUgdHJ1c3RlZCBieSBwb2xpY3kuXG4gIHZhciByZXNvdXJjZVVybFdoaXRlbGlzdCA9IFsnc2VsZiddLFxuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBbXTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PX0gd2hpdGVsaXN0IFdoZW4gcHJvdmlkZWQsIHJlcGxhY2VzIHRoZSByZXNvdXJjZVVybFdoaXRlbGlzdCB3aXRoIHRoZSB2YWx1ZVxuICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXJcbiAgICogICAgIGNoYW5nZXMgdG8gdGhlIGFycmF5IGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXNcbiAgICogICAgIGFsbG93ZWQgaW4gdGhpcyBhcnJheS5cbiAgICpcbiAgICogICAgIE5vdGU6ICoqYW4gZW1wdHkgd2hpdGVsaXN0IGFycmF5IHdpbGwgYmxvY2sgYWxsIFVSTHMqKiFcbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBjdXJyZW50bHkgc2V0IHdoaXRlbGlzdCBhcnJheS5cbiAgICpcbiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIGBbJ3NlbGYnXWAgYWxsb3dpbmcgb25seVxuICAgKiBzYW1lIG9yaWdpbiByZXNvdXJjZSByZXF1ZXN0cy5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMvR2V0cyB0aGUgd2hpdGVsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy5cbiAgICovXG4gIHRoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXNvdXJjZVVybFdoaXRlbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc291cmNlVXJsV2hpdGVsaXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk9fSBibGFja2xpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsQmxhY2tsaXN0IHdpdGggdGhlIHZhbHVlXG4gICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlclxuICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LlxuICAgKlxuICAgKiAgICAgVGhlIHR5cGljYWwgdXNhZ2UgZm9yIHRoZSBibGFja2xpc3QgaXMgdG8gKipibG9ja1xuICAgKiAgICAgW29wZW4gcmVkaXJlY3RzXShodHRwOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzYwMS5odG1sKSoqIHNlcnZlZCBieSB5b3VyIGRvbWFpbiBhc1xuICAgKiAgICAgdGhlc2Ugd291bGQgb3RoZXJ3aXNlIGJlIHRydXN0ZWQgYnV0IGFjdHVhbGx5IHJldHVybiBjb250ZW50IGZyb20gdGhlIHJlZGlyZWN0ZWQgZG9tYWluLlxuICAgKlxuICAgKiAgICAgRmluYWxseSwgKip0aGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0KiogYW5kIGhhcyB0aGUgZmluYWwgc2F5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX0gdGhlIGN1cnJlbnRseSBzZXQgYmxhY2tsaXN0IGFycmF5LlxuICAgKlxuICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgdGhlIGVtcHR5IGFycmF5IChpLmUuIHRoZXJlXG4gICAqIGlzIG5vIGJsYWNrbGlzdC4pXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzL0dldHMgdGhlIGJsYWNrbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuXG4gICAqL1xuXG4gIHRoaXMucmVzb3VyY2VVcmxCbGFja2xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXNvdXJjZVVybEJsYWNrbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc291cmNlVXJsQmxhY2tsaXN0O1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7XG5cbiAgICB2YXIgaHRtbFNhbml0aXplciA9IGZ1bmN0aW9uIGh0bWxTYW5pdGl6ZXIoaHRtbCkge1xuICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTtcbiAgICB9O1xuXG4gICAgaWYgKCRpbmplY3Rvci5oYXMoJyRzYW5pdGl6ZScpKSB7XG4gICAgICBodG1sU2FuaXRpemVyID0gJGluamVjdG9yLmdldCgnJHNhbml0aXplJyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBtYXRjaFVybChtYXRjaGVyLCBwYXJzZWRVcmwpIHtcbiAgICAgIGlmIChtYXRjaGVyID09PSAnc2VsZicpIHtcbiAgICAgICAgcmV0dXJuIHVybElzU2FtZU9yaWdpbihwYXJzZWRVcmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmaW5pdGVseSBhIHJlZ2V4LiAgU2VlIGFkanVzdE1hdGNoZXJzKClcbiAgICAgICAgcmV0dXJuICEhbWF0Y2hlci5leGVjKHBhcnNlZFVybC5ocmVmKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1Jlc291cmNlVXJsQWxsb3dlZEJ5UG9saWN5KHVybCkge1xuICAgICAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUodXJsLnRvU3RyaW5nKCkpO1xuICAgICAgdmFyIGksIG4sIGFsbG93ZWQgPSBmYWxzZTtcbiAgICAgIC8vIEVuc3VyZSB0aGF0IGF0IGxlYXN0IG9uZSBpdGVtIGZyb20gdGhlIHdoaXRlbGlzdCBhbGxvd3MgdGhpcyB1cmwuXG4gICAgICBmb3IgKGkgPSAwLCBuID0gcmVzb3VyY2VVcmxXaGl0ZWxpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybFdoaXRlbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgIGFsbG93ZWQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWxsb3dlZCkge1xuICAgICAgICAvLyBFbnN1cmUgdGhhdCBubyBpdGVtIGZyb20gdGhlIGJsYWNrbGlzdCBibG9ja2VkIHRoaXMgdXJsLlxuICAgICAgICBmb3IgKGkgPSAwLCBuID0gcmVzb3VyY2VVcmxCbGFja2xpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKG1hdGNoVXJsKHJlc291cmNlVXJsQmxhY2tsaXN0W2ldLCBwYXJzZWRVcmwpKSB7XG4gICAgICAgICAgICBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbGxvd2VkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSG9sZGVyVHlwZShCYXNlKSB7XG4gICAgICB2YXIgaG9sZGVyVHlwZSA9IGZ1bmN0aW9uIFRydXN0ZWRWYWx1ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIGlmIChCYXNlKSB7XG4gICAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlID0gbmV3IEJhc2UoKTtcbiAgICAgIH1cbiAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiBzY2VWYWx1ZU9mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgfTtcbiAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gc2NlVG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCkudG9TdHJpbmcoKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gaG9sZGVyVHlwZTtcbiAgICB9XG5cbiAgICB2YXIgdHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSA9IGdlbmVyYXRlSG9sZGVyVHlwZSgpLFxuICAgICAgICBieVR5cGUgPSB7fTtcblxuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuSFRNTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5DU1NdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkpTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUoYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBpcyB0cnVzdGVkIGJ5IGFuZ3VsYXIgZm9yIHVzZSBpbiBzcGVjaWZpZWQgc3RyaWN0XG4gICAgICogY29udGV4dHVhbCBlc2NhcGluZyBjb250ZXh0cyAoc3VjaCBhcyBuZy1iaW5kLWh0bWwsIG5nLWluY2x1ZGUsIGFueSBzcmNcbiAgICAgKiBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiwgYW55IGRvbSBldmVudCBiaW5kaW5nIGF0dHJpYnV0ZSBpbnRlcnBvbGF0aW9uXG4gICAgICogc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pIHRoYXQgdXNlcyB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gICAgICogU2VlIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBlbmFibGluZyBzdHJpY3QgY29udGV4dHVhbCBlc2NhcGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UuICBlLmcuIHVybCxcbiAgICAgKiAgIHJlc291cmNlVXJsLCBodG1sLCBqcyBhbmQgY3NzLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkL3NhZmUuXG4gICAgICogQHJldHVybnMgeyp9IEEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB0byBzdGFuZCBpbiBmb3IgdGhlIHByb3ZpZGVkIGB2YWx1ZWAgaW4gcGxhY2VzXG4gICAgICogd2hlcmUgQW5ndWxhciBleHBlY3RzIGEgJHNjZS50cnVzdEFzKCkgcmV0dXJuIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRydXN0QXModHlwZSwgdHJ1c3RlZFZhbHVlKSB7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSAoYnlUeXBlLmhhc093blByb3BlcnR5KHR5cGUpID8gYnlUeXBlW3R5cGVdIDogbnVsbCk7XG4gICAgICBpZiAoIUNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2ljb250ZXh0JyxcbiAgICAgICAgICAgICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSB2YWx1ZSBpbiBpbnZhbGlkIGNvbnRleHQuIENvbnRleHQ6IHswfTsgVmFsdWU6IHsxfScsXG4gICAgICAgICAgICB0eXBlLCB0cnVzdGVkVmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHRydXN0ZWRWYWx1ZSA9PT0gbnVsbCB8fCB0cnVzdGVkVmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0cnVzdGVkVmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB0cnVzdGVkVmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBBbGwgdGhlIGN1cnJlbnQgY29udGV4dHMgaW4gU0NFX0NPTlRFWFRTIGhhcHBlbiB0byBiZSBzdHJpbmdzLiAgSW4gb3JkZXIgdG8gYXZvaWQgdHJ1c3RpbmdcbiAgICAgIC8vIG11dGFibGUgb2JqZWN0cywgd2UgZW5zdXJlIGhlcmUgdGhhdCB0aGUgdmFsdWUgcGFzc2VkIGluIGlzIGFjdHVhbGx5IGEgc3RyaW5nLlxuICAgICAgaWYgKHR5cGVvZiB0cnVzdGVkVmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l0eXBlJyxcbiAgICAgICAgICAgICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSBub24tc3RyaW5nIHZhbHVlIGluIGEgY29udGVudCByZXF1aXJpbmcgYSBzdHJpbmc6IENvbnRleHQ6IHswfScsXG4gICAgICAgICAgICB0eXBlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodHJ1c3RlZFZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3ZhbHVlT2ZcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGhhZCBiZWVuIHJldHVybmVkIGJ5IGEgcHJpb3IgY2FsbCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyB0aGUgdmFsdWUgdGhhdCBoYWQgYmVlbiBwYXNzZWQgdG8ge0BsaW5rXG4gICAgICogbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0uXG4gICAgICpcbiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBpcyBub3QgYSB2YWx1ZSB0aGF0IGhhZCBiZWVuIHJldHVybmVkIGJ5IHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCByZXR1cm5zIGl0IGFzLWlzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9XG4gICAgICogICAgICBjYWxsIG9yIGFueXRoaW5nIGVsc2UuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSBgdmFsdWVgIHRoYXQgd2FzIG9yaWdpbmFsbHkgcHJvdmlkZWQgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGlmIGB2YWx1ZWAgaXMgdGhlIHJlc3VsdCBvZiBzdWNoIGEgY2FsbC4gIE90aGVyd2lzZSwgcmV0dXJuc1xuICAgICAqICAgICBgdmFsdWVgIHVuY2hhbmdlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZU9mKG1heWJlVHJ1c3RlZCkge1xuICAgICAgaWYgKG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpIHtcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI2dldFRydXN0ZWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRha2VzIHRoZSByZXN1bHQgb2YgYSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gY2FsbCBhbmRcbiAgICAgKiByZXR1cm5zIHRoZSBvcmlnaW5hbGx5IHN1cHBsaWVkIHZhbHVlIGlmIHRoZSBxdWVyaWVkIGNvbnRleHQgdHlwZSBpcyBhIHN1cGVydHlwZSBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIHR5cGUuICBJZiB0aGlzIGNvbmRpdGlvbiBpc24ndCBzYXRpc2ZpZWQsIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgdG8gYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0geyp9IG1heWJlVHJ1c3RlZCBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGUgd2FzIG9yaWdpbmFsbHkgcHJvdmlkZWQgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGlmIHZhbGlkIGluIHRoaXMgY29udGV4dC4gIE90aGVyd2lzZSwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRUcnVzdGVkKHR5cGUsIG1heWJlVHJ1c3RlZCkge1xuICAgICAgaWYgKG1heWJlVHJ1c3RlZCA9PT0gbnVsbCB8fCBtYXliZVRydXN0ZWQgPT09IHVuZGVmaW5lZCB8fCBtYXliZVRydXN0ZWQgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICB9XG4gICAgICB2YXIgY29uc3RydWN0b3IgPSAoYnlUeXBlLmhhc093blByb3BlcnR5KHR5cGUpID8gYnlUeXBlW3R5cGVdIDogbnVsbCk7XG4gICAgICBpZiAoY29uc3RydWN0b3IgJiYgbWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UgZ2V0IGhlcmUsIHRoZW4gd2UgbWF5IG9ubHkgdGFrZSBvbmUgb2YgdHdvIGFjdGlvbnMuXG4gICAgICAvLyAxLiBzYW5pdGl6ZSB0aGUgdmFsdWUgZm9yIHRoZSByZXF1ZXN0ZWQgdHlwZSwgb3JcbiAgICAgIC8vIDIuIHRocm93IGFuIGV4Y2VwdGlvbi5cbiAgICAgIGlmICh0eXBlID09PSBTQ0VfQ09OVEVYVFMuUkVTT1VSQ0VfVVJMKSB7XG4gICAgICAgIGlmIChpc1Jlc291cmNlVXJsQWxsb3dlZEJ5UG9saWN5KG1heWJlVHJ1c3RlZCkpIHtcbiAgICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2luc2VjdXJsJyxcbiAgICAgICAgICAgICAgJ0Jsb2NrZWQgbG9hZGluZyByZXNvdXJjZSBmcm9tIHVybCBub3QgYWxsb3dlZCBieSAkc2NlRGVsZWdhdGUgcG9saWN5LiAgVVJMOiB7MH0nLFxuICAgICAgICAgICAgICBtYXliZVRydXN0ZWQudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLkhUTUwpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxTYW5pdGl6ZXIobWF5YmVUcnVzdGVkKTtcbiAgICAgIH1cbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgdHJ1c3RBczogdHJ1c3RBcyxcbiAgICAgICAgICAgICBnZXRUcnVzdGVkOiBnZXRUcnVzdGVkLFxuICAgICAgICAgICAgIHZhbHVlT2Y6IHZhbHVlT2YgfTtcbiAgfV07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRzY2VQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlICRzY2VQcm92aWRlciBwcm92aWRlciBhbGxvd3MgZGV2ZWxvcGVycyB0byBjb25maWd1cmUgdGhlIHtAbGluayBuZy4kc2NlICRzY2V9IHNlcnZpY2UuXG4gKiAtICAgZW5hYmxlL2Rpc2FibGUgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSkgaW4gYSBtb2R1bGVcbiAqIC0gICBvdmVycmlkZSB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB3aXRoIGEgY3VzdG9tIGRlbGVnYXRlXG4gKlxuICogUmVhZCBtb3JlIGFib3V0IHtAbGluayBuZy4kc2NlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqL1xuXG4vKiBqc2hpbnQgbWF4bGVuOiBmYWxzZSovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRzY2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYCRzY2VgIGlzIGEgc2VydmljZSB0aGF0IHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIHNlcnZpY2VzIHRvIEFuZ3VsYXJKUy5cbiAqXG4gKiAjIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nXG4gKlxuICogU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSkgaXMgYSBtb2RlIGluIHdoaWNoIEFuZ3VsYXJKUyByZXF1aXJlcyBiaW5kaW5ncyBpbiBjZXJ0YWluXG4gKiBjb250ZXh0cyB0byByZXN1bHQgaW4gYSB2YWx1ZSB0aGF0IGlzIG1hcmtlZCBhcyBzYWZlIHRvIHVzZSBmb3IgdGhhdCBjb250ZXh0LiAgT25lIGV4YW1wbGUgb2ZcbiAqIHN1Y2ggYSBjb250ZXh0IGlzIGJpbmRpbmcgYXJiaXRyYXJ5IGh0bWwgY29udHJvbGxlZCBieSB0aGUgdXNlciB2aWEgYG5nLWJpbmQtaHRtbGAuICBXZSByZWZlclxuICogdG8gdGhlc2UgY29udGV4dHMgYXMgcHJpdmlsZWdlZCBvciBTQ0UgY29udGV4dHMuXG4gKlxuICogQXMgb2YgdmVyc2lvbiAxLjIsIEFuZ3VsYXIgc2hpcHMgd2l0aCBTQ0UgZW5hYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqIE5vdGU6ICBXaGVuIGVuYWJsZWQgKHRoZSBkZWZhdWx0KSwgSUU8MTEgaW4gcXVpcmtzIG1vZGUgaXMgbm90IHN1cHBvcnRlZC4gIEluIHRoaXMgbW9kZSwgSUU8MTEgYWxsb3dcbiAqIG9uZSB0byBleGVjdXRlIGFyYml0cmFyeSBqYXZhc2NyaXB0IGJ5IHRoZSB1c2Ugb2YgdGhlIGV4cHJlc3Npb24oKSBzeW50YXguICBSZWZlclxuICogPGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llL2FyY2hpdmUvMjAwOC8xMC8xNi9lbmRpbmctZXhwcmVzc2lvbnMuYXNweD4gdG8gbGVhcm4gbW9yZSBhYm91dCB0aGVtLlxuICogWW91IGNhbiBlbnN1cmUgeW91ciBkb2N1bWVudCBpcyBpbiBzdGFuZGFyZHMgbW9kZSBhbmQgbm90IHF1aXJrcyBtb2RlIGJ5IGFkZGluZyBgPCFkb2N0eXBlIGh0bWw+YFxuICogdG8gdGhlIHRvcCBvZiB5b3VyIEhUTUwgZG9jdW1lbnQuXG4gKlxuICogU0NFIGFzc2lzdHMgaW4gd3JpdGluZyBjb2RlIGluIHdheSB0aGF0IChhKSBpcyBzZWN1cmUgYnkgZGVmYXVsdCBhbmQgKGIpIG1ha2VzIGF1ZGl0aW5nIGZvclxuICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIHN1Y2ggYXMgWFNTLCBjbGlja2phY2tpbmcsIGV0Yy4gYSBsb3QgZWFzaWVyLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIGEgYmluZGluZyBpbiBhIHByaXZpbGVnZWQgY29udGV4dDpcbiAqXG4gKiBgYGBcbiAqIDxpbnB1dCBuZy1tb2RlbD1cInVzZXJIdG1sXCI+XG4gKiA8ZGl2IG5nLWJpbmQtaHRtbD1cInVzZXJIdG1sXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCBgbmctYmluZC1odG1sYCBpcyBib3VuZCB0byBgdXNlckh0bWxgIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIuICBXaXRoIFNDRVxuICogZGlzYWJsZWQsIHRoaXMgYXBwbGljYXRpb24gYWxsb3dzIHRoZSB1c2VyIHRvIHJlbmRlciBhcmJpdHJhcnkgSFRNTCBpbnRvIHRoZSBESVYuXG4gKiBJbiBhIG1vcmUgcmVhbGlzdGljIGV4YW1wbGUsIG9uZSBtYXkgYmUgcmVuZGVyaW5nIHVzZXIgY29tbWVudHMsIGJsb2cgYXJ0aWNsZXMsIGV0Yy4gdmlhXG4gKiBiaW5kaW5ncy4gIChIVE1MIGlzIGp1c3Qgb25lIGV4YW1wbGUgb2YgYSBjb250ZXh0IHdoZXJlIHJlbmRlcmluZyB1c2VyIGNvbnRyb2xsZWQgaW5wdXQgY3JlYXRlc1xuICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLilcbiAqXG4gKiBGb3IgdGhlIGNhc2Ugb2YgSFRNTCwgeW91IG1pZ2h0IHVzZSBhIGxpYnJhcnksIGVpdGhlciBvbiB0aGUgY2xpZW50IHNpZGUsIG9yIG9uIHRoZSBzZXJ2ZXIgc2lkZSxcbiAqIHRvIHNhbml0aXplIHVuc2FmZSBIVE1MIGJlZm9yZSBiaW5kaW5nIHRvIHRoZSB2YWx1ZSBhbmQgcmVuZGVyaW5nIGl0IGluIHRoZSBkb2N1bWVudC5cbiAqXG4gKiBIb3cgd291bGQgeW91IGVuc3VyZSB0aGF0IGV2ZXJ5IHBsYWNlIHRoYXQgdXNlZCB0aGVzZSB0eXBlcyBvZiBiaW5kaW5ncyB3YXMgYm91bmQgdG8gYSB2YWx1ZSB0aGF0XG4gKiB3YXMgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSAob3IgcmV0dXJuZWQgYXMgc2FmZSBmb3IgcmVuZGVyaW5nIGJ5IHlvdXIgc2VydmVyPykgIEhvdyBjYW4geW91XG4gKiBlbnN1cmUgdGhhdCB5b3UgZGlkbid0IGFjY2lkZW50YWxseSBkZWxldGUgdGhlIGxpbmUgdGhhdCBzYW5pdGl6ZWQgdGhlIHZhbHVlLCBvciByZW5hbWVkIHNvbWVcbiAqIHByb3BlcnRpZXMvZmllbGRzIGFuZCBmb3Jnb3QgdG8gdXBkYXRlIHRoZSBiaW5kaW5nIHRvIHRoZSBzYW5pdGl6ZWQgdmFsdWU/XG4gKlxuICogVG8gYmUgc2VjdXJlIGJ5IGRlZmF1bHQsIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGFueSBzdWNoIGJpbmRpbmdzIGFyZSBkaXNhbGxvd2VkIHVubGVzcyB5b3UgY2FuXG4gKiBkZXRlcm1pbmUgdGhhdCBzb21ldGhpbmcgZXhwbGljaXRseSBzYXlzIGl0J3Mgc2FmZSB0byB1c2UgYSB2YWx1ZSBmb3IgYmluZGluZyBpbiB0aGF0XG4gKiBjb250ZXh0LiAgWW91IGNhbiB0aGVuIGF1ZGl0IHlvdXIgY29kZSAoYSBzaW1wbGUgZ3JlcCB3b3VsZCBkbykgdG8gZW5zdXJlIHRoYXQgdGhpcyBpcyBvbmx5IGRvbmVcbiAqIGZvciB0aG9zZSB2YWx1ZXMgdGhhdCB5b3UgY2FuIGVhc2lseSB0ZWxsIGFyZSBzYWZlIC0gYmVjYXVzZSB0aGV5IHdlcmUgcmVjZWl2ZWQgZnJvbSB5b3VyIHNlcnZlcixcbiAqIHNhbml0aXplZCBieSB5b3VyIGxpYnJhcnksIGV0Yy4gIFlvdSBjYW4gb3JnYW5pemUgeW91ciBjb2RlYmFzZSB0byBoZWxwIHdpdGggdGhpcyAtIHBlcmhhcHNcbiAqIGFsbG93aW5nIG9ubHkgdGhlIGZpbGVzIGluIGEgc3BlY2lmaWMgZGlyZWN0b3J5IHRvIGRvIHRoaXMuICBFbnN1cmluZyB0aGF0IHRoZSBpbnRlcm5hbCBBUElcbiAqIGV4cG9zZWQgYnkgdGhhdCBjb2RlIGRvZXNuJ3QgbWFya3VwIGFyYml0cmFyeSB2YWx1ZXMgYXMgc2FmZSB0aGVuIGJlY29tZXMgYSBtb3JlIG1hbmFnZWFibGUgdGFzay5cbiAqXG4gKiBJbiB0aGUgY2FzZSBvZiBBbmd1bGFySlMnIFNDRSBzZXJ2aWNlLCBvbmUgdXNlcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc31cbiAqIChhbmQgc2hvcnRoYW5kIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzSHRtbCAkc2NlLnRydXN0QXNIdG1sfSwgZXRjLikgdG9cbiAqIG9idGFpbiB2YWx1ZXMgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5IFNDRSAvIHByaXZpbGVnZWQgY29udGV4dHMuXG4gKlxuICpcbiAqICMjIEhvdyBkb2VzIGl0IHdvcms/XG4gKlxuICogSW4gcHJpdmlsZWdlZCBjb250ZXh0cywgZGlyZWN0aXZlcyBhbmQgY29kZSB3aWxsIGJpbmQgdG8gdGhlIHJlc3VsdCBvZiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkXG4gKiAkc2NlLmdldFRydXN0ZWQoY29udGV4dCwgdmFsdWUpfSByYXRoZXIgdGhhbiB0byB0aGUgdmFsdWUgZGlyZWN0bHkuICBEaXJlY3RpdmVzIHVzZSB7QGxpbmtcbiAqIG5nLiRzY2UjcGFyc2VBcyAkc2NlLnBhcnNlQXN9IHJhdGhlciB0aGFuIGAkcGFyc2VgIHRvIHdhdGNoIGF0dHJpYnV0ZSBiaW5kaW5ncywgd2hpY2ggcGVyZm9ybXMgdGhlXG4gKiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0gYmVoaW5kIHRoZSBzY2VuZXMgb24gbm9uLWNvbnN0YW50IGxpdGVyYWxzLlxuICpcbiAqIEFzIGFuIGV4YW1wbGUsIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSB1c2VzIHtAbGlua1xuICogbmcuJHNjZSNwYXJzZUFzSHRtbCAkc2NlLnBhcnNlQXNIdG1sKGJpbmRpbmcgZXhwcmVzc2lvbil9LiAgSGVyZSdzIHRoZSBhY3R1YWwgY29kZSAoc2xpZ2h0bHlcbiAqIHNpbXBsaWZpZWQpOlxuICpcbiAqIGBgYFxuICogdmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XG4gKiAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICogICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNIdG1sKGF0dHIubmdCaW5kSHRtbCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUgfHwgJycpO1xuICogICAgIH0pO1xuICogICB9O1xuICogfV07XG4gKiBgYGBcbiAqXG4gKiAjIyBJbXBhY3Qgb24gbG9hZGluZyB0ZW1wbGF0ZXNcbiAqXG4gKiBUaGlzIGFwcGxpZXMgYm90aCB0byB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUgYG5nLWluY2x1ZGVgfSBkaXJlY3RpdmUgYXMgd2VsbCBhc1xuICogYHRlbXBsYXRlVXJsYCdzIHNwZWNpZmllZCBieSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICpcbiAqIEJ5IGRlZmF1bHQsIEFuZ3VsYXIgb25seSBsb2FkcyB0ZW1wbGF0ZXMgZnJvbSB0aGUgc2FtZSBkb21haW4gYW5kIHByb3RvY29sIGFzIHRoZSBhcHBsaWNhdGlvblxuICogZG9jdW1lbnQuICBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiB0aGUgdGVtcGxhdGUgVVJMLiAgVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIGFuZC9vclxuICogcHJvdG9jb2xzLCB5b3UgbWF5IGVpdGhlciBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdFxuICogdGhlbX0gb3Ige0BsaW5rIG5nLiRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgaXR9IGludG8gYSB0cnVzdGVkIHZhbHVlLlxuICpcbiAqICpQbGVhc2Ugbm90ZSo6XG4gKiBUaGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IGFwcGx5IGluIGFkZGl0aW9uIHRvIHRoaXMgYW5kIG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseVxuICogbG9hZGVkLiAgVGhpcyBtZWFucyB0aGF0IHdpdGhvdXQgdGhlIHJpZ2h0IENPUlMgcG9saWN5LCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGEgZGlmZmVyZW50IGRvbWFpblxuICogd29uJ3Qgd29yayBvbiBhbGwgYnJvd3NlcnMuICBBbHNvLCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGBmaWxlOi8vYCBVUkwgZG9lcyBub3Qgd29yayBvbiBzb21lXG4gKiBicm93c2Vycy5cbiAqXG4gKiAjIyBUaGlzIGZlZWxzIGxpa2UgdG9vIG11Y2ggb3ZlcmhlYWRcbiAqXG4gKiBJdCdzIGltcG9ydGFudCB0byByZW1lbWJlciB0aGF0IFNDRSBvbmx5IGFwcGxpZXMgdG8gaW50ZXJwb2xhdGlvbiBleHByZXNzaW9ucy5cbiAqXG4gKiBJZiB5b3VyIGV4cHJlc3Npb25zIGFyZSBjb25zdGFudCBsaXRlcmFscywgdGhleSdyZSBhdXRvbWF0aWNhbGx5IHRydXN0ZWQgYW5kIHlvdSBkb24ndCBuZWVkIHRvXG4gKiBjYWxsIGAkc2NlLnRydXN0QXNgIG9uIHRoZW0gKHJlbWVtYmVyIHRvIGluY2x1ZGUgdGhlIGBuZ1Nhbml0aXplYCBtb2R1bGUpIChlLmcuXG4gKiBgPGRpdiBuZy1iaW5kLWh0bWw9XCInPGI+aW1wbGljaXRseSB0cnVzdGVkPC9iPidcIj48L2Rpdj5gKSBqdXN0IHdvcmtzLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgYGFbaHJlZl1gIGFuZCBgaW1nW3NyY11gIGF1dG9tYXRpY2FsbHkgc2FuaXRpemUgdGhlaXIgVVJMcyBhbmQgZG8gbm90IHBhc3MgdGhlbVxuICogdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0uICBTQ0UgZG9lc24ndCBwbGF5IGEgcm9sZSBoZXJlLlxuICpcbiAqIFRoZSBpbmNsdWRlZCB7QGxpbmsgbmcuJHNjZURlbGVnYXRlICRzY2VEZWxlZ2F0ZX0gY29tZXMgd2l0aCBzYW5lIGRlZmF1bHRzIHRvIGFsbG93IHlvdSB0byBsb2FkXG4gKiB0ZW1wbGF0ZXMgaW4gYG5nLWluY2x1ZGVgIGZyb20geW91ciBhcHBsaWNhdGlvbidzIGRvbWFpbiB3aXRob3V0IGhhdmluZyB0byBldmVuIGtub3cgYWJvdXQgU0NFLlxuICogSXQgYmxvY2tzIGxvYWRpbmcgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBvciBsb2FkaW5nIHRlbXBsYXRlcyBvdmVyIGh0dHAgZnJvbSBhbiBodHRwc1xuICogc2VydmVkIGRvY3VtZW50LiAgWW91IGNhbiBjaGFuZ2UgdGhlc2UgYnkgc2V0dGluZyB5b3VyIG93biBjdXN0b20ge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3RzfSBhbmQge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCBibGFja2xpc3RzfSBmb3IgbWF0Y2hpbmcgc3VjaCBVUkxzLlxuICpcbiAqIFRoaXMgc2lnbmlmaWNhbnRseSByZWR1Y2VzIHRoZSBvdmVyaGVhZC4gIEl0IGlzIGZhciBlYXNpZXIgdG8gcGF5IHRoZSBzbWFsbCBvdmVyaGVhZCBhbmQgaGF2ZSBhblxuICogYXBwbGljYXRpb24gdGhhdCdzIHNlY3VyZSBhbmQgY2FuIGJlIGF1ZGl0ZWQgdG8gdmVyaWZ5IHRoYXQgd2l0aCBtdWNoIG1vcmUgZWFzZSB0aGFuIGJvbHRpbmdcbiAqIHNlY3VyaXR5IG9udG8gYW4gYXBwbGljYXRpb24gbGF0ZXIuXG4gKlxuICogPGEgbmFtZT1cImNvbnRleHRzXCI+PC9hPlxuICogIyMgV2hhdCB0cnVzdGVkIGNvbnRleHQgdHlwZXMgYXJlIHN1cHBvcnRlZD9cbiAqXG4gKiB8IENvbnRleHQgICAgICAgICAgICAgfCBOb3RlcyAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IGAkc2NlLkhUTUxgICAgICAgICAgfCBGb3IgSFRNTCB0aGF0J3Mgc2FmZSB0byBzb3VyY2UgaW50byB0aGUgYXBwbGljYXRpb24uICBUaGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0JpbmRIdG1sIG5nQmluZEh0bWx9IGRpcmVjdGl2ZSB1c2VzIHRoaXMgY29udGV4dCBmb3IgYmluZGluZ3MuIElmIGFuIHVuc2FmZSB2YWx1ZSBpcyBlbmNvdW50ZXJlZCBhbmQgdGhlIHtAbGluayBuZ1Nhbml0aXplICRzYW5pdGl6ZX0gbW9kdWxlIGlzIHByZXNlbnQgdGhpcyB3aWxsIHNhbml0aXplIHRoZSB2YWx1ZSBpbnN0ZWFkIG9mIHRocm93aW5nIGFuIGVycm9yLiB8XG4gKiB8IGAkc2NlLkNTU2AgICAgICAgICAgfCBGb3IgQ1NTIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIEN1cnJlbnRseSB1bnVzZWQuICBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcbiAqIHwgYCRzY2UuVVJMYCAgICAgICAgICB8IEZvciBVUkxzIHRoYXQgYXJlIHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLiAgQ3VycmVudGx5IHVudXNlZCAoYDxhIGhyZWY9YCBhbmQgYDxpbWcgc3JjPWAgc2FuaXRpemUgdGhlaXIgdXJscyBhbmQgZG9uJ3QgY29uc3RpdHV0ZSBhbiBTQ0UgY29udGV4dC4gfFxuICogfCBgJHNjZS5SRVNPVVJDRV9VUkxgIHwgRm9yIFVSTHMgdGhhdCBhcmUgbm90IG9ubHkgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MsIGJ1dCB3aG9zZSBjb250ZW50cyBhcmUgYWxzbyBzYWZlIHRvIGluY2x1ZGUgaW4geW91ciBhcHBsaWNhdGlvbi4gIEV4YW1wbGVzIGluY2x1ZGUgYG5nLWluY2x1ZGVgLCBgc3JjYCAvIGBuZ1NyY2AgYmluZGluZ3MgZm9yIHRhZ3Mgb3RoZXIgdGhhbiBgSU1HYCAoZS5nLiBgSUZSQU1FYCwgYE9CSkVDVGAsIGV0Yy4pICA8YnI+PGJyPk5vdGUgdGhhdCBgJHNjZS5SRVNPVVJDRV9VUkxgIG1ha2VzIGEgc3Ryb25nZXIgc3RhdGVtZW50IGFib3V0IHRoZSBVUkwgdGhhbiBgJHNjZS5VUkxgIGRvZXMgYW5kIHRoZXJlZm9yZSBjb250ZXh0cyByZXF1aXJpbmcgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlJFU09VUkNFX1VSTGAgY2FuIGJlIHVzZWQgYW55d2hlcmUgdGhhdCB2YWx1ZXMgdHJ1c3RlZCBmb3IgYCRzY2UuVVJMYCBhcmUgcmVxdWlyZWQuIHxcbiAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5IHVudXNlZC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfFxuICpcbiAqICMjIEZvcm1hdCBvZiBpdGVtcyBpbiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgcmVzb3VyY2VVcmxXaGl0ZWxpc3R9L3tAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCBCbGFja2xpc3R9IDxhIG5hbWU9XCJyZXNvdXJjZVVybFBhdHRlcm5JdGVtXCI+PC9hPlxuICpcbiAqICBFYWNoIGVsZW1lbnQgaW4gdGhlc2UgYXJyYXlzIG11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogIC0gKionc2VsZicqKlxuICogICAgLSBUaGUgc3BlY2lhbCAqKnN0cmluZyoqLCBgJ3NlbGYnYCwgY2FuIGJlIHVzZWQgdG8gbWF0Y2ggYWdhaW5zdCBhbGwgVVJMcyBvZiB0aGUgKipzYW1lXG4gKiAgICAgIGRvbWFpbioqIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudCB1c2luZyB0aGUgKipzYW1lIHByb3RvY29sKiouXG4gKiAgLSAqKlN0cmluZyoqIChleGNlcHQgdGhlIHNwZWNpYWwgdmFsdWUgYCdzZWxmJ2ApXG4gKiAgICAtIFRoZSBzdHJpbmcgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBmdWxsICpub3JtYWxpemVkIC8gYWJzb2x1dGUgVVJMKiBvZiB0aGUgcmVzb3VyY2VcbiAqICAgICAgYmVpbmcgdGVzdGVkIChzdWJzdHJpbmcgbWF0Y2hlcyBhcmUgbm90IGdvb2QgZW5vdWdoLilcbiAqICAgIC0gVGhlcmUgYXJlIGV4YWN0bHkgKip0d28gd2lsZGNhcmQgc2VxdWVuY2VzKiogLSBgKmAgYW5kIGAqKmAuICBBbGwgb3RoZXIgY2hhcmFjdGVyc1xuICogICAgICBtYXRjaCB0aGVtc2VsdmVzLlxuICogICAgLSBgKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VycmVuY2VzIG9mIGFueSBjaGFyYWN0ZXIgb3RoZXIgdGhhbiBvbmUgb2YgdGhlIGZvbGxvd2luZyA2XG4gKiAgICAgIGNoYXJhY3RlcnM6ICdgOmAnLCAnYC9gJywgJ2AuYCcsICdgP2AnLCAnYCZgJyBhbmQgJzsnLiAgSXQncyBhIHVzZWZ1bCB3aWxkY2FyZCBmb3IgdXNlXG4gKiAgICAgIGluIGEgd2hpdGVsaXN0LlxuICogICAgLSBgKipgOiBtYXRjaGVzIHplcm8gb3IgbW9yZSBvY2N1cnJlbmNlcyBvZiAqYW55KiBjaGFyYWN0ZXIuICBBcyBzdWNoLCBpdCdzIG5vdFxuICogICAgICBub3QgYXBwcm9wcmlhdGUgdG8gdXNlIGluIGZvciBhIHNjaGVtZSwgZG9tYWluLCBldGMuIGFzIGl0IHdvdWxkIG1hdGNoIHRvbyBtdWNoLiAgKGUuZy5cbiAqICAgICAgaHR0cDovLyoqLmV4YW1wbGUuY29tLyB3b3VsZCBtYXRjaCBodHRwOi8vZXZpbC5jb20vP2lnbm9yZT0uZXhhbXBsZS5jb20vIGFuZCB0aGF0IG1pZ2h0XG4gKiAgICAgIG5vdCBoYXZlIGJlZW4gdGhlIGludGVudGlvbi4pICBJdHMgdXNhZ2UgYXQgdGhlIHZlcnkgZW5kIG9mIHRoZSBwYXRoIGlzIG9rLiAgKGUuZy5cbiAqICAgICAgaHR0cDovL2Zvby5leGFtcGxlLmNvbS90ZW1wbGF0ZXMvKiopLlxuICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKVxuICogICAgLSAqQ2F2ZWF0KjogIFdoaWxlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHBvd2VyZnVsIGFuZCBvZmZlciBncmVhdCBmbGV4aWJpbGl0eSwgIHRoZWlyIHN5bnRheFxuICogICAgICAoYW5kIGFsbCB0aGUgaW5ldml0YWJsZSBlc2NhcGluZykgbWFrZXMgdGhlbSAqaGFyZGVyIHRvIG1haW50YWluKi4gIEl0J3MgZWFzeSB0b1xuICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZFxuICogICAgICBoYXZlIGdvb2QgdGVzdCBjb3ZlcmFnZS4pLiAgRm9yIGluc3RhbmNlLCB0aGUgdXNlIG9mIGAuYCBpbiB0aGUgcmVnZXggaXMgY29ycmVjdCBvbmx5IGluIGFcbiAqICAgICAgc21hbGwgbnVtYmVyIG9mIGNhc2VzLiAgQSBgLmAgY2hhcmFjdGVyIGluIHRoZSByZWdleCB1c2VkIHdoZW4gbWF0Y2hpbmcgdGhlIHNjaGVtZSBvciBhXG4gKiAgICAgIHN1YmRvbWFpbiBjb3VsZCBiZSBtYXRjaGVkIGFnYWluc3QgYSBgOmAgb3IgbGl0ZXJhbCBgLmAgdGhhdCB3YXMgbGlrZWx5IG5vdCBpbnRlbmRlZC4gICBJdFxuICogICAgICBpcyBoaWdobHkgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBzdHJpbmcgcGF0dGVybnMgYW5kIG9ubHkgZmFsbCBiYWNrIHRvIHJlZ3VsYXIgZXhwcmVzc2lvbnNcbiAqICAgICAgaWYgdGhleSBhcyBhIGxhc3QgcmVzb3J0LlxuICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpc1xuICogICAgICBtYXRjaGVkIGFnYWluc3QgdGhlICoqZW50aXJlKiogKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZSBiZWluZyB0ZXN0ZWRcbiAqICAgICAgKGV2ZW4gd2hlbiB0aGUgUmVnRXhwIGRpZCBub3QgaGF2ZSB0aGUgYF5gIGFuZCBgJGAgY29kZXMuKSAgSW4gYWRkaXRpb24sIGFueSBmbGFnc1xuICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLlxuICogICAgLSBJZiB5b3UgYXJlIGdlbmVyYXRpbmcgeW91ciBKYXZhU2NyaXB0IGZyb20gc29tZSBvdGhlciB0ZW1wbGF0aW5nIGVuZ2luZSAobm90XG4gKiAgICAgIHJlY29tbWVuZGVkLCBlLmcuIGluIGlzc3VlIFsjNDAwNl0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNDAwNikpLFxuICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhblxuICogICAgICBvbmUgbGV2ZWwgb2YgZXNjYXBpbmcgZGVwZW5kaW5nIG9uIHlvdXIgdGVtcGxhdGluZyBlbmdpbmUgYW5kIHRoZSB3YXkgeW91IGludGVycG9sYXRlZFxuICogICAgICB0aGUgdmFsdWUuKSAgRG8gbWFrZSB1c2Ugb2YgeW91ciBwbGF0Zm9ybSdzIGVzY2FwaW5nIG1lY2hhbmlzbSBhcyBpdCBtaWdodCBiZSBnb29kXG4gKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgZS5nLiBSdWJ5IGhhc1xuICogICAgICBbUmVnZXhwLmVzY2FwZShzdHIpXShodHRwOi8vd3d3LnJ1YnktZG9jLm9yZy9jb3JlLTIuMC4wL1JlZ2V4cC5odG1sI21ldGhvZC1jLWVzY2FwZSlcbiAqICAgICAgYW5kIFB5dGhvbiBoYXMgW3JlLmVzY2FwZV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3JlLmh0bWwjcmUuZXNjYXBlKS5cbiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlXG4gKiAgICAgIENsb3N1cmUgbGlicmFyeSdzIFtnb29nLnN0cmluZy5yZWdFeHBFc2NhcGUocyldKFxuICogICAgICBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmU5NjIpLlxuICpcbiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS5cbiAqXG4gKiA8ZXhhbXBsZSBtb2R1bGU9XCJteVNjZUFwcFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJBcHBDb250cm9sbGVyIGFzIG15Q3RybFwiPlxuICogICAgIDxpIG5nLWJpbmQtaHRtbD1cIm15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWxcIiBpZD1cImV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiPjwvaT48YnI+PGJyPlxuICogICAgIDxiPlVzZXIgY29tbWVudHM8L2I+PGJyPlxuICogICAgIEJ5IGRlZmF1bHQsIEhUTUwgdGhhdCBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQgKGUuZy4gQWxpY2UncyBjb21tZW50KSBpcyBzYW5pdGl6ZWQgd2hlblxuICogICAgICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhblxuICogICAgIGV4cGxvaXQuXG4gKiAgICAgPGRpdiBjbGFzcz1cIndlbGxcIj5cbiAqICAgICAgIDxkaXYgbmctcmVwZWF0PVwidXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50c1wiPlxuICogICAgICAgICA8Yj57e3VzZXJDb21tZW50Lm5hbWV9fTwvYj46XG4gKiAgICAgICAgIDxzcGFuIG5nLWJpbmQtaHRtbD1cInVzZXJDb21tZW50Lmh0bWxDb21tZW50XCIgY2xhc3M9XCJodG1sQ29tbWVudFwiPjwvc3Bhbj5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAqICAgYW5ndWxhci5tb2R1bGUoJ215U2NlQXBwJywgWyduZ1Nhbml0aXplJ10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ0FwcENvbnRyb2xsZXInLCBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRzY2UnLFxuICogICAgICAgZnVuY3Rpb24oJGh0dHAsICR0ZW1wbGF0ZUNhY2hlLCAkc2NlKSB7XG4gKiAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAqICAgICAgICAgJGh0dHAuZ2V0KFwidGVzdF9kYXRhLmpzb25cIiwge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLnN1Y2Nlc3MoZnVuY3Rpb24odXNlckNvbW1lbnRzKSB7XG4gKiAgICAgICAgICAgc2VsZi51c2VyQ29tbWVudHMgPSB1c2VyQ29tbWVudHM7XG4gKiAgICAgICAgIH0pO1xuICogICAgICAgICBzZWxmLmV4cGxpY2l0bHlUcnVzdGVkSHRtbCA9ICRzY2UudHJ1c3RBc0h0bWwoXG4gKiAgICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDtcIj5Ib3ZlciBvdmVyIHRoaXMgdGV4dC48L3NwYW4+Jyk7XG4gKiAgICAgICB9XSk7XG4gKiA8L2ZpbGU+XG4gKlxuICogPGZpbGUgbmFtZT1cInRlc3RfZGF0YS5qc29uXCI+XG4gKiBbXG4gKiAgIHsgXCJuYW1lXCI6IFwiQWxpY2VcIixcbiAqICAgICBcImh0bWxDb21tZW50XCI6XG4gKiAgICAgICAgIFwiPHNwYW4gb25tb3VzZW92ZXI9J3RoaXMudGV4dENvbnRlbnQ9XFxcIlBXTjNEIVxcXCInPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj5cIlxuICogICB9LFxuICogICB7IFwibmFtZVwiOiBcIkJvYlwiLFxuICogICAgIFwiaHRtbENvbW1lbnRcIjogXCI8aT5ZZXMhPC9pPiAgQW0gSSB0aGUgb25seSBvdGhlciBvbmU/XCJcbiAqICAgfVxuICogXVxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkge1xuICogICAgIGl0KCdzaG91bGQgc2FuaXRpemUgdW50cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnLmh0bWxDb21tZW50JykpLmZpcnN0KCkuZ2V0SW5uZXJIdG1sKCkpXG4gKiAgICAgICAgICAgLnRvQmUoJzxzcGFuPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj4nKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBOT1Qgc2FuaXRpemUgZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2V4cGxpY2l0bHlUcnVzdGVkSHRtbCcpKS5nZXRJbm5lckh0bWwoKSkudG9CZShcbiAqICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICdzYW5pdGl6YXRpb24uJnF1b3Q7XCI+SG92ZXIgb3ZlciB0aGlzIHRleHQuPC9zcGFuPicpO1xuICogICAgIH0pO1xuICogICB9KTtcbiAqIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICpcbiAqICMjIENhbiBJIGRpc2FibGUgU0NFIGNvbXBsZXRlbHk/XG4gKlxuICogWWVzLCB5b3UgY2FuLiAgSG93ZXZlciwgdGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC4gIFNDRSBnaXZlcyB5b3UgYSBsb3Qgb2Ygc2VjdXJpdHkgYmVuZWZpdHNcbiAqIGZvciBsaXR0bGUgY29kaW5nIG92ZXJoZWFkLiAgSXQgd2lsbCBiZSBtdWNoIGhhcmRlciB0byB0YWtlIGFuIFNDRSBkaXNhYmxlZCBhcHBsaWNhdGlvbiBhbmRcbiAqIGVpdGhlciBzZWN1cmUgaXQgb24geW91ciBvd24gb3IgZW5hYmxlIFNDRSBhdCBhIGxhdGVyIHN0YWdlLiAgSXQgbWlnaHQgbWFrZSBzZW5zZSB0byBkaXNhYmxlIFNDRVxuICogZm9yIGNhc2VzIHdoZXJlIHlvdSBoYXZlIGEgbG90IG9mIGV4aXN0aW5nIGNvZGUgdGhhdCB3YXMgd3JpdHRlbiBiZWZvcmUgU0NFIHdhcyBpbnRyb2R1Y2VkIGFuZFxuICogeW91J3JlIG1pZ3JhdGluZyB0aGVtIGEgbW9kdWxlIGF0IGEgdGltZS5cbiAqXG4gKiBUaGF0IHNhaWQsIGhlcmUncyBob3cgeW91IGNhbiBjb21wbGV0ZWx5IGRpc2FibGUgU0NFOlxuICpcbiAqIGBgYFxuICogYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikge1xuICogICAvLyBDb21wbGV0ZWx5IGRpc2FibGUgU0NFLiAgRm9yIGRlbW9uc3RyYXRpb24gcHVycG9zZXMgb25seSFcbiAqICAgLy8gRG8gbm90IHVzZSBpbiBuZXcgcHJvamVjdHMuXG4gKiAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG4vKiBqc2hpbnQgbWF4bGVuOiAxMDAgKi9cblxuZnVuY3Rpb24gJFNjZVByb3ZpZGVyKCkge1xuICB2YXIgZW5hYmxlZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZVByb3ZpZGVyI2VuYWJsZWRcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgcHJvdmlkZWQsIHRoZW4gZW5hYmxlcy9kaXNhYmxlcyBTQ0UuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEVuYWJsZXMvZGlzYWJsZXMgU0NFIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgZW5hYmxlZCA9ICEhdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBlbmFibGVkO1xuICB9O1xuXG5cbiAgLyogRGVzaWduIG5vdGVzIG9uIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciBTQ0UuXG4gICAqXG4gICAqIFRoZSBBUEkgY29udHJhY3QgZm9yIHRoZSBTQ0UgZGVsZWdhdGVcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBUaGUgU0NFIGRlbGVnYXRlIG9iamVjdCBtdXN0IHByb3ZpZGUgdGhlIGZvbGxvd2luZyAzIG1ldGhvZHM6XG4gICAqXG4gICAqIC0gdHJ1c3RBcyhjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRlbGwgdGhlIFNDRSBzZXJ2aWNlIHRoYXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIE9LIHRvIHVzZSBpbiB0aGVcbiAgICogICAgIGNvbnRleHRzIHNwZWNpZmllZCBieSBjb250ZXh0RW51bS4gIEl0IG11c3QgcmV0dXJuIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnlcbiAgICogICAgIGdldFRydXN0ZWQoKSBmb3IgYSBjb21wYXRpYmxlIGNvbnRleHRFbnVtIGFuZCByZXR1cm4gdGhpcyB2YWx1ZS5cbiAgICpcbiAgICogLSB2YWx1ZU9mKHZhbHVlKVxuICAgKiAgICAgRm9yIHZhbHVlcyB0aGF0IHdlcmUgbm90IHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZW0gYXMgaXMuICBGb3IgdmFsdWVzIHRoYXQgd2VyZVxuICAgKiAgICAgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgaW5wdXQgdmFsdWUgdG8gdHJ1c3RBcy4gIEJhc2ljYWxseSwgaWZcbiAgICogICAgIHRydXN0QXMgaXMgd3JhcHBpbmcgdGhlIGdpdmVuIHZhbHVlcyBpbnRvIHNvbWUgdHlwZSwgdGhpcyBvcGVyYXRpb24gdW53cmFwcyBpdCB3aGVuIGdpdmVuXG4gICAqICAgICBzdWNoIGEgdmFsdWUuXG4gICAqXG4gICAqIC0gZ2V0VHJ1c3RlZChjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGEgdmFsdWUgdGhhdCBpcyBzYWZlIHRvIHVzZSBpbiB0aGUgY29udGV4dCBzcGVjaWZpZWQgYnlcbiAgICogICAgIGNvbnRleHRFbnVtIG9yIHRocm93IGFuZCBleGNlcHRpb24gb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIGNvbnRyYWN0IGRlbGliZXJhdGVseSBkb2VzIE5PVCBzdGF0ZSB0aGF0IHZhbHVlcyByZXR1cm5lZCBieSB0cnVzdEFzKCkgbXVzdCBiZVxuICAgKiBvcGFxdWUgb3Igd3JhcHBlZCBpbiBzb21lIGhvbGRlciBvYmplY3QuICBUaGF0IGhhcHBlbnMgdG8gYmUgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLiAgRm9yXG4gICAqIGluc3RhbmNlLCBhbiBpbXBsZW1lbnRhdGlvbiBjb3VsZCBtYWludGFpbiBhIHJlZ2lzdHJ5IG9mIGFsbCB0cnVzdGVkIG9iamVjdHMgYnkgY29udGV4dC4gIEluXG4gICAqIHN1Y2ggYSBjYXNlLCB0cnVzdEFzKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgaW4uICBnZXRUcnVzdGVkKCkgd291bGRcbiAgICogcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBwYXNzZWQgaW4gaWYgaXQgd2FzIGZvdW5kIGluIHRoZSByZWdpc3RyeSB1bmRlciBhIGNvbXBhdGlibGUgY29udGV4dCBvclxuICAgKiB0aHJvdyBhbiBleGNlcHRpb24gb3RoZXJ3aXNlLiAgQW4gaW1wbGVtZW50YXRpb24gbWlnaHQgb25seSB3cmFwIHZhbHVlcyBzb21lIG9mIHRoZSB0aW1lIGJhc2VkXG4gICAqIG9uIHNvbWUgY3JpdGVyaWEuICBnZXRUcnVzdGVkKCkgbWlnaHQgcmV0dXJuIGEgdmFsdWUgYW5kIG5vdCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIHNwZWNpYWxcbiAgICogY29uc3RhbnRzIG9yIG9iamVjdHMgZXZlbiBpZiBub3Qgd3JhcHBlZC4gIEFsbCBzdWNoIGltcGxlbWVudGF0aW9ucyBmdWxmaWxsIHRoaXMgY29udHJhY3QuXG4gICAqXG4gICAqXG4gICAqIEEgbm90ZSBvbiB0aGUgaW5oZXJpdGFuY2UgbW9kZWwgZm9yIFNDRSBjb250ZXh0c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogSSd2ZSB1c2VkIGluaGVyaXRhbmNlIGFuZCBtYWRlIFJFU09VUkNFX1VSTCB3cmFwcGVkIHR5cGVzIGEgc3VidHlwZSBvZiBVUkwgd3JhcHBlZCB0eXBlcy4gIFRoaXNcbiAgICogaXMgcHVyZWx5IGFuIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG4gICAqXG4gICAqIFRoZSBjb250cmFjdCBpcyBzaW1wbHkgdGhpczpcbiAgICpcbiAgICogICAgIGdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKSBzdWNjZWVkaW5nIGltcGxpZXMgdGhhdCBnZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlcbiAgICogICAgIHdpbGwgYWxzbyBzdWNjZWVkLlxuICAgKlxuICAgKiBJbmhlcml0YW5jZSBoYXBwZW5zIHRvIGNhcHR1cmUgdGhpcyBpbiBhIG5hdHVyYWwgd2F5LiAgSW4gc29tZSBmdXR1cmUsIHdlXG4gICAqIG1heSBub3QgdXNlIGluaGVyaXRhbmNlIGFueW1vcmUuICBUaGF0IGlzIE9LIGJlY2F1c2Ugbm8gY29kZSBvdXRzaWRlIG9mXG4gICAqIHNjZS5qcyBhbmQgc2NlU3BlY3MuanMgd291bGQgbmVlZCB0byBiZSBhd2FyZSBvZiB0aGlzIGRldGFpbC5cbiAgICovXG5cbiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJHNjZURlbGVnYXRlJywgZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgJHBhcnNlLCAgICRzY2VEZWxlZ2F0ZSkge1xuICAgIC8vIFByZXJlcTogRW5zdXJlIHRoYXQgd2UncmUgbm90IHJ1bm5pbmcgaW4gSUU8MTEgcXVpcmtzIG1vZGUuICBJbiB0aGF0IG1vZGUsIElFIDwgMTEgYWxsb3dcbiAgICAvLyB0aGUgXCJleHByZXNzaW9uKGphdmFzY3JpcHQgZXhwcmVzc2lvbilcIiBzeW50YXggd2hpY2ggaXMgaW5zZWN1cmUuXG4gICAgaWYgKGVuYWJsZWQgJiYgbXNpZSA8IDgpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2llcXVpcmtzJyxcbiAgICAgICAgJ1N0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRvZXMgbm90IHN1cHBvcnQgSW50ZXJuZXQgRXhwbG9yZXIgdmVyc2lvbiA8IDExIGluIHF1aXJrcyAnICtcbiAgICAgICAgJ21vZGUuICBZb3UgY2FuIGZpeCB0aGlzIGJ5IGFkZGluZyB0aGUgdGV4dCA8IWRvY3R5cGUgaHRtbD4gdG8gdGhlIHRvcCBvZiB5b3VyIEhUTUwgJyArXG4gICAgICAgICdkb2N1bWVudC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBzY2UgPSBzaGFsbG93Q29weShTQ0VfQ09OVEVYVFMpO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjaXNFbmFibGVkXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS4gIElmIHlvdSB3YW50IHRvIHNldCB0aGUgdmFsdWUsIHlvdVxuICAgICAqIGhhdmUgdG8gZG8gaXQgYXQgbW9kdWxlIGNvbmZpZyB0aW1lIG9uIHtAbGluayBuZy4kc2NlUHJvdmlkZXIgJHNjZVByb3ZpZGVyfS5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgU0NFIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgc2NlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZWQ7XG4gICAgfTtcbiAgICBzY2UudHJ1c3RBcyA9ICRzY2VEZWxlZ2F0ZS50cnVzdEFzO1xuICAgIHNjZS5nZXRUcnVzdGVkID0gJHNjZURlbGVnYXRlLmdldFRydXN0ZWQ7XG4gICAgc2NlLnZhbHVlT2YgPSAkc2NlRGVsZWdhdGUudmFsdWVPZjtcblxuICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgc2NlLnRydXN0QXMgPSBzY2UuZ2V0VHJ1c3RlZCA9IGZ1bmN0aW9uKHR5cGUsIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbiAgICAgIHNjZS52YWx1ZU9mID0gaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uICBUaGlzIGlzIGxpa2Uge0BsaW5rXG4gICAgICogbmcuJHBhcnNlICRwYXJzZX0gYW5kIGlzIGlkZW50aWNhbCB3aGVuIHRoZSBleHByZXNzaW9uIGlzIGEgbGl0ZXJhbCBjb25zdGFudC4gIE90aGVyd2lzZSwgaXRcbiAgICAgKiB3cmFwcyB0aGUgZXhwcmVzc2lvbiBpbiBhIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWQoKnR5cGUqLFxuICAgICAqICpyZXN1bHQqKX1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIFNDRSBjb250ZXh0IGluIHdoaWNoIHRoaXMgcmVzdWx0IHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuICAgIHNjZS5wYXJzZUFzID0gZnVuY3Rpb24gc2NlUGFyc2VBcyh0eXBlLCBleHByKSB7XG4gICAgICB2YXIgcGFyc2VkID0gJHBhcnNlKGV4cHIpO1xuICAgICAgaWYgKHBhcnNlZC5saXRlcmFsICYmIHBhcnNlZC5jb25zdGFudCkge1xuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzY2UuZ2V0VHJ1c3RlZCh0eXBlLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LiAgQXMgc3VjaCxcbiAgICAgKiByZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nIGNvbnRleHRzIChzdWNoIGFzIG5nLWJpbmQtaHRtbCwgbmctaW5jbHVkZSwgYW55IHNyYyBhdHRyaWJ1dGVcbiAgICAgKiBpbnRlcnBvbGF0aW9uLCBhbnkgZG9tIGV2ZW50IGJpbmRpbmcgYXR0cmlidXRlIGludGVycG9sYXRpb24gc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pXG4gICAgICogdGhhdCB1c2VzIHRoZSBwcm92aWRlZCB2YWx1ZS4gIFNlZSAqIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBlbmFibGluZyBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZS4gIGUuZy4gdXJsLFxuICAgICAqICAgcmVzb3VyY2VfdXJsLCBodG1sLCBqcyBhbmQgY3NzLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkL3NhZmUuXG4gICAgICogQHJldHVybnMgeyp9IEEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB0byBzdGFuZCBpbiBmb3IgdGhlIHByb3ZpZGVkIGB2YWx1ZWAgaW4gcGxhY2VzXG4gICAgICogd2hlcmUgQW5ndWxhciBleHBlY3RzIGEgJHNjZS50cnVzdEFzKCkgcmV0dXJuIHZhbHVlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0h0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSHRtbCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuXG4gICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZEh0bWxcbiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzXG4gICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlXG4gICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1VybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuXG4gICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFVybFxuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRVcmwodmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlc1xuICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZVxuICAgICAqICAgICByZXR1cm4gdmFsdWUgb2Yge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9LilcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlc1xuICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZSByZXR1cm5cbiAgICAgKiAgICAgdmFsdWUgb2Yge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9LilcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNKc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNKcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLlxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRKc1xuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRKcyh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzXG4gICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlXG4gICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGVsZWdhdGVzIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgfS4gIEFzIHN1Y2gsXG4gICAgICogdGFrZXMgdGhlIHJlc3VsdCBvZiBhIHtAbGluayBuZy4kc2NlI3RydXN0QXMgYCRzY2UudHJ1c3RBc2B9KCkgY2FsbCBhbmQgcmV0dXJucyB0aGVcbiAgICAgKiBvcmlnaW5hbGx5IHN1cHBsaWVkIHZhbHVlIGlmIHRoZSBxdWVyaWVkIGNvbnRleHQgdHlwZSBpcyBhIHN1cGVydHlwZSBvZiB0aGUgY3JlYXRlZCB0eXBlLlxuICAgICAqIElmIHRoaXMgY29uZGl0aW9uIGlzbid0IHNhdGlzZmllZCwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkLlxuICAgICAqIEBwYXJhbSB7Kn0gbWF5YmVUcnVzdGVkIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGwuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGUgd2FzIG9yaWdpbmFsbHkgcHJvdmlkZWQgdG9cbiAgICAgKiAgICAgICAgICAgICAge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH0gaWYgdmFsaWQgaW4gdGhpcyBjb250ZXh0LlxuICAgICAqICAgICAgICAgICAgICBPdGhlcndpc2UsIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkSHRtbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5IVE1MLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZENzc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRDc3ModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLkNTUywgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZFVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEpzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLkpTLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSHRtbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNIdG1sKGV4cHJlc3Npb24gc3RyaW5nKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc0Nzc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNDc3ModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuQ1NTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNKc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNKcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvLyBTaG9ydGhhbmQgZGVsZWdhdGlvbnMuXG4gICAgdmFyIHBhcnNlID0gc2NlLnBhcnNlQXMsXG4gICAgICAgIGdldFRydXN0ZWQgPSBzY2UuZ2V0VHJ1c3RlZCxcbiAgICAgICAgdHJ1c3RBcyA9IHNjZS50cnVzdEFzO1xuXG4gICAgZm9yRWFjaChTQ0VfQ09OVEVYVFMsIGZ1bmN0aW9uKGVudW1WYWx1ZSwgbmFtZSkge1xuICAgICAgdmFyIGxOYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xuICAgICAgc2NlW2NhbWVsQ2FzZShcInBhcnNlX2FzX1wiICsgbE5hbWUpXSA9IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlKGVudW1WYWx1ZSwgZXhwcik7XG4gICAgICB9O1xuICAgICAgc2NlW2NhbWVsQ2FzZShcImdldF90cnVzdGVkX1wiICsgbE5hbWUpXSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBnZXRUcnVzdGVkKGVudW1WYWx1ZSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICAgIHNjZVtjYW1lbENhc2UoXCJ0cnVzdF9hc19cIiArIGxOYW1lKV0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1c3RBcyhlbnVtVmFsdWUsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2NlO1xuICB9XTtcbn1cblxuLyoqXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgc2VydmljZSAhISFcbiAqXG4gKiBAbmFtZSAkc25pZmZlclxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGhpc3RvcnkgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IGh0bWw1IGhpc3RvcnkgYXBpID9cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdHJhbnNpdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyB0cmFuc2l0aW9uIGV2ZW50cyA/XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGFuaW1hdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyBhbmltYXRpb24gZXZlbnRzID9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgaXMgdmVyeSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgdGVzdGluZyBicm93c2VyJ3MgZmVhdHVyZXMuXG4gKi9cbmZ1bmN0aW9uICRTbmlmZmVyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQpIHtcbiAgICB2YXIgZXZlbnRTdXBwb3J0ID0ge30sXG4gICAgICAgIGFuZHJvaWQgPVxuICAgICAgICAgIGludCgoL2FuZHJvaWQgKFxcZCspLy5leGVjKGxvd2VyY2FzZSgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSksXG4gICAgICAgIGJveGVlID0gL0JveGVlL2kudGVzdCgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCksXG4gICAgICAgIGRvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9LFxuICAgICAgICB2ZW5kb3JQcmVmaXgsXG4gICAgICAgIHZlbmRvclJlZ2V4ID0gL14oTW96fHdlYmtpdHxtcykoPz1bQS1aXSkvLFxuICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuc3R5bGUsXG4gICAgICAgIHRyYW5zaXRpb25zID0gZmFsc2UsXG4gICAgICAgIGFuaW1hdGlvbnMgPSBmYWxzZSxcbiAgICAgICAgbWF0Y2g7XG5cbiAgICBpZiAoYm9keVN0eWxlKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIGJvZHlTdHlsZSkge1xuICAgICAgICBpZiAobWF0Y2ggPSB2ZW5kb3JSZWdleC5leGVjKHByb3ApKSB7XG4gICAgICAgICAgdmVuZG9yUHJlZml4ID0gbWF0Y2hbMF07XG4gICAgICAgICAgdmVuZG9yUHJlZml4ID0gdmVuZG9yUHJlZml4LnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgdmVuZG9yUHJlZml4LnN1YnN0cigxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXZlbmRvclByZWZpeCkge1xuICAgICAgICB2ZW5kb3JQcmVmaXggPSAoJ1dlYmtpdE9wYWNpdHknIGluIGJvZHlTdHlsZSkgJiYgJ3dlYmtpdCc7XG4gICAgICB9XG5cbiAgICAgIHRyYW5zaXRpb25zID0gISEoKCd0cmFuc2l0aW9uJyBpbiBib2R5U3R5bGUpIHx8ICh2ZW5kb3JQcmVmaXggKyAnVHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSk7XG4gICAgICBhbmltYXRpb25zICA9ICEhKCgnYW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpIHx8ICh2ZW5kb3JQcmVmaXggKyAnQW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpKTtcblxuICAgICAgaWYgKGFuZHJvaWQgJiYgKCF0cmFuc2l0aW9uc3x8IWFuaW1hdGlvbnMpKSB7XG4gICAgICAgIHRyYW5zaXRpb25zID0gaXNTdHJpbmcoZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uKTtcbiAgICAgICAgYW5pbWF0aW9ucyA9IGlzU3RyaW5nKGRvY3VtZW50LmJvZHkuc3R5bGUud2Via2l0QW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIHJldHVybiB7XG4gICAgICAvLyBBbmRyb2lkIGhhcyBoaXN0b3J5LnB1c2hTdGF0ZSwgYnV0IGl0IGRvZXMgbm90IHVwZGF0ZSBsb2NhdGlvbiBjb3JyZWN0bHlcbiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGF0IGFsbC5cbiAgICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9kZXRhaWw/aWQ9MTc0NzFcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkwNFxuXG4gICAgICAvLyBvbGRlciB3ZWJraXQgYnJvd3NlciAoNTMzLjkpIG9uIEJveGVlIGJveCBoYXMgZXhhY3RseSB0aGUgc2FtZSBwcm9ibGVtIGFzIEFuZHJvaWQgaGFzXG4gICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhbHNvXG4gICAgICAvLyBXZSBhcmUgcHVycG9zZWZ1bGx5IHVzaW5nIGAhKGFuZHJvaWQgPCA0KWAgdG8gY292ZXIgdGhlIGNhc2Ugd2hlbiBgYW5kcm9pZGAgaXMgdW5kZWZpbmVkXG4gICAgICAvLyBqc2hpbnQgLVcwMThcbiAgICAgIGhpc3Rvcnk6ICEhKCR3aW5kb3cuaGlzdG9yeSAmJiAkd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlICYmICEoYW5kcm9pZCA8IDQpICYmICFib3hlZSksXG4gICAgICAvLyBqc2hpbnQgK1cwMThcbiAgICAgIGhhc0V2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAvLyBJRTkgaW1wbGVtZW50cyAnaW5wdXQnIGV2ZW50IGl0J3Mgc28gZnViYXJlZCB0aGF0IHdlIHJhdGhlciBwcmV0ZW5kIHRoYXQgaXQgZG9lc24ndCBoYXZlXG4gICAgICAgIC8vIGl0LiBJbiBwYXJ0aWN1bGFyIHRoZSBldmVudCBpcyBub3QgZmlyZWQgd2hlbiBiYWNrc3BhY2Ugb3IgZGVsZXRlIGtleSBhcmUgcHJlc3NlZCBvclxuICAgICAgICAvLyB3aGVuIGN1dCBvcGVyYXRpb24gaXMgcGVyZm9ybWVkLlxuICAgICAgICBpZiAoZXZlbnQgPT0gJ2lucHV0JyAmJiBtc2llID09IDkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnRTdXBwb3J0W2V2ZW50XSkpIHtcbiAgICAgICAgICB2YXIgZGl2RWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgZXZlbnRTdXBwb3J0W2V2ZW50XSA9ICdvbicgKyBldmVudCBpbiBkaXZFbG07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXZlbnRTdXBwb3J0W2V2ZW50XTtcbiAgICAgIH0sXG4gICAgICBjc3A6IGNzcCgpLFxuICAgICAgdmVuZG9yUHJlZml4OiB2ZW5kb3JQcmVmaXgsXG4gICAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnMsXG4gICAgICBhbmltYXRpb25zOiBhbmltYXRpb25zLFxuICAgICAgYW5kcm9pZDogYW5kcm9pZFxuICAgIH07XG4gIH1dO1xufVxuXG52YXIgJGNvbXBpbGVNaW5FcnIgPSBtaW5FcnIoJyRjb21waWxlJyk7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR0ZW1wbGF0ZVJlcXVlc3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgJHRlbXBsYXRlUmVxdWVzdGAgc2VydmljZSBkb3dubG9hZHMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIHVzaW5nIGAkaHR0cGAgYW5kLCB1cG9uIHN1Y2Nlc3MsXG4gKiBzdG9yZXMgdGhlIGNvbnRlbnRzIGluc2lkZSBvZiBgJHRlbXBsYXRlQ2FjaGVgLiBJZiB0aGUgSFRUUCByZXF1ZXN0IGZhaWxzIG9yIHRoZSByZXNwb25zZSBkYXRhXG4gKiBvZiB0aGUgSFRUUCByZXF1ZXN0IGlzIGVtcHR5IHRoZW4gYSBgJGNvbXBpbGVgIGVycm9yIHdpbGwgYmUgdGhyb3duICh0aGUgZXhjZXB0aW9uIGNhbiBiZSB0aHdhcnRlZFxuICogYnkgc2V0dGluZyB0aGUgMm5kIHBhcmFtZXRlciBvZiB0aGUgZnVuY3Rpb24gdG8gdHJ1ZSkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRwbCBUaGUgSFRUUCByZXF1ZXN0IHRlbXBsYXRlIFVSTFxuICogQHBhcmFtIHtib29sZWFuPX0gaWdub3JlUmVxdWVzdEVycm9yIFdoZXRoZXIgb3Igbm90IHRvIGlnbm9yZSB0aGUgZXhjZXB0aW9uIHdoZW4gdGhlIHJlcXVlc3QgZmFpbHMgb3IgdGhlIHRlbXBsYXRlIGlzIGVtcHR5XG4gKlxuICogQHJldHVybiB7UHJvbWlzZX0gdGhlIEhUVFAgUHJvbWlzZSBmb3IgdGhlIGdpdmVuLlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbFBlbmRpbmdSZXF1ZXN0cyB0b3RhbCBhbW91bnQgb2YgcGVuZGluZyB0ZW1wbGF0ZSByZXF1ZXN0cyBiZWluZyBkb3dubG9hZGVkLlxuICovXG5mdW5jdGlvbiAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHRlbXBsYXRlQ2FjaGUnLCAnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSwgJGh0dHAsICRxKSB7XG4gICAgZnVuY3Rpb24gaGFuZGxlUmVxdWVzdEZuKHRwbCwgaWdub3JlUmVxdWVzdEVycm9yKSB7XG4gICAgICB2YXIgc2VsZiA9IGhhbmRsZVJlcXVlc3RGbjtcbiAgICAgIHNlbGYudG90YWxQZW5kaW5nUmVxdWVzdHMrKztcblxuICAgICAgdmFyIHRyYW5zZm9ybVJlc3BvbnNlID0gJGh0dHAuZGVmYXVsdHMgJiYgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2U7XG5cbiAgICAgIGlmIChpc0FycmF5KHRyYW5zZm9ybVJlc3BvbnNlKSkge1xuICAgICAgICB2YXIgb3JpZ2luYWwgPSB0cmFuc2Zvcm1SZXNwb25zZTtcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2UgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPG9yaWdpbmFsLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgdmFyIHRyYW5zZm9ybWVyID0gb3JpZ2luYWxbaV07XG4gICAgICAgICAgaWYgKHRyYW5zZm9ybWVyICE9PSBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZS5wdXNoKHRyYW5zZm9ybWVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtUmVzcG9uc2UgPT09IGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0pIHtcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2UgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaHR0cE9wdGlvbnMgPSB7XG4gICAgICAgIGNhY2hlOiAkdGVtcGxhdGVDYWNoZSxcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6IHRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KHRwbCwgaHR0cE9wdGlvbnMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgdmFyIGh0bWwgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgIHNlbGYudG90YWxQZW5kaW5nUmVxdWVzdHMtLTtcbiAgICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodHBsLCBodG1sKTtcbiAgICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgICAgc2VsZi50b3RhbFBlbmRpbmdSZXF1ZXN0cy0tO1xuICAgICAgICBpZiAoIWlnbm9yZVJlcXVlc3RFcnJvcikge1xuICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCd0cGxvYWQnLCAnRmFpbGVkIHRvIGxvYWQgdGVtcGxhdGU6IHswfScsIHRwbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRxLnJlamVjdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cyA9IDA7XG5cbiAgICByZXR1cm4gaGFuZGxlUmVxdWVzdEZuO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJCRUZXN0YWJpbGl0eVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJGxvY2F0aW9uJyxcbiAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAgICRicm93c2VyLCAgICRsb2NhdGlvbikge1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJHRlc3RhYmlsaXR5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGUgcHJpdmF0ZSAkJHRlc3RhYmlsaXR5IHNlcnZpY2UgcHJvdmlkZXMgYSBjb2xsZWN0aW9uIG9mIG1ldGhvZHMgZm9yIHVzZSB3aGVuIGRlYnVnZ2luZ1xuICAgICAqIG9yIGJ5IGF1dG9tYXRlZCB0ZXN0IGFuZCBkZWJ1Z2dpbmcgdG9vbHMuXG4gICAgICovXG4gICAgdmFyIHRlc3RhYmlsaXR5ID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2ZpbmRCaW5kaW5nc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSBib3VuZCAodmlhIG5nLWJpbmQgb3Ige3t9fSlcbiAgICAgKiB0byBleHByZXNzaW9ucyBtYXRjaGluZyB0aGUgaW5wdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgcm9vdCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgYmluZGluZyBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLiBGaWx0ZXJzIGFuZCB3aGl0ZXNwYWNlIGFyZSBpZ25vcmVkLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRCaW5kaW5ncyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV4cHJlc3Npb24sIG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICB2YXIgYmluZGluZ3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25nLWJpbmRpbmcnKTtcbiAgICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgICBmb3JFYWNoKGJpbmRpbmdzLCBmdW5jdGlvbihiaW5kaW5nKSB7XG4gICAgICAgIHZhciBkYXRhQmluZGluZyA9IGFuZ3VsYXIuZWxlbWVudChiaW5kaW5nKS5kYXRhKCckYmluZGluZycpO1xuICAgICAgICBpZiAoZGF0YUJpbmRpbmcpIHtcbiAgICAgICAgICBmb3JFYWNoKGRhdGFCaW5kaW5nLCBmdW5jdGlvbihiaW5kaW5nTmFtZSkge1xuICAgICAgICAgICAgaWYgKG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGVzY2FwZUZvclJlZ2V4cChleHByZXNzaW9uKSArICcoXFxcXHN8XFxcXHx8JCknKTtcbiAgICAgICAgICAgICAgaWYgKG1hdGNoZXIudGVzdChiaW5kaW5nTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChiaW5kaW5nTmFtZS5pbmRleE9mKGV4cHJlc3Npb24pICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGJpbmRpbmcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZE1vZGVsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB0d28td2F5IGZvdW5kIHZpYSBuZy1tb2RlbCB0b1xuICAgICAqIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBtb2RlbCBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRNb2RlbHMgPSBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkge1xuICAgICAgdmFyIHByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmdcXFxcOiddO1xuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcmVmaXhlcy5sZW5ndGg7ICsrcCkge1xuICAgICAgICB2YXIgYXR0cmlidXRlRXF1YWxzID0gb3B0X2V4YWN0TWF0Y2ggPyAnPScgOiAnKj0nO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnWycgKyBwcmVmaXhlc1twXSArICdtb2RlbCcgKyBhdHRyaWJ1dGVFcXVhbHMgKyAnXCInICsgZXhwcmVzc2lvbiArICdcIl0nO1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZ2V0TG9jYXRpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IGZvciBnZXR0aW5nIHRoZSBsb2NhdGlvbiBpbiBhIGJyb3dzZXIgYWdub3N0aWMgd2F5LiBSZXR1cm5zXG4gICAgICogICAgIHRoZSBwYXRoLCBzZWFyY2gsIGFuZCBoYXNoLiAoZS5nLiAvcGF0aD9hPWIjaGFzaClcbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5nZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi51cmwoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNzZXRMb2NhdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgZm9yIG5hdmlnYXRpbmcgdG8gYSBsb2NhdGlvbiB3aXRob3V0IGRvaW5nIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGxvY2F0aW9uIHVybCAocGF0aCwgc2VhcmNoIGFuZCBoYXNoLFxuICAgICAqICAgICBlLmcuIC9wYXRoP2E9YiNoYXNoKSB0byBnbyB0by5cbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgaWYgKHVybCAhPT0gJGxvY2F0aW9uLnVybCgpKSB7XG4gICAgICAgICRsb2NhdGlvbi51cmwodXJsKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjd2hlblN0YWJsZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gJHRpbWVvdXQgYW5kICRodHRwIHJlcXVlc3RzIGFyZSBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LndoZW5TdGFibGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyhjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHJldHVybiB0ZXN0YWJpbGl0eTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uICRUaW1lb3V0UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckcScsICckJHEnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHEsICAgJCRxLCAgICRleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgdmFyIGRlZmVycmVkcyA9IHt9O1xuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICAqIEBuYW1lICR0aW1lb3V0XG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBBbmd1bGFyJ3Mgd3JhcHBlciBmb3IgYHdpbmRvdy5zZXRUaW1lb3V0YC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgd3JhcHBlZCBpbnRvIGEgdHJ5L2NhdGNoXG4gICAgICAqIGJsb2NrIGFuZCBkZWxlZ2F0ZXMgYW55IGV4Y2VwdGlvbnMgdG9cbiAgICAgICoge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgKlxuICAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHJlZ2lzdGVyaW5nIGEgdGltZW91dCBmdW5jdGlvbiBpcyBhIHByb21pc2UsIHdoaWNoIHdpbGwgYmUgcmVzb2x2ZWQgd2hlblxuICAgICAgKiB0aGUgdGltZW91dCBpcyByZWFjaGVkIGFuZCB0aGUgdGltZW91dCBmdW5jdGlvbiBpcyBleGVjdXRlZC5cbiAgICAgICpcbiAgICAgICogVG8gY2FuY2VsIGEgdGltZW91dCByZXF1ZXN0LCBjYWxsIGAkdGltZW91dC5jYW5jZWwocHJvbWlzZSlgLlxuICAgICAgKlxuICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiR0aW1lb3V0IGAkdGltZW91dC5mbHVzaCgpYH0gdG9cbiAgICAgICogc3luY2hyb25vdXNseSBmbHVzaCB0aGUgcXVldWUgb2YgZGVmZXJyZWQgZnVuY3Rpb25zLlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdob3NlIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVsYXllZC5cbiAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gRGVsYXkgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZVxuICAgICAgKiAgIHdpbGwgaW52b2tlIGBmbmAgd2l0aGluIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5fSBibG9jay5cbiAgICAgICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhlIHRpbWVvdXQgaXMgcmVhY2hlZC4gVGhlIHZhbHVlIHRoaXNcbiAgICAgICogICBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBpcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgZm5gIGZ1bmN0aW9uLlxuICAgICAgKlxuICAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lb3V0KGZuLCBkZWxheSwgaW52b2tlQXBwbHkpIHtcbiAgICAgIHZhciBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgIHRpbWVvdXRJZDtcblxuICAgICAgdGltZW91dElkID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFza2lwQXBwbHkpICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICB9LCBkZWxheSk7XG5cbiAgICAgIHByb21pc2UuJCR0aW1lb3V0SWQgPSB0aW1lb3V0SWQ7XG4gICAgICBkZWZlcnJlZHNbdGltZW91dElkXSA9IGRlZmVycmVkO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgKiBAbmFtZSAkdGltZW91dCNjYW5jZWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIENhbmNlbHMgYSB0YXNrIGFzc29jaWF0ZWQgd2l0aCB0aGUgYHByb21pc2VgLiBBcyBhIHJlc3VsdCBvZiB0aGlzLCB0aGUgcHJvbWlzZSB3aWxsIGJlXG4gICAgICAqIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7UHJvbWlzZT19IHByb21pc2UgUHJvbWlzZSByZXR1cm5lZCBieSB0aGUgYCR0aW1lb3V0YCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcbiAgICAgICogICBjYW5jZWxlZC5cbiAgICAgICovXG4gICAgdGltZW91dC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLiQkdGltZW91dElkIGluIGRlZmVycmVkcykge1xuICAgICAgICBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF0ucmVqZWN0KCdjYW5jZWxlZCcpO1xuICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdO1xuICAgICAgICByZXR1cm4gJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHByb21pc2UuJCR0aW1lb3V0SWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGltZW91dDtcbiAgfV07XG59XG5cbi8vIE5PVEU6ICBUaGUgdXNhZ2Ugb2Ygd2luZG93IGFuZCBkb2N1bWVudCBpbnN0ZWFkIG9mICR3aW5kb3cgYW5kICRkb2N1bWVudCBoZXJlIGlzXG4vLyBkZWxpYmVyYXRlLiAgVGhpcyBzZXJ2aWNlIGRlcGVuZHMgb24gdGhlIHNwZWNpZmljIGJlaGF2aW9yIG9mIGFuY2hvciBub2RlcyBjcmVhdGVkIGJ5IHRoZVxuLy8gYnJvd3NlciAocmVzb2x2aW5nIGFuZCBwYXJzaW5nIFVSTHMpIHRoYXQgaXMgdW5saWtlbHkgdG8gYmUgcHJvdmlkZWQgYnkgbW9jayBvYmplY3RzIGFuZFxuLy8gY2F1c2UgdXMgdG8gYnJlYWsgdGVzdHMuICBJbiBhZGRpdGlvbiwgd2hlbiB0aGUgYnJvd3NlciByZXNvbHZlcyBhIFVSTCBmb3IgWEhSLCBpdFxuLy8gZG9lc24ndCBrbm93IGFib3V0IG1vY2tlZCBsb2NhdGlvbnMgYW5kIHJlc29sdmVzIFVSTHMgdG8gdGhlIHJlYWwgZG9jdW1lbnQgLSB3aGljaCBpc1xuLy8gZXhhY3RseSB0aGUgYmVoYXZpb3IgbmVlZGVkIGhlcmUuICBUaGVyZSBpcyBsaXR0bGUgdmFsdWUgaXMgbW9ja2luZyB0aGVzZSBvdXQgZm9yIHRoaXNcbi8vIHNlcnZpY2UuXG52YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbnZhciBvcmlnaW5VcmwgPSB1cmxSZXNvbHZlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLCB0cnVlKTtcblxuXG4vKipcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3Igbm9uLUlFIGJyb3dzZXJzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBc3NpZ25pbmcgYSBVUkwgdG8gdGhlIGhyZWYgcHJvcGVydHkgb2YgYW4gYW5jaG9yIERPTSBub2RlLCBldmVuIG9uZSBhdHRhY2hlZCB0byB0aGUgRE9NLFxuICogcmVzdWx0cyBib3RoIGluIHRoZSBub3JtYWxpemluZyBhbmQgcGFyc2luZyBvZiB0aGUgVVJMLiAgTm9ybWFsaXppbmcgbWVhbnMgdGhhdCBhIHJlbGF0aXZlXG4gKiBVUkwgd2lsbCBiZSByZXNvbHZlZCBpbnRvIGFuIGFic29sdXRlIFVSTCBpbiB0aGUgY29udGV4dCBvZiB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKiBQYXJzaW5nIG1lYW5zIHRoYXQgdGhlIGFuY2hvciBub2RlJ3MgaG9zdCwgaG9zdG5hbWUsIHByb3RvY29sLCBwb3J0LCBwYXRobmFtZSBhbmQgcmVsYXRlZFxuICogcHJvcGVydGllcyBhcmUgYWxsIHBvcHVsYXRlZCB0byByZWZsZWN0IHRoZSBub3JtYWxpemVkIFVSTC4gIFRoaXMgYXBwcm9hY2ggaGFzIHdpZGVcbiAqIGNvbXBhdGliaWxpdHkgLSBTYWZhcmkgMSssIE1vemlsbGEgMSssIE9wZXJhIDcrLGUgZXRjLiAgU2VlXG4gKiBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWxcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3IgSUVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogSUUgPj0gOCBhbmQgPD0gMTAgbm9ybWFsaXplcyB0aGUgVVJMIHdoZW4gYXNzaWduZWQgdG8gdGhlIGFuY2hvciBub2RlIHNpbWlsYXIgdG8gdGhlIG90aGVyXG4gKiBicm93c2Vycy4gIEhvd2V2ZXIsIHRoZSBwYXJzZWQgY29tcG9uZW50cyB3aWxsIG5vdCBiZSBzZXQgaWYgdGhlIFVSTCBhc3NpZ25lZCBkaWQgbm90IHNwZWNpZnlcbiAqIHRoZW0uICAoZS5nLiBpZiB5b3UgYXNzaWduIGEuaHJlZiA9IFwiZm9vXCIsIHRoZW4gYS5wcm90b2NvbCwgYS5ob3N0LCBldGMuIHdpbGwgYmUgZW1wdHkuKSAgV2VcbiAqIHdvcmsgYXJvdW5kIHRoYXQgYnkgcGVyZm9ybWluZyB0aGUgcGFyc2luZyBpbiBhIDJuZCBzdGVwIGJ5IHRha2luZyBhIHByZXZpb3VzbHkgbm9ybWFsaXplZFxuICogVVJMIChlLmcuIGJ5IGFzc2lnbmluZyB0byBhLmhyZWYpIGFuZCBhc3NpZ25pbmcgaXQgYS5ocmVmIGFnYWluLiAgVGhpcyBjb3JyZWN0bHkgcG9wdWxhdGVzIHRoZVxuICogcHJvcGVydGllcyBzdWNoIGFzIHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCwgZXRjLlxuICpcbiAqIElFNyBkb2VzIG5vdCBub3JtYWxpemUgdGhlIFVSTCB3aGVuIGFzc2lnbmVkIHRvIGFuIGFuY2hvciBub2RlLiAgKEFwcGFyZW50bHksIGl0IGRvZXMsIGlmIG9uZVxuICogdXNlcyB0aGUgaW5uZXIgSFRNTCBhcHByb2FjaCB0byBhc3NpZ24gdGhlIFVSTCBhcyBwYXJ0IG9mIGFuIEhUTUwgc25pcHBldCAtXG4gKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NzI3MjkpICBIb3dldmVyLCBzZXR0aW5nIGltZ1tzcmNdIGRvZXMgbm9ybWFsaXplIHRoZSBVUkwuXG4gKiBVbmZvcnR1bmF0ZWx5LCBzZXR0aW5nIGltZ1tzcmNdIHRvIHNvbWV0aGluZyBsaWtlIFwiamF2YXNjcmlwdDpmb29cIiBvbiBJRSB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICogU2luY2UgdGhlIHByaW1hcnkgdXNhZ2UgZm9yIG5vcm1hbGl6aW5nIFVSTHMgaXMgdG8gc2FuaXRpemUgc3VjaCBVUkxzLCB3ZSBjYW4ndCB1c2UgdGhhdFxuICogbWV0aG9kIGFuZCBJRSA8IDggaXMgdW5zdXBwb3J0ZWQuXG4gKlxuICogUmVmZXJlbmNlczpcbiAqICAgaHR0cDovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEFuY2hvckVsZW1lbnRcbiAqICAgaHR0cDovL3d3dy5hcHRhbmEuY29tL3JlZmVyZW5jZS9odG1sL2FwaS9IVE1MQW5jaG9yRWxlbWVudC5odG1sXG4gKiAgIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICogICBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMjkwMlxuICogICBodHRwOi8vamFtZXMucGFkb2xzZXkuY29tL2phdmFzY3JpcHQvcGFyc2luZy11cmxzLXdpdGgtdGhlLWRvbS9cbiAqXG4gKiBAa2luZCBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZC5cbiAqIEBkZXNjcmlwdGlvbiBOb3JtYWxpemVzIGFuZCBwYXJzZXMgYSBVUkwuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBSZXR1cm5zIHRoZSBub3JtYWxpemVkIFVSTCBhcyBhIGRpY3Rpb25hcnkuXG4gKlxuICogICB8IG1lbWJlciBuYW1lICAgfCBEZXNjcmlwdGlvbiAgICB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBocmVmICAgICAgICAgIHwgQSBub3JtYWxpemVkIHZlcnNpb24gb2YgdGhlIHByb3ZpZGVkIFVSTCBpZiBpdCB3YXMgbm90IGFuIGFic29sdXRlIFVSTCB8XG4gKiAgIHwgcHJvdG9jb2wgICAgICB8IFRoZSBwcm90b2NvbCBpbmNsdWRpbmcgdGhlIHRyYWlsaW5nIGNvbG9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICB8IGhvc3QgICAgICAgICAgfCBUaGUgaG9zdCBhbmQgcG9ydCAoaWYgdGhlIHBvcnQgaXMgbm9uLWRlZmF1bHQpIG9mIHRoZSBub3JtYWxpemVkVXJsICAgIHxcbiAqICAgfCBzZWFyY2ggICAgICAgIHwgVGhlIHNlYXJjaCBwYXJhbXMsIG1pbnVzIHRoZSBxdWVzdGlvbiBtYXJrICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgIHwgaGFzaCAgICAgICAgICB8IFRoZSBoYXNoIHN0cmluZywgbWludXMgdGhlIGhhc2ggc3ltYm9sXG4gKiAgIHwgaG9zdG5hbWUgICAgICB8IFRoZSBob3N0bmFtZVxuICogICB8IHBvcnQgICAgICAgICAgfCBUaGUgcG9ydCwgd2l0aG91dCBcIjpcIlxuICogICB8IHBhdGhuYW1lICAgICAgfCBUaGUgcGF0aG5hbWUsIGJlZ2lubmluZyB3aXRoIFwiL1wiXG4gKlxuICovXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHVybCwgYmFzZSkge1xuICB2YXIgaHJlZiA9IHVybDtcblxuICBpZiAobXNpZSkge1xuICAgIC8vIE5vcm1hbGl6ZSBiZWZvcmUgcGFyc2UuICBSZWZlciBJbXBsZW1lbnRhdGlvbiBOb3RlcyBvbiB3aHkgdGhpcyBpc1xuICAgIC8vIGRvbmUgaW4gdHdvIHN0ZXBzIG9uIElFLlxuICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgaHJlZik7XG4gICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gIH1cblxuICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gIHJldHVybiB7XG4gICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJylcbiAgICAgID8gdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIDogJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgfTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIHJlcXVlc3QgVVJMIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgc2FtZS1vcmlnaW4gcmVxdWVzdCBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZXF1ZXN0VXJsIFRoZSB1cmwgb2YgdGhlIHJlcXVlc3QgYXMgYSBzdHJpbmcgdGhhdCB3aWxsIGJlIHJlc29sdmVkXG4gKiBvciBhIHBhcnNlZCBVUkwgb2JqZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgZm9yIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHVybElzU2FtZU9yaWdpbihyZXF1ZXN0VXJsKSB7XG4gIHZhciBwYXJzZWQgPSAoaXNTdHJpbmcocmVxdWVzdFVybCkpID8gdXJsUmVzb2x2ZShyZXF1ZXN0VXJsKSA6IHJlcXVlc3RVcmw7XG4gIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VcmwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVXJsLmhvc3QpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkd2luZG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHJlZmVyZW5jZSB0byB0aGUgYnJvd3NlcidzIGB3aW5kb3dgIG9iamVjdC4gV2hpbGUgYHdpbmRvd2BcbiAqIGlzIGdsb2JhbGx5IGF2YWlsYWJsZSBpbiBKYXZhU2NyaXB0LCBpdCBjYXVzZXMgdGVzdGFiaWxpdHkgcHJvYmxlbXMsIGJlY2F1c2VcbiAqIGl0IGlzIGEgZ2xvYmFsIHZhcmlhYmxlLiBJbiBhbmd1bGFyIHdlIGFsd2F5cyByZWZlciB0byBpdCB0aHJvdWdoIHRoZVxuICogYCR3aW5kb3dgIHNlcnZpY2UsIHNvIGl0IG1heSBiZSBvdmVycmlkZGVuLCByZW1vdmVkIG9yIG1vY2tlZCBmb3IgdGVzdGluZy5cbiAqXG4gKiBFeHByZXNzaW9ucywgbGlrZSB0aGUgb25lIGRlZmluZWQgZm9yIHRoZSBgbmdDbGlja2AgZGlyZWN0aXZlIGluIHRoZSBleGFtcGxlXG4gKiBiZWxvdywgYXJlIGV2YWx1YXRlZCB3aXRoIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgc2NvcGUuICBUaGVyZWZvcmUsIHRoZXJlIGlzXG4gKiBubyByaXNrIG9mIGluYWR2ZXJ0ZW50bHkgY29kaW5nIGluIGEgZGVwZW5kZW5jeSBvbiBhIGdsb2JhbCB2YWx1ZSBpbiBzdWNoIGFuXG4gKiBleHByZXNzaW9uLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJ3aW5kb3dFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd3aW5kb3dFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyR3aW5kb3cnLCBmdW5jdGlvbigkc2NvcGUsICR3aW5kb3cpIHtcbiAgICAgICAgICAgICAkc2NvcGUuZ3JlZXRpbmcgPSAnSGVsbG8sIFdvcmxkISc7XG4gICAgICAgICAgICAgJHNjb3BlLmRvR3JlZXRpbmcgPSBmdW5jdGlvbihncmVldGluZykge1xuICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChncmVldGluZyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImdyZWV0aW5nXCIgLz5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJkb0dyZWV0aW5nKGdyZWV0aW5nKVwiPkFMRVJUPC9idXR0b24+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBncmVldGluZyBpbiB0aGUgaW5wdXQgYm94JywgZnVuY3Rpb24oKSB7XG4gICAgICAgZWxlbWVudChieS5tb2RlbCgnZ3JlZXRpbmcnKSkuc2VuZEtleXMoJ0hlbGxvLCBFMkUgVGVzdHMnKTtcbiAgICAgICAvLyBJZiB3ZSBjbGljayB0aGUgYnV0dG9uIGl0IHdpbGwgYmxvY2sgdGhlIHRlc3QgcnVubmVyXG4gICAgICAgLy8gZWxlbWVudCgnOmJ1dHRvbicpLmNsaWNrKCk7XG4gICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkV2luZG93UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IHZhbHVlRm4od2luZG93KTtcbn1cblxuLyogZ2xvYmFsIGN1cnJlbmN5RmlsdGVyOiB0cnVlLFxuIGRhdGVGaWx0ZXI6IHRydWUsXG4gZmlsdGVyRmlsdGVyOiB0cnVlLFxuIGpzb25GaWx0ZXI6IHRydWUsXG4gbGltaXRUb0ZpbHRlcjogdHJ1ZSxcbiBsb3dlcmNhc2VGaWx0ZXI6IHRydWUsXG4gbnVtYmVyRmlsdGVyOiB0cnVlLFxuIG9yZGVyQnlGaWx0ZXI6IHRydWUsXG4gdXBwZXJjYXNlRmlsdGVyOiB0cnVlLFxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkZmlsdGVyUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEZpbHRlcnMgYXJlIGp1c3QgZnVuY3Rpb25zIHdoaWNoIHRyYW5zZm9ybSBpbnB1dCB0byBhbiBvdXRwdXQuIEhvd2V2ZXIgZmlsdGVycyBuZWVkIHRvIGJlXG4gKiBEZXBlbmRlbmN5IEluamVjdGVkLiBUbyBhY2hpZXZlIHRoaXMgYSBmaWx0ZXIgZGVmaW5pdGlvbiBjb25zaXN0cyBvZiBhIGZhY3RvcnkgZnVuY3Rpb24gd2hpY2ggaXNcbiAqIGFubm90YXRlZCB3aXRoIGRlcGVuZGVuY2llcyBhbmQgaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGEgZmlsdGVyIGZ1bmN0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIEZpbHRlciByZWdpc3RyYXRpb25cbiAqICAgZnVuY3Rpb24gTXlNb2R1bGUoJHByb3ZpZGUsICRmaWx0ZXJQcm92aWRlcikge1xuICogICAgIC8vIGNyZWF0ZSBhIHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgaW5qZWN0aW9uIChub3QgYWx3YXlzIG5lZWRlZClcbiAqICAgICAkcHJvdmlkZS52YWx1ZSgnZ3JlZXQnLCBmdW5jdGlvbihuYW1lKXtcbiAqICAgICAgIHJldHVybiAnSGVsbG8gJyArIG5hbWUgKyAnISc7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIC8vIHJlZ2lzdGVyIGEgZmlsdGVyIGZhY3Rvcnkgd2hpY2ggdXNlcyB0aGVcbiAqICAgICAvLyBncmVldCBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIERJLlxuICogICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcignZ3JlZXQnLCBmdW5jdGlvbihncmVldCl7XG4gKiAgICAgICAvLyByZXR1cm4gdGhlIGZpbHRlciBmdW5jdGlvbiB3aGljaCB1c2VzIHRoZSBncmVldCBzZXJ2aWNlXG4gKiAgICAgICAvLyB0byBnZW5lcmF0ZSBzYWx1dGF0aW9uXG4gKiAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICogICAgICAgICAvLyBmaWx0ZXJzIG5lZWQgdG8gYmUgZm9yZ2l2aW5nIHNvIGNoZWNrIGlucHV0IHZhbGlkaXR5XG4gKiAgICAgICAgIHJldHVybiB0ZXh0ICYmIGdyZWV0KHRleHQpIHx8IHRleHQ7XG4gKiAgICAgICB9O1xuICogICAgIH0pO1xuICogICB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgZmlsdGVyIGZ1bmN0aW9uIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYCRpbmplY3RvcmAgdW5kZXIgdGhlIGZpbHRlciBuYW1lIHN1ZmZpeCB3aXRoXG4gKiBgRmlsdGVyYC5cbiAqXG4gKiBgYGBqc1xuICogICBpdCgnc2hvdWxkIGJlIHRoZSBzYW1lIGluc3RhbmNlJywgaW5qZWN0KFxuICogICAgIGZ1bmN0aW9uKCRmaWx0ZXJQcm92aWRlcikge1xuICogICAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdyZXZlcnNlJywgZnVuY3Rpb24oKXtcbiAqICAgICAgICAgcmV0dXJuIC4uLjtcbiAqICAgICAgIH0pO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oJGZpbHRlciwgcmV2ZXJzZUZpbHRlcikge1xuICogICAgICAgZXhwZWN0KCRmaWx0ZXIoJ3JldmVyc2UnKSkudG9CZShyZXZlcnNlRmlsdGVyKTtcbiAqICAgICB9KTtcbiAqIGBgYFxuICpcbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBob3cgYW5ndWxhciBmaWx0ZXJzIHdvcmssIGFuZCBob3cgdG8gY3JlYXRlIHlvdXIgb3duIGZpbHRlcnMsIHNlZVxuICoge0BsaW5rIGd1aWRlL2ZpbHRlciBGaWx0ZXJzfSBpbiB0aGUgQW5ndWxhciBEZXZlbG9wZXIgR3VpZGUuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGZpbHRlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBkZXNjcmlwdGlvblxuICogRmlsdGVycyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyBkYXRhIGRpc3BsYXllZCB0byB0aGUgdXNlci5cbiAqXG4gKiBUaGUgZ2VuZXJhbCBzeW50YXggaW4gdGVtcGxhdGVzIGlzIGFzIGZvbGxvd3M6XG4gKlxuICogICAgICAgICB7eyBleHByZXNzaW9uIFt8IGZpbHRlcl9uYW1lWzpwYXJhbWV0ZXJfdmFsdWVdIC4uLiBdIH19XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGZpbHRlciBmdW5jdGlvblxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCIkZmlsdGVyXCIgbW9kdWxlPVwiZmlsdGVyRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIk1haW5DdHJsXCI+XG4gICAgICAgIDxoMz57eyBvcmlnaW5hbFRleHQgfX08L2gzPlxuICAgICAgICA8aDM+e3sgZmlsdGVyZWRUZXh0IH19PC9oMz5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdmaWx0ZXJFeGFtcGxlJywgW10pXG4gICAgICAuY29udHJvbGxlcignTWFpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRmaWx0ZXIpIHtcbiAgICAgICAgJHNjb3BlLm9yaWdpbmFsVGV4dCA9ICdoZWxsbyc7XG4gICAgICAgICRzY29wZS5maWx0ZXJlZFRleHQgPSAkZmlsdGVyKCd1cHBlcmNhc2UnKSgkc2NvcGUub3JpZ2luYWxUZXh0KTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICovXG4kRmlsdGVyUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnXTtcbmZ1bmN0aW9uICRGaWx0ZXJQcm92aWRlcigkcHJvdmlkZSkge1xuICB2YXIgc3VmZml4ID0gJ0ZpbHRlcic7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24sIG9yIGFuIG9iamVjdCBtYXAgb2YgZmlsdGVycyB3aGVyZVxuICAgKiAgICB0aGUga2V5cyBhcmUgdGhlIGZpbHRlciBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZpbHRlciBmYWN0b3JpZXMuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlLCBvciBpZiBhIG1hcCBvZiBmaWx0ZXJzIHdhcyBwcm92aWRlZCB0aGVuIGEgbWFwXG4gICAqICAgIG9mIHRoZSByZWdpc3RlcmVkIGZpbHRlciBpbnN0YW5jZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZWdpc3RlcihuYW1lLCBmYWN0b3J5KSB7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICB2YXIgZmlsdGVycyA9IHt9O1xuICAgICAgZm9yRWFjaChuYW1lLCBmdW5jdGlvbihmaWx0ZXIsIGtleSkge1xuICAgICAgICBmaWx0ZXJzW2tleV0gPSByZWdpc3RlcihrZXksIGZpbHRlcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgc3VmZml4LCBmYWN0b3J5KTtcbiAgICB9XG4gIH1cbiAgdGhpcy5yZWdpc3RlciA9IHJlZ2lzdGVyO1xuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBzdWZmaXgpO1xuICAgIH07XG4gIH1dO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKiBnbG9iYWxcbiAgICBjdXJyZW5jeUZpbHRlcjogZmFsc2UsXG4gICAgZGF0ZUZpbHRlcjogZmFsc2UsXG4gICAgZmlsdGVyRmlsdGVyOiBmYWxzZSxcbiAgICBqc29uRmlsdGVyOiBmYWxzZSxcbiAgICBsaW1pdFRvRmlsdGVyOiBmYWxzZSxcbiAgICBsb3dlcmNhc2VGaWx0ZXI6IGZhbHNlLFxuICAgIG51bWJlckZpbHRlcjogZmFsc2UsXG4gICAgb3JkZXJCeUZpbHRlcjogZmFsc2UsXG4gICAgdXBwZXJjYXNlRmlsdGVyOiBmYWxzZSxcbiAgKi9cblxuICByZWdpc3RlcignY3VycmVuY3knLCBjdXJyZW5jeUZpbHRlcik7XG4gIHJlZ2lzdGVyKCdkYXRlJywgZGF0ZUZpbHRlcik7XG4gIHJlZ2lzdGVyKCdmaWx0ZXInLCBmaWx0ZXJGaWx0ZXIpO1xuICByZWdpc3RlcignanNvbicsIGpzb25GaWx0ZXIpO1xuICByZWdpc3RlcignbGltaXRUbycsIGxpbWl0VG9GaWx0ZXIpO1xuICByZWdpc3RlcignbG93ZXJjYXNlJywgbG93ZXJjYXNlRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ251bWJlcicsIG51bWJlckZpbHRlcik7XG4gIHJlZ2lzdGVyKCdvcmRlckJ5Jywgb3JkZXJCeUZpbHRlcik7XG4gIHJlZ2lzdGVyKCd1cHBlcmNhc2UnLCB1cHBlcmNhc2VGaWx0ZXIpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGZpbHRlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlbGVjdHMgYSBzdWJzZXQgb2YgaXRlbXMgZnJvbSBgYXJyYXlgIGFuZCByZXR1cm5zIGl0IGFzIGEgbmV3IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3VyY2UgYXJyYXkuXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R8ZnVuY3Rpb24oKX0gZXhwcmVzc2lvbiBUaGUgcHJlZGljYXRlIHRvIGJlIHVzZWQgZm9yIHNlbGVjdGluZyBpdGVtcyBmcm9tXG4gKiAgIGBhcnJheWAuXG4gKlxuICogICBDYW4gYmUgb25lIG9mOlxuICpcbiAqICAgLSBgc3RyaW5nYDogVGhlIHN0cmluZyBpcyBldmFsdWF0ZWQgYXMgYW4gZXhwcmVzc2lvbiBhbmQgdGhlIHJlc3VsdGluZyB2YWx1ZSBpcyB1c2VkIGZvciBzdWJzdHJpbmcgbWF0Y2ggYWdhaW5zdFxuICogICAgIHRoZSBjb250ZW50cyBvZiB0aGUgYGFycmF5YC4gQWxsIHN0cmluZ3Mgb3Igb2JqZWN0cyB3aXRoIHN0cmluZyBwcm9wZXJ0aWVzIGluIGBhcnJheWAgdGhhdCBjb250YWluIHRoaXMgc3RyaW5nXG4gKiAgICAgd2lsbCBiZSByZXR1cm5lZC4gVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC5cbiAqXG4gKiAgIC0gYE9iamVjdGA6IEEgcGF0dGVybiBvYmplY3QgY2FuIGJlIHVzZWQgdG8gZmlsdGVyIHNwZWNpZmljIHByb3BlcnRpZXMgb24gb2JqZWN0cyBjb250YWluZWRcbiAqICAgICBieSBgYXJyYXlgLiBGb3IgZXhhbXBsZSBge25hbWU6XCJNXCIsIHBob25lOlwiMVwifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zXG4gKiAgICAgd2hpY2ggaGF2ZSBwcm9wZXJ0eSBgbmFtZWAgY29udGFpbmluZyBcIk1cIiBhbmQgcHJvcGVydHkgYHBob25lYCBjb250YWluaW5nIFwiMVwiLiBBIHNwZWNpYWxcbiAqICAgICBwcm9wZXJ0eSBuYW1lIGAkYCBjYW4gYmUgdXNlZCAoYXMgaW4gYHskOlwidGV4dFwifWApIHRvIGFjY2VwdCBhIG1hdGNoIGFnYWluc3QgYW55XG4gKiAgICAgcHJvcGVydHkgb2YgdGhlIG9iamVjdC4gVGhhdCdzIGVxdWl2YWxlbnQgdG8gdGhlIHNpbXBsZSBzdWJzdHJpbmcgbWF0Y2ggd2l0aCBhIGBzdHJpbmdgXG4gKiAgICAgYXMgZGVzY3JpYmVkIGFib3ZlLiBUaGUgcHJlZGljYXRlIGNhbiBiZSBuZWdhdGVkIGJ5IHByZWZpeGluZyB0aGUgc3RyaW5nIHdpdGggYCFgLlxuICogICAgIEZvciBFeGFtcGxlIGB7bmFtZTogXCIhTVwifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zIHdoaWNoIGhhdmUgcHJvcGVydHkgYG5hbWVgXG4gKiAgICAgbm90IGNvbnRhaW5pbmcgXCJNXCIuXG4gKlxuICogICAtIGBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpYDogQSBwcmVkaWNhdGUgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gd3JpdGUgYXJiaXRyYXJ5IGZpbHRlcnMuIFRoZVxuICogICAgIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAuIFRoZSBmaW5hbCByZXN1bHQgaXMgYW4gYXJyYXkgb2YgdGhvc2VcbiAqICAgICBlbGVtZW50cyB0aGF0IHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKXx0cnVlfHVuZGVmaW5lZH0gY29tcGFyYXRvciBDb21wYXJhdG9yIHdoaWNoIGlzIHVzZWQgaW5cbiAqICAgICBkZXRlcm1pbmluZyBpZiB0aGUgZXhwZWN0ZWQgdmFsdWUgKGZyb20gdGhlIGZpbHRlciBleHByZXNzaW9uKSBhbmQgYWN0dWFsIHZhbHVlIChmcm9tXG4gKiAgICAgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXkpIHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbWF0Y2guXG4gKlxuICogICBDYW4gYmUgb25lIG9mOlxuICpcbiAqICAgLSBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZClgOlxuICogICAgIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGdpdmVuIHRoZSBvYmplY3QgdmFsdWUgYW5kIHRoZSBwcmVkaWNhdGUgdmFsdWUgdG8gY29tcGFyZSBhbmRcbiAqICAgICBzaG91bGQgcmV0dXJuIHRydWUgaWYgdGhlIGl0ZW0gc2hvdWxkIGJlIGluY2x1ZGVkIGluIGZpbHRlcmVkIHJlc3VsdC5cbiAqXG4gKiAgIC0gYHRydWVgOiBBIHNob3J0aGFuZCBmb3IgYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHsgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKGV4cGVjdGVkLCBhY3R1YWwpfWAuXG4gKiAgICAgdGhpcyBpcyBlc3NlbnRpYWxseSBzdHJpY3QgY29tcGFyaXNvbiBvZiBleHBlY3RlZCBhbmQgYWN0dWFsLlxuICpcbiAqICAgLSBgZmFsc2V8dW5kZWZpbmVkYDogQSBzaG9ydCBoYW5kIGZvciBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgbG9vayBmb3IgYSBzdWJzdHJpbmcgbWF0Y2ggaW4gY2FzZVxuICogICAgIGluc2Vuc2l0aXZlIHdheS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1pbml0PVwiZnJpZW5kcyA9IFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTI3Nid9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic4MDAtQklHLU1BUlknfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J01pa2UnLCBwaG9uZTonNTU1LTQzMjEnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGllJywgcGhvbmU6JzU1NS04NzY1J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZXR0ZScsIHBob25lOic1NTUtNTY3OCd9XVwiPjwvZGl2PlxuXG4gICAgICAgU2VhcmNoOiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2hUZXh0XCI+XG4gICAgICAgPHRhYmxlIGlkPVwic2VhcmNoVGV4dFJlc3VsdHNcIj5cbiAgICAgICAgIDx0cj48dGg+TmFtZTwvdGg+PHRoPlBob25lPC90aD48L3RyPlxuICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgZmlsdGVyOnNlYXJjaFRleHRcIj5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgPC90YWJsZT5cbiAgICAgICA8aHI+XG4gICAgICAgQW55OiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2guJFwiPiA8YnI+XG4gICAgICAgTmFtZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC5uYW1lXCI+PGJyPlxuICAgICAgIFBob25lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLnBob25lXCI+PGJyPlxuICAgICAgIEVxdWFsaXR5IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInN0cmljdFwiPjxicj5cbiAgICAgICA8dGFibGUgaWQ9XCJzZWFyY2hPYmpSZXN1bHRzXCI+XG4gICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj5cbiAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmRPYmogaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2g6c3RyaWN0XCI+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZE9iai5uYW1lfX08L3RkPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmRPYmoucGhvbmV9fTwvdGQ+XG4gICAgICAgICA8L3RyPlxuICAgICAgIDwvdGFibGU+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBleHBlY3RGcmllbmROYW1lcyA9IGZ1bmN0aW9uKGV4cGVjdGVkTmFtZXMsIGtleSkge1xuICAgICAgICAgZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoa2V5ICsgJyBpbiBmcmllbmRzJykuY29sdW1uKGtleSArICcubmFtZScpKS50aGVuKGZ1bmN0aW9uKGFycikge1xuICAgICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbih3ZCwgaSkge1xuICAgICAgICAgICAgIGV4cGVjdCh3ZC5nZXRUZXh0KCkpLnRvTWF0Y2goZXhwZWN0ZWROYW1lc1tpXSk7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgfSk7XG4gICAgICAgfTtcblxuICAgICAgIGl0KCdzaG91bGQgc2VhcmNoIGFjcm9zcyBhbGwgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBzdHJpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzZWFyY2hUZXh0ID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoVGV4dCcpKTtcbiAgICAgICAgIHNlYXJjaFRleHQuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaFRleHQuc2VuZEtleXMoJ20nKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnTWFyeScsICdNaWtlJywgJ0FkYW0nXSwgJ2ZyaWVuZCcpO1xuXG4gICAgICAgICBzZWFyY2hUZXh0LmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCc3NicpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydKb2huJywgJ0p1bGllJ10sICdmcmllbmQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgc2VhcmNoIGluIHNwZWNpZmljIGZpZWxkcyB3aGVuIGZpbHRlcmluZyB3aXRoIGEgcHJlZGljYXRlIG9iamVjdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaEFueSA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaC4kJykpO1xuICAgICAgICAgc2VhcmNoQW55LmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hBbnkuc2VuZEtleXMoJ2knKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnTWFyeScsICdNaWtlJywgJ0p1bGllJywgJ0p1bGlldHRlJ10sICdmcmllbmRPYmonKTtcbiAgICAgICB9KTtcbiAgICAgICBpdCgnc2hvdWxkIHVzZSBhIGVxdWFsIGNvbXBhcmlzb24gd2hlbiBjb21wYXJhdG9yIGlzIHRydWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzZWFyY2hOYW1lID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoLm5hbWUnKSk7XG4gICAgICAgICB2YXIgc3RyaWN0ID0gZWxlbWVudChieS5tb2RlbCgnc3RyaWN0JykpO1xuICAgICAgICAgc2VhcmNoTmFtZS5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoTmFtZS5zZW5kS2V5cygnSnVsaWUnKTtcbiAgICAgICAgIHN0cmljdC5jbGljaygpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydKdWxpZSddLCAnZnJpZW5kT2JqJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gZmlsdGVyRmlsdGVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGV4cHJlc3Npb24sIGNvbXBhcmF0b3IpIHtcbiAgICBpZiAoIWlzQXJyYXkoYXJyYXkpKSByZXR1cm4gYXJyYXk7XG5cbiAgICB2YXIgY29tcGFyYXRvclR5cGUgPSB0eXBlb2YoY29tcGFyYXRvciksXG4gICAgICAgIHByZWRpY2F0ZXMgPSBbXTtcblxuICAgIHByZWRpY2F0ZXMuY2hlY2sgPSBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcHJlZGljYXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIXByZWRpY2F0ZXNbal0odmFsdWUsIGluZGV4KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIGlmIChjb21wYXJhdG9yVHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGNvbXBhcmF0b3JUeXBlID09PSAnYm9vbGVhbicgJiYgY29tcGFyYXRvcikge1xuICAgICAgICBjb21wYXJhdG9yID0gZnVuY3Rpb24ob2JqLCB0ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKG9iaiwgdGV4dCk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wYXJhdG9yID0gZnVuY3Rpb24ob2JqLCB0ZXh0KSB7XG4gICAgICAgICAgaWYgKG9iaiAmJiB0ZXh0ICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHR5cGVvZiB0ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZm9yICh2YXIgb2JqS2V5IGluIG9iaikge1xuICAgICAgICAgICAgICBpZiAob2JqS2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBvYmpLZXkpICYmXG4gICAgICAgICAgICAgICAgICBjb21wYXJhdG9yKG9ialtvYmpLZXldLCB0ZXh0W29iaktleV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGV4dCA9ICgnJyt0ZXh0KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHJldHVybiAoJycrb2JqKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGV4dCkgPiAtMTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2VhcmNoID0gZnVuY3Rpb24ob2JqLCB0ZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIHRleHQgPT09ICdzdHJpbmcnICYmIHRleHQuY2hhckF0KDApID09PSAnIScpIHtcbiAgICAgICAgcmV0dXJuICFzZWFyY2gob2JqLCB0ZXh0LnN1YnN0cigxKSk7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHR5cGVvZiBvYmopIHtcbiAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3Iob2JqLCB0ZXh0KTtcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZXh0KSB7XG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICByZXR1cm4gY29tcGFyYXRvcihvYmosIHRleHQpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgZm9yICh2YXIgb2JqS2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChvYmpLZXkuY2hhckF0KDApICE9PSAnJCcgJiYgc2VhcmNoKG9ialtvYmpLZXldLCB0ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNlYXJjaChvYmpbaV0sIHRleHQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgc3dpdGNoICh0eXBlb2YgZXhwcmVzc2lvbikge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgLy8gU2V0IHVwIGV4cHJlc3Npb24gb2JqZWN0IGFuZCBmYWxsIHRocm91Z2hcbiAgICAgICAgZXhwcmVzc2lvbiA9IHskOmV4cHJlc3Npb259O1xuICAgICAgICAvLyBqc2hpbnQgLVcwODZcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIC8vIGpzaGludCArVzA4NlxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZXhwcmVzc2lvbikge1xuICAgICAgICAgIChmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4cHJlc3Npb25bcGF0aF0gPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgICAgICAgICBwcmVkaWNhdGVzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlYXJjaChwYXRoID09ICckJyA/IHZhbHVlIDogKHZhbHVlICYmIHZhbHVlW3BhdGhdKSwgZXhwcmVzc2lvbltwYXRoXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBwcmVkaWNhdGVzLnB1c2goZXhwcmVzc2lvbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiAgICB2YXIgZmlsdGVyZWQgPSBbXTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFycmF5Lmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtqXTtcbiAgICAgIGlmIChwcmVkaWNhdGVzLmNoZWNrKHZhbHVlLCBqKSkge1xuICAgICAgICBmaWx0ZXJlZC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcmVkO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGN1cnJlbmN5XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdFxuICogc3ltYm9sIGZvciBjdXJyZW50IGxvY2FsZSBpcyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtzdHJpbmc9fSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLlxuICogQHBhcmFtIHtudW1iZXI9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBhbW91bnQgdG8uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgbnVtYmVyLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY3VycmVuY3lFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXJyZW5jeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuYW1vdW50ID0gMTIzNC41NjtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwiYW1vdW50XCI+IDxicj5cbiAgICAgICAgIGRlZmF1bHQgY3VycmVuY3kgc3ltYm9sICgkKTogPHNwYW4gaWQ9XCJjdXJyZW5jeS1kZWZhdWx0XCI+e3thbW91bnQgfCBjdXJyZW5jeX19PC9zcGFuPjxicj5cbiAgICAgICAgIGN1c3RvbSBjdXJyZW5jeSBpZGVudGlmaWVyIChVU0QkKTogPHNwYW4gaWQ9XCJjdXJyZW5jeS1jdXN0b21cIj57e2Ftb3VudCB8IGN1cnJlbmN5OlwiVVNEJFwifX08L3NwYW4+XG4gICAgICAgICBubyBmcmFjdGlvbnMgKDApOiA8c3BhbiBpZD1cImN1cnJlbmN5LW5vLWZyYWN0aW9uc1wiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCI6MH19PC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGluaXQgd2l0aCAxMjM0LjU2JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJyQxLDIzNC41NicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJ1VTRCQxLDIzNC41NicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LW5vLWZyYWN0aW9ucycpKS5nZXRUZXh0KCkpLnRvQmUoJ1VTRCQxLDIzNScpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnc2FmYXJpJykge1xuICAgICAgICAgICAvLyBTYWZhcmkgZG9lcyBub3QgdW5kZXJzdGFuZCB0aGUgbWludXMga2V5LiBTZWVcbiAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNDgxXG4gICAgICAgICAgIHJldHVybjtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnYW1vdW50JykpLnNlbmRLZXlzKCctMTIzNCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCcoJDEsMjM0LjAwKScpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJyhVU0QkMSwyMzQuMDApJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktbm8tZnJhY3Rpb25zJykpLmdldFRleHQoKSkudG9CZSgnKFVTRCQxLDIzNCknKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5jdXJyZW5jeUZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107XG5mdW5jdGlvbiBjdXJyZW5jeUZpbHRlcigkbG9jYWxlKSB7XG4gIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUztcbiAgcmV0dXJuIGZ1bmN0aW9uKGFtb3VudCwgY3VycmVuY3lTeW1ib2wsIGZyYWN0aW9uU2l6ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZChjdXJyZW5jeVN5bWJvbCkpIHtcbiAgICAgIGN1cnJlbmN5U3ltYm9sID0gZm9ybWF0cy5DVVJSRU5DWV9TWU07XG4gICAgfVxuXG4gICAgaWYgKGlzVW5kZWZpbmVkKGZyYWN0aW9uU2l6ZSkpIHtcbiAgICAgIC8vIFRPRE86IHJlYWQgdGhlIGRlZmF1bHQgdmFsdWUgZnJvbSB0aGUgbG9jYWxlIGZpbGVcbiAgICAgIGZyYWN0aW9uU2l6ZSA9IDI7XG4gICAgfVxuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChhbW91bnQgPT0gbnVsbClcbiAgICAgICAgPyBhbW91bnRcbiAgICAgICAgOiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgZnJhY3Rpb25TaXplKS5cbiAgICAgICAgICAgIHJlcGxhY2UoL1xcdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG51bWJlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgdGV4dC5cbiAqXG4gKiBJZiB0aGUgaW5wdXQgaXMgbm90IGEgbnVtYmVyIGFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LlxuICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyk9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBudW1iZXIgdG8uXG4gKiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBmcmFjdGlvbiBzaXplIGlzIGNvbXB1dGVkIGZyb20gdGhlIGN1cnJlbnQgbG9jYWxlJ3MgbnVtYmVyXG4gKiBmb3JtYXR0aW5nIHBhdHRlcm4uIEluIHRoZSBjYXNlIG9mIHRoZSBkZWZhdWx0IGxvY2FsZSwgaXQgd2lsbCBiZSAzLlxuICogQHJldHVybnMge3N0cmluZ30gTnVtYmVyIHJvdW5kZWQgdG8gZGVjaW1hbFBsYWNlcyBhbmQgcGxhY2VzIGEg4oCcLOKAnSBhZnRlciBlYWNoIHRoaXJkIGRpZ2l0LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJudW1iZXJGaWx0ZXJFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdudW1iZXJGaWx0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnZhbCA9IDEyMzQuNTY3ODk7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgRW50ZXIgbnVtYmVyOiA8aW5wdXQgbmctbW9kZWw9J3ZhbCc+PGJyPlxuICAgICAgICAgRGVmYXVsdCBmb3JtYXR0aW5nOiA8c3BhbiBpZD0nbnVtYmVyLWRlZmF1bHQnPnt7dmFsIHwgbnVtYmVyfX08L3NwYW4+PGJyPlxuICAgICAgICAgTm8gZnJhY3Rpb25zOiA8c3Bhbj57e3ZhbCB8IG51bWJlcjowfX08L3NwYW4+PGJyPlxuICAgICAgICAgTmVnYXRpdmUgbnVtYmVyOiA8c3Bhbj57ey12YWwgfCBudW1iZXI6NH19PC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBudW1iZXJzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbnVtYmVyLWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCcxLDIzNC41NjgnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbCB8IG51bWJlcjowJykpLmdldFRleHQoKSkudG9CZSgnMSwyMzUnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJy12YWwgfCBudW1iZXI6NCcpKS5nZXRUZXh0KCkpLnRvQmUoJy0xLDIzNC41Njc5Jyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsJykpLmNsZWFyKCk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWwnKSkuc2VuZEtleXMoJzMzNzQuMzMzJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbnVtYmVyLWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCczLDM3NC4zMzMnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbCB8IG51bWJlcjowJykpLmdldFRleHQoKSkudG9CZSgnMywzNzQnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJy12YWwgfCBudW1iZXI6NCcpKS5nZXRUZXh0KCkpLnRvQmUoJy0zLDM3NC4zMzMwJyk7XG4gICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxubnVtYmVyRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIG51bWJlckZpbHRlcigkbG9jYWxlKSB7XG4gIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUztcbiAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgZnJhY3Rpb25TaXplKSB7XG5cbiAgICAvLyBpZiBudWxsIG9yIHVuZGVmaW5lZCBwYXNzIGl0IHRocm91Z2hcbiAgICByZXR1cm4gKG51bWJlciA9PSBudWxsKVxuICAgICAgICA/IG51bWJlclxuICAgICAgICA6IGZvcm1hdE51bWJlcihudW1iZXIsIGZvcm1hdHMuUEFUVEVSTlNbMF0sIGZvcm1hdHMuR1JPVVBfU0VQLCBmb3JtYXRzLkRFQ0lNQUxfU0VQLFxuICAgICAgICAgICAgICAgICAgICAgICBmcmFjdGlvblNpemUpO1xuICB9O1xufVxuXG52YXIgREVDSU1BTF9TRVAgPSAnLic7XG5mdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBwYXR0ZXJuLCBncm91cFNlcCwgZGVjaW1hbFNlcCwgZnJhY3Rpb25TaXplKSB7XG4gIGlmICghaXNGaW5pdGUobnVtYmVyKSB8fCBpc09iamVjdChudW1iZXIpKSByZXR1cm4gJyc7XG5cbiAgdmFyIGlzTmVnYXRpdmUgPSBudW1iZXIgPCAwO1xuICBudW1iZXIgPSBNYXRoLmFicyhudW1iZXIpO1xuICB2YXIgbnVtU3RyID0gbnVtYmVyICsgJycsXG4gICAgICBmb3JtYXRlZFRleHQgPSAnJyxcbiAgICAgIHBhcnRzID0gW107XG5cbiAgdmFyIGhhc0V4cG9uZW50ID0gZmFsc2U7XG4gIGlmIChudW1TdHIuaW5kZXhPZignZScpICE9PSAtMSkge1xuICAgIHZhciBtYXRjaCA9IG51bVN0ci5tYXRjaCgvKFtcXGRcXC5dKyllKC0/KShcXGQrKS8pO1xuICAgIGlmIChtYXRjaCAmJiBtYXRjaFsyXSA9PSAnLScgJiYgbWF0Y2hbM10gPiBmcmFjdGlvblNpemUgKyAxKSB7XG4gICAgICBudW1TdHIgPSAnMCc7XG4gICAgICBudW1iZXIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtYXRlZFRleHQgPSBudW1TdHI7XG4gICAgICBoYXNFeHBvbmVudCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFoYXNFeHBvbmVudCkge1xuICAgIHZhciBmcmFjdGlvbkxlbiA9IChudW1TdHIuc3BsaXQoREVDSU1BTF9TRVApWzFdIHx8ICcnKS5sZW5ndGg7XG5cbiAgICAvLyBkZXRlcm1pbmUgZnJhY3Rpb25TaXplIGlmIGl0IGlzIG5vdCBzcGVjaWZpZWRcbiAgICBpZiAoaXNVbmRlZmluZWQoZnJhY3Rpb25TaXplKSkge1xuICAgICAgZnJhY3Rpb25TaXplID0gTWF0aC5taW4oTWF0aC5tYXgocGF0dGVybi5taW5GcmFjLCBmcmFjdGlvbkxlbiksIHBhdHRlcm4ubWF4RnJhYyk7XG4gICAgfVxuXG4gICAgLy8gc2FmZWx5IHJvdW5kIG51bWJlcnMgaW4gSlMgd2l0aG91dCBoaXR0aW5nIGltcHJlY2lzaW9ucyBvZiBmbG9hdGluZy1wb2ludCBhcml0aG1ldGljc1xuICAgIC8vIGluc3BpcmVkIGJ5OlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvcm91bmRcbiAgICBudW1iZXIgPSArKE1hdGgucm91bmQoKyhudW1iZXIudG9TdHJpbmcoKSArICdlJyArIGZyYWN0aW9uU2l6ZSkpLnRvU3RyaW5nKCkgKyAnZScgKyAtZnJhY3Rpb25TaXplKTtcblxuICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgIGlzTmVnYXRpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZnJhY3Rpb24gPSAoJycgKyBudW1iZXIpLnNwbGl0KERFQ0lNQUxfU0VQKTtcbiAgICB2YXIgd2hvbGUgPSBmcmFjdGlvblswXTtcbiAgICBmcmFjdGlvbiA9IGZyYWN0aW9uWzFdIHx8ICcnO1xuXG4gICAgdmFyIGksIHBvcyA9IDAsXG4gICAgICAgIGxncm91cCA9IHBhdHRlcm4ubGdTaXplLFxuICAgICAgICBncm91cCA9IHBhdHRlcm4uZ1NpemU7XG5cbiAgICBpZiAod2hvbGUubGVuZ3RoID49IChsZ3JvdXAgKyBncm91cCkpIHtcbiAgICAgIHBvcyA9IHdob2xlLmxlbmd0aCAtIGxncm91cDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBwb3M7IGkrKykge1xuICAgICAgICBpZiAoKHBvcyAtIGkpJWdyb3VwID09PSAwICYmIGkgIT09IDApIHtcbiAgICAgICAgICBmb3JtYXRlZFRleHQgKz0gZ3JvdXBTZXA7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IHdob2xlLmNoYXJBdChpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSBwb3M7IGkgPCB3aG9sZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCh3aG9sZS5sZW5ndGggLSBpKSVsZ3JvdXAgPT09IDAgJiYgaSAhPT0gMCkge1xuICAgICAgICBmb3JtYXRlZFRleHQgKz0gZ3JvdXBTZXA7XG4gICAgICB9XG4gICAgICBmb3JtYXRlZFRleHQgKz0gd2hvbGUuY2hhckF0KGkpO1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBmcmFjdGlvbiBwYXJ0LlxuICAgIHdoaWxlIChmcmFjdGlvbi5sZW5ndGggPCBmcmFjdGlvblNpemUpIHtcbiAgICAgIGZyYWN0aW9uICs9ICcwJztcbiAgICB9XG5cbiAgICBpZiAoZnJhY3Rpb25TaXplICYmIGZyYWN0aW9uU2l6ZSAhPT0gXCIwXCIpIGZvcm1hdGVkVGV4dCArPSBkZWNpbWFsU2VwICsgZnJhY3Rpb24uc3Vic3RyKDAsIGZyYWN0aW9uU2l6ZSk7XG4gIH0gZWxzZSB7XG5cbiAgICBpZiAoZnJhY3Rpb25TaXplID4gMCAmJiBudW1iZXIgPiAtMSAmJiBudW1iZXIgPCAxKSB7XG4gICAgICBmb3JtYXRlZFRleHQgPSBudW1iZXIudG9GaXhlZChmcmFjdGlvblNpemUpO1xuICAgIH1cbiAgfVxuXG4gIHBhcnRzLnB1c2goaXNOZWdhdGl2ZSA/IHBhdHRlcm4ubmVnUHJlIDogcGF0dGVybi5wb3NQcmUpO1xuICBwYXJ0cy5wdXNoKGZvcm1hdGVkVGV4dCk7XG4gIHBhcnRzLnB1c2goaXNOZWdhdGl2ZSA/IHBhdHRlcm4ubmVnU3VmIDogcGF0dGVybi5wb3NTdWYpO1xuICByZXR1cm4gcGFydHMuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIHBhZE51bWJlcihudW0sIGRpZ2l0cywgdHJpbSkge1xuICB2YXIgbmVnID0gJyc7XG4gIGlmIChudW0gPCAwKSB7XG4gICAgbmVnID0gICctJztcbiAgICBudW0gPSAtbnVtO1xuICB9XG4gIG51bSA9ICcnICsgbnVtO1xuICB3aGlsZSAobnVtLmxlbmd0aCA8IGRpZ2l0cykgbnVtID0gJzAnICsgbnVtO1xuICBpZiAodHJpbSlcbiAgICBudW0gPSBudW0uc3Vic3RyKG51bS5sZW5ndGggLSBkaWdpdHMpO1xuICByZXR1cm4gbmVnICsgbnVtO1xufVxuXG5cbmZ1bmN0aW9uIGRhdGVHZXR0ZXIobmFtZSwgc2l6ZSwgb2Zmc2V0LCB0cmltKSB7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB2YWx1ZSA9IGRhdGVbJ2dldCcgKyBuYW1lXSgpO1xuICAgIGlmIChvZmZzZXQgPiAwIHx8IHZhbHVlID4gLW9mZnNldClcbiAgICAgIHZhbHVlICs9IG9mZnNldDtcbiAgICBpZiAodmFsdWUgPT09IDAgJiYgb2Zmc2V0ID09IC0xMikgdmFsdWUgPSAxMjtcbiAgICByZXR1cm4gcGFkTnVtYmVyKHZhbHVlLCBzaXplLCB0cmltKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGF0ZVN0ckdldHRlcihuYW1lLCBzaG9ydEZvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdHMpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICB2YXIgZ2V0ID0gdXBwZXJjYXNlKHNob3J0Rm9ybSA/ICgnU0hPUlQnICsgbmFtZSkgOiBuYW1lKTtcblxuICAgIHJldHVybiBmb3JtYXRzW2dldF1bdmFsdWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0aW1lWm9uZUdldHRlcihkYXRlKSB7XG4gIHZhciB6b25lID0gLTEgKiBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIHZhciBwYWRkZWRab25lID0gKHpvbmUgPj0gMCkgPyBcIitcIiA6IFwiXCI7XG5cbiAgcGFkZGVkWm9uZSArPSBwYWROdW1iZXIoTWF0aFt6b25lID4gMCA/ICdmbG9vcicgOiAnY2VpbCddKHpvbmUgLyA2MCksIDIpICtcbiAgICAgICAgICAgICAgICBwYWROdW1iZXIoTWF0aC5hYnMoem9uZSAlIDYwKSwgMik7XG5cbiAgcmV0dXJuIHBhZGRlZFpvbmU7XG59XG5cbmZ1bmN0aW9uIGdldEZpcnN0VGh1cnNkYXlPZlllYXIoeWVhcikge1xuICAgIC8vIDAgPSBpbmRleCBvZiBKYW51YXJ5XG4gICAgdmFyIGRheU9mV2Vla09uRmlyc3QgPSAobmV3IERhdGUoeWVhciwgMCwgMSkpLmdldERheSgpO1xuICAgIC8vIDQgPSBpbmRleCBvZiBUaHVyc2RheSAoKzEgdG8gYWNjb3VudCBmb3IgMXN0ID0gNSlcbiAgICAvLyAxMSA9IGluZGV4IG9mICpuZXh0KiBUaHVyc2RheSAoKzEgYWNjb3VudCBmb3IgMXN0ID0gMTIpXG4gICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDAsICgoZGF5T2ZXZWVrT25GaXJzdCA8PSA0KSA/IDUgOiAxMikgLSBkYXlPZldlZWtPbkZpcnN0KTtcbn1cblxuZnVuY3Rpb24gZ2V0VGh1cnNkYXlUaGlzV2VlayhkYXRldGltZSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRldGltZS5nZXRGdWxsWWVhcigpLCBkYXRldGltZS5nZXRNb250aCgpLFxuICAgICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5XG4gICAgICBkYXRldGltZS5nZXREYXRlKCkgKyAoNCAtIGRhdGV0aW1lLmdldERheSgpKSk7XG59XG5cbmZ1bmN0aW9uIHdlZWtHZXR0ZXIoc2l6ZSkge1xuICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpLFxuICAgICAgICAgdGhpc1RodXJzID0gZ2V0VGh1cnNkYXlUaGlzV2VlayhkYXRlKTtcblxuICAgICAgdmFyIGRpZmYgPSArdGhpc1RodXJzIC0gK2ZpcnN0VGh1cnMsXG4gICAgICAgICByZXN1bHQgPSAxICsgTWF0aC5yb3VuZChkaWZmIC8gNi4wNDhlOCk7IC8vIDYuMDQ4ZTggbXMgcGVyIHdlZWtcblxuICAgICAgcmV0dXJuIHBhZE51bWJlcihyZXN1bHQsIHNpemUpO1xuICAgfTtcbn1cblxuZnVuY3Rpb24gYW1wbUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCkgPCAxMiA/IGZvcm1hdHMuQU1QTVNbMF0gOiBmb3JtYXRzLkFNUE1TWzFdO1xufVxuXG52YXIgREFURV9GT1JNQVRTID0ge1xuICB5eXl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDQpLFxuICAgIHl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDIsIDAsIHRydWUpLFxuICAgICB5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDEpLFxuICBNTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcpLFxuICAgTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcsIHRydWUpLFxuICAgIE1NOiBkYXRlR2V0dGVyKCdNb250aCcsIDIsIDEpLFxuICAgICBNOiBkYXRlR2V0dGVyKCdNb250aCcsIDEsIDEpLFxuICAgIGRkOiBkYXRlR2V0dGVyKCdEYXRlJywgMiksXG4gICAgIGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAxKSxcbiAgICBISDogZGF0ZUdldHRlcignSG91cnMnLCAyKSxcbiAgICAgSDogZGF0ZUdldHRlcignSG91cnMnLCAxKSxcbiAgICBoaDogZGF0ZUdldHRlcignSG91cnMnLCAyLCAtMTIpLFxuICAgICBoOiBkYXRlR2V0dGVyKCdIb3VycycsIDEsIC0xMiksXG4gICAgbW06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAyKSxcbiAgICAgbTogZGF0ZUdldHRlcignTWludXRlcycsIDEpLFxuICAgIHNzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMiksXG4gICAgIHM6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAxKSxcbiAgICAgLy8gd2hpbGUgSVNPIDg2MDEgcmVxdWlyZXMgZnJhY3Rpb25zIHRvIGJlIHByZWZpeGVkIHdpdGggYC5gIG9yIGAsYFxuICAgICAvLyB3ZSBjYW4gYmUganVzdCBzYWZlbHkgcmVseSBvbiB1c2luZyBgc3NzYCBzaW5jZSB3ZSBjdXJyZW50bHkgZG9uJ3Qgc3VwcG9ydCBzaW5nbGUgb3IgdHdvIGRpZ2l0IGZyYWN0aW9uc1xuICAgc3NzOiBkYXRlR2V0dGVyKCdNaWxsaXNlY29uZHMnLCAzKSxcbiAgRUVFRTogZGF0ZVN0ckdldHRlcignRGF5JyksXG4gICBFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScsIHRydWUpLFxuICAgICBhOiBhbXBtR2V0dGVyLFxuICAgICBaOiB0aW1lWm9uZUdldHRlcixcbiAgICB3dzogd2Vla0dldHRlcigyKSxcbiAgICAgdzogd2Vla0dldHRlcigxKVxufTtcblxudmFyIERBVEVfRk9STUFUU19TUExJVCA9IC8oKD86W155TWRIaG1zYVpFdyddKyl8KD86Jyg/OlteJ118JycpKicpfCg/OkUrfHkrfE0rfGQrfEgrfGgrfG0rfHMrfGF8Wnx3KykpKC4qKS8sXG4gICAgTlVNQkVSX1NUUklORyA9IC9eXFwtP1xcZCskLztcblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBkYXRlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogICBGb3JtYXRzIGBkYXRlYCB0byBhIHN0cmluZyBiYXNlZCBvbiB0aGUgcmVxdWVzdGVkIGBmb3JtYXRgLlxuICpcbiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBiZSBjb21wb3NlZCBvZiB0aGUgZm9sbG93aW5nIGVsZW1lbnRzOlxuICpcbiAqICAgKiBgJ3l5eXknYDogNCBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyIChlLmcuIEFEIDEgPT4gMDAwMSwgQUQgMjAxMCA9PiAyMDEwKVxuICogICAqIGAneXknYDogMiBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyLCBwYWRkZWQgKDAwLTk5KS4gKGUuZy4gQUQgMjAwMSA9PiAwMSwgQUQgMjAxMCA9PiAxMClcbiAqICAgKiBgJ3knYDogMSBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyLCBlLmcuIChBRCAxID0+IDEsIEFEIDE5OSA9PiAxOTkpXG4gKiAgICogYCdNTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbnVhcnktRGVjZW1iZXIpXG4gKiAgICogYCdNTU0nYDogTW9udGggaW4geWVhciAoSmFuLURlYylcbiAqICAgKiBgJ01NJ2A6IE1vbnRoIGluIHllYXIsIHBhZGRlZCAoMDEtMTIpXG4gKiAgICogYCdNJ2A6IE1vbnRoIGluIHllYXIgKDEtMTIpXG4gKiAgICogYCdkZCdgOiBEYXkgaW4gbW9udGgsIHBhZGRlZCAoMDEtMzEpXG4gKiAgICogYCdkJ2A6IERheSBpbiBtb250aCAoMS0zMSlcbiAqICAgKiBgJ0VFRUUnYDogRGF5IGluIFdlZWssKFN1bmRheS1TYXR1cmRheSlcbiAqICAgKiBgJ0VFRSdgOiBEYXkgaW4gV2VlaywgKFN1bi1TYXQpXG4gKiAgICogYCdISCdgOiBIb3VyIGluIGRheSwgcGFkZGVkICgwMC0yMylcbiAqICAgKiBgJ0gnYDogSG91ciBpbiBkYXkgKDAtMjMpXG4gKiAgICogYCdoaCdgOiBIb3VyIGluIEFNL1BNLCBwYWRkZWQgKDAxLTEyKVxuICogICAqIGAnaCdgOiBIb3VyIGluIEFNL1BNLCAoMS0xMilcbiAqICAgKiBgJ21tJ2A6IE1pbnV0ZSBpbiBob3VyLCBwYWRkZWQgKDAwLTU5KVxuICogICAqIGAnbSdgOiBNaW51dGUgaW4gaG91ciAoMC01OSlcbiAqICAgKiBgJ3NzJ2A6IFNlY29uZCBpbiBtaW51dGUsIHBhZGRlZCAoMDAtNTkpXG4gKiAgICogYCdzJ2A6IFNlY29uZCBpbiBtaW51dGUgKDAtNTkpXG4gKiAgICogYCcuc3NzJyBvciAnLHNzcydgOiBNaWxsaXNlY29uZCBpbiBzZWNvbmQsIHBhZGRlZCAoMDAwLTk5OSlcbiAqICAgKiBgJ2EnYDogQU0vUE0gbWFya2VyXG4gKiAgICogYCdaJ2A6IDQgZGlnaXQgKCtzaWduKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGltZXpvbmUgb2Zmc2V0ICgtMTIwMC0rMTIwMClcbiAqICAgKiBgJ3d3J2A6IElTTy04NjAxIHdlZWsgb2YgeWVhciAoMDAtNTMpXG4gKiAgICogYCd3J2A6IElTTy04NjAxIHdlZWsgb2YgeWVhciAoMC01MylcbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYWxzbyBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBwcmVkZWZpbmVkXG4gKiAgIHtAbGluayBndWlkZS9pMThuIGxvY2FsaXphYmxlIGZvcm1hdHN9OlxuICpcbiAqICAgKiBgJ21lZGl1bSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NIGQsIHkgaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZVxuICogICAgIChlLmcuIFNlcCAzLCAyMDEwIDEyOjA1OjA4IFBNKVxuICogICAqIGAnc2hvcnQnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSBoOm1tIGEnYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiA5LzMvMTAgMTI6MDUgUE0pXG4gKiAgICogYCdmdWxsRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnRUVFRSwgTU1NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGVcbiAqICAgICAoZS5nLiBGcmlkYXksIFNlcHRlbWJlciAzLCAyMDEwKVxuICogICAqIGAnbG9uZ0RhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcHRlbWJlciAzLCAyMDEwKVxuICogICAqIGAnbWVkaXVtRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXAgMywgMjAxMClcbiAqICAgKiBgJ3Nob3J0RGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTS9kL3l5J2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiA5LzMvMTApXG4gKiAgICogYCdtZWRpdW1UaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1OjA4IFBNKVxuICogICAqIGAnc2hvcnRUaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1IFBNKVxuICpcbiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBjb250YWluIGxpdGVyYWwgdmFsdWVzLiBUaGVzZSBuZWVkIHRvIGJlIGVzY2FwZWQgYnkgc3Vycm91bmRpbmcgd2l0aCBzaW5nbGUgcXVvdGVzIChlLmcuXG4gKiAgIGBcImggJ2luIHRoZSBtb3JuaW5nJ1wiYCkuIEluIG9yZGVyIHRvIG91dHB1dCBhIHNpbmdsZSBxdW90ZSwgZXNjYXBlIGl0IC0gaS5lLiwgdHdvIHNpbmdsZSBxdW90ZXMgaW4gYSBzZXF1ZW5jZVxuICogICAoZS5nLiBgXCJoICdvJydjbG9jaydcImApLlxuICpcbiAqIEBwYXJhbSB7KERhdGV8bnVtYmVyfHN0cmluZyl9IGRhdGUgRGF0ZSB0byBmb3JtYXQgZWl0aGVyIGFzIERhdGUgb2JqZWN0LCBtaWxsaXNlY29uZHMgKHN0cmluZyBvclxuICogICAgbnVtYmVyKSBvciB2YXJpb3VzIElTTyA4NjAxIGRhdGV0aW1lIHN0cmluZyBmb3JtYXRzIChlLmcuIHl5eXktTU0tZGRUSEg6bW06c3Muc3NzWiBhbmQgaXRzXG4gKiAgICBzaG9ydGVyIHZlcnNpb25zIGxpa2UgeXl5eS1NTS1kZFRISDptbVosIHl5eXktTU0tZGQgb3IgeXl5eU1NZGRUSEhtbXNzWikuIElmIG5vIHRpbWV6b25lIGlzXG4gKiAgICBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpbnB1dCwgdGhlIHRpbWUgaXMgY29uc2lkZXJlZCB0byBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKiBAcGFyYW0ge3N0cmluZz19IGZvcm1hdCBGb3JtYXR0aW5nIHJ1bGVzIChzZWUgRGVzY3JpcHRpb24pLiBJZiBub3Qgc3BlY2lmaWVkLFxuICogICAgYG1lZGl1bURhdGVgIGlzIHVzZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHRpbWV6b25lIFRpbWV6b25lIHRvIGJlIHVzZWQgZm9yIGZvcm1hdHRpbmcuIFJpZ2h0IG5vdywgb25seSBgJ1VUQydgIGlzIHN1cHBvcnRlZC5cbiAqICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3NlciB3aWxsIGJlIHVzZWQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgc3RyaW5nIG9yIHRoZSBpbnB1dCBpZiBpbnB1dCBpcyBub3QgcmVjb2duaXplZCBhcyBkYXRlL21pbGxpcy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSd9fTwvc3Bhbj46XG4gICAgICAgICAgIDxzcGFuPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSd9fTwvc3Bhbj48YnI+XG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTwvc3Bhbj46XG4gICAgICAgICAgPHNwYW4+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjpcbiAgICAgICAgICA8c3Bhbj57eycxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSd9fTwvc3Bhbj48YnI+XG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6XCJNTS9kZC95eXl5ICdhdCcgaDptbWFcIn19PC9zcGFuPjpcbiAgICAgICAgICA8c3Bhbj57eycxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XCJNTS9kZC95eXl5ICdhdCcgaDptbWFcIn19PC9zcGFuPjxicj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIjEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9NYXRjaCgvT2N0IDJcXGQsIDIwMTAgXFxkezEsMn06XFxkezJ9OlxcZHsyfSAoQU18UE0pLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWidcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8yMDEwXFwtMTBcXC0yXFxkIFxcZHsyfTpcXGR7Mn06XFxkezJ9IChcXC18XFwrKT9cXGR7NH0vKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCInMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9NYXRjaCgvMTBcXC8yXFxkXFwvMjAxMCBAIFxcZHsxLDJ9OlxcZHsyfShBTXxQTSkvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCInMTI4ODMyMzYyMzAwNicgfCBkYXRlOlxcXCJNTS9kZC95eXl5ICdhdCcgaDptbWFcXFwiXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9NYXRjaCgvMTBcXC8yXFxkXFwvMjAxMCBhdCBcXGR7MSwyfTpcXGR7Mn0oQU18UE0pLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZGF0ZUZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107XG5mdW5jdGlvbiBkYXRlRmlsdGVyKCRsb2NhbGUpIHtcblxuXG4gIHZhciBSX0lTTzg2MDFfU1RSID0gL14oXFxkezR9KS0/KFxcZFxcZCktPyhcXGRcXGQpKD86VChcXGRcXGQpKD86Oj8oXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzpcXC4oXFxkKykpPyk/KT8oWnwoWystXSkoXFxkXFxkKTo/KFxcZFxcZCkpPyk/JC87XG4gICAgICAgICAgICAgICAgICAgICAvLyAxICAgICAgICAyICAgICAgIDMgICAgICAgICA0ICAgICAgICAgIDUgICAgICAgICAgNiAgICAgICAgICA3ICAgICAgICAgIDggIDkgICAgIDEwICAgICAgMTFcbiAgZnVuY3Rpb24ganNvblN0cmluZ1RvRGF0ZShzdHJpbmcpIHtcbiAgICB2YXIgbWF0Y2g7XG4gICAgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKFJfSVNPODYwMV9TVFIpKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApLFxuICAgICAgICAgIHR6SG91ciA9IDAsXG4gICAgICAgICAgdHpNaW4gID0gMCxcbiAgICAgICAgICBkYXRlU2V0dGVyID0gbWF0Y2hbOF0gPyBkYXRlLnNldFVUQ0Z1bGxZZWFyIDogZGF0ZS5zZXRGdWxsWWVhcixcbiAgICAgICAgICB0aW1lU2V0dGVyID0gbWF0Y2hbOF0gPyBkYXRlLnNldFVUQ0hvdXJzIDogZGF0ZS5zZXRIb3VycztcblxuICAgICAgaWYgKG1hdGNoWzldKSB7XG4gICAgICAgIHR6SG91ciA9IGludChtYXRjaFs5XSArIG1hdGNoWzEwXSk7XG4gICAgICAgIHR6TWluID0gaW50KG1hdGNoWzldICsgbWF0Y2hbMTFdKTtcbiAgICAgIH1cbiAgICAgIGRhdGVTZXR0ZXIuY2FsbChkYXRlLCBpbnQobWF0Y2hbMV0pLCBpbnQobWF0Y2hbMl0pIC0gMSwgaW50KG1hdGNoWzNdKSk7XG4gICAgICB2YXIgaCA9IGludChtYXRjaFs0XXx8MCkgLSB0ekhvdXI7XG4gICAgICB2YXIgbSA9IGludChtYXRjaFs1XXx8MCkgLSB0ek1pbjtcbiAgICAgIHZhciBzID0gaW50KG1hdGNoWzZdfHwwKTtcbiAgICAgIHZhciBtcyA9IE1hdGgucm91bmQocGFyc2VGbG9hdCgnMC4nICsgKG1hdGNoWzddfHwwKSkgKiAxMDAwKTtcbiAgICAgIHRpbWVTZXR0ZXIuY2FsbChkYXRlLCBoLCBtLCBzLCBtcyk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuXG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCwgdGltZXpvbmUpIHtcbiAgICB2YXIgdGV4dCA9ICcnLFxuICAgICAgICBwYXJ0cyA9IFtdLFxuICAgICAgICBmbiwgbWF0Y2g7XG5cbiAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJ21lZGl1bURhdGUnO1xuICAgIGZvcm1hdCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUU1tmb3JtYXRdIHx8IGZvcm1hdDtcbiAgICBpZiAoaXNTdHJpbmcoZGF0ZSkpIHtcbiAgICAgIGRhdGUgPSBOVU1CRVJfU1RSSU5HLnRlc3QoZGF0ZSkgPyBpbnQoZGF0ZSkgOiBqc29uU3RyaW5nVG9EYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihkYXRlKSkge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmICghaXNEYXRlKGRhdGUpKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICB3aGlsZSAoZm9ybWF0KSB7XG4gICAgICBtYXRjaCA9IERBVEVfRk9STUFUU19TUExJVC5leGVjKGZvcm1hdCk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcGFydHMgPSBjb25jYXQocGFydHMsIG1hdGNoLCAxKTtcbiAgICAgICAgZm9ybWF0ID0gcGFydHMucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0cy5wdXNoKGZvcm1hdCk7XG4gICAgICAgIGZvcm1hdCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWV6b25lICYmIHRpbWV6b25lID09PSAnVVRDJykge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICAgIGRhdGUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgfVxuICAgIGZvckVhY2gocGFydHMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBmbiA9IERBVEVfRk9STUFUU1t2YWx1ZV07XG4gICAgICB0ZXh0ICs9IGZuID8gZm4oZGF0ZSwgJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTKVxuICAgICAgICAgICAgICAgICA6IHZhbHVlLnJlcGxhY2UoLyheJ3wnJCkvZywgJycpLnJlcGxhY2UoLycnL2csIFwiJ1wiKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0ZXh0O1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUganNvblxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgQWxsb3dzIHlvdSB0byBjb252ZXJ0IGEgSmF2YVNjcmlwdCBvYmplY3QgaW50byBKU09OIHN0cmluZy5cbiAqXG4gKiAgIFRoaXMgZmlsdGVyIGlzIG1vc3RseSB1c2VmdWwgZm9yIGRlYnVnZ2luZy4gV2hlbiB1c2luZyB0aGUgZG91YmxlIGN1cmx5IHt7dmFsdWV9fSBub3RhdGlvblxuICogICB0aGUgYmluZGluZyBpcyBhdXRvbWF0aWNhbGx5IGNvbnZlcnRlZCB0byBKU09OLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IEFueSBKYXZhU2NyaXB0IG9iamVjdCAoaW5jbHVkaW5nIGFycmF5cyBhbmQgcHJpbWl0aXZlIHR5cGVzKSB0byBmaWx0ZXIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBKU09OIHN0cmluZy5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxwcmU+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb24gfX08L3ByZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBqc29uaWZ5IGZpbHRlcmVkIG9iamVjdHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCJ7J25hbWUnOid2YWx1ZSd9XCIpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiAgXCJuYW1lXCI6ID9cInZhbHVlXCJcXG59Lyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbmZ1bmN0aW9uIGpzb25GaWx0ZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdG9Kc29uKG9iamVjdCwgdHJ1ZSk7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBsb3dlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byBsb3dlcmNhc2UuXG4gKiBAc2VlIGFuZ3VsYXIubG93ZXJjYXNlXG4gKi9cbnZhciBsb3dlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKGxvd2VyY2FzZSk7XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSB1cHBlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byB1cHBlcmNhc2UuXG4gKiBAc2VlIGFuZ3VsYXIudXBwZXJjYXNlXG4gKi9cbnZhciB1cHBlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKHVwcGVyY2FzZSk7XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbGltaXRUb1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgb3Igc3RyaW5nIGNvbnRhaW5pbmcgb25seSBhIHNwZWNpZmllZCBudW1iZXIgb2YgZWxlbWVudHMuIFRoZSBlbGVtZW50c1xuICogYXJlIHRha2VuIGZyb20gZWl0aGVyIHRoZSBiZWdpbm5pbmcgb3IgdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5LCBzdHJpbmcgb3IgbnVtYmVyLCBhcyBzcGVjaWZpZWQgYnlcbiAqIHRoZSB2YWx1ZSBhbmQgc2lnbiAocG9zaXRpdmUgb3IgbmVnYXRpdmUpIG9mIGBsaW1pdGAuIElmIGEgbnVtYmVyIGlzIHVzZWQgYXMgaW5wdXQsIGl0IGlzXG4gKiBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBpbnB1dCBTb3VyY2UgYXJyYXksIHN0cmluZyBvciBudW1iZXIgdG8gYmUgbGltaXRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGltaXQgVGhlIGxlbmd0aCBvZiB0aGUgcmV0dXJuZWQgYXJyYXkgb3Igc3RyaW5nLiBJZiB0aGUgYGxpbWl0YCBudW1iZXJcbiAqICAgICBpcyBwb3NpdGl2ZSwgYGxpbWl0YCBudW1iZXIgb2YgaXRlbXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nIGFyZSBjb3BpZWQuXG4gKiAgICAgSWYgdGhlIG51bWJlciBpcyBuZWdhdGl2ZSwgYGxpbWl0YCBudW1iZXIgIG9mIGl0ZW1zIGZyb20gdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5L3N0cmluZ1xuICogICAgIGFyZSBjb3BpZWQuIFRoZSBgbGltaXRgIHdpbGwgYmUgdHJpbW1lZCBpZiBpdCBleGNlZWRzIGBhcnJheS5sZW5ndGhgXG4gKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfSBBIG5ldyBzdWItYXJyYXkgb3Igc3Vic3RyaW5nIG9mIGxlbmd0aCBgbGltaXRgIG9yIGxlc3MgaWYgaW5wdXQgYXJyYXlcbiAqICAgICBoYWQgbGVzcyB0aGFuIGBsaW1pdGAgZWxlbWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImxpbWl0VG9FeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaW1pdFRvRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5udW1iZXJzID0gWzEsMiwzLDQsNSw2LDcsOCw5XTtcbiAgICAgICAgICAgICAkc2NvcGUubGV0dGVycyA9IFwiYWJjZGVmZ2hpXCI7XG4gICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXIgPSAyMzQ1NDMyMzQyO1xuICAgICAgICAgICAgICRzY29wZS5udW1MaW1pdCA9IDM7XG4gICAgICAgICAgICAgJHNjb3BlLmxldHRlckxpbWl0ID0gMztcbiAgICAgICAgICAgICAkc2NvcGUubG9uZ051bWJlckxpbWl0ID0gMztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibnVtTGltaXRcIj5cbiAgICAgICAgIDxwPk91dHB1dCBudW1iZXJzOiB7eyBudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCB9fTwvcD5cbiAgICAgICAgIExpbWl0IHt7bGV0dGVyc319IHRvOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJsZXR0ZXJMaW1pdFwiPlxuICAgICAgICAgPHA+T3V0cHV0IGxldHRlcnM6IHt7IGxldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0IH19PC9wPlxuICAgICAgICAgTGltaXQge3tsb25nTnVtYmVyfX0gdG86IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cImxvbmdOdW1iZXJMaW1pdFwiPlxuICAgICAgICAgPHA+T3V0cHV0IGxvbmcgbnVtYmVyOiB7eyBsb25nTnVtYmVyIHwgbGltaXRUbzpsb25nTnVtYmVyTGltaXQgfX08L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBudW1MaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbnVtTGltaXQnKSk7XG4gICAgICAgdmFyIGxldHRlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbG9uZ051bWJlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsb25nTnVtYmVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWROdW1iZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZExldHRlcnMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTG9uZ051bWJlciA9IGVsZW1lbnQoYnkuYmluZGluZygnbG9uZ051bWJlciB8IGxpbWl0VG86bG9uZ051bWJlckxpbWl0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtYmVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobnVtTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsZXR0ZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxvbmdOdW1iZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsM10nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmMnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0Jyk7XG4gICAgICAgfSk7XG5cbiAgICAgICAvLyBUaGVyZSBpcyBhIGJ1ZyBpbiBzYWZhcmkgYW5kIHByb3RyYWN0b3IgdGhhdCBkb2Vzbid0IGxpa2UgdGhlIG1pbnVzIGtleVxuICAgICAgIC8vIGl0KCdzaG91bGQgdXBkYXRlIHRoZSBvdXRwdXQgd2hlbiAtMyBpcyBlbnRlcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGxvbmdOdW1iZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBsb25nTnVtYmVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbNyw4LDldJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogZ2hpJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDM0MicpO1xuICAgICAgIC8vIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBub3QgZXhjZWVkIHRoZSBtYXhpbXVtIHNpemUgb2YgaW5wdXQgYXJyYXknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7XG4gICAgICAgICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsMyw0LDUsNiw3LDgsOV0nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmNkZWZnaGknKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0NTQzMjM0MicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4qL1xuZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBsaW1pdCkge1xuICAgIGlmIChpc051bWJlcihpbnB1dCkpIGlucHV0ID0gaW5wdXQudG9TdHJpbmcoKTtcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpICYmICFpc1N0cmluZyhpbnB1dCkpIHJldHVybiBpbnB1dDtcblxuICAgIGlmIChNYXRoLmFicyhOdW1iZXIobGltaXQpKSA9PT0gSW5maW5pdHkpIHtcbiAgICAgIGxpbWl0ID0gTnVtYmVyKGxpbWl0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGltaXQgPSBpbnQobGltaXQpO1xuICAgIH1cblxuICAgIGlmIChpc1N0cmluZyhpbnB1dCkpIHtcbiAgICAgIC8vTmFOIGNoZWNrIG9uIGxpbWl0XG4gICAgICBpZiAobGltaXQpIHtcbiAgICAgICAgcmV0dXJuIGxpbWl0ID49IDAgPyBpbnB1dC5zbGljZSgwLCBsaW1pdCkgOiBpbnB1dC5zbGljZShsaW1pdCwgaW5wdXQubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBvdXQgPSBbXSxcbiAgICAgIGksIG47XG5cbiAgICAvLyBpZiBhYnMobGltaXQpIGV4Y2VlZHMgbWF4aW11bSBsZW5ndGgsIHRyaW0gaXRcbiAgICBpZiAobGltaXQgPiBpbnB1dC5sZW5ndGgpXG4gICAgICBsaW1pdCA9IGlucHV0Lmxlbmd0aDtcbiAgICBlbHNlIGlmIChsaW1pdCA8IC1pbnB1dC5sZW5ndGgpXG4gICAgICBsaW1pdCA9IC1pbnB1dC5sZW5ndGg7XG5cbiAgICBpZiAobGltaXQgPiAwKSB7XG4gICAgICBpID0gMDtcbiAgICAgIG4gPSBsaW1pdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaSA9IGlucHV0Lmxlbmd0aCArIGxpbWl0O1xuICAgICAgbiA9IGlucHV0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb3IgKDsgaTxuOyBpKyspIHtcbiAgICAgIG91dC5wdXNoKGlucHV0W2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG9yZGVyQnlcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBPcmRlcnMgYSBzcGVjaWZpZWQgYGFycmF5YCBieSB0aGUgYGV4cHJlc3Npb25gIHByZWRpY2F0ZS4gSXQgaXMgb3JkZXJlZCBhbHBoYWJldGljYWxseVxuICogZm9yIHN0cmluZ3MgYW5kIG51bWVyaWNhbGx5IGZvciBudW1iZXJzLiBOb3RlOiBpZiB5b3Ugbm90aWNlIG51bWJlcnMgYXJlIG5vdCBiZWluZyBzb3J0ZWRcbiAqIGNvcnJlY3RseSwgbWFrZSBzdXJlIHRoZXkgYXJlIGFjdHVhbGx5IGJlaW5nIHNhdmVkIGFzIG51bWJlcnMgYW5kIG5vdCBzdHJpbmdzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbigqKXxzdHJpbmd8QXJyYXkuPChmdW5jdGlvbigqKXxzdHJpbmcpPj19IGV4cHJlc3Npb24gQSBwcmVkaWNhdGUgdG8gYmVcbiAqICAgIHVzZWQgYnkgdGhlIGNvbXBhcmF0b3IgdG8gZGV0ZXJtaW5lIHRoZSBvcmRlciBvZiBlbGVtZW50cy5cbiAqXG4gKiAgICBDYW4gYmUgb25lIG9mOlxuICpcbiAqICAgIC0gYGZ1bmN0aW9uYDogR2V0dGVyIGZ1bmN0aW9uLiBUaGUgcmVzdWx0IG9mIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBzb3J0ZWQgdXNpbmcgdGhlXG4gKiAgICAgIGA8YCwgYD1gLCBgPmAgb3BlcmF0b3IuXG4gKiAgICAtIGBzdHJpbmdgOiBBbiBBbmd1bGFyIGV4cHJlc3Npb24uIFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIGlzIHVzZWQgdG8gY29tcGFyZSBlbGVtZW50c1xuICogICAgICAoZm9yIGV4YW1wbGUgYG5hbWVgIHRvIHNvcnQgYnkgYSBwcm9wZXJ0eSBjYWxsZWQgYG5hbWVgIG9yIGBuYW1lLnN1YnN0cigwLCAzKWAgdG8gc29ydCBieVxuICogICAgICAzIGZpcnN0IGNoYXJhY3RlcnMgb2YgYSBwcm9wZXJ0eSBjYWxsZWQgYG5hbWVgKS4gVGhlIHJlc3VsdCBvZiBhIGNvbnN0YW50IGV4cHJlc3Npb25cbiAqICAgICAgaXMgaW50ZXJwcmV0ZWQgYXMgYSBwcm9wZXJ0eSBuYW1lIHRvIGJlIHVzZWQgaW4gY29tcGFyaXNvbnMgKGZvciBleGFtcGxlIGBcInNwZWNpYWwgbmFtZVwiYFxuICogICAgICB0byBzb3J0IG9iamVjdCBieSB0aGUgdmFsdWUgb2YgdGhlaXIgYHNwZWNpYWwgbmFtZWAgcHJvcGVydHkpLiBBbiBleHByZXNzaW9uIGNhbiBiZVxuICogICAgICBvcHRpb25hbGx5IHByZWZpeGVkIHdpdGggYCtgIG9yIGAtYCB0byBjb250cm9sIGFzY2VuZGluZyBvciBkZXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAqICAgICAgKGZvciBleGFtcGxlLCBgK25hbWVgIG9yIGAtbmFtZWApLiBJZiBubyBwcm9wZXJ0eSBpcyBwcm92aWRlZCwgKGUuZy4gYCcrJ2ApIHRoZW4gdGhlIGFycmF5XG4gKiAgICAgIGVsZW1lbnQgaXRzZWxmIGlzIHVzZWQgdG8gY29tcGFyZSB3aGVyZSBzb3J0aW5nLlxuICogICAgLSBgQXJyYXlgOiBBbiBhcnJheSBvZiBmdW5jdGlvbiBvciBzdHJpbmcgcHJlZGljYXRlcy4gVGhlIGZpcnN0IHByZWRpY2F0ZSBpbiB0aGUgYXJyYXlcbiAqICAgICAgaXMgdXNlZCBmb3Igc29ydGluZywgYnV0IHdoZW4gdHdvIGl0ZW1zIGFyZSBlcXVpdmFsZW50LCB0aGUgbmV4dCBwcmVkaWNhdGUgaXMgdXNlZC5cbiAqXG4gKiAgICBJZiB0aGUgcHJlZGljYXRlIGlzIG1pc3Npbmcgb3IgZW1wdHkgdGhlbiBpdCBkZWZhdWx0cyB0byBgJysnYC5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSByZXZlcnNlIFJldmVyc2UgdGhlIG9yZGVyIG9mIHRoZSBhcnJheS5cbiAqIEByZXR1cm5zIHtBcnJheX0gU29ydGVkIGNvcHkgb2YgdGhlIHNvdXJjZSBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwib3JkZXJCeUV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ29yZGVyQnlFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPVxuICAgICAgICAgICAgICAgICBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyMTInLCBhZ2U6MTB9LFxuICAgICAgICAgICAgICAgICAge25hbWU6J01hcnknLCBwaG9uZTonNTU1LTk4NzYnLCBhZ2U6MTl9LFxuICAgICAgICAgICAgICAgICAge25hbWU6J01pa2UnLCBwaG9uZTonNTU1LTQzMjEnLCBhZ2U6MjF9LFxuICAgICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnLCBhZ2U6MzV9LFxuICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGllJywgcGhvbmU6JzU1NS04NzY1JywgYWdlOjI5fV07XG4gICAgICAgICAgICAgJHNjb3BlLnByZWRpY2F0ZSA9ICctYWdlJztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8cHJlPlNvcnRpbmcgcHJlZGljYXRlID0ge3twcmVkaWNhdGV9fTsgcmV2ZXJzZSA9IHt7cmV2ZXJzZX19PC9wcmU+XG4gICAgICAgICA8aHIvPlxuICAgICAgICAgWyA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJwcmVkaWNhdGU9JydcIj51bnNvcnRlZDwvYT4gXVxuICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kXCI+XG4gICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICA8dGg+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicHJlZGljYXRlID0gJ25hbWUnOyByZXZlcnNlPWZhbHNlXCI+TmFtZTwvYT5cbiAgICAgICAgICAgICAgICAgKDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInByZWRpY2F0ZSA9ICctbmFtZSc7IHJldmVyc2U9ZmFsc2VcIj5ePC9hPik8L3RoPlxuICAgICAgICAgICAgIDx0aD48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJwcmVkaWNhdGUgPSAncGhvbmUnOyByZXZlcnNlPSFyZXZlcnNlXCI+UGhvbmUgTnVtYmVyPC9hPjwvdGg+XG4gICAgICAgICAgICAgPHRoPjxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInByZWRpY2F0ZSA9ICdhZ2UnOyByZXZlcnNlPSFyZXZlcnNlXCI+QWdlPC9hPjwvdGg+XG4gICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IG9yZGVyQnk6cHJlZGljYXRlOnJldmVyc2VcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKiBJdCdzIGFsc28gcG9zc2libGUgdG8gY2FsbCB0aGUgb3JkZXJCeSBmaWx0ZXIgbWFudWFsbHksIGJ5IGluamVjdGluZyBgJGZpbHRlcmAsIHJldHJpZXZpbmcgdGhlXG4gKiBmaWx0ZXIgcm91dGluZSB3aXRoIGAkZmlsdGVyKCdvcmRlckJ5JylgLCBhbmQgY2FsbGluZyB0aGUgcmV0dXJuZWQgZmlsdGVyIHJvdXRpbmUgd2l0aCB0aGVcbiAqIGRlc2lyZWQgcGFyYW1ldGVycy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZFwiPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJyZXZlcnNlPWZhbHNlO29yZGVyKCduYW1lJywgZmFsc2UpXCI+TmFtZTwvYT5cbiAgICAgICAgICAgICAgKDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cIm9yZGVyKCctbmFtZScsZmFsc2UpXCI+XjwvYT4pPC90aD5cbiAgICAgICAgICAgIDx0aD48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJyZXZlcnNlPSFyZXZlcnNlO29yZGVyKCdwaG9uZScsIHJldmVyc2UpXCI+UGhvbmUgTnVtYmVyPC9hPjwvdGg+XG4gICAgICAgICAgICA8dGg+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicmV2ZXJzZT0hcmV2ZXJzZTtvcmRlcignYWdlJyxyZXZlcnNlKVwiPkFnZTwvYT48L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzXCI+XG4gICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cblxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZmlsdGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkZmlsdGVyKSB7XG4gICAgICAgICAgdmFyIG9yZGVyQnkgPSAkZmlsdGVyKCdvcmRlckJ5Jyk7XG4gICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBbXG4gICAgICAgICAgICB7IG5hbWU6ICdKb2huJywgICAgcGhvbmU6ICc1NTUtMTIxMicsICAgIGFnZTogMTAgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ01hcnknLCAgICBwaG9uZTogJzU1NS05ODc2JywgICAgYWdlOiAxOSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnTWlrZScsICAgIHBob25lOiAnNTU1LTQzMjEnLCAgICBhZ2U6IDIxIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdBZGFtJywgICAgcGhvbmU6ICc1NTUtNTY3OCcsICAgIGFnZTogMzUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ0p1bGllJywgICBwaG9uZTogJzU1NS04NzY1JywgICAgYWdlOiAyOSB9XG4gICAgICAgICAgXTtcbiAgICAgICAgICAkc2NvcGUub3JkZXIgPSBmdW5jdGlvbihwcmVkaWNhdGUsIHJldmVyc2UpIHtcbiAgICAgICAgICAgICRzY29wZS5mcmllbmRzID0gb3JkZXJCeSgkc2NvcGUuZnJpZW5kcywgcHJlZGljYXRlLCByZXZlcnNlKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgICRzY29wZS5vcmRlcignLWFnZScsZmFsc2UpO1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuPC9leGFtcGxlPlxuICovXG5vcmRlckJ5RmlsdGVyLiRpbmplY3QgPSBbJyRwYXJzZSddO1xuZnVuY3Rpb24gb3JkZXJCeUZpbHRlcigkcGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBzb3J0UHJlZGljYXRlLCByZXZlcnNlT3JkZXIpIHtcbiAgICBpZiAoIShpc0FycmF5TGlrZShhcnJheSkpKSByZXR1cm4gYXJyYXk7XG4gICAgc29ydFByZWRpY2F0ZSA9IGlzQXJyYXkoc29ydFByZWRpY2F0ZSkgPyBzb3J0UHJlZGljYXRlOiBbc29ydFByZWRpY2F0ZV07XG4gICAgaWYgKHNvcnRQcmVkaWNhdGUubGVuZ3RoID09PSAwKSB7IHNvcnRQcmVkaWNhdGUgPSBbJysnXTsgfVxuICAgIHNvcnRQcmVkaWNhdGUgPSBzb3J0UHJlZGljYXRlLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBkZXNjZW5kaW5nID0gZmFsc2UsIGdldCA9IHByZWRpY2F0ZSB8fCBpZGVudGl0eTtcbiAgICAgIGlmIChpc1N0cmluZyhwcmVkaWNhdGUpKSB7XG4gICAgICAgIGlmICgocHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLScpKSB7XG4gICAgICAgICAgZGVzY2VuZGluZyA9IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWRpY2F0ZSA9PT0gJycpIHtcbiAgICAgICAgICAvLyBFZmZlY3RpdmVseSBubyBwcmVkaWNhdGUgd2FzIHBhc3NlZCBzbyB3ZSBjb21wYXJlIGlkZW50aXR5XG4gICAgICAgICAgcmV0dXJuIHJldmVyc2VDb21wYXJhdG9yKGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlKGEsIGIpO1xuICAgICAgICAgIH0sIGRlc2NlbmRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGdldCA9ICRwYXJzZShwcmVkaWNhdGUpO1xuICAgICAgICBpZiAoZ2V0LmNvbnN0YW50KSB7XG4gICAgICAgICAgdmFyIGtleSA9IGdldCgpO1xuICAgICAgICAgIHJldHVybiByZXZlcnNlQ29tcGFyYXRvcihmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZShhW2tleV0sIGJba2V5XSk7XG4gICAgICAgICAgfSwgZGVzY2VuZGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXZlcnNlQ29tcGFyYXRvcihmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlKGdldChhKSxnZXQoYikpO1xuICAgICAgfSwgZGVzY2VuZGluZyk7XG4gICAgfSk7XG4gICAgdmFyIGFycmF5Q29weSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsgYXJyYXlDb3B5LnB1c2goYXJyYXlbaV0pOyB9XG4gICAgcmV0dXJuIGFycmF5Q29weS5zb3J0KHJldmVyc2VDb21wYXJhdG9yKGNvbXBhcmF0b3IsIHJldmVyc2VPcmRlcikpO1xuXG4gICAgZnVuY3Rpb24gY29tcGFyYXRvcihvMSwgbzIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc29ydFByZWRpY2F0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY29tcCA9IHNvcnRQcmVkaWNhdGVbaV0obzEsIG8yKTtcbiAgICAgICAgaWYgKGNvbXAgIT09IDApIHJldHVybiBjb21wO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJldmVyc2VDb21wYXJhdG9yKGNvbXAsIGRlc2NlbmRpbmcpIHtcbiAgICAgIHJldHVybiBkZXNjZW5kaW5nXG4gICAgICAgICAgPyBmdW5jdGlvbihhLCBiKSB7cmV0dXJuIGNvbXAoYixhKTt9XG4gICAgICAgICAgOiBjb21wO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlKHYxLCB2Mikge1xuICAgICAgdmFyIHQxID0gdHlwZW9mIHYxO1xuICAgICAgdmFyIHQyID0gdHlwZW9mIHYyO1xuICAgICAgaWYgKHQxID09IHQyKSB7XG4gICAgICAgIGlmIChpc0RhdGUodjEpICYmIGlzRGF0ZSh2MikpIHtcbiAgICAgICAgICB2MSA9IHYxLnZhbHVlT2YoKTtcbiAgICAgICAgICB2MiA9IHYyLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodDEgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICB2MSA9IHYxLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgIHYyID0gdjIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodjEgPT09IHYyKSByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIHYxIDwgdjIgPyAtMSA6IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdDEgPCB0MiA/IC0xIDogMTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5nRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgZGlyZWN0aXZlID0ge1xuICAgICAgbGluazogZGlyZWN0aXZlXG4gICAgfTtcbiAgfVxuICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0FDJztcbiAgcmV0dXJuIHZhbHVlRm4oZGlyZWN0aXZlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBhXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTW9kaWZpZXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIGh0bWwgQSB0YWcgc28gdGhhdCB0aGUgZGVmYXVsdCBhY3Rpb24gaXMgcHJldmVudGVkIHdoZW5cbiAqIHRoZSBocmVmIGF0dHJpYnV0ZSBpcyBlbXB0eS5cbiAqXG4gKiBUaGlzIGNoYW5nZSBwZXJtaXRzIHRoZSBlYXN5IGNyZWF0aW9uIG9mIGFjdGlvbiBsaW5rcyB3aXRoIHRoZSBgbmdDbGlja2AgZGlyZWN0aXZlXG4gKiB3aXRob3V0IGNoYW5naW5nIHRoZSBsb2NhdGlvbiBvciBjYXVzaW5nIHBhZ2UgcmVsb2FkcywgZS5nLjpcbiAqIGA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJsaXN0LmFkZEl0ZW0oKVwiPkFkZCBJdGVtPC9hPmBcbiAqL1xudmFyIGh0bWxBbmNob3JEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdFJyxcbiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgIGlmICghYXR0ci5ocmVmICYmICFhdHRyLnhsaW5rSHJlZiAmJiAhYXR0ci5uYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgICAgLy8gU1ZHQUVsZW1lbnQgZG9lcyBub3QgdXNlIHRoZSBocmVmIGF0dHJpYnV0ZSwgYnV0IHJhdGhlciB0aGUgJ3hsaW5rSHJlZicgYXR0cmlidXRlLlxuICAgICAgICB2YXIgaHJlZiA9IHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nID9cbiAgICAgICAgICAgICAgICAgICAneGxpbms6aHJlZicgOiAnaHJlZic7XG4gICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAvLyBpZiB3ZSBoYXZlIG5vIGhyZWYgdXJsLCB0aGVuIGRvbid0IG5hdmlnYXRlIGFueXdoZXJlLlxuICAgICAgICAgIGlmICghZWxlbWVudC5hdHRyKGhyZWYpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdIcmVmXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYW4gaHJlZiBhdHRyaWJ1dGUgd2lsbFxuICogbWFrZSB0aGUgbGluayBnbyB0byB0aGUgd3JvbmcgVVJMIGlmIHRoZSB1c2VyIGNsaWNrcyBpdCBiZWZvcmVcbiAqIEFuZ3VsYXIgaGFzIGEgY2hhbmNlIHRvIHJlcGxhY2UgdGhlIGB7e2hhc2h9fWAgbWFya3VwIHdpdGggaXRzXG4gKiB2YWx1ZS4gVW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgbWFya3VwIHRoZSBsaW5rIHdpbGwgYmUgYnJva2VuXG4gKiBhbmQgd2lsbCBtb3N0IGxpa2VseSByZXR1cm4gYSA0MDQgZXJyb3IuXG4gKlxuICogVGhlIGBuZ0hyZWZgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSB3cm9uZyB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBuZy1ocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBBXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ0hyZWYgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgdmFyaW91cyBjb21iaW5hdGlvbnMgb2YgYGhyZWZgLCBgbmctaHJlZmAgYW5kIGBuZy1jbGlja2AgYXR0cmlidXRlc1xuICogaW4gbGlua3MgYW5kIHRoZWlyIGRpZmZlcmVudCBiZWhhdmlvcnM6XG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ2YWx1ZVwiIC8+PGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0xXCIgaHJlZiBuZy1jbGljaz1cInZhbHVlID0gMVwiPmxpbmsgMTwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTJcIiBocmVmPVwiXCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDJcIj5saW5rIDI8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0zXCIgbmctaHJlZj1cIi97eycxMjMnfX1cIj5saW5rIDM8L2E+IChsaW5rLCByZWxvYWQhKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNFwiIGhyZWY9XCJcIiBuYW1lPVwieHhcIiBuZy1jbGljaz1cInZhbHVlID0gNFwiPmFuY2hvcjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTVcIiBuYW1lPVwieHh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDVcIj5hbmNob3I8L2E+IChubyBsaW5rKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNlwiIG5nLWhyZWY9XCJ7e3ZhbHVlfX1cIj5saW5rPC9hPiAobGluaywgY2hhbmdlIGxvY2F0aW9uKVxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIHdpdGhvdXQgdmFsdWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcxJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMScpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0yJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTInKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYW5kIGNoYW5nZSB1cmwgd2hlbiBuZy1ocmVmIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzEyMyQvKTtcblxuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMycpKS5jbGljaygpO1xuXG4gICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgbmF2aWdhdGUgYXdheSBmcm9tIGFuIEFuZ3VsYXIgcGFnZSwgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHVzZSBicm93c2VyLmRyaXZlciB0byBnZXQgdGhlIGJhc2Ugd2ViZHJpdmVyLlxuXG4gICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cXC8xMjMkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzEyMycpO1xuICAgICAgICB9KTtcblxuICAgICAgICB4aXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcgYW5kIG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay00JykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNCcpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBubyBocmVmIGJ1dCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstNScpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzUnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay01JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIG9ubHkgY2hhbmdlIHVybCB3aGVuIG9ubHkgbmctaHJlZicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmNsZWFyKCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuc2VuZEtleXMoJzYnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay02JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cXC82JC8pO1xuXG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay02JykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBuYXZpZ2F0ZSBhd2F5IGZyb20gYW4gQW5ndWxhciBwYWdlLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gdXNlIGJyb3dzZXIuZHJpdmVyIHRvIGdldCB0aGUgYmFzZSB3ZWJkcml2ZXIuXG4gICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cXC82JC8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgNTAwMCwgJ3BhZ2Ugc2hvdWxkIG5hdmlnYXRlIHRvIC82Jyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3JjXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3JjYCBhdHRyaWJ1dGUgZG9lc24ndFxuICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbFxuICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlXG4gKiBge3toYXNofX1gLiBUaGUgYG5nU3JjYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBzcmM9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIi8+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIG5nLXNyYz1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiLz5cbiAqIGBgYFxuICpcbiAqIEBlbGVtZW50IElNR1xuICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdTcmMgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTcmNzZXRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgOTlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNzZXRgIGF0dHJpYnV0ZSBkb2Vzbid0XG4gKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXG4gKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGVcbiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNzZXRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIHNyY3NldD1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSAyeFwiLz5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgbmctc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIvPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgSU1HXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyY3NldCBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Rpc2FibGVkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFdlIHNob3VsZG4ndCBkbyB0aGlzLCBiZWNhdXNlIGl0IHdpbGwgbWFrZSB0aGUgYnV0dG9uIGVuYWJsZWQgb24gQ2hyb21lL0ZpcmVmb3ggYnV0IG5vdCBvbiBJRTggYW5kIG9sZGVyIElFczpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctaW5pdD1cInNjb3BlID0geyBpc0Rpc2FibGVkOiBmYWxzZSB9XCI+XG4gKiAgPGJ1dHRvbiBkaXNhYmxlZD1cInt7c2NvcGUuaXNEaXNhYmxlZH19XCI+RGlzYWJsZWQ8L2J1dHRvbj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogVGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2YgYm9vbGVhbiBhdHRyaWJ1dGVzXG4gKiBzdWNoIGFzIGRpc2FibGVkLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ0Rpc2FibGVkYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlLlxuICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXNcbiAqIGEgcGVybWFuZW50IHJlbGlhYmxlIHBsYWNlIHRvIHN0b3JlIHRoZSBiaW5kaW5nIGluZm9ybWF0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICBDbGljayBtZSB0byB0b2dnbGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIj48YnIvPlxuICAgICAgICA8YnV0dG9uIG5nLW1vZGVsPVwiYnV0dG9uXCIgbmctZGlzYWJsZWQ9XCJjaGVja2VkXCI+QnV0dG9uPC9idXR0b24+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIGJ1dHRvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEaXNhYmxlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJkaXNhYmxlZFwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2hlY2tlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogc3VjaCBhcyBjaGVja2VkLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ0NoZWNrZWRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZS5cbiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzXG4gKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi5cbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICBDaGVjayBtZSB0byBjaGVjayBib3RoOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJtYXN0ZXJcIj48YnIvPlxuICAgICAgICA8aW5wdXQgaWQ9XCJjaGVja1NsYXZlXCIgdHlwZT1cImNoZWNrYm94XCIgbmctY2hlY2tlZD1cIm1hc3RlclwiPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGJvdGggY2hlY2tCb3hlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdtYXN0ZXInKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY2hlY2tTbGF2ZScpKS5nZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGVja2VkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcImNoZWNrZWRcIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlYWRvbmx5XG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2YgYm9vbGVhbiBhdHRyaWJ1dGVzXG4gKiBzdWNoIGFzIHJlYWRvbmx5LiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ1JlYWRvbmx5YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGByZWFkb25seWAgYXR0cmlidXRlLlxuICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXNcbiAqIGEgcGVybWFuZW50IHJlbGlhYmxlIHBsYWNlIHRvIHN0b3JlIHRoZSBiaW5kaW5nIGluZm9ybWF0aW9uLlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIENoZWNrIG1lIHRvIG1ha2UgdGV4dCByZWFkb25seTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjxici8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLXJlYWRvbmx5PVwiY2hlY2tlZFwiIHZhbHVlPVwiSSdtIEFuZ3VsYXJcIi8+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIHJlYWRvbmx5IGF0dHInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ1t0eXBlPVwidGV4dFwiXScpKS5nZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ1t0eXBlPVwidGV4dFwiXScpKS5nZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IElOUFVUXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUmVhZG9ubHkgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlIFwicmVhZG9ubHlcIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1NlbGVjdGVkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2YgYm9vbGVhbiBhdHRyaWJ1dGVzXG4gKiBzdWNoIGFzIHNlbGVjdGVkLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ1NlbGVjdGVkYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlLlxuICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXNcbiAqIGEgcGVybWFuZW50IHJlbGlhYmxlIHBsYWNlIHRvIHN0b3JlIHRoZSBiaW5kaW5nIGluZm9ybWF0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICBDaGVjayBtZSB0byBzZWxlY3Q6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCI+PGJyLz5cbiAgICAgICAgPHNlbGVjdD5cbiAgICAgICAgICA8b3B0aW9uPkhlbGxvITwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gaWQ9XCJncmVldFwiIG5nLXNlbGVjdGVkPVwic2VsZWN0ZWRcIj5HcmVldGluZ3MhPC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHNlbGVjdCBHcmVldGluZ3MhJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2dyZWV0JykpLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc2VsZWN0ZWQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBPUFRJT05cbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTZWxlY3RlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJzZWxlY3RlZFwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ09wZW5cbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXNcbiAqIHN1Y2ggYXMgb3Blbi4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKVxuICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGVcbiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS5cbiAqIFRoZSBgbmdPcGVuYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBvcGVuYCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlc1xuICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uXG4gKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgQ2hlY2sgbWUgY2hlY2sgbXVsdGlwbGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm9wZW5cIj48YnIvPlxuICAgICAgICAgPGRldGFpbHMgaWQ9XCJkZXRhaWxzXCIgbmctb3Blbj1cIm9wZW5cIj5cbiAgICAgICAgICAgIDxzdW1tYXJ5PlNob3cvSGlkZSBtZTwvc3VtbWFyeT5cbiAgICAgICAgIDwvZGV0YWlscz5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgb3BlbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ29wZW4nKSkuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RldGFpbHMnKSkuZ2V0QXR0cmlidXRlKCdvcGVuJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IERFVEFJTFNcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdPcGVuIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcIm9wZW5cIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cbnZhciBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyA9IHt9O1xuXG5cbi8vIGJvb2xlYW4gYXR0cnMgYXJlIGV2YWx1YXRlZFxuZm9yRWFjaChCT09MRUFOX0FUVFIsIGZ1bmN0aW9uKHByb3BOYW1lLCBhdHRyTmFtZSkge1xuICAvLyBiaW5kaW5nIHRvIG11bHRpcGxlIGlzIG5vdCBzdXBwb3J0ZWRcbiAgaWYgKHByb3BOYW1lID09IFwibXVsdGlwbGVcIikgcmV0dXJuO1xuXG4gIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpO1xuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tub3JtYWxpemVkXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25vcm1hbGl6ZWRdLCBmdW5jdGlvbiBuZ0Jvb2xlYW5BdHRyV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBhdHRyLiRzZXQoYXR0ck5hbWUsICEhdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbi8vIGFsaWFzZWQgaW5wdXQgYXR0cnMgYXJlIGV2YWx1YXRlZFxuZm9yRWFjaChBTElBU0VEX0FUVFIsIGZ1bmN0aW9uKGh0bWxBdHRyLCBuZ0F0dHIpIHtcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbmdBdHRyXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgLy9zcGVjaWFsIGNhc2UgbmdQYXR0ZXJuIHdoZW4gYSBsaXRlcmFsIHJlZ3VsYXIgZXhwcmVzc2lvbiB2YWx1ZVxuICAgICAgICAvL2lzIHVzZWQgYXMgdGhlIGV4cHJlc3Npb24gKHRoaXMgd2F5IHdlIGRvbid0IGhhdmUgdG8gd2F0Y2ggYW55dGhpbmcpLlxuICAgICAgICBpZiAobmdBdHRyID09PSBcIm5nUGF0dGVyblwiICYmIGF0dHIubmdQYXR0ZXJuLmNoYXJBdCgwKSA9PSBcIi9cIikge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGF0dHIubmdQYXR0ZXJuLm1hdGNoKFJFR0VYX1NUUklOR19SRUdFWFApO1xuICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgYXR0ci4kc2V0KFwibmdQYXR0ZXJuXCIsIG5ldyBSZWdFeHAobWF0Y2hbMV0sIG1hdGNoWzJdKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbmdBdHRyXSwgZnVuY3Rpb24gbmdBdHRyQWxpYXNXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGF0dHIuJHNldChuZ0F0dHIsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn0pO1xuXG4vLyBuZy1zcmMsIG5nLXNyY3NldCwgbmctaHJlZiBhcmUgaW50ZXJwb2xhdGVkXG5mb3JFYWNoKFsnc3JjJywgJ3NyY3NldCcsICdocmVmJ10sIGZ1bmN0aW9uKGF0dHJOYW1lKSB7XG4gIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpO1xuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tub3JtYWxpemVkXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmlvcml0eTogOTksIC8vIGl0IG5lZWRzIHRvIHJ1biBhZnRlciB0aGUgYXR0cmlidXRlcyBhcmUgaW50ZXJwb2xhdGVkXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBhdHRyTmFtZSxcbiAgICAgICAgICAgIG5hbWUgPSBhdHRyTmFtZTtcblxuICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdocmVmJyAmJlxuICAgICAgICAgICAgdG9TdHJpbmcuY2FsbChlbGVtZW50LnByb3AoJ2hyZWYnKSkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHtcbiAgICAgICAgICBuYW1lID0gJ3hsaW5rSHJlZic7XG4gICAgICAgICAgYXR0ci4kYXR0cltuYW1lXSA9ICd4bGluazpocmVmJztcbiAgICAgICAgICBwcm9wTmFtZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBhdHRyLiRvYnNlcnZlKG5vcm1hbGl6ZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicpIHtcbiAgICAgICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGF0dHIuJHNldChuYW1lLCB2YWx1ZSk7XG5cbiAgICAgICAgICAvLyBvbiBJRSwgaWYgXCJuZzpzcmNcIiBkaXJlY3RpdmUgZGVjbGFyYXRpb24gaXMgdXNlZCBhbmQgXCJzcmNcIiBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdFxuICAgICAgICAgIC8vIHRoZW4gY2FsbGluZyBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgJ2ZvbycpIGRvZXNuJ3QgZG8gYW55dGhpbmcsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byBzZXQgdGhlIHByb3BlcnR5IGFzIHdlbGwgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAgICAgICAgLy8gd2UgdXNlIGF0dHJbYXR0ck5hbWVdIHZhbHVlIHNpbmNlICRzZXQgY2FuIHNhbml0aXplIHRoZSB1cmwuXG4gICAgICAgICAgaWYgKG1zaWUgJiYgcHJvcE5hbWUpIGVsZW1lbnQucHJvcChwcm9wTmFtZSwgYXR0cltuYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59KTtcblxuLyogZ2xvYmFsIC1udWxsRm9ybUN0cmwsIC1TVUJNSVRURURfQ0xBU1MsIGFkZFNldFZhbGlkaXR5TWV0aG9kOiB0cnVlXG4gKi9cbnZhciBudWxsRm9ybUN0cmwgPSB7XG4gICRhZGRDb250cm9sOiBub29wLFxuICAkJHJlbmFtZUNvbnRyb2w6IG51bGxGb3JtUmVuYW1lQ29udHJvbCxcbiAgJHJlbW92ZUNvbnRyb2w6IG5vb3AsXG4gICRzZXRWYWxpZGl0eTogbm9vcCxcbiAgJHNldERpcnR5OiBub29wLFxuICAkc2V0UHJpc3RpbmU6IG5vb3AsXG4gICRzZXRTdWJtaXR0ZWQ6IG5vb3Bcbn0sXG5TVUJNSVRURURfQ0xBU1MgPSAnbmctc3VibWl0dGVkJztcblxuZnVuY3Rpb24gbnVsbEZvcm1SZW5hbWVDb250cm9sKGNvbnRyb2wsIG5hbWUpIHtcbiAgY29udHJvbC4kbmFtZSA9IG5hbWU7XG59XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXJcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRwcmlzdGluZSBUcnVlIGlmIHVzZXIgaGFzIG5vdCBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0geWV0LlxuICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgYWxsIG9mIHRoZSBjb250YWluaW5nIGZvcm1zIGFuZCBjb250cm9scyBhcmUgdmFsaWQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRpbnZhbGlkIFRydWUgaWYgYXQgbGVhc3Qgb25lIGNvbnRhaW5pbmcgY29udHJvbCBvciBmb3JtIGlzIGludmFsaWQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRzdWJtaXR0ZWQgVHJ1ZSBpZiB1c2VyIGhhcyBzdWJtaXR0ZWQgdGhlIGZvcm0gZXZlbiBpZiBpdHMgaW52YWxpZC5cbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIElzIGFuIG9iamVjdCBoYXNoLCBjb250YWluaW5nIHJlZmVyZW5jZXMgdG8gY29udHJvbHMgb3JcbiAqICBmb3JtcyB3aXRoIGZhaWxpbmcgdmFsaWRhdG9ycywgd2hlcmU6XG4gKlxuICogIC0ga2V5cyBhcmUgdmFsaWRhdGlvbiB0b2tlbnMgKGVycm9yIG5hbWVzKSxcbiAqICAtIHZhbHVlcyBhcmUgYXJyYXlzIG9mIGNvbnRyb2xzIG9yIGZvcm1zIHRoYXQgaGF2ZSBhIGZhaWxpbmcgdmFsaWRhdG9yIGZvciBnaXZlbiBlcnJvciBuYW1lLlxuICpcbiAqICBCdWlsdC1pbiB2YWxpZGF0aW9uIHRva2VuczpcbiAqXG4gKiAgLSBgZW1haWxgXG4gKiAgLSBgbWF4YFxuICogIC0gYG1heGxlbmd0aGBcbiAqICAtIGBtaW5gXG4gKiAgLSBgbWlubGVuZ3RoYFxuICogIC0gYG51bWJlcmBcbiAqICAtIGBwYXR0ZXJuYFxuICogIC0gYHJlcXVpcmVkYFxuICogIC0gYHVybGBcbiAqICAtIGBkYXRlYFxuICogIC0gYGRhdGV0aW1lbG9jYWxgXG4gKiAgLSBgdGltZWBcbiAqICAtIGB3ZWVrYFxuICogIC0gYG1vbnRoYFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYEZvcm1Db250cm9sbGVyYCBrZWVwcyB0cmFjayBvZiBhbGwgaXRzIGNvbnRyb2xzIGFuZCBuZXN0ZWQgZm9ybXMgYXMgd2VsbCBhcyB0aGUgc3RhdGUgb2YgdGhlbSxcbiAqIHN1Y2ggYXMgYmVpbmcgdmFsaWQvaW52YWxpZCBvciBkaXJ0eS9wcmlzdGluZS5cbiAqXG4gKiBFYWNoIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfSBkaXJlY3RpdmUgY3JlYXRlcyBhbiBpbnN0YW5jZVxuICogb2YgYEZvcm1Db250cm9sbGVyYC5cbiAqXG4gKi9cbi8vYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlXG5Gb3JtQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCcsICckYXR0cnMnLCAnJHNjb3BlJywgJyRhbmltYXRlJywgJyRpbnRlcnBvbGF0ZSddO1xuZnVuY3Rpb24gRm9ybUNvbnRyb2xsZXIoZWxlbWVudCwgYXR0cnMsICRzY29wZSwgJGFuaW1hdGUsICRpbnRlcnBvbGF0ZSkge1xuICB2YXIgZm9ybSA9IHRoaXMsXG4gICAgICBjb250cm9scyA9IFtdO1xuXG4gIHZhciBwYXJlbnRGb3JtID0gZm9ybS4kJHBhcmVudEZvcm0gPSBlbGVtZW50LnBhcmVudCgpLmNvbnRyb2xsZXIoJ2Zvcm0nKSB8fCBudWxsRm9ybUN0cmw7XG5cbiAgLy8gaW5pdCBzdGF0ZVxuICBmb3JtLiRlcnJvciA9IHt9O1xuICBmb3JtLiQkc3VjY2VzcyA9IHt9O1xuICBmb3JtLiRwZW5kaW5nID0gdW5kZWZpbmVkO1xuICBmb3JtLiRuYW1lID0gJGludGVycG9sYXRlKGF0dHJzLm5hbWUgfHwgYXR0cnMubmdGb3JtIHx8ICcnKSgkc2NvcGUpO1xuICBmb3JtLiRkaXJ0eSA9IGZhbHNlO1xuICBmb3JtLiRwcmlzdGluZSA9IHRydWU7XG4gIGZvcm0uJHZhbGlkID0gdHJ1ZTtcbiAgZm9ybS4kaW52YWxpZCA9IGZhbHNlO1xuICBmb3JtLiRzdWJtaXR0ZWQgPSBmYWxzZTtcblxuICBwYXJlbnRGb3JtLiRhZGRDb250cm9sKGZvcm0pO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSb2xsYmFjayBhbGwgZm9ybSBjb250cm9scyBwZW5kaW5nIHVwZGF0ZXMgdG8gdGhlIGAkbW9kZWxWYWx1ZWAuXG4gICAqXG4gICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZVxuICAgKiBldmVudCBkZWZpbmVkIGluIGBuZy1tb2RlbC1vcHRpb25zYC4gVGhpcyBtZXRob2QgaXMgdHlwaWNhbGx5IG5lZWRlZCBieSB0aGUgcmVzZXQgYnV0dG9uIG9mXG4gICAqIGEgZm9ybSB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHBlbmQgdXBkYXRlcy5cbiAgICovXG4gIGZvcm0uJHJvbGxiYWNrVmlld1ZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaChjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhbGwgZm9ybSBjb250cm9scyBwZW5kaW5nIHVwZGF0ZXMgdG8gdGhlIGAkbW9kZWxWYWx1ZWAuXG4gICAqXG4gICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZVxuICAgKiBldmVudCBkZWZpbmVkIGluIGBuZy1tb2RlbC1vcHRpb25zYC4gVGhpcyBtZXRob2QgaXMgcmFyZWx5IG5lZWRlZCBhcyBgTmdNb2RlbENvbnRyb2xsZXJgXG4gICAqIHVzdWFsbHkgaGFuZGxlcyBjYWxsaW5nIHRoaXMgaW4gcmVzcG9uc2UgdG8gaW5wdXQgZXZlbnRzLlxuICAgKi9cbiAgZm9ybS4kY29tbWl0Vmlld1ZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaChjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkYWRkQ29udHJvbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSBjb250cm9sIHdpdGggdGhlIGZvcm0uXG4gICAqXG4gICAqIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIHRoZXkgYXJlIGxpbmtlZC5cbiAgICovXG4gIGZvcm0uJGFkZENvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgLy8gQnJlYWtpbmcgY2hhbmdlIC0gYmVmb3JlLCBpbnB1dHMgd2hvc2UgbmFtZSB3YXMgXCJoYXNPd25Qcm9wZXJ0eVwiIHdlcmUgcXVpZXRseSBpZ25vcmVkXG4gICAgLy8gYW5kIG5vdCBhZGRlZCB0byB0aGUgc2NvcGUuICBOb3cgd2UgdGhyb3cgYW4gZXJyb3IuXG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkoY29udHJvbC4kbmFtZSwgJ2lucHV0Jyk7XG4gICAgY29udHJvbHMucHVzaChjb250cm9sKTtcblxuICAgIGlmIChjb250cm9sLiRuYW1lKSB7XG4gICAgICBmb3JtW2NvbnRyb2wuJG5hbWVdID0gY29udHJvbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUHJpdmF0ZSBBUEk6IHJlbmFtZSBhIGZvcm0gY29udHJvbFxuICBmb3JtLiQkcmVuYW1lQ29udHJvbCA9IGZ1bmN0aW9uKGNvbnRyb2wsIG5ld05hbWUpIHtcbiAgICB2YXIgb2xkTmFtZSA9IGNvbnRyb2wuJG5hbWU7XG5cbiAgICBpZiAoZm9ybVtvbGROYW1lXSA9PT0gY29udHJvbCkge1xuICAgICAgZGVsZXRlIGZvcm1bb2xkTmFtZV07XG4gICAgfVxuICAgIGZvcm1bbmV3TmFtZV0gPSBjb250cm9sO1xuICAgIGNvbnRyb2wuJG5hbWUgPSBuZXdOYW1lO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHJlbW92ZUNvbnRyb2xcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlcmVnaXN0ZXIgYSBjb250cm9sIGZyb20gdGhlIGZvcm0uXG4gICAqXG4gICAqIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIHRoZXkgYXJlIGRlc3Ryb3llZC5cbiAgICovXG4gIGZvcm0uJHJlbW92ZUNvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgaWYgKGNvbnRyb2wuJG5hbWUgJiYgZm9ybVtjb250cm9sLiRuYW1lXSA9PT0gY29udHJvbCkge1xuICAgICAgZGVsZXRlIGZvcm1bY29udHJvbC4kbmFtZV07XG4gICAgfVxuICAgIGZvckVhY2goZm9ybS4kcGVuZGluZywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGZvcm0uJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0pO1xuICAgIGZvckVhY2goZm9ybS4kZXJyb3IsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICBmb3JtLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9KTtcblxuICAgIGFycmF5UmVtb3ZlKGNvbnRyb2xzLCBjb250cm9sKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSB2YWxpZGl0eSBvZiBhIGZvcm0gY29udHJvbC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBwYXJlbnQgZm9ybXMuXG4gICAqL1xuICBhZGRTZXRWYWxpZGl0eU1ldGhvZCh7XG4gICAgY3RybDogdGhpcyxcbiAgICAkZWxlbWVudDogZWxlbWVudCxcbiAgICBzZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGNvbnRyb2wpIHtcbiAgICAgIHZhciBsaXN0ID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgIGlmICghbGlzdCkge1xuICAgICAgICBvYmplY3RbcHJvcGVydHldID0gW2NvbnRyb2xdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbGlzdC5pbmRleE9mKGNvbnRyb2wpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbGlzdC5wdXNoKGNvbnRyb2wpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB1bnNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29udHJvbCkge1xuICAgICAgdmFyIGxpc3QgPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFycmF5UmVtb3ZlKGxpc3QsIGNvbnRyb2wpO1xuICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFyZW50Rm9ybTogcGFyZW50Rm9ybSxcbiAgICAkYW5pbWF0ZTogJGFuaW1hdGVcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gYSBkaXJ0eSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byBhZGQgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBhIGRpcnR5XG4gICAqIHN0YXRlIChuZy1kaXJ0eSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLlxuICAgKi9cbiAgZm9ybS4kc2V0RGlydHkgPSBmdW5jdGlvbigpIHtcbiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIGZvcm0uJGRpcnR5ID0gdHJ1ZTtcbiAgICBmb3JtLiRwcmlzdGluZSA9IGZhbHNlO1xuICAgIHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLWRpcnR5JyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIHRvIGl0cyBwcmlzdGluZVxuICAgKiBzdGF0ZSAobmctcHJpc3RpbmUgY2xhc3MpLiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIGFsbCB0aGUgY29udHJvbHMgY29udGFpbmVkXG4gICAqIGluIHRoaXMgZm9ybS5cbiAgICpcbiAgICogU2V0dGluZyBhIGZvcm0gYmFjayB0byBhIHByaXN0aW5lIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHdlIHdhbnQgdG8gJ3JldXNlJyBhIGZvcm0gYWZ0ZXJcbiAgICogc2F2aW5nIG9yIHJlc2V0dGluZyBpdC5cbiAgICovXG4gIGZvcm0uJHNldFByaXN0aW5lID0gZnVuY3Rpb24oKSB7XG4gICAgJGFuaW1hdGUuc2V0Q2xhc3MoZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MsIERJUlRZX0NMQVNTICsgJyAnICsgU1VCTUlUVEVEX0NMQVNTKTtcbiAgICBmb3JtLiRkaXJ0eSA9IGZhbHNlO1xuICAgIGZvcm0uJHByaXN0aW5lID0gdHJ1ZTtcbiAgICBmb3JtLiRzdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRzZXRQcmlzdGluZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFVudG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgdW50b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLXRvdWNoZWQnIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gY29udHJvbHMgdG8gdGhlaXJcbiAgICogdW50b3VjaGVkIHN0YXRlIChuZy11bnRvdWNoZWQgY2xhc3MpLlxuICAgKlxuICAgKiBTZXR0aW5nIGEgZm9ybSBjb250cm9scyBiYWNrIHRvIHRoZWlyIHVudG91Y2hlZCBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiBzZXR0aW5nIHRoZSBmb3JtXG4gICAqIGJhY2sgdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKi9cbiAgZm9ybS4kc2V0VW50b3VjaGVkID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaChjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kc2V0VW50b3VjaGVkKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0U3VibWl0dGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyBzdWJtaXR0ZWQgc3RhdGUuXG4gICAqL1xuICBmb3JtLiRzZXRTdWJtaXR0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBTVUJNSVRURURfQ0xBU1MpO1xuICAgIGZvcm0uJHN1Ym1pdHRlZCA9IHRydWU7XG4gICAgcGFyZW50Rm9ybS4kc2V0U3VibWl0dGVkKCk7XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdGb3JtXG4gKiBAcmVzdHJpY3QgRUFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBOZXN0YWJsZSBhbGlhcyBvZiB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gYGZvcm1gfSBkaXJlY3RpdmUuIEhUTUxcbiAqIGRvZXMgbm90IGFsbG93IG5lc3Rpbmcgb2YgZm9ybSBlbGVtZW50cy4gSXQgaXMgdXNlZnVsIHRvIG5lc3QgZm9ybXMsIGZvciBleGFtcGxlIGlmIHRoZSB2YWxpZGl0eSBvZiBhXG4gKiBzdWItZ3JvdXAgb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC5cbiAqXG4gKiBOb3RlOiB0aGUgcHVycG9zZSBvZiBgbmdGb3JtYCBpcyB0byBncm91cCBjb250cm9scyxcbiAqIGJ1dCBub3QgdG8gYmUgYSByZXBsYWNlbWVudCBmb3IgdGhlIGA8Zm9ybT5gIHRhZyB3aXRoIGFsbCBvZiBpdHMgY2FwYWJpbGl0aWVzXG4gKiAoZS5nLiBwb3N0aW5nIHRvIHRoZSBzZXJ2ZXIsIC4uLikuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0Zvcm18bmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50b1xuICogICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWQgc2NvcGUsIHVuZGVyIHRoaXMgbmFtZS5cbiAqXG4gKi9cblxuIC8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgZm9ybVxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSB0aGF0IGluc3RhbnRpYXRlc1xuICoge0BsaW5rIGZvcm0uRm9ybUNvbnRyb2xsZXIgRm9ybUNvbnRyb2xsZXJ9LlxuICpcbiAqIElmIHRoZSBgbmFtZWAgYXR0cmlidXRlIGlzIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciBpcyBwdWJsaXNoZWQgb250byB0aGUgY3VycmVudCBzY29wZSB1bmRlclxuICogdGhpcyBuYW1lLlxuICpcbiAqICMgQWxpYXM6IHtAbGluayBuZy5kaXJlY3RpdmU6bmdGb3JtIGBuZ0Zvcm1gfVxuICpcbiAqIEluIEFuZ3VsYXIgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZFxuICogZm9ybXMgYXJlIHZhbGlkIGFzIHdlbGwuIEhvd2V2ZXIsIGJyb3dzZXJzIGRvIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGA8Zm9ybT5gIGVsZW1lbnRzLCBzb1xuICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSB3aGljaCBiZWhhdmVzIGlkZW50aWNhbGx5IHRvXG4gKiBgPGZvcm0+YCBidXQgY2FuIGJlIG5lc3RlZC4gIFRoaXMgYWxsb3dzIHlvdSB0byBoYXZlIG5lc3RlZCBmb3Jtcywgd2hpY2ggaXMgdmVyeSB1c2VmdWwgd2hlblxuICogdXNpbmcgQW5ndWxhciB2YWxpZGF0aW9uIGRpcmVjdGl2ZXMgaW4gZm9ybXMgdGhhdCBhcmUgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIHVzaW5nIHRoZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSBkaXJlY3RpdmUuIFNpbmNlIHlvdSBjYW5ub3QgZHluYW1pY2FsbHkgZ2VuZXJhdGUgdGhlIGBuYW1lYFxuICogYXR0cmlidXRlIG9mIGlucHV0IGVsZW1lbnRzIHVzaW5nIGludGVycG9sYXRpb24sIHlvdSBoYXZlIHRvIHdyYXAgZWFjaCBzZXQgb2YgcmVwZWF0ZWQgaW5wdXRzIGluIGFuXG4gKiBgbmdGb3JtYCBkaXJlY3RpdmUgYW5kIG5lc3QgdGhlc2UgaW4gYW4gb3V0ZXIgYGZvcm1gIGVsZW1lbnQuXG4gKlxuICpcbiAqICMgQ1NTIGNsYXNzZXNcbiAqICAtIGBuZy12YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHZhbGlkLlxuICogIC0gYG5nLWludmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBpbnZhbGlkLlxuICogIC0gYG5nLXByaXN0aW5lYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgcHJpc3RpbmUuXG4gKiAgLSBgbmctZGlydHlgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBkaXJ0eS5cbiAqICAtIGBuZy1zdWJtaXR0ZWRgIGlzIHNldCBpZiB0aGUgZm9ybSB3YXMgc3VibWl0dGVkLlxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLlxuICpcbiAqXG4gKiAjIFN1Ym1pdHRpbmcgYSBmb3JtIGFuZCBwcmV2ZW50aW5nIHRoZSBkZWZhdWx0IGFjdGlvblxuICpcbiAqIFNpbmNlIHRoZSByb2xlIG9mIGZvcm1zIGluIGNsaWVudC1zaWRlIEFuZ3VsYXIgYXBwbGljYXRpb25zIGlzIGRpZmZlcmVudCB0aGFuIGluIGNsYXNzaWNhbFxuICogcm91bmR0cmlwIGFwcHMsIGl0IGlzIGRlc2lyYWJsZSBmb3IgdGhlIGJyb3dzZXIgbm90IHRvIHRyYW5zbGF0ZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGludG8gYSBmdWxsXG4gKiBwYWdlIHJlbG9hZCB0aGF0IHNlbmRzIHRoZSBkYXRhIHRvIHRoZSBzZXJ2ZXIuIEluc3RlYWQgc29tZSBqYXZhc2NyaXB0IGxvZ2ljIHNob3VsZCBiZSB0cmlnZ2VyZWRcbiAqIHRvIGhhbmRsZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGluIGFuIGFwcGxpY2F0aW9uLXNwZWNpZmljIHdheS5cbiAqXG4gKiBGb3IgdGhpcyByZWFzb24sIEFuZ3VsYXIgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uIChmb3JtIHN1Ym1pc3Npb24gdG8gdGhlIHNlcnZlcikgdW5sZXNzIHRoZVxuICogYDxmb3JtPmAgZWxlbWVudCBoYXMgYW4gYGFjdGlvbmAgYXR0cmlidXRlIHNwZWNpZmllZC5cbiAqXG4gKiBZb3UgY2FuIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB0d28gd2F5cyB0byBzcGVjaWZ5IHdoYXQgamF2YXNjcmlwdCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuXG4gKiBhIGZvcm0gaXMgc3VibWl0dGVkOlxuICpcbiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1N1Ym1pdCBuZ1N1Ym1pdH0gZGlyZWN0aXZlIG9uIHRoZSBmb3JtIGVsZW1lbnRcbiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZSBvbiB0aGUgZmlyc3RcbiAgKiAgYnV0dG9uIG9yIGlucHV0IGZpZWxkIG9mIHR5cGUgc3VibWl0IChpbnB1dFt0eXBlPXN1Ym1pdF0pXG4gKlxuICogVG8gcHJldmVudCBkb3VibGUgZXhlY3V0aW9uIG9mIHRoZSBoYW5kbGVyLCB1c2Ugb25seSBvbmUgb2YgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9XG4gKiBvciB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlcy5cbiAqIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgZm9sbG93aW5nIGZvcm0gc3VibWlzc2lvbiBydWxlcyBpbiB0aGUgSFRNTCBzcGVjaWZpY2F0aW9uOlxuICpcbiAqIC0gSWYgYSBmb3JtIGhhcyBvbmx5IG9uZSBpbnB1dCBmaWVsZCB0aGVuIGhpdHRpbmcgZW50ZXIgaW4gdGhpcyBmaWVsZCB0cmlnZ2VycyBmb3JtIHN1Ym1pdFxuICogKGBuZ1N1Ym1pdGApXG4gKiAtIGlmIGEgZm9ybSBoYXMgMisgaW5wdXQgZmllbGRzIGFuZCBubyBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuIGhpdHRpbmcgZW50ZXJcbiAqIGRvZXNuJ3QgdHJpZ2dlciBzdWJtaXRcbiAqIC0gaWYgYSBmb3JtIGhhcyBvbmUgb3IgbW9yZSBpbnB1dCBmaWVsZHMgYW5kIG9uZSBvciBtb3JlIGJ1dHRvbnMgb3IgaW5wdXRbdHlwZT1zdWJtaXRdIHRoZW5cbiAqIGhpdHRpbmcgZW50ZXIgaW4gYW55IG9mIHRoZSBpbnB1dCBmaWVsZHMgd2lsbCB0cmlnZ2VyIHRoZSBjbGljayBoYW5kbGVyIG9uIHRoZSAqZmlyc3QqIGJ1dHRvbiBvclxuICogaW5wdXRbdHlwZT1zdWJtaXRdIChgbmdDbGlja2ApICphbmQqIGEgc3VibWl0IGhhbmRsZXIgb24gdGhlIGVuY2xvc2luZyBmb3JtIChgbmdTdWJtaXRgKVxuICpcbiAqIEFueSBwZW5kaW5nIGBuZ01vZGVsT3B0aW9uc2AgY2hhbmdlcyB3aWxsIHRha2UgcGxhY2UgaW1tZWRpYXRlbHkgd2hlbiBhbiBlbmNsb3NpbmcgZm9ybSBpc1xuICogc3VibWl0dGVkLiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGBcbiAqIHRvIGhhdmUgYWNjZXNzIHRvIHRoZSB1cGRhdGVkIG1vZGVsLlxuICpcbiAqICMjIEFuaW1hdGlvbiBIb29rc1xuICpcbiAqIEFuaW1hdGlvbnMgaW4gbmdGb3JtIGFyZSB0cmlnZ2VyZWQgd2hlbiBhbnkgb2YgdGhlIGFzc29jaWF0ZWQgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkLlxuICogVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCwgYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnlcbiAqIG90aGVyIHZhbGlkYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCB3aXRoaW4gdGhlIGZvcm0uIEFuaW1hdGlvbnMgaW4gbmdGb3JtIGFyZSBzaW1pbGFyIHRvIGhvd1xuICogdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGxcbiAqIGFzIEpTIGFuaW1hdGlvbnMuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhIGZvcm0gZWxlbWVudFxuICogdGhhdCBoYXMgYmVlbiByZW5kZXJlZCBhcyBpbnZhbGlkIGFmdGVyIGl0IGhhcyBiZWVuIHZhbGlkYXRlZDpcbiAqXG4gKiA8cHJlPlxuICogLy9iZSBzdXJlIHRvIGluY2x1ZGUgbmdBbmltYXRlIGFzIGEgbW9kdWxlIHRvIGhvb2sgaW50byBtb3JlXG4gKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnNcbiAqIC5teS1mb3JtIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICogfVxuICogLm15LWZvcm0ubmctaW52YWxpZCB7XG4gKiAgIGJhY2tncm91bmQ6IHJlZDtcbiAqICAgY29sb3I6d2hpdGU7XG4gKiB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiZm9ybUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdmb3JtRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRm9ybUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS51c2VyVHlwZSA9ICdndWVzdCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgIC5teS1mb3JtIHtcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIC5teS1mb3JtLm5nLWludmFsaWQge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgfVxuICAgICAgIDwvc3R5bGU+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJGb3JtQ29udHJvbGxlclwiIGNsYXNzPVwibXktZm9ybVwiPlxuICAgICAgICAgdXNlclR5cGU6IDxpbnB1dCBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cInVzZXJUeXBlXCIgcmVxdWlyZWQ+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5SZXF1aXJlZCE8L3NwYW4+PGJyPlxuICAgICAgICAgPHR0PnVzZXJUeXBlID0ge3t1c2VyVHlwZX19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxicj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdXNlclR5cGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXJUeXBlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIHVzZXJJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXJUeXBlJykpO1xuXG4gICAgICAgICAgdXNlcklucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlcklucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3VzZXJUeXBlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG9cbiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuXG4gKi9cbnZhciBmb3JtRGlyZWN0aXZlRmFjdG9yeSA9IGZ1bmN0aW9uKGlzTmdGb3JtKSB7XG4gIHJldHVybiBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcbiAgICB2YXIgZm9ybURpcmVjdGl2ZSA9IHtcbiAgICAgIG5hbWU6ICdmb3JtJyxcbiAgICAgIHJlc3RyaWN0OiBpc05nRm9ybSA/ICdFQUMnIDogJ0UnLFxuICAgICAgY29udHJvbGxlcjogRm9ybUNvbnRyb2xsZXIsXG4gICAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0Zvcm1Db21waWxlKGZvcm1FbGVtZW50KSB7XG4gICAgICAgIC8vIFNldHVwIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2xcbiAgICAgICAgZm9ybUVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKFZBTElEX0NMQVNTKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByZTogZnVuY3Rpb24gbmdGb3JtUHJlTGluayhzY29wZSwgZm9ybUVsZW1lbnQsIGF0dHIsIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIC8vIGlmIGBhY3Rpb25gIGF0dHIgaXMgbm90IHByZXNlbnQgb24gdGhlIGZvcm0sIHByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uIChzdWJtaXNzaW9uKVxuICAgICAgICAgICAgaWYgKCEoJ2FjdGlvbicgaW4gYXR0cikpIHtcbiAgICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdXNlIGpxIGV2ZW50cyBiZWNhdXNlIGlmIGEgZm9ybSBpcyBkZXN0cm95ZWQgZHVyaW5nIHN1Ym1pc3Npb24gdGhlIGRlZmF1bHRcbiAgICAgICAgICAgICAgLy8gYWN0aW9uIGlzIG5vdCBwcmV2ZW50ZWQuIHNlZSAjMTIzOFxuICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAvLyBJRSA5IGlzIG5vdCBhZmZlY3RlZCBiZWNhdXNlIGl0IGRvZXNuJ3QgZmlyZSBhIHN1Ym1pdCBldmVudCBhbmQgdHJ5IHRvIGRvIGEgZnVsbFxuICAgICAgICAgICAgICAvLyBwYWdlIHJlbG9hZCBpZiB0aGUgZm9ybSB3YXMgZGVzdHJveWVkIGJ5IHN1Ym1pc3Npb24gb2YgdGhlIGZvcm0gdmlhIGEgY2xpY2sgaGFuZGxlclxuICAgICAgICAgICAgICAvLyBvbiBhIGJ1dHRvbiBpbiB0aGUgZm9ybS4gTG9va3MgbGlrZSBhbiBJRTkgc3BlY2lmaWMgYnVnLlxuICAgICAgICAgICAgICB2YXIgaGFuZGxlRm9ybVN1Ym1pc3Npb24gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kc2V0U3VibWl0dGVkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdFxuICAgICAgICAgICAgICAgICAgPyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgICA6IGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7IC8vIElFXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuXG4gICAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgdGhlIHByZXZlbnREZWZhdWx0IGxpc3RlbmVyIHNvIHRoYXQgd2UgZG9uJ3Qgbm90IGxlYWsgbWVtb3J5IGJ1dCBpbiBhXG4gICAgICAgICAgICAgIC8vIHdheSB0aGF0IHdpbGwgYWNoaWV2ZSB0aGUgcHJldmVudGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJlbnRGb3JtQ3RybCA9IGNvbnRyb2xsZXIuJCRwYXJlbnRGb3JtLFxuICAgICAgICAgICAgICAgIGFsaWFzID0gY29udHJvbGxlci4kbmFtZTtcblxuICAgICAgICAgICAgaWYgKGFsaWFzKSB7XG4gICAgICAgICAgICAgIHNldHRlcihzY29wZSwgYWxpYXMsIGNvbnRyb2xsZXIsIGFsaWFzKTtcbiAgICAgICAgICAgICAgYXR0ci4kb2JzZXJ2ZShhdHRyLm5hbWUgPyAnbmFtZScgOiAnbmdGb3JtJywgZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxpYXMgPT09IG5ld1ZhbHVlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBhbGlhcywgdW5kZWZpbmVkLCBhbGlhcyk7XG4gICAgICAgICAgICAgICAgYWxpYXMgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGFsaWFzLCBjb250cm9sbGVyLCBhbGlhcyk7XG4gICAgICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJCRyZW5hbWVDb250cm9sKGNvbnRyb2xsZXIsIGFsaWFzKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJHJlbW92ZUNvbnRyb2woY29udHJvbGxlcik7XG4gICAgICAgICAgICAgIGlmIChhbGlhcykge1xuICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgYWxpYXMsIHVuZGVmaW5lZCwgYWxpYXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGV4dGVuZChjb250cm9sbGVyLCBudWxsRm9ybUN0cmwpOyAvL3N0b3AgcHJvcGFnYXRpbmcgY2hpbGQgZGVzdHJ1Y3Rpb24gaGFuZGxlcnMgdXB3YXJkc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybURpcmVjdGl2ZTtcbiAgfV07XG59O1xuXG52YXIgZm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KCk7XG52YXIgbmdGb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkodHJ1ZSk7XG5cbi8qIGdsb2JhbCBWQUxJRF9DTEFTUzogdHJ1ZSxcbiAgSU5WQUxJRF9DTEFTUzogdHJ1ZSxcbiAgUFJJU1RJTkVfQ0xBU1M6IHRydWUsXG4gIERJUlRZX0NMQVNTOiB0cnVlLFxuICBVTlRPVUNIRURfQ0xBU1M6IHRydWUsXG4gIFRPVUNIRURfQ0xBU1M6IHRydWUsXG4qL1xuXG4vLyBSZWdleCBjb2RlIGlzIG9idGFpbmVkIGZyb20gU086IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxNDMwNzAvamF2YXNjcmlwdC1yZWdleC1pc28tZGF0ZXRpbWUjYW5zd2VyLTMxNDMyMzFcbnZhciBJU09fREFURV9SRUdFWFAgPSAvXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKS87XG52YXIgVVJMX1JFR0VYUCA9IC9eKGZ0cHxodHRwfGh0dHBzKTpcXC9cXC8oXFx3Kzp7MCwxfVxcdypAKT8oXFxTKykoOlswLTldKyk/KFxcL3xcXC8oW1xcdyMhOi4/Kz0mJUAhXFwtXFwvXSkpPyQvO1xudmFyIEVNQUlMX1JFR0VYUCA9IC9eW2EtejAtOSEjJCUmJyorXFwvPT9eX2B7fH1+Li1dK0BbYS16MC05XShbYS16MC05LV0qW2EtejAtOV0pPyhcXC5bYS16MC05XShbYS16MC05LV0qW2EtejAtOV0pPykqJC9pO1xudmFyIE5VTUJFUl9SRUdFWFAgPSAvXlxccyooXFwtfFxcKyk/KFxcZCt8KFxcZCooXFwuXFxkKikpKVxccyokLztcbnZhciBEQVRFX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSkkLztcbnZhciBEQVRFVElNRUxPQ0FMX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZFxcZCktKFxcZFxcZClUKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC87XG52YXIgV0VFS19SRUdFWFAgPSAvXihcXGR7NH0pLVcoXFxkXFxkKSQvO1xudmFyIE1PTlRIX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZFxcZCkkLztcbnZhciBUSU1FX1JFR0VYUCA9IC9eKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC87XG52YXIgREVGQVVMVF9SRUdFWFAgPSAvKFxccyt8XilkZWZhdWx0KFxccyt8JCkvO1xuXG52YXIgJG5nTW9kZWxNaW5FcnIgPSBuZXcgbWluRXJyKCduZ01vZGVsJyk7XG5cbnZhciBpbnB1dFR5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0ZXh0XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcsIGluaGVyaXRlZCBieSBtb3N0IG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRzLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGVcbiAgICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvclxuICAgKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICAgKiAgICBUaGlzIHBhcmFtZXRlciBpcyBpZ25vcmVkIGZvciBpbnB1dFt0eXBlPXBhc3N3b3JkXSBjb250cm9scywgd2hpY2ggd2lsbCBuZXZlciB0cmltIHRoZVxuICAgKiAgICBpbnB1dC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJ0ZXh0LWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInRleHRJbnB1dEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0ZXh0SW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2d1ZXN0JztcbiAgICAgICAgICAgICAgICRzY29wZS53b3JkID0gL15cXHMqXFx3KlxccyokLztcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgU2luZ2xlIHdvcmQ6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmctcGF0dGVybj1cIndvcmRcIiByZXF1aXJlZCBuZy10cmltPVwiZmFsc2VcIj5cbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucGF0dGVyblwiPlxuICAgICAgICAgICAgIFNpbmdsZSB3b3JkIG9ubHkhPC9zcGFuPlxuXG4gICAgICAgICAgIDx0dD50ZXh0ID0ge3t0ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCd0ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG11bHRpIHdvcmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnaGVsbG8gd29ybGQnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAndGV4dCc6IHRleHRJbnB1dFR5cGUsXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgaW5wdXRcbiAgICAgKiBAbmFtZSBpbnB1dFtkYXRlXVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSW5wdXQgd2l0aCBkYXRlIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICAqIGRhdGUgZm9ybWF0ICh5eXl5LU1NLWRkKSwgZm9yIGV4YW1wbGU6IGAyMDA5LTAxLTA2YC4gU2luY2UgbWFueVxuICAgICAqIG1vZGVybiBicm93c2VycyBkbyBub3QgeWV0IHN1cHBvcnQgdGhpcyBpbnB1dCB0eXBlLCBpdCBpcyBpbXBvcnRhbnQgdG8gcHJvdmlkZSBjdWVzIHRvIHVzZXJzIG9uIHRoZVxuICAgICAqIGV4cGVjdGVkIGlucHV0IGZvcm1hdCB2aWEgYSBwbGFjZWhvbGRlciBvciBsYWJlbC5cbiAgICAgKlxuICAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGFcbiAgICAgKiB2YWxpZCBJU08gZGF0ZSBzdHJpbmcgKHl5eXktTU0tZGQpLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlXG4gICAgICogYSB2YWxpZCBJU08gZGF0ZSBzdHJpbmcgKHl5eXktTU0tZGQpLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwiZGF0ZS1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJkYXRlSW5wdXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZGF0ZUlucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnZhbHVlID0gbmV3IERhdGUoMjAxMywgOSwgMjIpO1xuICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgICBQaWNrIGEgZGF0ZSBpbiAyMDEzOlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ2YWx1ZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTS1kZFwiIG1pbj1cIjIwMTMtMDEtMDFcIiBtYXg9XCIyMDEzLTEyLTMxXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5kYXRlXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e3ZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRcIicpKTtcbiAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKTtcblxuICAgICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMC0yMicpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMScpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgICAqL1xuICAnZGF0ZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ2RhdGUnLCBEQVRFX1JFR0VYUCxcbiAgICAgICAgIGNyZWF0ZURhdGVQYXJzZXIoREFURV9SRUdFWFAsIFsneXl5eScsICdNTScsICdkZCddKSxcbiAgICAgICAgICd5eXl5LU1NLWRkJyksXG5cbiAgIC8qKlxuICAgICogQG5nZG9jIGlucHV0XG4gICAgKiBAbmFtZSBpbnB1dFtkYXRlVGltZUxvY2FsXVxuICAgICpcbiAgICAqIEBkZXNjcmlwdGlvblxuICAgICogSW5wdXQgd2l0aCBkYXRldGltZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAqIGxvY2FsIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcyksIGZvciBleGFtcGxlOiBgMjAxMC0xMi0yOFQxNDo1NzowMGAuXG4gICAgKlxuICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgKlxuICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICpcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGFcbiAgICAqIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QgYmVcbiAgICAqIGEgdmFsaWQgSVNPIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcykuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAqXG4gICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJkYXRldGltZWxvY2FsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImRhdGVFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkYXRlRXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUudmFsdWUgPSBuZXcgRGF0ZSgyMDEwLCAxMSwgMjgsIDE0LCA1Nyk7XG4gICAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgIFBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzpcbiAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ2YWx1ZVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRUSEg6bW06c3NcIiBtaW49XCIyMDAxLTAxLTAxVDAwOjAwOjAwXCIgbWF4PVwiMjAxMy0xMi0zMVQwMDowMDowMFwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZGF0ZXRpbWVsb2NhbFwiPlxuICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDx0dD52YWx1ZSA9IHt7dmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRUSEg6bW06c3NcIn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRUSEg6bW06c3NcIicpKTtcbiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTAtMTItMjhUMTQ6NTc6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEtMDFUMjM6NTk6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gICAgKi9cbiAgJ2RhdGV0aW1lLWxvY2FsJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnZGF0ZXRpbWVsb2NhbCcsIERBVEVUSU1FTE9DQUxfUkVHRVhQLFxuICAgICAgY3JlYXRlRGF0ZVBhcnNlcihEQVRFVElNRUxPQ0FMX1JFR0VYUCwgWyd5eXl5JywgJ01NJywgJ2RkJywgJ0hIJywgJ21tJywgJ3NzJywgJ3NzcyddKSxcbiAgICAgICd5eXl5LU1NLWRkVEhIOm1tOnNzLnNzcycpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbdGltZV1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElucHV0IHdpdGggdGltZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgKiBsb2NhbCB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLCBmb3IgZXhhbXBsZTogYDE0OjU3OjAwYC4gTW9kZWwgbXVzdCBiZSBhIERhdGUgb2JqZWN0LiBUaGlzIGJpbmRpbmcgd2lsbCBhbHdheXMgb3V0cHV0IGFcbiAgICogRGF0ZSBvYmplY3QgdG8gdGhlIG1vZGVsIG9mIEphbnVhcnkgMSwgMTk3MCwgb3IgbG9jYWwgZGF0ZSBgbmV3IERhdGUoMTk3MCwgMCwgMSwgSEgsIG1tLCBzcylgLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgKlxuICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGFcbiAgICogdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlIGFcbiAgICogdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJ0aW1lLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInRpbWVFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3RpbWVFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLnZhbHVlID0gbmV3IERhdGUoMTk3MCwgMCwgMSwgMTQsIDU3LCAwKTtcbiAgICAgICAgfV0pO1xuICAgICA8L3NjcmlwdD5cbiAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICBQaWNrIGEgYmV0d2VlbiA4YW0gYW5kIDVwbTpcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0aW1lXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cInZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiSEg6bW06c3NcIiBtaW49XCIwODowMDowMFwiIG1heD1cIjE3OjAwOjAwXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci50aW1lXCI+XG4gICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZSB8IGRhdGU6IFwiSEg6bW06c3NcIn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgIDwvZm9ybT5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKTtcblxuICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjM6NTk6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3RpbWUnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCd0aW1lJywgVElNRV9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKFRJTUVfUkVHRVhQLCBbJ0hIJywgJ21tJywgJ3NzJywgJ3NzcyddKSxcbiAgICAgJ0hIOm1tOnNzLnNzcycpLFxuXG4gICAvKipcbiAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICogQG5hbWUgaW5wdXRbd2Vla11cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIElucHV0IHdpdGggd2Vlay1vZi10aGUteWVhciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbiB0byBEYXRlLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICogdGhlIEhUTUw1IHdlZWsgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICogd2VlayBmb3JtYXQgKHl5eXktVyMjKSwgZm9yIGV4YW1wbGU6IGAyMDEzLVcwMmAuXG4gICAgKlxuICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgKlxuICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICpcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGFcbiAgICAqIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QgYmVcbiAgICAqIGEgdmFsaWQgSVNPIHdlZWsgZm9ybWF0ICh5eXl5LVcjIykuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAqXG4gICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJ3ZWVrLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIndlZWtFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnd2Vla0V4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudmFsdWUgPSBuZXcgRGF0ZSgyMDEzLCAwLCAzKTtcbiAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgIFBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzpcbiAgICAgICAgPGlucHV0IGlkPVwiZXhhbXBsZUlucHV0XCIgdHlwZT1cIndlZWtcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cInZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiWVlZWS1XIyNcIiBtaW49XCIyMDEyLVczMlwiIG1heD1cIjIwMTMtVzUyXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci53ZWVrXCI+XG4gICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZSB8IGRhdGU6IFwieXl5eS1Xd3dcIn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUgfCBkYXRlOiBcInl5eXktV3d3XCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKTtcblxuICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEzLVcwMScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS1XMDEnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gICAgKi9cbiAgJ3dlZWsnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCd3ZWVrJywgV0VFS19SRUdFWFAsIHdlZWtQYXJzZXIsICd5eXl5LVd3dycpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbbW9udGhdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJbnB1dCB3aXRoIG1vbnRoIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgKiB0aGUgSFRNTDUgbW9udGggaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgKiBtb250aCBmb3JtYXQgKHl5eXktTU0pLCBmb3IgZXhhbXBsZTogYDIwMDktMDFgLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgKiBJZiB0aGUgbW9kZWwgaXMgbm90IHNldCB0byB0aGUgZmlyc3Qgb2YgdGhlIG1vbnRoLCB0aGUgbmV4dCB2aWV3IHRvIG1vZGVsIHVwZGF0ZSB3aWxsIHNldCBpdFxuICAgKiB0byB0aGUgZmlyc3Qgb2YgdGhlIG1vbnRoLlxuICAgKlxuICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlXG4gICAqIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0XG4gICAqIGJlIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJtb250aC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJtb250aEV4YW1wbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnbW9udGhFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLnZhbHVlID0gbmV3IERhdGUoMjAxMywgOSwgMSk7XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICBQaWNrIGEgbW9udGggaW50IDIwMTM6XG4gICAgICAgPGlucHV0IGlkPVwiZXhhbXBsZUlucHV0XCIgdHlwZT1cIm1vbnRoXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ2YWx1ZVwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5eXl5LU1NXCIgbWluPVwiMjAxMy0wMVwiIG1heD1cIjIwMTMtMTJcIiByZXF1aXJlZCAvPlxuICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubW9udGhcIj5cbiAgICAgICAgICBOb3QgYSB2YWxpZCBtb250aCE8L3NwYW4+XG4gICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZSB8IGRhdGU6IFwieXl5eS1NTVwifX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICA8L2Zvcm0+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKTtcblxuICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEzLTEwJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMDE1LTAxJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcbiAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdtb250aCc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ21vbnRoJywgTU9OVEhfUkVHRVhQLFxuICAgICBjcmVhdGVEYXRlUGFyc2VyKE1PTlRIX1JFR0VYUCwgWyd5eXl5JywgJ01NJ10pLFxuICAgICAneXl5eS1NTScpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbbnVtYmVyXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGV4dCBpbnB1dCB3aXRoIG51bWJlciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gU2V0cyB0aGUgYG51bWJlcmAgdmFsaWRhdGlvblxuICAgKiBlcnJvciBpZiBub3QgYSB2YWxpZCBudW1iZXIuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIG51bWJlciwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZVxuICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yXG4gICAqICAgIHBhdHRlcm5zIGRlZmluZWQgYXMgc2NvcGUgZXhwcmVzc2lvbnMuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cIm51bWJlci1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJudW1iZXJFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbnVtYmVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSAxMjtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgTnVtYmVyOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBtaW49XCIwXCIgbWF4PVwiOTlcIiByZXF1aXJlZD5cbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubnVtYmVyXCI+XG4gICAgICAgICAgICAgTm90IHZhbGlkIG51bWJlciE8L3NwYW4+XG4gICAgICAgICAgIDx0dD52YWx1ZSA9IHt7dmFsdWV9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCd2YWx1ZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMTInKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJzEyMycpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnbnVtYmVyJzogbnVtYmVySW5wdXRUeXBlLFxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt1cmxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggVVJMIHZhbGlkYXRpb24uIFNldHMgdGhlIGB1cmxgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBjb250ZW50IGlzIG5vdCBhXG4gICAqIHZhbGlkIFVSTC5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIGBpbnB1dFt1cmxdYCB1c2VzIGEgcmVnZXggdG8gdmFsaWRhdGUgdXJscyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiwgeW91IGNhbiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeVxuICAgKiB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlXG4gICAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3JcbiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwidXJsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInVybEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd1cmxFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2h0dHA6Ly9nb29nbGUuY29tJztcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgVVJMOiA8aW5wdXQgdHlwZT1cInVybFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidGV4dFwiIHJlcXVpcmVkPlxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci51cmxcIj5cbiAgICAgICAgICAgICBOb3QgdmFsaWQgdXJsITwvc3Bhbj5cbiAgICAgICAgICAgPHR0PnRleHQgPSB7e3RleHR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci51cmwgPSB7eyEhbXlGb3JtLiRlcnJvci51cmx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCd0ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignaHR0cDovL2dvb2dsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYm94Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3VybCc6IHVybElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbZW1haWxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbFxuICAgKiBhZGRyZXNzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W2VtYWlsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIGVtYWlsIGFkZHJlc3NlcyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiAoZS5nLiByZXF1aXJpbmcgYSB0b3AtbGV2ZWwgZG9tYWluKSwgeW91IGNhblxuICAgKiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeSB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlXG4gICAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3JcbiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwiZW1haWwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiZW1haWxFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZW1haWxFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ21lQGV4YW1wbGUuY29tJztcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICAgIEVtYWlsOiA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ0ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLmVtYWlsXCI+XG4gICAgICAgICAgICAgICBOb3QgdmFsaWQgZW1haWwhPC9zcGFuPlxuICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3t0ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLmVtYWlsID0ge3shIW15Rm9ybS4kZXJyb3IuZW1haWx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3RleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdtZUBleGFtcGxlLmNvbScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCBlbWFpbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCd4eHgnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnZW1haWwnOiBlbWFpbElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbcmFkaW9dXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIHJhZGlvIGJ1dHRvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nVmFsdWUgQW5ndWxhciBleHByZXNzaW9uIHdoaWNoIHNldHMgdGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZFxuICAgKiAgICBiZSBzZXQgd2hlbiBzZWxlY3RlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJyYWRpby1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJyYWRpb0V4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYWRpb0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmNvbG9yID0gJ2JsdWUnO1xuICAgICAgICAgICAgICAgJHNjb3BlLnNwZWNpYWxWYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIjEyMzQ1XCIsXG4gICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJncmVlblwiXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvclwiIHZhbHVlPVwicmVkXCI+ICBSZWQgPGJyLz5cbiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3JcIiBuZy12YWx1ZT1cInNwZWNpYWxWYWx1ZVwiPiBHcmVlbiA8YnIvPlxuICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvclwiIHZhbHVlPVwiYmx1ZVwiPiBCbHVlIDxici8+XG4gICAgICAgICAgIDx0dD5jb2xvciA9IHt7Y29sb3IgfCBqc29ufX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIE5vdGUgdGhhdCBgbmctdmFsdWU9XCJzcGVjaWFsVmFsdWVcImAgc2V0cyByYWRpbyBpdGVtJ3MgdmFsdWUgdG8gYmUgdGhlIHZhbHVlIG9mIGAkc2NvcGUuc3BlY2lhbFZhbHVlYC5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IGVsZW1lbnQoYnkuYmluZGluZygnY29sb3InKSk7XG5cbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbignYmx1ZScpO1xuXG4gICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnY29sb3InKSkuZ2V0KDApLmNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbigncmVkJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdyYWRpbyc6IHJhZGlvSW5wdXRUeXBlLFxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtjaGVja2JveF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEhUTUwgY2hlY2tib3guXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb249fSBuZ1RydWVWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb249fSBuZ0ZhbHNlVmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBub3Qgc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImNoZWNrYm94LWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImNoZWNrYm94RXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NoZWNrYm94RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUudmFsdWUxID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICRzY29wZS52YWx1ZTIgPSAnWUVTJ1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICBWYWx1ZTE6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInZhbHVlMVwiPiA8YnIvPlxuICAgICAgICAgICBWYWx1ZTI6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInZhbHVlMlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5nLXRydWUtdmFsdWU9XCInWUVTJ1wiIG5nLWZhbHNlLXZhbHVlPVwiJ05PJ1wiPiA8YnIvPlxuICAgICAgICAgICA8dHQ+dmFsdWUxID0ge3t2YWx1ZTF9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMiA9IHt7dmFsdWUyfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICBpdCgnc2hvdWxkIGNoYW5nZSBzdGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlMSA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUxJykpO1xuICAgICAgICAgICAgdmFyIHZhbHVlMiA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUyJykpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdZRVMnKTtcblxuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUxJykpLmNsaWNrKCk7XG4gICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZTInKSkuY2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbHVlMS5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ05PJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdjaGVja2JveCc6IGNoZWNrYm94SW5wdXRUeXBlLFxuXG4gICdoaWRkZW4nOiBub29wLFxuICAnYnV0dG9uJzogbm9vcCxcbiAgJ3N1Ym1pdCc6IG5vb3AsXG4gICdyZXNldCc6IG5vb3AsXG4gICdmaWxlJzogbm9vcFxufTtcblxuZnVuY3Rpb24gc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCkge1xuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0ZXh0SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG59XG5cbmZ1bmN0aW9uIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICB2YXIgcGxhY2Vob2xkZXIgPSBlbGVtZW50WzBdLnBsYWNlaG9sZGVyLCBub2V2ZW50ID0ge307XG4gIHZhciB0eXBlID0gbG93ZXJjYXNlKGVsZW1lbnRbMF0udHlwZSk7XG5cbiAgLy8gSW4gY29tcG9zaXRpb24gbW9kZSwgdXNlcnMgYXJlIHN0aWxsIGlucHV0aW5nIGludGVybWVkaWF0ZSB0ZXh0IGJ1ZmZlcixcbiAgLy8gaG9sZCB0aGUgbGlzdGVuZXIgdW50aWwgY29tcG9zaXRpb24gaXMgZG9uZS5cbiAgLy8gTW9yZSBhYm91dCBjb21wb3NpdGlvbiBldmVudHM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Db21wb3NpdGlvbkV2ZW50XG4gIGlmICghJHNuaWZmZXIuYW5kcm9pZCkge1xuICAgIHZhciBjb21wb3NpbmcgPSBmYWxzZTtcblxuICAgIGVsZW1lbnQub24oJ2NvbXBvc2l0aW9uc3RhcnQnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICBjb21wb3NpbmcgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgZWxlbWVudC5vbignY29tcG9zaXRpb25lbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgaWYgKGNvbXBvc2luZykgcmV0dXJuO1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsKCksXG4gICAgICAgIGV2ZW50ID0gZXYgJiYgZXYudHlwZTtcblxuICAgIC8vIElFICgxMSBhbmQgdW5kZXIpIHNlZW0gdG8gZW1pdCBhbiAnaW5wdXQnIGV2ZW50IGlmIHRoZSBwbGFjZWhvbGRlciB2YWx1ZSBjaGFuZ2VzLlxuICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gZGlydHkgdGhlIHZhbHVlIHdoZW4gdGhpcyBoYXBwZW5zLCBzbyB3ZSBhYm9ydCBoZXJlLiBVbmZvcnR1bmF0ZWx5LFxuICAgIC8vIElFIGFsc28gc2VuZHMgaW5wdXQgZXZlbnRzIGZvciBvdGhlciBub24taW5wdXQtcmVsYXRlZCB0aGluZ3MsIChzdWNoIGFzIGZvY3VzaW5nIG9uIGFcbiAgICAvLyBmb3JtIGNvbnRyb2wpLCBzbyB0aGlzIGNoYW5nZSBpcyBub3QgZW50aXJlbHkgZW5vdWdoIHRvIHNvbHZlIHRoaXMuXG4gICAgaWYgKG1zaWUgJiYgKGV2IHx8IG5vZXZlbnQpLnR5cGUgPT09ICdpbnB1dCcgJiYgZWxlbWVudFswXS5wbGFjZWhvbGRlciAhPT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgIHBsYWNlaG9sZGVyID0gZWxlbWVudFswXS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBCeSBkZWZhdWx0IHdlIHdpbGwgdHJpbSB0aGUgdmFsdWVcbiAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5nLXRyaW0gZXhpc3RzIHdlIHdpbGwgYXZvaWQgdHJpbW1pbmdcbiAgICAvLyBJZiBpbnB1dCB0eXBlIGlzICdwYXNzd29yZCcsIHRoZSB2YWx1ZSBpcyBuZXZlciB0cmltbWVkXG4gICAgaWYgKHR5cGUgIT09ICdwYXNzd29yZCcgJiYgKCFhdHRyLm5nVHJpbSB8fCBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJykpIHtcbiAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBjb250cm9sIGlzIHN1ZmZlcmluZyBmcm9tIGJhZCBpbnB1dCAoZHVlIHRvIG5hdGl2ZSB2YWxpZGF0b3JzKSwgYnJvd3NlcnMgZGlzY2FyZCBpdHNcbiAgICAvLyB2YWx1ZSwgc28gaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byByZXZhbGlkYXRlIChieSBjYWxsaW5nICRzZXRWaWV3VmFsdWUgYWdhaW4pIGV2ZW4gaWYgdGhlXG4gICAgLy8gY29udHJvbCdzIHZhbHVlIGlzIHRoZSBzYW1lIGVtcHR5IHZhbHVlIHR3aWNlIGluIGEgcm93LlxuICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlIHx8ICh2YWx1ZSA9PT0gJycgJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0IFwiaW5wdXRcIiBldmVudCwgd2UgYXJlIGZpbmUgLSBleGNlcHQgb24gSUU5IHdoaWNoIGRvZXNuJ3QgZmlyZSB0aGVcbiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0XG4gIGlmICgkc25pZmZlci5oYXNFdmVudCgnaW5wdXQnKSkge1xuICAgIGVsZW1lbnQub24oJ2lucHV0JywgbGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0aW1lb3V0O1xuXG4gICAgdmFyIGRlZmVyTGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICAgIHRpbWVvdXQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICBsaXN0ZW5lcihldik7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBrZXkgPSBldmVudC5rZXlDb2RlO1xuXG4gICAgICAvLyBpZ25vcmVcbiAgICAgIC8vICAgIGNvbW1hbmQgICAgICAgICAgICBtb2RpZmllcnMgICAgICAgICAgICAgICAgICAgYXJyb3dzXG4gICAgICBpZiAoa2V5ID09PSA5MSB8fCAoMTUgPCBrZXkgJiYga2V5IDwgMTkpIHx8ICgzNyA8PSBrZXkgJiYga2V5IDw9IDQwKSkgcmV0dXJuO1xuXG4gICAgICBkZWZlckxpc3RlbmVyKGV2ZW50KTtcbiAgICB9KTtcblxuICAgIC8vIGlmIHVzZXIgbW9kaWZpZXMgaW5wdXQgdmFsdWUgdXNpbmcgY29udGV4dCBtZW51IGluIElFLCB3ZSBuZWVkIFwicGFzdGVcIiBhbmQgXCJjdXRcIiBldmVudHMgdG8gY2F0Y2ggaXRcbiAgICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ3Bhc3RlJykpIHtcbiAgICAgIGVsZW1lbnQub24oJ3Bhc3RlIGN1dCcsIGRlZmVyTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHVzZXIgcGFzdGUgaW50byBpbnB1dCB1c2luZyBtb3VzZSBvbiBvbGRlciBicm93c2VyXG4gIC8vIG9yIGZvcm0gYXV0b2NvbXBsZXRlIG9uIG5ld2VyIGJyb3dzZXIsIHdlIG5lZWQgXCJjaGFuZ2VcIiBldmVudCB0byBjYXRjaCBpdFxuICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC52YWwoY3RybC4kaXNFbXB0eShjdHJsLiRtb2RlbFZhbHVlKSA/ICcnIDogY3RybC4kdmlld1ZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla1BhcnNlcihpc29XZWVrLCBleGlzdGluZ0RhdGUpIHtcbiAgaWYgKGlzRGF0ZShpc29XZWVrKSkge1xuICAgIHJldHVybiBpc29XZWVrO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nKGlzb1dlZWspKSB7XG4gICAgV0VFS19SRUdFWFAubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgcGFydHMgPSBXRUVLX1JFR0VYUC5leGVjKGlzb1dlZWspO1xuICAgIGlmIChwYXJ0cykge1xuICAgICAgdmFyIHllYXIgPSArcGFydHNbMV0sXG4gICAgICAgICAgd2VlayA9ICtwYXJ0c1syXSxcbiAgICAgICAgICBob3VycyA9IDAsXG4gICAgICAgICAgbWludXRlcyA9IDAsXG4gICAgICAgICAgc2Vjb25kcyA9IDAsXG4gICAgICAgICAgbWlsbGlzZWNvbmRzID0gMCxcbiAgICAgICAgICBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSxcbiAgICAgICAgICBhZGREYXlzID0gKHdlZWsgLSAxKSAqIDc7XG5cbiAgICAgIGlmIChleGlzdGluZ0RhdGUpIHtcbiAgICAgICAgaG91cnMgPSBleGlzdGluZ0RhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgbWludXRlcyA9IGV4aXN0aW5nRGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgIHNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0U2Vjb25kcygpO1xuICAgICAgICBtaWxsaXNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAwLCBmaXJzdFRodXJzLmdldERhdGUoKSArIGFkZERheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBOYU47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVQYXJzZXIocmVnZXhwLCBtYXBwaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihpc28sIGRhdGUpIHtcbiAgICB2YXIgcGFydHMsIG1hcDtcblxuICAgIGlmIChpc0RhdGUoaXNvKSkge1xuICAgICAgcmV0dXJuIGlzbztcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoaXNvKSkge1xuICAgICAgLy8gV2hlbiBhIGRhdGUgaXMgSlNPTidpZmllZCB0byB3cmFwcyBpdHNlbGYgaW5zaWRlIG9mIGFuIGV4dHJhXG4gICAgICAvLyBzZXQgb2YgZG91YmxlIHF1b3Rlcy4gVGhpcyBtYWtlcyB0aGUgZGF0ZSBwYXJzaW5nIGNvZGUgdW5hYmxlXG4gICAgICAvLyB0byBtYXRjaCB0aGUgZGF0ZSBzdHJpbmcgYW5kIHBhcnNlIGl0IGFzIGEgZGF0ZS5cbiAgICAgIGlmIChpc28uY2hhckF0KDApID09ICdcIicgJiYgaXNvLmNoYXJBdChpc28ubGVuZ3RoLTEpID09ICdcIicpIHtcbiAgICAgICAgaXNvID0gaXNvLnN1YnN0cmluZygxLCBpc28ubGVuZ3RoLTEpO1xuICAgICAgfVxuICAgICAgaWYgKElTT19EQVRFX1JFR0VYUC50ZXN0KGlzbykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlzbyk7XG4gICAgICB9XG4gICAgICByZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgIHBhcnRzID0gcmVnZXhwLmV4ZWMoaXNvKTtcblxuICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgIHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgbWFwID0ge1xuICAgICAgICAgICAgeXl5eTogZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgTU06IGRhdGUuZ2V0TW9udGgoKSArIDEsXG4gICAgICAgICAgICBkZDogZGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICBISDogZGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgbW06IGRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgICAgc3M6IGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICAgICAgc3NzOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8gMTAwMFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFwID0geyB5eXl5OiAxOTcwLCBNTTogMSwgZGQ6IDEsIEhIOiAwLCBtbTogMCwgc3M6IDAsIHNzczogMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24ocGFydCwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPCBtYXBwaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgbWFwW21hcHBpbmdbaW5kZXhdXSA9ICtwYXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShtYXAueXl5eSwgbWFwLk1NIC0gMSwgbWFwLmRkLCBtYXAuSEgsIG1hcC5tbSwgbWFwLnNzIHx8IDAsIG1hcC5zc3MgKiAxMDAwIHx8IDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBOYU47XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVJbnB1dFR5cGUodHlwZSwgcmVnZXhwLCBwYXJzZURhdGUsIGZvcm1hdCkge1xuICByZXR1cm4gZnVuY3Rpb24gZHluYW1pY0RhdGVJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlcikge1xuICAgIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gICAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgICB2YXIgdGltZXpvbmUgPSBjdHJsICYmIGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy50aW1lem9uZTtcbiAgICB2YXIgcHJldmlvdXNEYXRlO1xuXG4gICAgY3RybC4kJHBhcnNlck5hbWUgPSB0eXBlO1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKGN0cmwuJGlzRW1wdHkodmFsdWUpKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChyZWdleHAudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gTm90ZTogV2UgY2Fubm90IHJlYWQgY3RybC4kbW9kZWxWYWx1ZSwgYXMgdGhlcmUgbWlnaHQgYmUgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gcGFyc2VyL2Zvcm1hdHRlciBpbiB0aGUgcHJvY2Vzc2luZyBjaGFpbiBzbyB0aGF0IHRoZSBtb2RlbFxuICAgICAgICAvLyBjb250YWlucyBzb21lIGRpZmZlcmVudCBkYXRhIGZvcm1hdCFcbiAgICAgICAgdmFyIHBhcnNlZERhdGUgPSBwYXJzZURhdGUodmFsdWUsIHByZXZpb3VzRGF0ZSk7XG4gICAgICAgIGlmICh0aW1lem9uZSA9PT0gJ1VUQycpIHtcbiAgICAgICAgICBwYXJzZWREYXRlLnNldE1pbnV0ZXMocGFyc2VkRGF0ZS5nZXRNaW51dGVzKCkgLSBwYXJzZWREYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFjdHJsLiRpc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIWlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyAkbmdNb2RlbE1pbkVycignZGF0ZWZtdCcsICdFeHBlY3RlZCBgezB9YCB0byBiZSBhIGRhdGUnLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNEYXRlID0gdmFsdWU7XG4gICAgICAgIGlmIChwcmV2aW91c0RhdGUgJiYgdGltZXpvbmUgPT09ICdVVEMnKSB7XG4gICAgICAgICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gNjAwMDAgKiBwcmV2aW91c0RhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICBwcmV2aW91c0RhdGUgPSBuZXcgRGF0ZShwcmV2aW91c0RhdGUuZ2V0VGltZSgpICsgdGltZXpvbmVPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkZmlsdGVyKCdkYXRlJykodmFsdWUsIGZvcm1hdCwgdGltZXpvbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJldmlvdXNEYXRlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcblxuICAgIGlmIChpc0RlZmluZWQoYXR0ci5taW4pIHx8IGF0dHIubmdNaW4pIHtcbiAgICAgIHZhciBtaW5WYWw7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtaW5WYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPj0gbWluVmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtaW5WYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgICB2YXIgbWF4VmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCBwYXJzZURhdGUodmFsdWUpIDw9IG1heFZhbDtcbiAgICAgIH07XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgbWF4VmFsID0gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCAkaXNFbXB0eSB0byBkZXRlY3QgaW52YWxpZCBkYXRlcyBhcyB3ZWxsXG4gICAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAvLyBJbnZhbGlkIERhdGU6IGdldFRpbWUoKSByZXR1cm5zIE5hTlxuICAgICAgcmV0dXJuICF2YWx1ZSB8fCAodmFsdWUuZ2V0VGltZSAmJiB2YWx1ZS5nZXRUaW1lKCkgIT09IHZhbHVlLmdldFRpbWUoKSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKSB7XG4gICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbCkgPyAoaXNEYXRlKHZhbCkgPyB2YWwgOiBwYXJzZURhdGUodmFsKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBiYWRJbnB1dENoZWNrZXIoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50WzBdO1xuICB2YXIgbmF0aXZlVmFsaWRhdGlvbiA9IGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzID0gaXNPYmplY3Qobm9kZS52YWxpZGl0eSk7XG4gIGlmIChuYXRpdmVWYWxpZGF0aW9uKSB7XG4gICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgdmFsaWRpdHkgPSBlbGVtZW50LnByb3AoVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkpIHx8IHt9O1xuICAgICAgLy8gRGV0ZWN0IGJ1ZyBpbiBGRjM1IGZvciBpbnB1dFtlbWFpbF0gKGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEwNjQ0MzApOlxuICAgICAgLy8gLSBhbHNvIHNldHMgdmFsaWRpdHkuYmFkSW5wdXQgKHNob3VsZCBvbmx5IGJlIHZhbGlkaXR5LnR5cGVNaXNtYXRjaCkuXG4gICAgICAvLyAtIHNlZSBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9mb3Jtcy5odG1sI2UtbWFpbC1zdGF0ZS0odHlwZT1lbWFpbClcbiAgICAgIC8vIC0gY2FuIGlnbm9yZSB0aGlzIGNhc2UgYXMgd2UgY2FuIHN0aWxsIHJlYWQgb3V0IHRoZSBlcnJvbmVvdXMgZW1haWwuLi5cbiAgICAgIHJldHVybiB2YWxpZGl0eS5iYWRJbnB1dCAmJiAhdmFsaWRpdHkudHlwZU1pc21hdGNoID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbnVtYmVySW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKTtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcblxuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdudW1iZXInO1xuICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKE5VTUJFUl9SRUdFWFAudGVzdCh2YWx1ZSkpIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9KTtcblxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoIWN0cmwuJGlzRW1wdHkodmFsdWUpKSB7XG4gICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyAkbmdNb2RlbE1pbkVycignbnVtZm10JywgJ0V4cGVjdGVkIGB7MH1gIHRvIGJlIGEgbnVtYmVyJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0pO1xuXG4gIGlmIChhdHRyLm1pbiB8fCBhdHRyLm5nTWluKSB7XG4gICAgdmFyIG1pblZhbDtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCB2YWx1ZSA+PSBtaW5WYWw7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWwpICYmICFpc051bWJlcih2YWwpKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsLCAxMCk7XG4gICAgICB9XG4gICAgICBtaW5WYWwgPSBpc051bWJlcih2YWwpICYmICFpc05hTih2YWwpID8gdmFsIDogdW5kZWZpbmVkO1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGF0dHIubWF4IHx8IGF0dHIubmdNYXgpIHtcbiAgICB2YXIgbWF4VmFsO1xuICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHZhbHVlIDw9IG1heFZhbDtcbiAgICB9O1xuXG4gICAgYXR0ci4kb2JzZXJ2ZSgnbWF4JywgZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbCkgJiYgIWlzTnVtYmVyKHZhbCkpIHtcbiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwsIDEwKTtcbiAgICAgIH1cbiAgICAgIG1heFZhbCA9IGlzTnVtYmVyKHZhbCkgJiYgIWlzTmFOKHZhbCkgPyB2YWwgOiB1bmRlZmluZWQ7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXJsSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgLy8gTm90ZTogbm8gYmFkSW5wdXRDaGVja2VyIGhlcmUgYnkgcHVycG9zZSBhcyBgdXJsYCBpcyBvbmx5IGEgdmFsaWRhdGlvblxuICAvLyBpbiBicm93c2VycywgaS5lLiB3ZSBjYW4gYWx3YXlzIHJlYWQgb3V0IGlucHV0LnZhbHVlIGV2ZW4gaWYgaXQgaXMgbm90IHZhbGlkIVxuICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTtcblxuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICd1cmwnO1xuICBjdHJsLiR2YWxpZGF0b3JzLnVybCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IFVSTF9SRUdFWFAudGVzdCh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVtYWlsSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgLy8gTm90ZTogbm8gYmFkSW5wdXRDaGVja2VyIGhlcmUgYnkgcHVycG9zZSBhcyBgdXJsYCBpcyBvbmx5IGEgdmFsaWRhdGlvblxuICAvLyBpbiBicm93c2VycywgaS5lLiB3ZSBjYW4gYWx3YXlzIHJlYWQgb3V0IGlucHV0LnZhbHVlIGV2ZW4gaWYgaXQgaXMgbm90IHZhbGlkIVxuICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTtcblxuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdlbWFpbCc7XG4gIGN0cmwuJHZhbGlkYXRvcnMuZW1haWwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJhZGlvSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIC8vIG1ha2UgdGhlIG5hbWUgdW5pcXVlLCBpZiBub3QgZGVmaW5lZFxuICBpZiAoaXNVbmRlZmluZWQoYXR0ci5uYW1lKSkge1xuICAgIGVsZW1lbnQuYXR0cignbmFtZScsIG5leHRVaWQoKSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIGlmIChlbGVtZW50WzBdLmNoZWNrZWQpIHtcbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShhdHRyLnZhbHVlLCBldiAmJiBldi50eXBlKTtcbiAgICB9XG4gIH07XG5cbiAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSAodmFsdWUgPT0gY3RybC4kdmlld1ZhbHVlKTtcbiAgfTtcblxuICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIGN0cmwuJHJlbmRlcik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgY29udGV4dCwgbmFtZSwgZXhwcmVzc2lvbiwgZmFsbGJhY2spIHtcbiAgdmFyIHBhcnNlRm47XG4gIGlmIChpc0RlZmluZWQoZXhwcmVzc2lvbikpIHtcbiAgICBwYXJzZUZuID0gJHBhcnNlKGV4cHJlc3Npb24pO1xuICAgIGlmICghcGFyc2VGbi5jb25zdGFudCkge1xuICAgICAgdGhyb3cgbWluRXJyKCduZ01vZGVsJykoJ2NvbnN0ZXhwcicsICdFeHBlY3RlZCBjb25zdGFudCBleHByZXNzaW9uIGZvciBgezB9YCwgYnV0IHNhdyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2B7MX1gLicsIG5hbWUsIGV4cHJlc3Npb24pO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VGbihjb250ZXh0KTtcbiAgfVxuICByZXR1cm4gZmFsbGJhY2s7XG59XG5cbmZ1bmN0aW9uIGNoZWNrYm94SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSkge1xuICB2YXIgdHJ1ZVZhbHVlID0gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBzY29wZSwgJ25nVHJ1ZVZhbHVlJywgYXR0ci5uZ1RydWVWYWx1ZSwgdHJ1ZSk7XG4gIHZhciBmYWxzZVZhbHVlID0gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBzY29wZSwgJ25nRmFsc2VWYWx1ZScsIGF0dHIubmdGYWxzZVZhbHVlLCBmYWxzZSk7XG5cbiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudFswXS5jaGVja2VkLCBldiAmJiBldi50eXBlKTtcbiAgfTtcblxuICBlbGVtZW50Lm9uKCdjbGljaycsIGxpc3RlbmVyKTtcblxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSBjdHJsLiR2aWV3VmFsdWU7XG4gIH07XG5cbiAgLy8gT3ZlcnJpZGUgdGhlIHN0YW5kYXJkIGAkaXNFbXB0eWAgYmVjYXVzZSBhbiBlbXB0eSBjaGVja2JveCBpcyBuZXZlciBlcXVhbCB0byB0aGUgdHJ1ZVZhbHVlXG4gIGN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdHJ1ZVZhbHVlO1xuICB9O1xuXG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlcXVhbHModmFsdWUsIHRydWVWYWx1ZSk7XG4gIH0pO1xuXG4gIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7XG4gIH0pO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdGV4dGFyZWFcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIHRleHRhcmVhIGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBUaGUgZGF0YS1iaW5kaW5nIGFuZCB2YWxpZGF0aW9uXG4gKiBwcm9wZXJ0aWVzIG9mIHRoaXMgZWxlbWVudCBhcmUgZXhhY3RseSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXQgZWxlbWVudH0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICogICAgbWlubGVuZ3RoLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICogICAgbWF4bGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZVxuICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvclxuICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgaW5wdXRcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIGlucHV0IGVsZW1lbnQgY29udHJvbC4gV2hlbiB1c2VkIHRvZ2V0aGVyIHdpdGgge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSwgaXQgcHJvdmlkZXMgZGF0YS1iaW5kaW5nLFxuICogaW5wdXQgc3RhdGUgY29udHJvbCwgYW5kIHZhbGlkYXRpb24uXG4gKiBJbnB1dCBjb250cm9sIGZvbGxvd3MgSFRNTDUgaW5wdXQgdHlwZXMgYW5kIHBvbHlmaWxscyB0aGUgSFRNTDUgdmFsaWRhdGlvbiBiZWhhdmlvciBmb3Igb2xkZXIgYnJvd3NlcnMuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBOb3QgZXZlcnkgZmVhdHVyZSBvZmZlcmVkIGlzIGF2YWlsYWJsZSBmb3IgYWxsIGlucHV0IHR5cGVzLlxuICogU3BlY2lmaWNhbGx5LCBkYXRhIGJpbmRpbmcgYW5kIGV2ZW50IGhhbmRsaW5nIHZpYSBgbmctbW9kZWxgIGlzIHVuc3VwcG9ydGVkIGZvciBgaW5wdXRbZmlsZV1gLlxuICogPC9kaXY+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICogQHBhcmFtIHtib29sZWFuPX0gbmdSZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGlmIHNldCB0byB0cnVlXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICogICAgbWlubGVuZ3RoLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICogICAgbWF4bGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZVxuICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvclxuICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAqICAgIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgZm9yIGlucHV0W3R5cGU9cGFzc3dvcmRdIGNvbnRyb2xzLCB3aGljaCB3aWxsIG5ldmVyIHRyaW0gdGhlXG4gKiAgICBpbnB1dC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJpbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJpbnB1dEV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUudXNlciA9IHtuYW1lOiAnZ3Vlc3QnLCBsYXN0OiAndmlzaXRvcid9O1xuICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAgICAgICAgIFVzZXIgbmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCIgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIiByZXF1aXJlZD5cbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0udXNlck5hbWUuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPjxicj5cbiAgICAgICAgICAgTGFzdCBuYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibGFzdE5hbWVcIiBuZy1tb2RlbD1cInVzZXIubGFzdFwiXG4gICAgICAgICAgICAgbmctbWlubGVuZ3RoPVwiM1wiIG5nLW1heGxlbmd0aD1cIjEwXCI+XG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5taW5sZW5ndGhcIj5cbiAgICAgICAgICAgICBUb28gc2hvcnQhPC9zcGFuPlxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWF4bGVuZ3RoXCI+XG4gICAgICAgICAgICAgVG9vIGxvbmchPC9zcGFuPjxicj5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxocj5cbiAgICAgICAgIDx0dD51c2VyID0ge3t1c2VyfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiR2YWxpZCA9IHt7bXlGb3JtLnVzZXJOYW1lLiR2YWxpZH19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiRlcnJvciA9IHt7bXlGb3JtLnVzZXJOYW1lLiRlcnJvcn19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiR2YWxpZCA9IHt7bXlGb3JtLmxhc3ROYW1lLiR2YWxpZH19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiRlcnJvciA9IHt7bXlGb3JtLmxhc3ROYW1lLiRlcnJvcn19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxicj5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1pbmxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1pbmxlbmd0aH19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5tYXhsZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5tYXhsZW5ndGh9fTwvdHQ+PGJyPlxuICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgdXNlciA9IGVsZW1lbnQoYnkuZXhhY3RCaW5kaW5nKCd1c2VyJykpO1xuICAgICAgICB2YXIgdXNlck5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLnVzZXJOYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciBsYXN0TmFtZUVycm9yID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpO1xuICAgICAgICB2YXIgZm9ybVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpO1xuICAgICAgICB2YXIgdXNlck5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICAgICAgdmFyIHVzZXJMYXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmxhc3QnKSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCIsXCJsYXN0XCI6XCJ2aXNpdG9yXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KHVzZXJOYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eSB3aGVuIHJlcXVpcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJOYW1lSW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIHZhbGlkIGlmIGVtcHR5IHdoZW4gbWluIGxlbmd0aCBpcyBzZXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcIlwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbGVzcyB0aGFuIHJlcXVpcmVkIG1pbiBsZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygneHgnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZUVycm9yLmdldFRleHQoKSkudG9Db250YWluKCdtaW5sZW5ndGgnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbG9uZ2VyIHRoYW4gbWF4IGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCdzb21lIHJpZGljdWxvdXNseSBsb25nIG5hbWUnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZUVycm9yLmdldFRleHQoKSkudG9Db250YWluKCdtYXhsZW5ndGgnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBpbnB1dERpcmVjdGl2ZSA9IFsnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJGZpbHRlcicsICckcGFyc2UnLFxuICAgIGZ1bmN0aW9uKCRicm93c2VyLCAkc25pZmZlciwgJGZpbHRlciwgJHBhcnNlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXF1aXJlOiBbJz9uZ01vZGVsJ10sXG4gICAgbGluazoge1xuICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgaWYgKGN0cmxzWzBdKSB7XG4gICAgICAgICAgKGlucHV0VHlwZVtsb3dlcmNhc2UoYXR0ci50eXBlKV0gfHwgaW5wdXRUeXBlLnRleHQpKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsc1swXSwgJHNuaWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRicm93c2VyLCAkZmlsdGVyLCAkcGFyc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBWQUxJRF9DTEFTUyA9ICduZy12YWxpZCcsXG4gICAgSU5WQUxJRF9DTEFTUyA9ICduZy1pbnZhbGlkJyxcbiAgICBQUklTVElORV9DTEFTUyA9ICduZy1wcmlzdGluZScsXG4gICAgRElSVFlfQ0xBU1MgPSAnbmctZGlydHknLFxuICAgIFVOVE9VQ0hFRF9DTEFTUyA9ICduZy11bnRvdWNoZWQnLFxuICAgIFRPVUNIRURfQ0xBU1MgPSAnbmctdG91Y2hlZCcsXG4gICAgUEVORElOR19DTEFTUyA9ICduZy1wZW5kaW5nJztcblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlclxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAkdmlld1ZhbHVlIEFjdHVhbCBzdHJpbmcgdmFsdWUgaW4gdGhlIHZpZXcuXG4gKiBAcHJvcGVydHkgeyp9ICRtb2RlbFZhbHVlIFRoZSB2YWx1ZSBpbiB0aGUgbW9kZWwgdGhhdCB0aGUgY29udHJvbCBpcyBib3VuZCB0by5cbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHBhcnNlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyXG4gICAgICAgdGhlIGNvbnRyb2wgcmVhZHMgdmFsdWUgZnJvbSB0aGUgRE9NLiBUaGUgZnVuY3Rpb25zIGFyZSBjYWxsZWQgaW4gYXJyYXkgb3JkZXIsIGVhY2ggcGFzc2luZyB0aGUgdmFsdWVcbiAgICAgICB0aHJvdWdoIHRvIHRoZSBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgZm9yd2FyZGVkIHRvIHRoZSAkdmFsaWRhdG9ycyBjb2xsZWN0aW9uLlxuICAgICAgIFVzZWQgdG8gc2FuaXRpemUgLyBjb252ZXJ0IHRoZSB2YWx1ZS5cbiAgICAgICBSZXR1cm5pbmcgdW5kZWZpbmVkIGZyb20gYSBwYXJzZXIgbWVhbnMgYSBwYXJzZSBlcnJvciBvY2N1cnJlZC4gTm8gJHZhbGlkYXRvcnMgd2lsbFxuICAgICAgIHJ1biBhbmQgdGhlICduZ01vZGVsJyB3aWxsIG5vdCBiZSB1cGRhdGVkIHVudGlsIHRoZSBwYXJzZSBlcnJvciBpcyByZXNvbHZlZC4gVGhlIHBhcnNlIGVycm9yIGlzIHN0b3JlZFxuICAgICAgIGluICduZ01vZGVsLiRlcnJvci5wYXJzZScuXG5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRmb3JtYXR0ZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICAgICAgIHRoZSBtb2RlbCB2YWx1ZSBjaGFuZ2VzLiBUaGUgZnVuY3Rpb25zIGFyZSBjYWxsZWQgaW4gcmV2ZXJzZSBhcnJheSBvcmRlciwgZWFjaCBwYXNzaW5nIHRoZSB2YWx1ZSB0aHJvdWdoIHRvIHRoZVxuICAgICAgIG5leHQuIFRoZSBsYXN0IHJldHVybiB2YWx1ZSBpcyB1c2VkIGFzIHRoZSBhY3R1YWwgRE9NIHZhbHVlLlxuICAgICAgIFVzZWQgdG8gZm9ybWF0IC8gY29udmVydCB2YWx1ZXMgZm9yIGRpc3BsYXkgaW4gdGhlIGNvbnRyb2wuXG4gKiBgYGBqc1xuICogZnVuY3Rpb24gZm9ybWF0dGVyKHZhbHVlKSB7XG4gKiAgIGlmICh2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICogICB9XG4gKiB9XG4gKiBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJHZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRvcnMgdGhhdCBhcmUgYXBwbGllZFxuICogICAgICB3aGVuZXZlciB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlcy4gVGhlIGtleSB2YWx1ZSB3aXRoaW4gdGhlIG9iamVjdCByZWZlcnMgdG8gdGhlIG5hbWUgb2YgdGhlXG4gKiAgICAgIHZhbGlkYXRvciB3aGlsZSB0aGUgZnVuY3Rpb24gcmVmZXJzIHRvIHRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbi4gVGhlIHZhbGlkYXRpb24gb3BlcmF0aW9uIGlzXG4gKiAgICAgIHByb3ZpZGVkIHdpdGggdGhlIG1vZGVsIHZhbHVlIGFzIGFuIGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBhIHRydWUgb3IgZmFsc2UgdmFsdWUgZGVwZW5kaW5nXG4gKiAgICAgIG9uIHRoZSByZXNwb25zZSBvZiB0aGF0IHZhbGlkYXRpb24uXG4gKlxuICogYGBganNcbiAqIG5nTW9kZWwuJHZhbGlkYXRvcnMudmFsaWRDaGFyYWN0ZXJzID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICogICByZXR1cm4gL1swLTldKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9bYS16XSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvW0EtWl0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1xcVysvLnRlc3QodmFsdWUpO1xuICogfTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJGFzeW5jVmFsaWRhdG9ycyBBIGNvbGxlY3Rpb24gb2YgdmFsaWRhdGlvbnMgdGhhdCBhcmUgZXhwZWN0ZWQgdG9cbiAqICAgICAgcGVyZm9ybSBhbiBhc3luY2hyb25vdXMgdmFsaWRhdGlvbiAoZS5nLiBhIEhUVFAgcmVxdWVzdCkuIFRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uIHRoYXQgaXMgcHJvdmlkZWRcbiAqICAgICAgaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgcHJvbWlzZSB3aGVuIGl0IGlzIHJ1biBkdXJpbmcgdGhlIG1vZGVsIHZhbGlkYXRpb24gcHJvY2Vzcy4gT25jZSB0aGUgcHJvbWlzZVxuICogICAgICBpcyBkZWxpdmVyZWQgdGhlbiB0aGUgdmFsaWRhdGlvbiBzdGF0dXMgd2lsbCBiZSBzZXQgdG8gdHJ1ZSB3aGVuIGZ1bGZpbGxlZCBhbmQgZmFsc2Ugd2hlbiByZWplY3RlZC5cbiAqICAgICAgV2hlbiB0aGUgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMgYXJlIHRyaWdnZXJlZCwgZWFjaCBvZiB0aGUgdmFsaWRhdG9ycyB3aWxsIHJ1biBpbiBwYXJhbGxlbCBhbmQgdGhlIG1vZGVsXG4gKiAgICAgIHZhbHVlIHdpbGwgb25seSBiZSB1cGRhdGVkIG9uY2UgYWxsIHZhbGlkYXRvcnMgaGF2ZSBiZWVuIGZ1bGZpbGxlZC4gQXMgbG9uZyBhcyBhbiBhc3luY2hyb25vdXMgdmFsaWRhdG9yXG4gKiAgICAgIGlzIHVuZnVsZmlsbGVkLCBpdHMga2V5IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXJzIGAkcGVuZGluZ2AgcHJvcGVydHkuIEFsc28sIGFsbCBhc3luY2hyb25vdXMgdmFsaWRhdG9yc1xuICogICAgICB3aWxsIG9ubHkgcnVuIG9uY2UgYWxsIHN5bmNocm9ub3VzIHZhbGlkYXRvcnMgaGF2ZSBwYXNzZWQuXG4gKlxuICogUGxlYXNlIG5vdGUgdGhhdCBpZiAkaHR0cCBpcyB1c2VkIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRoYXQgdGhlIHNlcnZlciByZXR1cm5zIGEgc3VjY2VzcyBIVFRQIHJlc3BvbnNlIGNvZGVcbiAqIGluIG9yZGVyIHRvIGZ1bGZpbGwgdGhlIHZhbGlkYXRpb24gYW5kIGEgc3RhdHVzIGxldmVsIG9mIGA0eHhgIGluIG9yZGVyIHRvIHJlamVjdCB0aGUgdmFsaWRhdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzLnVuaXF1ZVVzZXJuYW1lID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICpcbiAqICAgLy8gTG9va3VwIHVzZXIgYnkgdXNlcm5hbWVcbiAqICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy8nICsgdmFsdWUpLlxuICogICAgICB0aGVuKGZ1bmN0aW9uIHJlc29sdmVkKCkge1xuICogICAgICAgIC8vdXNlcm5hbWUgZXhpc3RzLCB0aGlzIG1lYW5zIHZhbGlkYXRpb24gZmFpbHNcbiAqICAgICAgICByZXR1cm4gJHEucmVqZWN0KCdleGlzdHMnKTtcbiAqICAgICAgfSwgZnVuY3Rpb24gcmVqZWN0ZWQoKSB7XG4gKiAgICAgICAgLy91c2VybmFtZSBkb2VzIG5vdCBleGlzdCwgdGhlcmVmb3JlIHRoaXMgdmFsaWRhdGlvbiBwYXNzZXNcbiAqICAgICAgICByZXR1cm4gdHJ1ZTtcbiAqICAgICAgfSk7XG4gKiB9O1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHZhbGlkYXRvci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHZhbGlkYXRpb25GbiBUaGUgdmFsaWRhdGlvbiBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgcnVuLlxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUgd2hlbmV2ZXIgdGhlXG4gKiAgICAgdmlldyB2YWx1ZSBoYXMgY2hhbmdlZC4gSXQgaXMgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCBhbmQgaXRzIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkLlxuICogICAgIFRoaXMgY2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYWRkaXRpb25hbCAkd2F0Y2hlcyBhZ2FpbnN0IHRoZSBtb2RlbCB2YWx1ZS5cbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIEFuIG9iamVjdCBoYXNoIHdpdGggYWxsIGZhaWxpbmcgdmFsaWRhdG9yIGlkcyBhcyBrZXlzLlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRwZW5kaW5nIEFuIG9iamVjdCBoYXNoIHdpdGggYWxsIHBlbmRpbmcgdmFsaWRhdG9yIGlkcyBhcyBrZXlzLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHVudG91Y2hlZCBUcnVlIGlmIGNvbnRyb2wgaGFzIG5vdCBsb3N0IGZvY3VzIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHRvdWNoZWQgVHJ1ZSBpZiBjb250cm9sIGhhcyBsb3N0IGZvY3VzLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIHRoZXJlIGlzIG5vIGVycm9yLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBlcnJvciBvbiB0aGUgY29udHJvbC5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgTmdNb2RlbENvbnRyb2xsZXJgIHByb3ZpZGVzIEFQSSBmb3IgdGhlIGBuZy1tb2RlbGAgZGlyZWN0aXZlLiBUaGUgY29udHJvbGxlciBjb250YWluc1xuICogc2VydmljZXMgZm9yIGRhdGEtYmluZGluZywgdmFsaWRhdGlvbiwgQ1NTIHVwZGF0ZXMsIGFuZCB2YWx1ZSBmb3JtYXR0aW5nIGFuZCBwYXJzaW5nLiBJdFxuICogcHVycG9zZWZ1bGx5IGRvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljIHdoaWNoIGRlYWxzIHdpdGggRE9NIHJlbmRlcmluZyBvciBsaXN0ZW5pbmcgdG9cbiAqIERPTSBldmVudHMuIFN1Y2ggRE9NIHJlbGF0ZWQgbG9naWMgc2hvdWxkIGJlIHByb3ZpZGVkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgd2hpY2ggbWFrZSB1c2Ugb2ZcbiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgZm9yIGRhdGEtYmluZGluZy5cbiAqXG4gKiAjIyBDdXN0b20gQ29udHJvbCBFeGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgTmdNb2RlbENvbnRyb2xsZXJgIHdpdGggYSBjdXN0b20gY29udHJvbCB0byBhY2hpZXZlXG4gKiBkYXRhLWJpbmRpbmcuIE5vdGljZSBob3cgZGlmZmVyZW50IGRpcmVjdGl2ZXMgKGBjb250ZW50ZWRpdGFibGVgLCBgbmctbW9kZWxgLCBhbmQgYHJlcXVpcmVkYClcbiAqIGNvbGxhYm9yYXRlIHRvZ2V0aGVyIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgcmVzdWx0LlxuICpcbiAqIE5vdGUgdGhhdCBgY29udGVudGVkaXRhYmxlYCBpcyBhbiBIVE1MNSBhdHRyaWJ1dGUsIHdoaWNoIHRlbGxzIHRoZSBicm93c2VyIHRvIGxldCB0aGUgZWxlbWVudFxuICogY29udGVudHMgYmUgZWRpdGVkIGluIHBsYWNlIGJ5IHRoZSB1c2VyLiAgVGhpcyB3aWxsIG5vdCB3b3JrIG9uIG9sZGVyIGJyb3dzZXJzLlxuICpcbiAqIFdlIGFyZSB1c2luZyB0aGUge0BsaW5rIG5nLnNlcnZpY2U6JHNjZSAkc2NlfSBzZXJ2aWNlIGhlcmUgYW5kIGluY2x1ZGUgdGhlIHtAbGluayBuZ1Nhbml0aXplICRzYW5pdGl6ZX1cbiAqIG1vZHVsZSB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSBcImJhZFwiIGNvbnRlbnQgbGlrZSBpbmxpbmUgZXZlbnQgbGlzdGVuZXIgKGUuZy4gYDxzcGFuIG9uY2xpY2s9XCIuLi5cIj5gKS5cbiAqIEhvd2V2ZXIsIGFzIHdlIGFyZSB1c2luZyBgJHNjZWAgdGhlIG1vZGVsIGNhbiBzdGlsbCBkZWNpZGUgdG8gcHJvdmlkZSB1bnNhZmUgY29udGVudCBpZiBpdCBtYXJrc1xuICogdGhhdCBjb250ZW50IHVzaW5nIHRoZSBgJHNjZWAgc2VydmljZS5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwiTmdNb2RlbENvbnRyb2xsZXJcIiBtb2R1bGU9XCJjdXN0b21Db250cm9sXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIj5cbiAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICBbY29udGVudGVkaXRhYmxlXSB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgICAgbWluLWhlaWdodDogMjBweDtcbiAgICAgIH1cblxuICAgICAgLm5nLWludmFsaWQge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XG4gICAgICB9XG5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUNvbnRyb2wnLCBbJ25nU2FuaXRpemUnXSkuXG4gICAgICAgIGRpcmVjdGl2ZSgnY29udGVudGVkaXRhYmxlJywgWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLCAvLyBvbmx5IGFjdGl2YXRlIG9uIGVsZW1lbnQgYXR0cmlidXRlXG4gICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnLCAvLyBnZXQgYSBob2xkIG9mIE5nTW9kZWxDb250cm9sbGVyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcbiAgICAgICAgICAgICAgaWYgKCFuZ01vZGVsKSByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWxcblxuICAgICAgICAgICAgICAvLyBTcGVjaWZ5IGhvdyBVSSBzaG91bGQgYmUgdXBkYXRlZFxuICAgICAgICAgICAgICBuZ01vZGVsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwoJHNjZS5nZXRUcnVzdGVkSHRtbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgJycpKTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGNoYW5nZSBldmVudHMgdG8gZW5hYmxlIGJpbmRpbmdcbiAgICAgICAgICAgICAgZWxlbWVudC5vbignYmx1ciBrZXl1cCBjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkocmVhZCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZWFkKCk7IC8vIGluaXRpYWxpemVcblxuICAgICAgICAgICAgICAvLyBXcml0ZSBkYXRhIHRvIHRoZSBtb2RlbFxuICAgICAgICAgICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICAgICAgICAgIHZhciBodG1sID0gZWxlbWVudC5odG1sKCk7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBjbGVhciB0aGUgY29udGVudCBlZGl0YWJsZSB0aGUgYnJvd3NlciBsZWF2ZXMgYSA8YnI+IGJlaGluZFxuICAgICAgICAgICAgICAgIC8vIElmIHN0cmlwLWJyIGF0dHJpYnV0ZSBpcyBwcm92aWRlZCB0aGVuIHdlIHN0cmlwIHRoaXMgb3V0XG4gICAgICAgICAgICAgICAgaWYgKCBhdHRycy5zdHJpcEJyICYmIGh0bWwgPT0gJzxicj4nICkge1xuICAgICAgICAgICAgICAgICAgaHRtbCA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoaHRtbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAgICAgPGRpdiBjb250ZW50ZWRpdGFibGVcbiAgICAgICAgICAgIG5hbWU9XCJteVdpZGdldFwiIG5nLW1vZGVsPVwidXNlckNvbnRlbnRcIlxuICAgICAgICAgICAgc3RyaXAtYnI9XCJ0cnVlXCJcbiAgICAgICAgICAgIHJlcXVpcmVkPkNoYW5nZSBtZSE8L2Rpdj5cbiAgICAgICAgPHNwYW4gbmctc2hvdz1cIm15Rm9ybS5teVdpZGdldC4kZXJyb3IucmVxdWlyZWRcIj5SZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgPGhyPlxuICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInVzZXJDb250ZW50XCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgIGl0KCdzaG91bGQgZGF0YS1iaW5kIGFuZCBiZWNvbWUgaW52YWxpZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ3NhZmFyaScgfHwgYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnZmlyZWZveCcpIHtcbiAgICAgICAgLy8gU2FmYXJpRHJpdmVyIGNhbid0IGhhbmRsZSBjb250ZW50ZWRpdGFibGVcbiAgICAgICAgLy8gYW5kIEZpcmVmb3ggZHJpdmVyIGNhbid0IGNsZWFyIGNvbnRlbnRlZGl0YWJsZXMgdmVyeSB3ZWxsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjb250ZW50RWRpdGFibGUgPSBlbGVtZW50KGJ5LmNzcygnW2NvbnRlbnRlZGl0YWJsZV0nKSk7XG4gICAgICB2YXIgY29udGVudCA9ICdDaGFuZ2UgbWUhJztcblxuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoY29udGVudCk7XG5cbiAgICAgIGNvbnRlbnRFZGl0YWJsZS5jbGVhcigpO1xuICAgICAgY29udGVudEVkaXRhYmxlLnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkJBQ0tfU1BBQ0UpO1xuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoJycpO1xuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL25nLWludmFsaWQtcmVxdWlyZWQvKTtcbiAgICB9KTtcbiAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICpcbiAqL1xudmFyIE5nTW9kZWxDb250cm9sbGVyID0gWyckc2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRwYXJzZScsICckYW5pbWF0ZScsICckdGltZW91dCcsICckcm9vdFNjb3BlJywgJyRxJywgJyRpbnRlcnBvbGF0ZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlciwgJGF0dHIsICRlbGVtZW50LCAkcGFyc2UsICRhbmltYXRlLCAkdGltZW91dCwgJHJvb3RTY29wZSwgJHEsICRpbnRlcnBvbGF0ZSkge1xuICB0aGlzLiR2aWV3VmFsdWUgPSBOdW1iZXIuTmFOO1xuICB0aGlzLiRtb2RlbFZhbHVlID0gTnVtYmVyLk5hTjtcbiAgdGhpcy4kdmFsaWRhdG9ycyA9IHt9O1xuICB0aGlzLiRhc3luY1ZhbGlkYXRvcnMgPSB7fTtcbiAgdGhpcy4kcGFyc2VycyA9IFtdO1xuICB0aGlzLiRmb3JtYXR0ZXJzID0gW107XG4gIHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgdGhpcy4kdW50b3VjaGVkID0gdHJ1ZTtcbiAgdGhpcy4kdG91Y2hlZCA9IGZhbHNlO1xuICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gIHRoaXMuJHZhbGlkID0gdHJ1ZTtcbiAgdGhpcy4kaW52YWxpZCA9IGZhbHNlO1xuICB0aGlzLiRlcnJvciA9IHt9OyAvLyBrZWVwIGludmFsaWQga2V5cyBoZXJlXG4gIHRoaXMuJCRzdWNjZXNzID0ge307IC8vIGtlZXAgdmFsaWQga2V5cyBoZXJlXG4gIHRoaXMuJHBlbmRpbmcgPSB1bmRlZmluZWQ7IC8vIGtlZXAgcGVuZGluZyBrZXlzIGhlcmVcbiAgdGhpcy4kbmFtZSA9ICRpbnRlcnBvbGF0ZSgkYXR0ci5uYW1lIHx8ICcnLCBmYWxzZSkoJHNjb3BlKTtcblxuXG4gIHZhciBwYXJzZWROZ01vZGVsID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwpLFxuICAgICAgcGVuZGluZ0RlYm91bmNlID0gbnVsbCxcbiAgICAgIGN0cmwgPSB0aGlzO1xuXG4gIHZhciBuZ01vZGVsR2V0ID0gZnVuY3Rpb24gbmdNb2RlbEdldCgpIHtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHBhcnNlZE5nTW9kZWwoJHNjb3BlKTtcbiAgICBpZiAoY3RybC4kb3B0aW9ucyAmJiBjdHJsLiRvcHRpb25zLmdldHRlclNldHRlciAmJiBpc0Z1bmN0aW9uKG1vZGVsVmFsdWUpKSB7XG4gICAgICBtb2RlbFZhbHVlID0gbW9kZWxWYWx1ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gbW9kZWxWYWx1ZTtcbiAgfTtcblxuICB2YXIgbmdNb2RlbFNldCA9IGZ1bmN0aW9uIG5nTW9kZWxTZXQobmV3VmFsdWUpIHtcbiAgICB2YXIgZ2V0dGVyU2V0dGVyO1xuICAgIGlmIChjdHJsLiRvcHRpb25zICYmIGN0cmwuJG9wdGlvbnMuZ2V0dGVyU2V0dGVyICYmXG4gICAgICAgIGlzRnVuY3Rpb24oZ2V0dGVyU2V0dGVyID0gcGFyc2VkTmdNb2RlbCgkc2NvcGUpKSkge1xuXG4gICAgICBnZXR0ZXJTZXR0ZXIoY3RybC4kbW9kZWxWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZE5nTW9kZWwuYXNzaWduKCRzY29wZSwgY3RybC4kbW9kZWxWYWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuJCRzZXRPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGN0cmwuJG9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgaWYgKCFwYXJzZWROZ01vZGVsLmFzc2lnbiAmJiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuZ2V0dGVyU2V0dGVyKSkge1xuICAgICAgdGhyb3cgJG5nTW9kZWxNaW5FcnIoJ25vbmFzc2lnbicsIFwiRXhwcmVzc2lvbiAnezB9JyBpcyBub24tYXNzaWduYWJsZS4gRWxlbWVudDogezF9XCIsXG4gICAgICAgICAgJGF0dHIubmdNb2RlbCwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcmVuZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdmlldyBuZWVkcyB0byBiZSB1cGRhdGVkLiBJdCBpcyBleHBlY3RlZCB0aGF0IHRoZSB1c2VyIG9mIHRoZSBuZy1tb2RlbFxuICAgKiBkaXJlY3RpdmUgd2lsbCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIFRoZSBgJHJlbmRlcigpYCBtZXRob2QgaXMgaW52b2tlZCBpbiB0aGUgZm9sbG93aW5nIHNpdHVhdGlvbnM6XG4gICAqXG4gICAqICogYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCBpcyBjYWxsZWQuICBJZiB3ZSBhcmUgcm9sbGluZyBiYWNrIHRoZSB2aWV3IHZhbHVlIHRvIHRoZSBsYXN0XG4gICAqICAgY29tbWl0dGVkIHZhbHVlIHRoZW4gYCRyZW5kZXIoKWAgaXMgY2FsbGVkIHRvIHVwZGF0ZSB0aGUgaW5wdXQgY29udHJvbC5cbiAgICogKiBUaGUgdmFsdWUgcmVmZXJlbmNlZCBieSBgbmctbW9kZWxgIGlzIGNoYW5nZWQgcHJvZ3JhbW1hdGljYWxseSBhbmQgYm90aCB0aGUgYCRtb2RlbFZhbHVlYCBhbmRcbiAgICogICB0aGUgYCR2aWV3VmFsdWVgIGFyZSBkaWZmZXJlbnQgdG8gbGFzdCB0aW1lLlxuICAgKlxuICAgKiBTaW5jZSBgbmctbW9kZWxgIGRvZXMgbm90IGRvIGEgZGVlcCB3YXRjaCwgYCRyZW5kZXIoKWAgaXMgb25seSBpbnZva2VkIGlmIHRoZSB2YWx1ZXMgb2ZcbiAgICogYCRtb2RlbFZhbHVlYCBhbmQgYCR2aWV3VmFsdWVgIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQgdG8gdGhlaXIgcHJldmlvdXMgdmFsdWUuIElmIGAkbW9kZWxWYWx1ZWBcbiAgICogb3IgYCR2aWV3VmFsdWVgIGFyZSBvYmplY3RzIChyYXRoZXIgdGhhbiBhIHN0cmluZyBvciBudW1iZXIpIHRoZW4gYCRyZW5kZXIoKWAgd2lsbCBub3QgYmVcbiAgICogaW52b2tlZCBpZiB5b3Ugb25seSBjaGFuZ2UgYSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0cy5cbiAgICovXG4gIHRoaXMuJHJlbmRlciA9IG5vb3A7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIGRldGVybWluZSBpZiB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IGlzIGVtcHR5LlxuICAgKlxuICAgKiBGb3IgaW5zdGFuY2UsIHRoZSByZXF1aXJlZCBkaXJlY3RpdmUgZG9lcyB0aGlzIHRvIHdvcmsgb3V0IGlmIHRoZSBpbnB1dCBoYXMgZGF0YSBvciBub3QuXG4gICAqIFRoZSBkZWZhdWx0IGAkaXNFbXB0eWAgZnVuY3Rpb24gY2hlY2tzIHdoZXRoZXIgdGhlIHZhbHVlIGlzIGB1bmRlZmluZWRgLCBgJydgLCBgbnVsbGAgb3IgYE5hTmAuXG4gICAqXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBmb3IgaW5wdXQgZGlyZWN0aXZlcyB3aG9zZSBjb25jZXB0IG9mIGJlaW5nIGVtcHR5IGlzIGRpZmZlcmVudCB0byB0aGVcbiAgICogZGVmYXVsdC4gVGhlIGBjaGVja2JveElucHV0VHlwZWAgZGlyZWN0aXZlIGRvZXMgdGhpcyBiZWNhdXNlIGluIGl0cyBjYXNlIGEgdmFsdWUgb2YgYGZhbHNlYFxuICAgKiBpbXBsaWVzIGVtcHR5LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIE1vZGVsIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGVtcHR5LlxuICAgKi9cbiAgdGhpcy4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlO1xuICB9O1xuXG4gIHZhciBwYXJlbnRGb3JtID0gJGVsZW1lbnQuaW5oZXJpdGVkRGF0YSgnJGZvcm1Db250cm9sbGVyJykgfHwgbnVsbEZvcm1DdHJsLFxuICAgICAgY3VycmVudFZhbGlkYXRpb25SdW5JZCA9IDA7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VmFsaWRpdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENoYW5nZSB0aGUgdmFsaWRpdHkgc3RhdGUsIGFuZCBub3RpZnkgdGhlIGZvcm0uXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgd2l0aGluICRwYXJzZXJzLyRmb3JtYXR0ZXJzIG9yIGEgY3VzdG9tIHZhbGlkYXRpb24gaW1wbGVtZW50YXRpb24uXG4gICAqIEhvd2V2ZXIsIGluIG1vc3QgY2FzZXMgaXQgc2hvdWxkIGJlIHN1ZmZpY2llbnQgdG8gdXNlIHRoZSBgbmdNb2RlbC4kdmFsaWRhdG9yc2AgYW5kXG4gICAqIGBuZ01vZGVsLiRhc3luY1ZhbGlkYXRvcnNgIGNvbGxlY3Rpb25zIHdoaWNoIHdpbGwgY2FsbCBgJHNldFZhbGlkaXR5YCBhdXRvbWF0aWNhbGx5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdGlvbkVycm9yS2V5IE5hbWUgb2YgdGhlIHZhbGlkYXRvci4gVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHdpbGwgYmUgYXNzaWduZWRcbiAgICogICAgICAgIHRvIGVpdGhlciBgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV1gIG9yIGAkcGVuZGluZ1t2YWxpZGF0aW9uRXJyb3JLZXldYFxuICAgKiAgICAgICAgKGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2ApLCBzbyB0aGF0IGl0IGlzIGF2YWlsYWJsZSBmb3IgZGF0YS1iaW5kaW5nLlxuICAgKiAgICAgICAgVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZVxuICAgKiAgICAgICAgZm9yIGNsYXNzIG5hbWUuIEV4YW1wbGU6IGBteUVycm9yYCB3aWxsIHJlc3VsdCBpbiBgbmctdmFsaWQtbXktZXJyb3JgIGFuZCBgbmctaW52YWxpZC1teS1lcnJvcmBcbiAgICogICAgICAgIGNsYXNzIGFuZCBjYW4gYmUgYm91bmQgdG8gYXMgIGB7e3NvbWVGb3JtLnNvbWVDb250cm9sLiRlcnJvci5teUVycm9yfX1gIC5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpLCBpbnZhbGlkIChmYWxzZSksIHBlbmRpbmcgKHVuZGVmaW5lZCksXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBvciBza2lwcGVkIChudWxsKS4gUGVuZGluZyBpcyB1c2VkIGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2AuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBTa2lwcGVkIGlzIHVzZWQgYnkgQW5ndWxhciB3aGVuIHZhbGlkYXRvcnMgZG8gbm90IHJ1biBiZWNhdXNlIG9mIHBhcnNlIGVycm9ycyBhbmRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gYCRhc3luY1ZhbGlkYXRvcnNgIGRvIG5vdCBydW4gYmVjYXVzZSBhbnkgb2YgdGhlIGAkdmFsaWRhdG9yc2AgZmFpbGVkLlxuICAgKi9cbiAgYWRkU2V0VmFsaWRpdHlNZXRob2Qoe1xuICAgIGN0cmw6IHRoaXMsXG4gICAgJGVsZW1lbnQ6ICRlbGVtZW50LFxuICAgIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IHRydWU7XG4gICAgfSxcbiAgICB1bnNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgfSxcbiAgICBwYXJlbnRGb3JtOiBwYXJlbnRGb3JtLFxuICAgICRhbmltYXRlOiAkYW5pbWF0ZVxuICB9KTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRQcmlzdGluZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmUgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctZGlydHknIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lXG4gICAqIHN0YXRlIChuZy1wcmlzdGluZSBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSBwcmlzdGluZSB3aGVuIHRoZSBtb2RlbCBoYXMgbm90IGJlZW4gY2hhbmdlZFxuICAgKiBmcm9tIHdoZW4gZmlyc3QgY29tcGlsZWQgd2l0aGluIHRoZW4gZm9ybS5cbiAgICovXG4gIHRoaXMuJHNldFByaXN0aW5lID0gZnVuY3Rpb24oKSB7XG4gICAgY3RybC4kZGlydHkgPSBmYWxzZTtcbiAgICBjdHJsLiRwcmlzdGluZSA9IHRydWU7XG4gICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoJGVsZW1lbnQsIERJUlRZX0NMQVNTKTtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcygkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFVudG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgdW50b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLXRvdWNoZWQnIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzXG4gICAqIHVudG91Y2hlZCBzdGF0ZSAobmctdW50b3VjaGVkIGNsYXNzKS4gVXBvbiBjb21waWxhdGlvbiwgYSBtb2RlbCBpcyBzZXQgYXMgdW50b3VjaGVkXG4gICAqIGJ5IGRlZmF1bHQsIGhvd2V2ZXIgdGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byByZXN0b3JlIHRoYXQgc3RhdGUgaWYgdGhlIG1vZGVsIGhhc1xuICAgKiBhbHJlYWR5IGJlZW4gdG91Y2hlZCBieSB0aGUgdXNlci5cbiAgICovXG4gIHRoaXMuJHNldFVudG91Y2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJHRvdWNoZWQgPSBmYWxzZTtcbiAgICBjdHJsLiR1bnRvdWNoZWQgPSB0cnVlO1xuICAgICRhbmltYXRlLnNldENsYXNzKCRlbGVtZW50LCBVTlRPVUNIRURfQ0xBU1MsIFRPVUNIRURfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctdW50b3VjaGVkJyBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0c1xuICAgKiB0b3VjaGVkIHN0YXRlIChuZy10b3VjaGVkIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIHRvdWNoZWQgd2hlbiB0aGUgdXNlciBoYXNcbiAgICogZmlyc3QgaW50ZXJhY3RlZCAoZm9jdXNzZWQpIG9uIHRoZSBtb2RlbCBpbnB1dCBlbGVtZW50IGFuZCB0aGVuIHNoaWZ0ZWQgZm9jdXMgYXdheSAoYmx1cnJlZClcbiAgICogZnJvbSB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICovXG4gIHRoaXMuJHNldFRvdWNoZWQgPSBmdW5jdGlvbigpIHtcbiAgICBjdHJsLiR0b3VjaGVkID0gdHJ1ZTtcbiAgICBjdHJsLiR1bnRvdWNoZWQgPSBmYWxzZTtcbiAgICAkYW5pbWF0ZS5zZXRDbGFzcygkZWxlbWVudCwgVE9VQ0hFRF9DTEFTUywgVU5UT1VDSEVEX0NMQVNTKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FuY2VsIGFuIHVwZGF0ZSBhbmQgcmVzZXQgdGhlIGlucHV0IGVsZW1lbnQncyB2YWx1ZSB0byBwcmV2ZW50IGFuIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYCxcbiAgICogd2hpY2ggbWF5IGJlIGNhdXNlZCBieSBhIHBlbmRpbmcgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZVxuICAgKiBmdXR1cmUgZXZlbnQuXG4gICAqXG4gICAqIElmIHlvdSBoYXZlIGFuIGlucHV0IHRoYXQgdXNlcyBgbmctbW9kZWwtb3B0aW9uc2AgdG8gc2V0IHVwIGRlYm91bmNlZCBldmVudHMgb3IgZXZlbnRzIHN1Y2hcbiAgICogYXMgYmx1ciB5b3UgY2FuIGhhdmUgYSBzaXR1YXRpb24gd2hlcmUgdGhlcmUgaXMgYSBwZXJpb2Qgd2hlbiB0aGUgYCR2aWV3VmFsdWVgXG4gICAqIGlzIG91dCBvZiBzeW5jaCB3aXRoIHRoZSBuZ01vZGVsJ3MgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogSW4gdGhpcyBjYXNlLCB5b3UgY2FuIHJ1biBpbnRvIGRpZmZpY3VsdGllcyBpZiB5b3UgdHJ5IHRvIHVwZGF0ZSB0aGUgbmdNb2RlbCdzIGAkbW9kZWxWYWx1ZWBcbiAgICogcHJvZ3JhbW1hdGljYWxseSBiZWZvcmUgdGhlc2UgZGVib3VuY2VkL2Z1dHVyZSBldmVudHMgaGF2ZSByZXNvbHZlZC9vY2N1cnJlZCwgYmVjYXVzZSBBbmd1bGFyJ3NcbiAgICogZGlydHkgY2hlY2tpbmcgbWVjaGFuaXNtIGlzIG5vdCBhYmxlIHRvIHRlbGwgd2hldGhlciB0aGUgbW9kZWwgaGFzIGFjdHVhbGx5IGNoYW5nZWQgb3Igbm90LlxuICAgKlxuICAgKiBUaGUgYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgcHJvZ3JhbW1hdGljYWxseSBjaGFuZ2luZyB0aGUgbW9kZWwgb2YgYW5cbiAgICogaW5wdXQgd2hpY2ggbWF5IGhhdmUgc3VjaCBldmVudHMgcGVuZGluZy4gVGhpcyBpcyBpbXBvcnRhbnQgaW4gb3JkZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlXG4gICAqIGlucHV0IGZpZWxkIHdpbGwgYmUgdXBkYXRlZCB3aXRoIHRoZSBuZXcgbW9kZWwgdmFsdWUgYW5kIGFueSBwZW5kaW5nIG9wZXJhdGlvbnMgYXJlIGNhbmNlbGxlZC5cbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cIm5nLW1vZGVsLWNhbmNlbC11cGRhdGVcIiBtb2R1bGU9XCJjYW5jZWwtdXBkYXRlLWV4YW1wbGVcIj5cbiAgICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAqICAgICBhbmd1bGFyLm1vZHVsZSgnY2FuY2VsLXVwZGF0ZS1leGFtcGxlJywgW10pXG4gICAqXG4gICAqICAgICAuY29udHJvbGxlcignQ2FuY2VsVXBkYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgICRzY29wZS5yZXNldFdpdGhDYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gICAqICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuICAgKiAgICAgICAgICAgJHNjb3BlLm15Rm9ybS5teUlucHV0MS4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAgICogICAgICAgICAgICRzY29wZS5teVZhbHVlID0gJyc7XG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9O1xuICAgKiAgICAgICAkc2NvcGUucmVzZXRXaXRob3V0Q2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICAgKiAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHtcbiAgICogICAgICAgICAgICRzY29wZS5teVZhbHVlID0gJyc7XG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9O1xuICAgKiAgICAgfV0pO1xuICAgKiAgIDwvZmlsZT5cbiAgICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ2FuY2VsVXBkYXRlQ29udHJvbGxlclwiPlxuICAgKiAgICAgICA8cD5UcnkgdHlwaW5nIHNvbWV0aGluZyBpbiBlYWNoIGlucHV0LiAgU2VlIHRoYXQgdGhlIG1vZGVsIG9ubHkgdXBkYXRlcyB3aGVuIHlvdVxuICAgKiAgICAgICAgICBibHVyIG9mZiB0aGUgaW5wdXQuXG4gICAqICAgICAgICA8L3A+XG4gICAqICAgICAgICA8cD5Ob3cgc2VlIHdoYXQgaGFwcGVucyBpZiB5b3Ugc3RhcnQgdHlwaW5nIHRoZW4gcHJlc3MgdGhlIEVzY2FwZSBrZXk8L3A+XG4gICAqXG4gICAqICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInIH1cIj5cbiAgICogICAgICAgICA8cD5XaXRoICRyb2xsYmFja1ZpZXdWYWx1ZSgpPC9wPlxuICAgKiAgICAgICAgIDxpbnB1dCBuYW1lPVwibXlJbnB1dDFcIiBuZy1tb2RlbD1cIm15VmFsdWVcIiBuZy1rZXlkb3duPVwicmVzZXRXaXRoQ2FuY2VsKCRldmVudClcIj48YnIvPlxuICAgKiAgICAgICAgIG15VmFsdWU6IFwie3sgbXlWYWx1ZSB9fVwiXG4gICAqXG4gICAqICAgICAgICAgPHA+V2l0aG91dCAkcm9sbGJhY2tWaWV3VmFsdWUoKTwvcD5cbiAgICogICAgICAgICA8aW5wdXQgbmFtZT1cIm15SW5wdXQyXCIgbmctbW9kZWw9XCJteVZhbHVlXCIgbmcta2V5ZG93bj1cInJlc2V0V2l0aG91dENhbmNlbCgkZXZlbnQpXCI+PGJyLz5cbiAgICogICAgICAgICBteVZhbHVlOiBcInt7IG15VmFsdWUgfX1cIlxuICAgKiAgICAgICA8L2Zvcm0+XG4gICAqICAgICA8L2Rpdj5cbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJHJvbGxiYWNrVmlld1ZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgY3RybC4kdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgY3RybC4kcmVuZGVyKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJ1bnMgZWFjaCBvZiB0aGUgcmVnaXN0ZXJlZCB2YWxpZGF0b3JzIChmaXJzdCBzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGFuZCB0aGVuIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzKS5cbiAgICovXG4gIHRoaXMuJHZhbGlkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gaWdub3JlICR2YWxpZGF0ZSBiZWZvcmUgbW9kZWwgaXMgaW5pdGlhbGl6ZWRcbiAgICBpZiAoaXNOdW1iZXIoY3RybC4kbW9kZWxWYWx1ZSkgJiYgaXNOYU4oY3RybC4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4kJHBhcnNlQW5kVmFsaWRhdGUoKTtcbiAgfTtcblxuICB0aGlzLiQkcnVuVmFsaWRhdG9ycyA9IGZ1bmN0aW9uKHBhcnNlVmFsaWQsIG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZG9uZUNhbGxiYWNrKSB7XG4gICAgY3VycmVudFZhbGlkYXRpb25SdW5JZCsrO1xuICAgIHZhciBsb2NhbFZhbGlkYXRpb25SdW5JZCA9IGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQ7XG5cbiAgICAvLyBjaGVjayBwYXJzZXIgZXJyb3JcbiAgICBpZiAoIXByb2Nlc3NQYXJzZUVycm9ycyhwYXJzZVZhbGlkKSkge1xuICAgICAgdmFsaWRhdGlvbkRvbmUoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXByb2Nlc3NTeW5jVmFsaWRhdG9ycygpKSB7XG4gICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByb2Nlc3NBc3luY1ZhbGlkYXRvcnMoKTtcblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXJzZUVycm9ycyhwYXJzZVZhbGlkKSB7XG4gICAgICB2YXIgZXJyb3JLZXkgPSBjdHJsLiQkcGFyc2VyTmFtZSB8fCAncGFyc2UnO1xuICAgICAgaWYgKHBhcnNlVmFsaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXRWYWxpZGl0eShlcnJvcktleSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRWYWxpZGl0eShlcnJvcktleSwgcGFyc2VWYWxpZCk7XG4gICAgICAgIGlmICghcGFyc2VWYWxpZCkge1xuICAgICAgICAgIGZvckVhY2goY3RybC4kdmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHtcbiAgICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1N5bmNWYWxpZGF0b3JzKCkge1xuICAgICAgdmFyIHN5bmNWYWxpZGF0b3JzVmFsaWQgPSB0cnVlO1xuICAgICAgZm9yRWFjaChjdHJsLiR2YWxpZGF0b3JzLCBmdW5jdGlvbih2YWxpZGF0b3IsIG5hbWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpO1xuICAgICAgICBzeW5jVmFsaWRhdG9yc1ZhbGlkID0gc3luY1ZhbGlkYXRvcnNWYWxpZCAmJiByZXN1bHQ7XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICAgIGlmICghc3luY1ZhbGlkYXRvcnNWYWxpZCkge1xuICAgICAgICBmb3JFYWNoKGN0cmwuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0FzeW5jVmFsaWRhdG9ycygpIHtcbiAgICAgIHZhciB2YWxpZGF0b3JQcm9taXNlcyA9IFtdO1xuICAgICAgdmFyIGFsbFZhbGlkID0gdHJ1ZTtcbiAgICAgIGZvckVhY2goY3RybC4kYXN5bmNWYWxpZGF0b3JzLCBmdW5jdGlvbih2YWxpZGF0b3IsIG5hbWUpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSB2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1Byb21pc2VMaWtlKHByb21pc2UpKSB7XG4gICAgICAgICAgdGhyb3cgJG5nTW9kZWxNaW5FcnIoXCIkYXN5bmNWYWxpZGF0b3JzXCIsXG4gICAgICAgICAgICBcIkV4cGVjdGVkIGFzeW5jaHJvbm91cyB2YWxpZGF0b3IgdG8gcmV0dXJuIGEgcHJvbWlzZSBidXQgZ290ICd7MH0nIGluc3RlYWQuXCIsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhbGlkYXRvclByb21pc2VzLnB1c2gocHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHRydWUpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGFsbFZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgZmFsc2UpO1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGlmICghdmFsaWRhdG9yUHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhbGlkYXRpb25Eb25lKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHEuYWxsKHZhbGlkYXRvclByb21pc2VzKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhbGlkYXRpb25Eb25lKGFsbFZhbGlkKTtcbiAgICAgICAgfSwgbm9vcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VmFsaWRpdHkobmFtZSwgaXNWYWxpZCkge1xuICAgICAgaWYgKGxvY2FsVmFsaWRhdGlvblJ1bklkID09PSBjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7XG4gICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRpb25Eb25lKGFsbFZhbGlkKSB7XG4gICAgICBpZiAobG9jYWxWYWxpZGF0aW9uUnVuSWQgPT09IGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcblxuICAgICAgICBkb25lQ2FsbGJhY2soYWxsVmFsaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhIHBlbmRpbmcgdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIHRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gIHRoaXMuJGNvbW1pdFZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiR2aWV3VmFsdWU7XG5cbiAgICAkdGltZW91dC5jYW5jZWwocGVuZGluZ0RlYm91bmNlKTtcblxuICAgIC8vIElmIHRoZSB2aWV3IHZhbHVlIGhhcyBub3QgY2hhbmdlZCB0aGVuIHdlIHNob3VsZCBqdXN0IGV4aXQsIGV4Y2VwdCBpbiB0aGUgY2FzZSB3aGVyZSB0aGVyZSBpc1xuICAgIC8vIGEgbmF0aXZlIHZhbGlkYXRvciBvbiB0aGUgZWxlbWVudC4gSW4gdGhpcyBjYXNlIHRoZSB2YWxpZGF0aW9uIHN0YXRlIG1heSBoYXZlIGNoYW5nZWQgZXZlbiB0aG91Z2hcbiAgICAvLyB0aGUgdmlld1ZhbHVlIGhhcyBzdGF5ZWQgZW1wdHkuXG4gICAgaWYgKGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID09PSB2aWV3VmFsdWUgJiYgKHZpZXdWYWx1ZSAhPT0gJycgfHwgIWN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcblxuICAgIC8vIGNoYW5nZSB0byBkaXJ0eVxuICAgIGlmIChjdHJsLiRwcmlzdGluZSkge1xuICAgICAgY3RybC4kZGlydHkgPSB0cnVlO1xuICAgICAgY3RybC4kcHJpc3RpbmUgPSBmYWxzZTtcbiAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgICAkYW5pbWF0ZS5hZGRDbGFzcygkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgICAgcGFyZW50Rm9ybS4kc2V0RGlydHkoKTtcbiAgICB9XG4gICAgdGhpcy4kJHBhcnNlQW5kVmFsaWRhdGUoKTtcbiAgfTtcblxuICB0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICB2YXIgcGFyc2VyVmFsaWQgPSBpc1VuZGVmaW5lZChtb2RlbFZhbHVlKSA/IHVuZGVmaW5lZCA6IHRydWU7XG5cbiAgICBpZiAocGFyc2VyVmFsaWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3RybC4kcGFyc2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb2RlbFZhbHVlID0gY3RybC4kcGFyc2Vyc1tpXShtb2RlbFZhbHVlKTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgcGFyc2VyVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIoY3RybC4kbW9kZWxWYWx1ZSkgJiYgaXNOYU4oY3RybC4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgIC8vIGN0cmwuJG1vZGVsVmFsdWUgaGFzIG5vdCBiZWVuIHRvdWNoZWQgeWV0Li4uXG4gICAgICBjdHJsLiRtb2RlbFZhbHVlID0gbmdNb2RlbEdldCgpO1xuICAgIH1cbiAgICB2YXIgcHJldk1vZGVsVmFsdWUgPSBjdHJsLiRtb2RlbFZhbHVlO1xuICAgIHZhciBhbGxvd0ludmFsaWQgPSBjdHJsLiRvcHRpb25zICYmIGN0cmwuJG9wdGlvbnMuYWxsb3dJbnZhbGlkO1xuICAgIGlmIChhbGxvd0ludmFsaWQpIHtcbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xuICAgICAgd3JpdGVUb01vZGVsSWZOZWVkZWQoKTtcbiAgICB9XG4gICAgY3RybC4kJHJ1blZhbGlkYXRvcnMocGFyc2VyVmFsaWQsIG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZnVuY3Rpb24oYWxsVmFsaWQpIHtcbiAgICAgIGlmICghYWxsb3dJbnZhbGlkKSB7XG4gICAgICAgIC8vIE5vdGU6IERvbid0IGNoZWNrIGN0cmwuJHZhbGlkIGhlcmUsIGFzIHdlIGNvdWxkIGhhdmVcbiAgICAgICAgLy8gZXh0ZXJuYWwgdmFsaWRhdG9ycyAoZS5nLiBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXIpLFxuICAgICAgICAvLyB0aGF0IGp1c3QgY2FsbCAkc2V0VmFsaWRpdHkgYW5kIG5lZWQgdGhlIG1vZGVsIHZhbHVlXG4gICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB0aGVpciB2YWxpZGl0eS5cbiAgICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IGFsbFZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgd3JpdGVUb01vZGVsSWZOZWVkZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCkge1xuICAgICAgaWYgKGN0cmwuJG1vZGVsVmFsdWUgIT09IHByZXZNb2RlbFZhbHVlKSB7XG4gICAgICAgIGN0cmwuJCR3cml0ZU1vZGVsVG9TY29wZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLiQkd3JpdGVNb2RlbFRvU2NvcGUgPSBmdW5jdGlvbigpIHtcbiAgICBuZ01vZGVsU2V0KGN0cmwuJG1vZGVsVmFsdWUpO1xuICAgIGZvckVhY2goY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVXBkYXRlIHRoZSB2aWV3IHZhbHVlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYW4gaW5wdXQgZGlyZWN0aXZlIHdhbnQgdG8gY2hhbmdlIHRoZSB2aWV3IHZhbHVlOyB0eXBpY2FsbHksXG4gICAqIHRoaXMgaXMgZG9uZSBmcm9tIHdpdGhpbiBhIERPTSBldmVudCBoYW5kbGVyLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fSBjYWxscyBpdCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgY2hhbmdlcyBhbmRcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fSBjYWxscyBpdCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogSWYgdGhlIG5ldyBgdmFsdWVgIGlzIGFuIG9iamVjdCAocmF0aGVyIHRoYW4gYSBzdHJpbmcgb3IgYSBudW1iZXIpLCB3ZSBzaG91bGQgbWFrZSBhIGNvcHkgb2YgdGhlXG4gICAqIG9iamVjdCBiZWZvcmUgcGFzc2luZyBpdCB0byBgJHNldFZpZXdWYWx1ZWAuICBUaGlzIGlzIGJlY2F1c2UgYG5nTW9kZWxgIGRvZXMgbm90IHBlcmZvcm0gYSBkZWVwXG4gICAqIHdhdGNoIG9mIG9iamVjdHMsIGl0IG9ubHkgbG9va3MgZm9yIGEgY2hhbmdlIG9mIGlkZW50aXR5LiBJZiB5b3Ugb25seSBjaGFuZ2UgdGhlIHByb3BlcnR5IG9mXG4gICAqIHRoZSBvYmplY3QgdGhlbiBuZ01vZGVsIHdpbGwgbm90IHJlYWxpc2UgdGhhdCB0aGUgb2JqZWN0IGhhcyBjaGFuZ2VkIGFuZCB3aWxsIG5vdCBpbnZva2UgdGhlXG4gICAqIGAkcGFyc2Vyc2AgYW5kIGAkdmFsaWRhdG9yc2AgcGlwZWxpbmVzLlxuICAgKlxuICAgKiBGb3IgdGhpcyByZWFzb24sIHlvdSBzaG91bGQgbm90IGNoYW5nZSBwcm9wZXJ0aWVzIG9mIHRoZSBjb3B5IG9uY2UgaXQgaGFzIGJlZW4gcGFzc2VkIHRvXG4gICAqIGAkc2V0Vmlld1ZhbHVlYC4gT3RoZXJ3aXNlIHlvdSBtYXkgY2F1c2UgdGhlIG1vZGVsIHZhbHVlIG9uIHRoZSBzY29wZSB0byBjaGFuZ2UgaW5jb3JyZWN0bHkuXG4gICAqXG4gICAqIFdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLCB0aGUgbmV3IGB2YWx1ZWAgd2lsbCBiZSBzdGFnZWQgZm9yIGNvbW1pdHRpbmcgdGhyb3VnaCB0aGUgYCRwYXJzZXJzYFxuICAgKiBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIElmIHRoZXJlIGFyZSBubyBzcGVjaWFsIHtAbGluayBuZ01vZGVsT3B0aW9uc30gc3BlY2lmaWVkIHRoZW4gdGhlIHN0YWdlZFxuICAgKiB2YWx1ZSBzZW50IGRpcmVjdGx5IGZvciBwcm9jZXNzaW5nLCBmaW5hbGx5IHRvIGJlIGFwcGxpZWQgdG8gYCRtb2RlbFZhbHVlYCBhbmQgdGhlbiB0aGVcbiAgICogKipleHByZXNzaW9uKiogc3BlY2lmaWVkIGluIHRoZSBgbmctbW9kZWxgIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogTGFzdGx5LCBhbGwgdGhlIHJlZ2lzdGVyZWQgY2hhbmdlIGxpc3RlbmVycywgaW4gdGhlIGAkdmlld0NoYW5nZUxpc3RlbmVyc2AgbGlzdCwgYXJlIGNhbGxlZC5cbiAgICpcbiAgICogSW4gY2FzZSB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30gZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBgdXBkYXRlT25gXG4gICAqIGFuZCB0aGUgYGRlZmF1bHRgIHRyaWdnZXIgaXMgbm90IGxpc3RlZCwgYWxsIHRob3NlIGFjdGlvbnMgd2lsbCByZW1haW4gcGVuZGluZyB1bnRpbCBvbmUgb2YgdGhlXG4gICAqIGB1cGRhdGVPbmAgZXZlbnRzIGlzIHRyaWdnZXJlZCBvbiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEFsbCB0aGVzZSBhY3Rpb25zIHdpbGwgYmUgZGVib3VuY2VkIGlmIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfVxuICAgKiBkaXJlY3RpdmUgaXMgdXNlZCB3aXRoIGEgY3VzdG9tIGRlYm91bmNlIGZvciB0aGlzIHBhcnRpY3VsYXIgZXZlbnQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdHJpZ2dlciBhIGAkZGlnZXN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIGZyb20gdGhlIHZpZXcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmlnZ2VyIEV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSB1cGRhdGUuXG4gICAqL1xuICB0aGlzLiRzZXRWaWV3VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSwgdHJpZ2dlcikge1xuICAgIGN0cmwuJHZpZXdWYWx1ZSA9IHZhbHVlO1xuICAgIGlmICghY3RybC4kb3B0aW9ucyB8fCBjdHJsLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCkge1xuICAgICAgY3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KHRyaWdnZXIpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQgPSBmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgdmFyIGRlYm91bmNlRGVsYXkgPSAwLFxuICAgICAgICBvcHRpb25zID0gY3RybC4kb3B0aW9ucyxcbiAgICAgICAgZGVib3VuY2U7XG5cbiAgICBpZiAob3B0aW9ucyAmJiBpc0RlZmluZWQob3B0aW9ucy5kZWJvdW5jZSkpIHtcbiAgICAgIGRlYm91bmNlID0gb3B0aW9ucy5kZWJvdW5jZTtcbiAgICAgIGlmIChpc051bWJlcihkZWJvdW5jZSkpIHtcbiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlO1xuICAgICAgfSBlbHNlIGlmIChpc051bWJlcihkZWJvdW5jZVt0cmlnZ2VyXSkpIHtcbiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlW3RyaWdnZXJdO1xuICAgICAgfSBlbHNlIGlmIChpc051bWJlcihkZWJvdW5jZVsnZGVmYXVsdCddKSkge1xuICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2VbJ2RlZmF1bHQnXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkdGltZW91dC5jYW5jZWwocGVuZGluZ0RlYm91bmNlKTtcbiAgICBpZiAoZGVib3VuY2VEZWxheSkge1xuICAgICAgcGVuZGluZ0RlYm91bmNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSwgZGVib3VuY2VEZWxheSk7XG4gICAgfSBlbHNlIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBtb2RlbCAtPiB2YWx1ZVxuICAvLyBOb3RlOiB3ZSBjYW5ub3QgdXNlIGEgbm9ybWFsIHNjb3BlLiR3YXRjaCBhcyB3ZSB3YW50IHRvIGRldGVjdCB0aGUgZm9sbG93aW5nOlxuICAvLyAxLiBzY29wZSB2YWx1ZSBpcyAnYSdcbiAgLy8gMi4gdXNlciBlbnRlcnMgJ2InXG4gIC8vIDMuIG5nLWNoYW5nZSBraWNrcyBpbiBhbmQgcmV2ZXJ0cyBzY29wZSB2YWx1ZSB0byAnYSdcbiAgLy8gICAgLT4gc2NvcGUgdmFsdWUgZGlkIG5vdCBjaGFuZ2Ugc2luY2UgdGhlIGxhc3QgZGlnZXN0IGFzXG4gIC8vICAgICAgIG5nLWNoYW5nZSBleGVjdXRlcyBpbiBhcHBseSBwaGFzZVxuICAvLyA0LiB2aWV3IHNob3VsZCBiZSBjaGFuZ2VkIGJhY2sgdG8gJ2EnXG4gICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gbmdNb2RlbFdhdGNoKCkge1xuICAgIHZhciBtb2RlbFZhbHVlID0gbmdNb2RlbEdldCgpO1xuXG4gICAgLy8gaWYgc2NvcGUgbW9kZWwgdmFsdWUgYW5kIG5nTW9kZWwgdmFsdWUgYXJlIG91dCBvZiBzeW5jXG4gICAgLy8gVE9ETyhwZXJmKTogd2h5IG5vdCBtb3ZlIHRoaXMgdG8gdGhlIGFjdGlvbiBmbj9cbiAgICBpZiAobW9kZWxWYWx1ZSAhPT0gY3RybC4kbW9kZWxWYWx1ZSkge1xuICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG5cbiAgICAgIHZhciBmb3JtYXR0ZXJzID0gY3RybC4kZm9ybWF0dGVycyxcbiAgICAgICAgICBpZHggPSBmb3JtYXR0ZXJzLmxlbmd0aDtcblxuICAgICAgdmFyIHZpZXdWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3aGlsZSAoaWR4LS0pIHtcbiAgICAgICAgdmlld1ZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZpZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2aWV3VmFsdWUpIHtcbiAgICAgICAgY3RybC4kdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICAgIGN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKHVuZGVmaW5lZCwgbW9kZWxWYWx1ZSwgdmlld1ZhbHVlLCBub29wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbW9kZWxWYWx1ZTtcbiAgfSk7XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW9kZWxcbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHByaW9yaXR5IDFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdNb2RlbGAgZGlyZWN0aXZlIGJpbmRzIGFuIGBpbnB1dGAsYHNlbGVjdGAsIGB0ZXh0YXJlYWAgKG9yIGN1c3RvbSBmb3JtIGNvbnRyb2wpIHRvIGFcbiAqIHByb3BlcnR5IG9uIHRoZSBzY29wZSB1c2luZyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBOZ01vZGVsQ29udHJvbGxlcn0sXG4gKiB3aGljaCBpcyBjcmVhdGVkIGFuZCBleHBvc2VkIGJ5IHRoaXMgZGlyZWN0aXZlLlxuICpcbiAqIGBuZ01vZGVsYCBpcyByZXNwb25zaWJsZSBmb3I6XG4gKlxuICogLSBCaW5kaW5nIHRoZSB2aWV3IGludG8gdGhlIG1vZGVsLCB3aGljaCBvdGhlciBkaXJlY3RpdmVzIHN1Y2ggYXMgYGlucHV0YCwgYHRleHRhcmVhYCBvciBgc2VsZWN0YFxuICogICByZXF1aXJlLlxuICogLSBQcm92aWRpbmcgdmFsaWRhdGlvbiBiZWhhdmlvciAoaS5lLiByZXF1aXJlZCwgbnVtYmVyLCBlbWFpbCwgdXJsKS5cbiAqIC0gS2VlcGluZyB0aGUgc3RhdGUgb2YgdGhlIGNvbnRyb2wgKHZhbGlkL2ludmFsaWQsIGRpcnR5L3ByaXN0aW5lLCB0b3VjaGVkL3VudG91Y2hlZCwgdmFsaWRhdGlvbiBlcnJvcnMpLlxuICogLSBTZXR0aW5nIHJlbGF0ZWQgY3NzIGNsYXNzZXMgb24gdGhlIGVsZW1lbnQgKGBuZy12YWxpZGAsIGBuZy1pbnZhbGlkYCwgYG5nLWRpcnR5YCwgYG5nLXByaXN0aW5lYCwgYG5nLXRvdWNoZWRgLCBgbmctdW50b3VjaGVkYCkgaW5jbHVkaW5nIGFuaW1hdGlvbnMuXG4gKiAtIFJlZ2lzdGVyaW5nIHRoZSBjb250cm9sIHdpdGggaXRzIHBhcmVudCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0uXG4gKlxuICogTm90ZTogYG5nTW9kZWxgIHdpbGwgdHJ5IHRvIGJpbmQgdG8gdGhlIHByb3BlcnR5IGdpdmVuIGJ5IGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24gb24gdGhlXG4gKiBjdXJyZW50IHNjb3BlLiBJZiB0aGUgcHJvcGVydHkgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIHRoaXMgc2NvcGUsIGl0IHdpbGwgYmUgY3JlYXRlZFxuICogaW1wbGljaXRseSBhbmQgYWRkZWQgdG8gdGhlIHNjb3BlLlxuICpcbiAqIEZvciBiZXN0IHByYWN0aWNlcyBvbiB1c2luZyBgbmdNb2RlbGAsIHNlZTpcbiAqXG4gKiAgLSBbVW5kZXJzdGFuZGluZyBTY29wZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9VbmRlcnN0YW5kaW5nLVNjb3BlcylcbiAqXG4gKiBGb3IgYmFzaWMgZXhhbXBsZXMsIGhvdyB0byB1c2UgYG5nTW9kZWxgLCBzZWU6XG4gKlxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3RleHRdIHRleHR9XG4gKiAgICAtIHtAbGluayBpbnB1dFtjaGVja2JveF0gY2hlY2tib3h9XG4gKiAgICAtIHtAbGluayBpbnB1dFtyYWRpb10gcmFkaW99XG4gKiAgICAtIHtAbGluayBpbnB1dFtudW1iZXJdIG51bWJlcn1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2VtYWlsXSBlbWFpbH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3VybF0gdXJsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZV0gZGF0ZX1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2RhdGVUaW1lTG9jYWxdIGRhdGVUaW1lTG9jYWx9XG4gKiAgICAtIHtAbGluayBpbnB1dFt0aW1lXSB0aW1lfVxuICogICAgLSB7QGxpbmsgaW5wdXRbbW9udGhdIG1vbnRofVxuICogICAgLSB7QGxpbmsgaW5wdXRbd2Vla10gd2Vla31cbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH1cbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6dGV4dGFyZWEgdGV4dGFyZWF9XG4gKlxuICogIyBDU1MgY2xhc3Nlc1xuICogVGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGFzc29jaWF0ZWQgaW5wdXQvc2VsZWN0L3RleHRhcmVhIGVsZW1lbnRcbiAqIGRlcGVuZGluZyBvbiB0aGUgdmFsaWRpdHkgb2YgdGhlIG1vZGVsLlxuICpcbiAqICAtIGBuZy12YWxpZGA6IHRoZSBtb2RlbCBpcyB2YWxpZFxuICogIC0gYG5nLWludmFsaWRgOiB0aGUgbW9kZWwgaXMgaW52YWxpZFxuICogIC0gYG5nLXZhbGlkLVtrZXldYDogZm9yIGVhY2ggdmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctaW52YWxpZC1ba2V5XWA6IGZvciBlYWNoIGludmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctcHJpc3RpbmVgOiB0aGUgY29udHJvbCBoYXNuJ3QgYmVlbiBpbnRlcmFjdGVkIHdpdGggeWV0XG4gKiAgLSBgbmctZGlydHlgOiB0aGUgY29udHJvbCBoYXMgYmVlbiBpbnRlcmFjdGVkIHdpdGhcbiAqICAtIGBuZy10b3VjaGVkYDogdGhlIGNvbnRyb2wgaGFzIGJlZW4gYmx1cnJlZFxuICogIC0gYG5nLXVudG91Y2hlZGA6IHRoZSBjb250cm9sIGhhc24ndCBiZWVuIGJsdXJyZWRcbiAqICAtIGBuZy1wZW5kaW5nYDogYW55IGAkYXN5bmNWYWxpZGF0b3JzYCBhcmUgdW5mdWxmaWxsZWRcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBuZ0FuaW1hdGUgY2FuIGRldGVjdCBlYWNoIG9mIHRoZXNlIGNsYXNzZXMgd2hlbiBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqXG4gKiAjIyBBbmltYXRpb24gSG9va3NcbiAqXG4gKiBBbmltYXRpb25zIHdpdGhpbiBtb2RlbHMgYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWRcbiAqIG9uIHRoZSBpbnB1dCBlbGVtZW50IHdoaWNoIGlzIGF0dGFjaGVkIHRvIHRoZSBtb2RlbC4gVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCxcbiAqIGAubmctaW52YWxpZGAgYW5kIGAubmctdmFsaWRgIGFzIHdlbGwgYXMgYW55IG90aGVyIHZhbGlkYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCBvbiB0aGUgbW9kZWwgaXRzZWxmLlxuICogVGhlIGFuaW1hdGlvbnMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdpdGhpbiBuZ01vZGVsIGFyZSBzaW1pbGFyIHRvIGhvdyB0aGV5IHdvcmsgaW4gbmdDbGFzcyBhbmRcbiAqIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGwgYXMgSlMgYW5pbWF0aW9ucy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgYSBzaW1wbGUgd2F5IHRvIHV0aWxpemUgQ1NTIHRyYW5zaXRpb25zIHRvIHN0eWxlIGFuIGlucHV0IGVsZW1lbnRcbiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6XG4gKlxuICogPHByZT5cbiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZVxuICogLy9hZHZhbmNlZCBhbmltYXRpb25zXG4gKiAubXktaW5wdXQge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgYmFja2dyb3VuZDogd2hpdGU7XG4gKiB9XG4gKiAubXktaW5wdXQubmctaW52YWxpZCB7XG4gKiAgIGJhY2tncm91bmQ6IHJlZDtcbiAqICAgY29sb3I6d2hpdGU7XG4gKiB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgZml4QmFzZT1cInRydWVcIiBtb2R1bGU9XCJpbnB1dEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS52YWwgPSAnMSc7XG4gICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxzdHlsZT5cbiAgICAgICAgIC5teS1pbnB1dCB7XG4gICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgIH1cbiAgICAgICAgIC5teS1pbnB1dC5uZy1pbnZhbGlkIHtcbiAgICAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgIH1cbiAgICAgICA8L3N0eWxlPlxuICAgICAgIFVwZGF0ZSBpbnB1dCB0byBzZWUgdHJhbnNpdGlvbnMgd2hlbiB2YWxpZC9pbnZhbGlkLlxuICAgICAgIEludGVnZXIgaXMgYSB2YWxpZCB2YWx1ZS5cbiAgICAgICA8Zm9ybSBuYW1lPVwidGVzdEZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInZhbFwiIG5nLXBhdHRlcm49XCIvXlxcZCskL1wiIG5hbWU9XCJhbmltXCIgY2xhc3M9XCJteS1pbnB1dFwiIC8+XG4gICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogIyMgQmluZGluZyB0byBhIGdldHRlci9zZXR0ZXJcbiAqXG4gKiBTb21ldGltZXMgaXQncyBoZWxwZnVsIHRvIGJpbmQgYG5nTW9kZWxgIHRvIGEgZ2V0dGVyL3NldHRlciBmdW5jdGlvbi4gIEEgZ2V0dGVyL3NldHRlciBpcyBhXG4gKiBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCB6ZXJvIGFyZ3VtZW50cywgYW5kIHNldHNcbiAqIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBhIG1vZGVsIHdoZW4gY2FsbGVkIHdpdGggYW4gYXJndW1lbnQuIEl0J3Mgc29tZXRpbWVzIHVzZWZ1bCB0byB1c2UgdGhpc1xuICogZm9yIG1vZGVscyB0aGF0IGhhdmUgYW4gaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gdGhhdCdzIGRpZmZlcmVudCB0aGFuIHdoYXQgdGhlIG1vZGVsIGV4cG9zZXNcbiAqIHRvIHRoZSB2aWV3LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2U6KiogSXQncyBiZXN0IHRvIGtlZXAgZ2V0dGVycyBmYXN0IGJlY2F1c2UgQW5ndWxhciBpcyBsaWtlbHkgdG8gY2FsbCB0aGVtIG1vcmVcbiAqIGZyZXF1ZW50bHkgdGhhbiBvdGhlciBwYXJ0cyBvZiB5b3VyIGNvZGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBZb3UgdXNlIHRoaXMgYmVoYXZpb3IgYnkgYWRkaW5nIGBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiYCB0byBhbiBlbGVtZW50IHRoYXRcbiAqIGhhcyBgbmctbW9kZWxgIGF0dGFjaGVkIHRvIGl0LiBZb3UgY2FuIGFsc28gYWRkIGBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiYCB0b1xuICogYSBgPGZvcm0+YCwgd2hpY2ggd2lsbCBlbmFibGUgdGhpcyBiZWhhdmlvciBmb3IgYWxsIGA8aW5wdXQ+YHMgd2l0aGluIGl0LiBTZWVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgYG5nTW9kZWxPcHRpb25zYH0gZm9yIG1vcmUuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYG5nTW9kZWxgIHdpdGggYSBnZXR0ZXIvc2V0dGVyOlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbC1nZXR0ZXItc2V0dGVyXCIgbW9kdWxlPVwiZ2V0dGVyU2V0dGVyRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICAgTmFtZTpcbiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCIgLz5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZSgpXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgdmFyIF9uYW1lID0gJ0JyaWFuJztcbiAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAgICAgICAgICAgbmFtZTogZnVuY3Rpb24obmV3TmFtZSkge1xuICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG5ld05hbWUpKSB7XG4gICAgICAgICAgICAgICAgIF9uYW1lID0gbmV3TmFtZTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIHJldHVybiBfbmFtZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nTW9kZWxEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdeP2Zvcm0nLCAnXj9uZ01vZGVsT3B0aW9ucyddLFxuICAgIGNvbnRyb2xsZXI6IE5nTW9kZWxDb250cm9sbGVyLFxuICAgIC8vIFByZWxpbmsgbmVlZHMgdG8gcnVuIGJlZm9yZSBhbnkgaW5wdXQgZGlyZWN0aXZlXG4gICAgLy8gc28gdGhhdCB3ZSBjYW4gc2V0IHRoZSBOZ01vZGVsT3B0aW9ucyBpbiBOZ01vZGVsQ29udHJvbGxlclxuICAgIC8vIGJlZm9yZSBhbnlvbmUgZWxzZSB1c2VzIGl0LlxuICAgIHByaW9yaXR5OiAxLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nTW9kZWxDb21waWxlKGVsZW1lbnQpIHtcbiAgICAgIC8vIFNldHVwIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2xcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKFVOVE9VQ0hFRF9DTEFTUykuYWRkQ2xhc3MoVkFMSURfQ0xBU1MpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nTW9kZWxQcmVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXSxcbiAgICAgICAgICAgICAgZm9ybUN0cmwgPSBjdHJsc1sxXSB8fCBudWxsRm9ybUN0cmw7XG5cbiAgICAgICAgICBtb2RlbEN0cmwuJCRzZXRPcHRpb25zKGN0cmxzWzJdICYmIGN0cmxzWzJdLiRvcHRpb25zKTtcblxuICAgICAgICAgIC8vIG5vdGlmeSBvdGhlcnMsIGVzcGVjaWFsbHkgcGFyZW50IGZvcm1zXG4gICAgICAgICAgZm9ybUN0cmwuJGFkZENvbnRyb2wobW9kZWxDdHJsKTtcblxuICAgICAgICAgIGF0dHIuJG9ic2VydmUoJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKG1vZGVsQ3RybC4kbmFtZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgZm9ybUN0cmwuJCRyZW5hbWVDb250cm9sKG1vZGVsQ3RybCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9ybUN0cmwuJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdDogZnVuY3Rpb24gbmdNb2RlbFBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXTtcbiAgICAgICAgICBpZiAobW9kZWxDdHJsLiRvcHRpb25zICYmIG1vZGVsQ3RybC4kb3B0aW9ucy51cGRhdGVPbikge1xuICAgICAgICAgICAgZWxlbWVudC5vbihtb2RlbEN0cmwuJG9wdGlvbnMudXBkYXRlT24sIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGV2ICYmIGV2LnR5cGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxlbWVudC5vbignYmx1cicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiR0b3VjaGVkKSByZXR1cm47XG5cbiAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRUb3VjaGVkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDaGFuZ2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV2YWx1YXRlIHRoZSBnaXZlbiBleHByZXNzaW9uIHdoZW4gdGhlIHVzZXIgY2hhbmdlcyB0aGUgaW5wdXQuXG4gKiBUaGUgZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQgaW1tZWRpYXRlbHksIHVubGlrZSB0aGUgSmF2YVNjcmlwdCBvbmNoYW5nZSBldmVudFxuICogd2hpY2ggb25seSB0cmlnZ2VycyBhdCB0aGUgZW5kIG9mIGEgY2hhbmdlICh1c3VhbGx5LCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGVcbiAqIGZvcm0gZWxlbWVudCBvciBwcmVzc2VzIHRoZSByZXR1cm4ga2V5KS5cbiAqXG4gKiBUaGUgYG5nQ2hhbmdlYCBleHByZXNzaW9uIGlzIG9ubHkgZXZhbHVhdGVkIHdoZW4gYSBjaGFuZ2UgaW4gdGhlIGlucHV0IHZhbHVlIGNhdXNlc1xuICogYSBuZXcgdmFsdWUgdG8gYmUgY29tbWl0dGVkIHRvIHRoZSBtb2RlbC5cbiAqXG4gKiBJdCB3aWxsIG5vdCBiZSBldmFsdWF0ZWQ6XG4gKiAqIGlmIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBgJHBhcnNlcnNgIHRyYW5zZm9ybWF0aW9uIHBpcGVsaW5lIGhhcyBub3QgY2hhbmdlZFxuICogKiBpZiB0aGUgaW5wdXQgaGFzIGNvbnRpbnVlZCB0byBiZSBpbnZhbGlkIHNpbmNlIHRoZSBtb2RlbCB3aWxsIHN0YXkgYG51bGxgXG4gKiAqIGlmIHRoZSBtb2RlbCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIG5vdCBieSBhIGNoYW5nZSB0byB0aGUgaW5wdXQgdmFsdWVcbiAqXG4gKlxuICogTm90ZSwgdGhpcyBkaXJlY3RpdmUgcmVxdWlyZXMgYG5nTW9kZWxgIHRvIGJlIHByZXNlbnQuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGFuZ2Uge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbiBjaGFuZ2VcbiAqIGluIGlucHV0IHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdDaGFuZ2UtZGlyZWN0aXZlXCIgbW9kdWxlPVwiY2hhbmdlRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2hhbmdlRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5jb3VudGVyID0gMDtcbiAqICAgICAgICAgICAkc2NvcGUuY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICAkc2NvcGUuY291bnRlcisrO1xuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29uZmlybWVkXCIgbmctY2hhbmdlPVwiY2hhbmdlKClcIiBpZD1cIm5nLWNoYW5nZS1leGFtcGxlMVwiIC8+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb25maXJtZWRcIiBpZD1cIm5nLWNoYW5nZS1leGFtcGxlMlwiIC8+XG4gKiAgICAgICA8bGFiZWwgZm9yPVwibmctY2hhbmdlLWV4YW1wbGUyXCI+Q29uZmlybWVkPC9sYWJlbD48YnIgLz5cbiAqICAgICAgIDx0dD5kZWJ1ZyA9IHt7Y29uZmlybWVkfX08L3R0Pjxici8+XG4gKiAgICAgICA8dHQ+Y291bnRlciA9IHt7Y291bnRlcn19PC90dD48YnIvPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICB2YXIgY291bnRlciA9IGVsZW1lbnQoYnkuYmluZGluZygnY291bnRlcicpKTtcbiAqICAgICB2YXIgZGVidWcgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvbmZpcm1lZCcpKTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIHZpZXcnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9Db250YWluKCcwJyk7XG4gKlxuICogICAgICAgZWxlbWVudChieS5pZCgnbmctY2hhbmdlLWV4YW1wbGUxJykpLmNsaWNrKCk7XG4gKlxuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEnKTtcbiAqICAgICAgIGV4cGVjdChkZWJ1Zy5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIG5vdCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTInKSkuY2xpY2soKTtcblxuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAqICAgICAgIGV4cGVjdChkZWJ1Zy5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NoYW5nZURpcmVjdGl2ZSA9IHZhbHVlRm4oe1xuICByZXN0cmljdDogJ0EnLFxuICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgc2NvcGUuJGV2YWwoYXR0ci5uZ0NoYW5nZSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5cbnZhciByZXF1aXJlZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcbiAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnRcblxuICAgICAgY3RybC4kdmFsaWRhdG9ycy5yZXF1aXJlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhYXR0ci5yZXF1aXJlZCB8fCAhY3RybC4kaXNFbXB0eSh2YWx1ZSk7XG4gICAgICB9O1xuXG4gICAgICBhdHRyLiRvYnNlcnZlKCdyZXF1aXJlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxuXG52YXIgcGF0dGVybkRpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIHJlZ2V4cCwgcGF0dGVybkV4cCA9IGF0dHIubmdQYXR0ZXJuIHx8IGF0dHIucGF0dGVybjtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ3BhdHRlcm4nLCBmdW5jdGlvbihyZWdleCkge1xuICAgICAgICBpZiAoaXNTdHJpbmcocmVnZXgpICYmIHJlZ2V4Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAocmVnZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZ2V4ICYmICFyZWdleC50ZXN0KSB7XG4gICAgICAgICAgdGhyb3cgbWluRXJyKCduZ1BhdHRlcm4nKSgnbm9yZWdleHAnLFxuICAgICAgICAgICAgJ0V4cGVjdGVkIHswfSB0byBiZSBhIFJlZ0V4cCBidXQgd2FzIHsxfS4gRWxlbWVudDogezJ9JywgcGF0dGVybkV4cCxcbiAgICAgICAgICAgIHJlZ2V4LCBzdGFydGluZ1RhZyhlbG0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2V4cCA9IHJlZ2V4IHx8IHVuZGVmaW5lZDtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLnBhdHRlcm4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQocmVnZXhwKSB8fCByZWdleHAudGVzdCh2YWx1ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cblxudmFyIG1heGxlbmd0aERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIG1heGxlbmd0aCA9IDA7XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXhsZW5ndGgnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBtYXhsZW5ndGggPSBpbnQodmFsdWUpIHx8IDA7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4bGVuZ3RoID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KG1vZGVsVmFsdWUpIHx8IHZpZXdWYWx1ZS5sZW5ndGggPD0gbWF4bGVuZ3RoO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgbWlubGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbWlubGVuZ3RoID0gMDtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbmxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIG1pbmxlbmd0aCA9IGludCh2YWx1ZSkgfHwgMDtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW5sZW5ndGggPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkobW9kZWxWYWx1ZSkgfHwgdmlld1ZhbHVlLmxlbmd0aCA+PSBtaW5sZW5ndGg7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0xpc3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRleHQgaW5wdXQgdGhhdCBjb252ZXJ0cyBiZXR3ZWVuIGEgZGVsaW1pdGVkIHN0cmluZyBhbmQgYW4gYXJyYXkgb2Ygc3RyaW5ncy4gVGhlIGRlZmF1bHRcbiAqIGRlbGltaXRlciBpcyBhIGNvbW1hIGZvbGxvd2VkIGJ5IGEgc3BhY2UgLSBlcXVpdmFsZW50IHRvIGBuZy1saXN0PVwiLCBcImAuIFlvdSBjYW4gc3BlY2lmeSBhIGN1c3RvbVxuICogZGVsaW1pdGVyIGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG5nTGlzdGAgYXR0cmlidXRlIC0gZm9yIGV4YW1wbGUsIGBuZy1saXN0PVwiIHwgXCJgLlxuICpcbiAqIFRoZSBiZWhhdmlvdXIgb2YgdGhlIGRpcmVjdGl2ZSBpcyBhZmZlY3RlZCBieSB0aGUgdXNlIG9mIHRoZSBgbmdUcmltYCBhdHRyaWJ1dGUuXG4gKiAqIElmIGBuZ1RyaW1gIGlzIHNldCB0byBgXCJmYWxzZVwiYCB0aGVuIHdoaXRlc3BhY2UgYXJvdW5kIGJvdGggdGhlIHNlcGFyYXRvciBhbmQgZWFjaFxuICogICBsaXN0IGl0ZW0gaXMgcmVzcGVjdGVkLiBUaGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBvZiB0aGUgZGlyZWN0aXZlIGlzIHJlc3BvbnNpYmxlIGZvclxuICogICBkZWFsaW5nIHdpdGggd2hpdGVzcGFjZSBidXQgYWxzbyBhbGxvd3MgeW91IHRvIHVzZSB3aGl0ZXNwYWNlIGFzIGEgZGVsaW1pdGVyLCBzdWNoIGFzIGFcbiAqICAgdGFiIG9yIG5ld2xpbmUgY2hhcmFjdGVyLlxuICogKiBPdGhlcndpc2Ugd2hpdGVzcGFjZSBhcm91bmQgdGhlIGRlbGltaXRlciBpcyBpZ25vcmVkIHdoZW4gc3BsaXR0aW5nIChhbHRob3VnaCBpdCBpcyByZXNwZWN0ZWRcbiAqICAgd2hlbiBqb2luaW5nIHRoZSBsaXN0IGl0ZW1zIGJhY2sgdG9nZXRoZXIpIGFuZCB3aGl0ZXNwYWNlIGFyb3VuZCBlYWNoIGxpc3QgaXRlbSBpcyBzdHJpcHBlZFxuICogICBiZWZvcmUgaXQgaXMgYWRkZWQgdG8gdGhlIG1vZGVsLlxuICpcbiAqICMjIyBFeGFtcGxlIHdpdGggVmFsaWRhdGlvblxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0xpc3QtZGlyZWN0aXZlXCIgbW9kdWxlPVwibGlzdEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgICBhbmd1bGFyLm1vZHVsZSgnbGlzdEV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydtb3JwaGV1cycsICduZW8nLCAndHJpbml0eSddO1xuICogICAgICAgIH1dKTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICBMaXN0OiA8aW5wdXQgbmFtZT1cIm5hbWVzSW5wdXRcIiBuZy1tb2RlbD1cIm5hbWVzXCIgbmctbGlzdCByZXF1aXJlZD5cbiAqICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAqICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gKiAgICAgIDxicj5cbiAqICAgICAgPHR0Pm5hbWVzID0ge3tuYW1lc319PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiRlcnJvciA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAqICAgICA8L2Zvcm0+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBsaXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lcycpKTtcbiAqICAgICB2YXIgbmFtZXMgPSBlbGVtZW50KGJ5LmV4YWN0QmluZGluZygnbmFtZXMnKSk7XG4gKiAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQnKSk7XG4gKiAgICAgdmFyIGVycm9yID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZXJyb3InKSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KG5hbWVzLmdldFRleHQoKSkudG9Db250YWluKCdbXCJtb3JwaGV1c1wiLFwibmVvXCIsXCJ0cmluaXR5XCJdJyk7XG4gKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAqICAgICAgIGV4cGVjdChlcnJvci5nZXRDc3NWYWx1ZSgnZGlzcGxheScpKS50b0JlKCdub25lJyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICogICAgICAgbGlzdElucHV0LmNsZWFyKCk7XG4gKiAgICAgICBsaXN0SW5wdXQuc2VuZEtleXMoJycpO1xuICpcbiAqICAgICAgIGV4cGVjdChuYW1lcy5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gKiAgICAgICBleHBlY3QoZXJyb3IuZ2V0Q3NzVmFsdWUoJ2Rpc3BsYXknKSkubm90LnRvQmUoJ25vbmUnKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqICMjIyBFeGFtcGxlIC0gc3BsaXR0aW5nIG9uIHdoaXRlc3BhY2VcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0xpc3QtZGlyZWN0aXZlLW5ld2xpbmVzXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJsaXN0XCIgbmctbGlzdD1cIiYjMTA7XCIgbmctdHJpbT1cImZhbHNlXCI+PC90ZXh0YXJlYT5cbiAqICAgIDxwcmU+e3sgbGlzdCB8IGpzb24gfX08L3ByZT5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoXCJzaG91bGQgc3BsaXQgdGhlIHRleHQgYnkgbmV3bGluZXNcIiwgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbGlzdCcpKTtcbiAqICAgICAgIHZhciBvdXRwdXQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QgfCBqc29uJykpO1xuICogICAgICAgbGlzdElucHV0LnNlbmRLZXlzKCdhYmNcXG5kZWZcXG5naGknKTtcbiAqICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1tcXG4gIFwiYWJjXCIsXFxuICBcImRlZlwiLFxcbiAgXCJnaGlcIlxcbl0nKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZz19IG5nTGlzdCBvcHRpb25hbCBkZWxpbWl0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBzcGxpdCB0aGUgdmFsdWUuXG4gKi9cbnZhciBuZ0xpc3REaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgICAvLyBXZSB3YW50IHRvIGNvbnRyb2wgd2hpdGVzcGFjZSB0cmltbWluZyBzbyB3ZSB1c2UgdGhpcyBjb252b2x1dGVkIGFwcHJvYWNoXG4gICAgICAvLyB0byBhY2Nlc3MgdGhlIG5nTGlzdCBhdHRyaWJ1dGUsIHdoaWNoIGRvZXNuJ3QgcHJlLXRyaW0gdGhlIGF0dHJpYnV0ZVxuICAgICAgdmFyIG5nTGlzdCA9IGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLm5nTGlzdCkgfHwgJywgJztcbiAgICAgIHZhciB0cmltVmFsdWVzID0gYXR0ci5uZ1RyaW0gIT09ICdmYWxzZSc7XG4gICAgICB2YXIgc2VwYXJhdG9yID0gdHJpbVZhbHVlcyA/IHRyaW0obmdMaXN0KSA6IG5nTGlzdDtcblxuICAgICAgdmFyIHBhcnNlID0gZnVuY3Rpb24odmlld1ZhbHVlKSB7XG4gICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgaXMgaW52YWxpZCAoc2F5IHJlcXVpcmVkIGJ1dCBlbXB0eSkgaXQgd2lsbCBiZSBgdW5kZWZpbmVkYFxuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmlld1ZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBsaXN0ID0gW107XG5cbiAgICAgICAgaWYgKHZpZXdWYWx1ZSkge1xuICAgICAgICAgIGZvckVhY2godmlld1ZhbHVlLnNwbGl0KHNlcGFyYXRvciksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIGxpc3QucHVzaCh0cmltVmFsdWVzID8gdHJpbSh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwuJHBhcnNlcnMucHVzaChwYXJzZSk7XG4gICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLmpvaW4obmdMaXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9KTtcblxuICAgICAgLy8gT3ZlcnJpZGUgdGhlIHN0YW5kYXJkICRpc0VtcHR5IGJlY2F1c2UgYW4gZW1wdHkgYXJyYXkgbWVhbnMgdGhlIGlucHV0IGlzIGVtcHR5LlxuICAgICAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUgfHwgIXZhbHVlLmxlbmd0aDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuXG52YXIgQ09OU1RBTlRfVkFMVUVfUkVHRVhQID0gL14odHJ1ZXxmYWxzZXxcXGQrKSQvO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1ZhbHVlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBCaW5kcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgb2YgYG9wdGlvbmAgb3IgYGlucHV0W3JhZGlvXWAsIHNvXG4gKiB0aGF0IHdoZW4gdGhlIGVsZW1lbnQgaXMgc2VsZWN0ZWQsIHRoZSBgbmdNb2RlbGAgb2YgdGhhdCBlbGVtZW50IGlzIHNldCB0b1xuICogdGhlIGJvdW5kIHZhbHVlLlxuICpcbiAqIGBuZ1ZhbHVlYCBpcyB1c2VmdWwgd2hlbiBkeW5hbWljYWxseSBnZW5lcmF0aW5nIGxpc3RzIG9mIHJhZGlvIGJ1dHRvbnMgdXNpbmcgYG5nLXJlcGVhdGAsIGFzXG4gKiBzaG93biBiZWxvdy5cbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1ZhbHVlIGFuZ3VsYXIgZXhwcmVzc2lvbiwgd2hvc2UgdmFsdWUgd2lsbCBiZSBib3VuZCB0byB0aGUgYHZhbHVlYCBhdHRyaWJ1dGVcbiAqICAgb2YgdGhlIGBpbnB1dGAgZWxlbWVudFxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIm5nVmFsdWUtZGlyZWN0aXZlXCIgbW9kdWxlPVwidmFsdWVFeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3ZhbHVlRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydwaXp6YScsICd1bmljb3JucycsICdyb2JvdHMnXTtcbiAgICAgICAgICAgICAgJHNjb3BlLm15ID0geyBmYXZvcml0ZTogJ3VuaWNvcm5zJyB9O1xuICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8Zm9ybSBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICA8aDI+V2hpY2ggaXMgeW91ciBmYXZvcml0ZT88L2gyPlxuICAgICAgICAgICAgPGxhYmVsIG5nLXJlcGVhdD1cIm5hbWUgaW4gbmFtZXNcIiBmb3I9XCJ7e25hbWV9fVwiPlxuICAgICAgICAgICAgICB7e25hbWV9fVxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwibXkuZmF2b3JpdGVcIlxuICAgICAgICAgICAgICAgICAgICAgbmctdmFsdWU9XCJuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgIGlkPVwie3tuYW1lfX1cIlxuICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImZhdm9yaXRlXCI+XG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXY+WW91IGNob3NlIHt7bXkuZmF2b3JpdGV9fTwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciBmYXZvcml0ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnbXkuZmF2b3JpdGUnKSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCd1bmljb3JucycpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBiaW5kIHRoZSB2YWx1ZXMgdG8gdGhlIGlucHV0cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdteS5mYXZvcml0ZScpKS5nZXQoMCkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZmF2b3JpdGUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3BpenphJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nVmFsdWVEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgY29tcGlsZTogZnVuY3Rpb24odHBsLCB0cGxBdHRyKSB7XG4gICAgICBpZiAoQ09OU1RBTlRfVkFMVUVfUkVHRVhQLnRlc3QodHBsQXR0ci5uZ1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUNvbnN0YW50TGluayhzY29wZSwgZWxtLCBhdHRyKSB7XG4gICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHNjb3BlLiRldmFsKGF0dHIubmdWYWx1ZSkpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nVmFsdWVMaW5rKHNjb3BlLCBlbG0sIGF0dHIpIHtcbiAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ1ZhbHVlLCBmdW5jdGlvbiB2YWx1ZVdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb2RlbE9wdGlvbnNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFsbG93cyB0dW5pbmcgaG93IG1vZGVsIHVwZGF0ZXMgYXJlIGRvbmUuIFVzaW5nIGBuZ01vZGVsT3B0aW9uc2AgeW91IGNhbiBzcGVjaWZ5IGEgY3VzdG9tIGxpc3Qgb2ZcbiAqIGV2ZW50cyB0aGF0IHdpbGwgdHJpZ2dlciBhIG1vZGVsIHVwZGF0ZSBhbmQvb3IgYSBkZWJvdW5jaW5nIGRlbGF5IHNvIHRoYXQgdGhlIGFjdHVhbCB1cGRhdGUgb25seVxuICogdGFrZXMgcGxhY2Ugd2hlbiBhIHRpbWVyIGV4cGlyZXM7IHRoaXMgdGltZXIgd2lsbCBiZSByZXNldCBhZnRlciBhbm90aGVyIGNoYW5nZSB0YWtlcyBwbGFjZS5cbiAqXG4gKiBHaXZlbiB0aGUgbmF0dXJlIG9mIGBuZ01vZGVsT3B0aW9uc2AsIHRoZSB2YWx1ZSBkaXNwbGF5ZWQgaW5zaWRlIGlucHV0IGZpZWxkcyBpbiB0aGUgdmlldyBtaWdodFxuICogYmUgZGlmZmVyZW50IHRoYW4gdGhlIHZhbHVlIGluIHRoZSBhY3R1YWwgbW9kZWwuIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgdXBkYXRlIHRoZSBtb2RlbCB5b3VcbiAqIHNob3VsZCBhbHNvIGludm9rZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBgJHJvbGxiYWNrVmlld1ZhbHVlYH0gb24gdGhlIHJlbGV2YW50IGlucHV0IGZpZWxkIGluXG4gKiBvcmRlciB0byBtYWtlIHN1cmUgaXQgaXMgc3luY2hyb25pemVkIHdpdGggdGhlIG1vZGVsIGFuZCB0aGF0IGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIFRoZSBlYXNpZXN0IHdheSB0byByZWZlcmVuY2UgdGhlIGNvbnRyb2wncyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBgJHJvbGxiYWNrVmlld1ZhbHVlYH1cbiAqIG1ldGhvZCBpcyBieSBtYWtpbmcgc3VyZSB0aGUgaW5wdXQgaXMgcGxhY2VkIGluc2lkZSBhIGZvcm0gdGhhdCBoYXMgYSBgbmFtZWAgYXR0cmlidXRlLiBUaGlzIGlzXG4gKiBpbXBvcnRhbnQgYmVjYXVzZSBgZm9ybWAgY29udHJvbGxlcnMgYXJlIHB1Ymxpc2hlZCB0byB0aGUgcmVsYXRlZCBzY29wZSB1bmRlciB0aGUgbmFtZSBpbiB0aGVpclxuICogYG5hbWVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBBbnkgcGVuZGluZyBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzIHN1Ym1pdHRlZCB2aWEgdGhlXG4gKiBgc3VibWl0YCBldmVudC4gTm90ZSB0aGF0IGBuZ0NsaWNrYCBldmVudHMgd2lsbCBvY2N1ciBiZWZvcmUgdGhlIG1vZGVsIGlzIHVwZGF0ZWQuIFVzZSBgbmdTdWJtaXRgXG4gKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAqXG4gKiBgbmdNb2RlbE9wdGlvbnNgIGhhcyBhbiBlZmZlY3Qgb24gdGhlIGVsZW1lbnQgaXQncyBkZWNsYXJlZCBvbiBhbmQgaXRzIGRlc2NlbmRhbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZ01vZGVsT3B0aW9ucyBvcHRpb25zIHRvIGFwcGx5IHRvIHRoZSBjdXJyZW50IG1vZGVsLiBWYWxpZCBrZXlzIGFyZTpcbiAqICAgLSBgdXBkYXRlT25gOiBzdHJpbmcgc3BlY2lmeWluZyB3aGljaCBldmVudCBzaG91bGQgYmUgdGhlIGlucHV0IGJvdW5kIHRvLiBZb3UgY2FuIHNldCBzZXZlcmFsXG4gKiAgICAgZXZlbnRzIHVzaW5nIGFuIHNwYWNlIGRlbGltaXRlZCBsaXN0LiBUaGVyZSBpcyBhIHNwZWNpYWwgZXZlbnQgY2FsbGVkIGBkZWZhdWx0YCB0aGF0XG4gKiAgICAgbWF0Y2hlcyB0aGUgZGVmYXVsdCBldmVudHMgYmVsb25naW5nIG9mIHRoZSBjb250cm9sLlxuICogICAtIGBkZWJvdW5jZWA6IGludGVnZXIgdmFsdWUgd2hpY2ggY29udGFpbnMgdGhlIGRlYm91bmNlIG1vZGVsIHVwZGF0ZSB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuIEFcbiAqICAgICB2YWx1ZSBvZiAwIHRyaWdnZXJzIGFuIGltbWVkaWF0ZSB1cGRhdGUuIElmIGFuIG9iamVjdCBpcyBzdXBwbGllZCBpbnN0ZWFkLCB5b3UgY2FuIHNwZWNpZnkgYVxuICogICAgIGN1c3RvbSB2YWx1ZSBmb3IgZWFjaCBldmVudC4gRm9yIGV4YW1wbGU6XG4gKiAgICAgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnZGVmYXVsdCBibHVyJywgZGVib3VuY2U6IHsnZGVmYXVsdCc6IDUwMCwgJ2JsdXInOiAwfSB9XCJgXG4gKiAgIC0gYGFsbG93SW52YWxpZGA6IGJvb2xlYW4gdmFsdWUgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlIG1vZGVsIGNhbiBiZSBzZXQgd2l0aCB2YWx1ZXMgdGhhdCBkaWRcbiAqICAgICBub3QgdmFsaWRhdGUgY29ycmVjdGx5IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2Ygc2V0dGluZyB0aGUgbW9kZWwgdG8gdW5kZWZpbmVkLlxuICogICAtIGBnZXR0ZXJTZXR0ZXJgOiBib29sZWFuIHZhbHVlIHdoaWNoIGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gdHJlYXQgZnVuY3Rpb25zIGJvdW5kIHRvXG4gICAgICAgYG5nTW9kZWxgIGFzIGdldHRlcnMvc2V0dGVycy5cbiAqICAgLSBgdGltZXpvbmVgOiBEZWZpbmVzIHRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgZm9yXG4gKiAgICAgYDxpbnB1dCB0eXBlPVwiZGF0ZVwiPmAsIGA8aW5wdXQgdHlwZT1cInRpbWVcIj5gLCAuLi4gLiBSaWdodCBub3csIHRoZSBvbmx5IHN1cHBvcnRlZCB2YWx1ZSBpcyBgJ1VUQydgLFxuICogICAgIG90aGVyd2lzZSB0aGUgZGVmYXVsdCB0aW1lem9uZSBvZiB0aGUgYnJvd3NlciB3aWxsIGJlIHVzZWQuXG4gKlxuICogQGV4YW1wbGVcblxuICBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIG92ZXJyaWRlIGltbWVkaWF0ZSB1cGRhdGVzLiBDaGFuZ2VzIG9uIHRoZSBpbnB1dHMgd2l0aGluIHRoZVxuICBmb3JtIHdpbGwgdXBkYXRlIHRoZSBtb2RlbCBvbmx5IHdoZW4gdGhlIGNvbnRyb2wgbG9zZXMgZm9jdXMgKGJsdXIgZXZlbnQpLiBJZiBgZXNjYXBlYCBrZXkgaXNcbiAgcHJlc3NlZCB3aGlsZSB0aGUgaW5wdXQgZmllbGQgaXMgZm9jdXNlZCwgdGhlIHZhbHVlIGlzIHJlc2V0IHRvIHRoZSB2YWx1ZSBpbiB0aGUgY3VycmVudCBtb2RlbC5cblxuICA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWJsdXJcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICBOYW1lOlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJyB9XCJcbiAgICAgICAgICAgICAgICAgbmcta2V5dXA9XCJjYW5jZWwoJGV2ZW50KVwiIC8+PGJyIC8+XG5cbiAgICAgICAgICBPdGhlciBkYXRhOlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5kYXRhXCIgLz48YnIgLz5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWVcIj48L3NwYW4+PC9wcmU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ29wdGlvbnNFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLnVzZXIgPSB7IG5hbWU6ICdzYXknLCBkYXRhOiAnJyB9O1xuXG4gICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnVzZXJGb3JtLnVzZXJOYW1lLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyLm5hbWUnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLm5hbWUnKSk7XG4gICAgICB2YXIgb3RoZXIgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmRhdGEnKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYWxsb3cgY3VzdG9tIGV2ZW50cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpbnB1dC5zZW5kS2V5cygnIGhlbGxvJyk7XG4gICAgICAgIGlucHV0LmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheScpO1xuICAgICAgICBvdGhlci5jbGljaygpO1xuICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdzYXkgaGVsbG8nKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkICRyb2xsYmFja1ZpZXdWYWx1ZSB3aGVuIG1vZGVsIGNoYW5nZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaW5wdXQuc2VuZEtleXMoJyBoZWxsbycpO1xuICAgICAgICBleHBlY3QoaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCdzYXkgaGVsbG8nKTtcbiAgICAgICAgaW5wdXQuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuRVNDQVBFKTtcbiAgICAgICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnc2F5Jyk7XG4gICAgICAgIG90aGVyLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG5cbiAgVGhpcyBvbmUgc2hvd3MgaG93IHRvIGRlYm91bmNlIG1vZGVsIGNoYW5nZXMuIE1vZGVsIHdpbGwgYmUgdXBkYXRlZCBvbmx5IDEgc2VjIGFmdGVyIGxhc3QgY2hhbmdlLlxuICBJZiB0aGUgYENsZWFyYCBidXR0b24gaXMgcHJlc3NlZCwgYW55IGRlYm91bmNlZCBhY3Rpb24gaXMgY2FuY2VsZWQgYW5kIHRoZSB2YWx1ZSBiZWNvbWVzIGVtcHR5LlxuXG4gIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtZGVib3VuY2VcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICBOYW1lOlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZGVib3VuY2U6IDEwMDAgfVwiIC8+XG4gICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInVzZXJGb3JtLnVzZXJOYW1lLiRyb2xsYmFja1ZpZXdWYWx1ZSgpOyB1c2VyLm5hbWU9JydcIj5DbGVhcjwvYnV0dG9uPjxiciAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudXNlciA9IHsgbmFtZTogJ3NheScgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuXG4gIFRoaXMgb25lIHNob3dzIGhvdyB0byBiaW5kIHRvIGdldHRlci9zZXR0ZXJzOlxuXG4gIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtZ2V0dGVyLXNldHRlclwiIG1vZHVsZT1cImdldHRlclNldHRlckV4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gICAgICAgICAgTmFtZTpcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCIgLz5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWUoKVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7XG4gICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAgICAgICAgICBuYW1lOiBmdW5jdGlvbihuZXdOYW1lKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZChuZXdOYW1lKSA/IChfbmFtZSA9IG5ld05hbWUpIDogX25hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB0aGlzLiRvcHRpb25zID0gJHNjb3BlLiRldmFsKCRhdHRycy5uZ01vZGVsT3B0aW9ucyk7XG4gICAgICAvLyBBbGxvdyBhZGRpbmcvb3ZlcnJpZGluZyBib3VuZCBldmVudHNcbiAgICAgIGlmICh0aGlzLiRvcHRpb25zLnVwZGF0ZU9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgLy8gZXh0cmFjdCBcImRlZmF1bHRcIiBwc2V1ZG8tZXZlbnQgZnJvbSBsaXN0IG9mIGV2ZW50cyB0aGF0IGNhbiB0cmlnZ2VyIGEgbW9kZWwgdXBkYXRlXG4gICAgICAgIHRoaXMuJG9wdGlvbnMudXBkYXRlT24gPSB0cmltKHRoaXMuJG9wdGlvbnMudXBkYXRlT24ucmVwbGFjZShERUZBVUxUX1JFR0VYUCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhhdC4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiAnICc7XG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XVxuICB9O1xufTtcblxuLy8gaGVscGVyIG1ldGhvZHNcbmZ1bmN0aW9uIGFkZFNldFZhbGlkaXR5TWV0aG9kKGNvbnRleHQpIHtcbiAgdmFyIGN0cmwgPSBjb250ZXh0LmN0cmwsXG4gICAgICAkZWxlbWVudCA9IGNvbnRleHQuJGVsZW1lbnQsXG4gICAgICBjbGFzc0NhY2hlID0ge30sXG4gICAgICBzZXQgPSBjb250ZXh0LnNldCxcbiAgICAgIHVuc2V0ID0gY29udGV4dC51bnNldCxcbiAgICAgIHBhcmVudEZvcm0gPSBjb250ZXh0LnBhcmVudEZvcm0sXG4gICAgICAkYW5pbWF0ZSA9IGNvbnRleHQuJGFuaW1hdGU7XG5cbiAgY2xhc3NDYWNoZVtJTlZBTElEX0NMQVNTXSA9ICEoY2xhc3NDYWNoZVtWQUxJRF9DTEFTU10gPSAkZWxlbWVudC5oYXNDbGFzcyhWQUxJRF9DTEFTUykpO1xuXG4gIGN0cmwuJHNldFZhbGlkaXR5ID0gc2V0VmFsaWRpdHk7XG5cbiAgZnVuY3Rpb24gc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBzdGF0ZSwgb3B0aW9ucykge1xuICAgIGlmIChzdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjcmVhdGVBbmRTZXQoJyRwZW5kaW5nJywgdmFsaWRhdGlvbkVycm9yS2V5LCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW5zZXRBbmRDbGVhbnVwKCckcGVuZGluZycsIHZhbGlkYXRpb25FcnJvcktleSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmICghaXNCb29sZWFuKHN0YXRlKSkge1xuICAgICAgdW5zZXQoY3RybC4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgb3B0aW9ucyk7XG4gICAgICB1bnNldChjdHJsLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIHVuc2V0KGN0cmwuJGVycm9yLCB2YWxpZGF0aW9uRXJyb3JLZXksIG9wdGlvbnMpO1xuICAgICAgICBzZXQoY3RybC4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXQoY3RybC4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgb3B0aW9ucyk7XG4gICAgICAgIHVuc2V0KGN0cmwuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3RybC4kcGVuZGluZykge1xuICAgICAgY2FjaGVkVG9nZ2xlQ2xhc3MoUEVORElOR19DTEFTUywgdHJ1ZSk7XG4gICAgICBjdHJsLiR2YWxpZCA9IGN0cmwuJGludmFsaWQgPSB1bmRlZmluZWQ7XG4gICAgICB0b2dnbGVWYWxpZGF0aW9uQ3NzKCcnLCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGVkVG9nZ2xlQ2xhc3MoUEVORElOR19DTEFTUywgZmFsc2UpO1xuICAgICAgY3RybC4kdmFsaWQgPSBpc09iamVjdEVtcHR5KGN0cmwuJGVycm9yKTtcbiAgICAgIGN0cmwuJGludmFsaWQgPSAhY3RybC4kdmFsaWQ7XG4gICAgICB0b2dnbGVWYWxpZGF0aW9uQ3NzKCcnLCBjdHJsLiR2YWxpZCk7XG4gICAgfVxuXG4gICAgLy8gcmUtcmVhZCB0aGUgc3RhdGUgYXMgdGhlIHNldC91bnNldCBtZXRob2RzIGNvdWxkIGhhdmVcbiAgICAvLyBjb21iaW5lZCBzdGF0ZSBpbiBjdHJsLiRlcnJvclt2YWxpZGF0aW9uRXJyb3JdICh1c2VkIGZvciBmb3JtcyksXG4gICAgLy8gd2hlcmUgc2V0dGluZy91bnNldHRpbmcgb25seSBpbmNyZW1lbnRzL2RlY3JlbWVudHMgdGhlIHZhbHVlLFxuICAgIC8vIGFuZCBkb2VzIG5vdCByZXBsYWNlIGl0LlxuICAgIHZhciBjb21iaW5lZFN0YXRlO1xuICAgIGlmIChjdHJsLiRwZW5kaW5nICYmIGN0cmwuJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKGN0cmwuJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGN0cmwuJCRzdWNjZXNzW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgdG9nZ2xlVmFsaWRhdGlvbkNzcyh2YWxpZGF0aW9uRXJyb3JLZXksIGNvbWJpbmVkU3RhdGUpO1xuICAgIHBhcmVudEZvcm0uJHNldFZhbGlkaXR5KHZhbGlkYXRpb25FcnJvcktleSwgY29tYmluZWRTdGF0ZSwgY3RybCk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVBbmRTZXQobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIWN0cmxbbmFtZV0pIHtcbiAgICAgIGN0cmxbbmFtZV0gPSB7fTtcbiAgICB9XG4gICAgc2V0KGN0cmxbbmFtZV0sIHZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc2V0QW5kQ2xlYW51cChuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIGlmIChjdHJsW25hbWVdKSB7XG4gICAgICB1bnNldChjdHJsW25hbWVdLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdEVtcHR5KGN0cmxbbmFtZV0pKSB7XG4gICAgICBjdHJsW25hbWVdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlZFRvZ2dsZUNsYXNzKGNsYXNzTmFtZSwgc3dpdGNoVmFsdWUpIHtcbiAgICBpZiAoc3dpdGNoVmFsdWUgJiYgIWNsYXNzQ2FjaGVbY2xhc3NOYW1lXSkge1xuICAgICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICBjbGFzc0NhY2hlW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoIXN3aXRjaFZhbHVlICYmIGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSkge1xuICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoJGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICBjbGFzc0NhY2hlW2NsYXNzTmFtZV0gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVWYWxpZGF0aW9uQ3NzKHZhbGlkYXRpb25FcnJvcktleSwgaXNWYWxpZCkge1xuICAgIHZhbGlkYXRpb25FcnJvcktleSA9IHZhbGlkYXRpb25FcnJvcktleSA/ICctJyArIHNuYWtlX2Nhc2UodmFsaWRhdGlvbkVycm9yS2V5LCAnLScpIDogJyc7XG5cbiAgICBjYWNoZWRUb2dnbGVDbGFzcyhWQUxJRF9DTEFTUyArIHZhbGlkYXRpb25FcnJvcktleSwgaXNWYWxpZCA9PT0gdHJ1ZSk7XG4gICAgY2FjaGVkVG9nZ2xlQ2xhc3MoSU5WQUxJRF9DTEFTUyArIHZhbGlkYXRpb25FcnJvcktleSwgaXNWYWxpZCA9PT0gZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gIGlmIChvYmopIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JpbmRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0JpbmRgIGF0dHJpYnV0ZSB0ZWxscyBBbmd1bGFyIHRvIHJlcGxhY2UgdGhlIHRleHQgY29udGVudCBvZiB0aGUgc3BlY2lmaWVkIEhUTUwgZWxlbWVudFxuICogd2l0aCB0aGUgdmFsdWUgb2YgYSBnaXZlbiBleHByZXNzaW9uLCBhbmQgdG8gdXBkYXRlIHRoZSB0ZXh0IGNvbnRlbnQgd2hlbiB0aGUgdmFsdWUgb2YgdGhhdFxuICogZXhwcmVzc2lvbiBjaGFuZ2VzLlxuICpcbiAqIFR5cGljYWxseSwgeW91IGRvbid0IHVzZSBgbmdCaW5kYCBkaXJlY3RseSwgYnV0IGluc3RlYWQgeW91IHVzZSB0aGUgZG91YmxlIGN1cmx5IG1hcmt1cCBsaWtlXG4gKiBge3sgZXhwcmVzc2lvbiB9fWAgd2hpY2ggaXMgc2ltaWxhciBidXQgbGVzcyB2ZXJib3NlLlxuICpcbiAqIEl0IGlzIHByZWZlcmFibGUgdG8gdXNlIGBuZ0JpbmRgIGluc3RlYWQgb2YgYHt7IGV4cHJlc3Npb24gfX1gIGlmIGEgdGVtcGxhdGUgaXMgbW9tZW50YXJpbHlcbiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3IHN0YXRlIGJlZm9yZSBBbmd1bGFyIGNvbXBpbGVzIGl0LiBTaW5jZSBgbmdCaW5kYCBpcyBhblxuICogZWxlbWVudCBhdHRyaWJ1dGUsIGl0IG1ha2VzIHRoZSBiaW5kaW5ncyBpbnZpc2libGUgdG8gdGhlIHVzZXIgd2hpbGUgdGhlIHBhZ2UgaXMgbG9hZGluZy5cbiAqXG4gKiBBbiBhbHRlcm5hdGl2ZSBzb2x1dGlvbiB0byB0aGlzIHByb2JsZW0gd291bGQgYmUgdXNpbmcgdGhlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xvYWsgbmdDbG9ha30gZGlyZWN0aXZlLlxuICpcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBFbnRlciBhIG5hbWUgaW4gdGhlIExpdmUgUHJldmlldyB0ZXh0IGJveDsgdGhlIGdyZWV0aW5nIGJlbG93IHRoZSB0ZXh0IGJveCBjaGFuZ2VzIGluc3RhbnRseS5cbiAgIDxleGFtcGxlIG1vZHVsZT1cImJpbmRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5uYW1lID0gJ1doaXJsZWQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIEVudGVyIG5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibmFtZVwiPjxicj5cbiAgICAgICAgIEhlbGxvIDxzcGFuIG5nLWJpbmQ9XCJuYW1lXCI+PC9zcGFuPiFcbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ1doaXJsZWQnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd3b3JsZCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ3dvcmxkJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQmluZERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZENvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZCk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0JpbmQsIGZ1bmN0aW9uIG5nQmluZFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JpbmRUZW1wbGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0JpbmRUZW1wbGF0ZWAgZGlyZWN0aXZlIHNwZWNpZmllcyB0aGF0IHRoZSBlbGVtZW50XG4gKiB0ZXh0IGNvbnRlbnQgc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggdGhlIGludGVycG9sYXRpb24gb2YgdGhlIHRlbXBsYXRlXG4gKiBpbiB0aGUgYG5nQmluZFRlbXBsYXRlYCBhdHRyaWJ1dGUuXG4gKiBVbmxpa2UgYG5nQmluZGAsIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGNhbiBjb250YWluIG11bHRpcGxlIGB7e2AgYH19YFxuICogZXhwcmVzc2lvbnMuIFRoaXMgZGlyZWN0aXZlIGlzIG5lZWRlZCBzaW5jZSBzb21lIEhUTUwgZWxlbWVudHNcbiAqIChzdWNoIGFzIFRJVExFIGFuZCBPUFRJT04pIGNhbm5vdCBjb250YWluIFNQQU4gZWxlbWVudHMuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdCaW5kVGVtcGxhdGUgdGVtcGxhdGUgb2YgZm9ybVxuICogICA8dHQ+e3s8L3R0PiA8dHQ+ZXhwcmVzc2lvbjwvdHQ+IDx0dD59fTwvdHQ+IHRvIGV2YWwuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRyeSBpdCBoZXJlOiBlbnRlciB0ZXh0IGluIHRleHQgYm94IGFuZCB3YXRjaCB0aGUgZ3JlZXRpbmcgY2hhbmdlLlxuICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnNhbHV0YXRpb24gPSAnSGVsbG8nO1xuICAgICAgICAgICAgICRzY29wZS5uYW1lID0gJ1dvcmxkJztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIFNhbHV0YXRpb246IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2FsdXRhdGlvblwiPjxicj5cbiAgICAgICAgTmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCI+PGJyPlxuICAgICAgICA8cHJlIG5nLWJpbmQtdGVtcGxhdGU9XCJ7e3NhbHV0YXRpb259fSB7e25hbWV9fSFcIj48L3ByZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2FsdXRhdGlvbkVsZW0gPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3NhbHV0YXRpb24nKSk7XG4gICAgICAgICB2YXIgc2FsdXRhdGlvbklucHV0ID0gZWxlbWVudChieS5tb2RlbCgnc2FsdXRhdGlvbicpKTtcbiAgICAgICAgIHZhciBuYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lJykpO1xuXG4gICAgICAgICBleHBlY3Qoc2FsdXRhdGlvbkVsZW0uZ2V0VGV4dCgpKS50b0JlKCdIZWxsbyBXb3JsZCEnKTtcblxuICAgICAgICAgc2FsdXRhdGlvbklucHV0LmNsZWFyKCk7XG4gICAgICAgICBzYWx1dGF0aW9uSW5wdXQuc2VuZEtleXMoJ0dyZWV0aW5ncycpO1xuICAgICAgICAgbmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICBuYW1lSW5wdXQuc2VuZEtleXMoJ3VzZXInKTtcblxuICAgICAgICAgZXhwZWN0KHNhbHV0YXRpb25FbGVtLmdldFRleHQoKSkudG9CZSgnR3JlZXRpbmdzIHVzZXIhJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlID0gWyckaW50ZXJwb2xhdGUnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkaW50ZXJwb2xhdGUsICRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kVGVtcGxhdGVDb21waWxlKHRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3ModGVtcGxhdGVFbGVtZW50KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0JpbmRUZW1wbGF0ZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC5hdHRyKGF0dHIuJGF0dHIubmdCaW5kVGVtcGxhdGUpKTtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBpbnRlcnBvbGF0ZUZuLmV4cHJlc3Npb25zKTtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRbMF07XG4gICAgICAgIGF0dHIuJG9ic2VydmUoJ25nQmluZFRlbXBsYXRlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/ICcnIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZEh0bWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBiaW5kaW5nIHRoYXQgd2lsbCBpbm5lckhUTUwgdGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBgZXhwcmVzc2lvbmAgaW50byB0aGUgY3VycmVudFxuICogZWxlbWVudCBpbiBhIHNlY3VyZSB3YXkuICBCeSBkZWZhdWx0LCB0aGUgaW5uZXJIVE1MLWVkIGNvbnRlbnQgd2lsbCBiZSBzYW5pdGl6ZWQgdXNpbmcgdGhlIHtAbGlua1xuICogbmdTYW5pdGl6ZS4kc2FuaXRpemUgJHNhbml0aXplfSBzZXJ2aWNlLiAgVG8gdXRpbGl6ZSB0aGlzIGZ1bmN0aW9uYWxpdHksIGVuc3VyZSB0aGF0IGAkc2FuaXRpemVgXG4gKiBpcyBhdmFpbGFibGUsIGZvciBleGFtcGxlLCBieSBpbmNsdWRpbmcge0BsaW5rIG5nU2FuaXRpemV9IGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzIChub3QgaW5cbiAqIGNvcmUgQW5ndWxhcikuIEluIG9yZGVyIHRvIHVzZSB7QGxpbmsgbmdTYW5pdGl6ZX0gaW4geW91ciBtb2R1bGUncyBkZXBlbmRlbmNpZXMsIHlvdSBuZWVkIHRvXG4gKiBpbmNsdWRlIFwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIGluIHlvdXIgYXBwbGljYXRpb24uXG4gKlxuICogWW91IG1heSBhbHNvIGJ5cGFzcyBzYW5pdGl6YXRpb24gZm9yIHZhbHVlcyB5b3Uga25vdyBhcmUgc2FmZS4gVG8gZG8gc28sIGJpbmQgdG9cbiAqIGFuIGV4cGxpY2l0bHkgdHJ1c3RlZCB2YWx1ZSB2aWEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0uICBTZWUgdGhlIGV4YW1wbGVcbiAqIHVuZGVyIHtAbGluayBuZy4kc2NlI3Nob3ctbWUtYW4tZXhhbXBsZS11c2luZy1zY2UtIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiBOb3RlOiBJZiBhIGAkc2FuaXRpemVgIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUgYW5kIHRoZSBib3VuZCB2YWx1ZSBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQsIHlvdVxuICogd2lsbCBoYXZlIGFuIGV4Y2VwdGlvbiAoaW5zdGVhZCBvZiBhbiBleHBsb2l0LilcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kSHRtbCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kSHRtbEV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxwIG5nLWJpbmQtaHRtbD1cIm15SFRNTFwiPjwvcD5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnYmluZEh0bWxFeGFtcGxlJywgWyduZ1Nhbml0aXplJ10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAkc2NvcGUubXlIVE1MID1cbiAgICAgICAgICAgICAgJ0kgYW0gYW4gPGNvZGU+SFRNTDwvY29kZT5zdHJpbmcgd2l0aCAnICtcbiAgICAgICAgICAgICAgJzxhIGhyZWY9XCIjXCI+bGlua3MhPC9hPiBhbmQgb3RoZXIgPGVtPnN0dWZmPC9lbT4nO1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZC1odG1sJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdteUhUTUwnKSkuZ2V0VGV4dCgpKS50b0JlKFxuICAgICAgICAgICAgICdJIGFtIGFuIEhUTUxzdHJpbmcgd2l0aCBsaW5rcyEgYW5kIG90aGVyIHN0dWZmJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCAnJHBhcnNlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJHNjZSwgJHBhcnNlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kSHRtbENvbXBpbGUodEVsZW1lbnQsIHRBdHRycykge1xuICAgICAgdmFyIG5nQmluZEh0bWxHZXR0ZXIgPSAkcGFyc2UodEF0dHJzLm5nQmluZEh0bWwpO1xuICAgICAgdmFyIG5nQmluZEh0bWxXYXRjaCA9ICRwYXJzZSh0QXR0cnMubmdCaW5kSHRtbCwgZnVuY3Rpb24gZ2V0U3RyaW5nVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSB8fCAnJykudG9TdHJpbmcoKTtcbiAgICAgIH0pO1xuICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3ModEVsZW1lbnQpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kSHRtbExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZEh0bWwpO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChuZ0JpbmRIdG1sV2F0Y2gsIGZ1bmN0aW9uIG5nQmluZEh0bWxXYXRjaEFjdGlvbigpIHtcbiAgICAgICAgICAvLyB3ZSByZS1ldmFsdWF0ZSB0aGUgZXhwciBiZWNhdXNlIHdlIHdhbnQgYSBUcnVzdGVkVmFsdWVIb2xkZXJUeXBlXG4gICAgICAgICAgLy8gZm9yICRzY2UsIG5vdCBhIHN0cmluZ1xuICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKG5nQmluZEh0bWxHZXR0ZXIoc2NvcGUpKSB8fCAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuZnVuY3Rpb24gY2xhc3NEaXJlY3RpdmUobmFtZSwgc2VsZWN0b3IpIHtcbiAgbmFtZSA9ICduZ0NsYXNzJyArIG5hbWU7XG4gIHJldHVybiBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBQycsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgb2xkVmFsO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25hbWVdLCBuZ0NsYXNzV2F0Y2hBY3Rpb24sIHRydWUpO1xuXG4gICAgICAgIGF0dHIuJG9ic2VydmUoJ2NsYXNzJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBuZ0NsYXNzV2F0Y2hBY3Rpb24oc2NvcGUuJGV2YWwoYXR0cltuYW1lXSkpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmIChuYW1lICE9PSAnbmdDbGFzcycpIHtcbiAgICAgICAgICBzY29wZS4kd2F0Y2goJyRpbmRleCcsIGZ1bmN0aW9uKCRpbmRleCwgb2xkJGluZGV4KSB7XG4gICAgICAgICAgICAvLyBqc2hpbnQgYml0d2lzZTogZmFsc2VcbiAgICAgICAgICAgIHZhciBtb2QgPSAkaW5kZXggJiAxO1xuICAgICAgICAgICAgaWYgKG1vZCAhPT0gKG9sZCRpbmRleCAmIDEpKSB7XG4gICAgICAgICAgICAgIHZhciBjbGFzc2VzID0gYXJyYXlDbGFzc2VzKHNjb3BlLiRldmFsKGF0dHJbbmFtZV0pKTtcbiAgICAgICAgICAgICAgbW9kID09PSBzZWxlY3RvciA/XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NlcyhjbGFzc2VzKSA6XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhjbGFzc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZENsYXNzZXMoY2xhc3Nlcykge1xuICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gZGlnZXN0Q2xhc3NDb3VudHMoY2xhc3NlcywgMSk7XG4gICAgICAgICAgYXR0ci4kYWRkQ2xhc3MobmV3Q2xhc3Nlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGNsYXNzZXMpIHtcbiAgICAgICAgICB2YXIgbmV3Q2xhc3NlcyA9IGRpZ2VzdENsYXNzQ291bnRzKGNsYXNzZXMsIC0xKTtcbiAgICAgICAgICBhdHRyLiRyZW1vdmVDbGFzcyhuZXdDbGFzc2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRpZ2VzdENsYXNzQ291bnRzKGNsYXNzZXMsIGNvdW50KSB7XG4gICAgICAgICAgdmFyIGNsYXNzQ291bnRzID0gZWxlbWVudC5kYXRhKCckY2xhc3NDb3VudHMnKSB8fCB7fTtcbiAgICAgICAgICB2YXIgY2xhc3Nlc1RvVXBkYXRlID0gW107XG4gICAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmIChjb3VudCA+IDAgfHwgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgICBjbGFzc0NvdW50c1tjbGFzc05hbWVdID0gKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gfHwgMCkgKyBjb3VudDtcbiAgICAgICAgICAgICAgaWYgKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gPT09ICsoY291bnQgPiAwKSkge1xuICAgICAgICAgICAgICAgIGNsYXNzZXNUb1VwZGF0ZS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycsIGNsYXNzQ291bnRzKTtcbiAgICAgICAgICByZXR1cm4gY2xhc3Nlc1RvVXBkYXRlLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcykge1xuICAgICAgICAgIHZhciB0b0FkZCA9IGFycmF5RGlmZmVyZW5jZShuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSBhcnJheURpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgdG9BZGQgPSBkaWdlc3RDbGFzc0NvdW50cyh0b0FkZCwgMSk7XG4gICAgICAgICAgdG9SZW1vdmUgPSBkaWdlc3RDbGFzc0NvdW50cyh0b1JlbW92ZSwgLTEpO1xuICAgICAgICAgIGlmICh0b0FkZCAmJiB0b0FkZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIHRvQWRkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgdG9SZW1vdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5nQ2xhc3NXYXRjaEFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09IHRydWUgfHwgc2NvcGUuJGluZGV4ICUgMiA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gYXJyYXlDbGFzc2VzKG5ld1ZhbCB8fCBbXSk7XG4gICAgICAgICAgICBpZiAoIW9sZFZhbCkge1xuICAgICAgICAgICAgICBhZGRDbGFzc2VzKG5ld0NsYXNzZXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghZXF1YWxzKG5ld1ZhbCxvbGRWYWwpKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYXJyYXlDbGFzc2VzKG9sZFZhbCk7XG4gICAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG9sZFZhbCA9IHNoYWxsb3dDb3B5KG5ld1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYXJyYXlEaWZmZXJlbmNlKHRva2VuczEsIHRva2VuczIpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKHRva2VuID09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlcy5wdXNoKHRva2VuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXJyYXlDbGFzc2VzKGNsYXNzVmFsKSB7XG4gICAgICBpZiAoaXNBcnJheShjbGFzc1ZhbCkpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzVmFsO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhjbGFzc1ZhbCkpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzVmFsLnNwbGl0KCcgJyk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGNsYXNzVmFsKSkge1xuICAgICAgICB2YXIgY2xhc3NlcyA9IFtdO1xuICAgICAgICBmb3JFYWNoKGNsYXNzVmFsLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLmNvbmNhdChrLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsYXNzVmFsO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc1xuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGR5bmFtaWNhbGx5IHNldCBDU1MgY2xhc3NlcyBvbiBhbiBIVE1MIGVsZW1lbnQgYnkgZGF0YWJpbmRpbmdcbiAqIGFuIGV4cHJlc3Npb24gdGhhdCByZXByZXNlbnRzIGFsbCBjbGFzc2VzIHRvIGJlIGFkZGVkLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgb3BlcmF0ZXMgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMsIGRlcGVuZGluZyBvbiB3aGljaCBvZiB0aHJlZSB0eXBlcyB0aGUgZXhwcmVzc2lvblxuICogZXZhbHVhdGVzIHRvOlxuICpcbiAqIDEuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlIHN0cmluZyBzaG91bGQgYmUgb25lIG9yIG1vcmUgc3BhY2UtZGVsaW1pdGVkIGNsYXNzXG4gKiBuYW1lcy5cbiAqXG4gKiAyLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gYXJyYXksIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXkgc2hvdWxkIGJlIGEgc3RyaW5nIHRoYXQgaXNcbiAqIG9uZSBvciBtb3JlIHNwYWNlLWRlbGltaXRlZCBjbGFzcyBuYW1lcy5cbiAqXG4gKiAzLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gb2JqZWN0LCB0aGVuIGZvciBlYWNoIGtleS12YWx1ZSBwYWlyIG9mIHRoZVxuICogb2JqZWN0IHdpdGggYSB0cnV0aHkgdmFsdWUgdGhlIGNvcnJlc3BvbmRpbmcga2V5IGlzIHVzZWQgYXMgYSBjbGFzcyBuYW1lLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgd29uJ3QgYWRkIGR1cGxpY2F0ZSBjbGFzc2VzIGlmIGEgcGFydGljdWxhciBjbGFzcyB3YXMgYWxyZWFkeSBzZXQuXG4gKlxuICogV2hlbiB0aGUgZXhwcmVzc2lvbiBjaGFuZ2VzLCB0aGUgcHJldmlvdXNseSBhZGRlZCBjbGFzc2VzIGFyZSByZW1vdmVkIGFuZCBvbmx5IHRoZW4gdGhlXG4gKiBuZXcgY2xhc3NlcyBhcmUgYWRkZWQuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIGFkZCAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqIHJlbW92ZSAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHRcbiAqICAgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3NcbiAqICAgbmFtZXMsIGFuIGFycmF5LCBvciBhIG1hcCBvZiBjbGFzcyBuYW1lcyB0byBib29sZWFuIHZhbHVlcy4gSW4gdGhlIGNhc2Ugb2YgYSBtYXAsIHRoZVxuICogICBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyB3aG9zZSB2YWx1ZXMgYXJlIHRydXRoeSB3aWxsIGJlIGFkZGVkIGFzIGNzcyBjbGFzc2VzIHRvIHRoZVxuICogICBlbGVtZW50LlxuICpcbiAqIEBleGFtcGxlIEV4YW1wbGUgdGhhdCBkZW1vbnN0cmF0ZXMgYmFzaWMgYmluZGluZ3MgdmlhIG5nQ2xhc3MgZGlyZWN0aXZlLlxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJ7c3RyaWtlOiBkZWxldGVkLCBib2xkOiBpbXBvcnRhbnQsIHJlZDogZXJyb3J9XCI+TWFwIFN5bnRheCBFeGFtcGxlPC9wPlxuICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImRlbGV0ZWRcIj4gZGVsZXRlZCAoYXBwbHkgXCJzdHJpa2VcIiBjbGFzcyk8YnI+XG4gICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiaW1wb3J0YW50XCI+IGltcG9ydGFudCAoYXBwbHkgXCJib2xkXCIgY2xhc3MpPGJyPlxuICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImVycm9yXCI+IGVycm9yIChhcHBseSBcInJlZFwiIGNsYXNzKVxuICAgICAgIDxocj5cbiAgICAgICA8cCBuZy1jbGFzcz1cInN0eWxlXCI+VXNpbmcgU3RyaW5nIFN5bnRheDwvcD5cbiAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInN0eWxlXCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkIHN0cmlrZSByZWRcIj5cbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJbc3R5bGUxLCBzdHlsZTIsIHN0eWxlM11cIj5Vc2luZyBBcnJheSBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUxXCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCI+PGJyPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlMlwiIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiPjxicj5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTNcIiBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIj48YnI+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5zdHJpa2Uge1xuICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XG4gICAgICAgfVxuICAgICAgIC5ib2xkIHtcbiAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgfVxuICAgICAgIC5yZWQge1xuICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIHBzID0gZWxlbWVudC5hbGwoYnkuY3NzKCdwJykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSB0aGUgY2xhc3MnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvYm9sZC8pO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvcmVkLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2ltcG9ydGFudCcpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9ib2xkLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Vycm9yJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL3JlZC8pO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSBzdHJpbmcgZXhhbXBsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLnNlbmRLZXlzKCdyZWQnKTtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdyZWQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdhcnJheSBleGFtcGxlIHNob3VsZCBoYXZlIDMgY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmxhc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUxJykpLnNlbmRLZXlzKCdib2xkJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTInKSkuc2VuZEtleXMoJ3N0cmlrZScpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUzJykpLnNlbmRLZXlzKCdyZWQnKTtcbiAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIHN0cmlrZSByZWQnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuXG4gICAjIyBBbmltYXRpb25zXG5cbiAgIFRoZSBleGFtcGxlIGJlbG93IGRlbW9uc3RyYXRlcyBob3cgdG8gcGVyZm9ybSBhbmltYXRpb25zIHVzaW5nIG5nQ2xhc3MuXG5cbiAgIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IGlkPVwic2V0YnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0XCIgbmctY2xpY2s9XCJteVZhcj0nbXktY2xhc3MnXCI+XG4gICAgICA8aW5wdXQgaWQ9XCJjbGVhcmJ0blwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNsZWFyXCIgbmctY2xpY2s9XCJteVZhcj0nJ1wiPlxuICAgICAgPGJyPlxuICAgICAgPHNwYW4gY2xhc3M9XCJiYXNlLWNsYXNzXCIgbmctY2xhc3M9XCJteVZhclwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuYmFzZS1jbGFzcyB7XG4gICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICB9XG5cbiAgICAgICAuYmFzZS1jbGFzcy5teS1jbGFzcyB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgZm9udC1zaXplOjNlbTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ3NldGJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2NsZWFyYnRuJykpLmNsaWNrKCk7XG5cbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cblxuXG4gICAjIyBuZ0NsYXNzIGFuZCBwcmUtZXhpc3RpbmcgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zXG4gICBUaGUgbmdDbGFzcyBkaXJlY3RpdmUgc3RpbGwgc3VwcG9ydHMgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zIGV2ZW4gaWYgdGhleSBkbyBub3QgZm9sbG93IHRoZSBuZ0FuaW1hdGUgQ1NTIG5hbWluZyBzdHJ1Y3R1cmUuXG4gICBVcG9uIGFuaW1hdGlvbiBuZ0FuaW1hdGUgd2lsbCBhcHBseSBzdXBwbGVtZW50YXJ5IENTUyBjbGFzc2VzIHRvIHRyYWNrIHRoZSBzdGFydCBhbmQgZW5kIG9mIGFuIGFuaW1hdGlvbiwgYnV0IHRoaXMgd2lsbCBub3QgaGluZGVyXG4gICBhbnkgcHJlLWV4aXN0aW5nIENTUyB0cmFuc2l0aW9ucyBhbHJlYWR5IG9uIHRoZSBlbGVtZW50LiBUbyBnZXQgYW4gaWRlYSBvZiB3aGF0IGhhcHBlbnMgZHVyaW5nIGEgY2xhc3MtYmFzZWQgYW5pbWF0aW9uLCBiZSBzdXJlXG4gICB0byB2aWV3IHRoZSBzdGVwIGJ5IHN0ZXAgZGV0YWlscyBvZiB7QGxpbmsgbmcuJGFuaW1hdGUjYWRkQ2xhc3MgJGFuaW1hdGUuYWRkQ2xhc3N9IGFuZFxuICAge0BsaW5rIG5nLiRhbmltYXRlI3JlbW92ZUNsYXNzICRhbmltYXRlLnJlbW92ZUNsYXNzfS5cbiAqL1xudmFyIG5nQ2xhc3NEaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnJywgdHJ1ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc09kZFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW5cbiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZSBlZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc09kZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0XG4gKiAgIG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzIG5hbWVzIG9yIGFuIGFycmF5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPG9sIG5nLWluaXQ9XCJuYW1lcz1bJ0pvaG4nLCAnTWFyeScsICdDYXRlJywgJ1N1eiddXCI+XG4gICAgICAgICAgPGxpIG5nLXJlcGVhdD1cIm5hbWUgaW4gbmFtZXNcIj5cbiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPVwiJ29kZCdcIiBuZy1jbGFzcy1ldmVuPVwiJ2V2ZW4nXCI+XG4gICAgICAgICAgICAge3tuYW1lfX1cbiAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvb2w+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5vZGQge1xuICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICB9XG4gICAgICAgLmV2ZW4ge1xuICAgICAgICAgY29sb3I6IGJsdWU7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzLW9kZCBhbmQgbmctY2xhc3MtZXZlbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkucmVwZWF0ZXIoJ25hbWUgaW4gbmFtZXMnKS5yb3coMCkuY29sdW1uKCduYW1lJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgIHRvTWF0Y2goL29kZC8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkucmVwZWF0ZXIoJ25hbWUgaW4gbmFtZXMnKS5yb3coMSkuY29sdW1uKCduYW1lJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgIHRvTWF0Y2goL2V2ZW4vKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdDbGFzc09kZERpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdPZGQnLCAwKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NsYXNzRXZlblxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW5cbiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZSBlZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc0V2ZW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlXG4gKiAgIHJlc3VsdCBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19ICZuYnNwOyAmbmJzcDsgJm5ic3A7XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NFdmVuRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ0V2ZW4nLCAxKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Nsb2FrXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGlzIHVzZWQgdG8gcHJldmVudCB0aGUgQW5ndWxhciBodG1sIHRlbXBsYXRlIGZyb20gYmVpbmcgYnJpZWZseVxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgKHVuY29tcGlsZWQpIGZvcm0gd2hpbGUgeW91ciBhcHBsaWNhdGlvbiBpcyBsb2FkaW5nLiBVc2UgdGhpc1xuICogZGlyZWN0aXZlIHRvIGF2b2lkIHRoZSB1bmRlc2lyYWJsZSBmbGlja2VyIGVmZmVjdCBjYXVzZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGUgZGlzcGxheS5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIHRvIHRoZSBgPGJvZHk+YCBlbGVtZW50LCBidXQgdGhlIHByZWZlcnJlZCB1c2FnZSBpcyB0byBhcHBseVxuICogbXVsdGlwbGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZXMgdG8gc21hbGwgcG9ydGlvbnMgb2YgdGhlIHBhZ2UgdG8gcGVybWl0IHByb2dyZXNzaXZlIHJlbmRlcmluZ1xuICogb2YgdGhlIGJyb3dzZXIgdmlldy5cbiAqXG4gKiBgbmdDbG9ha2Agd29ya3MgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgZm9sbG93aW5nIGNzcyBydWxlIGVtYmVkZGVkIHdpdGhpbiBgYW5ndWxhci5qc2AgYW5kXG4gKiBgYW5ndWxhci5taW4uanNgLlxuICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgY3NzXG4gKiBbbmdcXDpjbG9ha10sIFtuZy1jbG9ha10sIFtkYXRhLW5nLWNsb2FrXSwgW3gtbmctY2xvYWtdLCAubmctY2xvYWssIC54LW5nLWNsb2FrIHtcbiAqICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGlzIGNzcyBydWxlIGlzIGxvYWRlZCBieSB0aGUgYnJvd3NlciwgYWxsIGh0bWwgZWxlbWVudHMgKGluY2x1ZGluZyB0aGVpciBjaGlsZHJlbikgdGhhdFxuICogYXJlIHRhZ2dlZCB3aXRoIHRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGFyZSBoaWRkZW4uIFdoZW4gQW5ndWxhciBlbmNvdW50ZXJzIHRoaXMgZGlyZWN0aXZlXG4gKiBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZSBpdCBkZWxldGVzIHRoZSBgbmdDbG9ha2AgZWxlbWVudCBhdHRyaWJ1dGUsIG1ha2luZ1xuICogdGhlIGNvbXBpbGVkIGVsZW1lbnQgdmlzaWJsZS5cbiAqXG4gKiBGb3IgdGhlIGJlc3QgcmVzdWx0LCB0aGUgYGFuZ3VsYXIuanNgIHNjcmlwdCBtdXN0IGJlIGxvYWRlZCBpbiB0aGUgaGVhZCBzZWN0aW9uIG9mIHRoZSBodG1sXG4gKiBkb2N1bWVudDsgYWx0ZXJuYXRpdmVseSwgdGhlIGNzcyBydWxlIGFib3ZlIG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIGV4dGVybmFsIHN0eWxlc2hlZXQgb2YgdGhlXG4gKiBhcHBsaWNhdGlvbi5cbiAqXG4gKiBMZWdhY3kgYnJvd3NlcnMsIGxpa2UgSUU3LCBkbyBub3QgcHJvdmlkZSBhdHRyaWJ1dGUgc2VsZWN0b3Igc3VwcG9ydCAoYWRkZWQgaW4gQ1NTIDIuMSkgc28gdGhleVxuICogY2Fubm90IG1hdGNoIHRoZSBgW25nXFw6Y2xvYWtdYCBzZWxlY3Rvci4gVG8gd29yayBhcm91bmQgdGhpcyBsaW1pdGF0aW9uLCB5b3UgbXVzdCBhZGQgdGhlIGNzc1xuICogY2xhc3MgYG5nLWNsb2FrYCBpbiBhZGRpdGlvbiB0byB0aGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBhcyBzaG93biBpbiB0aGUgZXhhbXBsZSBiZWxvdy5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTFcIiBuZy1jbG9haz57eyAnaGVsbG8nIH19PC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTJcIiBuZy1jbG9hayBjbGFzcz1cIm5nLWNsb2FrXCI+e3sgJ2hlbGxvIElFNycgfX08L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCByZW1vdmUgdGhlIHRlbXBsYXRlIGRpcmVjdGl2ZSBhbmQgY3NzIGNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMScpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMicpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBuZ0Nsb2FrRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgYXR0ci4kc2V0KCduZ0Nsb2FrJywgdW5kZWZpbmVkKTtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCduZy1jbG9haycpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NvbnRyb2xsZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgYXR0YWNoZXMgYSBjb250cm9sbGVyIGNsYXNzIHRvIHRoZSB2aWV3LiBUaGlzIGlzIGEga2V5IGFzcGVjdCBvZiBob3cgYW5ndWxhclxuICogc3VwcG9ydHMgdGhlIHByaW5jaXBsZXMgYmVoaW5kIHRoZSBNb2RlbC1WaWV3LUNvbnRyb2xsZXIgZGVzaWduIHBhdHRlcm4uXG4gKlxuICogTVZDIGNvbXBvbmVudHMgaW4gYW5ndWxhcjpcbiAqXG4gKiAqIE1vZGVsIOKAlCBNb2RlbHMgYXJlIHRoZSBwcm9wZXJ0aWVzIG9mIGEgc2NvcGU7IHNjb3BlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIERPTSB3aGVyZSBzY29wZSBwcm9wZXJ0aWVzXG4gKiAgIGFyZSBhY2Nlc3NlZCB0aHJvdWdoIGJpbmRpbmdzLlxuICogKiBWaWV3IOKAlCBUaGUgdGVtcGxhdGUgKEhUTUwgd2l0aCBkYXRhIGJpbmRpbmdzKSB0aGF0IGlzIHJlbmRlcmVkIGludG8gdGhlIFZpZXcuXG4gKiAqIENvbnRyb2xsZXIg4oCUIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgc3BlY2lmaWVzIGEgQ29udHJvbGxlciBjbGFzczsgdGhlIGNsYXNzIGNvbnRhaW5zIGJ1c2luZXNzXG4gKiAgIGxvZ2ljIGJlaGluZCB0aGUgYXBwbGljYXRpb24gdG8gZGVjb3JhdGUgdGhlIHNjb3BlIHdpdGggZnVuY3Rpb25zIGFuZCB2YWx1ZXNcbiAqXG4gKiBOb3RlIHRoYXQgeW91IGNhbiBhbHNvIGF0dGFjaCBjb250cm9sbGVycyB0byB0aGUgRE9NIGJ5IGRlY2xhcmluZyBpdCBpbiBhIHJvdXRlIGRlZmluaXRpb25cbiAqIHZpYSB0aGUge0BsaW5rIG5nUm91dGUuJHJvdXRlICRyb3V0ZX0gc2VydmljZS4gQSBjb21tb24gbWlzdGFrZSBpcyB0byBkZWNsYXJlIHRoZSBjb250cm9sbGVyXG4gKiBhZ2FpbiB1c2luZyBgbmctY29udHJvbGxlcmAgaW4gdGhlIHRlbXBsYXRlIGl0c2VsZi4gIFRoaXMgd2lsbCBjYXVzZSB0aGUgY29udHJvbGxlciB0byBiZSBhdHRhY2hlZFxuICogYW5kIGV4ZWN1dGVkIHR3aWNlLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgNTAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29udHJvbGxlciBOYW1lIG9mIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZSBjdXJyZW50XG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciAkY29udHJvbGxlclByb3ZpZGVyfSBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufVxuICogdGhhdCBvbiB0aGUgY3VycmVudCBzY29wZSBldmFsdWF0ZXMgdG8gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgY29udHJvbGxlciBpbnN0YW5jZSBjYW4gYmUgcHVibGlzaGVkIGludG8gYSBzY29wZSBwcm9wZXJ0eSBieSBzcGVjaWZ5aW5nXG4gKiBgbmctY29udHJvbGxlcj1cImFzIHByb3BlcnR5TmFtZVwiYC5cbiAqXG4gKiBJZiB0aGUgY3VycmVudCBgJGNvbnRyb2xsZXJQcm92aWRlcmAgaXMgY29uZmlndXJlZCB0byB1c2UgZ2xvYmFscyAodmlhXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMgYCRjb250cm9sbGVyUHJvdmlkZXIuYWxsb3dHbG9iYWxzKClgIH0pLCB0aGlzIG1heVxuICogYWxzbyBiZSB0aGUgbmFtZSBvZiBhIGdsb2JhbGx5IGFjY2Vzc2libGUgY29uc3RydWN0b3IgZnVuY3Rpb24gKG5vdCByZWNvbW1lbmRlZCkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYSBzaW1wbGUgZm9ybSBmb3IgZWRpdGluZyB1c2VyIGNvbnRhY3QgaW5mb3JtYXRpb24uIEFkZGluZywgcmVtb3ZpbmcsIGNsZWFyaW5nLCBhbmRcbiAqIGdyZWV0aW5nIGFyZSBtZXRob2RzIGRlY2xhcmVkIG9uIHRoZSBjb250cm9sbGVyIChzZWUgc291cmNlIHRhYikuIFRoZXNlIG1ldGhvZHMgY2FuXG4gKiBlYXNpbHkgYmUgY2FsbGVkIGZyb20gdGhlIGFuZ3VsYXIgbWFya3VwLiBBbnkgY2hhbmdlcyB0byB0aGUgZGF0YSBhcmUgYXV0b21hdGljYWxseSByZWZsZWN0ZWRcbiAqIGluIHRoZSBWaWV3IHdpdGhvdXQgdGhlIG5lZWQgZm9yIGEgbWFudWFsIHVwZGF0ZS5cbiAqXG4gKiBUd28gZGlmZmVyZW50IGRlY2xhcmF0aW9uIHN0eWxlcyBhcmUgaW5jbHVkZWQgYmVsb3c6XG4gKlxuICogKiBvbmUgYmluZHMgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBkaXJlY3RseSBvbnRvIHRoZSBjb250cm9sbGVyIHVzaW5nIGB0aGlzYDpcbiAqIGBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMSBhcyBzZXR0aW5nc1wiYFxuICogKiBvbmUgaW5qZWN0cyBgJHNjb3BlYCBpbnRvIHRoZSBjb250cm9sbGVyOlxuICogYG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIyXCJgXG4gKlxuICogVGhlIHNlY29uZCBvcHRpb24gaXMgbW9yZSBjb21tb24gaW4gdGhlIEFuZ3VsYXIgY29tbXVuaXR5LCBhbmQgaXMgZ2VuZXJhbGx5IHVzZWQgaW4gYm9pbGVycGxhdGVzXG4gKiBhbmQgaW4gdGhpcyBndWlkZS4gSG93ZXZlciwgdGhlcmUgYXJlIGFkdmFudGFnZXMgdG8gYmluZGluZyBwcm9wZXJ0aWVzIGRpcmVjdGx5IHRvIHRoZSBjb250cm9sbGVyXG4gKiBhbmQgYXZvaWRpbmcgc2NvcGUuXG4gKlxuICogKiBVc2luZyBgY29udHJvbGxlciBhc2AgbWFrZXMgaXQgb2J2aW91cyB3aGljaCBjb250cm9sbGVyIHlvdSBhcmUgYWNjZXNzaW5nIGluIHRoZSB0ZW1wbGF0ZSB3aGVuXG4gKiBtdWx0aXBsZSBjb250cm9sbGVycyBhcHBseSB0byBhbiBlbGVtZW50LlxuICogKiBJZiB5b3UgYXJlIHdyaXRpbmcgeW91ciBjb250cm9sbGVycyBhcyBjbGFzc2VzIHlvdSBoYXZlIGVhc2llciBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgYW5kXG4gKiBtZXRob2RzLCB3aGljaCB3aWxsIGFwcGVhciBvbiB0aGUgc2NvcGUsIGZyb20gaW5zaWRlIHRoZSBjb250cm9sbGVyIGNvZGUuXG4gKiAqIFNpbmNlIHRoZXJlIGlzIGFsd2F5cyBhIGAuYCBpbiB0aGUgYmluZGluZ3MsIHlvdSBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHByb3RvdHlwYWxcbiAqIGluaGVyaXRhbmNlIG1hc2tpbmcgcHJpbWl0aXZlcy5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBgY29udHJvbGxlciBhc2Agc3ludGF4LlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NvbnRyb2xsZXJBc1wiIG1vZHVsZT1cImNvbnRyb2xsZXJBc0V4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxkaXYgaWQ9XCJjdHJsLWFzLWV4bXBsXCIgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3NcIj5cbiAqICAgICAgTmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzZXR0aW5ncy5uYW1lXCIvPlxuICogICAgICBbIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInNldHRpbmdzLmdyZWV0KClcIj5ncmVldDwvYT4gXTxici8+XG4gKiAgICAgIENvbnRhY3Q6XG4gKiAgICAgIDx1bD5cbiAqICAgICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0c1wiPlxuICogICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cImNvbnRhY3QudHlwZVwiPlxuICogICAgICAgICAgICAgPG9wdGlvbj5waG9uZTwvb3B0aW9uPlxuICogICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICAgPC9zZWxlY3Q+XG4gKiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImNvbnRhY3QudmFsdWVcIi8+XG4gKiAgICAgICAgICBbIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInNldHRpbmdzLmNsZWFyQ29udGFjdChjb250YWN0KVwiPmNsZWFyPC9hPlxuICogICAgICAgICAgfCA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJzZXR0aW5ncy5yZW1vdmVDb250YWN0KGNvbnRhY3QpXCI+WDwvYT4gXVxuICogICAgICAgIDwvbGk+XG4gKiAgICAgICAgPGxpPlsgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwic2V0dGluZ3MuYWRkQ29udGFjdCgpXCI+YWRkPC9hPiBdPC9saT5cbiAqICAgICA8L3VsPlxuICogICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgYW5ndWxhci5tb2R1bGUoJ2NvbnRyb2xsZXJBc0V4YW1wbGUnLCBbXSlcbiAqICAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcjEnLCBTZXR0aW5nc0NvbnRyb2xsZXIxKTtcbiAqXG4gKiAgICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIxKCkge1xuICogICAgICB0aGlzLm5hbWUgPSBcIkpvaG4gU21pdGhcIjtcbiAqICAgICAgdGhpcy5jb250YWN0cyA9IFtcbiAqICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSxcbiAqICAgICAgICB7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICdqb2huLnNtaXRoQGV4YW1wbGUub3JnJ30gXTtcbiAqICAgIH1cbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogICAgICBhbGVydCh0aGlzLm5hbWUpO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgIHRoaXMuY29udGFjdHMucHVzaCh7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICd5b3VybmFtZUBleGFtcGxlLm9yZyd9KTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkge1xuICogICAgIHZhciBpbmRleCA9IHRoaXMuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcbiAqICAgICAgY29udGFjdC52YWx1ZSA9ICcnO1xuICogICAgfTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1hcy1leG1wbCcpKTtcbiAqICAgICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5Lm1vZGVsKCdzZXR0aW5ncy5uYW1lJykpXG4gKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICpcbiAqICAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMCkpO1xuICogICAgICAgdmFyIHNlY29uZFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XG4gKlxuICogICAgICAgZXhwZWN0KHNlY29uZFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xuICpcbiAqICAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubGlua1RleHQoJ2NsZWFyJykpLmNsaWNrKCk7XG4gKlxuICogICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgIC50b0JlKCcnKTtcbiAqXG4gKiAgICAgICBjb250YWluZXIuZWxlbWVudChieS5saW5rVGV4dCgnYWRkJykpLmNsaWNrKCk7XG4gKlxuICogICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzJykucm93KDIpKVxuICogICAgICAgICAgIC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpXG4gKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdGhlIFwiYXR0YWNoIHRvIGAkc2NvcGVgXCIgc3R5bGUgb2YgY29udHJvbGxlci5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdDb250cm9sbGVyXCIgbW9kdWxlPVwiY29udHJvbGxlckV4YW1wbGVcIj5cbiAqICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICA8ZGl2IGlkPVwiY3RybC1leG1wbFwiIG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIyXCI+XG4gKiAgICAgTmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCIvPlxuICogICAgIFsgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwiZ3JlZXQoKVwiPmdyZWV0PC9hPiBdPGJyLz5cbiAqICAgICBDb250YWN0OlxuICogICAgIDx1bD5cbiAqICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIj5cbiAqICAgICAgICAgICAgPG9wdGlvbj5waG9uZTwvb3B0aW9uPlxuICogICAgICAgICAgICA8b3B0aW9uPmVtYWlsPC9vcHRpb24+XG4gKiAgICAgICAgIDwvc2VsZWN0PlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImNvbnRhY3QudmFsdWVcIi8+XG4gKiAgICAgICAgIFsgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwiY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2E+XG4gKiAgICAgICAgIHwgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicmVtb3ZlQ29udGFjdChjb250YWN0KVwiPlg8L2E+IF1cbiAqICAgICAgIDwvbGk+XG4gKiAgICAgICA8bGk+WyA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJhZGRDb250YWN0KClcIj5hZGQ8L2E+IF08L2xpPlxuICogICAgPC91bD5cbiAqICAgPC9kaXY+XG4gKiAgPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgYW5ndWxhci5tb2R1bGUoJ2NvbnRyb2xsZXJFeGFtcGxlJywgW10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcjInLCBbJyRzY29wZScsIFNldHRpbmdzQ29udHJvbGxlcjJdKTtcbiAqXG4gKiAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjIoJHNjb3BlKSB7XG4gKiAgICAgJHNjb3BlLm5hbWUgPSBcIkpvaG4gU21pdGhcIjtcbiAqICAgICAkc2NvcGUuY29udGFjdHMgPSBbXG4gKiAgICAgICB7dHlwZToncGhvbmUnLCB2YWx1ZTonNDA4IDU1NSAxMjEyJ30sXG4gKiAgICAgICB7dHlwZTonZW1haWwnLCB2YWx1ZTonam9obi5zbWl0aEBleGFtcGxlLm9yZyd9IF07XG4gKlxuICogICAgICRzY29wZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgYWxlcnQoJHNjb3BlLm5hbWUpO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAkc2NvcGUuY29udGFjdHMucHVzaCh7dHlwZTonZW1haWwnLCB2YWx1ZToneW91cm5hbWVAZXhhbXBsZS5vcmcnfSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLnJlbW92ZUNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0VG9SZW1vdmUpIHtcbiAqICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5jb250YWN0cy5pbmRleE9mKGNvbnRhY3RUb1JlbW92ZSk7XG4gKiAgICAgICAkc2NvcGUuY29udGFjdHMuc3BsaWNlKGluZGV4LCAxKTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUuY2xlYXJDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCkge1xuICogICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcbiAqICAgICAgIGNvbnRhY3QudmFsdWUgPSAnJztcbiAqICAgICB9O1xuICogICB9XG4gKiAgPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgIGl0KCdzaG91bGQgY2hlY2sgY29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuICogICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1leG1wbCcpKTtcbiAqXG4gKiAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5tb2RlbCgnbmFtZScpKVxuICogICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICpcbiAqICAgICAgdmFyIGZpcnN0UmVwZWF0ID1cbiAqICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDApKTtcbiAqICAgICAgdmFyIHNlY29uZFJlcGVhdCA9XG4gKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygxKSk7XG4gKlxuICogICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XG4gKiAgICAgIGV4cGVjdChzZWNvbmRSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xuICpcbiAqICAgICAgZmlyc3RSZXBlYXQuZWxlbWVudChieS5saW5rVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCcnKTtcbiAqXG4gKiAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmxpbmtUZXh0KCdhZGQnKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygyKSlcbiAqICAgICAgICAgIC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpXG4gKiAgICAgICAgICAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gKiAgICB9KTtcbiAqICA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cblxuICovXG52YXIgbmdDb250cm9sbGVyRGlyZWN0aXZlID0gW2Z1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHRydWUsXG4gICAgY29udHJvbGxlcjogJ0AnLFxuICAgIHByaW9yaXR5OiA1MDBcbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ3NwXG4gKlxuICogQGVsZW1lbnQgaHRtbFxuICogQGRlc2NyaXB0aW9uXG4gKiBFbmFibGVzIFtDU1AgKENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKSBzdXBwb3J0LlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gZGV2ZWxvcGluZyB0aGluZ3MgbGlrZSBHb29nbGUgQ2hyb21lIEV4dGVuc2lvbnMgb3IgVW5pdmVyc2FsIFdpbmRvd3MgQXBwcy5cbiAqXG4gKiBDU1AgZm9yYmlkcyBhcHBzIHRvIHVzZSBgZXZhbGAgb3IgYEZ1bmN0aW9uKHN0cmluZylgIGdlbmVyYXRlZCBmdW5jdGlvbnMgKGFtb25nIG90aGVyIHRoaW5ncykuXG4gKiBGb3IgQW5ndWxhciB0byBiZSBDU1AgY29tcGF0aWJsZSB0aGVyZSBhcmUgb25seSB0d28gdGhpbmdzIHRoYXQgd2UgbmVlZCB0byBkbyBkaWZmZXJlbnRseTpcbiAqXG4gKiAtIGRvbid0IHVzZSBgRnVuY3Rpb25gIGNvbnN0cnVjdG9yIHRvIGdlbmVyYXRlIG9wdGltaXplZCB2YWx1ZSBnZXR0ZXJzXG4gKiAtIGRvbid0IGluamVjdCBjdXN0b20gc3R5bGVzaGVldCBpbnRvIHRoZSBkb2N1bWVudFxuICpcbiAqIEFuZ3VsYXJKUyB1c2VzIGBGdW5jdGlvbihzdHJpbmcpYCBnZW5lcmF0ZWQgZnVuY3Rpb25zIGFzIGEgc3BlZWQgb3B0aW1pemF0aW9uLiBBcHBseWluZyB0aGUgYG5nQ3NwYFxuICogZGlyZWN0aXZlIHdpbGwgY2F1c2UgQW5ndWxhciB0byB1c2UgQ1NQIGNvbXBhdGliaWxpdHkgbW9kZS4gV2hlbiB0aGlzIG1vZGUgaXMgb24gQW5ndWxhckpTIHdpbGxcbiAqIGV2YWx1YXRlIGFsbCBleHByZXNzaW9ucyB1cCB0byAzMCUgc2xvd2VyIHRoYW4gaW4gbm9uLUNTUCBtb2RlLCBidXQgbm8gc2VjdXJpdHkgdmlvbGF0aW9ucyB3aWxsXG4gKiBiZSByYWlzZWQuXG4gKlxuICogQ1NQIGZvcmJpZHMgSmF2YVNjcmlwdCB0byBpbmxpbmUgc3R5bGVzaGVldCBydWxlcy4gSW4gbm9uIENTUCBtb2RlIEFuZ3VsYXIgYXV0b21hdGljYWxseVxuICogaW5jbHVkZXMgc29tZSBDU1MgcnVsZXMgKGUuZy4ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Nsb2FrIG5nQ2xvYWt9KS5cbiAqIFRvIG1ha2UgdGhvc2UgZGlyZWN0aXZlcyB3b3JrIGluIENTUCBtb2RlLCBpbmNsdWRlIHRoZSBgYW5ndWxhci1jc3AuY3NzYCBtYW51YWxseS5cbiAqXG4gKiBBbmd1bGFyIHRyaWVzIHRvIGF1dG9kZXRlY3QgaWYgQ1NQIGlzIGFjdGl2ZSBhbmQgYXV0b21hdGljYWxseSB0dXJuIG9uIHRoZSBDU1Atc2FmZSBtb2RlLiBUaGlzXG4gKiBhdXRvZGV0ZWN0aW9uIGhvd2V2ZXIgdHJpZ2dlcnMgYSBDU1AgZXJyb3IgdG8gYmUgbG9nZ2VkIGluIHRoZSBjb25zb2xlOlxuICpcbiAqIGBgYFxuICogUmVmdXNlZCB0byBldmFsdWF0ZSBhIHN0cmluZyBhcyBKYXZhU2NyaXB0IGJlY2F1c2UgJ3Vuc2FmZS1ldmFsJyBpcyBub3QgYW4gYWxsb3dlZCBzb3VyY2Ugb2ZcbiAqIHNjcmlwdCBpbiB0aGUgZm9sbG93aW5nIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGRpcmVjdGl2ZTogXCJkZWZhdWx0LXNyYyAnc2VsZidcIi4gTm90ZSB0aGF0XG4gKiAnc2NyaXB0LXNyYycgd2FzIG5vdCBleHBsaWNpdGx5IHNldCwgc28gJ2RlZmF1bHQtc3JjJyBpcyB1c2VkIGFzIGEgZmFsbGJhY2suXG4gKiBgYGBcbiAqXG4gKiBUaGlzIGVycm9yIGlzIGhhcm1sZXNzIGJ1dCBhbm5veWluZy4gVG8gcHJldmVudCB0aGUgZXJyb3IgZnJvbSBzaG93aW5nIHVwLCBwdXQgdGhlIGBuZ0NzcGBcbiAqIGRpcmVjdGl2ZSBvbiB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBhcHBsaWNhdGlvbiBvciBvbiB0aGUgYGFuZ3VsYXIuanNgIHNjcmlwdCB0YWcsIHdoaWNoZXZlclxuICogYXBwZWFycyBmaXJzdCBpbiB0aGUgaHRtbCBkb2N1bWVudC5cbiAqXG4gKiAqTm90ZTogVGhpcyBkaXJlY3RpdmUgaXMgb25seSBhdmFpbGFibGUgaW4gdGhlIGBuZy1jc3BgIGFuZCBgZGF0YS1uZy1jc3BgIGF0dHJpYnV0ZSBmb3JtLipcbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBhcHBseSB0aGUgYG5nQ3NwYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXG4gICBgYGBodG1sXG4gICAgIDwhZG9jdHlwZSBodG1sPlxuICAgICA8aHRtbCBuZy1hcHAgbmctY3NwPlxuICAgICAuLi5cbiAgICAgLi4uXG4gICAgIDwvaHRtbD5cbiAgIGBgYFxuICAqIEBleGFtcGxlXG4gICAgICAvLyBOb3RlOiB0aGUgc3VmZml4IGAuY3NwYCBpbiB0aGUgZXhhbXBsZSBuYW1lIHRyaWdnZXJzXG4gICAgICAvLyBjc3AgbW9kZSBpbiBvdXIgaHR0cCBzZXJ2ZXIhXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwiZXhhbXBsZS5jc3BcIiBtb2R1bGU9XCJjc3BFeGFtcGxlXCIgbmctY3NwPVwidHJ1ZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIk1haW5Db250cm9sbGVyIGFzIGN0cmxcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjdHJsLmluYygpXCIgaWQ9XCJpbmNcIj5JbmNyZW1lbnQ8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJjb3VudGVyXCI+XG4gICAgICAgICAgICAgICAge3tjdHJsLmNvdW50ZXJ9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImN0cmwuZXZpbCgpXCIgaWQ9XCJldmlsXCI+RXZpbDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8c3BhbiBpZD1cImV2aWxFcnJvclwiPlxuICAgICAgICAgICAgICAgIHt7Y3RybC5ldmlsRXJyb3J9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjc3BFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmluYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudGVyKys7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmV2aWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGpzaGludCBldmlsOnRydWVcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGV2YWwoJzErMicpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2aWxFcnJvciA9IGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHV0aWwsIHdlYmRyaXZlcjtcblxuICAgICAgICAgIHZhciBpbmNCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbmMnKSk7XG4gICAgICAgICAgdmFyIGNvdW50ZXIgPSBlbGVtZW50KGJ5LmlkKCdjb3VudGVyJykpO1xuICAgICAgICAgIHZhciBldmlsQnRuID0gZWxlbWVudChieS5pZCgnZXZpbCcpKTtcbiAgICAgICAgICB2YXIgZXZpbEVycm9yID0gZWxlbWVudChieS5pZCgnZXZpbEVycm9yJykpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5tYW5hZ2UoKS5sb2dzKCkuZ2V0KCdicm93c2VyJykudGhlbihmdW5jdGlvbihicm93c2VyTG9nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBicm93c2VyTG9nLmZpbHRlcihmdW5jdGlvbihsb2dFbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2dFbnRyeS5sZXZlbC52YWx1ZSA+IHdlYmRyaXZlci5sb2dnaW5nLkxldmVsLldBUk5JTkcudmFsdWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gY2xlYXJFcnJvcnMoKSB7XG4gICAgICAgICAgICBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGV4cGVjdE5vRXJyb3JzKCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIGV4cGVjdChmaWx0ZXJlZExvZy5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgICAgIGlmIChmaWx0ZXJlZExvZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYnJvd3NlciBjb25zb2xlIGVycm9yczogJyArIHV0aWwuaW5zcGVjdChmaWx0ZXJlZExvZykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBleHBlY3RFcnJvcihyZWdleCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBmaWx0ZXJlZExvZy5mb3JFYWNoKGZ1bmN0aW9uKGxvZykge1xuICAgICAgICAgICAgICAgIGlmIChsb2cubWVzc2FnZS5tYXRjaChyZWdleCkpIHtcbiAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBhbiBlcnJvciB0aGF0IG1hdGNoZXMgJyArIHJlZ2V4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG4gICAgICAgICAgICB3ZWJkcml2ZXIgPSByZXF1aXJlKCdwcm90cmFjdG9yL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXInKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIEZvciBub3csIHdlIG9ubHkgdGVzdCBvbiBDaHJvbWUsXG4gICAgICAgICAgLy8gYXMgU2FmYXJpIGRvZXMgbm90IGxvYWQgdGhlIHBhZ2Ugd2l0aCBQcm90cmFjdG9yJ3MgaW5qZWN0ZWQgc2NyaXB0cyxcbiAgICAgICAgICAvLyBhbmQgRmlyZWZveCB3ZWJkcml2ZXIgYWx3YXlzIGRpc2FibGVzIGNvbnRlbnQgc2VjdXJpdHkgcG9saWN5ICgjNjM1OClcbiAgICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciAhPT0gJ2Nocm9tZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIG5vdCByZXBvcnQgZXJyb3JzIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjbGVhciBlcnJvcnMgc28gd2UgYXJlIG5vdCBkZXBlbmRlbnQgb24gcHJldmlvdXMgdGVzdHNcbiAgICAgICAgICAgIGNsZWFyRXJyb3JzKCk7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIHJlbG9hZCB0aGUgcGFnZSBhcyB0aGUgcGFnZSBpcyBhbHJlYWR5IGxvYWRlZCB3aGVuXG4gICAgICAgICAgICAvLyB3ZSBjb21lIGhlcmVcbiAgICAgICAgICAgIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICBicm93c2VyLmdldCh1cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBleHBlY3ROb0Vycm9ycygpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSBleHByZXNzaW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCcwJyk7XG4gICAgICAgICAgICBpbmNCdG4uY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9FcXVhbCgnMScpO1xuICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW5kIHJlcG9ydCBhbiBlcnJvciB3aGVuIHVzaW5nIFwiZXZhbFwiJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBldmlsQnRuLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoZXZpbEVycm9yLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTtcbiAgICAgICAgICAgIGV4cGVjdEVycm9yKC9Db250ZW50IFNlY3VyaXR5IFBvbGljeS8pO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICovXG5cbi8vIG5nQ3NwIGlzIG5vdCBpbXBsZW1lbnRlZCBhcyBhIHByb3BlciBkaXJlY3RpdmUgYW55IG1vcmUsIGJlY2F1c2Ugd2UgbmVlZCBpdCBiZSBwcm9jZXNzZWQgd2hpbGUgd2Vcbi8vIGJvb3RzdHJhcCB0aGUgc3lzdGVtIChiZWZvcmUgJHBhcnNlIGlzIGluc3RhbnRpYXRlZCksIGZvciB0aGlzIHJlYXNvbiB3ZSBqdXN0IGhhdmVcbi8vIHRoZSBjc3AuaXNBY3RpdmUoKSBmbiB0aGF0IGxvb2tzIGZvciBuZy1jc3AgYXR0cmlidXRlIGFueXdoZXJlIGluIHRoZSBjdXJyZW50IGRvY1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xpY2tcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZ0NsaWNrIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIHdoZW5cbiAqIGFuIGVsZW1lbnQgaXMgY2xpY2tlZC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogY2xpY2suICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudFxuICAgICAgPC9idXR0b24+XG4gICAgICA8c3Bhbj5cbiAgICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICAgPC9zcGFuPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdjb3VudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJzAnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbi8qXG4gKiBBIGNvbGxlY3Rpb24gb2YgZGlyZWN0aXZlcyB0aGF0IGFsbG93cyBjcmVhdGlvbiBvZiBjdXN0b20gZXZlbnQgaGFuZGxlcnMgdGhhdCBhcmUgZGVmaW5lZCBhc1xuICogYW5ndWxhciBleHByZXNzaW9ucyBhbmQgYXJlIGNvbXBpbGVkIGFuZCBleGVjdXRlZCB3aXRoaW4gdGhlIGN1cnJlbnQgc2NvcGUuXG4gKi9cbnZhciBuZ0V2ZW50RGlyZWN0aXZlcyA9IHt9O1xuXG4vLyBGb3IgZXZlbnRzIHRoYXQgbWlnaHQgZmlyZSBzeW5jaHJvbm91c2x5IGR1cmluZyBET00gbWFuaXB1bGF0aW9uXG4vLyB3ZSBuZWVkIHRvIGV4ZWN1dGUgdGhlaXIgZXZlbnQgaGFuZGxlcnMgYXN5bmNocm9ub3VzbHkgdXNpbmcgJGV2YWxBc3luYyxcbi8vIHNvIHRoYXQgdGhleSBhcmUgbm90IGV4ZWN1dGVkIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS5cbnZhciBmb3JjZUFzeW5jRXZlbnRzID0ge1xuICAnYmx1cic6IHRydWUsXG4gICdmb2N1cyc6IHRydWVcbn07XG5mb3JFYWNoKFxuICAnY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlbW92ZSBtb3VzZWVudGVyIG1vdXNlbGVhdmUga2V5ZG93biBrZXl1cCBrZXlwcmVzcyBzdWJtaXQgZm9jdXMgYmx1ciBjb3B5IGN1dCBwYXN0ZScuc3BsaXQoJyAnKSxcbiAgZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBldmVudE5hbWUpO1xuICAgIG5nRXZlbnREaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gWyckcGFyc2UnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRwYXJzZSwgJHJvb3RTY29wZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oJGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nRXZlbnRIYW5kbGVyKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm4oc2NvcGUsIHskZXZlbnQ6ZXZlbnR9KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKGZvcmNlQXN5bmNFdmVudHNbZXZlbnROYW1lXSAmJiAkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dO1xuICB9XG4pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nRGJsY2xpY2tcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdEYmxjbGlja2AgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYSBkYmxjbGljayBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRGJsY2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogYSBkYmxjbGljay4gKFRoZSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctZGJsY2xpY2s9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gZG91YmxlIGNsaWNrKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWRvd25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZ01vdXNlZG93biBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWRvd24gZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWRvd24uICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2Vkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIGRvd24pXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNldXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNldXAgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNldXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2V1cC4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZXVwPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIHVwKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VvdmVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW92ZXIgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlb3ZlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZW92ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2VvdmVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgaXMgb3ZlcilcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VlbnRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VlbnRlciBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VlbnRlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWVudGVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNlZW50ZXI9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBlbnRlcnMpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlbGVhdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbGVhdmUgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbGVhdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2VsZWF2ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWxlYXZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbGVhdmVzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZW1vdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vtb3ZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbW92ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZW1vdmU9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBtb3ZlcylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5ZG93blxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5ZG93biBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5ZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlkb3duLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1rZXlkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IGRvd24gY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5dXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXVwIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXl1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXl1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5IGNvdW50PC9wPlxuICAgICAgIDxpbnB1dCBuZy1rZXl1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj4ga2V5IHVwIGNvdW50OiB7e2NvdW50fX1cblxuICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleWNvZGU8L3A+XG4gICAgICAgPGlucHV0IG5nLWtleXVwPVwiZXZlbnQ9JGV2ZW50XCI+XG4gICAgICAgPHA+ZXZlbnQga2V5Q29kZToge3sgZXZlbnQua2V5Q29kZSB9fTwvcD5cbiAgICAgICA8cD5ldmVudCBhbHRLZXk6IHt7IGV2ZW50LmFsdEtleSB9fTwvcD5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleXByZXNzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlwcmVzcyBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlwcmVzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlwcmVzcy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH1cbiAqIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWtleXByZXNzPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IHByZXNzIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N1Ym1pdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRW5hYmxlcyBiaW5kaW5nIGFuZ3VsYXIgZXhwcmVzc2lvbnMgdG8gb25zdWJtaXQgZXZlbnRzLlxuICpcbiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlXG4gKiBzZXJ2ZXIgYW5kIHJlbG9hZGluZyB0aGUgY3VycmVudCBwYWdlKSwgYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBgYWN0aW9uYCxcbiAqIGBkYXRhLWFjdGlvbmAsIG9yIGB4LWFjdGlvbmAgYXR0cmlidXRlcy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipXYXJuaW5nOioqIEJlIGNhcmVmdWwgbm90IHRvIGNhdXNlIFwiZG91YmxlLXN1Ym1pc3Npb25cIiBieSB1c2luZyBib3RoIHRoZSBgbmdDbGlja2AgYW5kXG4gKiBgbmdTdWJtaXRgIGhhbmRsZXJzIHRvZ2V0aGVyLiBTZWUgdGhlXG4gKiB7QGxpbmsgZm9ybSNzdWJtaXR0aW5nLWEtZm9ybS1hbmQtcHJldmVudGluZy10aGUtZGVmYXVsdC1hY3Rpb24gYGZvcm1gIGRpcmVjdGl2ZSBkb2N1bWVudGF0aW9ufVxuICogZm9yIGEgZGV0YWlsZWQgZGlzY3Vzc2lvbiBvZiB3aGVuIGBuZ1N1Ym1pdGAgbWF5IGJlIHRyaWdnZXJlZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBlbGVtZW50IGZvcm1cbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwic3VibWl0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3N1Ym1pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmxpc3QgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2hlbGxvJztcbiAgICAgICAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCRzY29wZS50ZXh0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHVzaCh0aGlzLnRleHQpO1xuICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuZy1zdWJtaXQ9XCJzdWJtaXQoKVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICBFbnRlciB0ZXh0IGFuZCBoaXQgZW50ZXI6XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidGV4dFwiIG5hbWU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBpZD1cInN1Ym1pdFwiIHZhbHVlPVwiU3VibWl0XCIgLz5cbiAgICAgICAgPHByZT5saXN0PXt7bGlzdH19PC9wcmU+XG4gICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3VibWl0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndGV4dCcpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJycpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgaWdub3JlIGVtcHR5IHN0cmluZ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0PVtdJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0ZvY3VzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBmb2N1cyBldmVudC5cbiAqXG4gKiBOb3RlOiBBcyB0aGUgYGZvY3VzYCBldmVudCBpcyBleGVjdXRlZCBzeW5jaHJvbm91c2x5IHdoZW4gY2FsbGluZyBgaW5wdXQuZm9jdXMoKWBcbiAqIEFuZ3VsYXJKUyBleGVjdXRlcyB0aGUgZXhwcmVzc2lvbiB1c2luZyBgc2NvcGUuJGV2YWxBc3luY2AgaWYgdGhlIGV2ZW50IGlzIGZpcmVkXG4gKiBkdXJpbmcgYW4gYCRhcHBseWAgdG8gZW5zdXJlIGEgY29uc2lzdGVudCBzdGF0ZS5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0ZvY3VzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGZvY3VzLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCbHVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBibHVyIGV2ZW50LlxuICpcbiAqIEEgW2JsdXIgZXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9ibHVyKSBmaXJlcyB3aGVuXG4gKiBhbiBlbGVtZW50IGhhcyBsb3N0IGZvY3VzLlxuICpcbiAqIE5vdGU6IEFzIHRoZSBgYmx1cmAgZXZlbnQgaXMgZXhlY3V0ZWQgc3luY2hyb25vdXNseSBhbHNvIGR1cmluZyBET00gbWFuaXB1bGF0aW9uc1xuICogKGUuZy4gcmVtb3ZpbmcgYSBmb2N1c3NlZCBpbnB1dCksXG4gKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZFxuICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCbHVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGJsdXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NvcHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGNvcHkgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb3B5IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGNvcHkuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jb3B5PVwiY29waWVkPXRydWVcIiBuZy1pbml0PVwiY29waWVkPWZhbHNlOyB2YWx1ZT0nY29weSBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICBjb3BpZWQ6IHt7Y29waWVkfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDdXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGN1dCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0N1dCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjdXQuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jdXQ9XCJjdXQ9dHJ1ZVwiIG5nLWluaXQ9XCJjdXQ9ZmFsc2U7IHZhbHVlPSdjdXQgbWUnXCIgbmctbW9kZWw9XCJ2YWx1ZVwiPlxuICAgICAgY3V0OiB7e2N1dH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGFzdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIHBhc3RlIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUGFzdGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogcGFzdGUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1wYXN0ZT1cInBhc3RlPXRydWVcIiBuZy1pbml0PVwicGFzdGU9ZmFsc2VcIiBwbGFjZWhvbGRlcj0ncGFzdGUgaGVyZSc+XG4gICAgICBwYXN0ZWQ6IHt7cGFzdGV9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0lmXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0lmYCBkaXJlY3RpdmUgcmVtb3ZlcyBvciByZWNyZWF0ZXMgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSBiYXNlZCBvbiBhblxuICoge2V4cHJlc3Npb259LiBJZiB0aGUgZXhwcmVzc2lvbiBhc3NpZ25lZCB0byBgbmdJZmAgZXZhbHVhdGVzIHRvIGEgZmFsc2VcbiAqIHZhbHVlIHRoZW4gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00sIG90aGVyd2lzZSBhIGNsb25lIG9mIHRoZVxuICogZWxlbWVudCBpcyByZWluc2VydGVkIGludG8gdGhlIERPTS5cbiAqXG4gKiBgbmdJZmAgZGlmZmVycyBmcm9tIGBuZ1Nob3dgIGFuZCBgbmdIaWRlYCBpbiB0aGF0IGBuZ0lmYCBjb21wbGV0ZWx5IHJlbW92ZXMgYW5kIHJlY3JlYXRlcyB0aGVcbiAqIGVsZW1lbnQgaW4gdGhlIERPTSByYXRoZXIgdGhhbiBjaGFuZ2luZyBpdHMgdmlzaWJpbGl0eSB2aWEgdGhlIGBkaXNwbGF5YCBjc3MgcHJvcGVydHkuICBBIGNvbW1vblxuICogY2FzZSB3aGVuIHRoaXMgZGlmZmVyZW5jZSBpcyBzaWduaWZpY2FudCBpcyB3aGVuIHVzaW5nIGNzcyBzZWxlY3RvcnMgdGhhdCByZWx5IG9uIGFuIGVsZW1lbnQnc1xuICogcG9zaXRpb24gd2l0aGluIHRoZSBET00sIHN1Y2ggYXMgdGhlIGA6Zmlyc3QtY2hpbGRgIG9yIGA6bGFzdC1jaGlsZGAgcHNldWRvLWNsYXNzZXMuXG4gKlxuICogTm90ZSB0aGF0IHdoZW4gYW4gZWxlbWVudCBpcyByZW1vdmVkIHVzaW5nIGBuZ0lmYCBpdHMgc2NvcGUgaXMgZGVzdHJveWVkIGFuZCBhIG5ldyBzY29wZVxuICogaXMgY3JlYXRlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlc3RvcmVkLiAgVGhlIHNjb3BlIGNyZWF0ZWQgd2l0aGluIGBuZ0lmYCBpbmhlcml0cyBmcm9tXG4gKiBpdHMgcGFyZW50IHNjb3BlIHVzaW5nXG4gKiBbcHJvdG90eXBhbCBpbmhlcml0YW5jZV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzI2phdmFzY3JpcHQtcHJvdG90eXBhbC1pbmhlcml0YW5jZSkuXG4gKiBBbiBpbXBvcnRhbnQgaW1wbGljYXRpb24gb2YgdGhpcyBpcyBpZiBgbmdNb2RlbGAgaXMgdXNlZCB3aXRoaW4gYG5nSWZgIHRvIGJpbmQgdG9cbiAqIGEgamF2YXNjcmlwdCBwcmltaXRpdmUgZGVmaW5lZCBpbiB0aGUgcGFyZW50IHNjb3BlLiBJbiB0aGlzIGNhc2UgYW55IG1vZGlmaWNhdGlvbnMgbWFkZSB0byB0aGVcbiAqIHZhcmlhYmxlIHdpdGhpbiB0aGUgY2hpbGQgc2NvcGUgd2lsbCBvdmVycmlkZSAoaGlkZSkgdGhlIHZhbHVlIGluIHRoZSBwYXJlbnQgc2NvcGUuXG4gKlxuICogQWxzbywgYG5nSWZgIHJlY3JlYXRlcyBlbGVtZW50cyB1c2luZyB0aGVpciBjb21waWxlZCBzdGF0ZS4gQW4gZXhhbXBsZSBvZiB0aGlzIGJlaGF2aW9yXG4gKiBpcyBpZiBhbiBlbGVtZW50J3MgY2xhc3MgYXR0cmlidXRlIGlzIGRpcmVjdGx5IG1vZGlmaWVkIGFmdGVyIGl0J3MgY29tcGlsZWQsIHVzaW5nIHNvbWV0aGluZyBsaWtlXG4gKiBqUXVlcnkncyBgLmFkZENsYXNzKClgIG1ldGhvZCwgYW5kIHRoZSBlbGVtZW50IGlzIGxhdGVyIHJlbW92ZWQuIFdoZW4gYG5nSWZgIHJlY3JlYXRlcyB0aGUgZWxlbWVudFxuICogdGhlIGFkZGVkIGNsYXNzIHdpbGwgYmUgbG9zdCBiZWNhdXNlIHRoZSBvcmlnaW5hbCBjb21waWxlZCBzdGF0ZSBpcyB1c2VkIHRvIHJlZ2VuZXJhdGUgdGhlIGVsZW1lbnQuXG4gKlxuICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIHByb3ZpZGUgYW5pbWF0aW9ucyB2aWEgdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSB0byBhbmltYXRlIHRoZSBgZW50ZXJgXG4gKiBhbmQgYGxlYXZlYCBlZmZlY3RzLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGhhcHBlbnMganVzdCBhZnRlciB0aGUgYG5nSWZgIGNvbnRlbnRzIGNoYW5nZSBhbmQgYSBuZXcgRE9NIGVsZW1lbnQgaXMgY3JlYXRlZCBhbmQgaW5qZWN0ZWQgaW50byB0aGUgYG5nSWZgIGNvbnRhaW5lclxuICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBgbmdJZmAgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA2MDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJZiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZmFsc3kgdGhlblxuICogICAgIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHRyZWUuIElmIGl0IGlzIHRydXRoeSBhIGNvcHkgb2YgdGhlIGNvbXBpbGVkXG4gKiAgICAgZWxlbWVudCBpcyBhZGRlZCB0byB0aGUgRE9NIHRyZWUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgbmctaW5pdD1cImNoZWNrZWQ9dHJ1ZVwiIC8+PGJyLz5cbiAgICAgIFNob3cgd2hlbiBjaGVja2VkOlxuICAgICAgPHNwYW4gbmctaWY9XCJjaGVja2VkXCIgY2xhc3M9XCJhbmltYXRlLWlmXCI+XG4gICAgICAgIFRoaXMgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjaGVja2JveCBpcyB1bmNoZWNrZWQuXG4gICAgICA8L3NwYW4+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtaWYge1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLCAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLFxuICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eTowO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSxcbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6MTtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nSWZEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHByaW9yaXR5OiA2MDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAkJHRsYjogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgdmFyIGJsb2NrLCBjaGlsZFNjb3BlLCBwcmV2aW91c0VsZW1lbnRzO1xuICAgICAgICAkc2NvcGUuJHdhdGNoKCRhdHRyLm5nSWYsIGZ1bmN0aW9uIG5nSWZXYXRjaEFjdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWNoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUsIG5ld1Njb3BlKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgICAgIGNsb25lW2Nsb25lLmxlbmd0aCsrXSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyBlbmQgbmdJZjogJyArICRhdHRyLm5nSWYgKyAnICcpO1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIHRoZSByZWZlcmVuY2UgdG8gdGhlIGpxbGl0ZSB3cmFwcGVyIGFzIGl0IG1pZ2h0IGJlIGNoYW5nZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuXG4gICAgICAgICAgICAgICAgYmxvY2sgPSB7XG4gICAgICAgICAgICAgICAgICBjbG9uZTogY2xvbmVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCAkZWxlbWVudC5wYXJlbnQoKSwgJGVsZW1lbnQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cy5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUocHJldmlvdXNFbGVtZW50cykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJsb2NrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSW5jbHVkZVxuICogQHJlc3RyaWN0IEVDQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmV0Y2hlcywgY29tcGlsZXMgYW5kIGluY2x1ZGVzIGFuIGV4dGVybmFsIEhUTUwgZnJhZ21lbnQuXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIFVSTCBpcyByZXN0cmljdGVkIHRvIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlXG4gKiBhcHBsaWNhdGlvbiBkb2N1bWVudC4gVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rICRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gKiAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gaXQuIFRvIGxvYWQgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBvciBwcm90b2NvbHNcbiAqIHlvdSBtYXkgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3QgdGhlbX0gb3JcbiAqIHtAbGluayAkc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIHRoZW19IGFzIHRydXN0ZWQgdmFsdWVzLiBSZWZlciB0byBBbmd1bGFyJ3Mge0BsaW5rXG4gKiBuZy4kc2NlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nfS5cbiAqXG4gKiBJbiBhZGRpdGlvbiwgdGhlIGJyb3dzZXInc1xuICogW1NhbWUgT3JpZ2luIFBvbGljeV0oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdClcbiAqIGFuZCBbQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpXShodHRwOi8vd3d3LnczLm9yZy9UUi9jb3JzLylcbiAqIHBvbGljeSBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkLlxuICogRm9yIGV4YW1wbGUsIGBuZ0luY2x1ZGVgIHdvbid0IHdvcmsgZm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cyBvbiBhbGwgYnJvd3NlcnMgYW5kIGZvciBgZmlsZTovL2BcbiAqIGFjY2VzcyBvbiBzb21lIGJyb3dzZXJzLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGFuaW1hdGlvbiBpcyB1c2VkIHRvIGJyaW5nIG5ldyBjb250ZW50IGludG8gdGhlIGJyb3dzZXIuXG4gKiBsZWF2ZSAtIGFuaW1hdGlvbiBpcyB1c2VkIHRvIGFuaW1hdGUgZXhpc3RpbmcgY29udGVudCBhd2F5LlxuICpcbiAqIFRoZSBlbnRlciBhbmQgbGVhdmUgYW5pbWF0aW9uIG9jY3VyIGNvbmN1cnJlbnRseS5cbiAqXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA0MDBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdJbmNsdWRlfHNyYyBhbmd1bGFyIGV4cHJlc3Npb24gZXZhbHVhdGluZyB0byBVUkwuIElmIHRoZSBzb3VyY2UgaXMgYSBzdHJpbmcgY29uc3RhbnQsXG4gKiAgICAgICAgICAgICAgICAgbWFrZSBzdXJlIHlvdSB3cmFwIGl0IGluICoqc2luZ2xlKiogcXVvdGVzLCBlLmcuIGBzcmM9XCInbXlQYXJ0aWFsVGVtcGxhdGUuaHRtbCdcImAuXG4gKiBAcGFyYW0ge3N0cmluZz19IG9ubG9hZCBFeHByZXNzaW9uIHRvIGV2YWx1YXRlIHdoZW4gYSBuZXcgcGFydGlhbCBpcyBsb2FkZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBhdXRvc2Nyb2xsIFdoZXRoZXIgYG5nSW5jbHVkZWAgc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRhbmNob3JTY3JvbGxcbiAqICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbH0gdG8gc2Nyb2xsIHRoZSB2aWV3cG9ydCBhZnRlciB0aGUgY29udGVudCBpcyBsb2FkZWQuXG4gKlxuICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgbm90IHNldCwgZGlzYWJsZSBzY3JvbGxpbmcuXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgd2l0aG91dCB2YWx1ZSwgZW5hYmxlIHNjcm9sbGluZy5cbiAqICAgICAgICAgICAgICAgICAgLSBPdGhlcndpc2UgZW5hYmxlIHNjcm9sbGluZyBvbmx5IGlmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnV0aHkgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwiaW5jbHVkZUV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJ0ZW1wbGF0ZVwiIG5nLW9wdGlvbnM9XCJ0Lm5hbWUgZm9yIHQgaW4gdGVtcGxhdGVzXCI+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4oYmxhbmspPC9vcHRpb24+XG4gICAgICAgPC9zZWxlY3Q+XG4gICAgICAgdXJsIG9mIHRoZSB0ZW1wbGF0ZTogPHR0Pnt7dGVtcGxhdGUudXJsfX08L3R0PlxuICAgICAgIDxoci8+XG4gICAgICAgPGRpdiBjbGFzcz1cInNsaWRlLWFuaW1hdGUtY29udGFpbmVyXCI+XG4gICAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZVwiIG5nLWluY2x1ZGU9XCJ0ZW1wbGF0ZS51cmxcIj48L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbmNsdWRlRXhhbXBsZScsIFsnbmdBbmltYXRlJ10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLnRlbXBsYXRlcyA9XG4gICAgICAgICAgICBbIHsgbmFtZTogJ3RlbXBsYXRlMS5odG1sJywgdXJsOiAndGVtcGxhdGUxLmh0bWwnfSxcbiAgICAgICAgICAgICAgeyBuYW1lOiAndGVtcGxhdGUyLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTIuaHRtbCd9IF07XG4gICAgICAgICAgJHNjb3BlLnRlbXBsYXRlID0gJHNjb3BlLnRlbXBsYXRlc1swXTtcbiAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMS5odG1sXCI+XG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMS5odG1sXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJ0ZW1wbGF0ZTIuaHRtbFwiPlxuICAgICAgQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbFxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5zbGlkZS1hbmltYXRlLWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBoZWlnaHQ6NDBweDtcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZSB7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIsIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHtcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcblxuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgdG9wOjA7XG4gICAgICAgIGxlZnQ6MDtcbiAgICAgICAgcmlnaHQ6MDtcbiAgICAgICAgYm90dG9tOjA7XG4gICAgICAgIGRpc3BsYXk6YmxvY2s7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIge1xuICAgICAgICB0b3A6LTUwcHg7XG4gICAgICB9XG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICB0b3A6MDtcbiAgICAgIH1cblxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUge1xuICAgICAgICB0b3A6MDtcbiAgICAgIH1cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gICAgICAgIHRvcDo1MHB4O1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdGVtcGxhdGVTZWxlY3QgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZW1wbGF0ZScpKTtcbiAgICAgIHZhciBpbmNsdWRlRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCdbbmctaW5jbHVkZV0nKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZTEuaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMS5odG1sLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMi5odG1sJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdmaXJlZm94Jykge1xuICAgICAgICAgIC8vIEZpcmVmb3ggY2FuJ3QgaGFuZGxlIHVzaW5nIHNlbGVjdHNcbiAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNDgwXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmNsaWNrKCk7XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMikuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbC8pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGJsYW5rJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdmaXJlZm94Jykge1xuICAgICAgICAgIC8vIEZpcmVmb3ggY2FuJ3QgaGFuZGxlIHVzaW5nIHNlbGVjdHNcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgwKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uaXNQcmVzZW50KCkpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZFxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBzY29wZSBuZ0luY2x1ZGUgd2FzIGRlY2xhcmVkIGluXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50TG9hZGVkXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIGN1cnJlbnQgbmdJbmNsdWRlIHNjb3BlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVsb2FkZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRFcnJvclxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBzY29wZSBuZ0luY2x1ZGUgd2FzIGRlY2xhcmVkIGluXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgd2hlbiBhIHRlbXBsYXRlIEhUVFAgcmVxdWVzdCB5aWVsZHMgYW4gZXJyb25vdXMgcmVzcG9uc2UgKHN0YXR1cyA8IDIwMCB8fCBzdGF0dXMgPiAyOTkpXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG52YXIgbmdJbmNsdWRlRGlyZWN0aXZlID0gWyckdGVtcGxhdGVSZXF1ZXN0JywgJyRhbmNob3JTY3JvbGwnLCAnJGFuaW1hdGUnLCAnJHNjZScsXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbigkdGVtcGxhdGVSZXF1ZXN0LCAgICRhbmNob3JTY3JvbGwsICAgJGFuaW1hdGUsICAgJHNjZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICBwcmlvcml0eTogNDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBjb250cm9sbGVyOiBhbmd1bGFyLm5vb3AsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIHNyY0V4cCA9IGF0dHIubmdJbmNsdWRlIHx8IGF0dHIuc3JjLFxuICAgICAgICAgIG9ubG9hZEV4cCA9IGF0dHIub25sb2FkIHx8ICcnLFxuICAgICAgICAgIGF1dG9TY3JvbGxFeHAgPSBhdHRyLmF1dG9zY3JvbGw7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgY2hhbmdlQ291bnRlciA9IDAsXG4gICAgICAgICAgICBjdXJyZW50U2NvcGUsXG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQsXG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudDtcblxuICAgICAgICB2YXIgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShjdXJyZW50RWxlbWVudCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gY3VycmVudEVsZW1lbnQ7XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNSZXNvdXJjZVVybChzcmNFeHApLCBmdW5jdGlvbiBuZ0luY2x1ZGVXYXRjaEFjdGlvbihzcmMpIHtcbiAgICAgICAgICB2YXIgYWZ0ZXJBbmltYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQoYXV0b1Njcm9sbEV4cCkgJiYgKCFhdXRvU2Nyb2xsRXhwIHx8IHNjb3BlLiRldmFsKGF1dG9TY3JvbGxFeHApKSkge1xuICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyO1xuXG4gICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgLy9zZXQgdGhlIDJuZCBwYXJhbSB0byB0cnVlIHRvIGlnbm9yZSB0aGUgdGVtcGxhdGUgcmVxdWVzdCBlcnJvciBzbyB0aGF0IHRoZSBpbm5lclxuICAgICAgICAgICAgLy9jb250ZW50cyBhbmQgc2NvcGUgY2FuIGJlIGNsZWFuZWQgdXAuXG4gICAgICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHNyYywgdHJ1ZSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSByZXR1cm47XG4gICAgICAgICAgICAgIHZhciBuZXdTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHNvIGxpbmsgYWxsIGNoaWxkcmVuIG9mIG5nLWluY2x1ZGUgdGhhdCB3ZXJlIGNvbnRhaW5lZCBpbiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgLy8gaHRtbC4gSWYgdGhhdCBjb250ZW50IGNvbnRhaW5zIGNvbnRyb2xsZXJzLCAuLi4gdGhleSBjb3VsZCBwb2xsdXRlL2NoYW5nZSB0aGUgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHVzaW5nIG5nLWluY2x1ZGUgb24gYW4gZWxlbWVudCB3aXRoIGFkZGl0aW9uYWwgY29udGVudCBkb2VzIG5vdCBtYWtlIHNlbnNlLi4uXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFdlIGNhbid0IHJlbW92ZSB0aGVtIGluIHRoZSBjbG9uZUF0dGNoRm4gb2YgJHRyYW5zY2x1ZGUgYXMgdGhhdFxuICAgICAgICAgICAgICAvLyBmdW5jdGlvbiBpcyBjYWxsZWQgYmVmb3JlIGxpbmtpbmcgdGhlIGNvbnRlbnQsIHdoaWNoIHdvdWxkIGFwcGx5IGNoaWxkXG4gICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMgdG8gbm9uIGV4aXN0aW5nIGVsZW1lbnRzLlxuICAgICAgICAgICAgICB2YXIgY2xvbmUgPSAkdHJhbnNjbHVkZShuZXdTY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsICRlbGVtZW50KS50aGVuKGFmdGVyQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY2xvbmU7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBzcmMpO1xuICAgICAgICAgICAgICBzY29wZS4kZXZhbChvbmxvYWRFeHApO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudEVycm9yJywgc3JjKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkJywgc3JjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8vIFRoaXMgZGlyZWN0aXZlIGlzIGNhbGxlZCBkdXJpbmcgdGhlICR0cmFuc2NsdWRlIGNhbGwgb2YgdGhlIGZpcnN0IGBuZ0luY2x1ZGVgIGRpcmVjdGl2ZS5cbi8vIEl0IHdpbGwgcmVwbGFjZSBhbmQgY29tcGlsZSB0aGUgY29udGVudCBvZiB0aGUgZWxlbWVudCB3aXRoIHRoZSBsb2FkZWQgdGVtcGxhdGUuXG4vLyBXZSBuZWVkIHRoaXMgZGlyZWN0aXZlIHNvIHRoYXQgdGhlIGVsZW1lbnQgY29udGVudCBpcyBhbHJlYWR5IGZpbGxlZCB3aGVuXG4vLyB0aGUgbGluayBmdW5jdGlvbiBvZiBhbm90aGVyIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIG5nSW5jbHVkZVxuLy8gaXMgY2FsbGVkLlxudmFyIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlID0gWyckY29tcGlsZScsXG4gIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICAgIHByaW9yaXR5OiAtNDAwLFxuICAgICAgcmVxdWlyZTogJ25nSW5jbHVkZScsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsKSB7XG4gICAgICAgIGlmICgvU1ZHLy50ZXN0KCRlbGVtZW50WzBdLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgLy8gV2ViS2l0OiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM1Njk4IC0tLSBTVkcgZWxlbWVudHMgZG8gbm90XG4gICAgICAgICAgLy8gc3VwcG9ydCBpbm5lckhUTUwsIHNvIGRldGVjdCB0aGlzIGhlcmUgYW5kIHRyeSB0byBnZW5lcmF0ZSB0aGUgY29udGVudHNcbiAgICAgICAgICAvLyBzcGVjaWFsbHkuXG4gICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgICAkY29tcGlsZShqcUxpdGVCdWlsZEZyYWdtZW50KGN0cmwudGVtcGxhdGUsIGRvY3VtZW50KS5jaGlsZE5vZGVzKShzY29wZSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gbmFtZXNwYWNlQWRhcHRlZENsb25lKGNsb25lKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgIH0sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAkZWxlbWVudCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVsZW1lbnQuaHRtbChjdHJsLnRlbXBsYXRlKTtcbiAgICAgICAgJGNvbXBpbGUoJGVsZW1lbnQuY29udGVudHMoKSkoc2NvcGUpO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSW5pdFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nSW5pdGAgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gZXZhbHVhdGUgYW4gZXhwcmVzc2lvbiBpbiB0aGVcbiAqIGN1cnJlbnQgc2NvcGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWVycm9yXCI+XG4gKiBUaGUgb25seSBhcHByb3ByaWF0ZSB1c2Ugb2YgYG5nSW5pdGAgaXMgZm9yIGFsaWFzaW5nIHNwZWNpYWwgcHJvcGVydGllcyBvZlxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2VlbiBpbiB0aGUgZGVtbyBiZWxvdy4gQmVzaWRlcyB0aGlzIGNhc2UsIHlvdVxuICogc2hvdWxkIHVzZSB7QGxpbmsgZ3VpZGUvY29udHJvbGxlciBjb250cm9sbGVyc30gcmF0aGVyIHRoYW4gYG5nSW5pdGBcbiAqIHRvIGluaXRpYWxpemUgdmFsdWVzIG9uIGEgc2NvcGUuXG4gKiA8L2Rpdj5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogSWYgeW91IGhhdmUgYXNzaWdubWVudCBpbiBgbmdJbml0YCBhbG9uZyB3aXRoIHtAbGluayBuZy4kZmlsdGVyIGAkZmlsdGVyYH0sIG1ha2VcbiAqIHN1cmUgeW91IGhhdmUgcGFyZW50aGVzaXMgZm9yIGNvcnJlY3QgcHJlY2VkZW5jZTpcbiAqIDxwcmUgY2xhc3M9XCJwcmV0dHlwcmludFwiPlxuICogICA8ZGl2IG5nLWluaXQ9XCJ0ZXN0MSA9IChkYXRhIHwgb3JkZXJCeTonbmFtZScpXCI+PC9kaXY+XG4gKiA8L3ByZT5cbiAqIDwvZGl2PlxuICpcbiAqIEBwcmlvcml0eSA0NTBcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJbml0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImluaXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8c2NyaXB0PlxuICAgICBhbmd1bGFyLm1vZHVsZSgnaW5pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgJHNjb3BlLmxpc3QgPSBbWydhJywgJ2InXSwgWydjJywgJ2QnXV07XG4gICAgICAgfV0pO1xuICAgPC9zY3JpcHQ+XG4gICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICA8ZGl2IG5nLXJlcGVhdD1cImlubmVyTGlzdCBpbiBsaXN0XCIgbmctaW5pdD1cIm91dGVySW5kZXggPSAkaW5kZXhcIj5cbiAgICAgICA8ZGl2IG5nLXJlcGVhdD1cInZhbHVlIGluIGlubmVyTGlzdFwiIG5nLWluaXQ9XCJpbm5lckluZGV4ID0gJGluZGV4XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJleGFtcGxlLWluaXRcIj5saXN0WyB7e291dGVySW5kZXh9fSBdWyB7e2lubmVySW5kZXh9fSBdID0ge3t2YWx1ZX19Ozwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBhbGlhcyBpbmRleCBwb3NpdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBlbGVtZW50cyA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnLmV4YW1wbGUtaW5pdCcpKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMCkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAwIF1bIDAgXSA9IGE7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAxIF0gPSBiOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgyKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDEgXVsgMCBdID0gYzsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMykuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAxIF1bIDEgXSA9IGQ7Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nSW5pdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgcHJpb3JpdHk6IDQ1MCxcbiAgY29tcGlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdOb25CaW5kYWJsZVxuICogQHJlc3RyaWN0IEFDXG4gKiBAcHJpb3JpdHkgMTAwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ05vbkJpbmRhYmxlYCBkaXJlY3RpdmUgdGVsbHMgQW5ndWxhciBub3QgdG8gY29tcGlsZSBvciBiaW5kIHRoZSBjb250ZW50cyBvZiB0aGUgY3VycmVudFxuICogRE9NIGVsZW1lbnQuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSBlbGVtZW50IGNvbnRhaW5zIHdoYXQgYXBwZWFycyB0byBiZSBBbmd1bGFyIGRpcmVjdGl2ZXMgYW5kXG4gKiBiaW5kaW5ncyBidXQgd2hpY2ggc2hvdWxkIGJlIGlnbm9yZWQgYnkgQW5ndWxhci4gVGhpcyBjb3VsZCBiZSB0aGUgY2FzZSBpZiB5b3UgaGF2ZSBhIHNpdGUgdGhhdFxuICogZGlzcGxheXMgc25pcHBldHMgb2YgY29kZSwgZm9yIGluc3RhbmNlLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICpcbiAqIEBleGFtcGxlXG4gKiBJbiB0aGlzIGV4YW1wbGUgdGhlcmUgYXJlIHR3byBsb2NhdGlvbnMgd2hlcmUgYSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiaW5kaW5nIChge3t9fWApIGlzIHByZXNlbnQsXG4gKiBidXQgdGhlIG9uZSB3cmFwcGVkIGluIGBuZ05vbkJpbmRhYmxlYCBpcyBsZWZ0IGFsb25lLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2Pk5vcm1hbDoge3sxICsgMn19PC9kaXY+XG4gICAgICAgIDxkaXYgbmctbm9uLWJpbmRhYmxlPklnbm9yZWQ6IHt7MSArIDJ9fTwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctbm9uLWJpbmRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCcxICsgMicpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnZGl2JykpLmxhc3QoKS5nZXRUZXh0KCkpLnRvTWF0Y2goLzEgXFwrIDIvKTtcbiAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoeyB0ZXJtaW5hbDogdHJ1ZSwgcHJpb3JpdHk6IDEwMDAgfSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdQbHVyYWxpemVcbiAqIEByZXN0cmljdCBFQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYG5nUGx1cmFsaXplYCBpcyBhIGRpcmVjdGl2ZSB0aGF0IGRpc3BsYXlzIG1lc3NhZ2VzIGFjY29yZGluZyB0byBlbi1VUyBsb2NhbGl6YXRpb24gcnVsZXMuXG4gKiBUaGVzZSBydWxlcyBhcmUgYnVuZGxlZCB3aXRoIGFuZ3VsYXIuanMsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlblxuICogKHNlZSB7QGxpbmsgZ3VpZGUvaTE4biBBbmd1bGFyIGkxOG59IGRldiBndWlkZSkuIFlvdSBjb25maWd1cmUgbmdQbHVyYWxpemUgZGlyZWN0aXZlXG4gKiBieSBzcGVjaWZ5aW5nIHRoZSBtYXBwaW5ncyBiZXR3ZWVuXG4gKiBbcGx1cmFsIGNhdGVnb3JpZXNdKGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcy9jbGRyLXRtcC90cnVuay9kaWZmL3N1cHBsZW1lbnRhbC9sYW5ndWFnZV9wbHVyYWxfcnVsZXMuaHRtbClcbiAqIGFuZCB0aGUgc3RyaW5ncyB0byBiZSBkaXNwbGF5ZWQuXG4gKlxuICogIyBQbHVyYWwgY2F0ZWdvcmllcyBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzXG4gKiBUaGVyZSBhcmUgdHdvXG4gKiBbcGx1cmFsIGNhdGVnb3JpZXNdKGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcy9jbGRyLXRtcC90cnVuay9kaWZmL3N1cHBsZW1lbnRhbC9sYW5ndWFnZV9wbHVyYWxfcnVsZXMuaHRtbClcbiAqIGluIEFuZ3VsYXIncyBkZWZhdWx0IGVuLVVTIGxvY2FsZTogXCJvbmVcIiBhbmQgXCJvdGhlclwiLlxuICpcbiAqIFdoaWxlIGEgcGx1cmFsIGNhdGVnb3J5IG1heSBtYXRjaCBtYW55IG51bWJlcnMgKGZvciBleGFtcGxlLCBpbiBlbi1VUyBsb2NhbGUsIFwib3RoZXJcIiBjYW4gbWF0Y2hcbiAqIGFueSBudW1iZXIgdGhhdCBpcyBub3QgMSksIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGNhbiBvbmx5IG1hdGNoIG9uZSBudW1iZXIuIEZvciBleGFtcGxlLCB0aGVcbiAqIGV4cGxpY2l0IG51bWJlciBydWxlIGZvciBcIjNcIiBtYXRjaGVzIHRoZSBudW1iZXIgMy4gVGhlcmUgYXJlIGV4YW1wbGVzIG9mIHBsdXJhbCBjYXRlZ29yaWVzXG4gKiBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhpcyBkb2N1bWVudGF0aW9uLlxuICpcbiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemVcbiAqIFlvdSBjb25maWd1cmUgbmdQbHVyYWxpemUgYnkgcHJvdmlkaW5nIDIgYXR0cmlidXRlczogYGNvdW50YCBhbmQgYHdoZW5gLlxuICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgYXR0cmlidXRlLCBgb2Zmc2V0YC5cbiAqXG4gKiBUaGUgdmFsdWUgb2YgdGhlIGBjb3VudGAgYXR0cmlidXRlIGNhbiBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb25cbiAqIEFuZ3VsYXIgZXhwcmVzc2lvbn07IHRoZXNlIGFyZSBldmFsdWF0ZWQgb24gdGhlIGN1cnJlbnQgc2NvcGUgZm9yIGl0cyBib3VuZCB2YWx1ZS5cbiAqXG4gKiBUaGUgYHdoZW5gIGF0dHJpYnV0ZSBzcGVjaWZpZXMgdGhlIG1hcHBpbmdzIGJldHdlZW4gcGx1cmFsIGNhdGVnb3JpZXMgYW5kIHRoZSBhY3R1YWxcbiAqIHN0cmluZyB0byBiZSBkaXNwbGF5ZWQuIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIHNob3VsZCBiZSBhIEpTT04gb2JqZWN0LlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gY29uZmlndXJlIG5nUGx1cmFsaXplOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiXG4gICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICogPC9uZy1wbHVyYWxpemU+XG4gKmBgYFxuICpcbiAqIEluIHRoZSBleGFtcGxlLCBgXCIwOiBOb2JvZHkgaXMgdmlld2luZy5cImAgaXMgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUuIElmIHlvdSBkaWQgbm90XG4gKiBzcGVjaWZ5IHRoaXMgcnVsZSwgMCB3b3VsZCBiZSBtYXRjaGVkIHRvIHRoZSBcIm90aGVyXCIgY2F0ZWdvcnkgYW5kIFwiMCBwZW9wbGUgYXJlIHZpZXdpbmdcIlxuICogd291bGQgYmUgc2hvd24gaW5zdGVhZCBvZiBcIk5vYm9keSBpcyB2aWV3aW5nXCIuIFlvdSBjYW4gc3BlY2lmeSBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3JcbiAqIG90aGVyIG51bWJlcnMsIGZvciBleGFtcGxlIDEyLCBzbyB0aGF0IGluc3RlYWQgb2Ygc2hvd2luZyBcIjEyIHBlb3BsZSBhcmUgdmlld2luZ1wiLCB5b3UgY2FuXG4gKiBzaG93IFwiYSBkb3plbiBwZW9wbGUgYXJlIHZpZXdpbmdcIi5cbiAqXG4gKiBZb3UgY2FuIHVzZSBhIHNldCBvZiBjbG9zZWQgYnJhY2VzIChge31gKSBhcyBhIHBsYWNlaG9sZGVyIGZvciB0aGUgbnVtYmVyIHRoYXQgeW91IHdhbnQgc3Vic3RpdHV0ZWRcbiAqIGludG8gcGx1cmFsaXplZCBzdHJpbmdzLiBJbiB0aGUgcHJldmlvdXMgZXhhbXBsZSwgQW5ndWxhciB3aWxsIHJlcGxhY2UgYHt9YCB3aXRoXG4gKiA8c3BhbiBuZy1ub24tYmluZGFibGU+YHt7cGVyc29uQ291bnR9fWA8L3NwYW4+LiBUaGUgY2xvc2VkIGJyYWNlcyBge31gIGlzIGEgcGxhY2Vob2xkZXJcbiAqIGZvciA8c3BhbiBuZy1ub24tYmluZGFibGU+e3tudW1iZXJFeHByZXNzaW9ufX08L3NwYW4+LlxuICpcbiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemUgd2l0aCBvZmZzZXRcbiAqIFRoZSBgb2Zmc2V0YCBhdHRyaWJ1dGUgYWxsb3dzIGZ1cnRoZXIgY3VzdG9taXphdGlvbiBvZiBwbHVyYWxpemVkIHRleHQsIHdoaWNoIGNhbiByZXN1bHQgaW5cbiAqIGEgYmV0dGVyIHVzZXIgZXhwZXJpZW5jZS4gRm9yIGV4YW1wbGUsIGluc3RlYWQgb2YgdGhlIG1lc3NhZ2UgXCI0IHBlb3BsZSBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIsXG4gKiB5b3UgbWlnaHQgZGlzcGxheSBcIkpvaG4sIEthdGUgYW5kIDIgb3RoZXJzIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnRcIi5cbiAqIFRoZSBvZmZzZXQgYXR0cmlidXRlIGFsbG93cyB5b3UgdG8gb2Zmc2V0IGEgbnVtYmVyIGJ5IGFueSBkZXNpcmVkIHZhbHVlLlxuICogTGV0J3MgdGFrZSBhIGxvb2sgYXQgYW4gZXhhbXBsZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIiBvZmZzZXQ9MlxuICogICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkXG4gKiB0aHJlZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgMCwgMSBhbmQgMi5cbiAqIFdoZW4gb25lIHBlcnNvbiwgcGVyaGFwcyBKb2huLCB2aWV3cyB0aGUgZG9jdW1lbnQsIFwiSm9obiBpcyB2aWV3aW5nXCIgd2lsbCBiZSBzaG93bi5cbiAqIFdoZW4gdGhyZWUgcGVvcGxlIHZpZXcgdGhlIGRvY3VtZW50LCBubyBleHBsaWNpdCBudW1iZXIgcnVsZSBpcyBmb3VuZCwgc29cbiAqIGFuIG9mZnNldCBvZiAyIGlzIHRha2VuIG9mZiAzLCBhbmQgQW5ndWxhciB1c2VzIDEgdG8gZGVjaWRlIHRoZSBwbHVyYWwgY2F0ZWdvcnkuXG4gKiBJbiB0aGlzIGNhc2UsIHBsdXJhbCBjYXRlZ29yeSAnb25lJyBpcyBtYXRjaGVkIGFuZCBcIkpvaG4sIE1hcnkgYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmdcIlxuICogaXMgc2hvd24uXG4gKlxuICogTm90ZSB0aGF0IHdoZW4geW91IHNwZWNpZnkgb2Zmc2V0cywgeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yXG4gKiBudW1iZXJzIGZyb20gMCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBvZmZzZXQuIElmIHlvdSB1c2UgYW4gb2Zmc2V0IG9mIDMsIGZvciBleGFtcGxlLFxuICogeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yIDAsIDEsIDIgYW5kIDMuIFlvdSBtdXN0IGFsc28gcHJvdmlkZSBwbHVyYWwgc3RyaW5ncyBmb3JcbiAqIHBsdXJhbCBjYXRlZ29yaWVzIFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xleHByZXNzaW9ufSBjb3VudCBUaGUgdmFyaWFibGUgdG8gYmUgYm91bmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gd2hlbiBUaGUgbWFwcGluZyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yeSB0byBpdHMgY29ycmVzcG9uZGluZyBzdHJpbmdzLlxuICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGRlZHVjdCBmcm9tIHRoZSB0b3RhbCBudW1iZXIuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJwbHVyYWxpemVFeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdwbHVyYWxpemVFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uMSA9ICdJZ29yJztcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjIgPSAnTWlza28nO1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uQ291bnQgPSAxO1xuICAgICAgICAgICAgfV0pO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICBQZXJzb24gMTo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbjFcIiB2YWx1ZT1cIklnb3JcIiAvPjxici8+XG4gICAgICAgICAgUGVyc29uIDI6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb24yXCIgdmFsdWU9XCJNaXNrb1wiIC8+PGJyLz5cbiAgICAgICAgICBOdW1iZXIgb2YgUGVvcGxlOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uQ291bnRcIiB2YWx1ZT1cIjFcIiAvPjxici8+XG5cbiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggc2ltcGxlIHBsdXJhbGl6YXRpb24gcnVsZXMgZm9yIGVuIGxvY2FsZSAtLS0+XG4gICAgICAgICAgV2l0aG91dCBPZmZzZXQ6XG4gICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAgICAgICAgPC9uZy1wbHVyYWxpemU+PGJyPlxuXG4gICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIG9mZnNldCAtLS0+XG4gICAgICAgICAgV2l0aCBPZmZzZXQoMik6XG4gICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCIgb2Zmc2V0PTJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAgICAgICAgICA8L25nLXBsdXJhbGl6ZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2hvdyBjb3JyZWN0IHBsdXJhbGl6ZWQgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdpdGhvdXRPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMCk7XG4gICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7XG4gICAgICAgICAgdmFyIGNvdW50SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb25Db3VudCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMSBwZXJzb24gaXMgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IgaXMgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCcwJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMicpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCcyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IgYW5kIE1pc2tvIGFyZSB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzMnKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMyBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yLCBNaXNrbyBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCc0Jyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzQgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciwgTWlza28gYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGRhdGEtYm91bmQgbmFtZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgd2l0aE9mZnNldCA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnbmctcGx1cmFsaXplJykpLmdldCgxKTtcbiAgICAgICAgICB2YXIgcGVyc29uQ291bnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb25Db3VudCcpKTtcbiAgICAgICAgICB2YXIgcGVyc29uMSA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjEnKSk7XG4gICAgICAgICAgdmFyIHBlcnNvbjIgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb24yJykpO1xuICAgICAgICAgIHBlcnNvbkNvdW50LmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uQ291bnQuc2VuZEtleXMoJzQnKTtcbiAgICAgICAgICBwZXJzb24xLmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uMS5zZW5kS2V5cygnRGknKTtcbiAgICAgICAgICBwZXJzb24yLmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uMi5zZW5kS2V5cygnVm9qdGEnKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0RpLCBWb2p0YSBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nUGx1cmFsaXplRGlyZWN0aXZlID0gWyckbG9jYWxlJywgJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRsb2NhbGUsICRpbnRlcnBvbGF0ZSkge1xuICB2YXIgQlJBQ0UgPSAve30vZztcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIG51bWJlckV4cCA9IGF0dHIuY291bnQsXG4gICAgICAgICAgd2hlbkV4cCA9IGF0dHIuJGF0dHIud2hlbiAmJiBlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci53aGVuKSwgLy8gd2UgaGF2ZSB7e319IGluIGF0dHJzXG4gICAgICAgICAgb2Zmc2V0ID0gYXR0ci5vZmZzZXQgfHwgMCxcbiAgICAgICAgICB3aGVucyA9IHNjb3BlLiRldmFsKHdoZW5FeHApIHx8IHt9LFxuICAgICAgICAgIHdoZW5zRXhwRm5zID0ge30sXG4gICAgICAgICAgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksXG4gICAgICAgICAgaXNXaGVuID0gL153aGVuKE1pbnVzKT8oLispJC87XG5cbiAgICAgIGZvckVhY2goYXR0ciwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgYXR0cmlidXRlTmFtZSkge1xuICAgICAgICBpZiAoaXNXaGVuLnRlc3QoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgICB3aGVuc1tsb3dlcmNhc2UoYXR0cmlidXRlTmFtZS5yZXBsYWNlKCd3aGVuJywgJycpLnJlcGxhY2UoJ01pbnVzJywgJy0nKSldID1cbiAgICAgICAgICAgIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyW2F0dHJpYnV0ZU5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbihleHByZXNzaW9uLCBrZXkpIHtcbiAgICAgICAgd2hlbnNFeHBGbnNba2V5XSA9XG4gICAgICAgICAgJGludGVycG9sYXRlKGV4cHJlc3Npb24ucmVwbGFjZShCUkFDRSwgc3RhcnRTeW1ib2wgKyBudW1iZXJFeHAgKyAnLScgK1xuICAgICAgICAgICAgb2Zmc2V0ICsgZW5kU3ltYm9sKSk7XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2goKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlRmxvYXQoc2NvcGUuJGV2YWwobnVtYmVyRXhwKSk7XG5cbiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAvL2lmIGV4cGxpY2l0IG51bWJlciBydWxlIHN1Y2ggYXMgMSwgMiwgMy4uLiBpcyBkZWZpbmVkLCBqdXN0IHVzZSBpdC4gT3RoZXJ3aXNlLFxuICAgICAgICAgIC8vY2hlY2sgaXQgYWdhaW5zdCBwbHVyYWxpemF0aW9uIHJ1bGVzIGluICRsb2NhbGUgc2VydmljZVxuICAgICAgICAgIGlmICghKHZhbHVlIGluIHdoZW5zKSkgdmFsdWUgPSAkbG9jYWxlLnBsdXJhbENhdCh2YWx1ZSAtIG9mZnNldCk7XG4gICAgICAgICAgIHJldHVybiB3aGVuc0V4cEZuc1t2YWx1ZV0oc2NvcGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgfSwgZnVuY3Rpb24gbmdQbHVyYWxpemVXYXRjaEFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgZWxlbWVudC50ZXh0KG5ld1ZhbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlcGVhdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlIGluc3RhbnRpYXRlcyBhIHRlbXBsYXRlIG9uY2UgcGVyIGl0ZW0gZnJvbSBhIGNvbGxlY3Rpb24uIEVhY2ggdGVtcGxhdGVcbiAqIGluc3RhbmNlIGdldHMgaXRzIG93biBzY29wZSwgd2hlcmUgdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gaXRlbSxcbiAqIGFuZCBgJGluZGV4YCBpcyBzZXQgdG8gdGhlIGl0ZW0gaW5kZXggb3Iga2V5LlxuICpcbiAqIFNwZWNpYWwgcHJvcGVydGllcyBhcmUgZXhwb3NlZCBvbiB0aGUgbG9jYWwgc2NvcGUgb2YgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSwgaW5jbHVkaW5nOlxuICpcbiAqIHwgVmFyaWFibGUgIHwgVHlwZSAgICAgICAgICAgIHwgRGV0YWlscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgYCRpbmRleGAgIHwge0B0eXBlIG51bWJlcn0gIHwgaXRlcmF0b3Igb2Zmc2V0IG9mIHRoZSByZXBlYXRlZCBlbGVtZW50ICgwLi5sZW5ndGgtMSkgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRmaXJzdGAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBmaXJzdCBpbiB0aGUgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRtaWRkbGVgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBpbiB0aGUgaXRlcmF0b3IuIHxcbiAqIHwgYCRsYXN0YCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBsYXN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRldmVuYCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgZXZlbiAob3RoZXJ3aXNlIGZhbHNlKS4gICAgICAgICAgIHxcbiAqIHwgYCRvZGRgICAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgb2RkIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgIHxcbiAqXG4gKiBDcmVhdGluZyBhbGlhc2VzIGZvciB0aGVzZSBwcm9wZXJ0aWVzIGlzIHBvc3NpYmxlIHdpdGgge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luaXQgYG5nSW5pdGB9LlxuICogVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4sIGZvciBpbnN0YW5jZSwgbmVzdGluZyBuZ1JlcGVhdHMuXG4gKlxuICogIyBTcGVjaWFsIHJlcGVhdCBzdGFydCBhbmQgZW5kIHBvaW50c1xuICogVG8gcmVwZWF0IGEgc2VyaWVzIG9mIGVsZW1lbnRzIGluc3RlYWQgb2YganVzdCBvbmUgcGFyZW50IGVsZW1lbnQsIG5nUmVwZWF0IChhcyB3ZWxsIGFzIG90aGVyIG5nIGRpcmVjdGl2ZXMpIHN1cHBvcnRzIGV4dGVuZGluZ1xuICogdGhlIHJhbmdlIG9mIHRoZSByZXBlYXRlciBieSBkZWZpbmluZyBleHBsaWNpdCBzdGFydCBhbmQgZW5kIHBvaW50cyBieSB1c2luZyAqKm5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nLXJlcGVhdC1lbmQqKiByZXNwZWN0aXZlbHkuXG4gKiBUaGUgKipuZy1yZXBlYXQtc3RhcnQqKiBkaXJlY3RpdmUgd29ya3MgdGhlIHNhbWUgYXMgKipuZy1yZXBlYXQqKiwgYnV0IHdpbGwgcmVwZWF0IGFsbCB0aGUgSFRNTCBjb2RlIChpbmNsdWRpbmcgdGhlIHRhZyBpdCdzIGRlZmluZWQgb24pXG4gKiB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBlbmRpbmcgSFRNTCB0YWcgd2hlcmUgKipuZy1yZXBlYXQtZW5kKiogaXMgcGxhY2VkLlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IG1ha2VzIHVzZSBvZiB0aGlzIGZlYXR1cmU6XG4gKiBgYGBodG1sXG4gKiAgIDxoZWFkZXIgbmctcmVwZWF0LXN0YXJ0PVwiaXRlbSBpbiBpdGVtc1wiPlxuICogICAgIEhlYWRlciB7eyBpdGVtIH19XG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkge3sgaXRlbSB9fVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3RlciBuZy1yZXBlYXQtZW5kPlxuICogICAgIEZvb3RlciB7eyBpdGVtIH19XG4gKiAgIDwvZm9vdGVyPlxuICogYGBgXG4gKlxuICogQW5kIHdpdGggYW4gaW5wdXQgb2Yge0B0eXBlIFsnQScsJ0InXX0gZm9yIHRoZSBpdGVtcyB2YXJpYWJsZSBpbiB0aGUgZXhhbXBsZSBhYm92ZSwgdGhlIG91dHB1dCB3aWxsIGV2YWx1YXRlIHRvOlxuICogYGBgaHRtbFxuICogICA8aGVhZGVyPlxuICogICAgIEhlYWRlciBBXG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkgQVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3Rlcj5cbiAqICAgICBGb290ZXIgQVxuICogICA8L2Zvb3Rlcj5cbiAqICAgPGhlYWRlcj5cbiAqICAgICBIZWFkZXIgQlxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IEJcbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXI+XG4gKiAgICAgRm9vdGVyIEJcbiAqICAgPC9mb290ZXI+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY3VzdG9tIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGZvciBuZ1JlcGVhdCBhbHNvIHN1cHBvcnQgYWxsIG90aGVyIEhUTUwgZGlyZWN0aXZlIHN5bnRheCBmbGF2b3JzIHByb3ZpZGVkIGluIEFuZ3VsYXJKUyAoc3VjaFxuICogYXMgKipkYXRhLW5nLXJlcGVhdC1zdGFydCoqLCAqKngtbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmc6cmVwZWF0LXN0YXJ0KiopLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiAqKi5lbnRlcioqIC0gd2hlbiBhIG5ldyBpdGVtIGlzIGFkZGVkIHRvIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyByZXZlYWxlZCBhZnRlciBhIGZpbHRlclxuICpcbiAqICoqLmxlYXZlKiogLSB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyBmaWx0ZXJlZCBvdXRcbiAqXG4gKiAqKi5tb3ZlKiogLSB3aGVuIGFuIGFkamFjZW50IGl0ZW0gaXMgZmlsdGVyZWQgb3V0IGNhdXNpbmcgYSByZW9yZGVyIG9yIHdoZW4gdGhlIGl0ZW0gY29udGVudHMgYXJlIHJlb3JkZXJlZFxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTAwMFxuICogQHBhcmFtIHtyZXBlYXRfZXhwcmVzc2lvbn0gbmdSZXBlYXQgVGhlIGV4cHJlc3Npb24gaW5kaWNhdGluZyBob3cgdG8gZW51bWVyYXRlIGEgY29sbGVjdGlvbi4gVGhlc2VcbiAqICAgZm9ybWF0cyBhcmUgY3VycmVudGx5IHN1cHBvcnRlZDpcbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSB2YXJpYWJsZSBpcyB0aGUgdXNlciBkZWZpbmVkIGxvb3AgdmFyaWFibGUgYW5kIGBleHByZXNzaW9uYFxuICogICAgIGlzIGEgc2NvcGUgZXhwcmVzc2lvbiBnaXZpbmcgdGhlIGNvbGxlY3Rpb24gdG8gZW51bWVyYXRlLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGFsYnVtIGluIGFydGlzdC5hbGJ1bXNgLlxuICpcbiAqICAgKiBgKGtleSwgdmFsdWUpIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycyxcbiAqICAgICBhbmQgYGV4cHJlc3Npb25gIGlzIHRoZSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gdHJhY2sgYnkgdHJhY2tpbmdfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIHRyYWNraW5nIGZ1bmN0aW9uXG4gKiAgICAgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXNzb2NpYXRlIHRoZSBvYmplY3RzIGluIHRoZSBjb2xsZWN0aW9uIHdpdGggdGhlIERPTSBlbGVtZW50cy4gSWYgbm8gdHJhY2tpbmcgZnVuY3Rpb25cbiAqICAgICBpcyBzcGVjaWZpZWQgdGhlIG5nLXJlcGVhdCBhc3NvY2lhdGVzIGVsZW1lbnRzIGJ5IGlkZW50aXR5IGluIHRoZSBjb2xsZWN0aW9uLiBJdCBpcyBhbiBlcnJvciB0byBoYXZlXG4gKiAgICAgbW9yZSB0aGFuIG9uZSB0cmFja2luZyBmdW5jdGlvbiB0byByZXNvbHZlIHRvIHRoZSBzYW1lIGtleS4gKFRoaXMgd291bGQgbWVhbiB0aGF0IHR3byBkaXN0aW5jdCBvYmplY3RzIGFyZVxuICogICAgIG1hcHBlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudCwgd2hpY2ggaXMgbm90IHBvc3NpYmxlLikgIEZpbHRlcnMgc2hvdWxkIGJlIGFwcGxpZWQgdG8gdGhlIGV4cHJlc3Npb24sXG4gKiAgICAgYmVmb3JlIHNwZWNpZnlpbmcgYSB0cmFja2luZyBleHByZXNzaW9uLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXNgIGlzIGVxdWl2YWxlbnQgdG8gYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIERPTSBlbGVtZW50c1xuICogICAgIHdpbGwgYmUgYXNzb2NpYXRlZCBieSBpdGVtIGlkZW50aXR5IGluIHRoZSBhcnJheS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIEEgYnVpbHQgaW4gYCRpZCgpYCBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBhc3NpZ24gYSB1bmlxdWVcbiAqICAgICBgJCRoYXNoS2V5YCBwcm9wZXJ0eSB0byBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LiBUaGlzIHByb3BlcnR5IGlzIHRoZW4gdXNlZCBhcyBhIGtleSB0byBhc3NvY2lhdGVkIERPTSBlbGVtZW50c1xuICogICAgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgaXRlbSBpbiB0aGUgYXJyYXkgYnkgaWRlbnRpdHkuIE1vdmluZyB0aGUgc2FtZSBvYmplY3QgaW4gYXJyYXkgd291bGQgbW92ZSB0aGUgRE9NXG4gKiAgICAgZWxlbWVudCBpbiB0aGUgc2FtZSB3YXkgaW4gdGhlIERPTS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgdHlwaWNhbCBwYXR0ZXJuIHdoZW4gdGhlIGl0ZW1zIGNvbWUgZnJvbSB0aGUgZGF0YWJhc2UuIEluIHRoaXNcbiAqICAgICBjYXNlIHRoZSBvYmplY3QgaWRlbnRpdHkgZG9lcyBub3QgbWF0dGVyLiBUd28gb2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGFzIGxvbmcgYXMgdGhlaXIgYGlkYFxuICogICAgIHByb3BlcnR5IGlzIHNhbWUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjpzZWFyY2hUZXh0IHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgcGF0dGVybiB0aGF0IG1pZ2h0IGJlIHVzZWQgdG8gYXBwbHkgYSBmaWx0ZXJcbiAqICAgICB0byBpdGVtcyBpbiBjb25qdW5jdGlvbiB3aXRoIGEgdHJhY2tpbmcgZXhwcmVzc2lvbi5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gYXMgYWxpYXNfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGFsaWFzIGV4cHJlc3Npb24gd2hpY2ggd2lsbCB0aGVuIHN0b3JlIHRoZVxuICogICAgIGludGVybWVkaWF0ZSByZXN1bHRzIG9mIHRoZSByZXBlYXRlciBhZnRlciB0aGUgZmlsdGVycyBoYXZlIGJlZW4gYXBwbGllZC4gVHlwaWNhbGx5IHRoaXMgaXMgdXNlZCB0byByZW5kZXIgYSBzcGVjaWFsIG1lc3NhZ2VcbiAqICAgICB3aGVuIGEgZmlsdGVyIGlzIGFjdGl2ZSBvbiB0aGUgcmVwZWF0ZXIsIGJ1dCB0aGUgZmlsdGVyZWQgcmVzdWx0IHNldCBpcyBlbXB0eS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHwgZmlsdGVyOnggYXMgcmVzdWx0c2Agd2lsbCBzdG9yZSB0aGUgZnJhZ21lbnQgb2YgdGhlIHJlcGVhdGVkIGl0ZW1zIGFzIGByZXN1bHRzYCwgYnV0IG9ubHkgYWZ0ZXJcbiAqICAgICB0aGUgaXRlbXMgaGF2ZSBiZWVuIHByb2Nlc3NlZCB0aHJvdWdoIHRoZSBmaWx0ZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBpbml0aWFsaXplcyB0aGUgc2NvcGUgdG8gYSBsaXN0IG9mIG5hbWVzIGFuZFxuICogdGhlbiB1c2VzIGBuZ1JlcGVhdGAgdG8gZGlzcGxheSBldmVyeSBwZXJzb246XG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWluaXQ9XCJmcmllbmRzID0gW1xuICAgICAgICB7bmFtZTonSm9obicsIGFnZToyNSwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J0plc3NpZScsIGFnZTozMCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidKb2hhbm5hJywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J0pveScsIGFnZToxNSwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidNYXJ5JywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J1BldGVyJywgYWdlOjk1LCBnZW5kZXI6J2JveSd9LFxuICAgICAgICB7bmFtZTonU2ViYXN0aWFuJywgYWdlOjUwLCBnZW5kZXI6J2JveSd9LFxuICAgICAgICB7bmFtZTonRXJpa2EnLCBhZ2U6MjcsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICB7bmFtZTonUGF0cmljaycsIGFnZTo0MCwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J1NhbWFudGhhJywgYWdlOjYwLCBnZW5kZXI6J2dpcmwnfVxuICAgICAgXVwiPlxuICAgICAgICBJIGhhdmUge3tmcmllbmRzLmxlbmd0aH19IGZyaWVuZHMuIFRoZXkgYXJlOlxuICAgICAgICA8aW5wdXQgdHlwZT1cInNlYXJjaFwiIG5nLW1vZGVsPVwicVwiIHBsYWNlaG9sZGVyPVwiZmlsdGVyIGZyaWVuZHMuLi5cIiAvPlxuICAgICAgICA8dWwgY2xhc3M9XCJleGFtcGxlLWFuaW1hdGUtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGxpIGNsYXNzPVwiYW5pbWF0ZS1yZXBlYXRcIiBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpxIGFzIHJlc3VsdHNcIj5cbiAgICAgICAgICAgIFt7eyRpbmRleCArIDF9fV0ge3tmcmllbmQubmFtZX19IHdobyBpcyB7e2ZyaWVuZC5hZ2V9fSB5ZWFycyBvbGQuXG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICA8bGkgY2xhc3M9XCJhbmltYXRlLXJlcGVhdFwiIG5nLWlmPVwicmVzdWx0cy5sZW5ndGggPT0gMFwiPlxuICAgICAgICAgICAgPHN0cm9uZz5ObyByZXN1bHRzIGZvdW5kLi4uPC9zdHJvbmc+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5leGFtcGxlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgbGlzdC1zdHlsZTpub25lO1xuICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgcGFkZGluZzowIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdCB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OjQwcHg7XG4gICAgICAgIGxpc3Qtc3R5bGU6bm9uZTtcbiAgICAgICAgYm94LXNpemluZzpib3JkZXItYm94O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIge1xuICAgICAgICBvcGFjaXR5OjA7XG4gICAgICAgIG1heC1oZWlnaHQ6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUubmctbW92ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgICBtYXgtaGVpZ2h0OjQwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBmcmllbmRzID0gZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoJ2ZyaWVuZCBpbiBmcmllbmRzJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHJlbmRlciBpbml0aWFsIGRhdGEgc2V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gSm9obiB3aG8gaXMgMjUgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMl0gSmVzc2llIHdobyBpcyAzMCB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxMF0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZnJpZW5kcy5sZW5ndGgnKSkuZ2V0VGV4dCgpKVxuICAgICAgICAgICAgLnRvTWF0Y2goXCJJIGhhdmUgMTAgZnJpZW5kcy4gVGhleSBhcmU6XCIpO1xuICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSByZXBlYXRlciB3aGVuIGZpbHRlciBwcmVkaWNhdGUgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgxMCk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3EnKSkuc2VuZEtleXMoJ21hJyk7XG5cbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMik7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gTWFyeSB3aG8gaXMgMjggeWVhcnMgb2xkLicpO1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMubGFzdCgpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIFNhbWFudGhhIHdobyBpcyA2MCB5ZWFycyBvbGQuJyk7XG4gICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdSZXBlYXREaXJlY3RpdmUgPSBbJyRwYXJzZScsICckYW5pbWF0ZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGFuaW1hdGUpIHtcbiAgdmFyIE5HX1JFTU9WRUQgPSAnJCROR19SRU1PVkVEJztcbiAgdmFyIG5nUmVwZWF0TWluRXJyID0gbWluRXJyKCduZ1JlcGVhdCcpO1xuXG4gIHZhciB1cGRhdGVTY29wZSA9IGZ1bmN0aW9uKHNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBhcnJheUxlbmd0aCkge1xuICAgIC8vIFRPRE8ocGVyZik6IGdlbmVyYXRlIHNldHRlcnMgdG8gc2hhdmUgb2ZmIH40MG1zIG9yIDEtMS41JVxuICAgIHNjb3BlW3ZhbHVlSWRlbnRpZmllcl0gPSB2YWx1ZTtcbiAgICBpZiAoa2V5SWRlbnRpZmllcikgc2NvcGVba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgc2NvcGUuJGluZGV4ID0gaW5kZXg7XG4gICAgc2NvcGUuJGZpcnN0ID0gKGluZGV4ID09PSAwKTtcbiAgICBzY29wZS4kbGFzdCA9IChpbmRleCA9PT0gKGFycmF5TGVuZ3RoIC0gMSkpO1xuICAgIHNjb3BlLiRtaWRkbGUgPSAhKHNjb3BlLiRmaXJzdCB8fCBzY29wZS4kbGFzdCk7XG4gICAgLy8ganNoaW50IGJpdHdpc2U6IGZhbHNlXG4gICAgc2NvcGUuJG9kZCA9ICEoc2NvcGUuJGV2ZW4gPSAoaW5kZXgmMSkgPT09IDApO1xuICAgIC8vIGpzaGludCBiaXR3aXNlOiB0cnVlXG4gIH07XG5cbiAgdmFyIGdldEJsb2NrU3RhcnQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVswXTtcbiAgfTtcblxuICB2YXIgZ2V0QmxvY2tFbmQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVtibG9jay5jbG9uZS5sZW5ndGggLSAxXTtcbiAgfTtcblxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHByaW9yaXR5OiAxMDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nUmVwZWF0Q29tcGlsZSgkZWxlbWVudCwgJGF0dHIpIHtcbiAgICAgIHZhciBleHByZXNzaW9uID0gJGF0dHIubmdSZXBlYXQ7XG4gICAgICB2YXIgbmdSZXBlYXRFbmRDb21tZW50ID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ1JlcGVhdDogJyArIGV4cHJlc3Npb24gKyAnICcpO1xuXG4gICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKC9eXFxzKihbXFxzXFxTXSs/KVxccytpblxccysoW1xcc1xcU10rPykoPzpcXHMrYXNcXHMrKFtcXHNcXFNdKz8pKT8oPzpcXHMrdHJhY2tcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT9cXHMqJC8pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpZXhwJywgXCJFeHBlY3RlZCBleHByZXNzaW9uIGluIGZvcm0gb2YgJ19pdGVtXyBpbiBfY29sbGVjdGlvbl9bIHRyYWNrIGJ5IF9pZF9dJyBidXQgZ290ICd7MH0nLlwiLFxuICAgICAgICAgICAgZXhwcmVzc2lvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBsaHMgPSBtYXRjaFsxXTtcbiAgICAgIHZhciByaHMgPSBtYXRjaFsyXTtcbiAgICAgIHZhciBhbGlhc0FzID0gbWF0Y2hbM107XG4gICAgICB2YXIgdHJhY2tCeUV4cCA9IG1hdGNoWzRdO1xuXG4gICAgICBtYXRjaCA9IGxocy5tYXRjaCgvXig/OihbXFwkXFx3XSspfFxcKChbXFwkXFx3XSspXFxzKixcXHMqKFtcXCRcXHddKylcXCkpJC8pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpaWRleHAnLCBcIidfaXRlbV8nIGluICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fJyBzaG91bGQgYmUgYW4gaWRlbnRpZmllciBvciAnKF9rZXlfLCBfdmFsdWVfKScgZXhwcmVzc2lvbiwgYnV0IGdvdCAnezB9Jy5cIixcbiAgICAgICAgICAgIGxocyk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWVJZGVudGlmaWVyID0gbWF0Y2hbM10gfHwgbWF0Y2hbMV07XG4gICAgICB2YXIga2V5SWRlbnRpZmllciA9IG1hdGNoWzJdO1xuXG4gICAgICBpZiAoYWxpYXNBcyAmJiAoIS9eWyRhLXpBLVpfXVskYS16QS1aMC05X10qJC8udGVzdChhbGlhc0FzKSB8fFxuICAgICAgICAgIC9eKG51bGx8dW5kZWZpbmVkfHRoaXN8XFwkaW5kZXh8XFwkZmlyc3R8XFwkbWlkZGxlfFxcJGxhc3R8XFwkZXZlbnxcXCRvZGR8XFwkcGFyZW50KSQvLnRlc3QoYWxpYXNBcykpKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdiYWRpZGVudCcsIFwiYWxpYXMgJ3swfScgaXMgaW52YWxpZCAtLS0gbXVzdCBiZSBhIHZhbGlkIEpTIGlkZW50aWZpZXIgd2hpY2ggaXMgbm90IGEgcmVzZXJ2ZWQgbmFtZS5cIixcbiAgICAgICAgICBhbGlhc0FzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYWNrQnlFeHBHZXR0ZXIsIHRyYWNrQnlJZEV4cEZuLCB0cmFja0J5SWRBcnJheUZuLCB0cmFja0J5SWRPYmpGbjtcbiAgICAgIHZhciBoYXNoRm5Mb2NhbHMgPSB7JGlkOiBoYXNoS2V5fTtcblxuICAgICAgaWYgKHRyYWNrQnlFeHApIHtcbiAgICAgICAgdHJhY2tCeUV4cEdldHRlciA9ICRwYXJzZSh0cmFja0J5RXhwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYWNrQnlJZEFycmF5Rm4gPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGhhc2hLZXkodmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICB0cmFja0J5SWRPYmpGbiA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1JlcGVhdExpbmsoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG5cbiAgICAgICAgaWYgKHRyYWNrQnlFeHBHZXR0ZXIpIHtcbiAgICAgICAgICB0cmFja0J5SWRFeHBGbiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBhc3NpZ24ga2V5LCB2YWx1ZSwgYW5kICRpbmRleCB0byB0aGUgbG9jYWxzIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCBpbiBoYXNoIGZ1bmN0aW9uc1xuICAgICAgICAgICAgaWYgKGtleUlkZW50aWZpZXIpIGhhc2hGbkxvY2Fsc1trZXlJZGVudGlmaWVyXSA9IGtleTtcbiAgICAgICAgICAgIGhhc2hGbkxvY2Fsc1t2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHMuJGluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2tCeUV4cEdldHRlcigkc2NvcGUsIGhhc2hGbkxvY2Fscyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIGEgbGlzdCBvZiBlbGVtZW50cyBmcm9tIHByZXZpb3VzIHJ1bi4gVGhpcyBpcyBhIGhhc2ggd2hlcmUga2V5IGlzIHRoZSBpdGVtIGZyb20gdGhlXG4gICAgICAgIC8vIGl0ZXJhdG9yLCBhbmQgdGhlIHZhbHVlIGlzIG9iamVjdHMgd2l0aCBmb2xsb3dpbmcgcHJvcGVydGllcy5cbiAgICAgICAgLy8gICAtIHNjb3BlOiBib3VuZCBzY29wZVxuICAgICAgICAvLyAgIC0gZWxlbWVudDogcHJldmlvdXMgZWxlbWVudC5cbiAgICAgICAgLy8gICAtIGluZGV4OiBwb3NpdGlvblxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBhcmUgdXNpbmcgbm8tcHJvdG8gb2JqZWN0IHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBndWFyZCBhZ2FpbnN0IGluaGVyaXRlZCBwcm9wcyB2aWFcbiAgICAgICAgLy8gaGFzT3duUHJvcGVydHkuXG4gICAgICAgIHZhciBsYXN0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKTtcblxuICAgICAgICAvL3dhdGNoIHByb3BzXG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKHJocywgZnVuY3Rpb24gbmdSZXBlYXRBY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciBpbmRleCwgbGVuZ3RoLFxuICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSAkZWxlbWVudFswXSwgICAgIC8vIG5vZGUgdGhhdCBjbG9uZWQgbm9kZXMgc2hvdWxkIGJlIGluc2VydGVkIGFmdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZWQgdG8gdGhlIGNvbW1lbnQgbm9kZSBhbmNob3JcbiAgICAgICAgICAgICAgbmV4dE5vZGUsXG4gICAgICAgICAgICAgIC8vIFNhbWUgYXMgbGFzdEJsb2NrTWFwIGJ1dCBpdCBoYXMgdGhlIGN1cnJlbnQgc3RhdGUuIEl0IHdpbGwgYmVjb21lIHRoZVxuICAgICAgICAgICAgICAvLyBsYXN0QmxvY2tNYXAgb24gdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICBuZXh0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICAgICAgY29sbGVjdGlvbkxlbmd0aCxcbiAgICAgICAgICAgICAga2V5LCB2YWx1ZSwgLy8ga2V5L3ZhbHVlIG9mIGl0ZXJhdGlvblxuICAgICAgICAgICAgICB0cmFja0J5SWQsXG4gICAgICAgICAgICAgIHRyYWNrQnlJZEZuLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyxcbiAgICAgICAgICAgICAgYmxvY2ssICAgICAgIC8vIGxhc3Qgb2JqZWN0IGluZm9ybWF0aW9uIHtzY29wZSwgZWxlbWVudCwgaWR9XG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyLFxuICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlO1xuXG4gICAgICAgICAgaWYgKGFsaWFzQXMpIHtcbiAgICAgICAgICAgICRzY29wZVthbGlhc0FzXSA9IGNvbGxlY3Rpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IGNvbGxlY3Rpb247XG4gICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZEFycmF5Rm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkT2JqRm47XG4gICAgICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgc29ydCB0aGVtIGFuZCB1c2UgdG8gZGV0ZXJtaW5lIG9yZGVyIG9mIGl0ZXJhdGlvbiBvdmVyIG9iaiBwcm9wc1xuICAgICAgICAgICAgY29sbGVjdGlvbktleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbi5oYXNPd25Qcm9wZXJ0eShpdGVtS2V5KSAmJiBpdGVtS2V5LmNoYXJBdCgwKSAhPSAnJCcpIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uS2V5cy5wdXNoKGl0ZW1LZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cy5zb3J0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29sbGVjdGlvbkxlbmd0aCA9IGNvbGxlY3Rpb25LZXlzLmxlbmd0aDtcbiAgICAgICAgICBuZXh0QmxvY2tPcmRlciA9IG5ldyBBcnJheShjb2xsZWN0aW9uTGVuZ3RoKTtcblxuICAgICAgICAgIC8vIGxvY2F0ZSBleGlzdGluZyBpdGVtc1xuICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTtcbiAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgdHJhY2tCeUlkID0gdHJhY2tCeUlkRm4oa2V5LCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGxhc3RCbG9ja01hcFt0cmFja0J5SWRdKSB7XG4gICAgICAgICAgICAgIC8vIGZvdW5kIHByZXZpb3VzbHkgc2VlbiBibG9ja1xuICAgICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFt0cmFja0J5SWRdO1xuICAgICAgICAgICAgICBkZWxldGUgbGFzdEJsb2NrTWFwW3RyYWNrQnlJZF07XG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcFt0cmFja0J5SWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSkge1xuICAgICAgICAgICAgICAvLyBpZiBjb2xsaXNpb24gZGV0ZWN0ZWQuIHJlc3RvcmUgbGFzdEJsb2NrTWFwIGFuZCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgICBmb3JFYWNoKG5leHRCbG9ja09yZGVyLCBmdW5jdGlvbihibG9jaykge1xuICAgICAgICAgICAgICAgIGlmIChibG9jayAmJiBibG9jay5zY29wZSkgbGFzdEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2R1cGVzJyxcbiAgICAgICAgICAgICAgICAgIFwiRHVwbGljYXRlcyBpbiBhIHJlcGVhdGVyIGFyZSBub3QgYWxsb3dlZC4gVXNlICd0cmFjayBieScgZXhwcmVzc2lvbiB0byBzcGVjaWZ5IHVuaXF1ZSBrZXlzLiBSZXBlYXRlcjogezB9LCBEdXBsaWNhdGUga2V5OiB7MX0sIER1cGxpY2F0ZSB2YWx1ZTogezJ9XCIsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCB0cmFja0J5SWQsIHRvSnNvbih2YWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbmV3IG5ldmVyIGJlZm9yZSBzZWVuIGJsb2NrXG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IHtpZDogdHJhY2tCeUlkLCBzY29wZTogdW5kZWZpbmVkLCBjbG9uZTogdW5kZWZpbmVkfTtcbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJlbW92ZSBsZWZ0b3ZlciBpdGVtc1xuICAgICAgICAgIGZvciAodmFyIGJsb2NrS2V5IGluIGxhc3RCbG9ja01hcCkge1xuICAgICAgICAgICAgYmxvY2sgPSBsYXN0QmxvY2tNYXBbYmxvY2tLZXldO1xuICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZSA9IGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpO1xuICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoZWxlbWVudHNUb1JlbW92ZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudHNUb1JlbW92ZVswXS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBlbGVtZW50IHdhcyBub3QgcmVtb3ZlZCB5ZXQgYmVjYXVzZSBvZiBwZW5kaW5nIGFuaW1hdGlvbiwgbWFyayBpdCBhcyBkZWxldGVkXG4gICAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIGlnbm9yZSBpdCBsYXRlclxuICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZVtpbmRleF1bTkdfUkVNT1ZFRF0gPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG9jay5zY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgZm9yRWFjaCBmb3IgcGVyZiByZWFzb25zICh0cnlpbmcgdG8gYXZvaWQgI2NhbGwpXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29sbGVjdGlvbkxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07XG4gICAgICAgICAgICBibG9jayA9IG5leHRCbG9ja09yZGVyW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKGJsb2NrLnNjb3BlKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYWxyZWFkeSBzZWVuIHRoaXMgb2JqZWN0LCB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlXG4gICAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgc2NvcGUvZWxlbWVudFxuXG4gICAgICAgICAgICAgIG5leHROb2RlID0gcHJldmlvdXNOb2RlO1xuXG4gICAgICAgICAgICAgIC8vIHNraXAgbm9kZXMgdGhhdCBhcmUgYWxyZWFkeSBwZW5kaW5nIHJlbW92YWwgdmlhIGxlYXZlIGFuaW1hdGlvblxuICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgfSB3aGlsZSAobmV4dE5vZGUgJiYgbmV4dE5vZGVbTkdfUkVNT1ZFRF0pO1xuXG4gICAgICAgICAgICAgIGlmIChnZXRCbG9ja1N0YXJ0KGJsb2NrKSAhPSBuZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGl0ZW0gd2hpY2ggZ290IG1vdmVkXG4gICAgICAgICAgICAgICAgJGFuaW1hdGUubW92ZShnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKSwgbnVsbCwganFMaXRlKHByZXZpb3VzTm9kZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGdldEJsb2NrRW5kKGJsb2NrKTtcbiAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbmV3IGl0ZW0gd2hpY2ggd2UgZG9uJ3Qga25vdyBhYm91dFxuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbiBuZ1JlcGVhdFRyYW5zY2x1ZGUoY2xvbmUsIHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgYmxvY2suc2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9jbG9uZS12cy1jcmVhdGVjb21tZW50XG4gICAgICAgICAgICAgICAgdmFyIGVuZE5vZGUgPSBuZ1JlcGVhdEVuZENvbW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjbG9uZVtjbG9uZS5sZW5ndGgrK10gPSBlbmROb2RlO1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhwZXJmKTogc3VwcG9ydCBuYWtlZCBwcmV2aW91c05vZGUgaW4gYGVudGVyYCB0byBhdm9pZCBjcmVhdGlvbiBvZiBqcUxpdGUgd3JhcHBlcj9cbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgbnVsbCwganFMaXRlKHByZXZpb3VzTm9kZSkpO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGVuZE5vZGU7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy5cbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlclxuICAgICAgICAgICAgICAgIC8vIGJ5IGEgZGlyZWN0aXZlIHdpdGggdGVtcGxhdGVVcmwgd2hlbiBpdHMgdGVtcGxhdGUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICBibG9jay5jbG9uZSA9IGNsb25lO1xuICAgICAgICAgICAgICAgIG5leHRCbG9ja01hcFtibG9jay5pZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgICB1cGRhdGVTY29wZShibG9jay5zY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgY29sbGVjdGlvbkxlbmd0aCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0QmxvY2tNYXAgPSBuZXh0QmxvY2tNYXA7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIE5HX0hJREVfQ0xBU1MgPSAnbmctaGlkZSc7XG52YXIgTkdfSElERV9JTl9QUk9HUkVTU19DTEFTUyA9ICduZy1oaWRlLWFuaW1hdGUnO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1Nob3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdTaG93YCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvblxuICogcHJvdmlkZWQgdG8gdGhlIGBuZ1Nob3dgIGF0dHJpYnV0ZS4gVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZ1xuICogdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIG9udG8gdGhlIGVsZW1lbnQuIFRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBwcmVkZWZpbmVkXG4gKiBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW4gIWltcG9ydGFudCBmbGFnKS5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+XG4gKiA8ZGl2IG5nLXNob3c9XCJteVZhbHVlXCI+PC9kaXY+XG4gKlxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XG4gKiA8ZGl2IG5nLXNob3c9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIGZhbHN5IHZhbHVlIHRoZW4gdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBjbGFzc1xuICogYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiB0cnV0aHksIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyByZW1vdmVkXG4gKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uXG4gKlxuICogIyMgV2h5IGlzICFpbXBvcnRhbnQgdXNlZD9cbiAqXG4gKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgIWltcG9ydGFudCBpcyB1c2VkIGZvciB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYC5uZy1oaWRlYCBzZWxlY3RvclxuICogY2FuIGJlIGVhc2lseSBvdmVycmlkZGVuIGJ5IGhlYXZpZXIgc2VsZWN0b3JzLiBGb3IgZXhhbXBsZSwgc29tZXRoaW5nIGFzIHNpbXBsZVxuICogYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXIgdmlzaWJsZS5cbiAqIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLlxuICpcbiAqIEJ5IHVzaW5nICFpbXBvcnRhbnQsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuIENTUyBzZWxlY3RvclxuICogc3BlY2lmaWNpdHkgKHdoZW4gIWltcG9ydGFudCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGEgZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlXG4gKiBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhIG1hdHRlciBvZiB1c2luZyAhaW1wb3J0YW50IGluIHRoZWlyIG93biBDU1MgY29kZS5cbiAqXG4gKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5Om5vbmUhaW1wb3J0YW50YC4gSWYgeW91IHdpc2ggdG8gY2hhbmdlXG4gKiB0aGUgaGlkZSBiZWhhdmlvciB3aXRoIG5nU2hvdy9uZ0hpZGUgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXN0YXRpbmcgdGhlIHN0eWxlcyBmb3IgdGhlIGAubmctaGlkZWBcbiAqIGNsYXNzIGluIENTUzpcbiAqXG4gKiBgYGBjc3NcbiAqIC5uZy1oaWRlIHtcbiAqICAgLyYjNDI7IHRoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6YmxvY2shaW1wb3J0YW50O1xuICogICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAqICAgdG9wOi05OTk5cHg7XG4gKiAgIGxlZnQ6LTk5OTlweDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJ5IGRlZmF1bHQgeW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgaW4gQ1NTIGFueXRoaW5nIGFuZCB0aGUgYW5pbWF0aW9ucyB3aWxsIHdvcmsgYXJvdW5kIHRoZSBkaXNwbGF5IHN0eWxlLlxuICpcbiAqICMjIEEgbm90ZSBhYm91dCBhbmltYXRpb25zIHdpdGggYG5nU2hvd2BcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb25cbiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzIGV4Y2VwdCB0aGF0XG4gKiB5b3UgbXVzdCBhbHNvIGluY2x1ZGUgdGhlICFpbXBvcnRhbnQgZmxhZyB0byBvdmVycmlkZSB0aGUgZGlzcGxheSBwcm9wZXJ0eVxuICogc28gdGhhdCB5b3UgY2FuIHBlcmZvcm0gYW4gYW5pbWF0aW9uIHdoZW4gdGhlIGVsZW1lbnQgaXMgaGlkZGVuIGR1cmluZyB0aGUgdGltZSBvZiB0aGUgYW5pbWF0aW9uLlxuICpcbiAqIGBgYGNzc1xuICogLy9cbiAqIC8vYSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlXG4gKiAvL1xuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHtcbiAqICAgLyYjNDI7IHRoaXMgaXMgcmVxdWlyZWQgYXMgb2YgMS4zeCB0byBwcm9wZXJseVxuICogICAgICBhcHBseSBhbGwgc3R5bGluZyBpbiBhIHNob3cvaGlkZSBhbmltYXRpb24gJiM0MjsvXG4gKiAgIHRyYW5zaXRpb246MHMgbGluZWFyIGFsbDtcbiAqIH1cbiAqXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC1hY3RpdmUsXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZS1hY3RpdmUge1xuICogICAvJiM0MjsgdGhlIHRyYW5zaXRpb24gaXMgZGVmaW5lZCBpbiB0aGUgYWN0aXZlIGNsYXNzICYjNDI7L1xuICogICB0cmFuc2l0aW9uOjFzIGxpbmVhciBhbGw7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLjAtYmV0YS4xMSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXlcbiAqIHByb3BlcnR5IHRvIGJsb2NrIGR1cmluZyBhbmltYXRpb24gc3RhdGVzLS1uZ0FuaW1hdGUgd2lsbCBoYW5kbGUgdGhlIHN0eWxlIHRvZ2dsaW5nIGF1dG9tYXRpY2FsbHkgZm9yIHlvdS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogYWRkQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQgdGhlIGp1c3QgYmVmb3JlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZVxuICogcmVtb3ZlQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlblxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Nob3cgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeVxuICogICAgIHRoZW4gdGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIj48YnIvPlxuICAgICAgPGRpdj5cbiAgICAgICAgU2hvdzpcbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1zaG93XCIgbmctc2hvdz1cImNoZWNrZWRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdGh1bWJzLXVwXCI+PC9zcGFuPiBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBIaWRlOlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3dcIiBuZy1oaWRlPVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtZG93blwiPjwvc3Bhbj4gSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiZ2x5cGhpY29ucy5jc3NcIj5cbiAgICAgIEBpbXBvcnQgdXJsKC4uLy4uL2NvbXBvbmVudHMvYm9vdHN0cmFwLTMuMS4xL2Nzcy9ib290c3RyYXAuY3NzKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1zaG93IHtcbiAgICAgICAgbGluZS1oZWlnaHQ6MjBweDtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXNob3cubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtc2hvdy5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUge1xuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc2hvdy5uZy1oaWRlIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6MDtcbiAgICAgICAgb3BhY2l0eTowO1xuICAgICAgICBwYWRkaW5nOjAgMTBweDtcbiAgICAgIH1cblxuICAgICAgLmNoZWNrLWVsZW1lbnQge1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB0aHVtYnNVcCA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmdseXBoaWNvbi10aHVtYnMtdXAnKSk7XG4gICAgICB2YXIgdGh1bWJzRG93biA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmdseXBoaWNvbi10aHVtYnMtZG93bicpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zaG93IC8gbmctaGlkZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZUZhbHN5KCk7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVUcnV0aHkoKTtcblxuICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG5cbiAgICAgICAgZXhwZWN0KHRodW1ic1VwLmlzRGlzcGxheWVkKCkpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZUZhbHN5KCk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU2hvd0RpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ1Nob3csIGZ1bmN0aW9uIG5nU2hvd1dhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIHdlJ3JlIGFkZGluZyBhIHRlbXBvcmFyeSwgYW5pbWF0aW9uLXNwZWNpZmljIGNsYXNzIGZvciBuZy1oaWRlIHNpbmNlIHRoaXMgd2F5XG4gICAgICAgIC8vIHdlIGNhbiBjb250cm9sIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWN0dWFsbHkgZGlzcGxheWVkIG9uIHNjcmVlbiB3aXRob3V0IGhhdmluZ1xuICAgICAgICAvLyB0byBoYXZlIGEgZ2xvYmFsL2dyZWVkeSBDU1Mgc2VsZWN0b3IgdGhhdCBicmVha3Mgd2hlbiBvdGhlciBhbmltYXRpb25zIGFyZSBydW4uXG4gICAgICAgIC8vIFJlYWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkxMDMjaXNzdWVjb21tZW50LTU4MzM1ODQ1XG4gICAgICAgICRhbmltYXRlW3ZhbHVlID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKGVsZW1lbnQsIE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICB0ZW1wQ2xhc3NlczogTkdfSElERV9JTl9QUk9HUkVTU19DTEFTU1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdIaWRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nSGlkZWAgZGlyZWN0aXZlIHNob3dzIG9yIGhpZGVzIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgYmFzZWQgb24gdGhlIGV4cHJlc3Npb25cbiAqIHByb3ZpZGVkIHRvIHRoZSBgbmdIaWRlYCBhdHRyaWJ1dGUuIFRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiBieSByZW1vdmluZyBvciBhZGRpbmdcbiAqIHRoZSBgbmctaGlkZWAgQ1NTIGNsYXNzIG9udG8gdGhlIGVsZW1lbnQuIFRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBwcmVkZWZpbmVkXG4gKiBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW4gIWltcG9ydGFudCBmbGFnKS5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgaGlkZGVuKSAtLT5cbiAqIDxkaXYgbmctaGlkZT1cIm15VmFsdWVcIiBjbGFzcz1cIm5nLWhpZGVcIj48L2Rpdj5cbiAqXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgZmFsc3kgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+XG4gKiA8ZGl2IG5nLWhpZGU9XCJteVZhbHVlXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSB0aGVuIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBhZGRlZCB0byB0aGUgY2xhc3NcbiAqIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gZmFsc3ksIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyByZW1vdmVkXG4gKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uXG4gKlxuICogIyMgV2h5IGlzICFpbXBvcnRhbnQgdXNlZD9cbiAqXG4gKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgIWltcG9ydGFudCBpcyB1c2VkIGZvciB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYC5uZy1oaWRlYCBzZWxlY3RvclxuICogY2FuIGJlIGVhc2lseSBvdmVycmlkZGVuIGJ5IGhlYXZpZXIgc2VsZWN0b3JzLiBGb3IgZXhhbXBsZSwgc29tZXRoaW5nIGFzIHNpbXBsZVxuICogYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXIgdmlzaWJsZS5cbiAqIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLlxuICpcbiAqIEJ5IHVzaW5nICFpbXBvcnRhbnQsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuIENTUyBzZWxlY3RvclxuICogc3BlY2lmaWNpdHkgKHdoZW4gIWltcG9ydGFudCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGEgZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlXG4gKiBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhIG1hdHRlciBvZiB1c2luZyAhaW1wb3J0YW50IGluIHRoZWlyIG93biBDU1MgY29kZS5cbiAqXG4gKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5Om5vbmUhaW1wb3J0YW50YC4gSWYgeW91IHdpc2ggdG8gY2hhbmdlXG4gKiB0aGUgaGlkZSBiZWhhdmlvciB3aXRoIG5nU2hvdy9uZ0hpZGUgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXN0YXRpbmcgdGhlIHN0eWxlcyBmb3IgdGhlIGAubmctaGlkZWBcbiAqIGNsYXNzIGluIENTUzpcbiAqXG4gKiBgYGBjc3NcbiAqIC5uZy1oaWRlIHtcbiAqICAgLyYjNDI7IHRoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6YmxvY2shaW1wb3J0YW50O1xuICogICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAqICAgdG9wOi05OTk5cHg7XG4gKiAgIGxlZnQ6LTk5OTlweDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJ5IGRlZmF1bHQgeW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgaW4gQ1NTIGFueXRoaW5nIGFuZCB0aGUgYW5pbWF0aW9ucyB3aWxsIHdvcmsgYXJvdW5kIHRoZSBkaXNwbGF5IHN0eWxlLlxuICpcbiAqICMjIEEgbm90ZSBhYm91dCBhbmltYXRpb25zIHdpdGggYG5nSGlkZWBcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb25cbiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzLCBleGNlcHQgdGhhdCB0aGUgYC5uZy1oaWRlYFxuICogQ1NTIGNsYXNzIGlzIGFkZGVkIGFuZCByZW1vdmVkIGZvciB5b3UgaW5zdGVhZCBvZiB5b3VyIG93biBDU1MgY2xhc3MuXG4gKlxuICogYGBgY3NzXG4gKiAvL1xuICogLy9hIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2VcbiAqIC8vXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0LCBhcyBvZiBBbmd1bGFySlMgdmVyc2lvbiAxLjMuMC1iZXRhLjExLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheVxuICogcHJvcGVydHkgdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMtLW5nQW5pbWF0ZSB3aWxsIGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgYXV0b21hdGljYWxseSBmb3IgeW91LlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiByZW1vdmVDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byBoaWRkZW5cbiAqIGFkZENsYXNzOiBgLm5nLWhpZGVgIC0gaGFwcGVucyBhZnRlciB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSGlkZSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5IHRoZW5cbiAqICAgICB0aGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gcmVzcGVjdGl2ZWx5LlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICBDbGljayBtZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjxici8+XG4gICAgICA8ZGl2PlxuICAgICAgICBTaG93OlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLWhpZGVcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtdXBcIj48L3NwYW4+IEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIEhpZGU6XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtaGlkZVwiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy1kb3duXCI+PC9zcGFuPiBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJnbHlwaGljb25zLmNzc1wiPlxuICAgICAgQGltcG9ydCB1cmwoLi4vLi4vY29tcG9uZW50cy9ib290c3RyYXAtMy4xLjEvY3NzL2Jvb3RzdHJhcC5jc3MpO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLWhpZGUge1xuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgbGluZS1oZWlnaHQ6MjBweDtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWhpZGUubmctaGlkZSB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OjA7XG4gICAgICAgIG9wYWNpdHk6MDtcbiAgICAgICAgcGFkZGluZzowIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdGh1bWJzVXAgPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLXVwJykpO1xuICAgICAgdmFyIHRodW1ic0Rvd24gPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLWRvd24nKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc2hvdyAvIG5nLWhpZGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHRodW1ic1VwLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuXG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0hpZGVEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdIaWRlLCBmdW5jdGlvbiBuZ0hpZGVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyBUaGUgY29tbWVudCBpbnNpZGUgb2YgdGhlIG5nU2hvd0RpcmVjdGl2ZSBleHBsYWlucyB3aHkgd2UgYWRkIGFuZFxuICAgICAgICAvLyByZW1vdmUgYSB0ZW1wb3JhcnkgY2xhc3MgZm9yIHRoZSBzaG93L2hpZGUgYW5pbWF0aW9uXG4gICAgICAgICRhbmltYXRlW3ZhbHVlID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGVsZW1lbnQsTkdfSElERV9DTEFTUywge1xuICAgICAgICAgIHRlbXBDbGFzc2VzOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTdHlsZVxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU3R5bGVgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNldCBDU1Mgc3R5bGUgb24gYW4gSFRNTCBlbGVtZW50IGNvbmRpdGlvbmFsbHkuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3R5bGVcbiAqXG4gKiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB3aGljaCBldmFscyB0byBhblxuICogb2JqZWN0IHdob3NlIGtleXMgYXJlIENTUyBzdHlsZSBuYW1lcyBhbmQgdmFsdWVzIGFyZSBjb3JyZXNwb25kaW5nIHZhbHVlcyBmb3IgdGhvc2UgQ1NTXG4gKiBrZXlzLlxuICpcbiAqIFNpbmNlIHNvbWUgQ1NTIHN0eWxlIG5hbWVzIGFyZSBub3QgdmFsaWQga2V5cyBmb3IgYW4gb2JqZWN0LCB0aGV5IG11c3QgYmUgcXVvdGVkLlxuICogU2VlIHRoZSAnYmFja2dyb3VuZC1jb2xvcicgc3R5bGUgaW4gdGhlIGV4YW1wbGUgYmVsb3cuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0IGNvbG9yXCIgbmctY2xpY2s9XCJteVN0eWxlPXtjb2xvcjoncmVkJ31cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldCBiYWNrZ3JvdW5kXCIgbmctY2xpY2s9XCJteVN0eWxlPXsnYmFja2dyb3VuZC1jb2xvcic6J2JsdWUnfVwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15U3R5bGU9e31cIj5cbiAgICAgICAgPGJyLz5cbiAgICAgICAgPHNwYW4gbmctc3R5bGU9XCJteVN0eWxlXCI+U2FtcGxlIFRleHQ8L3NwYW4+XG4gICAgICAgIDxwcmU+bXlTdHlsZT17e215U3R5bGV9fTwvcHJlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICBzcGFuIHtcbiAgICAgICAgIGNvbG9yOiBibGFjaztcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBjb2xvclNwYW4gPSBlbGVtZW50KGJ5LmNzcygnc3BhbicpKTtcblxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3R5bGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMSknKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1cXCdzZXQgY29sb3JcXCddJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDI1NSwgMCwgMCwgMSknKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1jbGVhcl0nKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMSknKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTdHlsZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gIHNjb3BlLiR3YXRjaChhdHRyLm5nU3R5bGUsIGZ1bmN0aW9uIG5nU3R5bGVXYXRjaEFjdGlvbihuZXdTdHlsZXMsIG9sZFN0eWxlcykge1xuICAgIGlmIChvbGRTdHlsZXMgJiYgKG5ld1N0eWxlcyAhPT0gb2xkU3R5bGVzKSkge1xuICAgICAgZm9yRWFjaChvbGRTdHlsZXMsIGZ1bmN0aW9uKHZhbCwgc3R5bGUpIHsgZWxlbWVudC5jc3Moc3R5bGUsICcnKTt9KTtcbiAgICB9XG4gICAgaWYgKG5ld1N0eWxlcykgZWxlbWVudC5jc3MobmV3U3R5bGVzKTtcbiAgfSwgdHJ1ZSk7XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N3aXRjaFxuICogQHJlc3RyaWN0IEVBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU3dpdGNoYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBjb25kaXRpb25hbGx5IHN3YXAgRE9NIHN0cnVjdHVyZSBvbiB5b3VyIHRlbXBsYXRlIGJhc2VkIG9uIGEgc2NvcGUgZXhwcmVzc2lvbi5cbiAqIEVsZW1lbnRzIHdpdGhpbiBgbmdTd2l0Y2hgIGJ1dCB3aXRob3V0IGBuZ1N3aXRjaFdoZW5gIG9yIGBuZ1N3aXRjaERlZmF1bHRgIGRpcmVjdGl2ZXMgd2lsbCBiZSBwcmVzZXJ2ZWQgYXQgdGhlIGxvY2F0aW9uXG4gKiBhcyBzcGVjaWZpZWQgaW4gdGhlIHRlbXBsYXRlLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgaXRzZWxmIHdvcmtzIHNpbWlsYXIgdG8gbmdJbmNsdWRlLCBob3dldmVyLCBpbnN0ZWFkIG9mIGRvd25sb2FkaW5nIHRlbXBsYXRlIGNvZGUgKG9yIGxvYWRpbmcgaXRcbiAqIGZyb20gdGhlIHRlbXBsYXRlIGNhY2hlKSwgYG5nU3dpdGNoYCBzaW1wbHkgY2hvb3NlcyBvbmUgb2YgdGhlIG5lc3RlZCBlbGVtZW50cyBhbmQgbWFrZXMgaXQgdmlzaWJsZSBiYXNlZCBvbiB3aGljaCBlbGVtZW50XG4gKiBtYXRjaGVzIHRoZSB2YWx1ZSBvYnRhaW5lZCBmcm9tIHRoZSBldmFsdWF0ZWQgZXhwcmVzc2lvbi4gSW4gb3RoZXIgd29yZHMsIHlvdSBkZWZpbmUgYSBjb250YWluZXIgZWxlbWVudFxuICogKHdoZXJlIHlvdSBwbGFjZSB0aGUgZGlyZWN0aXZlKSwgcGxhY2UgYW4gZXhwcmVzc2lvbiBvbiB0aGUgKipgb249XCIuLi5cImAgYXR0cmlidXRlKipcbiAqIChvciB0aGUgKipgbmctc3dpdGNoPVwiLi4uXCJgIGF0dHJpYnV0ZSoqKSwgZGVmaW5lIGFueSBpbm5lciBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGRpcmVjdGl2ZSBhbmQgcGxhY2VcbiAqIGEgd2hlbiBhdHRyaWJ1dGUgcGVyIGVsZW1lbnQuIFRoZSB3aGVuIGF0dHJpYnV0ZSBpcyB1c2VkIHRvIGluZm9ybSBuZ1N3aXRjaCB3aGljaCBlbGVtZW50IHRvIGRpc3BsYXkgd2hlbiB0aGUgb25cbiAqIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkLiBJZiBhIG1hdGNoaW5nIGV4cHJlc3Npb24gaXMgbm90IGZvdW5kIHZpYSBhIHdoZW4gYXR0cmlidXRlIHRoZW4gYW4gZWxlbWVudCB3aXRoIHRoZSBkZWZhdWx0XG4gKiBhdHRyaWJ1dGUgaXMgZGlzcGxheWVkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiBCZSBhd2FyZSB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QgY2Fubm90IGJlIGV4cHJlc3Npb25zLiBUaGV5IGFyZSBpbnRlcnByZXRlZFxuICogYXMgbGl0ZXJhbCBzdHJpbmcgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBGb3IgZXhhbXBsZSwgKipgbmctc3dpdGNoLXdoZW49XCJzb21lVmFsXCJgKiogd2lsbCBtYXRjaCBhZ2FpbnN0IHRoZSBzdHJpbmcgYFwic29tZVZhbFwiYCBub3QgYWdhaW5zdCB0aGVcbiAqIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIGAkc2NvcGUuc29tZVZhbGAuXG4gKiA8L2Rpdj5cblxuICogQGFuaW1hdGlvbnNcbiAqIGVudGVyIC0gaGFwcGVucyBhZnRlciB0aGUgbmdTd2l0Y2ggY29udGVudHMgY2hhbmdlIGFuZCB0aGUgbWF0Y2hlZCBjaGlsZCBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgdGhlIGNvbnRhaW5lclxuICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQganVzdCBiZWZvcmUgdGhlIGZvcm1lciBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAqXG4gKiBAdXNhZ2VcbiAqXG4gKiBgYGBcbiAqIDxBTlkgbmctc3dpdGNoPVwiZXhwcmVzc2lvblwiPlxuICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPVwibWF0Y2hWYWx1ZTFcIj4uLi48L0FOWT5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj1cIm1hdGNoVmFsdWUyXCI+Li4uPC9BTlk+XG4gKiAgIDxBTlkgbmctc3dpdGNoLWRlZmF1bHQ+Li4uPC9BTlk+XG4gKiA8L0FOWT5cbiAqIGBgYFxuICpcbiAqXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSAxMjAwXG4gKiBAcGFyYW0geyp9IG5nU3dpdGNofG9uIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdCA8dHQ+bmctc3dpdGNoLXdoZW48L3R0Pi5cbiAqIE9uIGNoaWxkIGVsZW1lbnRzIGFkZDpcbiAqXG4gKiAqIGBuZ1N3aXRjaFdoZW5gOiB0aGUgY2FzZSBzdGF0ZW1lbnQgdG8gbWF0Y2ggYWdhaW5zdC4gSWYgbWF0Y2ggdGhlbiB0aGlzXG4gKiAgIGNhc2Ugd2lsbCBiZSBkaXNwbGF5ZWQuIElmIHRoZSBzYW1lIG1hdGNoIGFwcGVhcnMgbXVsdGlwbGUgdGltZXMsIGFsbCB0aGVcbiAqICAgZWxlbWVudHMgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gKiAqIGBuZ1N3aXRjaERlZmF1bHRgOiB0aGUgZGVmYXVsdCBjYXNlIHdoZW4gbm8gb3RoZXIgY2FzZSBtYXRjaC4gSWYgdGhlcmVcbiAqICAgYXJlIG11bHRpcGxlIGRlZmF1bHQgY2FzZXMsIGFsbCBvZiB0aGVtIHdpbGwgYmUgZGlzcGxheWVkIHdoZW4gbm8gb3RoZXJcbiAqICAgY2FzZSBtYXRjaC5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwic3dpdGNoRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwic2VsZWN0aW9uXCIgbmctb3B0aW9ucz1cIml0ZW0gZm9yIGl0ZW0gaW4gaXRlbXNcIj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDx0dD5zZWxlY3Rpb249e3tzZWxlY3Rpb259fTwvdHQ+XG4gICAgICAgIDxoci8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaC1jb250YWluZXJcIlxuICAgICAgICAgIG5nLXN3aXRjaCBvbj1cInNlbGVjdGlvblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJzZXR0aW5nc1wiPlNldHRpbmdzIERpdjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJob21lXCI+SG9tZSBTcGFuPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtZGVmYXVsdD5kZWZhdWx0PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdzd2l0Y2hFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbJ3NldHRpbmdzJywgJ2hvbWUnLCAnb3RoZXInXTtcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0aW9uID0gJHNjb3BlLml0ZW1zWzBdO1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBoZWlnaHQ6NDBweDtcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gge1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1hbmltYXRlIHtcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcblxuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgdG9wOjA7XG4gICAgICAgIGxlZnQ6MDtcbiAgICAgICAgcmlnaHQ6MDtcbiAgICAgICAgYm90dG9tOjA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIge1xuICAgICAgICB0b3A6LTUwcHg7XG4gICAgICB9XG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBzd2l0Y2hFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1zd2l0Y2hdJykpO1xuICAgICAgdmFyIHNlbGVjdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlbGVjdGlvbicpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBzdGFydCBpbiBzZXR0aW5ncycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBob21lJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDEpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvSG9tZSBTcGFuLyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgc2VsZWN0IGRlZmF1bHQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMikuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9kZWZhdWx0Lyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU3dpdGNoRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgcmVxdWlyZTogJ25nU3dpdGNoJyxcblxuICAgIC8vIGFza3MgZm9yICRzY29wZSB0byBmb29sIHRoZSBCQyBjb250cm9sbGVyIG1vZHVsZVxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24gbmdTd2l0Y2hDb250cm9sbGVyKCkge1xuICAgICB0aGlzLmNhc2VzID0ge307XG4gICAgfV0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nU3dpdGNoQ29udHJvbGxlcikge1xuICAgICAgdmFyIHdhdGNoRXhwciA9IGF0dHIubmdTd2l0Y2ggfHwgYXR0ci5vbixcbiAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGVzID0gW10sXG4gICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cyA9IFtdLFxuICAgICAgICAgIHByZXZpb3VzTGVhdmVBbmltYXRpb25zID0gW10sXG4gICAgICAgICAgc2VsZWN0ZWRTY29wZXMgPSBbXTtcblxuICAgICAgdmFyIHNwbGljZUZhY3RvcnkgPSBmdW5jdGlvbihhcnJheSwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7IGFycmF5LnNwbGljZShpbmRleCwgMSk7IH07XG4gICAgICB9O1xuXG4gICAgICBzY29wZS4kd2F0Y2god2F0Y2hFeHByLCBmdW5jdGlvbiBuZ1N3aXRjaFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBpLCBpaTtcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBwcmV2aW91c0xlYXZlQW5pbWF0aW9ucy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgJGFuaW1hdGUuY2FuY2VsKHByZXZpb3VzTGVhdmVBbmltYXRpb25zW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c0xlYXZlQW5pbWF0aW9ucy5sZW5ndGggPSAwO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gc2VsZWN0ZWRTY29wZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIHZhciBzZWxlY3RlZCA9IGdldEJsb2NrTm9kZXMoc2VsZWN0ZWRFbGVtZW50c1tpXS5jbG9uZSk7XG4gICAgICAgICAgc2VsZWN0ZWRTY29wZXNbaV0uJGRlc3Ryb3koKTtcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9IHByZXZpb3VzTGVhdmVBbmltYXRpb25zW2ldID0gJGFuaW1hdGUubGVhdmUoc2VsZWN0ZWQpO1xuICAgICAgICAgIHByb21pc2UudGhlbihzcGxpY2VGYWN0b3J5KHByZXZpb3VzTGVhdmVBbmltYXRpb25zLCBpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHNlbGVjdGVkU2NvcGVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgaWYgKChzZWxlY3RlZFRyYW5zY2x1ZGVzID0gbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWychJyArIHZhbHVlXSB8fCBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJz8nXSkpIHtcbiAgICAgICAgICBmb3JFYWNoKHNlbGVjdGVkVHJhbnNjbHVkZXMsIGZ1bmN0aW9uKHNlbGVjdGVkVHJhbnNjbHVkZSkge1xuICAgICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlLnRyYW5zY2x1ZGUoZnVuY3Rpb24oY2FzZUVsZW1lbnQsIHNlbGVjdGVkU2NvcGUpIHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRTY29wZXMucHVzaChzZWxlY3RlZFNjb3BlKTtcbiAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IHNlbGVjdGVkVHJhbnNjbHVkZS5lbGVtZW50O1xuICAgICAgICAgICAgICBjYXNlRWxlbWVudFtjYXNlRWxlbWVudC5sZW5ndGgrK10gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgZW5kIG5nU3dpdGNoV2hlbjogJyk7XG4gICAgICAgICAgICAgIHZhciBibG9jayA9IHsgY2xvbmU6IGNhc2VFbGVtZW50IH07XG5cbiAgICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2FzZUVsZW1lbnQsIGFuY2hvci5wYXJlbnQoKSwgYW5jaG9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICBwcmlvcml0eTogMTIwMCxcbiAgcmVxdWlyZTogJ15uZ1N3aXRjaCcsXG4gIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgIGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXSA9IChjdHJsLmNhc2VzWychJyArIGF0dHJzLm5nU3dpdGNoV2hlbl0gfHwgW10pO1xuICAgIGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gIH1cbn0pO1xuXG52YXIgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gIHByaW9yaXR5OiAxMjAwLFxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICBjdHJsLmNhc2VzWyc/J10gPSAoY3RybC5jYXNlc1snPyddIHx8IFtdKTtcbiAgICBjdHJsLmNhc2VzWyc/J10ucHVzaCh7IHRyYW5zY2x1ZGU6ICR0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pO1xuICAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdUcmFuc2NsdWRlXG4gKiBAcmVzdHJpY3QgRUFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEaXJlY3RpdmUgdGhhdCBtYXJrcyB0aGUgaW5zZXJ0aW9uIHBvaW50IGZvciB0aGUgdHJhbnNjbHVkZWQgRE9NIG9mIHRoZSBuZWFyZXN0IHBhcmVudCBkaXJlY3RpdmUgdGhhdCB1c2VzIHRyYW5zY2x1c2lvbi5cbiAqXG4gKiBBbnkgZXhpc3RpbmcgY29udGVudCBvZiB0aGUgZWxlbWVudCB0aGF0IHRoaXMgZGlyZWN0aXZlIGlzIHBsYWNlZCBvbiB3aWxsIGJlIHJlbW92ZWQgYmVmb3JlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGlzIGluc2VydGVkLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJ0cmFuc2NsdWRlRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgndHJhbnNjbHVkZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuZGlyZWN0aXZlKCdwYW5lJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICAgICBzY29wZTogeyB0aXRsZTonQCcgfSxcbiAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBzdHlsZT1cImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5XCI+e3t0aXRsZX19PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnPG5nLXRyYW5zY2x1ZGU+PC9uZy10cmFuc2NsdWRlPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nXG4gICAgICAgICAgICAgfTtcbiAgICAgICAgIH0pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAkc2NvcGUudGl0bGUgPSAnTG9yZW0gSXBzdW0nO1xuICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdOZXF1ZSBwb3JybyBxdWlzcXVhbSBlc3QgcXVpIGRvbG9yZW0gaXBzdW0gcXVpYSBkb2xvci4uLic7XG4gICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInRpdGxlXCI+PGJyPlxuICAgICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwidGV4dFwiPjwvdGV4dGFyZWE+IDxici8+XG4gICAgICAgICA8cGFuZSB0aXRsZT1cInt7dGl0bGV9fVwiPnt7dGV4dH19PC9wYW5lPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBoYXZlIHRyYW5zY2x1ZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRpdGxlRWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RpdGxlJykpO1xuICAgICAgICAgIHRpdGxlRWxlbWVudC5jbGVhcigpO1xuICAgICAgICAgIHRpdGxlRWxlbWVudC5zZW5kS2V5cygnVElUTEUnKTtcbiAgICAgICAgICB2YXIgdGV4dEVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpO1xuICAgICAgICAgIHRleHRFbGVtZW50LmNsZWFyKCk7XG4gICAgICAgICAgdGV4dEVsZW1lbnQuc2VuZEtleXMoJ1RFWFQnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0aXRsZScpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RJVExFJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RFWFQnKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHJlc3RyaWN0OiAnRUFDJyxcbiAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBjb250cm9sbGVyLCAkdHJhbnNjbHVkZSkge1xuICAgIGlmICghJHRyYW5zY2x1ZGUpIHtcbiAgICAgIHRocm93IG1pbkVycignbmdUcmFuc2NsdWRlJykoJ29ycGhhbicsXG4gICAgICAgJ0lsbGVnYWwgdXNlIG9mIG5nVHJhbnNjbHVkZSBkaXJlY3RpdmUgaW4gdGhlIHRlbXBsYXRlISAnICtcbiAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIGZvdW5kLiAnICtcbiAgICAgICAnRWxlbWVudDogezB9JyxcbiAgICAgICBzdGFydGluZ1RhZygkZWxlbWVudCkpO1xuICAgIH1cblxuICAgICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAkZWxlbWVudC5lbXB0eSgpO1xuICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgc2NyaXB0XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTG9hZCB0aGUgY29udGVudCBvZiBhIGA8c2NyaXB0PmAgZWxlbWVudCBpbnRvIHtAbGluayBuZy4kdGVtcGxhdGVDYWNoZSBgJHRlbXBsYXRlQ2FjaGVgfSwgc28gdGhhdCB0aGVcbiAqIHRlbXBsYXRlIGNhbiBiZSB1c2VkIGJ5IHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIGBuZ0luY2x1ZGVgfSxcbiAqIHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgYG5nVmlld2B9LCBvciB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LiBUaGUgdHlwZSBvZiB0aGVcbiAqIGA8c2NyaXB0PmAgZWxlbWVudCBtdXN0IGJlIHNwZWNpZmllZCBhcyBgdGV4dC9uZy10ZW1wbGF0ZWAsIGFuZCBhIGNhY2hlIG5hbWUgZm9yIHRoZSB0ZW1wbGF0ZSBtdXN0IGJlXG4gKiBhc3NpZ25lZCB0aHJvdWdoIHRoZSBlbGVtZW50J3MgYGlkYCwgd2hpY2ggY2FuIHRoZW4gYmUgdXNlZCBhcyBhIGRpcmVjdGl2ZSdzIGB0ZW1wbGF0ZVVybGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgTXVzdCBiZSBzZXQgdG8gYCd0ZXh0L25nLXRlbXBsYXRlJ2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ2FjaGUgbmFtZSBvZiB0aGUgdGVtcGxhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGU+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cIi90cGwuaHRtbFwiPlxuICAgICAgICBDb250ZW50IG9mIHRoZSB0ZW1wbGF0ZS5cbiAgICAgIDwvc2NyaXB0PlxuXG4gICAgICA8YSBuZy1jbGljaz1cImN1cnJlbnRUcGw9Jy90cGwuaHRtbCdcIiBpZD1cInRwbC1saW5rXCI+TG9hZCBpbmxpbmVkIHRlbXBsYXRlPC9hPlxuICAgICAgPGRpdiBpZD1cInRwbC1jb250ZW50XCIgbmctaW5jbHVkZSBzcmM9XCJjdXJyZW50VHBsXCI+PC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZSBkZWZpbmVkIGluc2lkZSBzY3JpcHQgdGFnJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjdHBsLWxpbmsnKSkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcjdHBsLWNvbnRlbnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRoZSB0ZW1wbGF0ZS8pO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBzY3JpcHREaXJlY3RpdmUgPSBbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIGlmIChhdHRyLnR5cGUgPT0gJ3RleHQvbmctdGVtcGxhdGUnKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZVVybCA9IGF0dHIuaWQsXG4gICAgICAgICAgICAvLyBJRSBpcyBub3QgY29uc2lzdGVudCwgaW4gc2NyaXB0cyB3ZSBoYXZlIHRvIHJlYWQgLnRleHQgYnV0IGluIG90aGVyIG5vZGVzIHdlIGhhdmUgdG8gcmVhZCAudGV4dENvbnRlbnRcbiAgICAgICAgICAgIHRleHQgPSBlbGVtZW50WzBdLnRleHQ7XG5cbiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0KHRlbXBsYXRlVXJsLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxudmFyIG5nT3B0aW9uc01pbkVyciA9IG1pbkVycignbmdPcHRpb25zJyk7XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHNlbGVjdFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgYFNFTEVDVGAgZWxlbWVudCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLlxuICpcbiAqICMgYG5nT3B0aW9uc2BcbiAqXG4gKiBUaGUgYG5nT3B0aW9uc2AgYXR0cmlidXRlIGNhbiBiZSB1c2VkIHRvIGR5bmFtaWNhbGx5IGdlbmVyYXRlIGEgbGlzdCBvZiBgPG9wdGlvbj5gXG4gKiBlbGVtZW50cyBmb3IgdGhlIGA8c2VsZWN0PmAgZWxlbWVudCB1c2luZyB0aGUgYXJyYXkgb3Igb2JqZWN0IG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlXG4gKiBgbmdPcHRpb25zYCBjb21wcmVoZW5zaW9uX2V4cHJlc3Npb24uXG4gKlxuICogSW4gbWFueSBjYXNlcywgYG5nUmVwZWF0YCBjYW4gYmUgdXNlZCBvbiBgPG9wdGlvbj5gIGVsZW1lbnRzIGluc3RlYWQgb2YgYG5nT3B0aW9uc2AgdG8gYWNoaWV2ZSBhXG4gKiBzaW1pbGFyIHJlc3VsdC4gSG93ZXZlciwgdGhlIGBuZ09wdGlvbnNgIHByb3ZpZGVzIHNvbWUgYmVuZWZpdHMgc3VjaCBhcyByZWR1Y2luZyBtZW1vcnkgYW5kXG4gKiBpbmNyZWFzaW5nIHNwZWVkIGJ5IG5vdCBjcmVhdGluZyBhIG5ldyBzY29wZSBmb3IgZWFjaCByZXBlYXRlZCBpbnN0YW5jZSwgYXMgd2VsbCBhcyBwcm92aWRpbmdcbiAqIG1vcmUgZmxleGliaWxpdHkgaW4gaG93IHRoZSBgc2VsZWN0YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSBgc2VsZWN0IGFzYC4gYG5nT3B0aW9ucyBzaG91bGQgYmVcbiAqIHVzZWQgd2hlbiB0aGUgYHNlbGVjdGAgbW9kZWwgbmVlZHMgdG8gYmUgYm91bmQgdG8gYSBub24tc3RyaW5nIHZhbHVlLiBUaGlzIGlzIGJlY2F1c2UgYW4gb3B0aW9uXG4gKiBlbGVtZW50IGNhbiBvbmx5IGJlIGJvdW5kIHRvIHN0cmluZyB2YWx1ZXMgYXQgcHJlc2VudC5cbiAqXG4gKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIGA8c2VsZWN0PmAgbWVudSBpcyBzZWxlY3RlZCwgdGhlIGFycmF5IGVsZW1lbnQgb3Igb2JqZWN0IHByb3BlcnR5XG4gKiByZXByZXNlbnRlZCBieSB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYFxuICogZGlyZWN0aXZlLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIGBuZ01vZGVsYCBjb21wYXJlcyBieSByZWZlcmVuY2UsIG5vdCB2YWx1ZS4gVGhpcyBpcyBpbXBvcnRhbnQgd2hlbiBiaW5kaW5nIHRvIGFuXG4gKiBhcnJheSBvZiBvYmplY3RzLiBTZWUgYW4gZXhhbXBsZSBbaW4gdGhpcyBqc2ZpZGRsZV0oaHR0cDovL2pzZmlkZGxlLm5ldC9xV3pUYi8pLlxuICogPC9kaXY+XG4gKlxuICogIyMgYHNlbGVjdCBhc2BcbiAqXG4gKiBVc2luZyBgc2VsZWN0IGFzYCB3aWxsIGJpbmQgdGhlIHJlc3VsdCBvZiB0aGUgYHNlbGVjdCBhc2AgZXhwcmVzc2lvbiB0byB0aGUgbW9kZWwsIGJ1dFxuICogdGhlIHZhbHVlIG9mIHRoZSBgPHNlbGVjdD5gIGFuZCBgPG9wdGlvbj5gIGh0bWwgZWxlbWVudHMgd2lsbCBiZSBlaXRoZXIgdGhlIGluZGV4IChmb3IgYXJyYXkgZGF0YSBzb3VyY2VzKVxuICogb3IgcHJvcGVydHkgbmFtZSAoZm9yIG9iamVjdCBkYXRhIHNvdXJjZXMpIG9mIHRoZSB2YWx1ZSB3aXRoaW4gdGhlIGNvbGxlY3Rpb24uIElmIGEgYHRyYWNrIGJ5YCBleHByZXNzaW9uXG4gKiBpcyB1c2VkLCB0aGUgcmVzdWx0IG9mIHRoYXQgZXhwcmVzc2lvbiB3aWxsIGJlIHNldCBhcyB0aGUgdmFsdWUgb2YgdGhlIGBvcHRpb25gIGFuZCBgc2VsZWN0YCBlbGVtZW50cy5cbiAqXG4gKiAjIyMgYHNlbGVjdCBhc2Agd2l0aCBgdHJhY2tleHByYFxuICpcbiAqIFVzaW5nIGBzZWxlY3QgYXNgIHRvZ2V0aGVyIHdpdGggYHRyYWNrZXhwcmAgaXMgbm90IHJlY29tbWVuZGVkLiBSZWFzb25pbmc6XG4gKlxuICogLSBFeGFtcGxlOiAmbHQ7c2VsZWN0IG5nLW9wdGlvbnM9XCJpdGVtLnN1Ykl0ZW0gYXMgaXRlbS5sYWJlbCBmb3IgaXRlbSBpbiB2YWx1ZXMgdHJhY2sgYnkgaXRlbS5pZFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIiZndDtcbiAqICAgdmFsdWVzOiBbe2lkOiAxLCBsYWJlbDogJ2FMYWJlbCcsIHN1Ykl0ZW06IHtuYW1lOiAnYVN1Ykl0ZW0nfX0sIHtpZDogMiwgbGFiZWw6ICdiTGFiZWwnLCBzdWJJdGVtOiB7bmFtZTogJ2JTdWJJdGVtJ319XSxcbiAqICAgJHNjb3BlLnNlbGVjdGVkID0ge25hbWU6ICdhU3ViSXRlbSd9O1xuICogLSB0cmFjayBieSBpcyBhbHdheXMgYXBwbGllZCB0byBgdmFsdWVgLCB3aXRoIHRoZSBwdXJwb3NlIG9mIHByZXNlcnZpbmcgdGhlIHNlbGVjdGlvbixcbiAqICAgKHRvIGBpdGVtYCBpbiB0aGlzIGNhc2UpXG4gKiAtIHRvIGNhbGN1bGF0ZSB3aGV0aGVyIGFuIGl0ZW0gaXMgc2VsZWN0ZWQgd2UgZG8gdGhlIGZvbGxvd2luZzpcbiAqICAgMS4gYXBwbHkgYHRyYWNrIGJ5YCB0byB0aGUgdmFsdWVzIGluIHRoZSBhcnJheSwgZS5nLlxuICogICAgICBJbiB0aGUgZXhhbXBsZTogWzEsMl1cbiAqICAgMi4gYXBwbHkgYHRyYWNrIGJ5YCB0byB0aGUgYWxyZWFkeSBzZWxlY3RlZCB2YWx1ZSBpbiBgbmdNb2RlbGA6XG4gKiAgICAgIEluIHRoZSBleGFtcGxlOiB0aGlzIGlzIG5vdCBwb3NzaWJsZSwgYXMgYHRyYWNrIGJ5YCByZWZlcnMgdG8gYGl0ZW0uaWRgLCBidXQgdGhlIHNlbGVjdGVkXG4gKiAgICAgIHZhbHVlIGZyb20gYG5nTW9kZWxgIGlzIGB7bmFtZTogYVN1Ykl0ZW19YC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFRoZSBjb250cm9sIGlzIGNvbnNpZGVyZWQgdmFsaWQgb25seSBpZiB2YWx1ZSBpcyBlbnRlcmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge2NvbXByZWhlbnNpb25fZXhwcmVzc2lvbj19IG5nT3B0aW9ucyBpbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBmb3JtczpcbiAqXG4gKiAgICogZm9yIGFycmF5IGRhdGEgc291cmNlczpcbiAqICAgICAqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgICoqYHRyYWNrIGJ5YCoqIGB0cmFja2V4cHJgXG4gKiAgICogZm9yIG9iamVjdCBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgXG4gKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiAgICogYGFycmF5YCAvIGBvYmplY3RgOiBhbiBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBhcnJheSAvIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiAgICogYHZhbHVlYDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBlYWNoIGl0ZW0gaW4gdGhlIGBhcnJheWAgb3IgZWFjaCBwcm9wZXJ0eSB2YWx1ZVxuICogICAgICBvZiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBrZXlgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGEgcHJvcGVydHkgbmFtZSBpbiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBsYWJlbGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdGhlIGxhYmVsIGZvciBgPG9wdGlvbj5gIGVsZW1lbnQuIFRoZVxuICogICAgIGBleHByZXNzaW9uYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZSBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS5cbiAqICAgKiBgc2VsZWN0YDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgb2YgdGhlIHBhcmVudCBgPHNlbGVjdD5gXG4gKiAgICAgIGVsZW1lbnQuIElmIG5vdCBzcGVjaWZpZWQsIGBzZWxlY3RgIGV4cHJlc3Npb24gd2lsbCBkZWZhdWx0IHRvIGB2YWx1ZWAuXG4gKiAgICogYGdyb3VwYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB1c2VkIHRvIGdyb3VwIG9wdGlvbnMgdXNpbmcgdGhlIGA8b3B0Z3JvdXA+YFxuICogICAgICBET00gZWxlbWVudC5cbiAqICAgKiBgdHJhY2tleHByYDogVXNlZCB3aGVuIHdvcmtpbmcgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlXG4gKiAgICAgIHVzZWQgdG8gaWRlbnRpZnkgdGhlIG9iamVjdHMgaW4gdGhlIGFycmF5LiBUaGUgYHRyYWNrZXhwcmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGVcbiAqICAgICBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4gV2l0aCB0aGlzIHRoZSBzZWxlY3Rpb24gaXMgcHJlc2VydmVkXG4gKiAgICAgIGV2ZW4gd2hlbiB0aGUgb3B0aW9ucyBhcmUgcmVjcmVhdGVkIChlLmcuIHJlbG9hZGVkIGZyb20gdGhlIHNlcnZlcikuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJzZWxlY3RFeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc2VsZWN0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29sb3JzID0gW1xuICAgICAgICAgICAgICB7bmFtZTonYmxhY2snLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZTond2hpdGUnLCBzaGFkZTonbGlnaHQnfSxcbiAgICAgICAgICAgICAge25hbWU6J3JlZCcsIHNoYWRlOidkYXJrJ30sXG4gICAgICAgICAgICAgIHtuYW1lOidibHVlJywgc2hhZGU6J2RhcmsnfSxcbiAgICAgICAgICAgICAge25hbWU6J3llbGxvdycsIHNoYWRlOidsaWdodCd9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgJHNjb3BlLm15Q29sb3IgPSAkc2NvcGUuY29sb3JzWzJdOyAvLyByZWRcbiAgICAgICAgICB9XSk7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgICAgTmFtZTogPGlucHV0IG5nLW1vZGVsPVwiY29sb3IubmFtZVwiPlxuICAgICAgICAgICAgICBbPGEgaHJlZiBuZy1jbGljaz1cImNvbG9ycy5zcGxpY2UoJGluZGV4LCAxKVwiPlg8L2E+XVxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgWzxhIGhyZWYgbmctY2xpY2s9XCJjb2xvcnMucHVzaCh7fSlcIj5hZGQ8L2E+XVxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAgQ29sb3IgKG51bGwgbm90IGFsbG93ZWQpOlxuICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPjwvc2VsZWN0Pjxicj5cblxuICAgICAgICAgIENvbG9yIChudWxsIGFsbG93ZWQpOlxuICAgICAgICAgIDxzcGFuICBjbGFzcz1cIm51bGxhYmxlXCI+XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi0tIGNob29zZSBjb2xvciAtLTwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9zcGFuPjxici8+XG5cbiAgICAgICAgICBDb2xvciBncm91cGVkIGJ5IHNoYWRlOlxuICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZ3JvdXAgYnkgY29sb3Iuc2hhZGUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgIDwvc2VsZWN0Pjxici8+XG5cblxuICAgICAgICAgIFNlbGVjdCA8YSBocmVmIG5nLWNsaWNrPVwibXlDb2xvciA9IHsgbmFtZTonbm90IGluIGxpc3QnLCBzaGFkZTogJ290aGVyJyB9XCI+Ym9ndXM8L2E+Ljxicj5cbiAgICAgICAgICA8aHIvPlxuICAgICAgICAgIEN1cnJlbnRseSBzZWxlY3RlZDoge3sge3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9IH19XG4gICAgICAgICAgPGRpdiBzdHlsZT1cImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4XCJcbiAgICAgICAgICAgICAgIG5nLXN0eWxlPVwieydiYWNrZ3JvdW5kLWNvbG9yJzpteUNvbG9yLm5hbWV9XCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1vcHRpb25zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ3JlZCcpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXlDb2xvcicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdibGFjaycpO1xuICAgICAgICAgICBlbGVtZW50KGJ5LmNzcygnLm51bGxhYmxlIHNlbGVjdFtuZy1tb2RlbD1cIm15Q29sb3JcIl0nKSkuY2xpY2soKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCcubnVsbGFibGUgc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdudWxsJyk7XG4gICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cblxudmFyIG5nT3B0aW9uc0RpcmVjdGl2ZSA9IHZhbHVlRm4oe1xuICByZXN0cmljdDogJ0EnLFxuICB0ZXJtaW5hbDogdHJ1ZVxufSk7XG5cbi8vIGpzaGludCBtYXhsZW46IGZhbHNlXG52YXIgc2VsZWN0RGlyZWN0aXZlID0gWyckY29tcGlsZScsICckcGFyc2UnLCBmdW5jdGlvbigkY29tcGlsZSwgICAkcGFyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLzAwMDAxMTExMTExMTExMDAwMDAwMDAwMDAyMjIyMjIyMjIyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzMzMzMzMzMzMzAwMDAwMDAwMDAwMDAwNDQ0NDQ0NDQ0NDQ0NDQ0MDAwMDAwMDAwNTU1NTU1NTU1NTU1NTU1MDAwMDAwMDY2NjY2NjY2NjY2NjY2NjAwMDAwMDAwMDAwMDAwMDc3Nzc3Nzc3NzcwMDAwMDAwMDAwMDAwMDAwMDAwODg4ODg4ODg4OFxuICB2YXIgTkdfT1BUSU9OU19SRUdFWFAgPSAvXlxccyooW1xcc1xcU10rPykoPzpcXHMrYXNcXHMrKFtcXHNcXFNdKz8pKT8oPzpcXHMrZ3JvdXBcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT9cXHMrZm9yXFxzKyg/OihbXFwkXFx3XVtcXCRcXHddKil8KD86XFwoXFxzKihbXFwkXFx3XVtcXCRcXHddKilcXHMqLFxccyooW1xcJFxcd11bXFwkXFx3XSopXFxzKlxcKSkpXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpPyQvLFxuICAgICAgbnVsbE1vZGVsQ3RybCA9IHskc2V0Vmlld1ZhbHVlOiBub29wfTtcbi8vIGpzaGludCBtYXhsZW46IDEwMFxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6IFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uKCRlbGVtZW50LCAkc2NvcGUsICRhdHRycykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIG9wdGlvbnNNYXAgPSB7fSxcbiAgICAgICAgICBuZ01vZGVsQ3RybCA9IG51bGxNb2RlbEN0cmwsXG4gICAgICAgICAgbnVsbE9wdGlvbixcbiAgICAgICAgICB1bmtub3duT3B0aW9uO1xuXG5cbiAgICAgIHNlbGYuZGF0YWJvdW5kID0gJGF0dHJzLm5nTW9kZWw7XG5cblxuICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfLCBudWxsT3B0aW9uXywgdW5rbm93bk9wdGlvbl8pIHtcbiAgICAgICAgbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybF87XG4gICAgICAgIG51bGxPcHRpb24gPSBudWxsT3B0aW9uXztcbiAgICAgICAgdW5rbm93bk9wdGlvbiA9IHVua25vd25PcHRpb25fO1xuICAgICAgfTtcblxuXG4gICAgICBzZWxmLmFkZE9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KHZhbHVlLCAnXCJvcHRpb24gdmFsdWVcIicpO1xuICAgICAgICBvcHRpb25zTWFwW3ZhbHVlXSA9IHRydWU7XG5cbiAgICAgICAgaWYgKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPT0gdmFsdWUpIHtcbiAgICAgICAgICAkZWxlbWVudC52YWwodmFsdWUpO1xuICAgICAgICAgIGlmICh1bmtub3duT3B0aW9uLnBhcmVudCgpKSB1bmtub3duT3B0aW9uLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zODE0NTlcbiAgICAgICAgLy8gQWRkaW5nIGFuIDxvcHRpb24gc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPiBlbGVtZW50IHRvIGEgPHNlbGVjdCByZXF1aXJlZD1cInJlcXVpcmVkXCI+IHNob3VsZFxuICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IHNlbGVjdCB0aGUgbmV3IGVsZW1lbnRcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudFswXS5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICBlbGVtZW50WzBdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuXG4gICAgICBzZWxmLnJlbW92ZU9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc09wdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICBkZWxldGUgb3B0aW9uc01hcFt2YWx1ZV07XG4gICAgICAgICAgaWYgKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICB2YXIgdW5rbm93blZhbCA9ICc/ICcgKyBoYXNoS2V5KHZhbCkgKyAnID8nO1xuICAgICAgICB1bmtub3duT3B0aW9uLnZhbCh1bmtub3duVmFsKTtcbiAgICAgICAgJGVsZW1lbnQucHJlcGVuZCh1bmtub3duT3B0aW9uKTtcbiAgICAgICAgJGVsZW1lbnQudmFsKHVua25vd25WYWwpO1xuICAgICAgICB1bmtub3duT3B0aW9uLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7IC8vIG5lZWRlZCBmb3IgSUVcbiAgICAgIH07XG5cblxuICAgICAgc2VsZi5oYXNPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gb3B0aW9uc01hcC5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBkaXNhYmxlIHVua25vd24gb3B0aW9uIHNvIHRoYXQgd2UgZG9uJ3QgZG8gd29yayB3aGVuIHRoZSB3aG9sZSBzZWxlY3QgaXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IG5vb3A7XG4gICAgICB9KTtcbiAgICB9XSxcblxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZ1xuICAgICAgaWYgKCFjdHJsc1sxXSkgcmV0dXJuO1xuXG4gICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzBdLFxuICAgICAgICAgIG5nTW9kZWxDdHJsID0gY3RybHNbMV0sXG4gICAgICAgICAgbXVsdGlwbGUgPSBhdHRyLm11bHRpcGxlLFxuICAgICAgICAgIG9wdGlvbnNFeHAgPSBhdHRyLm5nT3B0aW9ucyxcbiAgICAgICAgICBudWxsT3B0aW9uID0gZmFsc2UsIC8vIGlmIGZhbHNlLCB1c2VyIHdpbGwgbm90IGJlIGFibGUgdG8gc2VsZWN0IGl0ICh1c2VkIGJ5IG5nT3B0aW9ucylcbiAgICAgICAgICBlbXB0eU9wdGlvbixcbiAgICAgICAgICByZW5kZXJTY2hlZHVsZWQgPSBmYWxzZSxcbiAgICAgICAgICAvLyB3ZSBjYW4ndCBqdXN0IGpxTGl0ZSgnPG9wdGlvbj4nKSBzaW5jZSBqcUxpdGUgaXMgbm90IHNtYXJ0IGVub3VnaFxuICAgICAgICAgIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICAgICAgICAgIG9wdGlvblRlbXBsYXRlID0ganFMaXRlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKSxcbiAgICAgICAgICBvcHRHcm91cFRlbXBsYXRlID1qcUxpdGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0Z3JvdXAnKSksXG4gICAgICAgICAgdW5rbm93bk9wdGlvbiA9IG9wdGlvblRlbXBsYXRlLmNsb25lKCk7XG5cbiAgICAgIC8vIGZpbmQgXCJudWxsXCIgb3B0aW9uXG4gICAgICBmb3IgKHZhciBpID0gMCwgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuKCksIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBpZiAoY2hpbGRyZW5baV0udmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgZW1wdHlPcHRpb24gPSBudWxsT3B0aW9uID0gY2hpbGRyZW4uZXEoaSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZWN0Q3RybC5pbml0KG5nTW9kZWxDdHJsLCBudWxsT3B0aW9uLCB1bmtub3duT3B0aW9uKTtcblxuICAgICAgLy8gcmVxdWlyZWQgdmFsaWRhdG9yXG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgbmdNb2RlbEN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9uc0V4cCkgc2V0dXBBc09wdGlvbnMoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsKTtcbiAgICAgIGVsc2UgaWYgKG11bHRpcGxlKSBzZXR1cEFzTXVsdGlwbGUoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsKTtcbiAgICAgIGVsc2Ugc2V0dXBBc1NpbmdsZShzY29wZSwgZWxlbWVudCwgbmdNb2RlbEN0cmwsIHNlbGVjdEN0cmwpO1xuXG5cbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwQXNTaW5nbGUoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKSB7XG4gICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdmlld1ZhbHVlID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcblxuICAgICAgICAgIGlmIChzZWxlY3RDdHJsLmhhc09wdGlvbih2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICBpZiAodmlld1ZhbHVlID09PSAnJykgZW1wdHlPcHRpb24ucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTsgLy8gdG8gbWFrZSBJRTkgaGFwcHlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZpZXdWYWx1ZSkgJiYgZW1wdHlPcHRpb24pIHtcbiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC52YWwoJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW5kZXJVbmtub3duT3B0aW9uKHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh1bmtub3duT3B0aW9uLnBhcmVudCgpKSB1bmtub3duT3B0aW9uLnJlbW92ZSgpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzZWxlY3RFbGVtZW50LnZhbCgpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwQXNNdWx0aXBsZShzY29wZSwgc2VsZWN0RWxlbWVudCwgY3RybCkge1xuICAgICAgICB2YXIgbGFzdFZpZXc7XG4gICAgICAgIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpdGVtcyA9IG5ldyBIYXNoTWFwKGN0cmwuJHZpZXdWYWx1ZSk7XG4gICAgICAgICAgZm9yRWFjaChzZWxlY3RFbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGlzRGVmaW5lZChpdGVtcy5nZXQob3B0aW9uLnZhbHVlKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gd2UgaGF2ZSB0byBkbyBpdCBvbiBlYWNoIHdhdGNoIHNpbmNlIG5nTW9kZWwgd2F0Y2hlcyByZWZlcmVuY2UsIGJ1dFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHdvcmsgb2YgYW4gYXJyYXksIHNvIHdlIG5lZWQgdG8gc2VlIGlmIGFueXRoaW5nIHdhcyBpbnNlcnRlZC9yZW1vdmVkXG4gICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBzZWxlY3RNdWx0aXBsZVdhdGNoKCkge1xuICAgICAgICAgIGlmICghZXF1YWxzKGxhc3RWaWV3LCBjdHJsLiR2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICBsYXN0VmlldyA9IHNoYWxsb3dDb3B5KGN0cmwuJHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICBjdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgICAgICAgZm9yRWFjaChzZWxlY3RFbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2gob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoYXJyYXkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0dXBBc09wdGlvbnMoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGN0cmwpIHtcbiAgICAgICAgdmFyIG1hdGNoO1xuXG4gICAgICAgIGlmICghKG1hdGNoID0gb3B0aW9uc0V4cC5tYXRjaChOR19PUFRJT05TX1JFR0VYUCkpKSB7XG4gICAgICAgICAgdGhyb3cgbmdPcHRpb25zTWluRXJyKCdpZXhwJyxcbiAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mIFwiICtcbiAgICAgICAgICAgIFwiJ19zZWxlY3RfIChhcyBfbGFiZWxfKT8gZm9yIChfa2V5XywpP192YWx1ZV8gaW4gX2NvbGxlY3Rpb25fJ1wiICtcbiAgICAgICAgICAgIFwiIGJ1dCBnb3QgJ3swfScuIEVsZW1lbnQ6IHsxfVwiLFxuICAgICAgICAgICAgb3B0aW9uc0V4cCwgc3RhcnRpbmdUYWcoc2VsZWN0RWxlbWVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpc3BsYXlGbiA9ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSksXG4gICAgICAgICAgICB2YWx1ZU5hbWUgPSBtYXRjaFs0XSB8fCBtYXRjaFs2XSxcbiAgICAgICAgICAgIHNlbGVjdEFzID0gLyBhcyAvLnRlc3QobWF0Y2hbMF0pICYmIG1hdGNoWzFdLFxuICAgICAgICAgICAgc2VsZWN0QXNGbiA9IHNlbGVjdEFzID8gJHBhcnNlKHNlbGVjdEFzKSA6IG51bGwsXG4gICAgICAgICAgICBrZXlOYW1lID0gbWF0Y2hbNV0sXG4gICAgICAgICAgICBncm91cEJ5Rm4gPSAkcGFyc2UobWF0Y2hbM10gfHwgJycpLFxuICAgICAgICAgICAgdmFsdWVGbiA9ICRwYXJzZShtYXRjaFsyXSA/IG1hdGNoWzFdIDogdmFsdWVOYW1lKSxcbiAgICAgICAgICAgIHZhbHVlc0ZuID0gJHBhcnNlKG1hdGNoWzddKSxcbiAgICAgICAgICAgIHRyYWNrID0gbWF0Y2hbOF0sXG4gICAgICAgICAgICB0cmFja0ZuID0gdHJhY2sgPyAkcGFyc2UobWF0Y2hbOF0pIDogbnVsbCxcbiAgICAgICAgICAgIHRyYWNrS2V5c0NhY2hlID0ge30sXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFycmF5IG9mIGFycmF5IG9mIGV4aXN0aW5nIG9wdGlvbiBncm91cHMgaW4gRE9NLlxuICAgICAgICAgICAgLy8gV2UgdHJ5IHRvIHJldXNlIHRoZXNlIGlmIHBvc3NpYmxlXG4gICAgICAgICAgICAvLyAtIG9wdGlvbkdyb3Vwc0NhY2hlWzBdIGlzIHRoZSBvcHRpb25zIHdpdGggbm8gb3B0aW9uIGdyb3VwXG4gICAgICAgICAgICAvLyAtIG9wdGlvbkdyb3Vwc0NhY2hlWz9dWzBdIGlzIHRoZSBwYXJlbnQ6IGVpdGhlciB0aGUgU0VMRUNUIG9yIE9QVEdST1VQIGVsZW1lbnRcbiAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlID0gW1t7ZWxlbWVudDogc2VsZWN0RWxlbWVudCwgbGFiZWw6Jyd9XV0sXG4gICAgICAgICAgICAvL3JlLXVzYWJsZSBvYmplY3QgdG8gcmVwcmVzZW50IG9wdGlvbidzIGxvY2Fsc1xuICAgICAgICAgICAgbG9jYWxzID0ge307XG5cbiAgICAgICAgaWYgKG51bGxPcHRpb24pIHtcbiAgICAgICAgICAvLyBjb21waWxlIHRoZSBlbGVtZW50IHNpbmNlIHRoZXJlIG1pZ2h0IGJlIGJpbmRpbmdzIGluIGl0XG4gICAgICAgICAgJGNvbXBpbGUobnVsbE9wdGlvbikoc2NvcGUpO1xuXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjbGFzcywgd2hpY2ggaXMgYWRkZWQgYXV0b21hdGljYWxseSBiZWNhdXNlIHdlIHJlY29tcGlsZSB0aGUgZWxlbWVudCBhbmQgaXRcbiAgICAgICAgICAvLyBiZWNvbWVzIHRoZSBjb21waWxhdGlvbiByb290XG4gICAgICAgICAgbnVsbE9wdGlvbi5yZW1vdmVDbGFzcygnbmctc2NvcGUnKTtcblxuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gcmVtb3ZlIGl0IGJlZm9yZSBjYWxsaW5nIHNlbGVjdEVsZW1lbnQuZW1wdHkoKSBiZWNhdXNlIG90aGVyd2lzZSBJRSB3aWxsXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsYWJlbCBmcm9tIHRoZSBlbGVtZW50LiB3dGY/XG4gICAgICAgICAgbnVsbE9wdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIGNvbnRlbnRzLCB3ZSdsbCBhZGQgd2hhdCdzIG5lZWRlZCBiYXNlZCBvbiB0aGUgbW9kZWxcbiAgICAgICAgc2VsZWN0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIHNlbGVjdGlvbkNoYW5nZWQpO1xuXG4gICAgICAgIGN0cmwuJHJlbmRlciA9IHJlbmRlcjtcblxuICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKHZhbHVlc0ZuLCBzY2hlZHVsZVJlbmRlcmluZyk7XG4gICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZ2V0TGFiZWxzLCBzY2hlZHVsZVJlbmRlcmluZyk7XG5cbiAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHsgcmV0dXJuIGN0cmwuJG1vZGVsVmFsdWU7IH0sIHNjaGVkdWxlUmVuZGVyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGxFeHByZXNzaW9uKGV4cHJGbiwga2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgaWYgKGtleU5hbWUpIGxvY2Fsc1trZXlOYW1lXSA9IGtleTtcbiAgICAgICAgICByZXR1cm4gZXhwckZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0aW9uQ2hhbmdlZCgpIHtcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IHZhbHVlc0ZuKHNjb3BlKSB8fCBbXTtcbiAgICAgICAgICAgIHZhciB2aWV3VmFsdWU7XG4gICAgICAgICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgdmlld1ZhbHVlID0gW107XG4gICAgICAgICAgICAgIGZvckVhY2goc2VsZWN0RWxlbWVudC52YWwoKSwgZnVuY3Rpb24oc2VsZWN0ZWRLZXkpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkS2V5ID0gdHJhY2tGbiA/IHRyYWNrS2V5c0NhY2hlW3NlbGVjdGVkS2V5XSA6IHNlbGVjdGVkS2V5O1xuICAgICAgICAgICAgICAgIHZpZXdWYWx1ZS5wdXNoKGdldFZpZXdWYWx1ZShzZWxlY3RlZEtleSwgY29sbGVjdGlvbltzZWxlY3RlZEtleV0pKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRLZXkgPSB0cmFja0ZuID8gdHJhY2tLZXlzQ2FjaGVbc2VsZWN0RWxlbWVudC52YWwoKV0gOiBzZWxlY3RFbGVtZW50LnZhbCgpO1xuICAgICAgICAgICAgICB2aWV3VmFsdWUgPSBnZXRWaWV3VmFsdWUoc2VsZWN0ZWRLZXksIGNvbGxlY3Rpb25bc2VsZWN0ZWRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2aWV3VmFsdWUpO1xuICAgICAgICAgICAgcmVuZGVyKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRWaWV3VmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChrZXkgPT09ICc/Jykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdmlld1ZhbHVlRm4gPSBzZWxlY3RBc0ZuID8gc2VsZWN0QXNGbiA6IHZhbHVlRm47XG4gICAgICAgICAgICByZXR1cm4gY2FsbEV4cHJlc3Npb24odmlld1ZhbHVlRm4sIGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldExhYmVscygpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzID0gdmFsdWVzRm4oc2NvcGUpO1xuICAgICAgICAgIHZhciB0b0Rpc3BsYXk7XG4gICAgICAgICAgaWYgKHZhbHVlcyAmJiBpc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRvRGlzcGxheSA9IG5ldyBBcnJheSh2YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgIHRvRGlzcGxheVtpXSA9IGNhbGxFeHByZXNzaW9uKGRpc3BsYXlGbiwgaSwgdmFsdWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0b0Rpc3BsYXk7XG4gICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IEFkZCBhIHRlc3QgZm9yIHRoaXMgY2FzZVxuICAgICAgICAgICAgdG9EaXNwbGF5ID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHZhbHVlcykge1xuICAgICAgICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgdG9EaXNwbGF5W3Byb3BdID0gY2FsbEV4cHJlc3Npb24oZGlzcGxheUZuLCBwcm9wLCB2YWx1ZXNbcHJvcF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0b0Rpc3BsYXk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVJc1NlbGVjdGVkRm4odmlld1ZhbHVlKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkU2V0O1xuICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgaWYgKHRyYWNrRm4gJiYgaXNBcnJheSh2aWV3VmFsdWUpKSB7XG5cbiAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQgPSBuZXcgSGFzaE1hcChbXSk7XG4gICAgICAgICAgICAgIGZvciAodmFyIHRyYWNrSW5kZXggPSAwOyB0cmFja0luZGV4IDwgdmlld1ZhbHVlLmxlbmd0aDsgdHJhY2tJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJhY2tpbmcgYnkga2V5XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQucHV0KGNhbGxFeHByZXNzaW9uKHRyYWNrRm4sIG51bGwsIHZpZXdWYWx1ZVt0cmFja0luZGV4XSksIHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWxlY3RlZFNldCA9IG5ldyBIYXNoTWFwKHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0cmFja0ZuKSB7XG4gICAgICAgICAgICB2aWV3VmFsdWUgPSBjYWxsRXhwcmVzc2lvbih0cmFja0ZuLCBudWxsLCB2aWV3VmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBpc1NlbGVjdGVkKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjb21wYXJlVmFsdWVGbjtcbiAgICAgICAgICAgIGlmICh0cmFja0ZuKSB7XG4gICAgICAgICAgICAgIGNvbXBhcmVWYWx1ZUZuID0gdHJhY2tGbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0QXNGbikge1xuICAgICAgICAgICAgICBjb21wYXJlVmFsdWVGbiA9IHNlbGVjdEFzRm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb21wYXJlVmFsdWVGbiA9IHZhbHVlRm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gaXNEZWZpbmVkKHNlbGVjdGVkU2V0LnJlbW92ZShjYWxsRXhwcmVzc2lvbihjb21wYXJlVmFsdWVGbiwga2V5LCB2YWx1ZSkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiB2aWV3VmFsdWUgPT0gY2FsbEV4cHJlc3Npb24oY29tcGFyZVZhbHVlRm4sIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzY2hlZHVsZVJlbmRlcmluZygpIHtcbiAgICAgICAgICBpZiAoIXJlbmRlclNjaGVkdWxlZCkge1xuICAgICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KHJlbmRlcik7XG4gICAgICAgICAgICByZW5kZXJTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG5ldyBsYWJlbE1hcCBpcyBjcmVhdGVkIHdpdGggZWFjaCByZW5kZXIuXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGZvciBlYWNoIGV4aXN0aW5nIG9wdGlvbiB3aXRoIGFkZGVkPWZhbHNlLFxuICAgICAgICAgKiBhbmQgZWFjaCBuZXcgb3B0aW9uIHdpdGggYWRkZWQ9dHJ1ZS5cbiAgICAgICAgICogLSBMYWJlbHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kIHR3aWNlLFxuICAgICAgICAgKiAob25jZSB3aXRoIGFkZGVkPXRydWUgYW5kIG9uY2Ugd2l0aCBhZGRlZD1mYWxzZSkgd2lsbCBlbmQgdXAgd2l0aCBhIHZhbHVlIG9mIDAsIGFuZFxuICAgICAgICAgKiB3aWxsIGNhdXNlIG5vIGNoYW5nZSB0byBoYXBwZW4gdG8gdGhlIGNvcnJlc3BvbmRpbmcgb3B0aW9uLlxuICAgICAgICAgKiAtIExhYmVscyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhpcyBtZXRob2Qgb25seSBvbmNlIHdpdGggYWRkZWQ9ZmFsc2Ugd2lsbCBlbmQgdXAgd2l0aCBhXG4gICAgICAgICAqIHZhbHVlIG9mIC0xIGFuZCB3aWxsIGV2ZW50dWFsbHkgYmUgcGFzc2VkIHRvIHNlbGVjdEN0cmwucmVtb3ZlT3B0aW9uKClcbiAgICAgICAgICogLSBMYWJlbHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kIG9ubHkgb25jZSB3aXRoIGFkZGVkPXRydWUgd2lsbCBlbmQgdXAgd2l0aCBhXG4gICAgICAgICAqIHZhbHVlIG9mIDEgYW5kIHdpbGwgZXZlbnR1YWxseSBiZSBwYXNzZWQgdG8gc2VsZWN0Q3RybC5hZGRPcHRpb24oKVxuICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGVMYWJlbE1hcChsYWJlbE1hcCwgbGFiZWwsIGFkZGVkKSB7XG4gICAgICAgICAgbGFiZWxNYXBbbGFiZWxdID0gbGFiZWxNYXBbbGFiZWxdIHx8IDA7XG4gICAgICAgICAgbGFiZWxNYXBbbGFiZWxdICs9IChhZGRlZCA/IDEgOiAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgcmVuZGVyU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAvLyBUZW1wb3JhcnkgbG9jYXRpb24gZm9yIHRoZSBvcHRpb24gZ3JvdXBzIGJlZm9yZSB3ZSByZW5kZXIgdGhlbVxuICAgICAgICAgIHZhciBvcHRpb25Hcm91cHMgPSB7Jyc6W119LFxuICAgICAgICAgICAgICBvcHRpb25Hcm91cE5hbWVzID0gWycnXSxcbiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lLFxuICAgICAgICAgICAgICBvcHRpb25Hcm91cCxcbiAgICAgICAgICAgICAgb3B0aW9uLFxuICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCwgZXhpc3RpbmdPcHRpb25zLCBleGlzdGluZ09wdGlvbixcbiAgICAgICAgICAgICAgdmlld1ZhbHVlID0gY3RybC4kdmlld1ZhbHVlLFxuICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW10sXG4gICAgICAgICAgICAgIGtleXMgPSBrZXlOYW1lID8gc29ydGVkS2V5cyh2YWx1ZXMpIDogdmFsdWVzLFxuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBncm91cExlbmd0aCwgbGVuZ3RoLFxuICAgICAgICAgICAgICBncm91cEluZGV4LCBpbmRleCxcbiAgICAgICAgICAgICAgbGFiZWxNYXAgPSB7fSxcbiAgICAgICAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgICAgICAgIGlzU2VsZWN0ZWQgPSBjcmVhdGVJc1NlbGVjdGVkRm4odmlld1ZhbHVlKSxcbiAgICAgICAgICAgICAgYW55U2VsZWN0ZWQgPSBmYWxzZSxcbiAgICAgICAgICAgICAgbGFzdEVsZW1lbnQsXG4gICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICBvcHRpb25JZDtcblxuICAgICAgICAgIHRyYWNrS2V5c0NhY2hlID0ge307XG5cbiAgICAgICAgICAvLyBXZSBub3cgYnVpbGQgdXAgdGhlIGxpc3Qgb2Ygb3B0aW9ucyB3ZSBuZWVkICh3ZSBtZXJnZSBsYXRlcilcbiAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBrZXkgPSBpbmRleDtcbiAgICAgICAgICAgIGlmIChrZXlOYW1lKSB7XG4gICAgICAgICAgICAgIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSA9PT0gJyQnKSBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2tleV07XG5cbiAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZSA9IGNhbGxFeHByZXNzaW9uKGdyb3VwQnlGbiwga2V5LCB2YWx1ZSkgfHwgJyc7XG4gICAgICAgICAgICBpZiAoIShvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc1tvcHRpb25Hcm91cE5hbWVdKSkge1xuICAgICAgICAgICAgICBvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc1tvcHRpb25Hcm91cE5hbWVdID0gW107XG4gICAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZXMucHVzaChvcHRpb25Hcm91cE5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxlY3RlZCA9IGlzU2VsZWN0ZWQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICBhbnlTZWxlY3RlZCA9IGFueVNlbGVjdGVkIHx8IHNlbGVjdGVkO1xuXG4gICAgICAgICAgICBsYWJlbCA9IGNhbGxFeHByZXNzaW9uKGRpc3BsYXlGbiwga2V5LCB2YWx1ZSk7IC8vIHdoYXQgd2lsbCBiZSBzZWVuIGJ5IHRoZSB1c2VyXG5cbiAgICAgICAgICAgIC8vIGRvaW5nIGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKSB8fCAnJyBvdmVyd3JpdGVzIHplcm8gdmFsdWVzXG4gICAgICAgICAgICBsYWJlbCA9IGlzRGVmaW5lZChsYWJlbCkgPyBsYWJlbCA6ICcnO1xuICAgICAgICAgICAgb3B0aW9uSWQgPSB0cmFja0ZuID8gdHJhY2tGbihzY29wZSwgbG9jYWxzKSA6IChrZXlOYW1lID8ga2V5c1tpbmRleF0gOiBpbmRleCk7XG4gICAgICAgICAgICBpZiAodHJhY2tGbikge1xuICAgICAgICAgICAgICB0cmFja0tleXNDYWNoZVtvcHRpb25JZF0gPSBrZXk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbkdyb3VwLnB1c2goe1xuICAgICAgICAgICAgICAvLyBlaXRoZXIgdGhlIGluZGV4IGludG8gYXJyYXkgb3Iga2V5IGZyb20gb2JqZWN0XG4gICAgICAgICAgICAgIGlkOiBvcHRpb25JZCxcbiAgICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWQgICAgICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIHdlIHNob3VsZCBiZSBzZWxlY3RlZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgICAgICAgIGlmIChudWxsT3B0aW9uIHx8IHZpZXdWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBpbnNlcnQgbnVsbCBvcHRpb24gaWYgd2UgaGF2ZSBhIHBsYWNlaG9sZGVyLCBvciB0aGUgbW9kZWwgaXMgbnVsbFxuICAgICAgICAgICAgICBvcHRpb25Hcm91cHNbJyddLnVuc2hpZnQoe2lkOicnLCBsYWJlbDonJywgc2VsZWN0ZWQ6IWFueVNlbGVjdGVkfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFhbnlTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAvLyBvcHRpb24gY291bGQgbm90IGJlIGZvdW5kLCB3ZSBoYXZlIHRvIGluc2VydCB0aGUgdW5kZWZpbmVkIGl0ZW1cbiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBzWycnXS51bnNoaWZ0KHtpZDonPycsIGxhYmVsOicnLCBzZWxlY3RlZDp0cnVlfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTm93IHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBsaXN0IG9mIERPTSBub2RlcyB0byBtYXRjaCB0aGUgb3B0aW9uR3JvdXBzIHdlIGNvbXB1dGVkIGFib3ZlXG4gICAgICAgICAgZm9yIChncm91cEluZGV4ID0gMCwgZ3JvdXBMZW5ndGggPSBvcHRpb25Hcm91cE5hbWVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgIGdyb3VwSW5kZXggPCBncm91cExlbmd0aDtcbiAgICAgICAgICAgICAgIGdyb3VwSW5kZXgrKykge1xuICAgICAgICAgICAgLy8gY3VycmVudCBvcHRpb24gZ3JvdXAgbmFtZSBvciAnJyBpZiBubyBncm91cFxuICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lID0gb3B0aW9uR3JvdXBOYW1lc1tncm91cEluZGV4XTtcblxuICAgICAgICAgICAgLy8gbGlzdCBvZiBvcHRpb25zIGZvciB0aGF0IGdyb3VwLiAoZmlyc3QgaXRlbSBoYXMgdGhlIHBhcmVudClcbiAgICAgICAgICAgIG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzW29wdGlvbkdyb3VwTmFtZV07XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGggPD0gZ3JvdXBJbmRleCkge1xuICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGdyb3cgdGhlIG9wdGlvbkdyb3Vwc1xuICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCA9IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBvcHRHcm91cFRlbXBsYXRlLmNsb25lKCkuYXR0cignbGFiZWwnLCBvcHRpb25Hcm91cE5hbWUpLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb25Hcm91cC5sYWJlbFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMgPSBbZXhpc3RpbmdQYXJlbnRdO1xuICAgICAgICAgICAgICBvcHRpb25Hcm91cHNDYWNoZS5wdXNoKGV4aXN0aW5nT3B0aW9ucyk7XG4gICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuYXBwZW5kKGV4aXN0aW5nUGFyZW50LmVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXhpc3RpbmdPcHRpb25zID0gb3B0aW9uR3JvdXBzQ2FjaGVbZ3JvdXBJbmRleF07XG4gICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50ID0gZXhpc3RpbmdPcHRpb25zWzBdOyAgLy8gZWl0aGVyIFNFTEVDVCAobm8gZ3JvdXApIG9yIE9QVEdST1VQIGVsZW1lbnRcblxuICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIE9QVEdST1VQIGxhYmVsIGlmIG5vdCB0aGUgc2FtZS5cbiAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nUGFyZW50LmxhYmVsICE9IG9wdGlvbkdyb3VwTmFtZSkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50LmVsZW1lbnQuYXR0cignbGFiZWwnLCBleGlzdGluZ1BhcmVudC5sYWJlbCA9IG9wdGlvbkdyb3VwTmFtZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBudWxsOyAgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZ1xuICAgICAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9wdGlvbkdyb3VwLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgb3B0aW9uID0gb3B0aW9uR3JvdXBbaW5kZXhdO1xuICAgICAgICAgICAgICBpZiAoKGV4aXN0aW5nT3B0aW9uID0gZXhpc3RpbmdPcHRpb25zW2luZGV4KzFdKSkge1xuICAgICAgICAgICAgICAgIC8vIHJldXNlIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBleGlzdGluZ09wdGlvbi5lbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ09wdGlvbi5sYWJlbCAhPT0gb3B0aW9uLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVMYWJlbE1hcChsYWJlbE1hcCwgZXhpc3RpbmdPcHRpb24ubGFiZWwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZUxhYmVsTWFwKGxhYmVsTWFwLCBvcHRpb24ubGFiZWwsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQudGV4dChleGlzdGluZ09wdGlvbi5sYWJlbCA9IG9wdGlvbi5sYWJlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ09wdGlvbi5pZCAhPT0gb3B0aW9uLmlkKSB7XG4gICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC52YWwoZXhpc3RpbmdPcHRpb24uaWQgPSBvcHRpb24uaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBsYXN0RWxlbWVudC5wcm9wKCdzZWxlY3RlZCcpIHByb3ZpZGVkIGJ5IGpRdWVyeSBoYXMgc2lkZS1lZmZlY3RzXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RFbGVtZW50WzBdLnNlbGVjdGVkICE9PSBvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LnByb3AoJ3NlbGVjdGVkJywgKGV4aXN0aW5nT3B0aW9uLnNlbGVjdGVkID0gb3B0aW9uLnNlbGVjdGVkKSk7XG4gICAgICAgICAgICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZWUgIzc2OTJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHNlbGVjdGVkIGl0ZW0gd291bGRuJ3QgdmlzdWFsbHkgdXBkYXRlIG9uIElFIHdpdGhvdXQgdGhpcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGVzdGVkIG9uIFdpbjc6IElFOSwgSUUxMCBhbmQgSUUxMS4gRnV0dXJlIElFcyBzaG91bGQgYmUgdGVzdGVkIGFzIHdlbGxcbiAgICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnLCBleGlzdGluZ09wdGlvbi5zZWxlY3RlZCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGdyb3cgZWxlbWVudHNcblxuICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgYSBudWxsIG9wdGlvblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaWQgPT09ICcnICYmIG51bGxPcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgIC8vIHB1dCBiYWNrIHRoZSBwcmUtY29tcGlsZWQgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IG51bGxPcHRpb247XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIGpRdWVyeSh2MS40LjIpIEJ1ZzogV2Ugc2hvdWxkIGJlIGFibGUgdG8gY2hhaW4gdGhlIG1ldGhvZCBjYWxscywgYnV0XG4gICAgICAgICAgICAgICAgICAvLyBpbiB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5IG9uIHNvbWUgYnJvd3NlciB0aGUgLnRleHQoKSByZXR1cm5zIGEgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAvLyByYXRoZXIgdGhlbiB0aGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgIChlbGVtZW50ID0gb3B0aW9uVGVtcGxhdGUuY2xvbmUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAudmFsKG9wdGlvbi5pZClcbiAgICAgICAgICAgICAgICAgICAgICAucHJvcCgnc2VsZWN0ZWQnLCBvcHRpb24uc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NlbGVjdGVkJywgb3B0aW9uLnNlbGVjdGVkKVxuICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KG9wdGlvbi5sYWJlbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdPcHRpb25zLnB1c2goZXhpc3RpbmdPcHRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb24ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb24uaWQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBvcHRpb24uc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB1cGRhdGVMYWJlbE1hcChsYWJlbE1hcCwgb3B0aW9uLmxhYmVsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LmFmdGVyKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudC5lbGVtZW50LmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZW1vdmUgYW55IGV4Y2Vzc2l2ZSBPUFRJT05zIGluIGEgZ3JvdXBcbiAgICAgICAgICAgIGluZGV4Kys7IC8vIGluY3JlbWVudCBzaW5jZSB0aGUgZXhpc3RpbmdPcHRpb25zWzBdIGlzIHBhcmVudCBlbGVtZW50IG5vdCBPUFRJT05cbiAgICAgICAgICAgIHdoaWxlIChleGlzdGluZ09wdGlvbnMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgICAgICAgb3B0aW9uID0gZXhpc3RpbmdPcHRpb25zLnBvcCgpO1xuICAgICAgICAgICAgICB1cGRhdGVMYWJlbE1hcChsYWJlbE1hcCwgb3B0aW9uLmxhYmVsLCBmYWxzZSk7XG4gICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yRWFjaChsYWJlbE1hcCwgZnVuY3Rpb24oY291bnQsIGxhYmVsKSB7XG4gICAgICAgICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihsYWJlbCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY291bnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24obGFiZWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gcmVtb3ZlIGFueSBleGNlc3NpdmUgT1BUR1JPVVBzIGZyb20gc2VsZWN0XG4gICAgICAgICAgd2hpbGUgKG9wdGlvbkdyb3Vwc0NhY2hlLmxlbmd0aCA+IGdyb3VwSW5kZXgpIHtcbiAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlLnBvcCgpWzBdLmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBvcHRpb25EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkge1xuICB2YXIgbnVsbFNlbGVjdEN0cmwgPSB7XG4gICAgYWRkT3B0aW9uOiBub29wLFxuICAgIHJlbW92ZU9wdGlvbjogbm9vcFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChhdHRyLnZhbHVlKSkge1xuICAgICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LnRleHQoKSwgdHJ1ZSk7XG4gICAgICAgIGlmICghaW50ZXJwb2xhdGVGbikge1xuICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBlbGVtZW50LnRleHQoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBzZWxlY3RDdHJsTmFtZSA9ICckc2VsZWN0Q29udHJvbGxlcicsXG4gICAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpLFxuICAgICAgICAgICAgc2VsZWN0Q3RybCA9IHBhcmVudC5kYXRhKHNlbGVjdEN0cmxOYW1lKSB8fFxuICAgICAgICAgICAgICBwYXJlbnQucGFyZW50KCkuZGF0YShzZWxlY3RDdHJsTmFtZSk7IC8vIGluIGNhc2Ugd2UgYXJlIGluIG9wdGdyb3VwXG5cbiAgICAgICAgaWYgKCFzZWxlY3RDdHJsIHx8ICFzZWxlY3RDdHJsLmRhdGFib3VuZCkge1xuICAgICAgICAgIHNlbGVjdEN0cmwgPSBudWxsU2VsZWN0Q3RybDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZUZuKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBuZXdWYWwpO1xuICAgICAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlT3B0aW9uKG9sZFZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihuZXdWYWwsIGVsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdEN0cmwuYWRkT3B0aW9uKGF0dHIudmFsdWUsIGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZU9wdGlvbihhdHRyLnZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgc3R5bGVEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdFJyxcbiAgdGVybWluYWw6IGZhbHNlXG59KTtcblxuICBpZiAod2luZG93LmFuZ3VsYXIuYm9vdHN0cmFwKSB7XG4gICAgLy9Bbmd1bGFySlMgaXMgYWxyZWFkeSBsb2FkZWQsIHNvIHdlIGNhbiByZXR1cm4gaGVyZS4uLlxuICAgIGNvbnNvbGUubG9nKCdXQVJOSU5HOiBUcmllZCB0byBsb2FkIGFuZ3VsYXIgbW9yZSB0aGFuIG9uY2UuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy90cnkgdG8gYmluZCB0byBqcXVlcnkgbm93IHNvIHRoYXQgb25lIGNhbiB3cml0ZSBqcUxpdGUoZG9jdW1lbnQpLnJlYWR5KClcbiAgLy9idXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLlxuICBiaW5kSlF1ZXJ5KCk7XG5cbiAgcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpO1xuXG4gIGpxTGl0ZShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgYW5ndWxhckluaXQoZG9jdW1lbnQsIGJvb3RzdHJhcCk7XG4gIH0pO1xuXG59KSh3aW5kb3csIGRvY3VtZW50KTtcblxuIXdpbmRvdy5hbmd1bGFyLiQkY3NwKCkgJiYgd2luZG93LmFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5AY2hhcnNldCBcIlVURi04XCI7W25nXFxcXDpjbG9ha10sW25nLWNsb2FrXSxbZGF0YS1uZy1jbG9ha10sW3gtbmctY2xvYWtdLC5uZy1jbG9haywueC1uZy1jbG9haywubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSl7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fW5nXFxcXDpmb3Jte2Rpc3BsYXk6YmxvY2s7fTwvc3R5bGU+Jyk7IiwiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIGxvZGFzaCAzLjguMCAoQ3VzdG9tIEJ1aWxkKSBsb2Rhc2guY29tL2xpY2Vuc2UgfCBVbmRlcnNjb3JlLmpzIDEuOC4zIHVuZGVyc2NvcmVqcy5vcmcvTElDRU5TRVxyXG4gKiBCdWlsZDogYGxvZGFzaCBtb2Rlcm4gLW8gLi9sb2Rhc2guanNgXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHQpe2lmKG4hPT10KXt2YXIgcj1uPT09bixlPXQ9PT10O2lmKG4+dHx8IXJ8fG49PT13JiZlKXJldHVybiAxO2lmKG48dHx8IWV8fHQ9PT13JiZyKXJldHVybi0xfXJldHVybiAwfWZ1bmN0aW9uIHQobix0LHIpe2Zvcih2YXIgZT1uLmxlbmd0aCx1PXI/ZTotMTtyP3UtLTorK3U8ZTspaWYodChuW3VdLHUsbikpcmV0dXJuIHU7cmV0dXJuLTF9ZnVuY3Rpb24gcihuLHQscil7aWYodCE9PXQpcmV0dXJuIHAobixyKTtyLT0xO2Zvcih2YXIgZT1uLmxlbmd0aDsrK3I8ZTspaWYobltyXT09PXQpcmV0dXJuIHI7cmV0dXJuLTF9ZnVuY3Rpb24gZShuKXtyZXR1cm4gdHlwZW9mIG49PVwiZnVuY3Rpb25cInx8ZmFsc2V9ZnVuY3Rpb24gdShuKXtyZXR1cm4gdHlwZW9mIG49PVwic3RyaW5nXCI/bjpudWxsPT1uP1wiXCI6bitcIlwifWZ1bmN0aW9uIG8obil7cmV0dXJuIG4uY2hhckNvZGVBdCgwKX1mdW5jdGlvbiBpKG4sdCl7Zm9yKHZhciByPS0xLGU9bi5sZW5ndGg7KytyPGUmJi0xPHQuaW5kZXhPZihuLmNoYXJBdChyKSk7KTtcclxucmV0dXJuIHJ9ZnVuY3Rpb24gZihuLHQpe2Zvcih2YXIgcj1uLmxlbmd0aDtyLS0mJi0xPHQuaW5kZXhPZihuLmNoYXJBdChyKSk7KTtyZXR1cm4gcn1mdW5jdGlvbiBhKHQscil7cmV0dXJuIG4odC5hLHIuYSl8fHQuYi1yLmJ9ZnVuY3Rpb24gYyhuKXtyZXR1cm4gJG5bbl19ZnVuY3Rpb24gbChuKXtyZXR1cm4gTG5bbl19ZnVuY3Rpb24gcyhuKXtyZXR1cm5cIlxcXFxcIitNbltuXX1mdW5jdGlvbiBwKG4sdCxyKXt2YXIgZT1uLmxlbmd0aDtmb3IodCs9cj8wOi0xO3I/dC0tOisrdDxlOyl7dmFyIHU9blt0XTtpZih1IT09dSlyZXR1cm4gdH1yZXR1cm4tMX1mdW5jdGlvbiBoKG4pe3JldHVybiEhbiYmdHlwZW9mIG49PVwib2JqZWN0XCJ9ZnVuY3Rpb24gXyhuKXtyZXR1cm4gMTYwPj1uJiY5PD1uJiYxMz49bnx8MzI9PW58fDE2MD09bnx8NTc2MD09bnx8NjE1OD09bnx8ODE5Mjw9biYmKDgyMDI+PW58fDgyMzI9PW58fDgyMzM9PW58fDgyMzk9PW58fDgyODc9PW58fDEyMjg4PT1ufHw2NTI3OT09bik7XHJcblxyXG59ZnVuY3Rpb24gdihuLHQpe2Zvcih2YXIgcj0tMSxlPW4ubGVuZ3RoLHU9LTEsbz1bXTsrK3I8ZTspbltyXT09PXQmJihuW3JdPXosb1srK3VdPXIpO3JldHVybiBvfWZ1bmN0aW9uIGcobil7Zm9yKHZhciB0PS0xLHI9bi5sZW5ndGg7Kyt0PHImJl8obi5jaGFyQ29kZUF0KHQpKTspO3JldHVybiB0fWZ1bmN0aW9uIHkobil7Zm9yKHZhciB0PW4ubGVuZ3RoO3QtLSYmXyhuLmNoYXJDb2RlQXQodCkpOyk7cmV0dXJuIHR9ZnVuY3Rpb24gZChuKXtyZXR1cm4gem5bbl19ZnVuY3Rpb24gbShfKXtmdW5jdGlvbiAkbihuKXtpZihoKG4pJiYhKFRvKG4pfHxuIGluc3RhbmNlb2YgQm4pKXtpZihuIGluc3RhbmNlb2Ygem4pcmV0dXJuIG47aWYoR2UuY2FsbChuLFwiX19jaGFpbl9fXCIpJiZHZS5jYWxsKG4sXCJfX3dyYXBwZWRfX1wiKSlyZXR1cm4gTHIobil9cmV0dXJuIG5ldyB6bihuKX1mdW5jdGlvbiBMbigpe31mdW5jdGlvbiB6bihuLHQscil7dGhpcy5fX3dyYXBwZWRfXz1uLHRoaXMuX19hY3Rpb25zX189cnx8W10sXHJcbnRoaXMuX19jaGFpbl9fPSEhdH1mdW5jdGlvbiBCbihuKXt0aGlzLl9fd3JhcHBlZF9fPW4sdGhpcy5fX2FjdGlvbnNfXz1udWxsLHRoaXMuX19kaXJfXz0xLHRoaXMuX19maWx0ZXJlZF9fPWZhbHNlLHRoaXMuX19pdGVyYXRlZXNfXz1udWxsLHRoaXMuX190YWtlQ291bnRfXz1JdSx0aGlzLl9fdmlld3NfXz1udWxsfWZ1bmN0aW9uIE1uKCl7dGhpcy5fX2RhdGFfXz17fX1mdW5jdGlvbiBEbihuKXt2YXIgdD1uP24ubGVuZ3RoOjA7Zm9yKHRoaXMuZGF0YT17aGFzaDpkdShudWxsKSxzZXQ6bmV3IGx1fTt0LS07KXRoaXMucHVzaChuW3RdKX1mdW5jdGlvbiBQbihuLHQpe3ZhciByPW4uZGF0YTtyZXR1cm4odHlwZW9mIHQ9PVwic3RyaW5nXCJ8fHNlKHQpP3Iuc2V0Lmhhcyh0KTpyLmhhc2hbdF0pPzA6LTF9ZnVuY3Rpb24gcW4obix0KXt2YXIgcj0tMSxlPW4ubGVuZ3RoO2Zvcih0fHwodD1VZShlKSk7KytyPGU7KXRbcl09bltyXTtyZXR1cm4gdH1mdW5jdGlvbiBLbihuLHQpe2Zvcih2YXIgcj0tMSxlPW4ubGVuZ3RoOysrcjxlJiZmYWxzZSE9PXQobltyXSxyLG4pOyk7XHJcbnJldHVybiBufWZ1bmN0aW9uIFZuKG4sdCl7Zm9yKHZhciByPS0xLGU9bi5sZW5ndGg7KytyPGU7KWlmKCF0KG5bcl0scixuKSlyZXR1cm4gZmFsc2U7cmV0dXJuIHRydWV9ZnVuY3Rpb24gR24obix0KXtmb3IodmFyIHI9LTEsZT1uLmxlbmd0aCx1PS0xLG89W107KytyPGU7KXt2YXIgaT1uW3JdO3QoaSxyLG4pJiYob1srK3VdPWkpfXJldHVybiBvfWZ1bmN0aW9uIEpuKG4sdCl7Zm9yKHZhciByPS0xLGU9bi5sZW5ndGgsdT1VZShlKTsrK3I8ZTspdVtyXT10KG5bcl0scixuKTtyZXR1cm4gdX1mdW5jdGlvbiBYbihuLHQscixlKXt2YXIgdT0tMSxvPW4ubGVuZ3RoO2ZvcihlJiZvJiYocj1uWysrdV0pOysrdTxvOylyPXQocixuW3VdLHUsbik7cmV0dXJuIHJ9ZnVuY3Rpb24gSG4obix0KXtmb3IodmFyIHI9LTEsZT1uLmxlbmd0aDsrK3I8ZTspaWYodChuW3JdLHIsbikpcmV0dXJuIHRydWU7cmV0dXJuIGZhbHNlfWZ1bmN0aW9uIFFuKG4sdCl7cmV0dXJuIG49PT13P3Q6bn1mdW5jdGlvbiBudChuLHQscixlKXtcclxucmV0dXJuIG4hPT13JiZHZS5jYWxsKGUscik/bjp0fWZ1bmN0aW9uIHR0KG4sdCxyKXt2YXIgZT1Lbyh0KTtmdS5hcHBseShlLFp1KHQpKTtmb3IodmFyIHU9LTEsbz1lLmxlbmd0aDsrK3U8bzspe3ZhciBpPWVbdV0sZj1uW2ldLGE9cihmLHRbaV0saSxuLHQpOyhhPT09YT9hPT09ZjpmIT09ZikmJihmIT09d3x8aSBpbiBuKXx8KG5baV09YSl9cmV0dXJuIG59ZnVuY3Rpb24gcnQobix0KXtmb3IodmFyIHI9LTEsZT1udWxsPT1uLHU9IWUmJmpyKG4pLG89dSYmbi5sZW5ndGgsaT10Lmxlbmd0aCxmPVVlKGkpOysrcjxpOyl7dmFyIGE9dFtyXTtmW3JdPXU/a3IoYSxvKT9uW2FdOnc6ZT93Om5bYV19cmV0dXJuIGZ9ZnVuY3Rpb24gZXQobix0LHIpe3J8fChyPXt9KTtmb3IodmFyIGU9LTEsdT10Lmxlbmd0aDsrK2U8dTspe3ZhciBvPXRbZV07cltvXT1uW29dfXJldHVybiByfWZ1bmN0aW9uIHV0KG4sdCxyKXt2YXIgZT10eXBlb2YgbjtyZXR1cm5cImZ1bmN0aW9uXCI9PWU/dD09PXc/bjp6dChuLHQscik6bnVsbD09bj9SZTpcIm9iamVjdFwiPT1lP3d0KG4pOnQ9PT13P1RlKG4pOmJ0KG4sdCk7XHJcblxyXG59ZnVuY3Rpb24gb3Qobix0LHIsZSx1LG8saSl7dmFyIGY7aWYociYmKGY9dT9yKG4sZSx1KTpyKG4pKSxmIT09dylyZXR1cm4gZjtpZighc2UobikpcmV0dXJuIG47aWYoZT1UbyhuKSl7aWYoZj13cihuKSwhdClyZXR1cm4gcW4obixmKX1lbHNle3ZhciBhPVhlLmNhbGwobiksYz1hPT1LO2lmKGEhPVkmJmEhPUImJighY3x8dSkpcmV0dXJuIE5uW2FdP3hyKG4sYSx0KTp1P246e307aWYoZj1icihjP3t9Om4pLCF0KXJldHVybiAkdShmLG4pfWZvcihvfHwobz1bXSksaXx8KGk9W10pLHU9by5sZW5ndGg7dS0tOylpZihvW3VdPT1uKXJldHVybiBpW3VdO3JldHVybiBvLnB1c2gobiksaS5wdXNoKGYpLChlP0tuOmh0KShuLGZ1bmN0aW9uKGUsdSl7Zlt1XT1vdChlLHQscix1LG4sbyxpKX0pLGZ9ZnVuY3Rpb24gaXQobix0LHIpe2lmKHR5cGVvZiBuIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IFBlKEwpO3JldHVybiBzdShmdW5jdGlvbigpe24uYXBwbHkodyxyKX0sdCl9ZnVuY3Rpb24gZnQobix0KXtcclxudmFyIGU9bj9uLmxlbmd0aDowLHU9W107aWYoIWUpcmV0dXJuIHU7dmFyIG89LTEsaT1tcigpLGY9aT09cixhPWYmJjIwMDw9dC5sZW5ndGg/cXUodCk6bnVsbCxjPXQubGVuZ3RoO2EmJihpPVBuLGY9ZmFsc2UsdD1hKTtuOmZvcig7KytvPGU7KWlmKGE9bltvXSxmJiZhPT09YSl7Zm9yKHZhciBsPWM7bC0tOylpZih0W2xdPT09YSljb250aW51ZSBuO3UucHVzaChhKX1lbHNlIDA+aSh0LGEsMCkmJnUucHVzaChhKTtyZXR1cm4gdX1mdW5jdGlvbiBhdChuLHQpe3ZhciByPXRydWU7cmV0dXJuIHp1KG4sZnVuY3Rpb24obixlLHUpe3JldHVybiByPSEhdChuLGUsdSl9KSxyfWZ1bmN0aW9uIGN0KG4sdCl7dmFyIHI9W107cmV0dXJuIHp1KG4sZnVuY3Rpb24obixlLHUpe3QobixlLHUpJiZyLnB1c2gobil9KSxyfWZ1bmN0aW9uIGx0KG4sdCxyLGUpe3ZhciB1O3JldHVybiByKG4sZnVuY3Rpb24obixyLG8pe3JldHVybiB0KG4scixvKT8odT1lP3I6bixmYWxzZSk6dm9pZCAwfSksdX1mdW5jdGlvbiBzdChuLHQscil7XHJcbmZvcih2YXIgZT0tMSx1PW4ubGVuZ3RoLG89LTEsaT1bXTsrK2U8dTspe3ZhciBmPW5bZV07aWYoaChmKSYmanIoZikmJihyfHxUbyhmKXx8YWUoZikpKXt0JiYoZj1zdChmLHQscikpO2Zvcih2YXIgYT0tMSxjPWYubGVuZ3RoOysrYTxjOylpWysrb109ZlthXX1lbHNlIHJ8fChpWysrb109Zil9cmV0dXJuIGl9ZnVuY3Rpb24gcHQobix0KXtNdShuLHQsbWUpfWZ1bmN0aW9uIGh0KG4sdCl7cmV0dXJuIE11KG4sdCxLbyl9ZnVuY3Rpb24gX3Qobix0KXtyZXR1cm4gRHUobix0LEtvKX1mdW5jdGlvbiB2dChuLHQpe2Zvcih2YXIgcj0tMSxlPXQubGVuZ3RoLHU9LTEsbz1bXTsrK3I8ZTspe3ZhciBpPXRbcl07Tm8obltpXSkmJihvWysrdV09aSl9cmV0dXJuIG99ZnVuY3Rpb24gZ3Qobix0LHIpe2lmKG51bGwhPW4pe3IhPT13JiZyIGluIEZyKG4pJiYodD1bcl0pLHI9LTE7Zm9yKHZhciBlPXQubGVuZ3RoO251bGwhPW4mJisrcjxlOyluPW5bdFtyXV07cmV0dXJuIHImJnI9PWU/bjp3fVxyXG59ZnVuY3Rpb24geXQobix0LHIsZSx1LG8pe2lmKG49PT10KXJldHVybiB0cnVlO3ZhciBpPXR5cGVvZiBuLGY9dHlwZW9mIHQ7aWYoXCJmdW5jdGlvblwiIT1pJiZcIm9iamVjdFwiIT1pJiZcImZ1bmN0aW9uXCIhPWYmJlwib2JqZWN0XCIhPWZ8fG51bGw9PW58fG51bGw9PXQpbj1uIT09biYmdCE9PXQ7ZWxzZSBuOnt2YXIgaT15dCxmPVRvKG4pLGE9VG8odCksYz1NLGw9TTtmfHwoYz1YZS5jYWxsKG4pLGM9PUI/Yz1ZOmMhPVkmJihmPWdlKG4pKSksYXx8KGw9WGUuY2FsbCh0KSxsPT1CP2w9WTpsIT1ZJiZnZSh0KSk7dmFyIHM9Yz09WSxhPWw9PVksbD1jPT1sO2lmKCFsfHxmfHxzKXtpZighZSYmKGM9cyYmR2UuY2FsbChuLFwiX193cmFwcGVkX19cIiksYT1hJiZHZS5jYWxsKHQsXCJfX3dyYXBwZWRfX1wiKSxjfHxhKSl7bj1pKGM/bi52YWx1ZSgpOm4sYT90LnZhbHVlKCk6dCxyLGUsdSxvKTticmVhayBufWlmKGwpe2Zvcih1fHwodT1bXSksb3x8KG89W10pLGM9dS5sZW5ndGg7Yy0tOylpZih1W2NdPT1uKXtcclxubj1vW2NdPT10O2JyZWFrIG59dS5wdXNoKG4pLG8ucHVzaCh0KSxuPShmP19yOmdyKShuLHQsaSxyLGUsdSxvKSx1LnBvcCgpLG8ucG9wKCl9ZWxzZSBuPWZhbHNlfWVsc2Ugbj12cihuLHQsYyl9cmV0dXJuIG59ZnVuY3Rpb24gZHQobix0LHIsZSx1KXtmb3IodmFyIG89LTEsaT10Lmxlbmd0aCxmPSF1OysrbzxpOylpZihmJiZlW29dP3Jbb10hPT1uW3Rbb11dOiEodFtvXWluIG4pKXJldHVybiBmYWxzZTtmb3Iobz0tMTsrK288aTspe3ZhciBhPXRbb10sYz1uW2FdLGw9cltvXTtpZihmJiZlW29dP2E9YyE9PXd8fGEgaW4gbjooYT11P3UoYyxsLGEpOncsYT09PXcmJihhPXl0KGwsYyx1LHRydWUpKSksIWEpcmV0dXJuIGZhbHNlfXJldHVybiB0cnVlfWZ1bmN0aW9uIG10KG4sdCl7dmFyIHI9LTEsZT1qcihuKT9VZShuLmxlbmd0aCk6W107cmV0dXJuIHp1KG4sZnVuY3Rpb24obix1LG8pe2VbKytyXT10KG4sdSxvKX0pLGV9ZnVuY3Rpb24gd3Qobil7dmFyIHQ9S28obikscj10Lmxlbmd0aDtpZighcilyZXR1cm4gSWUodHJ1ZSk7XHJcblxyXG5pZigxPT1yKXt2YXIgZT10WzBdLHU9bltlXTtpZihDcih1KSlyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIG51bGw9PW4/ZmFsc2U6bltlXT09PXUmJih1IT09d3x8ZSBpbiBGcihuKSl9fWZvcih2YXIgbz1VZShyKSxpPVVlKHIpO3ItLTspdT1uW3Rbcl1dLG9bcl09dSxpW3JdPUNyKHUpO3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gbnVsbCE9biYmZHQoRnIobiksdCxvLGkpfX1mdW5jdGlvbiBidChuLHQpe3ZhciByPVRvKG4pLGU9RXIobikmJkNyKHQpLHU9bitcIlwiO3JldHVybiBuPSRyKG4pLGZ1bmN0aW9uKG8pe2lmKG51bGw9PW8pcmV0dXJuIGZhbHNlO3ZhciBpPXU7aWYobz1GcihvKSwhKCFyJiZlfHxpIGluIG8pKXtpZihvPTE9PW4ubGVuZ3RoP286Z3QobyxJdChuLDAsLTEpKSxudWxsPT1vKXJldHVybiBmYWxzZTtpPVByKG4pLG89RnIobyl9cmV0dXJuIG9baV09PT10P3QhPT13fHxpIGluIG86eXQodCxvW2ldLG51bGwsdHJ1ZSl9fWZ1bmN0aW9uIHh0KG4sdCxyLGUsdSl7aWYoIXNlKG4pKXJldHVybiBuO1xyXG5cclxudmFyIG89anIodCkmJihUbyh0KXx8Z2UodCkpO2lmKCFvKXt2YXIgaT1Lbyh0KTtmdS5hcHBseShpLFp1KHQpKX1yZXR1cm4gS24oaXx8dCxmdW5jdGlvbihmLGEpe2lmKGkmJihhPWYsZj10W2FdKSxoKGYpKXtlfHwoZT1bXSksdXx8KHU9W10pO246e2Zvcih2YXIgYz1hLGw9ZSxzPXUscD1sLmxlbmd0aCxfPXRbY107cC0tOylpZihsW3BdPT1fKXtuW2NdPXNbcF07YnJlYWsgbn12YXIgcD1uW2NdLHY9cj9yKHAsXyxjLG4sdCk6dyxnPXY9PT13O2cmJih2PV8sanIoXykmJihUbyhfKXx8Z2UoXykpP3Y9VG8ocCk/cDpqcihwKT9xbihwKTpbXTpGbyhfKXx8YWUoXyk/dj1hZShwKT95ZShwKTpGbyhwKT9wOnt9Omc9ZmFsc2UpLGwucHVzaChfKSxzLnB1c2godiksZz9uW2NdPXh0KHYsXyxyLGwscyk6KHY9PT12P3YhPT1wOnA9PT1wKSYmKG5bY109dil9fWVsc2UgYz1uW2FdLGw9cj9yKGMsZixhLG4sdCk6dywocz1sPT09dykmJihsPWYpLCFvJiZsPT09d3x8IXMmJihsPT09bD9sPT09YzpjIT09Yyl8fChuW2FdPWwpO1xyXG5cclxufSksbn1mdW5jdGlvbiBBdChuKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXQ/dzp0W25dfX1mdW5jdGlvbiBqdChuKXt2YXIgdD1uK1wiXCI7cmV0dXJuIG49JHIobiksZnVuY3Rpb24ocil7cmV0dXJuIGd0KHIsbix0KX19ZnVuY3Rpb24ga3Qobix0KXtmb3IodmFyIHI9bj90Lmxlbmd0aDowO3ItLTspe3ZhciBlPXBhcnNlRmxvYXQodFtyXSk7aWYoZSE9dSYma3IoZSkpe3ZhciB1PWU7cHUuY2FsbChuLGUsMSl9fX1mdW5jdGlvbiBPdChuLHQpe3JldHVybiBuK3V1KE91KCkqKHQtbisxKSl9ZnVuY3Rpb24gRXQobix0LHIsZSx1KXtyZXR1cm4gdShuLGZ1bmN0aW9uKG4sdSxvKXtyPWU/KGU9ZmFsc2Usbik6dChyLG4sdSxvKX0pLHJ9ZnVuY3Rpb24gSXQobix0LHIpe3ZhciBlPS0xLHU9bi5sZW5ndGg7Zm9yKHQ9bnVsbD09dD8wOit0fHwwLDA+dCYmKHQ9LXQ+dT8wOnUrdCkscj1yPT09d3x8cj51P3U6K3J8fDAsMD5yJiYocis9dSksdT10PnI/MDpyLXQ+Pj4wLHQ+Pj49MCxcclxucj1VZSh1KTsrK2U8dTspcltlXT1uW2UrdF07cmV0dXJuIHJ9ZnVuY3Rpb24gUnQobix0KXt2YXIgcjtyZXR1cm4genUobixmdW5jdGlvbihuLGUsdSl7cmV0dXJuIHI9dChuLGUsdSksIXJ9KSwhIXJ9ZnVuY3Rpb24gQ3Qobix0KXt2YXIgcj1uLmxlbmd0aDtmb3Iobi5zb3J0KHQpO3ItLTspbltyXT1uW3JdLmM7cmV0dXJuIG59ZnVuY3Rpb24gV3QodCxyLGUpe3ZhciB1PWRyKCksbz0tMTtyZXR1cm4gcj1KbihyLGZ1bmN0aW9uKG4pe3JldHVybiB1KG4pfSksdD1tdCh0LGZ1bmN0aW9uKG4pe3JldHVybnthOkpuKHIsZnVuY3Rpb24odCl7cmV0dXJuIHQobil9KSxiOisrbyxjOm59fSksQ3QodCxmdW5jdGlvbih0LHIpe3ZhciB1O246e3U9LTE7Zm9yKHZhciBvPXQuYSxpPXIuYSxmPW8ubGVuZ3RoLGE9ZS5sZW5ndGg7Kyt1PGY7KXt2YXIgYz1uKG9bdV0saVt1XSk7aWYoYyl7dT11PGE/YyooZVt1XT8xOi0xKTpjO2JyZWFrIG59fXU9dC5iLXIuYn1yZXR1cm4gdX0pfWZ1bmN0aW9uIFN0KG4sdCl7XHJcbnZhciByPTA7cmV0dXJuIHp1KG4sZnVuY3Rpb24obixlLHUpe3IrPSt0KG4sZSx1KXx8MH0pLHJ9ZnVuY3Rpb24gVHQobix0KXt2YXIgZT0tMSx1PW1yKCksbz1uLmxlbmd0aCxpPXU9PXIsZj1pJiYyMDA8PW8sYT1mP3F1KCk6bnVsbCxjPVtdO2E/KHU9UG4saT1mYWxzZSk6KGY9ZmFsc2UsYT10P1tdOmMpO246Zm9yKDsrK2U8bzspe3ZhciBsPW5bZV0scz10P3QobCxlLG4pOmw7aWYoaSYmbD09PWwpe2Zvcih2YXIgcD1hLmxlbmd0aDtwLS07KWlmKGFbcF09PT1zKWNvbnRpbnVlIG47dCYmYS5wdXNoKHMpLGMucHVzaChsKX1lbHNlIDA+dShhLHMsMCkmJigodHx8ZikmJmEucHVzaChzKSxjLnB1c2gobCkpfXJldHVybiBjfWZ1bmN0aW9uIFV0KG4sdCl7Zm9yKHZhciByPS0xLGU9dC5sZW5ndGgsdT1VZShlKTsrK3I8ZTspdVtyXT1uW3Rbcl1dO3JldHVybiB1fWZ1bmN0aW9uIE50KG4sdCxyLGUpe2Zvcih2YXIgdT1uLmxlbmd0aCxvPWU/dTotMTsoZT9vLS06KytvPHUpJiZ0KG5bb10sbyxuKTspO1xyXG5yZXR1cm4gcj9JdChuLGU/MDpvLGU/bysxOnUpOkl0KG4sZT9vKzE6MCxlP3U6byl9ZnVuY3Rpb24gRnQobix0KXt2YXIgcj1uO3IgaW5zdGFuY2VvZiBCbiYmKHI9ci52YWx1ZSgpKTtmb3IodmFyIGU9LTEsdT10Lmxlbmd0aDsrK2U8dTspe3ZhciByPVtyXSxvPXRbZV07ZnUuYXBwbHkocixvLmFyZ3MpLHI9by5mdW5jLmFwcGx5KG8udGhpc0FyZyxyKX1yZXR1cm4gcn1mdW5jdGlvbiAkdChuLHQscil7dmFyIGU9MCx1PW4/bi5sZW5ndGg6ZTtpZih0eXBlb2YgdD09XCJudW1iZXJcIiYmdD09PXQmJnU8PVd1KXtmb3IoO2U8dTspe3ZhciBvPWUrdT4+PjEsaT1uW29dOyhyP2k8PXQ6aTx0KT9lPW8rMTp1PW99cmV0dXJuIHV9cmV0dXJuIEx0KG4sdCxSZSxyKX1mdW5jdGlvbiBMdChuLHQscixlKXt0PXIodCk7Zm9yKHZhciB1PTAsbz1uP24ubGVuZ3RoOjAsaT10IT09dCxmPXQ9PT13O3U8bzspe3ZhciBhPXV1KCh1K28pLzIpLGM9cihuW2FdKSxsPWM9PT1jOyhpP2x8fGU6Zj9sJiYoZXx8YyE9PXcpOmU/Yzw9dDpjPHQpP3U9YSsxOm89YTtcclxuXHJcbn1yZXR1cm4geHUobyxDdSl9ZnVuY3Rpb24genQobix0LHIpe2lmKHR5cGVvZiBuIT1cImZ1bmN0aW9uXCIpcmV0dXJuIFJlO2lmKHQ9PT13KXJldHVybiBuO3N3aXRjaChyKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBuLmNhbGwodCxyKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLGUsdSl7cmV0dXJuIG4uY2FsbCh0LHIsZSx1KX07Y2FzZSA0OnJldHVybiBmdW5jdGlvbihyLGUsdSxvKXtyZXR1cm4gbi5jYWxsKHQscixlLHUsbyl9O2Nhc2UgNTpyZXR1cm4gZnVuY3Rpb24ocixlLHUsbyxpKXtyZXR1cm4gbi5jYWxsKHQscixlLHUsbyxpKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG4uYXBwbHkodCxhcmd1bWVudHMpfX1mdW5jdGlvbiBCdChuKXtyZXR1cm4gdHUuY2FsbChuLDApfWZ1bmN0aW9uIE10KG4sdCxyKXtmb3IodmFyIGU9ci5sZW5ndGgsdT0tMSxvPWJ1KG4ubGVuZ3RoLWUsMCksaT0tMSxmPXQubGVuZ3RoLGE9VWUobytmKTsrK2k8ZjspYVtpXT10W2ldO1xyXG5cclxuZm9yKDsrK3U8ZTspYVtyW3VdXT1uW3VdO2Zvcig7by0tOylhW2krK109blt1KytdO3JldHVybiBhfWZ1bmN0aW9uIER0KG4sdCxyKXtmb3IodmFyIGU9LTEsdT1yLmxlbmd0aCxvPS0xLGk9YnUobi5sZW5ndGgtdSwwKSxmPS0xLGE9dC5sZW5ndGgsYz1VZShpK2EpOysrbzxpOyljW29dPW5bb107Zm9yKGk9bzsrK2Y8YTspY1tpK2ZdPXRbZl07Zm9yKDsrK2U8dTspY1tpK3JbZV1dPW5bbysrXTtyZXR1cm4gY31mdW5jdGlvbiBQdChuLHQpe3JldHVybiBmdW5jdGlvbihyLGUsdSl7dmFyIG89dD90KCk6e307aWYoZT1kcihlLHUsMyksVG8ocikpe3U9LTE7Zm9yKHZhciBpPXIubGVuZ3RoOysrdTxpOyl7dmFyIGY9clt1XTtuKG8sZixlKGYsdSxyKSxyKX19ZWxzZSB6dShyLGZ1bmN0aW9uKHQscix1KXtuKG8sdCxlKHQscix1KSx1KX0pO3JldHVybiBvfX1mdW5jdGlvbiBxdChuKXtyZXR1cm4gZmUoZnVuY3Rpb24odCxyKXt2YXIgZT0tMSx1PW51bGw9PXQ/MDpyLmxlbmd0aCxvPTI8dSYmclt1LTJdLGk9Mjx1JiZyWzJdLGY9MTx1JiZyW3UtMV07XHJcblxyXG5mb3IodHlwZW9mIG89PVwiZnVuY3Rpb25cIj8obz16dChvLGYsNSksdS09Mik6KG89dHlwZW9mIGY9PVwiZnVuY3Rpb25cIj9mOm51bGwsdS09bz8xOjApLGkmJk9yKHJbMF0sclsxXSxpKSYmKG89Mz51P251bGw6byx1PTEpOysrZTx1OykoaT1yW2VdKSYmbih0LGksbyk7cmV0dXJuIHR9KX1mdW5jdGlvbiBLdChuLHQpe3JldHVybiBmdW5jdGlvbihyLGUpe3ZhciB1PXI/WXUocik6MDtpZighUnIodSkpcmV0dXJuIG4ocixlKTtmb3IodmFyIG89dD91Oi0xLGk9RnIocik7KHQ/by0tOisrbzx1KSYmZmFsc2UhPT1lKGlbb10sbyxpKTspO3JldHVybiByfX1mdW5jdGlvbiBWdChuKXtyZXR1cm4gZnVuY3Rpb24odCxyLGUpe3ZhciB1PUZyKHQpO2U9ZSh0KTtmb3IodmFyIG89ZS5sZW5ndGgsaT1uP286LTE7bj9pLS06KytpPG87KXt2YXIgZj1lW2ldO2lmKGZhbHNlPT09cih1W2ZdLGYsdSkpYnJlYWt9cmV0dXJuIHR9fWZ1bmN0aW9uIFl0KG4sdCl7ZnVuY3Rpb24gcigpe3JldHVybih0aGlzJiZ0aGlzIT09WW4mJnRoaXMgaW5zdGFuY2VvZiByP2U6bikuYXBwbHkodCxhcmd1bWVudHMpO1xyXG5cclxufXZhciBlPUd0KG4pO3JldHVybiByfWZ1bmN0aW9uIFp0KG4pe3JldHVybiBmdW5jdGlvbih0KXt2YXIgcj0tMTt0PU9lKGJlKHQpKTtmb3IodmFyIGU9dC5sZW5ndGgsdT1cIlwiOysrcjxlOyl1PW4odSx0W3JdLHIpO3JldHVybiB1fX1mdW5jdGlvbiBHdChuKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD1MdShuLnByb3RvdHlwZSkscj1uLmFwcGx5KHQsYXJndW1lbnRzKTtyZXR1cm4gc2Uocik/cjp0fX1mdW5jdGlvbiBKdChuKXtmdW5jdGlvbiB0KHIsZSx1KXtyZXR1cm4gdSYmT3IocixlLHUpJiYoZT1udWxsKSxyPWhyKHIsbixudWxsLG51bGwsbnVsbCxudWxsLG51bGwsZSksci5wbGFjZWhvbGRlcj10LnBsYWNlaG9sZGVyLHJ9cmV0dXJuIHR9ZnVuY3Rpb24gWHQobix0KXtyZXR1cm4gZnVuY3Rpb24ocixlLHUpe3UmJk9yKHIsZSx1KSYmKGU9bnVsbCk7dmFyIGk9ZHIoKSxmPW51bGw9PWU7aWYoaT09PXV0JiZmfHwoZj1mYWxzZSxlPWkoZSx1LDMpKSxmKXtpZihlPVRvKHIpLGV8fCF2ZShyKSlyZXR1cm4gbihlP3I6TnIocikpO1xyXG5cclxuZT1vfXJldHVybiB5cihyLGUsdCl9fWZ1bmN0aW9uIEh0KG4scil7cmV0dXJuIGZ1bmN0aW9uKGUsdSxvKXtyZXR1cm4gdT1kcih1LG8sMyksVG8oZSk/KHU9dChlLHUsciksLTE8dT9lW3VdOncpOmx0KGUsdSxuKX19ZnVuY3Rpb24gUXQobil7cmV0dXJuIGZ1bmN0aW9uKHIsZSx1KXtyZXR1cm4gciYmci5sZW5ndGg/KGU9ZHIoZSx1LDMpLHQocixlLG4pKTotMX19ZnVuY3Rpb24gbnIobil7cmV0dXJuIGZ1bmN0aW9uKHQscixlKXtyZXR1cm4gcj1kcihyLGUsMyksbHQodCxyLG4sdHJ1ZSl9fWZ1bmN0aW9uIHRyKG4pe3JldHVybiBmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg7aWYoIXQpcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXX07Zm9yKHZhciByLGU9bj90Oi0xLHU9MCxvPVVlKHQpO24/ZS0tOisrZTx0Oyl7dmFyIGk9b1t1KytdPWFyZ3VtZW50c1tlXTtpZih0eXBlb2YgaSE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBQZShMKTt2YXIgZj1yP1wiXCI6VnUoaSk7XHJcblxyXG5yPVwid3JhcHBlclwiPT1mP25ldyB6bihbXSk6cn1mb3IoZT1yPy0xOnQ7KytlPHQ7KWk9b1tlXSxmPVZ1KGkpLHI9KHU9XCJ3cmFwcGVyXCI9PWY/S3UoaSk6bnVsbCkmJklyKHVbMF0pJiZ1WzFdPT0oUnxrfEV8QykmJiF1WzRdLmxlbmd0aCYmMT09dVs5XT9yW1Z1KHVbMF0pXS5hcHBseShyLHVbM10pOjE9PWkubGVuZ3RoJiZJcihpKT9yW2ZdKCk6ci50aHJ1KGkpO3JldHVybiBmdW5jdGlvbigpe3ZhciBuPWFyZ3VtZW50cztpZihyJiYxPT1uLmxlbmd0aCYmVG8oblswXSkpcmV0dXJuIHIucGxhbnQoblswXSkudmFsdWUoKTtmb3IodmFyIGU9MCxuPW9bZV0uYXBwbHkodGhpcyxuKTsrK2U8dDspbj1vW2VdLmNhbGwodGhpcyxuKTtyZXR1cm4gbn19fWZ1bmN0aW9uIHJyKG4sdCl7cmV0dXJuIGZ1bmN0aW9uKHIsZSx1KXtyZXR1cm4gdHlwZW9mIGU9PVwiZnVuY3Rpb25cIiYmdT09PXcmJlRvKHIpP24ocixlKTp0KHIsenQoZSx1LDMpKX19ZnVuY3Rpb24gZXIobil7cmV0dXJuIGZ1bmN0aW9uKHQscixlKXtcclxucmV0dXJuKHR5cGVvZiByIT1cImZ1bmN0aW9uXCJ8fGUhPT13KSYmKHI9enQocixlLDMpKSxuKHQscixtZSl9fWZ1bmN0aW9uIHVyKG4pe3JldHVybiBmdW5jdGlvbih0LHIsZSl7cmV0dXJuKHR5cGVvZiByIT1cImZ1bmN0aW9uXCJ8fGUhPT13KSYmKHI9enQocixlLDMpKSxuKHQscil9fWZ1bmN0aW9uIG9yKG4pe3JldHVybiBmdW5jdGlvbih0LHIsZSl7dmFyIHU9e307cmV0dXJuIHI9ZHIocixlLDMpLGh0KHQsZnVuY3Rpb24odCxlLG8pe289cih0LGUsbyksZT1uP286ZSx0PW4/dDpvLHVbZV09dH0pLHV9fWZ1bmN0aW9uIGlyKG4pe3JldHVybiBmdW5jdGlvbih0LHIsZSl7cmV0dXJuIHQ9dSh0KSwobj90OlwiXCIpK2xyKHQscixlKSsobj9cIlwiOnQpfX1mdW5jdGlvbiBmcihuKXt2YXIgdD1mZShmdW5jdGlvbihyLGUpe3ZhciB1PXYoZSx0LnBsYWNlaG9sZGVyKTtyZXR1cm4gaHIocixuLG51bGwsZSx1KX0pO3JldHVybiB0fWZ1bmN0aW9uIGFyKG4sdCl7cmV0dXJuIGZ1bmN0aW9uKHIsZSx1LG8pe1xyXG52YXIgaT0zPmFyZ3VtZW50cy5sZW5ndGg7cmV0dXJuIHR5cGVvZiBlPT1cImZ1bmN0aW9uXCImJm89PT13JiZUbyhyKT9uKHIsZSx1LGkpOkV0KHIsZHIoZSxvLDQpLHUsaSx0KX19ZnVuY3Rpb24gY3Iobix0LHIsZSx1LG8saSxmLGEsYyl7ZnVuY3Rpb24gbCgpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLGo9YixrPVVlKGIpO2otLTspa1tqXT1hcmd1bWVudHNbal07aWYoZSYmKGs9TXQoayxlLHUpKSxvJiYoaz1EdChrLG8saSkpLF98fHkpe3ZhciBqPWwucGxhY2Vob2xkZXIsTz12KGssaiksYj1iLU8ubGVuZ3RoO2lmKGI8Yyl7dmFyIFI9Zj9xbihmKTpudWxsLGI9YnUoYy1iLDApLEM9Xz9POm51bGwsTz1fP251bGw6TyxXPV8/azpudWxsLGs9Xz9udWxsOms7cmV0dXJuIHR8PV8/RTpJLHQmPX4oXz9JOkUpLGd8fCh0Jj1+KHh8QSkpLGs9W24sdCxyLFcsQyxrLE8sUixhLGJdLFI9Y3IuYXBwbHkodyxrKSxJcihuKSYmR3UoUixrKSxSLnBsYWNlaG9sZGVyPWosUn19aWYoaj1wP3I6dGhpcyxcclxuaCYmKG49alttXSksZilmb3IoUj1rLmxlbmd0aCxiPXh1KGYubGVuZ3RoLFIpLEM9cW4oayk7Yi0tOylPPWZbYl0sa1tiXT1rcihPLFIpP0NbT106dztyZXR1cm4gcyYmYTxrLmxlbmd0aCYmKGsubGVuZ3RoPWEpLCh0aGlzJiZ0aGlzIT09WW4mJnRoaXMgaW5zdGFuY2VvZiBsP2R8fEd0KG4pOm4pLmFwcGx5KGosayl9dmFyIHM9dCZSLHA9dCZ4LGg9dCZBLF89dCZrLGc9dCZqLHk9dCZPLGQ9IWgmJkd0KG4pLG09bjtyZXR1cm4gbH1mdW5jdGlvbiBscihuLHQscil7cmV0dXJuIG49bi5sZW5ndGgsdD0rdCxuPHQmJm11KHQpPyh0LT1uLHI9bnVsbD09cj9cIiBcIjpyK1wiXCIsamUocixydSh0L3IubGVuZ3RoKSkuc2xpY2UoMCx0KSk6XCJcIn1mdW5jdGlvbiBzcihuLHQscixlKXtmdW5jdGlvbiB1KCl7Zm9yKHZhciB0PS0xLGY9YXJndW1lbnRzLmxlbmd0aCxhPS0xLGM9ZS5sZW5ndGgsbD1VZShmK2MpOysrYTxjOylsW2FdPWVbYV07Zm9yKDtmLS07KWxbYSsrXT1hcmd1bWVudHNbKyt0XTtyZXR1cm4odGhpcyYmdGhpcyE9PVluJiZ0aGlzIGluc3RhbmNlb2YgdT9pOm4pLmFwcGx5KG8/cjp0aGlzLGwpO1xyXG5cclxufXZhciBvPXQmeCxpPUd0KG4pO3JldHVybiB1fWZ1bmN0aW9uIHByKG4pe3JldHVybiBmdW5jdGlvbih0LHIsZSx1KXt2YXIgbz1kcihlKTtyZXR1cm4gbz09PXV0JiZudWxsPT1lPyR0KHQscixuKTpMdCh0LHIsbyhlLHUsMSksbil9fWZ1bmN0aW9uIGhyKG4sdCxyLGUsdSxvLGksZil7dmFyIGE9dCZBO2lmKCFhJiZ0eXBlb2YgbiE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBQZShMKTt2YXIgYz1lP2UubGVuZ3RoOjA7aWYoY3x8KHQmPX4oRXxJKSxlPXU9bnVsbCksYy09dT91Lmxlbmd0aDowLHQmSSl7dmFyIGw9ZSxzPXU7ZT11PW51bGx9dmFyIHA9YT9udWxsOkt1KG4pO3JldHVybiByPVtuLHQscixlLHUsbCxzLG8saSxmXSxwJiYoZT1yWzFdLHQ9cFsxXSxmPWV8dCx1PXQ9PVImJmU9PWt8fHQ9PVImJmU9PUMmJnJbN10ubGVuZ3RoPD1wWzhdfHx0PT0oUnxDKSYmZT09aywoZjxSfHx1KSYmKHQmeCYmKHJbMl09cFsyXSxmfD1lJng/MDpqKSwoZT1wWzNdKSYmKHU9clszXSxyWzNdPXU/TXQodSxlLHBbNF0pOnFuKGUpLFxyXG5yWzRdPXU/dihyWzNdLHopOnFuKHBbNF0pKSwoZT1wWzVdKSYmKHU9cls1XSxyWzVdPXU/RHQodSxlLHBbNl0pOnFuKGUpLHJbNl09dT92KHJbNV0seik6cW4ocFs2XSkpLChlPXBbN10pJiYocls3XT1xbihlKSksdCZSJiYocls4XT1udWxsPT1yWzhdP3BbOF06eHUocls4XSxwWzhdKSksbnVsbD09cls5XSYmKHJbOV09cFs5XSksclswXT1wWzBdLHJbMV09ZiksdD1yWzFdLGY9cls5XSkscls5XT1udWxsPT1mP2E/MDpuLmxlbmd0aDpidShmLWMsMCl8fDAsKHA/UHU6R3UpKHQ9PXg/WXQoclswXSxyWzJdKTp0IT1FJiZ0IT0oeHxFKXx8cls0XS5sZW5ndGg/Y3IuYXBwbHkodyxyKTpzci5hcHBseSh3LHIpLHIpfWZ1bmN0aW9uIF9yKG4sdCxyLGUsdSxvLGkpe3ZhciBmPS0xLGE9bi5sZW5ndGgsYz10Lmxlbmd0aCxsPXRydWU7aWYoYSE9YyYmKCF1fHxjPD1hKSlyZXR1cm4gZmFsc2U7Zm9yKDtsJiYrK2Y8YTspe3ZhciBzPW5bZl0scD10W2ZdLGw9dztpZihlJiYobD11P2UocCxzLGYpOmUocyxwLGYpKSxcclxubD09PXcpaWYodSlmb3IodmFyIGg9YztoLS0mJihwPXRbaF0sIShsPXMmJnM9PT1wfHxyKHMscCxlLHUsbyxpKSkpOyk7ZWxzZSBsPXMmJnM9PT1wfHxyKHMscCxlLHUsbyxpKX1yZXR1cm4hIWx9ZnVuY3Rpb24gdnIobix0LHIpe3N3aXRjaChyKXtjYXNlIEQ6Y2FzZSBQOnJldHVybituPT0rdDtjYXNlIHE6cmV0dXJuIG4ubmFtZT09dC5uYW1lJiZuLm1lc3NhZ2U9PXQubWVzc2FnZTtjYXNlIFY6cmV0dXJuIG4hPStuP3QhPSt0Om49PSt0O2Nhc2UgWjpjYXNlIEc6cmV0dXJuIG49PXQrXCJcIn1yZXR1cm4gZmFsc2V9ZnVuY3Rpb24gZ3Iobix0LHIsZSx1LG8saSl7dmFyIGY9S28obiksYT1mLmxlbmd0aCxjPUtvKHQpLmxlbmd0aDtpZihhIT1jJiYhdSlyZXR1cm4gZmFsc2U7Zm9yKHZhciBjPXUsbD0tMTsrK2w8YTspe3ZhciBzPWZbbF0scD11P3MgaW4gdDpHZS5jYWxsKHQscyk7aWYocCl7dmFyIGg9bltzXSxfPXRbc10scD13O2UmJihwPXU/ZShfLGgscyk6ZShoLF8scykpLHA9PT13JiYocD1oJiZoPT09X3x8cihoLF8sZSx1LG8saSkpO1xyXG5cclxufWlmKCFwKXJldHVybiBmYWxzZTtjfHwoYz1cImNvbnN0cnVjdG9yXCI9PXMpfXJldHVybiBjfHwocj1uLmNvbnN0cnVjdG9yLGU9dC5jb25zdHJ1Y3RvciwhKHIhPWUmJlwiY29uc3RydWN0b3JcImluIG4mJlwiY29uc3RydWN0b3JcImluIHQpfHx0eXBlb2Ygcj09XCJmdW5jdGlvblwiJiZyIGluc3RhbmNlb2YgciYmdHlwZW9mIGU9PVwiZnVuY3Rpb25cIiYmZSBpbnN0YW5jZW9mIGUpP3RydWU6ZmFsc2V9ZnVuY3Rpb24geXIobix0LHIpe3ZhciBlPXI/SXU6RXUsdT1lLG89dTtyZXR1cm4genUobixmdW5jdGlvbihuLGksZil7aT10KG4saSxmKSwoKHI/aTx1Omk+dSl8fGk9PT1lJiZpPT09bykmJih1PWksbz1uKX0pLG99ZnVuY3Rpb24gZHIobix0LHIpe3ZhciBlPSRuLmNhbGxiYWNrfHxFZSxlPWU9PT1FZT91dDplO3JldHVybiByP2Uobix0LHIpOmV9ZnVuY3Rpb24gbXIobix0LGUpe3ZhciB1PSRuLmluZGV4T2Z8fERyLHU9dT09PURyP3I6dTtyZXR1cm4gbj91KG4sdCxlKTp1fWZ1bmN0aW9uIHdyKG4pe3ZhciB0PW4ubGVuZ3RoLHI9bmV3IG4uY29uc3RydWN0b3IodCk7XHJcblxyXG5yZXR1cm4gdCYmXCJzdHJpbmdcIj09dHlwZW9mIG5bMF0mJkdlLmNhbGwobixcImluZGV4XCIpJiYoci5pbmRleD1uLmluZGV4LHIuaW5wdXQ9bi5pbnB1dCkscn1mdW5jdGlvbiBicihuKXtyZXR1cm4gbj1uLmNvbnN0cnVjdG9yLHR5cGVvZiBuPT1cImZ1bmN0aW9uXCImJm4gaW5zdGFuY2VvZiBufHwobj1CZSksbmV3IG59ZnVuY3Rpb24geHIobix0LHIpe3ZhciBlPW4uY29uc3RydWN0b3I7c3dpdGNoKHQpe2Nhc2UgSjpyZXR1cm4gQnQobik7Y2FzZSBEOmNhc2UgUDpyZXR1cm4gbmV3IGUoK24pO2Nhc2UgWDpjYXNlIEg6Y2FzZSBROmNhc2Ugbm46Y2FzZSB0bjpjYXNlIHJuOmNhc2UgZW46Y2FzZSB1bjpjYXNlIG9uOnJldHVybiB0PW4uYnVmZmVyLG5ldyBlKHI/QnQodCk6dCxuLmJ5dGVPZmZzZXQsbi5sZW5ndGgpO2Nhc2UgVjpjYXNlIEc6cmV0dXJuIG5ldyBlKG4pO2Nhc2UgWjp2YXIgdT1uZXcgZShuLnNvdXJjZSxrbi5leGVjKG4pKTt1Lmxhc3RJbmRleD1uLmxhc3RJbmRleH1yZXR1cm4gdTtcclxuXHJcbn1mdW5jdGlvbiBBcihuLHQscil7cmV0dXJuIG51bGw9PW58fEVyKHQsbil8fCh0PSRyKHQpLG49MT09dC5sZW5ndGg/bjpndChuLEl0KHQsMCwtMSkpLHQ9UHIodCkpLHQ9bnVsbD09bj9uOm5bdF0sbnVsbD09dD93OnQuYXBwbHkobixyKX1mdW5jdGlvbiBqcihuKXtyZXR1cm4gbnVsbCE9biYmUnIoWXUobikpfWZ1bmN0aW9uIGtyKG4sdCl7cmV0dXJuIG49K24sdD1udWxsPT10P1R1OnQsLTE8biYmMD09biUxJiZuPHR9ZnVuY3Rpb24gT3Iobix0LHIpe2lmKCFzZShyKSlyZXR1cm4gZmFsc2U7dmFyIGU9dHlwZW9mIHQ7cmV0dXJuKFwibnVtYmVyXCI9PWU/anIocikmJmtyKHQsci5sZW5ndGgpOlwic3RyaW5nXCI9PWUmJnQgaW4gcik/KHQ9clt0XSxuPT09bj9uPT09dDp0IT09dCk6ZmFsc2V9ZnVuY3Rpb24gRXIobix0KXt2YXIgcj10eXBlb2YgbjtyZXR1cm5cInN0cmluZ1wiPT1yJiZkbi50ZXN0KG4pfHxcIm51bWJlclwiPT1yP3RydWU6VG8obik/ZmFsc2U6IXluLnRlc3Qobil8fG51bGwhPXQmJm4gaW4gRnIodCk7XHJcblxyXG59ZnVuY3Rpb24gSXIobil7dmFyIHQ9VnUobik7cmV0dXJuISF0JiZuPT09JG5bdF0mJnQgaW4gQm4ucHJvdG90eXBlfWZ1bmN0aW9uIFJyKG4pe3JldHVybiB0eXBlb2Ygbj09XCJudW1iZXJcIiYmLTE8biYmMD09biUxJiZuPD1UdX1mdW5jdGlvbiBDcihuKXtyZXR1cm4gbj09PW4mJiFzZShuKX1mdW5jdGlvbiBXcihuLHQpe249RnIobik7Zm9yKHZhciByPS0xLGU9dC5sZW5ndGgsdT17fTsrK3I8ZTspe3ZhciBvPXRbcl07byBpbiBuJiYodVtvXT1uW29dKX1yZXR1cm4gdX1mdW5jdGlvbiBTcihuLHQpe3ZhciByPXt9O3JldHVybiBwdChuLGZ1bmN0aW9uKG4sZSx1KXt0KG4sZSx1KSYmKHJbZV09bil9KSxyfWZ1bmN0aW9uIFRyKG4pe3ZhciB0O2lmKCFoKG4pfHxYZS5jYWxsKG4pIT1ZfHwhKEdlLmNhbGwobixcImNvbnN0cnVjdG9yXCIpfHwodD1uLmNvbnN0cnVjdG9yLHR5cGVvZiB0IT1cImZ1bmN0aW9uXCJ8fHQgaW5zdGFuY2VvZiB0KSkpcmV0dXJuIGZhbHNlO3ZhciByO3JldHVybiBwdChuLGZ1bmN0aW9uKG4sdCl7XHJcbnI9dH0pLHI9PT13fHxHZS5jYWxsKG4scil9ZnVuY3Rpb24gVXIobil7Zm9yKHZhciB0PW1lKG4pLHI9dC5sZW5ndGgsZT1yJiZuLmxlbmd0aCx1PSRuLnN1cHBvcnQsdT1lJiZScihlKSYmKFRvKG4pfHx1Lm5vbkVudW1BcmdzJiZhZShuKSksbz0tMSxpPVtdOysrbzxyOyl7dmFyIGY9dFtvXTsodSYma3IoZixlKXx8R2UuY2FsbChuLGYpKSYmaS5wdXNoKGYpfXJldHVybiBpfWZ1bmN0aW9uIE5yKG4pe3JldHVybiBudWxsPT1uP1tdOmpyKG4pP3NlKG4pP246QmUobik6d2Uobil9ZnVuY3Rpb24gRnIobil7cmV0dXJuIHNlKG4pP246QmUobil9ZnVuY3Rpb24gJHIobil7aWYoVG8obikpcmV0dXJuIG47dmFyIHQ9W107cmV0dXJuIHUobikucmVwbGFjZShtbixmdW5jdGlvbihuLHIsZSx1KXt0LnB1c2goZT91LnJlcGxhY2UoQW4sXCIkMVwiKTpyfHxuKX0pLHR9ZnVuY3Rpb24gTHIobil7cmV0dXJuIG4gaW5zdGFuY2VvZiBCbj9uLmNsb25lKCk6bmV3IHpuKG4uX193cmFwcGVkX18sbi5fX2NoYWluX18scW4obi5fX2FjdGlvbnNfXykpO1xyXG5cclxufWZ1bmN0aW9uIHpyKG4sdCxyKXtyZXR1cm4gbiYmbi5sZW5ndGg/KChyP09yKG4sdCxyKTpudWxsPT10KSYmKHQ9MSksSXQobiwwPnQ/MDp0KSk6W119ZnVuY3Rpb24gQnIobix0LHIpe3ZhciBlPW4/bi5sZW5ndGg6MDtyZXR1cm4gZT8oKHI/T3Iobix0LHIpOm51bGw9PXQpJiYodD0xKSx0PWUtKCt0fHwwKSxJdChuLDAsMD50PzA6dCkpOltdfWZ1bmN0aW9uIE1yKG4pe3JldHVybiBuP25bMF06d31mdW5jdGlvbiBEcihuLHQsZSl7dmFyIHU9bj9uLmxlbmd0aDowO2lmKCF1KXJldHVybi0xO2lmKHR5cGVvZiBlPT1cIm51bWJlclwiKWU9MD5lP2J1KHUrZSwwKTplO2Vsc2UgaWYoZSlyZXR1cm4gZT0kdChuLHQpLG49bltlXSwodD09PXQ/dD09PW46biE9PW4pP2U6LTE7cmV0dXJuIHIobix0LGV8fDApfWZ1bmN0aW9uIFByKG4pe3ZhciB0PW4/bi5sZW5ndGg6MDtyZXR1cm4gdD9uW3QtMV06d31mdW5jdGlvbiBxcihuKXtyZXR1cm4genIobiwxKX1mdW5jdGlvbiBLcihuLHQsZSx1KXtcclxuaWYoIW58fCFuLmxlbmd0aClyZXR1cm5bXTtudWxsIT10JiZ0eXBlb2YgdCE9XCJib29sZWFuXCImJih1PWUsZT1PcihuLHQsdSk/bnVsbDp0LHQ9ZmFsc2UpO3ZhciBvPWRyKCk7aWYoKG8hPT11dHx8bnVsbCE9ZSkmJihlPW8oZSx1LDMpKSx0JiZtcigpPT1yKXt0PWU7dmFyIGk7ZT0tMSx1PW4ubGVuZ3RoO2Zvcih2YXIgbz0tMSxmPVtdOysrZTx1Oyl7dmFyIGE9bltlXSxjPXQ/dChhLGUsbik6YTtlJiZpPT09Y3x8KGk9YyxmWysrb109YSl9bj1mfWVsc2Ugbj1UdChuLGUpO3JldHVybiBufWZ1bmN0aW9uIFZyKG4pe2lmKCFufHwhbi5sZW5ndGgpcmV0dXJuW107dmFyIHQ9LTEscj0wO249R24obixmdW5jdGlvbihuKXtyZXR1cm4ganIobik/KHI9YnUobi5sZW5ndGgsciksdHJ1ZSk6dm9pZCAwfSk7Zm9yKHZhciBlPVVlKHIpOysrdDxyOyllW3RdPUpuKG4sQXQodCkpO3JldHVybiBlfWZ1bmN0aW9uIFlyKG4sdCxyKXtyZXR1cm4gbiYmbi5sZW5ndGg/KG49VnIobiksbnVsbD09dD9uOih0PXp0KHQsciw0KSxcclxuSm4obixmdW5jdGlvbihuKXtyZXR1cm4gWG4obix0LHcsdHJ1ZSl9KSkpOltdfWZ1bmN0aW9uIFpyKG4sdCl7dmFyIHI9LTEsZT1uP24ubGVuZ3RoOjAsdT17fTtmb3IoIWV8fHR8fFRvKG5bMF0pfHwodD1bXSk7KytyPGU7KXt2YXIgbz1uW3JdO3Q/dVtvXT10W3JdOm8mJih1W29bMF1dPW9bMV0pfXJldHVybiB1fWZ1bmN0aW9uIEdyKG4pe3JldHVybiBuPSRuKG4pLG4uX19jaGFpbl9fPXRydWUsbn1mdW5jdGlvbiBKcihuLHQscil7cmV0dXJuIHQuY2FsbChyLG4pfWZ1bmN0aW9uIFhyKG4sdCxyKXt2YXIgZT1UbyhuKT9WbjphdDtyZXR1cm4gciYmT3Iobix0LHIpJiYodD1udWxsKSwodHlwZW9mIHQhPVwiZnVuY3Rpb25cInx8ciE9PXcpJiYodD1kcih0LHIsMykpLGUobix0KX1mdW5jdGlvbiBIcihuLHQscil7dmFyIGU9VG8obik/R246Y3Q7cmV0dXJuIHQ9ZHIodCxyLDMpLGUobix0KX1mdW5jdGlvbiBRcihuLHQscixlKXt2YXIgdT1uP1l1KG4pOjA7cmV0dXJuIFJyKHUpfHwobj13ZShuKSxcclxudT1uLmxlbmd0aCksdT8ocj10eXBlb2YgciE9XCJudW1iZXJcInx8ZSYmT3IodCxyLGUpPzA6MD5yP2J1KHUrciwwKTpyfHwwLHR5cGVvZiBuPT1cInN0cmluZ1wifHwhVG8obikmJnZlKG4pP3I8dSYmLTE8bi5pbmRleE9mKHQscik6LTE8bXIobix0LHIpKTpmYWxzZX1mdW5jdGlvbiBuZShuLHQscil7dmFyIGU9VG8obik/Sm46bXQ7cmV0dXJuIHQ9ZHIodCxyLDMpLGUobix0KX1mdW5jdGlvbiB0ZShuLHQscil7cmV0dXJuKHI/T3Iobix0LHIpOm51bGw9PXQpPyhuPU5yKG4pLHQ9bi5sZW5ndGgsMDx0P25bT3QoMCx0LTEpXTp3KToobj1yZShuKSxuLmxlbmd0aD14dSgwPnQ/MDordHx8MCxuLmxlbmd0aCksbil9ZnVuY3Rpb24gcmUobil7bj1OcihuKTtmb3IodmFyIHQ9LTEscj1uLmxlbmd0aCxlPVVlKHIpOysrdDxyOyl7dmFyIHU9T3QoMCx0KTt0IT11JiYoZVt0XT1lW3VdKSxlW3VdPW5bdF19cmV0dXJuIGV9ZnVuY3Rpb24gZWUobix0LHIpe3ZhciBlPVRvKG4pP0huOlJ0O3JldHVybiByJiZPcihuLHQscikmJih0PW51bGwpLFxyXG4odHlwZW9mIHQhPVwiZnVuY3Rpb25cInx8ciE9PXcpJiYodD1kcih0LHIsMykpLGUobix0KX1mdW5jdGlvbiB1ZShuLHQpe3ZhciByO2lmKHR5cGVvZiB0IT1cImZ1bmN0aW9uXCIpe2lmKHR5cGVvZiBuIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IFBlKEwpO3ZhciBlPW47bj10LHQ9ZX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gMDwtLW4mJihyPXQuYXBwbHkodGhpcyxhcmd1bWVudHMpKSwxPj1uJiYodD1udWxsKSxyfX1mdW5jdGlvbiBvZShuLHQscil7ZnVuY3Rpb24gZSgpe3ZhciByPXQtKHdvKCktYyk7MD49cnx8cj50PyhmJiZldShmKSxyPXAsZj1zPXA9dyxyJiYoaD13bygpLGE9bi5hcHBseShsLGkpLHN8fGZ8fChpPWw9bnVsbCkpKTpzPXN1KGUscil9ZnVuY3Rpb24gdSgpe3MmJmV1KHMpLGY9cz1wPXcsKHZ8fF8hPT10KSYmKGg9d28oKSxhPW4uYXBwbHkobCxpKSxzfHxmfHwoaT1sPW51bGwpKX1mdW5jdGlvbiBvKCl7aWYoaT1hcmd1bWVudHMsYz13bygpLGw9dGhpcyxwPXYmJihzfHwhZyksXHJcbiExPT09Xyl2YXIgcj1nJiYhcztlbHNle2Z8fGd8fChoPWMpO3ZhciBvPV8tKGMtaCkseT0wPj1vfHxvPl87eT8oZiYmKGY9ZXUoZikpLGg9YyxhPW4uYXBwbHkobCxpKSk6Znx8KGY9c3UodSxvKSl9cmV0dXJuIHkmJnM/cz1ldShzKTpzfHx0PT09X3x8KHM9c3UoZSx0KSksciYmKHk9dHJ1ZSxhPW4uYXBwbHkobCxpKSksIXl8fHN8fGZ8fChpPWw9bnVsbCksYX12YXIgaSxmLGEsYyxsLHMscCxoPTAsXz1mYWxzZSx2PXRydWU7aWYodHlwZW9mIG4hPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgUGUoTCk7aWYodD0wPnQ/MDordHx8MCx0cnVlPT09cil2YXIgZz10cnVlLHY9ZmFsc2U7ZWxzZSBzZShyKSYmKGc9ci5sZWFkaW5nLF89XCJtYXhXYWl0XCJpbiByJiZidSgrci5tYXhXYWl0fHwwLHQpLHY9XCJ0cmFpbGluZ1wiaW4gcj9yLnRyYWlsaW5nOnYpO3JldHVybiBvLmNhbmNlbD1mdW5jdGlvbigpe3MmJmV1KHMpLGYmJmV1KGYpLGY9cz1wPXd9LG99ZnVuY3Rpb24gaWUobix0KXtmdW5jdGlvbiByKCl7dmFyIGU9YXJndW1lbnRzLHU9ci5jYWNoZSxvPXQ/dC5hcHBseSh0aGlzLGUpOmVbMF07XHJcblxyXG5yZXR1cm4gdS5oYXMobyk/dS5nZXQobyk6KGU9bi5hcHBseSh0aGlzLGUpLHUuc2V0KG8sZSksZSl9aWYodHlwZW9mIG4hPVwiZnVuY3Rpb25cInx8dCYmdHlwZW9mIHQhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgUGUoTCk7cmV0dXJuIHIuY2FjaGU9bmV3IGllLkNhY2hlLHJ9ZnVuY3Rpb24gZmUobix0KXtpZih0eXBlb2YgbiE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBQZShMKTtyZXR1cm4gdD1idSh0PT09dz9uLmxlbmd0aC0xOit0fHwwLDApLGZ1bmN0aW9uKCl7Zm9yKHZhciByPWFyZ3VtZW50cyxlPS0xLHU9YnUoci5sZW5ndGgtdCwwKSxvPVVlKHUpOysrZTx1OylvW2VdPXJbdCtlXTtzd2l0Y2godCl7Y2FzZSAwOnJldHVybiBuLmNhbGwodGhpcyxvKTtjYXNlIDE6cmV0dXJuIG4uY2FsbCh0aGlzLHJbMF0sbyk7Y2FzZSAyOnJldHVybiBuLmNhbGwodGhpcyxyWzBdLHJbMV0sbyl9Zm9yKHU9VWUodCsxKSxlPS0xOysrZTx0Oyl1W2VdPXJbZV07cmV0dXJuIHVbdF09byxuLmFwcGx5KHRoaXMsdSk7XHJcblxyXG59fWZ1bmN0aW9uIGFlKG4pe3JldHVybiBoKG4pJiZqcihuKSYmWGUuY2FsbChuKT09Qn1mdW5jdGlvbiBjZShuKXtyZXR1cm4hIW4mJjE9PT1uLm5vZGVUeXBlJiZoKG4pJiYtMTxYZS5jYWxsKG4pLmluZGV4T2YoXCJFbGVtZW50XCIpfWZ1bmN0aW9uIGxlKG4pe3JldHVybiBoKG4pJiZ0eXBlb2Ygbi5tZXNzYWdlPT1cInN0cmluZ1wiJiZYZS5jYWxsKG4pPT1xfWZ1bmN0aW9uIHNlKG4pe3ZhciB0PXR5cGVvZiBuO3JldHVyblwiZnVuY3Rpb25cIj09dHx8ISFuJiZcIm9iamVjdFwiPT10fWZ1bmN0aW9uIHBlKG4pe3JldHVybiBudWxsPT1uP2ZhbHNlOlhlLmNhbGwobik9PUs/UWUudGVzdChaZS5jYWxsKG4pKTpoKG4pJiZFbi50ZXN0KG4pfWZ1bmN0aW9uIGhlKG4pe3JldHVybiB0eXBlb2Ygbj09XCJudW1iZXJcInx8aChuKSYmWGUuY2FsbChuKT09Vn1mdW5jdGlvbiBfZShuKXtyZXR1cm4gaChuKSYmWGUuY2FsbChuKT09Wn1mdW5jdGlvbiB2ZShuKXtyZXR1cm4gdHlwZW9mIG49PVwic3RyaW5nXCJ8fGgobikmJlhlLmNhbGwobik9PUc7XHJcblxyXG59ZnVuY3Rpb24gZ2Uobil7cmV0dXJuIGgobikmJlJyKG4ubGVuZ3RoKSYmISFVbltYZS5jYWxsKG4pXX1mdW5jdGlvbiB5ZShuKXtyZXR1cm4gZXQobixtZShuKSl9ZnVuY3Rpb24gZGUobil7cmV0dXJuIHZ0KG4sbWUobikpfWZ1bmN0aW9uIG1lKG4pe2lmKG51bGw9PW4pcmV0dXJuW107c2Uobil8fChuPUJlKG4pKTtmb3IodmFyIHQ9bi5sZW5ndGgsdD10JiZScih0KSYmKFRvKG4pfHxGdS5ub25FbnVtQXJncyYmYWUobikpJiZ0fHwwLHI9bi5jb25zdHJ1Y3RvcixlPS0xLHI9dHlwZW9mIHI9PVwiZnVuY3Rpb25cIiYmci5wcm90b3R5cGU9PT1uLHU9VWUodCksbz0wPHQ7KytlPHQ7KXVbZV09ZStcIlwiO2Zvcih2YXIgaSBpbiBuKW8mJmtyKGksdCl8fFwiY29uc3RydWN0b3JcIj09aSYmKHJ8fCFHZS5jYWxsKG4saSkpfHx1LnB1c2goaSk7cmV0dXJuIHV9ZnVuY3Rpb24gd2Uobil7cmV0dXJuIFV0KG4sS28obikpfWZ1bmN0aW9uIGJlKG4pe3JldHVybihuPXUobikpJiZuLnJlcGxhY2UoSW4sYykucmVwbGFjZSh4bixcIlwiKTtcclxuXHJcbn1mdW5jdGlvbiB4ZShuKXtyZXR1cm4obj11KG4pKSYmYm4udGVzdChuKT9uLnJlcGxhY2Uod24sXCJcXFxcJCZcIik6bn1mdW5jdGlvbiBBZShuLHQscil7cmV0dXJuIHImJk9yKG4sdCxyKSYmKHQ9MCksa3Uobix0KX1mdW5jdGlvbiBqZShuLHQpe3ZhciByPVwiXCI7aWYobj11KG4pLHQ9K3QsMT50fHwhbnx8IW11KHQpKXJldHVybiByO2RvIHQlMiYmKHIrPW4pLHQ9dXUodC8yKSxuKz1uO3doaWxlKHQpO3JldHVybiByfWZ1bmN0aW9uIGtlKG4sdCxyKXt2YXIgZT1uO3JldHVybihuPXUobikpPyhyP09yKGUsdCxyKTpudWxsPT10KT9uLnNsaWNlKGcobikseShuKSsxKToodCs9XCJcIixuLnNsaWNlKGkobix0KSxmKG4sdCkrMSkpOm59ZnVuY3Rpb24gT2Uobix0LHIpe3JldHVybiByJiZPcihuLHQscikmJih0PW51bGwpLG49dShuKSxuLm1hdGNoKHR8fFduKXx8W119ZnVuY3Rpb24gRWUobix0LHIpe3JldHVybiByJiZPcihuLHQscikmJih0PW51bGwpLGgobik/Q2Uobik6dXQobix0KX1mdW5jdGlvbiBJZShuKXtcclxucmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG59fWZ1bmN0aW9uIFJlKG4pe3JldHVybiBufWZ1bmN0aW9uIENlKG4pe3JldHVybiB3dChvdChuLHRydWUpKX1mdW5jdGlvbiBXZShuLHQscil7aWYobnVsbD09cil7dmFyIGU9c2UodCksdT1lJiZLbyh0KTsoKHU9dSYmdS5sZW5ndGgmJnZ0KHQsdSkpP3UubGVuZ3RoOmUpfHwodT1mYWxzZSxyPXQsdD1uLG49dGhpcyl9dXx8KHU9dnQodCxLbyh0KSkpO3ZhciBvPXRydWUsZT0tMSxpPU5vKG4pLGY9dS5sZW5ndGg7ZmFsc2U9PT1yP289ZmFsc2U6c2UocikmJlwiY2hhaW5cImluIHImJihvPXIuY2hhaW4pO2Zvcig7KytlPGY7KXtyPXVbZV07dmFyIGE9dFtyXTtuW3JdPWEsaSYmKG4ucHJvdG90eXBlW3JdPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3ZhciByPXRoaXMuX19jaGFpbl9fO2lmKG98fHIpe3ZhciBlPW4odGhpcy5fX3dyYXBwZWRfXyk7cmV0dXJuKGUuX19hY3Rpb25zX189cW4odGhpcy5fX2FjdGlvbnNfXykpLnB1c2goe2Z1bmM6dCxhcmdzOmFyZ3VtZW50cyxcclxudGhpc0FyZzpufSksZS5fX2NoYWluX189cixlfXJldHVybiByPVt0aGlzLnZhbHVlKCldLGZ1LmFwcGx5KHIsYXJndW1lbnRzKSx0LmFwcGx5KG4scil9fShhKSl9cmV0dXJuIG59ZnVuY3Rpb24gU2UoKXt9ZnVuY3Rpb24gVGUobil7cmV0dXJuIEVyKG4pP0F0KG4pOmp0KG4pfV89Xz9abi5kZWZhdWx0cyhZbi5PYmplY3QoKSxfLFpuLnBpY2soWW4sVG4pKTpZbjt2YXIgVWU9Xy5BcnJheSxOZT1fLkRhdGUsRmU9Xy5FcnJvciwkZT1fLkZ1bmN0aW9uLExlPV8uTWF0aCx6ZT1fLk51bWJlcixCZT1fLk9iamVjdCxNZT1fLlJlZ0V4cCxEZT1fLlN0cmluZyxQZT1fLlR5cGVFcnJvcixxZT1VZS5wcm90b3R5cGUsS2U9QmUucHJvdG90eXBlLFZlPURlLnByb3RvdHlwZSxZZT0oWWU9Xy53aW5kb3cpJiZZZS5kb2N1bWVudCxaZT0kZS5wcm90b3R5cGUudG9TdHJpbmcsR2U9S2UuaGFzT3duUHJvcGVydHksSmU9MCxYZT1LZS50b1N0cmluZyxIZT1fLl8sUWU9TWUoXCJeXCIreGUoWGUpLnJlcGxhY2UoL3RvU3RyaW5nfChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csXCIkMS4qP1wiKStcIiRcIiksbnU9cGUobnU9Xy5BcnJheUJ1ZmZlcikmJm51LHR1PXBlKHR1PW51JiZuZXcgbnUoMCkuc2xpY2UpJiZ0dSxydT1MZS5jZWlsLGV1PV8uY2xlYXJUaW1lb3V0LHV1PUxlLmZsb29yLG91PXBlKG91PUJlLmdldE93blByb3BlcnR5U3ltYm9scykmJm91LGl1PXBlKGl1PUJlLmdldFByb3RvdHlwZU9mKSYmaXUsZnU9cWUucHVzaCxhdT1wZShhdT1CZS5wcmV2ZW50RXh0ZW5zaW9ucykmJmF1LGN1PUtlLnByb3BlcnR5SXNFbnVtZXJhYmxlLGx1PXBlKGx1PV8uU2V0KSYmbHUsc3U9Xy5zZXRUaW1lb3V0LHB1PXFlLnNwbGljZSxodT1wZShodT1fLlVpbnQ4QXJyYXkpJiZodSxfdT1wZShfdT1fLldlYWtNYXApJiZfdSx2dT1mdW5jdGlvbigpe1xyXG50cnl7dmFyIG49cGUobj1fLkZsb2F0NjRBcnJheSkmJm4sdD1uZXcgbihuZXcgbnUoMTApLDAsMSkmJm59Y2F0Y2gocil7fXJldHVybiB0fSgpLGd1PWZ1bmN0aW9uKCl7dmFyIG49YXUmJnBlKG49QmUuYXNzaWduKSYmbjt0cnl7aWYobil7dmFyIHQ9YXUoezE6MH0pO3RbMF09MX19Y2F0Y2gocil7dHJ5e24odCxcInhvXCIpfWNhdGNoKGUpe31yZXR1cm4hdFsxXSYmbn1yZXR1cm4gZmFsc2V9KCkseXU9cGUoeXU9VWUuaXNBcnJheSkmJnl1LGR1PXBlKGR1PUJlLmNyZWF0ZSkmJmR1LG11PV8uaXNGaW5pdGUsd3U9cGUod3U9QmUua2V5cykmJnd1LGJ1PUxlLm1heCx4dT1MZS5taW4sQXU9cGUoQXU9TmUubm93KSYmQXUsanU9cGUoanU9emUuaXNGaW5pdGUpJiZqdSxrdT1fLnBhcnNlSW50LE91PUxlLnJhbmRvbSxFdT16ZS5ORUdBVElWRV9JTkZJTklUWSxJdT16ZS5QT1NJVElWRV9JTkZJTklUWSxSdT1MZS5wb3coMiwzMiktMSxDdT1SdS0xLFd1PVJ1Pj4+MSxTdT12dT92dS5CWVRFU19QRVJfRUxFTUVOVDowLFR1PUxlLnBvdygyLDUzKS0xLFV1PV91JiZuZXcgX3UsTnU9e30sRnU9JG4uc3VwcG9ydD17fTtcclxuXHJcbiFmdW5jdGlvbihuKXtmdW5jdGlvbiB0KCl7dGhpcy54PW59dmFyIHI9YXJndW1lbnRzLGU9W107dC5wcm90b3R5cGU9e3ZhbHVlT2Y6bix5Om59O2Zvcih2YXIgdSBpbiBuZXcgdCllLnB1c2godSk7RnUuZnVuY0RlY29tcD0vXFxidGhpc1xcYi8udGVzdChmdW5jdGlvbigpe3JldHVybiB0aGlzfSksRnUuZnVuY05hbWVzPXR5cGVvZiAkZS5uYW1lPT1cInN0cmluZ1wiO3RyeXtGdS5kb209MTE9PT1ZZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkubm9kZVR5cGV9Y2F0Y2gobyl7RnUuZG9tPWZhbHNlfXRyeXtGdS5ub25FbnVtQXJncz0hY3UuY2FsbChyLDEpfWNhdGNoKGkpe0Z1Lm5vbkVudW1BcmdzPXRydWV9fSgxLDApLCRuLnRlbXBsYXRlU2V0dGluZ3M9e2VzY2FwZTpfbixldmFsdWF0ZTp2bixpbnRlcnBvbGF0ZTpnbix2YXJpYWJsZTpcIlwiLGltcG9ydHM6e186JG59fTt2YXIgJHU9Z3V8fGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG51bGw9PXQ/bjpldCh0LFp1KHQpLGV0KHQsS28odCksbikpfSxMdT1mdW5jdGlvbigpe1xyXG5mdW5jdGlvbiBuKCl7fXJldHVybiBmdW5jdGlvbih0KXtpZihzZSh0KSl7bi5wcm90b3R5cGU9dDt2YXIgcj1uZXcgbjtuLnByb3RvdHlwZT1udWxsfXJldHVybiByfHxfLk9iamVjdCgpfX0oKSx6dT1LdChodCksQnU9S3QoX3QsdHJ1ZSksTXU9VnQoKSxEdT1WdCh0cnVlKSxQdT1VdT9mdW5jdGlvbihuLHQpe3JldHVybiBVdS5zZXQobix0KSxufTpSZTt0dXx8KEJ0PW51JiZodT9mdW5jdGlvbihuKXt2YXIgdD1uLmJ5dGVMZW5ndGgscj12dT91dSh0L1N1KTowLGU9cipTdSx1PW5ldyBudSh0KTtpZihyKXt2YXIgbz1uZXcgdnUodSwwLHIpO28uc2V0KG5ldyB2dShuLDAscikpfXJldHVybiB0IT1lJiYobz1uZXcgaHUodSxlKSxvLnNldChuZXcgaHUobixlKSkpLHV9OkllKG51bGwpKTt2YXIgcXU9ZHUmJmx1P2Z1bmN0aW9uKG4pe3JldHVybiBuZXcgRG4obil9OkllKG51bGwpLEt1PVV1P2Z1bmN0aW9uKG4pe3JldHVybiBVdS5nZXQobil9OlNlLFZ1PWZ1bmN0aW9uKCl7cmV0dXJuIEZ1LmZ1bmNOYW1lcz9cImNvbnN0YW50XCI9PUllLm5hbWU/QXQoXCJuYW1lXCIpOmZ1bmN0aW9uKG4pe1xyXG5mb3IodmFyIHQ9bi5uYW1lLHI9TnVbdF0sZT1yP3IubGVuZ3RoOjA7ZS0tOyl7dmFyIHU9cltlXSxvPXUuZnVuYztpZihudWxsPT1vfHxvPT1uKXJldHVybiB1Lm5hbWV9cmV0dXJuIHR9OkllKFwiXCIpfSgpLFl1PUF0KFwibGVuZ3RoXCIpLFp1PW91P2Z1bmN0aW9uKG4pe3JldHVybiBvdShGcihuKSl9OkllKFtdKSxHdT1mdW5jdGlvbigpe3ZhciBuPTAsdD0wO3JldHVybiBmdW5jdGlvbihyLGUpe3ZhciB1PXdvKCksbz1VLSh1LXQpO2lmKHQ9dSwwPG8pe2lmKCsrbj49VClyZXR1cm4gcn1lbHNlIG49MDtyZXR1cm4gUHUocixlKX19KCksSnU9ZmUoZnVuY3Rpb24obix0KXtyZXR1cm4ganIobik/ZnQobixzdCh0LGZhbHNlLHRydWUpKTpbXX0pLFh1PVF0KCksSHU9UXQodHJ1ZSksUXU9ZmUoZnVuY3Rpb24odCxyKXtyPXN0KHIpO3ZhciBlPXJ0KHQscik7cmV0dXJuIGt0KHQsci5zb3J0KG4pKSxlfSksbm89cHIoKSx0bz1wcih0cnVlKSxybz1mZShmdW5jdGlvbihuKXtyZXR1cm4gVHQoc3QobixmYWxzZSx0cnVlKSk7XHJcblxyXG59KSxlbz1mZShmdW5jdGlvbihuLHQpe3JldHVybiBqcihuKT9mdChuLHQpOltdfSksdW89ZmUoVnIpLG9vPWZlKGZ1bmN0aW9uKG4pe3ZhciB0PW4ubGVuZ3RoLHI9blt0LTJdLGU9blt0LTFdO3JldHVybiAyPHQmJnR5cGVvZiByPT1cImZ1bmN0aW9uXCI/dC09Mjoocj0xPHQmJnR5cGVvZiBlPT1cImZ1bmN0aW9uXCI/KC0tdCxlKTp3LGU9dyksbi5sZW5ndGg9dCxZcihuLHIsZSl9KSxpbz1mZShmdW5jdGlvbihuLHQpe3JldHVybiBydChuLHN0KHQpKX0pLGZvPVB0KGZ1bmN0aW9uKG4sdCxyKXtHZS5jYWxsKG4scik/KytuW3JdOm5bcl09MX0pLGFvPUh0KHp1KSxjbz1IdChCdSx0cnVlKSxsbz1ycihLbix6dSksc289cnIoZnVuY3Rpb24obix0KXtmb3IodmFyIHI9bi5sZW5ndGg7ci0tJiZmYWxzZSE9PXQobltyXSxyLG4pOyk7cmV0dXJuIG59LEJ1KSxwbz1QdChmdW5jdGlvbihuLHQscil7R2UuY2FsbChuLHIpP25bcl0ucHVzaCh0KTpuW3JdPVt0XX0pLGhvPVB0KGZ1bmN0aW9uKG4sdCxyKXtcclxubltyXT10fSksX289ZmUoZnVuY3Rpb24obix0LHIpe3ZhciBlPS0xLHU9dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIixvPUVyKHQpLGk9anIobik/VWUobi5sZW5ndGgpOltdO3JldHVybiB6dShuLGZ1bmN0aW9uKG4pe3ZhciBmPXU/dDpvJiZudWxsIT1uJiZuW3RdO2lbKytlXT1mP2YuYXBwbHkobixyKTpBcihuLHQscil9KSxpfSksdm89UHQoZnVuY3Rpb24obix0LHIpe25bcj8wOjFdLnB1c2godCl9LGZ1bmN0aW9uKCl7cmV0dXJuW1tdLFtdXX0pLGdvPWFyKFhuLHp1KSx5bz1hcihmdW5jdGlvbihuLHQscixlKXt2YXIgdT1uLmxlbmd0aDtmb3IoZSYmdSYmKHI9blstLXVdKTt1LS07KXI9dChyLG5bdV0sdSxuKTtyZXR1cm4gcn0sQnUpLG1vPWZlKGZ1bmN0aW9uKG4sdCl7aWYobnVsbD09bilyZXR1cm5bXTt2YXIgcj10WzJdO3JldHVybiByJiZPcih0WzBdLHRbMV0scikmJih0Lmxlbmd0aD0xKSxXdChuLHN0KHQpLFtdKX0pLHdvPUF1fHxmdW5jdGlvbigpe3JldHVybihuZXcgTmUpLmdldFRpbWUoKTtcclxuXHJcbn0sYm89ZmUoZnVuY3Rpb24obix0LHIpe3ZhciBlPXg7aWYoci5sZW5ndGgpdmFyIHU9dihyLGJvLnBsYWNlaG9sZGVyKSxlPWV8RTtyZXR1cm4gaHIobixlLHQscix1KX0pLHhvPWZlKGZ1bmN0aW9uKG4sdCl7dD10Lmxlbmd0aD9zdCh0KTpkZShuKTtmb3IodmFyIHI9LTEsZT10Lmxlbmd0aDsrK3I8ZTspe3ZhciB1PXRbcl07blt1XT1ocihuW3VdLHgsbil9cmV0dXJuIG59KSxBbz1mZShmdW5jdGlvbihuLHQscil7dmFyIGU9eHxBO2lmKHIubGVuZ3RoKXZhciB1PXYocixBby5wbGFjZWhvbGRlciksZT1lfEU7cmV0dXJuIGhyKHQsZSxuLHIsdSl9KSxqbz1KdChrKSxrbz1KdChPKSxPbz1mZShmdW5jdGlvbihuLHQpe3JldHVybiBpdChuLDEsdCl9KSxFbz1mZShmdW5jdGlvbihuLHQscil7cmV0dXJuIGl0KG4sdCxyKX0pLElvPXRyKCksUm89dHIodHJ1ZSksQ289ZnIoRSksV289ZnIoSSksU289ZmUoZnVuY3Rpb24obix0KXtyZXR1cm4gaHIobixDLG51bGwsbnVsbCxudWxsLHN0KHQpKTtcclxuXHJcbn0pLFRvPXl1fHxmdW5jdGlvbihuKXtyZXR1cm4gaChuKSYmUnIobi5sZW5ndGgpJiZYZS5jYWxsKG4pPT1NfTtGdS5kb218fChjZT1mdW5jdGlvbihuKXtyZXR1cm4hIW4mJjE9PT1uLm5vZGVUeXBlJiZoKG4pJiYhRm8obil9KTt2YXIgVW89anV8fGZ1bmN0aW9uKG4pe3JldHVybiB0eXBlb2Ygbj09XCJudW1iZXJcIiYmbXUobil9LE5vPWUoL3gvKXx8aHUmJiFlKGh1KT9mdW5jdGlvbihuKXtyZXR1cm4gWGUuY2FsbChuKT09S306ZSxGbz1pdT9mdW5jdGlvbihuKXtpZighbnx8WGUuY2FsbChuKSE9WSlyZXR1cm4gZmFsc2U7dmFyIHQ9bi52YWx1ZU9mLHI9cGUodCkmJihyPWl1KHQpKSYmaXUocik7cmV0dXJuIHI/bj09cnx8aXUobik9PXI6VHIobil9OlRyLCRvPXF0KGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gcj90dChuLHQscik6JHUobix0KX0pLExvPWZlKGZ1bmN0aW9uKG4pe3ZhciB0PW5bMF07cmV0dXJuIG51bGw9PXQ/dDoobi5wdXNoKFFuKSwkby5hcHBseSh3LG4pKX0pLHpvPW5yKGh0KSxCbz1ucihfdCksTW89ZXIoTXUpLERvPWVyKER1KSxQbz11cihodCkscW89dXIoX3QpLEtvPXd1P2Z1bmN0aW9uKG4pe1xyXG52YXIgdD1udWxsIT1uJiZuLmNvbnN0cnVjdG9yO3JldHVybiB0eXBlb2YgdD09XCJmdW5jdGlvblwiJiZ0LnByb3RvdHlwZT09PW58fHR5cGVvZiBuIT1cImZ1bmN0aW9uXCImJmpyKG4pP1VyKG4pOnNlKG4pP3d1KG4pOltdfTpVcixWbz1vcih0cnVlKSxZbz1vcigpLFpvPXF0KHh0KSxHbz1mZShmdW5jdGlvbihuLHQpe2lmKG51bGw9PW4pcmV0dXJue307aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdFswXSlyZXR1cm4gdD1KbihzdCh0KSxEZSksV3IobixmdChtZShuKSx0KSk7dmFyIHI9enQodFswXSx0WzFdLDMpO3JldHVybiBTcihuLGZ1bmN0aW9uKG4sdCxlKXtyZXR1cm4hcihuLHQsZSl9KX0pLEpvPWZlKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG51bGw9PW4/e306XCJmdW5jdGlvblwiPT10eXBlb2YgdFswXT9TcihuLHp0KHRbMF0sdFsxXSwzKSk6V3IobixzdCh0KSl9KSxYbz1adChmdW5jdGlvbihuLHQscil7cmV0dXJuIHQ9dC50b0xvd2VyQ2FzZSgpLG4rKHI/dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpOnQpO1xyXG5cclxufSksSG89WnQoZnVuY3Rpb24obix0LHIpe3JldHVybiBuKyhyP1wiLVwiOlwiXCIpK3QudG9Mb3dlckNhc2UoKX0pLFFvPWlyKCksbmk9aXIodHJ1ZSk7OCE9a3UoU24rXCIwOFwiKSYmKEFlPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4ocj9PcihuLHQscik6bnVsbD09dCk/dD0wOnQmJih0PSt0KSxuPWtlKG4pLGt1KG4sdHx8KE9uLnRlc3Qobik/MTY6MTApKX0pO3ZhciB0aT1adChmdW5jdGlvbihuLHQscil7cmV0dXJuIG4rKHI/XCJfXCI6XCJcIikrdC50b0xvd2VyQ2FzZSgpfSkscmk9WnQoZnVuY3Rpb24obix0LHIpe3JldHVybiBuKyhyP1wiIFwiOlwiXCIpKyh0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSkpfSksZWk9ZmUoZnVuY3Rpb24obix0KXt0cnl7cmV0dXJuIG4uYXBwbHkodyx0KX1jYXRjaChyKXtyZXR1cm4gbGUocik/cjpuZXcgRmUocil9fSksdWk9ZmUoZnVuY3Rpb24obix0KXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIEFyKHIsbix0KX19KSxvaT1mZShmdW5jdGlvbihuLHQpe1xyXG5yZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIEFyKG4scix0KX19KSxpaT1YdChmdW5jdGlvbihuKXtmb3IodmFyIHQ9LTEscj1uLmxlbmd0aCxlPUV1OysrdDxyOyl7dmFyIHU9blt0XTt1PmUmJihlPXUpfXJldHVybiBlfSksZmk9WHQoZnVuY3Rpb24obil7Zm9yKHZhciB0PS0xLHI9bi5sZW5ndGgsZT1JdTsrK3Q8cjspe3ZhciB1PW5bdF07dTxlJiYoZT11KX1yZXR1cm4gZX0sdHJ1ZSk7cmV0dXJuICRuLnByb3RvdHlwZT1Mbi5wcm90b3R5cGUsem4ucHJvdG90eXBlPUx1KExuLnByb3RvdHlwZSksem4ucHJvdG90eXBlLmNvbnN0cnVjdG9yPXpuLEJuLnByb3RvdHlwZT1MdShMbi5wcm90b3R5cGUpLEJuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1CbixNbi5wcm90b3R5cGVbXCJkZWxldGVcIl09ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuaGFzKG4pJiZkZWxldGUgdGhpcy5fX2RhdGFfX1tuXX0sTW4ucHJvdG90eXBlLmdldD1mdW5jdGlvbihuKXtyZXR1cm5cIl9fcHJvdG9fX1wiPT1uP3c6dGhpcy5fX2RhdGFfX1tuXTtcclxuXHJcbn0sTW4ucHJvdG90eXBlLmhhcz1mdW5jdGlvbihuKXtyZXR1cm5cIl9fcHJvdG9fX1wiIT1uJiZHZS5jYWxsKHRoaXMuX19kYXRhX18sbil9LE1uLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24obix0KXtyZXR1cm5cIl9fcHJvdG9fX1wiIT1uJiYodGhpcy5fX2RhdGFfX1tuXT10KSx0aGlzfSxEbi5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihuKXt2YXIgdD10aGlzLmRhdGE7dHlwZW9mIG49PVwic3RyaW5nXCJ8fHNlKG4pP3Quc2V0LmFkZChuKTp0Lmhhc2hbbl09dHJ1ZX0saWUuQ2FjaGU9TW4sJG4uYWZ0ZXI9ZnVuY3Rpb24obix0KXtpZih0eXBlb2YgdCE9XCJmdW5jdGlvblwiKXtpZih0eXBlb2YgbiE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBQZShMKTt2YXIgcj1uO249dCx0PXJ9cmV0dXJuIG49bXUobj0rbik/bjowLGZ1bmN0aW9uKCl7cmV0dXJuIDE+LS1uP3QuYXBwbHkodGhpcyxhcmd1bWVudHMpOnZvaWQgMH19LCRuLmFyeT1mdW5jdGlvbihuLHQscil7cmV0dXJuIHImJk9yKG4sdCxyKSYmKHQ9bnVsbCksXHJcbnQ9biYmbnVsbD09dD9uLmxlbmd0aDpidSgrdHx8MCwwKSxocihuLFIsbnVsbCxudWxsLG51bGwsbnVsbCx0KX0sJG4uYXNzaWduPSRvLCRuLmF0PWlvLCRuLmJlZm9yZT11ZSwkbi5iaW5kPWJvLCRuLmJpbmRBbGw9eG8sJG4uYmluZEtleT1Bbywkbi5jYWxsYmFjaz1FZSwkbi5jaGFpbj1Hciwkbi5jaHVuaz1mdW5jdGlvbihuLHQscil7dD0ocj9PcihuLHQscik6bnVsbD09dCk/MTpidSgrdHx8MSwxKSxyPTA7Zm9yKHZhciBlPW4/bi5sZW5ndGg6MCx1PS0xLG89VWUocnUoZS90KSk7cjxlOylvWysrdV09SXQobixyLHIrPXQpO3JldHVybiBvfSwkbi5jb21wYWN0PWZ1bmN0aW9uKG4pe2Zvcih2YXIgdD0tMSxyPW4/bi5sZW5ndGg6MCxlPS0xLHU9W107Kyt0PHI7KXt2YXIgbz1uW3RdO28mJih1WysrZV09byl9cmV0dXJuIHV9LCRuLmNvbnN0YW50PUllLCRuLmNvdW50Qnk9Zm8sJG4uY3JlYXRlPWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1MdShuKTtyZXR1cm4gciYmT3Iobix0LHIpJiYodD1udWxsKSxcclxudD8kdShlLHQpOmV9LCRuLmN1cnJ5PWpvLCRuLmN1cnJ5UmlnaHQ9a28sJG4uZGVib3VuY2U9b2UsJG4uZGVmYXVsdHM9TG8sJG4uZGVmZXI9T28sJG4uZGVsYXk9RW8sJG4uZGlmZmVyZW5jZT1KdSwkbi5kcm9wPXpyLCRuLmRyb3BSaWdodD1Cciwkbi5kcm9wUmlnaHRXaGlsZT1mdW5jdGlvbihuLHQscil7cmV0dXJuIG4mJm4ubGVuZ3RoP050KG4sZHIodCxyLDMpLHRydWUsdHJ1ZSk6W119LCRuLmRyb3BXaGlsZT1mdW5jdGlvbihuLHQscil7cmV0dXJuIG4mJm4ubGVuZ3RoP050KG4sZHIodCxyLDMpLHRydWUpOltdfSwkbi5maWxsPWZ1bmN0aW9uKG4sdCxyLGUpe3ZhciB1PW4/bi5sZW5ndGg6MDtpZighdSlyZXR1cm5bXTtmb3IociYmdHlwZW9mIHIhPVwibnVtYmVyXCImJk9yKG4sdCxyKSYmKHI9MCxlPXUpLHU9bi5sZW5ndGgscj1udWxsPT1yPzA6K3J8fDAsMD5yJiYocj0tcj51PzA6dStyKSxlPWU9PT13fHxlPnU/dTorZXx8MCwwPmUmJihlKz11KSx1PXI+ZT8wOmU+Pj4wLHI+Pj49MDtyPHU7KW5bcisrXT10O1xyXG5cclxucmV0dXJuIG59LCRuLmZpbHRlcj1Iciwkbi5mbGF0dGVuPWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1uP24ubGVuZ3RoOjA7cmV0dXJuIHImJk9yKG4sdCxyKSYmKHQ9ZmFsc2UpLGU/c3Qobix0KTpbXX0sJG4uZmxhdHRlbkRlZXA9ZnVuY3Rpb24obil7cmV0dXJuIG4mJm4ubGVuZ3RoP3N0KG4sdHJ1ZSk6W119LCRuLmZsb3c9SW8sJG4uZmxvd1JpZ2h0PVJvLCRuLmZvckVhY2g9bG8sJG4uZm9yRWFjaFJpZ2h0PXNvLCRuLmZvckluPU1vLCRuLmZvckluUmlnaHQ9RG8sJG4uZm9yT3duPVBvLCRuLmZvck93blJpZ2h0PXFvLCRuLmZ1bmN0aW9ucz1kZSwkbi5ncm91cEJ5PXBvLCRuLmluZGV4Qnk9aG8sJG4uaW5pdGlhbD1mdW5jdGlvbihuKXtyZXR1cm4gQnIobiwxKX0sJG4uaW50ZXJzZWN0aW9uPWZ1bmN0aW9uKCl7Zm9yKHZhciBuPVtdLHQ9LTEsZT1hcmd1bWVudHMubGVuZ3RoLHU9W10sbz1tcigpLGk9bz09cixmPVtdOysrdDxlOyl7dmFyIGE9YXJndW1lbnRzW3RdO2pyKGEpJiYobi5wdXNoKGEpLFxyXG51LnB1c2goaSYmMTIwPD1hLmxlbmd0aD9xdSh0JiZhKTpudWxsKSl9aWYoZT1uLmxlbmd0aCwyPmUpcmV0dXJuIGY7dmFyIGk9blswXSxjPS0xLGw9aT9pLmxlbmd0aDowLHM9dVswXTtuOmZvcig7KytjPGw7KWlmKGE9aVtjXSwwPihzP1BuKHMsYSk6byhmLGEsMCkpKXtmb3IodD1lOy0tdDspe3ZhciBwPXVbdF07aWYoMD4ocD9QbihwLGEpOm8oblt0XSxhLDApKSljb250aW51ZSBufXMmJnMucHVzaChhKSxmLnB1c2goYSl9cmV0dXJuIGZ9LCRuLmludmVydD1mdW5jdGlvbihuLHQscil7ciYmT3Iobix0LHIpJiYodD1udWxsKSxyPS0xO2Zvcih2YXIgZT1LbyhuKSx1PWUubGVuZ3RoLG89e307KytyPHU7KXt2YXIgaT1lW3JdLGY9bltpXTt0P0dlLmNhbGwobyxmKT9vW2ZdLnB1c2goaSk6b1tmXT1baV06b1tmXT1pfXJldHVybiBvfSwkbi5pbnZva2U9X28sJG4ua2V5cz1Lbywkbi5rZXlzSW49bWUsJG4ubWFwPW5lLCRuLm1hcEtleXM9Vm8sJG4ubWFwVmFsdWVzPVlvLCRuLm1hdGNoZXM9Q2UsXHJcbiRuLm1hdGNoZXNQcm9wZXJ0eT1mdW5jdGlvbihuLHQpe3JldHVybiBidChuLG90KHQsdHJ1ZSkpfSwkbi5tZW1vaXplPWllLCRuLm1lcmdlPVpvLCRuLm1ldGhvZD11aSwkbi5tZXRob2RPZj1vaSwkbi5taXhpbj1XZSwkbi5uZWdhdGU9ZnVuY3Rpb24obil7aWYodHlwZW9mIG4hPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgUGUoTCk7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIW4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0sJG4ub21pdD1Hbywkbi5vbmNlPWZ1bmN0aW9uKG4pe3JldHVybiB1ZSgyLG4pfSwkbi5wYWlycz1mdW5jdGlvbihuKXtmb3IodmFyIHQ9LTEscj1LbyhuKSxlPXIubGVuZ3RoLHU9VWUoZSk7Kyt0PGU7KXt2YXIgbz1yW3RdO3VbdF09W28sbltvXV19cmV0dXJuIHV9LCRuLnBhcnRpYWw9Q28sJG4ucGFydGlhbFJpZ2h0PVdvLCRuLnBhcnRpdGlvbj12bywkbi5waWNrPUpvLCRuLnBsdWNrPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG5lKG4sVGUodCkpfSwkbi5wcm9wZXJ0eT1UZSxcclxuJG4ucHJvcGVydHlPZj1mdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGd0KG4sJHIodCksdCtcIlwiKX19LCRuLnB1bGw9ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHMsdD1uWzBdO2lmKCF0fHwhdC5sZW5ndGgpcmV0dXJuIHQ7Zm9yKHZhciByPTAsZT1tcigpLHU9bi5sZW5ndGg7KytyPHU7KWZvcih2YXIgbz0wLGk9bltyXTstMTwobz1lKHQsaSxvKSk7KXB1LmNhbGwodCxvLDEpO3JldHVybiB0fSwkbi5wdWxsQXQ9UXUsJG4ucmFuZ2U9ZnVuY3Rpb24obix0LHIpe3ImJk9yKG4sdCxyKSYmKHQ9cj1udWxsKSxuPStufHwwLHI9bnVsbD09cj8xOityfHwwLG51bGw9PXQ/KHQ9bixuPTApOnQ9K3R8fDA7dmFyIGU9LTE7dD1idShydSgodC1uKS8ocnx8MSkpLDApO2Zvcih2YXIgdT1VZSh0KTsrK2U8dDspdVtlXT1uLG4rPXI7cmV0dXJuIHV9LCRuLnJlYXJnPVNvLCRuLnJlamVjdD1mdW5jdGlvbihuLHQscil7dmFyIGU9VG8obik/R246Y3Q7cmV0dXJuIHQ9ZHIodCxyLDMpLFxyXG5lKG4sZnVuY3Rpb24obixyLGUpe3JldHVybiF0KG4scixlKX0pfSwkbi5yZW1vdmU9ZnVuY3Rpb24obix0LHIpe3ZhciBlPVtdO2lmKCFufHwhbi5sZW5ndGgpcmV0dXJuIGU7dmFyIHU9LTEsbz1bXSxpPW4ubGVuZ3RoO2Zvcih0PWRyKHQsciwzKTsrK3U8aTspcj1uW3VdLHQocix1LG4pJiYoZS5wdXNoKHIpLG8ucHVzaCh1KSk7cmV0dXJuIGt0KG4sbyksZX0sJG4ucmVzdD1xciwkbi5yZXN0UGFyYW09ZmUsJG4uc2V0PWZ1bmN0aW9uKG4sdCxyKXtpZihudWxsPT1uKXJldHVybiBuO3ZhciBlPXQrXCJcIjt0PW51bGwhPW5bZV18fEVyKHQsbik/W2VdOiRyKHQpO2Zvcih2YXIgZT0tMSx1PXQubGVuZ3RoLG89dS0xLGk9bjtudWxsIT1pJiYrK2U8dTspe3ZhciBmPXRbZV07c2UoaSkmJihlPT1vP2lbZl09cjpudWxsPT1pW2ZdJiYoaVtmXT1rcih0W2UrMV0pP1tdOnt9KSksaT1pW2ZdfXJldHVybiBufSwkbi5zaHVmZmxlPXJlLCRuLnNsaWNlPWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1uP24ubGVuZ3RoOjA7XHJcblxyXG5yZXR1cm4gZT8ociYmdHlwZW9mIHIhPVwibnVtYmVyXCImJk9yKG4sdCxyKSYmKHQ9MCxyPWUpLEl0KG4sdCxyKSk6W119LCRuLnNvcnRCeT1mdW5jdGlvbihuLHQscil7aWYobnVsbD09bilyZXR1cm5bXTtyJiZPcihuLHQscikmJih0PW51bGwpO3ZhciBlPS0xO3JldHVybiB0PWRyKHQsciwzKSxuPW10KG4sZnVuY3Rpb24obixyLHUpe3JldHVybnthOnQobixyLHUpLGI6KytlLGM6bn19KSxDdChuLGEpfSwkbi5zb3J0QnlBbGw9bW8sJG4uc29ydEJ5T3JkZXI9ZnVuY3Rpb24obix0LHIsZSl7cmV0dXJuIG51bGw9PW4/W106KGUmJk9yKHQscixlKSYmKHI9bnVsbCksVG8odCl8fCh0PW51bGw9PXQ/W106W3RdKSxUbyhyKXx8KHI9bnVsbD09cj9bXTpbcl0pLFd0KG4sdCxyKSl9LCRuLnNwcmVhZD1mdW5jdGlvbihuKXtpZih0eXBlb2YgbiE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBQZShMKTtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIG4uYXBwbHkodGhpcyx0KX19LCRuLnRha2U9ZnVuY3Rpb24obix0LHIpe1xyXG5yZXR1cm4gbiYmbi5sZW5ndGg/KChyP09yKG4sdCxyKTpudWxsPT10KSYmKHQ9MSksSXQobiwwLDA+dD8wOnQpKTpbXX0sJG4udGFrZVJpZ2h0PWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1uP24ubGVuZ3RoOjA7cmV0dXJuIGU/KChyP09yKG4sdCxyKTpudWxsPT10KSYmKHQ9MSksdD1lLSgrdHx8MCksSXQobiwwPnQ/MDp0KSk6W119LCRuLnRha2VSaWdodFdoaWxlPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbiYmbi5sZW5ndGg/TnQobixkcih0LHIsMyksZmFsc2UsdHJ1ZSk6W119LCRuLnRha2VXaGlsZT1mdW5jdGlvbihuLHQscil7cmV0dXJuIG4mJm4ubGVuZ3RoP050KG4sZHIodCxyLDMpKTpbXX0sJG4udGFwPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gdC5jYWxsKHIsbiksbn0sJG4udGhyb3R0bGU9ZnVuY3Rpb24obix0LHIpe3ZhciBlPXRydWUsdT10cnVlO2lmKHR5cGVvZiBuIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IFBlKEwpO3JldHVybiBmYWxzZT09PXI/ZT1mYWxzZTpzZShyKSYmKGU9XCJsZWFkaW5nXCJpbiByPyEhci5sZWFkaW5nOmUsXHJcbnU9XCJ0cmFpbGluZ1wiaW4gcj8hIXIudHJhaWxpbmc6dSksRm4ubGVhZGluZz1lLEZuLm1heFdhaXQ9K3QsRm4udHJhaWxpbmc9dSxvZShuLHQsRm4pfSwkbi50aHJ1PUpyLCRuLnRpbWVzPWZ1bmN0aW9uKG4sdCxyKXtpZihuPXV1KG4pLDE+bnx8IW11KG4pKXJldHVybltdO3ZhciBlPS0xLHU9VWUoeHUobixSdSkpO2Zvcih0PXp0KHQsciwxKTsrK2U8bjspZTxSdT91W2VdPXQoZSk6dChlKTtyZXR1cm4gdX0sJG4udG9BcnJheT1mdW5jdGlvbihuKXt2YXIgdD1uP1l1KG4pOjA7cmV0dXJuIFJyKHQpP3Q/cW4obik6W106d2Uobil9LCRuLnRvUGxhaW5PYmplY3Q9eWUsJG4udHJhbnNmb3JtPWZ1bmN0aW9uKG4sdCxyLGUpe3ZhciB1PVRvKG4pfHxnZShuKTtyZXR1cm4gdD1kcih0LGUsNCksbnVsbD09ciYmKHV8fHNlKG4pPyhlPW4uY29uc3RydWN0b3Iscj11P1RvKG4pP25ldyBlOltdOkx1KE5vKGUpJiZlLnByb3RvdHlwZSkpOnI9e30pLCh1P0tuOmh0KShuLGZ1bmN0aW9uKG4sZSx1KXtcclxucmV0dXJuIHQocixuLGUsdSl9KSxyfSwkbi51bmlvbj1ybywkbi51bmlxPUtyLCRuLnVuemlwPVZyLCRuLnVuemlwV2l0aD1Zciwkbi52YWx1ZXM9d2UsJG4udmFsdWVzSW49ZnVuY3Rpb24obil7cmV0dXJuIFV0KG4sbWUobikpfSwkbi53aGVyZT1mdW5jdGlvbihuLHQpe3JldHVybiBIcihuLHd0KHQpKX0sJG4ud2l0aG91dD1lbywkbi53cmFwPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHQ9bnVsbD09dD9SZTp0LGhyKHQsRSxudWxsLFtuXSxbXSl9LCRuLnhvcj1mdW5jdGlvbigpe2Zvcih2YXIgbj0tMSx0PWFyZ3VtZW50cy5sZW5ndGg7KytuPHQ7KXt2YXIgcj1hcmd1bWVudHNbbl07aWYoanIocikpdmFyIGU9ZT9mdChlLHIpLmNvbmNhdChmdChyLGUpKTpyfXJldHVybiBlP1R0KGUpOltdfSwkbi56aXA9dW8sJG4uemlwT2JqZWN0PVpyLCRuLnppcFdpdGg9b28sJG4uYmFja2Zsb3c9Um8sJG4uY29sbGVjdD1uZSwkbi5jb21wb3NlPVJvLCRuLmVhY2g9bG8sJG4uZWFjaFJpZ2h0PXNvLFxyXG4kbi5leHRlbmQ9JG8sJG4uaXRlcmF0ZWU9RWUsJG4ubWV0aG9kcz1kZSwkbi5vYmplY3Q9WnIsJG4uc2VsZWN0PUhyLCRuLnRhaWw9cXIsJG4udW5pcXVlPUtyLFdlKCRuLCRuKSwkbi5hZGQ9ZnVuY3Rpb24obix0KXtyZXR1cm4oK258fDApKygrdHx8MCl9LCRuLmF0dGVtcHQ9ZWksJG4uY2FtZWxDYXNlPVhvLCRuLmNhcGl0YWxpemU9ZnVuY3Rpb24obil7cmV0dXJuKG49dShuKSkmJm4uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKX0sJG4uY2xvbmU9ZnVuY3Rpb24obix0LHIsZSl7cmV0dXJuIHQmJnR5cGVvZiB0IT1cImJvb2xlYW5cIiYmT3Iobix0LHIpP3Q9ZmFsc2U6dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIiYmKGU9cixyPXQsdD1mYWxzZSkscj10eXBlb2Ygcj09XCJmdW5jdGlvblwiJiZ6dChyLGUsMSksb3Qobix0LHIpfSwkbi5jbG9uZURlZXA9ZnVuY3Rpb24obix0LHIpe3JldHVybiB0PXR5cGVvZiB0PT1cImZ1bmN0aW9uXCImJnp0KHQsciwxKSxvdChuLHRydWUsdCl9LCRuLmRlYnVycj1iZSxcclxuJG4uZW5kc1dpdGg9ZnVuY3Rpb24obix0LHIpe249dShuKSx0Kz1cIlwiO3ZhciBlPW4ubGVuZ3RoO3JldHVybiByPXI9PT13P2U6eHUoMD5yPzA6K3J8fDAsZSksci09dC5sZW5ndGgsMDw9ciYmbi5pbmRleE9mKHQscik9PXJ9LCRuLmVzY2FwZT1mdW5jdGlvbihuKXtyZXR1cm4obj11KG4pKSYmaG4udGVzdChuKT9uLnJlcGxhY2Uoc24sbCk6bn0sJG4uZXNjYXBlUmVnRXhwPXhlLCRuLmV2ZXJ5PVhyLCRuLmZpbmQ9YW8sJG4uZmluZEluZGV4PVh1LCRuLmZpbmRLZXk9em8sJG4uZmluZExhc3Q9Y28sJG4uZmluZExhc3RJbmRleD1IdSwkbi5maW5kTGFzdEtleT1Cbywkbi5maW5kV2hlcmU9ZnVuY3Rpb24obix0KXtyZXR1cm4gYW8obix3dCh0KSl9LCRuLmZpcnN0PU1yLCRuLmdldD1mdW5jdGlvbihuLHQscil7cmV0dXJuIG49bnVsbD09bj93Omd0KG4sJHIodCksdCtcIlwiKSxuPT09dz9yOm59LCRuLmhhcz1mdW5jdGlvbihuLHQpe2lmKG51bGw9PW4pcmV0dXJuIGZhbHNlO3ZhciByPUdlLmNhbGwobix0KTtcclxuXHJcbnJldHVybiByfHxFcih0KXx8KHQ9JHIodCksbj0xPT10Lmxlbmd0aD9uOmd0KG4sSXQodCwwLC0xKSksdD1Qcih0KSxyPW51bGwhPW4mJkdlLmNhbGwobix0KSkscn0sJG4uaWRlbnRpdHk9UmUsJG4uaW5jbHVkZXM9UXIsJG4uaW5kZXhPZj1Eciwkbi5pblJhbmdlPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gdD0rdHx8MCxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHI/KHI9dCx0PTApOnI9K3J8fDAsbj49eHUodCxyKSYmbjxidSh0LHIpfSwkbi5pc0FyZ3VtZW50cz1hZSwkbi5pc0FycmF5PVRvLCRuLmlzQm9vbGVhbj1mdW5jdGlvbihuKXtyZXR1cm4gdHJ1ZT09PW58fGZhbHNlPT09bnx8aChuKSYmWGUuY2FsbChuKT09RH0sJG4uaXNEYXRlPWZ1bmN0aW9uKG4pe3JldHVybiBoKG4pJiZYZS5jYWxsKG4pPT1QfSwkbi5pc0VsZW1lbnQ9Y2UsJG4uaXNFbXB0eT1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09bj90cnVlOmpyKG4pJiYoVG8obil8fHZlKG4pfHxhZShuKXx8aChuKSYmTm8obi5zcGxpY2UpKT8hbi5sZW5ndGg6IUtvKG4pLmxlbmd0aDtcclxuXHJcbn0sJG4uaXNFcXVhbD1mdW5jdGlvbihuLHQscixlKXtyZXR1cm4gcj10eXBlb2Ygcj09XCJmdW5jdGlvblwiJiZ6dChyLGUsMyksIXImJkNyKG4pJiZDcih0KT9uPT09dDooZT1yP3Iobix0KTp3LGU9PT13P3l0KG4sdCxyKTohIWUpfSwkbi5pc0Vycm9yPWxlLCRuLmlzRmluaXRlPVVvLCRuLmlzRnVuY3Rpb249Tm8sJG4uaXNNYXRjaD1mdW5jdGlvbihuLHQscixlKXt2YXIgdT1Lbyh0KSxvPXUubGVuZ3RoO2lmKCFvKXJldHVybiB0cnVlO2lmKG51bGw9PW4pcmV0dXJuIGZhbHNlO2lmKHI9dHlwZW9mIHI9PVwiZnVuY3Rpb25cIiYmenQocixlLDMpLG49RnIobiksIXImJjE9PW8pe3ZhciBpPXVbMF07aWYoZT10W2ldLENyKGUpKXJldHVybiBlPT09bltpXSYmKGUhPT13fHxpIGluIG4pfWZvcih2YXIgaT1VZShvKSxmPVVlKG8pO28tLTspZT1pW29dPXRbdVtvXV0sZltvXT1DcihlKTtyZXR1cm4gZHQobix1LGksZixyKX0sJG4uaXNOYU49ZnVuY3Rpb24obil7cmV0dXJuIGhlKG4pJiZuIT0rbn0sJG4uaXNOYXRpdmU9cGUsXHJcbiRuLmlzTnVsbD1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09PW59LCRuLmlzTnVtYmVyPWhlLCRuLmlzT2JqZWN0PXNlLCRuLmlzUGxhaW5PYmplY3Q9Rm8sJG4uaXNSZWdFeHA9X2UsJG4uaXNTdHJpbmc9dmUsJG4uaXNUeXBlZEFycmF5PWdlLCRuLmlzVW5kZWZpbmVkPWZ1bmN0aW9uKG4pe3JldHVybiBuPT09d30sJG4ua2ViYWJDYXNlPUhvLCRuLmxhc3Q9UHIsJG4ubGFzdEluZGV4T2Y9ZnVuY3Rpb24obix0LHIpe3ZhciBlPW4/bi5sZW5ndGg6MDtpZighZSlyZXR1cm4tMTt2YXIgdT1lO2lmKHR5cGVvZiByPT1cIm51bWJlclwiKXU9KDA+cj9idShlK3IsMCk6eHUocnx8MCxlLTEpKSsxO2Vsc2UgaWYocilyZXR1cm4gdT0kdChuLHQsdHJ1ZSktMSxuPW5bdV0sKHQ9PT10P3Q9PT1uOm4hPT1uKT91Oi0xO2lmKHQhPT10KXJldHVybiBwKG4sdSx0cnVlKTtmb3IoO3UtLTspaWYoblt1XT09PXQpcmV0dXJuIHU7cmV0dXJuLTF9LCRuLm1heD1paSwkbi5taW49ZmksJG4ubm9Db25mbGljdD1mdW5jdGlvbigpe1xyXG5yZXR1cm4gXy5fPUhlLHRoaXN9LCRuLm5vb3A9U2UsJG4ubm93PXdvLCRuLnBhZD1mdW5jdGlvbihuLHQscil7bj11KG4pLHQ9K3Q7dmFyIGU9bi5sZW5ndGg7cmV0dXJuIGU8dCYmbXUodCk/KGU9KHQtZSkvMix0PXV1KGUpLGU9cnUoZSkscj1scihcIlwiLGUsciksci5zbGljZSgwLHQpK24rcik6bn0sJG4ucGFkTGVmdD1Rbywkbi5wYWRSaWdodD1uaSwkbi5wYXJzZUludD1BZSwkbi5yYW5kb209ZnVuY3Rpb24obix0LHIpe3ImJk9yKG4sdCxyKSYmKHQ9cj1udWxsKTt2YXIgZT1udWxsPT1uLHU9bnVsbD09dDtyZXR1cm4gbnVsbD09ciYmKHUmJnR5cGVvZiBuPT1cImJvb2xlYW5cIj8ocj1uLG49MSk6dHlwZW9mIHQ9PVwiYm9vbGVhblwiJiYocj10LHU9dHJ1ZSkpLGUmJnUmJih0PTEsdT1mYWxzZSksbj0rbnx8MCx1Pyh0PW4sbj0wKTp0PSt0fHwwLHJ8fG4lMXx8dCUxPyhyPU91KCkseHUobityKih0LW4rcGFyc2VGbG9hdChcIjFlLVwiKygocitcIlwiKS5sZW5ndGgtMSkpKSx0KSk6T3Qobix0KX0sJG4ucmVkdWNlPWdvLFxyXG4kbi5yZWR1Y2VSaWdodD15bywkbi5yZXBlYXQ9amUsJG4ucmVzdWx0PWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1udWxsPT1uP3c6blt0XTtyZXR1cm4gZT09PXcmJihudWxsPT1ufHxFcih0LG4pfHwodD0kcih0KSxuPTE9PXQubGVuZ3RoP246Z3QobixJdCh0LDAsLTEpKSxlPW51bGw9PW4/dzpuW1ByKHQpXSksZT1lPT09dz9yOmUpLE5vKGUpP2UuY2FsbChuKTplfSwkbi5ydW5JbkNvbnRleHQ9bSwkbi5zaXplPWZ1bmN0aW9uKG4pe3ZhciB0PW4/WXUobik6MDtyZXR1cm4gUnIodCk/dDpLbyhuKS5sZW5ndGh9LCRuLnNuYWtlQ2FzZT10aSwkbi5zb21lPWVlLCRuLnNvcnRlZEluZGV4PW5vLCRuLnNvcnRlZExhc3RJbmRleD10bywkbi5zdGFydENhc2U9cmksJG4uc3RhcnRzV2l0aD1mdW5jdGlvbihuLHQscil7cmV0dXJuIG49dShuKSxyPW51bGw9PXI/MDp4dSgwPnI/MDorcnx8MCxuLmxlbmd0aCksbi5sYXN0SW5kZXhPZih0LHIpPT1yfSwkbi5zdW09ZnVuY3Rpb24obix0LHIpe3ImJk9yKG4sdCxyKSYmKHQ9bnVsbCk7XHJcblxyXG52YXIgZT1kcigpLHU9bnVsbD09dDtpZihlPT09dXQmJnV8fCh1PWZhbHNlLHQ9ZSh0LHIsMykpLHUpe2ZvcihuPVRvKG4pP246TnIobiksdD1uLmxlbmd0aCxyPTA7dC0tOylyKz0rblt0XXx8MDtuPXJ9ZWxzZSBuPVN0KG4sdCk7cmV0dXJuIG59LCRuLnRlbXBsYXRlPWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT0kbi50ZW1wbGF0ZVNldHRpbmdzO3ImJk9yKG4sdCxyKSYmKHQ9cj1udWxsKSxuPXUobiksdD10dCgkdSh7fSxyfHx0KSxlLG50KSxyPXR0KCR1KHt9LHQuaW1wb3J0cyksZS5pbXBvcnRzLG50KTt2YXIgbyxpLGY9S28ociksYT1VdChyLGYpLGM9MDtyPXQuaW50ZXJwb2xhdGV8fFJuO3ZhciBsPVwiX19wKz0nXCI7cj1NZSgodC5lc2NhcGV8fFJuKS5zb3VyY2UrXCJ8XCIrci5zb3VyY2UrXCJ8XCIrKHI9PT1nbj9qbjpSbikuc291cmNlK1wifFwiKyh0LmV2YWx1YXRlfHxSbikuc291cmNlK1wifCRcIixcImdcIik7dmFyIHA9XCJzb3VyY2VVUkxcImluIHQ/XCIvLyMgc291cmNlVVJMPVwiK3Quc291cmNlVVJMK1wiXFxuXCI6XCJcIjtcclxuXHJcbmlmKG4ucmVwbGFjZShyLGZ1bmN0aW9uKHQscixlLHUsZixhKXtyZXR1cm4gZXx8KGU9dSksbCs9bi5zbGljZShjLGEpLnJlcGxhY2UoQ24scyksciYmKG89dHJ1ZSxsKz1cIicrX19lKFwiK3IrXCIpKydcIiksZiYmKGk9dHJ1ZSxsKz1cIic7XCIrZitcIjtcXG5fX3ArPSdcIiksZSYmKGwrPVwiJysoKF9fdD0oXCIrZStcIikpPT1udWxsPycnOl9fdCkrJ1wiKSxjPWErdC5sZW5ndGgsdH0pLGwrPVwiJztcIiwodD10LnZhcmlhYmxlKXx8KGw9XCJ3aXRoKG9iail7XCIrbCtcIn1cIiksbD0oaT9sLnJlcGxhY2UoZm4sXCJcIik6bCkucmVwbGFjZShhbixcIiQxXCIpLnJlcGxhY2UoY24sXCIkMTtcIiksbD1cImZ1bmN0aW9uKFwiKyh0fHxcIm9ialwiKStcIil7XCIrKHQ/XCJcIjpcIm9ianx8KG9iaj17fSk7XCIpK1widmFyIF9fdCxfX3A9JydcIisobz9cIixfX2U9Xy5lc2NhcGVcIjpcIlwiKSsoaT9cIixfX2o9QXJyYXkucHJvdG90eXBlLmpvaW47ZnVuY3Rpb24gcHJpbnQoKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyl9XCI6XCI7XCIpK2wrXCJyZXR1cm4gX19wfVwiLFxyXG50PWVpKGZ1bmN0aW9uKCl7cmV0dXJuICRlKGYscCtcInJldHVybiBcIitsKS5hcHBseSh3LGEpfSksdC5zb3VyY2U9bCxsZSh0KSl0aHJvdyB0O3JldHVybiB0fSwkbi50cmltPWtlLCRuLnRyaW1MZWZ0PWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1uO3JldHVybihuPXUobikpP24uc2xpY2UoKHI/T3IoZSx0LHIpOm51bGw9PXQpP2cobik6aShuLHQrXCJcIikpOm59LCRuLnRyaW1SaWdodD1mdW5jdGlvbihuLHQscil7dmFyIGU9bjtyZXR1cm4obj11KG4pKT8ocj9PcihlLHQscik6bnVsbD09dCk/bi5zbGljZSgwLHkobikrMSk6bi5zbGljZSgwLGYobix0K1wiXCIpKzEpOm59LCRuLnRydW5jPWZ1bmN0aW9uKG4sdCxyKXtyJiZPcihuLHQscikmJih0PW51bGwpO3ZhciBlPVc7aWYocj1TLG51bGwhPXQpaWYoc2UodCkpe3ZhciBvPVwic2VwYXJhdG9yXCJpbiB0P3Quc2VwYXJhdG9yOm8sZT1cImxlbmd0aFwiaW4gdD8rdC5sZW5ndGh8fDA6ZTtyPVwib21pc3Npb25cImluIHQ/dSh0Lm9taXNzaW9uKTpyfWVsc2UgZT0rdHx8MDtcclxuXHJcbmlmKG49dShuKSxlPj1uLmxlbmd0aClyZXR1cm4gbjtpZihlLT1yLmxlbmd0aCwxPmUpcmV0dXJuIHI7aWYodD1uLnNsaWNlKDAsZSksbnVsbD09bylyZXR1cm4gdCtyO2lmKF9lKG8pKXtpZihuLnNsaWNlKGUpLnNlYXJjaChvKSl7dmFyIGksZj1uLnNsaWNlKDAsZSk7Zm9yKG8uZ2xvYmFsfHwobz1NZShvLnNvdXJjZSwoa24uZXhlYyhvKXx8XCJcIikrXCJnXCIpKSxvLmxhc3RJbmRleD0wO249by5leGVjKGYpOylpPW4uaW5kZXg7dD10LnNsaWNlKDAsbnVsbD09aT9lOmkpfX1lbHNlIG4uaW5kZXhPZihvLGUpIT1lJiYobz10Lmxhc3RJbmRleE9mKG8pLC0xPG8mJih0PXQuc2xpY2UoMCxvKSkpO3JldHVybiB0K3J9LCRuLnVuZXNjYXBlPWZ1bmN0aW9uKG4pe3JldHVybihuPXUobikpJiZwbi50ZXN0KG4pP24ucmVwbGFjZShsbixkKTpufSwkbi51bmlxdWVJZD1mdW5jdGlvbihuKXt2YXIgdD0rK0plO3JldHVybiB1KG4pK3R9LCRuLndvcmRzPU9lLCRuLmFsbD1Yciwkbi5hbnk9ZWUsJG4uY29udGFpbnM9UXIsXHJcbiRuLmRldGVjdD1hbywkbi5mb2xkbD1nbywkbi5mb2xkcj15bywkbi5oZWFkPU1yLCRuLmluY2x1ZGU9UXIsJG4uaW5qZWN0PWdvLFdlKCRuLGZ1bmN0aW9uKCl7dmFyIG49e307cmV0dXJuIGh0KCRuLGZ1bmN0aW9uKHQscil7JG4ucHJvdG90eXBlW3JdfHwobltyXT10KX0pLG59KCksZmFsc2UpLCRuLnNhbXBsZT10ZSwkbi5wcm90b3R5cGUuc2FtcGxlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLl9fY2hhaW5fX3x8bnVsbCE9bj90aGlzLnRocnUoZnVuY3Rpb24odCl7cmV0dXJuIHRlKHQsbil9KTp0ZSh0aGlzLnZhbHVlKCkpfSwkbi5WRVJTSU9OPWIsS24oXCJiaW5kIGJpbmRLZXkgY3VycnkgY3VycnlSaWdodCBwYXJ0aWFsIHBhcnRpYWxSaWdodFwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihuKXskbltuXS5wbGFjZWhvbGRlcj0kbn0pLEtuKFtcImRyb3BXaGlsZVwiLFwiZmlsdGVyXCIsXCJtYXBcIixcInRha2VXaGlsZVwiXSxmdW5jdGlvbihuLHQpe3ZhciByPXQhPSQsZT10PT1OO0JuLnByb3RvdHlwZVtuXT1mdW5jdGlvbihuLHUpe1xyXG52YXIgbz10aGlzLl9fZmlsdGVyZWRfXyxpPW8mJmU/bmV3IEJuKHRoaXMpOnRoaXMuY2xvbmUoKTtyZXR1cm4oaS5fX2l0ZXJhdGVlc19ffHwoaS5fX2l0ZXJhdGVlc19fPVtdKSkucHVzaCh7ZG9uZTpmYWxzZSxjb3VudDowLGluZGV4OjAsaXRlcmF0ZWU6ZHIobix1LDEpLGxpbWl0Oi0xLHR5cGU6dH0pLGkuX19maWx0ZXJlZF9fPW98fHIsaX19KSxLbihbXCJkcm9wXCIsXCJ0YWtlXCJdLGZ1bmN0aW9uKG4sdCl7dmFyIHI9bitcIldoaWxlXCI7Qm4ucHJvdG90eXBlW25dPWZ1bmN0aW9uKHIpe3ZhciBlPXRoaXMuX19maWx0ZXJlZF9fLHU9ZSYmIXQ/dGhpcy5kcm9wV2hpbGUoKTp0aGlzLmNsb25lKCk7cmV0dXJuIHI9bnVsbD09cj8xOmJ1KHV1KHIpfHwwLDApLGU/dD91Ll9fdGFrZUNvdW50X189eHUodS5fX3Rha2VDb3VudF9fLHIpOlByKHUuX19pdGVyYXRlZXNfXykubGltaXQ9cjoodS5fX3ZpZXdzX198fCh1Ll9fdmlld3NfXz1bXSkpLnB1c2goe3NpemU6cix0eXBlOm4rKDA+dS5fX2Rpcl9fP1wiUmlnaHRcIjpcIlwiKVxyXG59KSx1fSxCbi5wcm90b3R5cGVbbitcIlJpZ2h0XCJdPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnJldmVyc2UoKVtuXSh0KS5yZXZlcnNlKCl9LEJuLnByb3RvdHlwZVtuK1wiUmlnaHRXaGlsZVwiXT1mdW5jdGlvbihuLHQpe3JldHVybiB0aGlzLnJldmVyc2UoKVtyXShuLHQpLnJldmVyc2UoKX19KSxLbihbXCJmaXJzdFwiLFwibGFzdFwiXSxmdW5jdGlvbihuLHQpe3ZhciByPVwidGFrZVwiKyh0P1wiUmlnaHRcIjpcIlwiKTtCbi5wcm90b3R5cGVbbl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1tyXSgxKS52YWx1ZSgpWzBdfX0pLEtuKFtcImluaXRpYWxcIixcInJlc3RcIl0sZnVuY3Rpb24obix0KXt2YXIgcj1cImRyb3BcIisodD9cIlwiOlwiUmlnaHRcIik7Qm4ucHJvdG90eXBlW25dPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbcl0oMSl9fSksS24oW1wicGx1Y2tcIixcIndoZXJlXCJdLGZ1bmN0aW9uKG4sdCl7dmFyIHI9dD9cImZpbHRlclwiOlwibWFwXCIsZT10P3d0OlRlO0JuLnByb3RvdHlwZVtuXT1mdW5jdGlvbihuKXtyZXR1cm4gdGhpc1tyXShlKG4pKTtcclxuXHJcbn19KSxCbi5wcm90b3R5cGUuY29tcGFjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZpbHRlcihSZSl9LEJuLnByb3RvdHlwZS5yZWplY3Q9ZnVuY3Rpb24obix0KXtyZXR1cm4gbj1kcihuLHQsMSksdGhpcy5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIW4odCl9KX0sQm4ucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKG4sdCl7bj1udWxsPT1uPzA6K258fDA7dmFyIHI9dGhpcztyZXR1cm4gMD5uP3I9dGhpcy50YWtlUmlnaHQoLW4pOm4mJihyPXRoaXMuZHJvcChuKSksdCE9PXcmJih0PSt0fHwwLHI9MD50P3IuZHJvcFJpZ2h0KC10KTpyLnRha2UodC1uKSkscn0sQm4ucHJvdG90eXBlLnRvQXJyYXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kcm9wKDApfSxodChCbi5wcm90b3R5cGUsZnVuY3Rpb24obix0KXt2YXIgcj0kblt0XTtpZihyKXt2YXIgZT0vXig/OmZpbHRlcnxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QodCksdT0vXig/OmZpcnN0fGxhc3QpJC8udGVzdCh0KTskbi5wcm90b3R5cGVbdF09ZnVuY3Rpb24oKXtcclxuZnVuY3Rpb24gdChuKXtyZXR1cm4gbj1bbl0sZnUuYXBwbHkobixvKSxyLmFwcGx5KCRuLG4pfXZhciBvPWFyZ3VtZW50cyxpPXRoaXMuX19jaGFpbl9fLGY9dGhpcy5fX3dyYXBwZWRfXyxhPSEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsYz1mIGluc3RhbmNlb2YgQm4sbD1vWzBdLHM9Y3x8VG8oZik7cmV0dXJuIHMmJmUmJnR5cGVvZiBsPT1cImZ1bmN0aW9uXCImJjEhPWwubGVuZ3RoJiYoYz1zPWZhbHNlKSxjPWMmJiFhLHUmJiFpP2M/bi5jYWxsKGYpOnIuY2FsbCgkbix0aGlzLnZhbHVlKCkpOnM/KGY9bi5hcHBseShjP2Y6bmV3IEJuKHRoaXMpLG8pLHV8fCFhJiYhZi5fX2FjdGlvbnNfX3x8KGYuX19hY3Rpb25zX198fChmLl9fYWN0aW9uc19fPVtdKSkucHVzaCh7ZnVuYzpKcixhcmdzOlt0XSx0aGlzQXJnOiRufSksbmV3IHpuKGYsaSkpOnRoaXMudGhydSh0KX19fSksS24oXCJjb25jYXQgam9pbiBwb3AgcHVzaCByZXBsYWNlIHNoaWZ0IHNvcnQgc3BsaWNlIHNwbGl0IHVuc2hpZnRcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24obil7XHJcbnZhciB0PSgvXig/OnJlcGxhY2V8c3BsaXQpJC8udGVzdChuKT9WZTpxZSlbbl0scj0vXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3Qobik/XCJ0YXBcIjpcInRocnVcIixlPS9eKD86am9pbnxwb3B8cmVwbGFjZXxzaGlmdCkkLy50ZXN0KG4pOyRuLnByb3RvdHlwZVtuXT1mdW5jdGlvbigpe3ZhciBuPWFyZ3VtZW50cztyZXR1cm4gZSYmIXRoaXMuX19jaGFpbl9fP3QuYXBwbHkodGhpcy52YWx1ZSgpLG4pOnRoaXNbcl0oZnVuY3Rpb24ocil7cmV0dXJuIHQuYXBwbHkocixuKX0pfX0pLGh0KEJuLnByb3RvdHlwZSxmdW5jdGlvbihuLHQpe3ZhciByPSRuW3RdO2lmKHIpe3ZhciBlPXIubmFtZTsoTnVbZV18fChOdVtlXT1bXSkpLnB1c2goe25hbWU6dCxmdW5jOnJ9KX19KSxOdVtjcihudWxsLEEpLm5hbWVdPVt7bmFtZTpcIndyYXBwZXJcIixmdW5jOm51bGx9XSxCbi5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgbj10aGlzLl9fYWN0aW9uc19fLHQ9dGhpcy5fX2l0ZXJhdGVlc19fLHI9dGhpcy5fX3ZpZXdzX18sZT1uZXcgQm4odGhpcy5fX3dyYXBwZWRfXyk7XHJcblxyXG5yZXR1cm4gZS5fX2FjdGlvbnNfXz1uP3FuKG4pOm51bGwsZS5fX2Rpcl9fPXRoaXMuX19kaXJfXyxlLl9fZmlsdGVyZWRfXz10aGlzLl9fZmlsdGVyZWRfXyxlLl9faXRlcmF0ZWVzX189dD9xbih0KTpudWxsLGUuX190YWtlQ291bnRfXz10aGlzLl9fdGFrZUNvdW50X18sZS5fX3ZpZXdzX189cj9xbihyKTpudWxsLGV9LEJuLnByb3RvdHlwZS5yZXZlcnNlPWZ1bmN0aW9uKCl7aWYodGhpcy5fX2ZpbHRlcmVkX18pe3ZhciBuPW5ldyBCbih0aGlzKTtuLl9fZGlyX189LTEsbi5fX2ZpbHRlcmVkX189dHJ1ZX1lbHNlIG49dGhpcy5jbG9uZSgpLG4uX19kaXJfXyo9LTE7cmV0dXJuIG59LEJuLnByb3RvdHlwZS52YWx1ZT1mdW5jdGlvbigpe3ZhciBuPXRoaXMuX193cmFwcGVkX18udmFsdWUoKTtpZighVG8obikpcmV0dXJuIEZ0KG4sdGhpcy5fX2FjdGlvbnNfXyk7dmFyIHQscj10aGlzLl9fZGlyX18sZT0wPnI7dD1uLmxlbmd0aDtmb3IodmFyIHU9dGhpcy5fX3ZpZXdzX18sbz0wLGk9LTEsZj11P3UubGVuZ3RoOjA7KytpPGY7KXtcclxudmFyIGE9dVtpXSxjPWEuc2l6ZTtzd2l0Y2goYS50eXBlKXtjYXNlXCJkcm9wXCI6bys9YzticmVhaztjYXNlXCJkcm9wUmlnaHRcIjp0LT1jO2JyZWFrO2Nhc2VcInRha2VcIjp0PXh1KHQsbytjKTticmVhaztjYXNlXCJ0YWtlUmlnaHRcIjpvPWJ1KG8sdC1jKX19dD17c3RhcnQ6byxlbmQ6dH0sdT10LnN0YXJ0LG89dC5lbmQsdD1vLXUsdT1lP286dS0xLG89eHUodCx0aGlzLl9fdGFrZUNvdW50X18pLGY9KGk9dGhpcy5fX2l0ZXJhdGVlc19fKT9pLmxlbmd0aDowLGE9MCxjPVtdO246Zm9yKDt0LS0mJmE8bzspe2Zvcih2YXIgdT11K3IsbD0tMSxzPW5bdV07KytsPGY7KXt2YXIgcD1pW2xdLGg9cC5pdGVyYXRlZSxfPXAudHlwZTtpZihfPT1OKXtpZihwLmRvbmUmJihlP3U+cC5pbmRleDp1PHAuaW5kZXgpJiYocC5jb3VudD0wLHAuZG9uZT1mYWxzZSkscC5pbmRleD11LCEocC5kb25lfHwoXz1wLmxpbWl0LHAuZG9uZT0tMTxfP3AuY291bnQrKz49XzohaChzKSkpKWNvbnRpbnVlIG59ZWxzZSBpZihwPWgocyksXHJcbl89PSQpcz1wO2Vsc2UgaWYoIXApe2lmKF89PUYpY29udGludWUgbjticmVhayBufX1jW2ErK109c31yZXR1cm4gY30sJG4ucHJvdG90eXBlLmNoYWluPWZ1bmN0aW9uKCl7cmV0dXJuIEdyKHRoaXMpfSwkbi5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB6bih0aGlzLnZhbHVlKCksdGhpcy5fX2NoYWluX18pfSwkbi5wcm90b3R5cGUucGxhbnQ9ZnVuY3Rpb24obil7Zm9yKHZhciB0LHI9dGhpcztyIGluc3RhbmNlb2YgTG47KXt2YXIgZT1McihyKTt0P3UuX193cmFwcGVkX189ZTp0PWU7dmFyIHU9ZSxyPXIuX193cmFwcGVkX199cmV0dXJuIHUuX193cmFwcGVkX189bix0fSwkbi5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbigpe3ZhciBuPXRoaXMuX193cmFwcGVkX187cmV0dXJuIG4gaW5zdGFuY2VvZiBCbj8odGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgmJihuPW5ldyBCbih0aGlzKSksbmV3IHpuKG4ucmV2ZXJzZSgpLHRoaXMuX19jaGFpbl9fKSk6dGhpcy50aHJ1KGZ1bmN0aW9uKG4pe1xyXG5yZXR1cm4gbi5yZXZlcnNlKCl9KX0sJG4ucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWUoKStcIlwifSwkbi5wcm90b3R5cGUucnVuPSRuLnByb3RvdHlwZS50b0pTT049JG4ucHJvdG90eXBlLnZhbHVlT2Y9JG4ucHJvdG90eXBlLnZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIEZ0KHRoaXMuX193cmFwcGVkX18sdGhpcy5fX2FjdGlvbnNfXyl9LCRuLnByb3RvdHlwZS5jb2xsZWN0PSRuLnByb3RvdHlwZS5tYXAsJG4ucHJvdG90eXBlLmhlYWQ9JG4ucHJvdG90eXBlLmZpcnN0LCRuLnByb3RvdHlwZS5zZWxlY3Q9JG4ucHJvdG90eXBlLmZpbHRlciwkbi5wcm90b3R5cGUudGFpbD0kbi5wcm90b3R5cGUucmVzdCwkbn12YXIgdyxiPVwiMy44LjBcIix4PTEsQT0yLGo9NCxrPTgsTz0xNixFPTMyLEk9NjQsUj0xMjgsQz0yNTYsVz0zMCxTPVwiLi4uXCIsVD0xNTAsVT0xNixOPTAsRj0xLCQ9MixMPVwiRXhwZWN0ZWQgYSBmdW5jdGlvblwiLHo9XCJfX2xvZGFzaF9wbGFjZWhvbGRlcl9fXCIsQj1cIltvYmplY3QgQXJndW1lbnRzXVwiLE09XCJbb2JqZWN0IEFycmF5XVwiLEQ9XCJbb2JqZWN0IEJvb2xlYW5dXCIsUD1cIltvYmplY3QgRGF0ZV1cIixxPVwiW29iamVjdCBFcnJvcl1cIixLPVwiW29iamVjdCBGdW5jdGlvbl1cIixWPVwiW29iamVjdCBOdW1iZXJdXCIsWT1cIltvYmplY3QgT2JqZWN0XVwiLFo9XCJbb2JqZWN0IFJlZ0V4cF1cIixHPVwiW29iamVjdCBTdHJpbmddXCIsSj1cIltvYmplY3QgQXJyYXlCdWZmZXJdXCIsWD1cIltvYmplY3QgRmxvYXQzMkFycmF5XVwiLEg9XCJbb2JqZWN0IEZsb2F0NjRBcnJheV1cIixRPVwiW29iamVjdCBJbnQ4QXJyYXldXCIsbm49XCJbb2JqZWN0IEludDE2QXJyYXldXCIsdG49XCJbb2JqZWN0IEludDMyQXJyYXldXCIscm49XCJbb2JqZWN0IFVpbnQ4QXJyYXldXCIsZW49XCJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XVwiLHVuPVwiW29iamVjdCBVaW50MTZBcnJheV1cIixvbj1cIltvYmplY3QgVWludDMyQXJyYXldXCIsZm49L1xcYl9fcFxcKz0nJzsvZyxhbj0vXFxiKF9fcFxcKz0pJydcXCsvZyxjbj0vKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpXFwrJyc7L2csbG49LyYoPzphbXB8bHR8Z3R8cXVvdHwjMzl8Izk2KTsvZyxzbj0vWyY8PlwiJ2BdL2cscG49UmVnRXhwKGxuLnNvdXJjZSksaG49UmVnRXhwKHNuLnNvdXJjZSksX249LzwlLShbXFxzXFxTXSs/KSU+L2csdm49LzwlKFtcXHNcXFNdKz8pJT4vZyxnbj0vPCU9KFtcXHNcXFNdKz8pJT4vZyx5bj0vXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXG5cXFxcXXxcXFxcLikqP1xcMSlcXF0vLGRuPS9eXFx3KiQvLG1uPS9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXG5cXFxcXXxcXFxcLikqPylcXDIpXFxdL2csd249L1suKis/XiR7fSgpfFtcXF1cXC9cXFxcXS9nLGJuPVJlZ0V4cCh3bi5zb3VyY2UpLHhuPS9bXFx1MDMwMC1cXHUwMzZmXFx1ZmUyMC1cXHVmZTIzXS9nLEFuPS9cXFxcKFxcXFwpPy9nLGpuPS9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZyxrbj0vXFx3KiQvLE9uPS9eMFt4WF0vLEVuPS9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC8sSW49L1tcXHhjMC1cXHhkNlxceGQ4LVxceGRlXFx4ZGYtXFx4ZjZcXHhmOC1cXHhmZl0vZyxSbj0vKCReKS8sQ249L1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nLFduPVJlZ0V4cChcIltBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVdKyg/PVtBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVdW2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZl0rKXxbQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlXT9bYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmXSt8W0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZV0rfFswLTldK1wiLFwiZ1wiKSxTbj1cIiBcXHRcXHgwYlxcZlxceGEwXFx1ZmVmZlxcblxcclxcdTIwMjhcXHUyMDI5XFx1MTY4MFxcdTE4MGVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwYVxcdTIwMmZcXHUyMDVmXFx1MzAwMFwiLFRuPVwiQXJyYXkgQXJyYXlCdWZmZXIgRGF0ZSBFcnJvciBGbG9hdDMyQXJyYXkgRmxvYXQ2NEFycmF5IEZ1bmN0aW9uIEludDhBcnJheSBJbnQxNkFycmF5IEludDMyQXJyYXkgTWF0aCBOdW1iZXIgT2JqZWN0IFJlZ0V4cCBTZXQgU3RyaW5nIF8gY2xlYXJUaW1lb3V0IGRvY3VtZW50IGlzRmluaXRlIHBhcnNlSW50IHNldFRpbWVvdXQgVHlwZUVycm9yIFVpbnQ4QXJyYXkgVWludDhDbGFtcGVkQXJyYXkgVWludDE2QXJyYXkgVWludDMyQXJyYXkgV2Vha01hcCB3aW5kb3dcIi5zcGxpdChcIiBcIiksVW49e307XHJcblxyXG5VbltYXT1VbltIXT1VbltRXT1Vbltubl09VW5bdG5dPVVuW3JuXT1Vbltlbl09VW5bdW5dPVVuW29uXT10cnVlLFVuW0JdPVVuW01dPVVuW0pdPVVuW0RdPVVuW1BdPVVuW3FdPVVuW0tdPVVuW1wiW29iamVjdCBNYXBdXCJdPVVuW1ZdPVVuW1ldPVVuW1pdPVVuW1wiW29iamVjdCBTZXRdXCJdPVVuW0ddPVVuW1wiW29iamVjdCBXZWFrTWFwXVwiXT1mYWxzZTt2YXIgTm49e307Tm5bQl09Tm5bTV09Tm5bSl09Tm5bRF09Tm5bUF09Tm5bWF09Tm5bSF09Tm5bUV09Tm5bbm5dPU5uW3RuXT1ObltWXT1ObltZXT1ObltaXT1ObltHXT1Obltybl09Tm5bZW5dPU5uW3VuXT1Obltvbl09dHJ1ZSxObltxXT1ObltLXT1ObltcIltvYmplY3QgTWFwXVwiXT1ObltcIltvYmplY3QgU2V0XVwiXT1ObltcIltvYmplY3QgV2Vha01hcF1cIl09ZmFsc2U7dmFyIEZuPXtsZWFkaW5nOmZhbHNlLG1heFdhaXQ6MCx0cmFpbGluZzpmYWxzZX0sJG49e1wiXFx4YzBcIjpcIkFcIixcIlxceGMxXCI6XCJBXCIsXCJcXHhjMlwiOlwiQVwiLFwiXFx4YzNcIjpcIkFcIixcIlxceGM0XCI6XCJBXCIsXCJcXHhjNVwiOlwiQVwiLFxyXG5cIlxceGUwXCI6XCJhXCIsXCJcXHhlMVwiOlwiYVwiLFwiXFx4ZTJcIjpcImFcIixcIlxceGUzXCI6XCJhXCIsXCJcXHhlNFwiOlwiYVwiLFwiXFx4ZTVcIjpcImFcIixcIlxceGM3XCI6XCJDXCIsXCJcXHhlN1wiOlwiY1wiLFwiXFx4ZDBcIjpcIkRcIixcIlxceGYwXCI6XCJkXCIsXCJcXHhjOFwiOlwiRVwiLFwiXFx4YzlcIjpcIkVcIixcIlxceGNhXCI6XCJFXCIsXCJcXHhjYlwiOlwiRVwiLFwiXFx4ZThcIjpcImVcIixcIlxceGU5XCI6XCJlXCIsXCJcXHhlYVwiOlwiZVwiLFwiXFx4ZWJcIjpcImVcIixcIlxceGNjXCI6XCJJXCIsXCJcXHhjZFwiOlwiSVwiLFwiXFx4Y2VcIjpcIklcIixcIlxceGNmXCI6XCJJXCIsXCJcXHhlY1wiOlwiaVwiLFwiXFx4ZWRcIjpcImlcIixcIlxceGVlXCI6XCJpXCIsXCJcXHhlZlwiOlwiaVwiLFwiXFx4ZDFcIjpcIk5cIixcIlxceGYxXCI6XCJuXCIsXCJcXHhkMlwiOlwiT1wiLFwiXFx4ZDNcIjpcIk9cIixcIlxceGQ0XCI6XCJPXCIsXCJcXHhkNVwiOlwiT1wiLFwiXFx4ZDZcIjpcIk9cIixcIlxceGQ4XCI6XCJPXCIsXCJcXHhmMlwiOlwib1wiLFwiXFx4ZjNcIjpcIm9cIixcIlxceGY0XCI6XCJvXCIsXCJcXHhmNVwiOlwib1wiLFwiXFx4ZjZcIjpcIm9cIixcIlxceGY4XCI6XCJvXCIsXCJcXHhkOVwiOlwiVVwiLFwiXFx4ZGFcIjpcIlVcIixcIlxceGRiXCI6XCJVXCIsXCJcXHhkY1wiOlwiVVwiLFwiXFx4ZjlcIjpcInVcIixcIlxceGZhXCI6XCJ1XCIsXHJcblwiXFx4ZmJcIjpcInVcIixcIlxceGZjXCI6XCJ1XCIsXCJcXHhkZFwiOlwiWVwiLFwiXFx4ZmRcIjpcInlcIixcIlxceGZmXCI6XCJ5XCIsXCJcXHhjNlwiOlwiQWVcIixcIlxceGU2XCI6XCJhZVwiLFwiXFx4ZGVcIjpcIlRoXCIsXCJcXHhmZVwiOlwidGhcIixcIlxceGRmXCI6XCJzc1wifSxMbj17XCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImcXVvdDtcIixcIidcIjpcIiYjMzk7XCIsXCJgXCI6XCImIzk2O1wifSx6bj17XCImYW1wO1wiOlwiJlwiLFwiJmx0O1wiOlwiPFwiLFwiJmd0O1wiOlwiPlwiLFwiJnF1b3Q7XCI6J1wiJyxcIiYjMzk7XCI6XCInXCIsXCImIzk2O1wiOlwiYFwifSxCbj17XCJmdW5jdGlvblwiOnRydWUsb2JqZWN0OnRydWV9LE1uPXtcIlxcXFxcIjpcIlxcXFxcIixcIidcIjpcIidcIixcIlxcblwiOlwiblwiLFwiXFxyXCI6XCJyXCIsXCJcXHUyMDI4XCI6XCJ1MjAyOFwiLFwiXFx1MjAyOVwiOlwidTIwMjlcIn0sRG49Qm5bdHlwZW9mIGV4cG9ydHNdJiZleHBvcnRzJiYhZXhwb3J0cy5ub2RlVHlwZSYmZXhwb3J0cyxQbj1Cblt0eXBlb2YgbW9kdWxlXSYmbW9kdWxlJiYhbW9kdWxlLm5vZGVUeXBlJiZtb2R1bGUscW49Qm5bdHlwZW9mIHNlbGZdJiZzZWxmJiZzZWxmLk9iamVjdCYmc2VsZixLbj1Cblt0eXBlb2Ygd2luZG93XSYmd2luZG93JiZ3aW5kb3cuT2JqZWN0JiZ3aW5kb3csVm49UG4mJlBuLmV4cG9ydHM9PT1EbiYmRG4sWW49RG4mJlBuJiZ0eXBlb2YgZ2xvYmFsPT1cIm9iamVjdFwiJiZnbG9iYWwmJmdsb2JhbC5PYmplY3QmJmdsb2JhbHx8S24hPT0odGhpcyYmdGhpcy53aW5kb3cpJiZLbnx8cW58fHRoaXMsWm49bSgpO1xyXG5cclxudHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgZGVmaW5lLmFtZD09XCJvYmplY3RcIiYmZGVmaW5lLmFtZD8oWW4uXz1abiwgZGVmaW5lKGZ1bmN0aW9uKCl7cmV0dXJuIFpufSkpOkRuJiZQbj9Wbj8oUG4uZXhwb3J0cz1abikuXz1abjpEbi5fPVpuOlluLl89Wm59KS5jYWxsKHRoaXMpOyIsIi8qIVxyXG4gICBhbmd1bGFyLWJsb2NrLXVpIHYwLjIuMFxyXG4gICAoYykgMjAxNSAobnVsbCkgTWNOdWxsIGh0dHBzOi8vZ2l0aHViLmNvbS9NY051bGwvYW5ndWxhci1ibG9jay11aVxyXG4gICBMaWNlbnNlOiBNSVRcclxuKi9cclxuKGZ1bmN0aW9uKGFuZ3VsYXIpIHtcclxuXHJcbnZhciBibGtVSSA9IGFuZ3VsYXIubW9kdWxlKCdibG9ja1VJJywgW10pO1xyXG5cclxuYmxrVUkuY29uZmlnKFtcIiRwcm92aWRlXCIsIFwiJGh0dHBQcm92aWRlclwiLCBmdW5jdGlvbiAoJHByb3ZpZGUsICRodHRwUHJvdmlkZXIpIHtcclxuXHJcbiAgJHByb3ZpZGUuZGVjb3JhdG9yKCckZXhjZXB0aW9uSGFuZGxlcicsIFsnJGRlbGVnYXRlJywgJyRpbmplY3RvcicsXHJcbiAgICBmdW5jdGlvbiAoJGRlbGVnYXRlLCAkaW5qZWN0b3IpIHtcclxuICAgICAgdmFyIGJsb2NrVUksIGJsb2NrVUlDb25maWc7XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGV4Y2VwdGlvbiwgY2F1c2UpIHtcclxuXHJcbiAgICAgICAgYmxvY2tVSUNvbmZpZyA9IGJsb2NrVUlDb25maWcgfHwgJGluamVjdG9yLmdldCgnYmxvY2tVSUNvbmZpZycpO1xyXG5cclxuICAgICAgICBpZiAoYmxvY2tVSUNvbmZpZy5yZXNldE9uRXhjZXB0aW9uKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBibG9ja1VJID0gYmxvY2tVSSB8fCAkaW5qZWN0b3IuZ2V0KCdibG9ja1VJJyk7XHJcbiAgICAgICAgICAgIGJsb2NrVUkuaW5zdGFuY2VzLnJlc2V0KCk7XHJcbiAgICAgICAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnJGV4Y2VwdGlvbkhhbmRsZXInLCBleGNlcHRpb24pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGRlbGVnYXRlKGV4Y2VwdGlvbiwgY2F1c2UpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIF0pO1xyXG5cclxuICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdibG9ja1VJSHR0cEludGVyY2VwdG9yJyk7XHJcbn1dKTtcclxuXHJcbmJsa1VJLnJ1bihbXCIkZG9jdW1lbnRcIiwgXCJibG9ja1VJQ29uZmlnXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24gKCRkb2N1bWVudCwgYmxvY2tVSUNvbmZpZywgJHRlbXBsYXRlQ2FjaGUpIHtcclxuICBpZiAoYmxvY2tVSUNvbmZpZy5hdXRvSW5qZWN0Qm9keUJsb2NrKSB7XHJcbiAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmF0dHIoJ2Jsb2NrLXVpJywgJ21haW4nKTtcclxuICB9XHJcblxyXG4gIGlmIChibG9ja1VJQ29uZmlnLnRlbXBsYXRlKSB7XHJcblxyXG4gICAgLy8gU3dhcCB0aGUgYnVpbHRpbiB0ZW1wbGF0ZSB3aXRoIHRoZSBjdXN0b20gdGVtcGxhdGUuXHJcbiAgICAvLyBDcmVhdGUgYSBtYWdpYyBjYWNoZSBrZXkgYW5kIHBsYWNlIHRoZSB0ZW1wbGF0ZSBpbiB0aGUgY2FjaGUuXHJcblxyXG4gICAgYmxvY2tVSUNvbmZpZy50ZW1wbGF0ZVVybCA9ICckJGJsb2NrLXVpLXRlbXBsYXRlJCQnO1xyXG4gICAgJHRlbXBsYXRlQ2FjaGUucHV0KGJsb2NrVUlDb25maWcudGVtcGxhdGVVcmwsIGJsb2NrVUlDb25maWcudGVtcGxhdGUpO1xyXG4gIH1cclxufV0pO1xyXG5cclxuZnVuY3Rpb24gbW9kdWxlTG9hZGVkKG5hbWUpIHtcclxuICB0cnkge1xyXG4gICAgYW5ndWxhci5tb2R1bGUobmFtZSk7XHJcbiAgfSBjYXRjaChleCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5ibGtVSS5jb25maWcoW1wiJHByb3ZpZGVcIiwgZnVuY3Rpb24gKCRwcm92aWRlKSB7XHJcbiAgJHByb3ZpZGUuZGVjb3JhdG9yKCckbG9jYXRpb24nLCBkZWNvcmF0ZUxvY2F0aW9uKTtcclxufV0pO1xyXG5cclxudmFyIGRlY29yYXRlTG9jYXRpb24gPSBbXHJcbiAgJyRkZWxlZ2F0ZScsICdibG9ja1VJJywgJ2Jsb2NrVUlDb25maWcnLFxyXG4gIGZ1bmN0aW9uICgkZGVsZWdhdGUsIGJsb2NrVUksIGJsb2NrVUlDb25maWcpIHtcclxuXHJcbiAgICBpZiAoYmxvY2tVSUNvbmZpZy5ibG9ja0Jyb3dzZXJOYXZpZ2F0aW9uKSB7XHJcblxyXG4gICAgICBibG9ja1VJLiRfYmxvY2tMb2NhdGlvbkNoYW5nZSA9IHRydWU7XHJcblxyXG4gICAgICB2YXIgb3ZlcnJpZGVzID0gWyd1cmwnLCAncGF0aCcsICdzZWFyY2gnLCAnaGFzaCcsICdzdGF0ZSddO1xyXG5cclxuICAgICAgZnVuY3Rpb24gaG9vayhmKSB7XHJcbiAgICAgICAgdmFyIHMgPSAkZGVsZWdhdGVbZl07XHJcbiAgICAgICAgJGRlbGVnYXRlW2ZdID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgIC8vICAgICAgICBjb25zb2xlLmxvZyhmLCBEYXRlLm5vdygpLCBhcmd1bWVudHMpO1xyXG5cclxuICAgICAgICAgIHZhciByZXN1bHQgPSBzLmFwcGx5KCRkZWxlZ2F0ZSwgYXJndW1lbnRzKTtcclxuXHJcbiAgICAgICAgICAvLyBUaGUgY2FsbCB3YXMgYSBzZXR0ZXIgaWYgdGhlICRsb2NhdGlvbiBzZXJ2aWNlIGlzIHJldHVybmVkLlxyXG5cclxuICAgICAgICAgIGlmIChyZXN1bHQgPT09ICRkZWxlZ2F0ZSkge1xyXG5cclxuICAgICAgICAgICAgLy8gTWFyayB0aGUgbWFpbmJsb2NrIHVpIHRvIGFsbG93IHRoZSBsb2NhdGlvbiBjaGFuZ2UuXHJcblxyXG4gICAgICAgICAgICBibG9ja1VJLiRfYmxvY2tMb2NhdGlvbkNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYW5ndWxhci5mb3JFYWNoKG92ZXJyaWRlcywgaG9vayk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAkZGVsZWdhdGU7XHJcbn1dO1xyXG5cclxuLy8gQ2FsbGVkIGZyb20gYmxvY2stdWktZGlyZWN0aXZlIGZvciB0aGUgJ21haW4nIGluc3RhbmNlLlxyXG5cclxuZnVuY3Rpb24gYmxvY2tOYXZpZ2F0aW9uKCRzY29wZSwgbWFpbkJsb2NrVUksIGJsb2NrVUlDb25maWcpIHtcclxuXHJcbiAgaWYgKGJsb2NrVUlDb25maWcuYmxvY2tCcm93c2VyTmF2aWdhdGlvbikge1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyTG9jYXRpb25DaGFuZ2UoKSB7XHJcblxyXG4gICAgICAkc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cclxuICAgICAgICAvLyAgICAgICAgY29uc29sZS5sb2coJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbWFpbkJsb2NrVUkuJF9ibG9ja0xvY2F0aW9uQ2hhbmdlICsgJyAnICsgbWFpbkJsb2NrVUkuc3RhdGUoKS5ibG9ja0NvdW50KTtcclxuXHJcbiAgICAgICAgaWYgKG1haW5CbG9ja1VJLiRfYmxvY2tMb2NhdGlvbkNoYW5nZSAmJiBtYWluQmxvY2tVSS5zdGF0ZSgpLmJsb2NrQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAkc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG1haW5CbG9ja1VJLiRfYmxvY2tMb2NhdGlvbkNoYW5nZSA9IGJsb2NrVUlDb25maWcuYmxvY2tCcm93c2VyTmF2aWdhdGlvbjtcclxuXHJcbiAgICAgICAgLy8gICAgICAgIGNvbnNvbGUubG9nKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgbWFpbkJsb2NrVUkuJF9ibG9ja0xvY2F0aW9uQ2hhbmdlICsgJyAnICsgbWFpbkJsb2NrVUkuc3RhdGUoKS5ibG9ja0NvdW50KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1vZHVsZUxvYWRlZCgnbmdSb3V0ZScpKSB7XHJcblxyXG4gICAgICAvLyBBZnRlciB0aGUgaW5pdGlhbCBjb250ZW50IGhhcyBiZWVuIGxvYWRlZCB3ZSdsbCBzcHkgb24gYW55IGxvY2F0aW9uXHJcbiAgICAgIC8vIGNoYW5nZXMgYW5kIGRpc2NhcmQgdGhlbSB3aGVuIG5lZWRlZC5cclxuXHJcbiAgICAgIHZhciBmbiA9ICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgLy8gVW5ob29rIHRoZSB2aWV3IGxvYWRlZCBhbmQgaG9vayBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBwcmV2ZW50XHJcbiAgICAgICAgLy8gbG9jYXRpb24gY2hhbmdlcyB3aGlsZSB0aGUgYmxvY2sgaXMgYWN0aXZlLlxyXG5cclxuICAgICAgICBmbigpO1xyXG4gICAgICAgIHJlZ2lzdGVyTG9jYXRpb25DaGFuZ2UoKTtcclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlZ2lzdGVyTG9jYXRpb25DaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG59XHJcbmJsa1VJLmRpcmVjdGl2ZSgnYmxvY2tVaUNvbnRhaW5lcicsIFtcImJsb2NrVUlDb25maWdcIiwgXCJibG9ja1VpQ29udGFpbmVyTGlua0ZuXCIsIGZ1bmN0aW9uIChibG9ja1VJQ29uZmlnLCBibG9ja1VpQ29udGFpbmVyTGlua0ZuKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIHRlbXBsYXRlVXJsOiBibG9ja1VJQ29uZmlnLnRlbXBsYXRlVXJsLFxyXG4gICAgY29tcGlsZTogZnVuY3Rpb24oJGVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIGJsb2NrVWlDb250YWluZXJMaW5rRm47XHJcbiAgICB9XHJcbiAgfTtcclxufV0pLmZhY3RvcnkoJ2Jsb2NrVWlDb250YWluZXJMaW5rRm4nLCBbXCJibG9ja1VJXCIsIFwiYmxvY2tVSVV0aWxzXCIsIGZ1bmN0aW9uIChibG9ja1VJLCBibG9ja1VJVXRpbHMpIHtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uICgkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMpIHtcclxuXHJcbiAgICB2YXIgc3J2SW5zdGFuY2UgPSAkZWxlbWVudC5pbmhlcml0ZWREYXRhKCdibG9jay11aScpO1xyXG5cclxuICAgIGlmICghc3J2SW5zdGFuY2UpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBwYXJlbnQgYmxvY2stdWkgc2VydmljZSBpbnN0YW5jZSBsb2NhdGVkLicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEV4cG9zZSB0aGUgc3RhdGUgb24gdGhlIHNjb3BlXHJcblxyXG4gICAgJHNjb3BlLnN0YXRlID0gc3J2SW5zdGFuY2Uuc3RhdGUoKTtcclxuXHJcbi8vICAgICRzY29wZS4kd2F0Y2goJ3N0YXRlLmJsb2NraW5nJywgZnVuY3Rpb24odmFsdWUpIHtcclxuLy8gICAgICAkZWxlbWVudC50b2dnbGVDbGFzcygnYmxvY2stdWktdmlzaWJsZScsICEhdmFsdWUpO1xyXG4vLyAgICB9KTtcclxuLy9cclxuLy8gICAgJHNjb3BlLiR3YXRjaCgnc3RhdGUuYmxvY2tDb3VudCA+IDAnLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4vLyAgICAgICRlbGVtZW50LnRvZ2dsZUNsYXNzKCdibG9jay11aS1hY3RpdmUnLCAhIXZhbHVlKTtcclxuLy8gICAgfSk7XHJcbiAgfTtcclxufV0pO1xyXG5ibGtVSS5kaXJlY3RpdmUoJ2Jsb2NrVWknLCBbXCJibG9ja1VpQ29tcGlsZUZuXCIsIGZ1bmN0aW9uIChibG9ja1VpQ29tcGlsZUZuKSB7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICBjb21waWxlOiBibG9ja1VpQ29tcGlsZUZuXHJcbiAgfTtcclxuXHJcbn1dKS5mYWN0b3J5KCdibG9ja1VpQ29tcGlsZUZuJywgW1wiYmxvY2tVaVByZUxpbmtGblwiLCBmdW5jdGlvbiAoYmxvY2tVaVByZUxpbmtGbikge1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gKCRlbGVtZW50LCAkYXR0cnMpIHtcclxuXHJcbiAgICAvLyBDbGFzcyBzaG91bGQgYmUgYWRkZWQgaGVyZSB0byBwcmV2ZW50IGFuIGFuaW1hdGlvbiBkZWxheSBlcnJvci5cclxuXHJcbiAgICAkZWxlbWVudC5hcHBlbmQoJzxkaXYgYmxvY2stdWktY29udGFpbmVyIGNsYXNzPVwiYmxvY2stdWktY29udGFpbmVyXCI+PC9kaXY+Jyk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcHJlOiBibG9ja1VpUHJlTGlua0ZuXHJcbiAgICB9O1xyXG5cclxuICB9O1xyXG5cclxufV0pLmZhY3RvcnkoJ2Jsb2NrVWlQcmVMaW5rRm4nLCBbXCJibG9ja1VJXCIsIFwiYmxvY2tVSVV0aWxzXCIsIFwiYmxvY2tVSUNvbmZpZ1wiLCBmdW5jdGlvbiAoYmxvY2tVSSwgYmxvY2tVSVV0aWxzLCBibG9ja1VJQ29uZmlnKSB7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzKSB7XHJcblxyXG4gICAgLy8gSWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSB0aGUgY2xhc3MgXCJibG9jay11aVwiIHNldCwgd2Ugc2V0IHRoZVxyXG4gICAgLy8gZGVmYXVsdCBjc3MgY2xhc3NlcyBmcm9tIHRoZSBjb25maWcuXHJcblxyXG4gICAgaWYgKCEkZWxlbWVudC5oYXNDbGFzcygnYmxvY2stdWknKSkge1xyXG4gICAgICAkZWxlbWVudC5hZGRDbGFzcyhibG9ja1VJQ29uZmlnLmNzc0NsYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHBvc2UgdGhlIGJsb2NrVWlNZXNzYWdlQ2xhc3MgYXR0cmlidXRlIHZhbHVlIG9uIHRoZSBzY29wZVxyXG5cclxuICAgICRhdHRycy4kb2JzZXJ2ZSgnYmxvY2tVaU1lc3NhZ2VDbGFzcycsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAkc2NvcGUuJF9ibG9ja1VpTWVzc2FnZUNsYXNzID0gdmFsdWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGJsb2NrVUkgaW5zdGFuY2VcclxuICAgIC8vIFByZWZpeCB1bmRlcnNjb3JlIHRvIHByZXZlbnQgaW50ZWdlcnM6XHJcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWNOdWxsL2FuZ3VsYXItYmxvY2stdWkvcHVsbC84XHJcblxyXG4gICAgdmFyIGluc3RhbmNlSWQgPSAkYXR0cnMuYmxvY2tVaSB8fCAnXycgKyAkc2NvcGUuJGlkO1xyXG4gICAgdmFyIHNydkluc3RhbmNlID0gYmxvY2tVSS5pbnN0YW5jZXMuZ2V0KGluc3RhbmNlSWQpO1xyXG5cclxuICAgIC8vIElmIHRoaXMgaXMgdGhlIG1haW4gKHRvcG1vc3QpIGJsb2NrIGVsZW1lbnQgd2UnbGwgYWxzbyBuZWVkIHRvIGJsb2NrIGFueVxyXG4gICAgLy8gbG9jYXRpb24gY2hhbmdlcyB3aGlsZSB0aGUgYmxvY2sgaXMgYWN0aXZlLlxyXG5cclxuICAgIGlmIChpbnN0YW5jZUlkID09PSAnbWFpbicpIHtcclxuICAgICAgYmxvY2tOYXZpZ2F0aW9uKCRzY29wZSwgc3J2SW5zdGFuY2UsIGJsb2NrVUlDb25maWcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gTG9jYXRlIHRoZSBwYXJlbnQgYmxvY2tVSSBpbnN0YW5jZVxyXG4gICAgICB2YXIgcGFyZW50SW5zdGFuY2UgPSAkZWxlbWVudC5pbmhlcml0ZWREYXRhKCdibG9jay11aScpO1xyXG5cclxuICAgICAgaWYgKHBhcmVudEluc3RhbmNlKSB7XHJcbiAgICAgICAgLy8gVE9ETzogYXNzZXJ0IGlmIHBhcmVudCBpcyBhbHJlYWR5IHNldCB0byBzb21ldGhpbmcgZWxzZVxyXG4gICAgICAgIHNydkluc3RhbmNlLl9wYXJlbnQgPSBwYXJlbnRJbnN0YW5jZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEVuc3VyZSB0aGUgaW5zdGFuY2UgaXMgcmVsZWFzZWQgd2hlbiB0aGUgc2NvcGUgaXMgZGVzdHJveWVkXHJcblxyXG4gICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNydkluc3RhbmNlLnJlbGVhc2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEluY3JlYXNlIHRoZSByZWZlcmVuY2UgY291bnRcclxuXHJcbiAgICBzcnZJbnN0YW5jZS5hZGRSZWYoKTtcclxuXHJcbiAgICAvLyBFeHBvc2UgdGhlIHN0YXRlIG9uIHRoZSBzY29wZVxyXG5cclxuICAgICRzY29wZS4kX2Jsb2NrVWlTdGF0ZSA9IHNydkluc3RhbmNlLnN0YXRlKCk7XHJcblxyXG4gICAgJHNjb3BlLiR3YXRjaCgnJF9ibG9ja1VpU3RhdGUuYmxvY2tpbmcnLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgLy8gU2V0IHRoZSBhcmlhLWJ1c3kgYXR0cmlidXRlIGlmIG5lZWRlZFxyXG4gICAgICAkZWxlbWVudC5hdHRyKCdhcmlhLWJ1c3knLCAhIXZhbHVlKTtcclxuICAgICAgJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2Jsb2NrLXVpLXZpc2libGUnLCAhIXZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS4kd2F0Y2goJyRfYmxvY2tVaVN0YXRlLmJsb2NrQ291bnQgPiAwJywgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICRlbGVtZW50LnRvZ2dsZUNsYXNzKCdibG9jay11aS1hY3RpdmUnLCAhIXZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIElmIGEgcGF0dGVybiBpcyBwcm92aWRlZCBhc3NpZ24gaXQgdG8gdGhlIHN0YXRlXHJcblxyXG4gICAgdmFyIHBhdHRlcm4gPSAkYXR0cnMuYmxvY2tVaVBhdHRlcm47XHJcblxyXG4gICAgaWYgKHBhdHRlcm4pIHtcclxuICAgICAgdmFyIHJlZ0V4cCA9IGJsb2NrVUlVdGlscy5idWlsZFJlZ0V4cChwYXR0ZXJuKTtcclxuICAgICAgc3J2SW5zdGFuY2UucGF0dGVybihyZWdFeHApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSBzZXJ2aWNlIGluc3RhbmNlIG9uIHRoZSBlbGVtZW50XHJcblxyXG4gICAgJGVsZW1lbnQuZGF0YSgnYmxvY2stdWknLCBzcnZJbnN0YW5jZSk7XHJcblxyXG4gIH07XHJcblxyXG59XSk7XHJcbi8vLmZhY3RvcnkoJ2Jsb2NrVWlQb3N0TGlua0ZuJywgZnVuY3Rpb24oYmxvY2tVSVV0aWxzKSB7XHJcbi8vXHJcbi8vICByZXR1cm4gZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzKSB7XHJcbi8vXHJcbi8vICAgIHZhciAkbWVzc2FnZTtcclxuLy9cclxuLy8gICAgJGF0dHJzLiRvYnNlcnZlKCdibG9ja1VpTWVzc2FnZUNsYXNzJywgZnVuY3Rpb24odmFsdWUpIHtcclxuLy9cclxuLy8gICAgICAkbWVzc2FnZSA9ICRtZXNzYWdlIHx8IGJsb2NrVUlVdGlscy5maW5kRWxlbWVudCgkZWxlbWVudCwgZnVuY3Rpb24oJGUpIHtcclxuLy8gICAgICAgIHJldHVybiAkZS5oYXNDbGFzcygnYmxvY2stdWktbWVzc2FnZScpO1xyXG4vLyAgICAgIH0pO1xyXG4vL1xyXG4vLyAgICAgICRtZXNzYWdlLmFkZENsYXNzKHZhbHVlKTtcclxuLy9cclxuLy8gICAgfSk7XHJcbi8vICB9O1xyXG4vL1xyXG4vL30pO1xyXG5ibGtVSS5jb25zdGFudCgnYmxvY2tVSUNvbmZpZycsIHtcclxuICAgIHRlbXBsYXRlVXJsOiAnYW5ndWxhci1ibG9jay11aS9hbmd1bGFyLWJsb2NrLXVpLm5nLmh0bWwnLFxyXG4gICAgZGVsYXk6IDI1MCxcclxuICAgIG1lc3NhZ2U6IFwiTG9hZGluZyAuLi5cIixcclxuICAgIGF1dG9CbG9jazogdHJ1ZSxcclxuICAgIHJlc2V0T25FeGNlcHRpb246IHRydWUsXHJcbiAgICByZXF1ZXN0RmlsdGVyOiBhbmd1bGFyLm5vb3AsXHJcbiAgICBhdXRvSW5qZWN0Qm9keUJsb2NrOiB0cnVlLFxyXG4gICAgY3NzQ2xhc3M6ICdibG9jay11aSBibG9jay11aS1hbmltLWZhZGUnLFxyXG4gICAgYmxvY2tCcm93c2VyTmF2aWdhdGlvbjogZmFsc2VcclxufSk7XHJcblxyXG5cclxuYmxrVUkuZmFjdG9yeSgnYmxvY2tVSUh0dHBJbnRlcmNlcHRvcicsIFtcIiRxXCIsIFwiJGluamVjdG9yXCIsIFwiYmxvY2tVSUNvbmZpZ1wiLCBcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCRxLCAkaW5qZWN0b3IsIGJsb2NrVUlDb25maWcsICR0ZW1wbGF0ZUNhY2hlKSB7XHJcblxyXG4gIHZhciBibG9ja1VJO1xyXG5cclxuICBmdW5jdGlvbiBpbmplY3RCbG9ja1VJKCkge1xyXG4gICAgYmxvY2tVSSA9IGJsb2NrVUkgfHwgJGluamVjdG9yLmdldCgnYmxvY2tVSScpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3RvcEJsb2NrVUkoY29uZmlnKSB7XHJcbiAgICBpZiAoYmxvY2tVSUNvbmZpZy5hdXRvQmxvY2sgJiYgKGNvbmZpZyAmJiAhY29uZmlnLiRfbm9CbG9jayAmJiBjb25maWcuJF9ibG9ja3MpKSB7XHJcbiAgICAgIGluamVjdEJsb2NrVUkoKTtcclxuICAgICAgY29uZmlnLiRfYmxvY2tzLnN0b3AoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGVycm9yKHJlamVjdGlvbikge1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHN0b3BCbG9ja1VJKHJlamVjdGlvbi5jb25maWcpO1xyXG4gICAgfSBjYXRjaChleCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnaHR0cFJlcXVlc3RFcnJvcicsIGV4KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcmVxdWVzdDogZnVuY3Rpb24oY29uZmlnKSB7XHJcblxyXG4gICAgICAvLyBPbmx5IGJsb2NrIHdoZW4gYXV0b0Jsb2NrIGlzIGVuYWJsZWQgLi4uXHJcbiAgICAgIC8vIC4uLiBhbmQgdGhlIHJlcXVlc3QgZG9lc24ndCBtYXRjaCBhIGNhY2hlZCB0ZW1wbGF0ZS5cclxuXHJcbiAgICAgIGlmIChibG9ja1VJQ29uZmlnLmF1dG9CbG9jayAmJlxyXG4gICAgICAgICEoY29uZmlnLm1ldGhvZCA9PSAnR0VUJyAmJiAkdGVtcGxhdGVDYWNoZS5nZXQoY29uZmlnLnVybCkpKSB7XHJcblxyXG4gICAgICAgIC8vIERvbid0IGJsb2NrIGV4Y2x1ZGVkIHJlcXVlc3RzXHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSBibG9ja1VJQ29uZmlnLnJlcXVlc3RGaWx0ZXIoY29uZmlnKTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIC8vIFRhZyB0aGUgY29uZmlnIHNvIHdlIGRvbid0IHVuYmxvY2sgdGhpcyByZXF1ZXN0XHJcbiAgICAgICAgICBjb25maWcuJF9ub0Jsb2NrID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgIGluamVjdEJsb2NrVUkoKTtcclxuXHJcbiAgICAgICAgICBjb25maWcuJF9ibG9ja3MgPSBibG9ja1VJLmluc3RhbmNlcy5sb2NhdGUoY29uZmlnKTtcclxuICAgICAgICAgIGNvbmZpZy4kX2Jsb2Nrcy5zdGFydChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH0sXHJcblxyXG4gICAgcmVxdWVzdEVycm9yOiBlcnJvcixcclxuXHJcbiAgICByZXNwb25zZTogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgIC8vIElmIHRoZSBjb25uZWN0aW9uIHRvIHRoZSB3ZWJzaXRlIGdvZXMgZG93biB0aGUgcmVzcG9uc2UgaW50ZXJjZXB0b3IgZ2V0cyBhbmQgZXJyb3Igd2l0aCBcImNhbm5vdCByZWFkIHByb3BlcnR5IGNvbmZpZyBvZiBudWxsXCIuXHJcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NY051bGwvYW5ndWxhci1ibG9jay11aS9pc3N1ZXMvNTNcclxuXHJcbiAgICAgIGlmKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgc3RvcEJsb2NrVUkocmVzcG9uc2UuY29uZmlnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgfSxcclxuXHJcbiAgICByZXNwb25zZUVycm9yOiBlcnJvclxyXG4gIH07XHJcblxyXG59XSk7XHJcblxyXG5ibGtVSS5mYWN0b3J5KCdibG9ja1VJJywgW1wiYmxvY2tVSUNvbmZpZ1wiLCBcIiR0aW1lb3V0XCIsIFwiYmxvY2tVSVV0aWxzXCIsIFwiJGRvY3VtZW50XCIsIGZ1bmN0aW9uKGJsb2NrVUlDb25maWcsICR0aW1lb3V0LCBibG9ja1VJVXRpbHMsICRkb2N1bWVudCkge1xyXG5cclxuICB2YXIgJGJvZHkgPSAkZG9jdW1lbnQuZmluZCgnYm9keScpO1xyXG5cclxuICBmdW5jdGlvbiBCbG9ja1VJKGlkKSB7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHZhciBzdGF0ZSA9IHtcclxuICAgICAgaWQ6IGlkLFxyXG4gICAgICBibG9ja0NvdW50OiAwLFxyXG4gICAgICBtZXNzYWdlOiBibG9ja1VJQ29uZmlnLm1lc3NhZ2UsXHJcbiAgICAgIGJsb2NraW5nOiBmYWxzZVxyXG4gICAgfSwgc3RhcnRQcm9taXNlLCBkb25lQ2FsbGJhY2tzID0gW107XHJcblxyXG4gICAgdGhpcy5faWQgPSBpZDtcclxuXHJcbiAgICB0aGlzLl9yZWZzID0gMDtcclxuXHJcbiAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24obWVzc2FnZSkge1xyXG5cclxuICAgICAgaWYoc3RhdGUuYmxvY2tDb3VudCA+IDApIHtcclxuICAgICAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCBzdGF0ZS5tZXNzYWdlIHx8IGJsb2NrVUlDb25maWcubWVzc2FnZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCBibG9ja1VJQ29uZmlnLm1lc3NhZ2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0YXRlLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG5cclxuICAgICAgc3RhdGUuYmxvY2tDb3VudCsrO1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGZvY3VzZWQgZWxlbWVudCBpcyBwYXJ0IG9mIHRoZSBibG9jayBzY29wZVxyXG5cclxuICAgICAgdmFyICRhZSA9IGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgICBpZigkYWUubGVuZ3RoICYmIGJsb2NrVUlVdGlscy5pc0VsZW1lbnRJbkJsb2NrU2NvcGUoJGFlLCBzZWxmKSkge1xyXG5cclxuICAgICAgICAvLyBMZXQgdGhlIGFjdGl2ZSBlbGVtZW50IGxvc2UgZm9jdXMgYW5kIHN0b3JlIGEgcmVmZXJlbmNlIFxyXG4gICAgICAgIC8vIHRvIHJlc3RvcmUgZm9jdXMgd2hlbiB3ZSdyZSBkb25lIChyZXNldClcclxuXHJcbiAgICAgICAgc2VsZi5fcmVzdG9yZUZvY3VzID0gJGFlWzBdO1xyXG5cclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWNOdWxsL2FuZ3VsYXItYmxvY2stdWkvaXNzdWVzLzEzXHJcbiAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMjY5ODA1OC9hcHBseS1hbHJlYWR5LWluLXByb2dyZXNzLWVycm9yLXdoZW4tdXNpbmctdHlwZWFoZWFkLXBsdWdpbi1mb3VuZC10by1iZS1yZWxhdGVcclxuICAgICAgICAvLyBRdWV1ZSB0aGUgYmx1ciBhZnRlciBhbnkgbmctYmx1ciBleHByZXNzaW9uLlxyXG5cclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vIEVuc3VyZSB3ZSBzdGlsbCBuZWVkIHRvIGJsdXJcclxuICAgICAgICAgIGlmKHNlbGYuX3Jlc3RvcmVGb2N1cykge1xyXG4gICAgICAgICAgICBzZWxmLl9yZXN0b3JlRm9jdXMuYmx1cigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXN0YXJ0UHJvbWlzZSkge1xyXG4gICAgICAgIHN0YXJ0UHJvbWlzZSA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc3RhcnRQcm9taXNlID0gbnVsbDtcclxuICAgICAgICAgIHN0YXRlLmJsb2NraW5nID0gdHJ1ZTtcclxuICAgICAgICB9LCBibG9ja1VJQ29uZmlnLmRlbGF5KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl9jYW5jZWxTdGFydFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHN0YXJ0UHJvbWlzZSkge1xyXG4gICAgICAgICR0aW1lb3V0LmNhbmNlbChzdGFydFByb21pc2UpO1xyXG4gICAgICAgIHN0YXJ0UHJvbWlzZSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zdG9wID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHN0YXRlLmJsb2NrQ291bnQgPSBNYXRoLm1heCgwLCAtLXN0YXRlLmJsb2NrQ291bnQpO1xyXG5cclxuICAgICAgaWYgKHN0YXRlLmJsb2NrQ291bnQgPT09IDApIHtcclxuICAgICAgICBzZWxmLnJlc2V0KHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubWVzc2FnZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgIHN0YXRlLm1lc3NhZ2UgPSB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5wYXR0ZXJuID0gZnVuY3Rpb24ocmVnZXhwKSB7XHJcbiAgICAgIGlmIChyZWdleHAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHNlbGYuX3BhdHRlcm4gPSByZWdleHA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBzZWxmLl9wYXR0ZXJuO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24oZXhlY3V0ZUNhbGxiYWNrcykge1xyXG4gICAgICBcclxuICAgICAgc2VsZi5fY2FuY2VsU3RhcnRUaW1lb3V0KCk7XHJcbiAgICAgIHN0YXRlLmJsb2NrQ291bnQgPSAwO1xyXG4gICAgICBzdGF0ZS5ibG9ja2luZyA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gUmVzdG9yZSB0aGUgZm9jdXMgdG8gdGhlIGVsZW1lbnQgdGhhdCB3YXMgYWN0aXZlXHJcbiAgICAgIC8vIGJlZm9yZSB0aGUgYmxvY2sgc3RhcnQsIGJ1dCBub3QgaWYgdGhlIHVzZXIgaGFzIFxyXG4gICAgICAvLyBmb2N1c2VkIHNvbWV0aGluZyBlbHNlIHdoaWxlIHRoZSBibG9jayB3YXMgYWN0aXZlLlxyXG5cclxuICAgICAgaWYoc2VsZi5fcmVzdG9yZUZvY3VzICYmIFxyXG4gICAgICAgICAoISRkb2N1bWVudFswXS5hY3RpdmVFbGVtZW50IHx8ICRkb2N1bWVudFswXS5hY3RpdmVFbGVtZW50ID09PSAkYm9keVswXSkpIHtcclxuICAgICAgICBzZWxmLl9yZXN0b3JlRm9jdXMuZm9jdXMoKTtcclxuICAgICAgICBzZWxmLl9yZXN0b3JlRm9jdXMgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGlmIChleGVjdXRlQ2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZG9uZUNhbGxiYWNrcywgZnVuY3Rpb24oY2IpIHtcclxuICAgICAgICAgICAgY2IoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBkb25lQ2FsbGJhY2tzLmxlbmd0aCA9IDA7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5kb25lID0gZnVuY3Rpb24oZm4pIHtcclxuICAgICAgZG9uZUNhbGxiYWNrcy5wdXNoKGZuKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuYWRkUmVmID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHNlbGYuX3JlZnMgKz0gMTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZWxlYXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmKC0tc2VsZi5fcmVmcyA8PSAwKSB7XHJcbiAgICAgICAgbWFpbkJsb2NrLmluc3RhbmNlcy5fZGVzdHJveShzZWxmKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhciBpbnN0YW5jZXMgPSBbXTtcclxuXHJcbiAgaW5zdGFuY2VzLmdldCA9IGZ1bmN0aW9uKGlkKSB7XHJcblxyXG4gICAgaWYoIWlzTmFOKGlkKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jsb2NrVUkgaWQgY2Fubm90IGJlIGEgbnVtYmVyJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VzW2lkXTtcclxuXHJcbiAgICBpZighaW5zdGFuY2UpIHtcclxuICAgICAgLy8gVE9ETzogZW5zdXJlIG5vIGFycmF5IGluc3RhbmNlIHRyYXNoaW5nIFt4eHhdIC0tIGN1cnJlbnQgd29ya2Fyb3VuZDogJ18nICsgJHNjb3BlLiRpZFxyXG4gICAgICBpbnN0YW5jZSA9IGluc3RhbmNlc1tpZF0gPSBuZXcgQmxvY2tVSShpZCk7XHJcbiAgICAgIGluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgfTtcclxuXHJcbiAgaW5zdGFuY2VzLl9kZXN0cm95ID0gZnVuY3Rpb24oaWRPckluc3RhbmNlKSB7XHJcbiAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhpZE9ySW5zdGFuY2UpKSB7XHJcbiAgICAgIGlkT3JJbnN0YW5jZSA9IGluc3RhbmNlc1tpZE9ySW5zdGFuY2VdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpZE9ySW5zdGFuY2UpIHtcclxuICAgICAgaWRPckluc3RhbmNlLnJlc2V0KCk7XHJcblxyXG4gICAgICB2YXIgaSA9IGJsb2NrVUlVdGlscy5pbmRleE9mKGluc3RhbmNlcywgaWRPckluc3RhbmNlKTtcclxuICAgICAgaW5zdGFuY2VzLnNwbGljZShpLCAxKTtcclxuXHJcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZXNbaWRPckluc3RhbmNlLnN0YXRlKCkuaWRdO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgaW5zdGFuY2VzLmxvY2F0ZSA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcclxuXHJcbiAgICB2YXIgcmVzdWx0ID0gW107XHJcblxyXG4gICAgLy8gQWRkIGZ1bmN0aW9uIHdyYXBwZXJzIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBvbiBldmVyeSBpdGVtXHJcbiAgICAvLyBpbiB0aGUgYXJyYXkuXHJcbiAgICBcclxuICAgIGJsb2NrVUlVdGlscy5mb3JFYWNoRm5Ib29rKHJlc3VsdCwgJ3N0YXJ0Jyk7XHJcbiAgICBibG9ja1VJVXRpbHMuZm9yRWFjaEZuSG9vayhyZXN1bHQsICdzdG9wJyk7XHJcblxyXG4gICAgdmFyIGkgPSBpbnN0YW5jZXMubGVuZ3RoO1xyXG5cclxuICAgIHdoaWxlKGktLSkge1xyXG4gICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaV07XHJcbiAgICAgIHZhciBwYXR0ZXJuID0gaW5zdGFuY2UuX3BhdHRlcm47XHJcblxyXG4gICAgICBpZihwYXR0ZXJuICYmIHBhdHRlcm4udGVzdChyZXF1ZXN0LnVybCkpIHtcclxuICAgICAgICByZXN1bHQucHVzaChpbnN0YW5jZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZihyZXN1bHQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJlc3VsdC5wdXNoKG1haW5CbG9jayk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9O1xyXG5cclxuICAvLyBQcm9wYWdhdGUgdGhlIHJlc2V0IHRvIGFsbCBpbnN0YW5jZXNcclxuXHJcbiAgYmxvY2tVSVV0aWxzLmZvckVhY2hGbkhvb2soaW5zdGFuY2VzLCAncmVzZXQnKTtcclxuXHJcbiAgdmFyIG1haW5CbG9jayA9IGluc3RhbmNlcy5nZXQoJ21haW4nKTtcclxuXHJcbiAgbWFpbkJsb2NrLmFkZFJlZigpO1xyXG4gIG1haW5CbG9jay5pbnN0YW5jZXMgPSBpbnN0YW5jZXM7XHJcblxyXG4gIHJldHVybiBtYWluQmxvY2s7XHJcbn1dKTtcclxuXHJcblxyXG5ibGtVSS5mYWN0b3J5KCdibG9ja1VJVXRpbHMnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgdmFyICQgPSBhbmd1bGFyLmVsZW1lbnQ7XHJcblxyXG4gIHZhciB1dGlscyA9IHtcclxuICAgIGJ1aWxkUmVnRXhwOiBmdW5jdGlvbihwYXR0ZXJuKSB7XHJcbiAgICAgIHZhciBtYXRjaCA9IHBhdHRlcm4ubWF0Y2goL15cXC8oLiopXFwvKFtnaW1dKikkLyksIHJlZ0V4cDtcclxuXHJcbiAgICAgIGlmKG1hdGNoKSB7XHJcbiAgICAgICAgcmVnRXhwID0gbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IEVycm9yKCdJbmNvcnJlY3QgcmVndWxhciBleHByZXNzaW9uIGZvcm1hdDogJyArIHBhdHRlcm4pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVnRXhwO1xyXG4gICAgfSxcclxuICAgIGZvckVhY2hGbjogZnVuY3Rpb24oYXJyLCBmbk5hbWUsIGFyZ3MpIHtcclxuICAgICAgdmFyIGkgPSBhcnIubGVuZ3RoO1xyXG4gICAgICB3aGlsZShpLS0pIHtcclxuICAgICAgICB2YXIgdCA9IGFycltpXTtcclxuICAgICAgICB0W2ZuTmFtZV0uYXBwbHkodCwgYXJncyk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBmb3JFYWNoRm5Ib29rOiBmdW5jdGlvbihhcnIsIGZuTmFtZSkge1xyXG4gICAgICBhcnJbZm5OYW1lXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHV0aWxzLmZvckVhY2hGbih0aGlzLCBmbk5hbWUsIGFyZ3VtZW50cyk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpc0VsZW1lbnRJbkJsb2NrU2NvcGU6IGZ1bmN0aW9uKCRlbGVtZW50LCBibG9ja1Njb3BlKSB7XHJcbiAgICAgIHZhciBjID0gJGVsZW1lbnQuaW5oZXJpdGVkRGF0YSgnYmxvY2stdWknKTtcclxuXHJcbiAgICAgIHdoaWxlKGMpIHtcclxuICAgICAgICBpZihjID09PSBibG9ja1Njb3BlKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGMgPSBjLl9wYXJlbnQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBmaW5kRWxlbWVudDogZnVuY3Rpb24gKCRlbGVtZW50LCBwcmVkaWNhdGVGbiwgdHJhdmVyc2UpIHtcclxuICAgICAgdmFyIHJldCA9IG51bGw7XHJcblxyXG4gICAgICBpZiAocHJlZGljYXRlRm4oJGVsZW1lbnQpKSB7XHJcbiAgICAgICAgcmV0ID0gJGVsZW1lbnQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIHZhciAkZWxlbWVudHM7XHJcblxyXG4gICAgICAgIGlmICh0cmF2ZXJzZSkge1xyXG4gICAgICAgICAgJGVsZW1lbnRzID0gJGVsZW1lbnQucGFyZW50KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LmNoaWxkcmVuKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaSA9ICRlbGVtZW50cy5sZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKCFyZXQgJiYgaS0tKSB7XHJcbiAgICAgICAgICByZXQgPSB1dGlscy5maW5kRWxlbWVudCgkKCRlbGVtZW50c1tpXSksIHByZWRpY2F0ZUZuLCB0cmF2ZXJzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfSxcclxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uKGFyciwgb2JqLCBzdGFydCkge1xyXG4vLyAgICAgIGlmKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XHJcbi8vICAgICAgICByZXR1cm4gYXJyLmluZGV4T2Yob2JqLCBzdGFydCk7XHJcbi8vICAgICAgfVxyXG5cclxuICAgICAgZm9yICh2YXIgaSA9IChzdGFydCB8fCAwKSwgaiA9IGFyci5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgICAgICBpZiAoYXJyW2ldID09PSBvYmopIHtcclxuICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiB1dGlscztcclxuXHJcbn0pO1xyXG4vLyBBdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC5cclxuLy8gVGhpcyBmaWxlIGlzIGFscmVhZHkgZW1iZWRkZWQgaW4geW91ciBtYWluIGphdmFzY3JpcHQgb3V0cHV0LCB0aGVyZSdzIG5vIG5lZWQgdG8gaW5jbHVkZSB0aGlzIGZpbGVcclxuLy8gbWFudWFsbHkgaW4gdGhlIGluZGV4Lmh0bWwuIFRoaXMgZmlsZSBpcyBvbmx5IGhlcmUgZm9yIHlvdXIgZGVidWdnaW5nIHBsZWFzdXJlcy5cclxuYW5ndWxhci5tb2R1bGUoJ2Jsb2NrVUknKS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKXtcclxuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2FuZ3VsYXItYmxvY2stdWkvYW5ndWxhci1ibG9jay11aS5uZy5odG1sJywgJzxkaXYgY2xhc3M9XFxcImJsb2NrLXVpLW92ZXJsYXlcXFwiPjwvZGl2PjxkaXYgY2xhc3M9XFxcImJsb2NrLXVpLW1lc3NhZ2UtY29udGFpbmVyXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiPjxkaXYgY2xhc3M9XFxcImJsb2NrLXVpLW1lc3NhZ2VcXFwiIG5nLWNsYXNzPVxcXCIkX2Jsb2NrVWlNZXNzYWdlQ2xhc3NcXFwiPnt7IHN0YXRlLm1lc3NhZ2UgfX08L2Rpdj48L2Rpdj4nKTtcclxufV0pO1xyXG59KShhbmd1bGFyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5ndWxhci1ibG9jay11aS5qcy5tYXAiLCIvKipcclxuICogYW5ndWxhci1ncm93bC12MiAtIHYwLjcuMyAtIDIwMTUtMDEtMDVcclxuICogaHR0cDovL2phbnN0ZXZlbnMuZ2l0aHViLmlvL2FuZ3VsYXItZ3Jvd2wtMlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgTWFyY28gUmluY2ssSmFuIFN0ZXZlbnM7IExpY2Vuc2VkIE1JVFxyXG4gKi9cclxuYW5ndWxhci5tb2R1bGUoXCJhbmd1bGFyLWdyb3dsXCIsW10pLGFuZ3VsYXIubW9kdWxlKFwiYW5ndWxhci1ncm93bFwiKS5kaXJlY3RpdmUoXCJncm93bFwiLFtmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybntyZXN0cmljdDpcIkFcIix0ZW1wbGF0ZVVybDpcInRlbXBsYXRlcy9ncm93bC9ncm93bC5odG1sXCIscmVwbGFjZTohMSxzY29wZTp7cmVmZXJlbmNlOlwiQFwiLGlubGluZTpcIj1cIixsaW1pdE1lc3NhZ2VzOlwiPVwifSxjb250cm9sbGVyOltcIiRzY29wZVwiLFwiJHRpbWVvdXRcIixcImdyb3dsXCIsXCJncm93bE1lc3NhZ2VzXCIsZnVuY3Rpb24oYSxiLGMsZCl7YS5yZWZlcmVuY2VJZD1hLnJlZmVyZW5jZXx8MCxkLmluaXREaXJlY3RpdmUoYS5yZWZlcmVuY2VJZCxhLmxpbWl0TWVzc2FnZXMpLGEuZ3Jvd2xNZXNzYWdlcz1kLGEuaW5saW5lTWVzc2FnZT1hbmd1bGFyLmlzRGVmaW5lZChhLmlubGluZSk/YS5pbmxpbmU6Yy5pbmxpbmVNZXNzYWdlcygpLGEuJHdhdGNoKFwibGltaXRNZXNzYWdlc1wiLGZ1bmN0aW9uKGIpe3ZhciBjPWQuZGlyZWN0aXZlc1thLnJlZmVyZW5jZUlkXTthbmd1bGFyLmlzVW5kZWZpbmVkKGIpfHxhbmd1bGFyLmlzVW5kZWZpbmVkKGMpfHwoYy5saW1pdE1lc3NhZ2VzPWIpfSksYS5zdG9wVGltZW91dENsb3NlPWZ1bmN0aW9uKGEpe2EuY2xpY2tUb0Nsb3NlfHwoYW5ndWxhci5mb3JFYWNoKGEucHJvbWlzZXMsZnVuY3Rpb24oYSl7Yi5jYW5jZWwoYSl9KSxhLmNsb3NlP2QuZGVsZXRlTWVzc2FnZShhKTphLmNsb3NlPSEwKX0sYS5hbGVydENsYXNzZXM9ZnVuY3Rpb24oYSl7cmV0dXJue1wiYWxlcnQtc3VjY2Vzc1wiOlwic3VjY2Vzc1wiPT09YS5zZXZlcml0eSxcImFsZXJ0LWVycm9yXCI6XCJlcnJvclwiPT09YS5zZXZlcml0eSxcImFsZXJ0LWRhbmdlclwiOlwiZXJyb3JcIj09PWEuc2V2ZXJpdHksXCJhbGVydC1pbmZvXCI6XCJpbmZvXCI9PT1hLnNldmVyaXR5LFwiYWxlcnQtd2FybmluZ1wiOlwid2FybmluZ1wiPT09YS5zZXZlcml0eSxpY29uOmEuZGlzYWJsZUljb25zPT09ITEsXCJhbGVydC1kaXNtaXNzYWJsZVwiOiFhLmRpc2FibGVDbG9zZUJ1dHRvbn19LGEuc2hvd0NvdW50RG93bj1mdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNhYmxlQ291bnREb3duJiZhLnR0bD4wfSxhLndyYXBwZXJDbGFzc2VzPWZ1bmN0aW9uKCl7dmFyIGI9e307cmV0dXJuIGJbXCJncm93bC1maXhlZFwiXT0hYS5pbmxpbmVNZXNzYWdlLGJbYy5wb3NpdGlvbigpXT0hMCxifSxhLmNvbXB1dGVUaXRsZT1mdW5jdGlvbihhKXt2YXIgYj17c3VjY2VzczpcIlN1Y2Nlc3NcIixlcnJvcjpcIkVycm9yXCIsaW5mbzpcIkluZm9ybWF0aW9uXCIsd2FybjpcIldhcm5pbmdcIn07cmV0dXJuIGJbYS5zZXZlcml0eV19fV19fV0pLGFuZ3VsYXIubW9kdWxlKFwiYW5ndWxhci1ncm93bFwiKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjt2b2lkIDA9PT1hLmdldChcInRlbXBsYXRlcy9ncm93bC9ncm93bC5odG1sXCIpJiZhLnB1dChcInRlbXBsYXRlcy9ncm93bC9ncm93bC5odG1sXCIsJzxkaXYgY2xhc3M9XCJncm93bC1jb250YWluZXJcIiBuZy1jbGFzcz1cIndyYXBwZXJDbGFzc2VzKClcIj48ZGl2IGNsYXNzPVwiZ3Jvd2wtaXRlbSBhbGVydFwiIG5nLXJlcGVhdD1cIm1lc3NhZ2UgaW4gZ3Jvd2xNZXNzYWdlcy5kaXJlY3RpdmVzW3JlZmVyZW5jZUlkXS5tZXNzYWdlc1wiIG5nLWNsYXNzPVwiYWxlcnRDbGFzc2VzKG1lc3NhZ2UpXCIgbmctY2xpY2s9XCJzdG9wVGltZW91dENsb3NlKG1lc3NhZ2UpXCI+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjbG9zZVwiIGRhdGEtZGlzbWlzcz1cImFsZXJ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgbmctY2xpY2s9XCJncm93bE1lc3NhZ2VzLmRlbGV0ZU1lc3NhZ2UobWVzc2FnZSlcIiBuZy1zaG93PVwiIW1lc3NhZ2UuZGlzYWJsZUNsb3NlQnV0dG9uXCI+JnRpbWVzOzwvYnV0dG9uPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBuZy1zaG93PVwic2hvd0NvdW50RG93bihtZXNzYWdlKVwiPnt7bWVzc2FnZS5jb3VudGRvd259fTwvYnV0dG9uPjxoNCBjbGFzcz1cImdyb3dsLXRpdGxlXCIgbmctc2hvdz1cIm1lc3NhZ2UudGl0bGVcIiBuZy1iaW5kPVwibWVzc2FnZS50aXRsZVwiPjwvaDQ+PGRpdiBjbGFzcz1cImdyb3dsLW1lc3NhZ2VcIiBuZy1iaW5kLWh0bWw9XCJtZXNzYWdlLnRleHRcIj48L2Rpdj48L2Rpdj48L2Rpdj4nKX1dKSxhbmd1bGFyLm1vZHVsZShcImFuZ3VsYXItZ3Jvd2xcIikucHJvdmlkZXIoXCJncm93bFwiLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9e3N1Y2Nlc3M6bnVsbCxlcnJvcjpudWxsLHdhcm5pbmc6bnVsbCxpbmZvOm51bGx9LGI9XCJtZXNzYWdlc1wiLGM9XCJ0ZXh0XCIsZD1cInRpdGxlXCIsZT1cInNldmVyaXR5XCIsZj0hMCxnPVwidmFyaWFibGVzXCIsaD0wLGk9ITEsaj1cInRvcC1yaWdodFwiLGs9ITEsbD0hMSxtPSExLG49ITEsbz0hMDt0aGlzLmdsb2JhbFRpbWVUb0xpdmU9ZnVuY3Rpb24oYil7aWYoXCJvYmplY3RcIj09dHlwZW9mIGIpZm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmKGFbY109YltjXSk7ZWxzZSBmb3IodmFyIGQgaW4gYSlhLmhhc093blByb3BlcnR5KGQpJiYoYVtkXT1iKX0sdGhpcy5nbG9iYWxUcmFuc2xhdGVNZXNzYWdlcz1mdW5jdGlvbihhKXtvPWF9LHRoaXMuZ2xvYmFsRGlzYWJsZUNsb3NlQnV0dG9uPWZ1bmN0aW9uKGEpe2s9YX0sdGhpcy5nbG9iYWxEaXNhYmxlSWNvbnM9ZnVuY3Rpb24oYSl7bD1hfSx0aGlzLmdsb2JhbFJldmVyc2VkT3JkZXI9ZnVuY3Rpb24oYSl7bT1hfSx0aGlzLmdsb2JhbERpc2FibGVDb3VudERvd249ZnVuY3Rpb24oYSl7bj1hfSx0aGlzLm1lc3NhZ2VWYXJpYWJsZUtleT1mdW5jdGlvbihhKXtnPWF9LHRoaXMuZ2xvYmFsSW5saW5lTWVzc2FnZXM9ZnVuY3Rpb24oYSl7aT1hfSx0aGlzLmdsb2JhbFBvc2l0aW9uPWZ1bmN0aW9uKGEpe2o9YX0sdGhpcy5tZXNzYWdlc0tleT1mdW5jdGlvbihhKXtiPWF9LHRoaXMubWVzc2FnZVRleHRLZXk9ZnVuY3Rpb24oYSl7Yz1hfSx0aGlzLm1lc3NhZ2VUaXRsZUtleT1mdW5jdGlvbihhKXtkPWF9LHRoaXMubWVzc2FnZVNldmVyaXR5S2V5PWZ1bmN0aW9uKGEpe2U9YX0sdGhpcy5vbmx5VW5pcXVlTWVzc2FnZXM9ZnVuY3Rpb24oYSl7Zj1hfSx0aGlzLnNlcnZlck1lc3NhZ2VzSW50ZXJjZXB0b3I9W1wiJHFcIixcImdyb3dsXCIsZnVuY3Rpb24oYSxjKXtmdW5jdGlvbiBkKGEpe3ZvaWQgMCE9PWEmJmEuZGF0YVtiXSYmYS5kYXRhW2JdLmxlbmd0aD4wJiZjLmFkZFNlcnZlck1lc3NhZ2VzKGEuZGF0YVtiXSl9cmV0dXJue3Jlc3BvbnNlOmZ1bmN0aW9uKGEpe3JldHVybiBkKGEpLGF9LHJlc3BvbnNlRXJyb3I6ZnVuY3Rpb24oYil7cmV0dXJuIGQoYiksYS5yZWplY3QoYil9fX1dLHRoaXMuJGdldD1bXCIkcm9vdFNjb3BlXCIsXCIkaW50ZXJwb2xhdGVcIixcIiRzY2VcIixcIiRmaWx0ZXJcIixcIiR0aW1lb3V0XCIsXCJncm93bE1lc3NhZ2VzXCIsZnVuY3Rpb24oYixwLHEscixzLHQpe2Z1bmN0aW9uIHUoYSl7aWYoRyYmYS50cmFuc2xhdGVNZXNzYWdlKWEudGV4dD1HKGEudGV4dCxhLnZhcmlhYmxlcyk7ZWxzZXt2YXIgYz1wKGEudGV4dCk7YS50ZXh0PWMoYS52YXJpYWJsZXMpfXZhciBkPXQuYWRkTWVzc2FnZShhKTtyZXR1cm4gYi4kYnJvYWRjYXN0KFwiZ3Jvd2xNZXNzYWdlXCIsYSkscyhmdW5jdGlvbigpe30sMCksZH1mdW5jdGlvbiB2KGIsYyxkKXt2YXIgZSxmPWN8fHt9O3JldHVybiBlPXt0ZXh0OmIsdGl0bGU6Zi50aXRsZSxzZXZlcml0eTpkLHR0bDpmLnR0bHx8YVtkXSx2YXJpYWJsZXM6Zi52YXJpYWJsZXN8fHt9LGRpc2FibGVDbG9zZUJ1dHRvbjp2b2lkIDA9PT1mLmRpc2FibGVDbG9zZUJ1dHRvbj9rOmYuZGlzYWJsZUNsb3NlQnV0dG9uLGRpc2FibGVJY29uczp2b2lkIDA9PT1mLmRpc2FibGVJY29ucz9sOmYuZGlzYWJsZUljb25zLGRpc2FibGVDb3VudERvd246dm9pZCAwPT09Zi5kaXNhYmxlQ291bnREb3duP246Zi5kaXNhYmxlQ291bnREb3duLHBvc2l0aW9uOmYucG9zaXRpb258fGoscmVmZXJlbmNlSWQ6Zi5yZWZlcmVuY2VJZHx8aCx0cmFuc2xhdGVNZXNzYWdlOnZvaWQgMD09PWYudHJhbnNsYXRlTWVzc2FnZT9vOmYudHJhbnNsYXRlTWVzc2FnZSxkZXN0cm95OmZ1bmN0aW9uKCl7dC5kZWxldGVNZXNzYWdlKGUpfSxzZXRUZXh0OmZ1bmN0aW9uKGEpe2UudGV4dD1xLnRydXN0QXNIdG1sKFN0cmluZyhhKSl9LG9uY2xvc2U6Zi5vbmNsb3NlLG9ub3BlbjpmLm9ub3Blbn0sdShlKX1mdW5jdGlvbiB3KGEsYil7cmV0dXJuIHYoYSxiLFwid2FybmluZ1wiKX1mdW5jdGlvbiB4KGEsYil7cmV0dXJuIHYoYSxiLFwiZXJyb3JcIil9ZnVuY3Rpb24geShhLGIpe3JldHVybiB2KGEsYixcImluZm9cIil9ZnVuY3Rpb24geihhLGIpe3JldHVybiB2KGEsYixcInN1Y2Nlc3NcIil9ZnVuY3Rpb24gQShhLGIsYyl7Yz0oY3x8XCJlcnJvclwiKS50b0xvd2VyQ2FzZSgpLHYoYSxiLGMpfWZ1bmN0aW9uIEIoYSl7aWYoYSYmYS5sZW5ndGgpe3ZhciBiLGYsaCxpO2ZvcihpPWEubGVuZ3RoLGI9MDtpPmI7YisrKWlmKGY9YVtiXSxmW2NdKXtoPShmW2VdfHxcImVycm9yXCIpLnRvTG93ZXJDYXNlKCk7dmFyIGo9e307ai52YXJpYWJsZXM9ZltnXXx8e30sai50aXRsZT1mW2RdLHYoZltjXSxqLGgpfX19ZnVuY3Rpb24gQygpe3JldHVybiBmfWZ1bmN0aW9uIEQoKXtyZXR1cm4gbX1mdW5jdGlvbiBFKCl7cmV0dXJuIGl9ZnVuY3Rpb24gRigpe3JldHVybiBqfXZhciBHO3Qub25seVVuaXF1ZT1mLHQucmV2ZXJzZU9yZGVyPW07dHJ5e0c9cihcInRyYW5zbGF0ZVwiKX1jYXRjaChIKXt9cmV0dXJue3dhcm5pbmc6dyxlcnJvcjp4LGluZm86eSxzdWNjZXNzOnosZ2VuZXJhbDpBLGFkZFNlcnZlck1lc3NhZ2VzOkIsb25seVVuaXF1ZTpDLHJldmVyc2VPcmRlcjpELGlubGluZU1lc3NhZ2VzOkUscG9zaXRpb246Rn19XX0pLGFuZ3VsYXIubW9kdWxlKFwiYW5ndWxhci1ncm93bFwiKS5zZXJ2aWNlKFwiZ3Jvd2xNZXNzYWdlc1wiLFtcIiRzY2VcIixcIiR0aW1lb3V0XCIsZnVuY3Rpb24oYSxiKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBjKGEpe3ZhciBiO3JldHVybiBiPWRbYV0/ZFthXTpkW2FdPXttZXNzYWdlczpbXX19dGhpcy5kaXJlY3RpdmVzPXt9O3ZhciBkPXt9O3RoaXMuaW5pdERpcmVjdGl2ZT1mdW5jdGlvbihhLGIpe3JldHVybiBkW2FdPyh0aGlzLmRpcmVjdGl2ZXNbYV09ZFthXSx0aGlzLmRpcmVjdGl2ZXNbYV0ubGltaXRNZXNzYWdlcz1iKTp0aGlzLmRpcmVjdGl2ZXNbYV09e21lc3NhZ2VzOltdLGxpbWl0TWVzc2FnZXM6Yn0sdGhpcy5kaXJlY3RpdmVzW2FdfSx0aGlzLmdldEFsbE1lc3NhZ2VzPWZ1bmN0aW9uKGEpe2E9YXx8MDt2YXIgYjtyZXR1cm4gYj10aGlzLmRpcmVjdGl2ZXNbYV0/dGhpcy5kaXJlY3RpdmVzW2FdLm1lc3NhZ2VzOltdfSx0aGlzLmRlc3Ryb3lBbGxNZXNzYWdlcz1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmdldEFsbE1lc3NhZ2VzKGEpLGM9Yi5sZW5ndGg7Zm9yKGMtMTtjPj0wO2MtLSliW2NdLmRlc3Ryb3koKTt0aGlzLmRpcmVjdGl2ZXNbYV0mJih0aGlzLmRpcmVjdGl2ZXNbYV0ubWVzc2FnZXM9W10pfSx0aGlzLmFkZE1lc3NhZ2U9ZnVuY3Rpb24oZCl7dmFyIGUsZixnLGg7aWYoZT10aGlzLmRpcmVjdGl2ZXNbZC5yZWZlcmVuY2VJZF0/dGhpcy5kaXJlY3RpdmVzW2QucmVmZXJlbmNlSWRdOmMoZC5yZWZlcmVuY2VJZCksZj1lLm1lc3NhZ2VzLCF0aGlzLm9ubHlVbmlxdWV8fChhbmd1bGFyLmZvckVhY2goZixmdW5jdGlvbihiKXtoPWEuZ2V0VHJ1c3RlZEh0bWwoYi50ZXh0KSxkLnRleHQ9PT1oJiZkLnNldmVyaXR5PT09Yi5zZXZlcml0eSYmZC50aXRsZT09PWIudGl0bGUmJihnPSEwKX0pLCFnKSl7aWYoZC50ZXh0PWEudHJ1c3RBc0h0bWwoU3RyaW5nKGQudGV4dCkpLGQudHRsJiYtMSE9PWQudHRsJiYoZC5jb3VudGRvd249ZC50dGwvMWUzLGQucHJvbWlzZXM9W10sZC5jbG9zZT0hMSxkLmNvdW50ZG93bkZ1bmN0aW9uPWZ1bmN0aW9uKCl7ZC5jb3VudGRvd24+MT8oZC5jb3VudGRvd24tLSxkLnByb21pc2VzLnB1c2goYihkLmNvdW50ZG93bkZ1bmN0aW9uLDFlMykpKTpkLmNvdW50ZG93bi0tfSksYW5ndWxhci5pc0RlZmluZWQoZS5saW1pdE1lc3NhZ2VzKSl7dmFyIGk9Zi5sZW5ndGgtKGUubGltaXRNZXNzYWdlcy0xKTtpPjAmJmYuc3BsaWNlKGUubGltaXRNZXNzYWdlcy0xLGkpfXJldHVybiB0aGlzLnJldmVyc2VPcmRlcj9mLnVuc2hpZnQoZCk6Zi5wdXNoKGQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGQub25vcGVuJiZkLm9ub3BlbigpLGQudHRsJiYtMSE9PWQudHRsJiYoZC5wcm9taXNlcy5wdXNoKGIoYW5ndWxhci5iaW5kKHRoaXMsZnVuY3Rpb24oKXt0aGlzLmRlbGV0ZU1lc3NhZ2UoZCl9KSxkLnR0bCkpLGQucHJvbWlzZXMucHVzaChiKGQuY291bnRkb3duRnVuY3Rpb24sMWUzKSkpLGR9fSx0aGlzLmRlbGV0ZU1lc3NhZ2U9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5kaXJlY3RpdmVzW2EucmVmZXJlbmNlSWRdLm1lc3NhZ2VzLGM9Yi5pbmRleE9mKGEpO2M+LTEmJihiW2NdLmNsb3NlPSEwLGIuc3BsaWNlKGMsMSkpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGEub25jbG9zZSYmYS5vbmNsb3NlKCl9fV0pOyIsIi8qISBuZy1kaWFsb2cgLSB2MC4zLjEyIChodHRwczovL2dpdGh1Yi5jb20vbGlrZWFzdG9yZS9uZ0RpYWxvZykgKi9cclxuIWZ1bmN0aW9uKGEsYil7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YihyZXF1aXJlKFwiYW5ndWxhclwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJhbmd1bGFyXCJdLGIpOmIoYS5hbmd1bGFyKX0odGhpcyxmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjt2YXIgYixjPWEubW9kdWxlKFwibmdEaWFsb2dcIixbXSksZD1hLmVsZW1lbnQsZT1hLmlzRGVmaW5lZCxmPShkb2N1bWVudC5ib2R5fHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLnN0eWxlLGc9ZShmLmFuaW1hdGlvbil8fGUoZi5XZWJraXRBbmltYXRpb24pfHxlKGYuTW96QW5pbWF0aW9uKXx8ZShmLk1zQW5pbWF0aW9uKXx8ZShmLk9BbmltYXRpb24pLGg9XCJhbmltYXRpb25lbmQgd2Via2l0QW5pbWF0aW9uRW5kIG1vekFuaW1hdGlvbkVuZCBNU0FuaW1hdGlvbkVuZCBvYW5pbWF0aW9uZW5kXCIsaT0hMTtyZXR1cm4gYy5wcm92aWRlcihcIm5nRGlhbG9nXCIsZnVuY3Rpb24oKXt2YXIgYz10aGlzLmRlZmF1bHRzPXtjbGFzc05hbWU6XCJuZ2RpYWxvZy10aGVtZS1kZWZhdWx0XCIscGxhaW46ITEsc2hvd0Nsb3NlOiEwLGNsb3NlQnlEb2N1bWVudDohMCxjbG9zZUJ5RXNjYXBlOiEwLGNsb3NlQnlOYXZpZ2F0aW9uOiExLGFwcGVuZFRvOiExLHByZUNsb3NlQ2FsbGJhY2s6ITEsb3ZlcmxheTohMCxjYWNoZTohMH07dGhpcy5zZXRGb3JjZUJvZHlSZWxvYWQ9ZnVuY3Rpb24oYSl7aT1hfHwhMX0sdGhpcy5zZXREZWZhdWx0cz1mdW5jdGlvbihiKXthLmV4dGVuZChjLGIpfTt2YXIgZSxmPTAsaj0wLGs9e307dGhpcy4kZ2V0PVtcIiRkb2N1bWVudFwiLFwiJHRlbXBsYXRlQ2FjaGVcIixcIiRjb21waWxlXCIsXCIkcVwiLFwiJGh0dHBcIixcIiRyb290U2NvcGVcIixcIiR0aW1lb3V0XCIsXCIkd2luZG93XCIsXCIkY29udHJvbGxlclwiLGZ1bmN0aW9uKGwsbSxuLG8scCxxLHIscyx0KXt2YXIgdT1sLmZpbmQoXCJib2R5XCIpO2kmJnEuJG9uKFwiJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc1wiLGZ1bmN0aW9uKCl7dT1sLmZpbmQoXCJib2R5XCIpfSk7dmFyIHY9e29uRG9jdW1lbnRLZXlkb3duOmZ1bmN0aW9uKGEpezI3PT09YS5rZXlDb2RlJiZ3LmNsb3NlKFwiJGVzY2FwZVwiKX0sc2V0Qm9keVBhZGRpbmc6ZnVuY3Rpb24oYSl7dmFyIGI9cGFyc2VJbnQodS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpfHwwLDEwKTt1LmNzcyhcInBhZGRpbmctcmlnaHRcIixiK2ErXCJweFwiKSx1LmRhdGEoXCJuZy1kaWFsb2ctb3JpZ2luYWwtcGFkZGluZ1wiLGIpfSxyZXNldEJvZHlQYWRkaW5nOmZ1bmN0aW9uKCl7dmFyIGE9dS5kYXRhKFwibmctZGlhbG9nLW9yaWdpbmFsLXBhZGRpbmdcIik7YT91LmNzcyhcInBhZGRpbmctcmlnaHRcIixhK1wicHhcIik6dS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIsXCJcIil9LHBlcmZvcm1DbG9zZURpYWxvZzpmdW5jdGlvbihhLGMpe3ZhciBkPWEuYXR0cihcImlkXCIpO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzLkhhbW1lcil7dmFyIGY9Yi5oYW1tZXJUaW1lO2Yub2ZmKFwidGFwXCIsZSksZi5kZXN0cm95JiZmLmRlc3Ryb3koKSxkZWxldGUgYi5oYW1tZXJUaW1lfWVsc2UgYS51bmJpbmQoXCJjbGlja1wiKTsxPT09aiYmdS51bmJpbmQoXCJrZXlkb3duXCIpLGEuaGFzQ2xhc3MoXCJuZ2RpYWxvZy1jbG9zaW5nXCIpfHwoai09MSkscS4kYnJvYWRjYXN0KFwibmdEaWFsb2cuY2xvc2luZ1wiLGEpLGo9MD5qPzA6aixnPyhiLiRkZXN0cm95KCksYS51bmJpbmQoaCkuYmluZChoLGZ1bmN0aW9uKCl7YS5yZW1vdmUoKSwwPT09aiYmKHUucmVtb3ZlQ2xhc3MoXCJuZ2RpYWxvZy1vcGVuXCIpLHYucmVzZXRCb2R5UGFkZGluZygpKSxxLiRicm9hZGNhc3QoXCJuZ0RpYWxvZy5jbG9zZWRcIixhKX0pLmFkZENsYXNzKFwibmdkaWFsb2ctY2xvc2luZ1wiKSk6KGIuJGRlc3Ryb3koKSxhLnJlbW92ZSgpLDA9PT1qJiYodS5yZW1vdmVDbGFzcyhcIm5nZGlhbG9nLW9wZW5cIiksdi5yZXNldEJvZHlQYWRkaW5nKCkpLHEuJGJyb2FkY2FzdChcIm5nRGlhbG9nLmNsb3NlZFwiLGEpKSxrW2RdJiYoa1tkXS5yZXNvbHZlKHtpZDpkLHZhbHVlOmMsJGRpYWxvZzphLHJlbWFpbmluZ0RpYWxvZ3M6an0pLGRlbGV0ZSBrW2RdKX0sY2xvc2VEaWFsb2c6ZnVuY3Rpb24oYixjKXt2YXIgZD1iLmRhdGEoXCIkbmdEaWFsb2dQcmVDbG9zZUNhbGxiYWNrXCIpO2lmKGQmJmEuaXNGdW5jdGlvbihkKSl7dmFyIGU9ZC5jYWxsKGIsYyk7YS5pc09iamVjdChlKT9lLmNsb3NlUHJvbWlzZT9lLmNsb3NlUHJvbWlzZS50aGVuKGZ1bmN0aW9uKCl7di5wZXJmb3JtQ2xvc2VEaWFsb2coYixjKX0pOmUudGhlbihmdW5jdGlvbigpe3YucGVyZm9ybUNsb3NlRGlhbG9nKGIsYyl9LGZ1bmN0aW9uKCl7fSk6ZSE9PSExJiZ2LnBlcmZvcm1DbG9zZURpYWxvZyhiLGMpfWVsc2Ugdi5wZXJmb3JtQ2xvc2VEaWFsb2coYixjKX19LHc9e29wZW46ZnVuY3Rpb24oZyl7ZnVuY3Rpb24gaChhLGIpe3JldHVybiBwLmdldChhLGJ8fHt9KS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBhLmRhdGF8fFwiXCJ9KX1mdW5jdGlvbiBpKGIpe3JldHVybiBiP2EuaXNTdHJpbmcoYikmJngucGxhaW4/YjpcImJvb2xlYW5cIiE9dHlwZW9mIHguY2FjaGV8fHguY2FjaGU/bS5nZXQoYil8fGgoYix7Y2FjaGU6ITB9KTpoKGIse2NhY2hlOiExfSk6XCJFbXB0eSB0ZW1wbGF0ZVwifXZhciBsPXRoaXMseD1hLmNvcHkoYyk7Zz1nfHx7fSxhLmV4dGVuZCh4LGcpLGYrPTEsbC5sYXRlc3RJRD1cIm5nZGlhbG9nXCIrZjt2YXIgeTtrW2wubGF0ZXN0SURdPXk9by5kZWZlcigpLGI9YS5pc09iamVjdCh4LnNjb3BlKT94LnNjb3BlLiRuZXcoKTpxLiRuZXcoKTt2YXIgeixBO3JldHVybiBvLndoZW4oaSh4LnRlbXBsYXRlfHx4LnRlbXBsYXRlVXJsKSkudGhlbihmdW5jdGlvbihjKXtpZihtLnB1dCh4LnRlbXBsYXRlfHx4LnRlbXBsYXRlVXJsLGMpLHguc2hvd0Nsb3NlJiYoYys9JzxkaXYgY2xhc3M9XCJuZ2RpYWxvZy1jbG9zZVwiPjwvZGl2PicpLGwuJHJlc3VsdD16PWQoJzxkaXYgaWQ9XCJuZ2RpYWxvZycrZisnXCIgY2xhc3M9XCJuZ2RpYWxvZ1wiPjwvZGl2PicpLHouaHRtbCh4Lm92ZXJsYXk/JzxkaXYgY2xhc3M9XCJuZ2RpYWxvZy1vdmVybGF5XCI+PC9kaXY+PGRpdiBjbGFzcz1cIm5nZGlhbG9nLWNvbnRlbnRcIj4nK2MrXCI8L2Rpdj5cIjonPGRpdiBjbGFzcz1cIm5nZGlhbG9nLWNvbnRlbnRcIj4nK2MrXCI8L2Rpdj5cIikseC5kYXRhJiZhLmlzU3RyaW5nKHguZGF0YSkpe3ZhciBnPXguZGF0YS5yZXBsYWNlKC9eXFxzKi8sXCJcIilbMF07Yi5uZ0RpYWxvZ0RhdGE9XCJ7XCI9PT1nfHxcIltcIj09PWc/YS5mcm9tSnNvbih4LmRhdGEpOnguZGF0YX1lbHNlIHguZGF0YSYmYS5pc09iamVjdCh4LmRhdGEpJiYoYi5uZ0RpYWxvZ0RhdGE9eC5kYXRhKTtpZih4LmNvbnRyb2xsZXImJihhLmlzU3RyaW5nKHguY29udHJvbGxlcil8fGEuaXNBcnJheSh4LmNvbnRyb2xsZXIpfHxhLmlzRnVuY3Rpb24oeC5jb250cm9sbGVyKSkpe3ZhciBoPXQoeC5jb250cm9sbGVyLHskc2NvcGU6YiwkZWxlbWVudDp6fSk7ei5kYXRhKFwiJG5nRGlhbG9nQ29udHJvbGxlckNvbnRyb2xsZXJcIixoKX1pZih4LmNsYXNzTmFtZSYmei5hZGRDbGFzcyh4LmNsYXNzTmFtZSksQT14LmFwcGVuZFRvJiZhLmlzU3RyaW5nKHguYXBwZW5kVG8pP2EuZWxlbWVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHguYXBwZW5kVG8pKTp1LHgucHJlQ2xvc2VDYWxsYmFjayl7dmFyIGk7YS5pc0Z1bmN0aW9uKHgucHJlQ2xvc2VDYWxsYmFjayk/aT14LnByZUNsb3NlQ2FsbGJhY2s6YS5pc1N0cmluZyh4LnByZUNsb3NlQ2FsbGJhY2spJiZiJiYoYS5pc0Z1bmN0aW9uKGJbeC5wcmVDbG9zZUNhbGxiYWNrXSk/aT1iW3gucHJlQ2xvc2VDYWxsYmFja106Yi4kcGFyZW50JiZhLmlzRnVuY3Rpb24oYi4kcGFyZW50W3gucHJlQ2xvc2VDYWxsYmFja10pP2k9Yi4kcGFyZW50W3gucHJlQ2xvc2VDYWxsYmFja106cSYmYS5pc0Z1bmN0aW9uKHFbeC5wcmVDbG9zZUNhbGxiYWNrXSkmJihpPXFbeC5wcmVDbG9zZUNhbGxiYWNrXSkpLGkmJnouZGF0YShcIiRuZ0RpYWxvZ1ByZUNsb3NlQ2FsbGJhY2tcIixpKX1pZihiLmNsb3NlVGhpc0RpYWxvZz1mdW5jdGlvbihhKXt2LmNsb3NlRGlhbG9nKHosYSl9LHIoZnVuY3Rpb24oKXtuKHopKGIpO3ZhciBhPXMuaW5uZXJXaWR0aC11LnByb3AoXCJjbGllbnRXaWR0aFwiKTt1LmFkZENsYXNzKFwibmdkaWFsb2ctb3BlblwiKTt2YXIgYz1hLShzLmlubmVyV2lkdGgtdS5wcm9wKFwiY2xpZW50V2lkdGhcIikpO2M+MCYmdi5zZXRCb2R5UGFkZGluZyhjKSxBLmFwcGVuZCh6KSx4Lm5hbWU/cS4kYnJvYWRjYXN0KFwibmdEaWFsb2cub3BlbmVkXCIse2RpYWxvZzp6LG5hbWU6eC5uYW1lfSk6cS4kYnJvYWRjYXN0KFwibmdEaWFsb2cub3BlbmVkXCIseil9KSx4LmNsb3NlQnlFc2NhcGUmJnUuYmluZChcImtleWRvd25cIix2Lm9uRG9jdW1lbnRLZXlkb3duKSx4LmNsb3NlQnlOYXZpZ2F0aW9uJiZxLiRvbihcIiRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NcIixmdW5jdGlvbigpe3YuY2xvc2VEaWFsb2coeil9KSxlPWZ1bmN0aW9uKGEpe3ZhciBiPXguY2xvc2VCeURvY3VtZW50P2QoYS50YXJnZXQpLmhhc0NsYXNzKFwibmdkaWFsb2ctb3ZlcmxheVwiKTohMSxjPWQoYS50YXJnZXQpLmhhc0NsYXNzKFwibmdkaWFsb2ctY2xvc2VcIik7KGJ8fGMpJiZ3LmNsb3NlKHouYXR0cihcImlkXCIpLGM/XCIkY2xvc2VCdXR0b25cIjpcIiRkb2N1bWVudFwiKX0sXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHMuSGFtbWVyKXt2YXIgaz1iLmhhbW1lclRpbWU9cy5IYW1tZXIoelswXSk7ay5vbihcInRhcFwiLGUpfWVsc2Ugei5iaW5kKFwiY2xpY2tcIixlKTtyZXR1cm4gais9MSx3fSkse2lkOlwibmdkaWFsb2dcIitmLGNsb3NlUHJvbWlzZTp5LnByb21pc2UsY2xvc2U6ZnVuY3Rpb24oYSl7di5jbG9zZURpYWxvZyh6LGEpfX19LG9wZW5Db25maXJtOmZ1bmN0aW9uKGIpe3ZhciBjPW8uZGVmZXIoKSxlPXtjbG9zZUJ5RXNjYXBlOiExLGNsb3NlQnlEb2N1bWVudDohMX07YS5leHRlbmQoZSxiKSxlLnNjb3BlPWEuaXNPYmplY3QoZS5zY29wZSk/ZS5zY29wZS4kbmV3KCk6cS4kbmV3KCksZS5zY29wZS5jb25maXJtPWZ1bmN0aW9uKGEpe2MucmVzb2x2ZShhKTt2YXIgYj1kKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGYuaWQpKTt2LnBlcmZvcm1DbG9zZURpYWxvZyhiLGEpfTt2YXIgZj13Lm9wZW4oZSk7cmV0dXJuIGYuY2xvc2VQcm9taXNlLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGE/Yy5yZWplY3QoYS52YWx1ZSk6Yy5yZWplY3QoKX0pLGMucHJvbWlzZX0sY2xvc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1kKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpKTtyZXR1cm4gYy5sZW5ndGg/di5jbG9zZURpYWxvZyhjLGIpOncuY2xvc2VBbGwoYiksd30sY2xvc2VBbGw6ZnVuY3Rpb24oYil7dmFyIGM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5uZ2RpYWxvZ1wiKTthLmZvckVhY2goYyxmdW5jdGlvbihhKXt2LmNsb3NlRGlhbG9nKGQoYSksYil9KX0sZ2V0RGVmYXVsdHM6ZnVuY3Rpb24oKXtyZXR1cm4gY319O3JldHVybiB3fV19KSxjLmRpcmVjdGl2ZShcIm5nRGlhbG9nXCIsW1wibmdEaWFsb2dcIixmdW5jdGlvbihiKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIsc2NvcGU6e25nRGlhbG9nU2NvcGU6XCI9XCJ9LGxpbms6ZnVuY3Rpb24oYyxkLGUpe2Qub24oXCJjbGlja1wiLGZ1bmN0aW9uKGQpe2QucHJldmVudERlZmF1bHQoKTt2YXIgZj1hLmlzRGVmaW5lZChjLm5nRGlhbG9nU2NvcGUpP2MubmdEaWFsb2dTY29wZTpcIm5vU2NvcGVcIjthLmlzRGVmaW5lZChlLm5nRGlhbG9nQ2xvc2VQcmV2aW91cykmJmIuY2xvc2UoZS5uZ0RpYWxvZ0Nsb3NlUHJldmlvdXMpO3ZhciBnPWIuZ2V0RGVmYXVsdHMoKTtiLm9wZW4oe3RlbXBsYXRlOmUubmdEaWFsb2csY2xhc3NOYW1lOmUubmdEaWFsb2dDbGFzc3x8Zy5jbGFzc05hbWUsY29udHJvbGxlcjplLm5nRGlhbG9nQ29udHJvbGxlcixzY29wZTpmLGRhdGE6ZS5uZ0RpYWxvZ0RhdGEsc2hvd0Nsb3NlOlwiZmFsc2VcIj09PWUubmdEaWFsb2dTaG93Q2xvc2U/ITE6XCJ0cnVlXCI9PT1lLm5nRGlhbG9nU2hvd0Nsb3NlPyEwOmcuc2hvd0Nsb3NlLGNsb3NlQnlEb2N1bWVudDpcImZhbHNlXCI9PT1lLm5nRGlhbG9nQ2xvc2VCeURvY3VtZW50PyExOlwidHJ1ZVwiPT09ZS5uZ0RpYWxvZ0Nsb3NlQnlEb2N1bWVudD8hMDpnLmNsb3NlQnlEb2N1bWVudCxjbG9zZUJ5RXNjYXBlOlwiZmFsc2VcIj09PWUubmdEaWFsb2dDbG9zZUJ5RXNjYXBlPyExOlwidHJ1ZVwiPT09ZS5uZ0RpYWxvZ0Nsb3NlQnlFc2NhcGU/ITA6Zy5jbG9zZUJ5RXNjYXBlLHByZUNsb3NlQ2FsbGJhY2s6ZS5uZ0RpYWxvZ1ByZUNsb3NlQ2FsbGJhY2t8fGcucHJlQ2xvc2VDYWxsYmFja30pfSl9fX1dKSxjfSk7IiwiLyoqXHJcbiAqIGRpclBhZ2luYXRpb24gLSBBbmd1bGFySlMgbW9kdWxlIGZvciBwYWdpbmF0aW5nIChhbG1vc3QpIGFueXRoaW5nLlxyXG4gKlxyXG4gKlxyXG4gKiBDcmVkaXRzXHJcbiAqID09PT09PT1cclxuICpcclxuICogRGFuaWVsIFRhYnVlbmNhOiBodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2QvbXNnL2FuZ3VsYXIvYW45UXB6cUlZaU0vcjh2LTNXMVg1dmNKXHJcbiAqIGZvciB0aGUgaWRlYSBvbiBob3cgdG8gZHluYW1pY2FsbHkgaW52b2tlIHRoZSBuZy1yZXBlYXQgZGlyZWN0aXZlLlxyXG4gKlxyXG4gKiBJIGJvcnJvd2VkIGEgY291cGxlIG9mIGxpbmVzIGFuZCBhIGZldyBhdHRyaWJ1dGUgbmFtZXMgZnJvbSB0aGUgQW5ndWxhclVJIEJvb3RzdHJhcCBwcm9qZWN0OlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci11aS9ib290c3RyYXAvYmxvYi9tYXN0ZXIvc3JjL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5qc1xyXG4gKlxyXG4gKiBDb3B5cmlnaHQgMjAxNCBNaWNoYWVsIEJyb21sZXkgPG1pY2hhZWxAbWljaGFlbGJyb21sZXkuY28udWs+XHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uZmlnXHJcbiAgICAgKi9cclxuICAgIHZhciBtb2R1bGVOYW1lID0gJ2FuZ3VsYXJVdGlscy5kaXJlY3RpdmVzLmRpclBhZ2luYXRpb24nO1xyXG4gICAgdmFyIERFRkFVTFRfSUQgPSAnX19kZWZhdWx0JztcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1vZHVsZVxyXG4gICAgICovXHJcbiAgICB2YXIgbW9kdWxlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZShtb2R1bGVOYW1lKTtcclxuICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgLy8gbmFtZWQgbW9kdWxlIGRvZXMgbm90IGV4aXN0LCBzbyBjcmVhdGUgb25lXHJcbiAgICAgICAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUobW9kdWxlTmFtZSwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZVxyXG4gICAgICAgIC5kaXJlY3RpdmUoJ2RpclBhZ2luYXRlJywgWyckY29tcGlsZScsICckcGFyc2UnLCAncGFnaW5hdGlvblNlcnZpY2UnLCBkaXJQYWdpbmF0ZURpcmVjdGl2ZV0pXHJcbiAgICAgICAgLmRpcmVjdGl2ZSgnZGlyUGFnaW5hdGVOb0NvbXBpbGUnLCBub0NvbXBpbGVEaXJlY3RpdmUpXHJcbiAgICAgICAgLmRpcmVjdGl2ZSgnZGlyUGFnaW5hdGlvbkNvbnRyb2xzJywgWydwYWdpbmF0aW9uU2VydmljZScsICdwYWdpbmF0aW9uVGVtcGxhdGUnLCBkaXJQYWdpbmF0aW9uQ29udHJvbHNEaXJlY3RpdmVdKVxyXG4gICAgICAgIC5maWx0ZXIoJ2l0ZW1zUGVyUGFnZScsIFsncGFnaW5hdGlvblNlcnZpY2UnLCBpdGVtc1BlclBhZ2VGaWx0ZXJdKVxyXG4gICAgICAgIC5zZXJ2aWNlKCdwYWdpbmF0aW9uU2VydmljZScsIHBhZ2luYXRpb25TZXJ2aWNlKVxyXG4gICAgICAgIC5wcm92aWRlcigncGFnaW5hdGlvblRlbXBsYXRlJywgcGFnaW5hdGlvblRlbXBsYXRlUHJvdmlkZXIpXHJcbiAgICAgICAgLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJyxkaXJQYWdpbmF0aW9uQ29udHJvbHNUZW1wbGF0ZUluc3RhbGxlcl0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRpclBhZ2luYXRlRGlyZWN0aXZlKCRjb21waWxlLCAkcGFyc2UsIHBhZ2luYXRpb25TZXJ2aWNlKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAge1xyXG4gICAgICAgICAgICB0ZXJtaW5hbDogdHJ1ZSxcclxuICAgICAgICAgICAgbXVsdGlFbGVtZW50OiB0cnVlLFxyXG4gICAgICAgICAgICBjb21waWxlOiBkaXJQYWdpbmF0aW9uQ29tcGlsZUZuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGlyUGFnaW5hdGlvbkNvbXBpbGVGbih0RWxlbWVudCwgdEF0dHJzKXtcclxuXHJcbiAgICAgICAgICAgIHZhciBleHByZXNzaW9uID0gdEF0dHJzLmRpclBhZ2luYXRlO1xyXG4gICAgICAgICAgICAvLyByZWdleCB0YWtlbiBkaXJlY3RseSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvYmxvYi9tYXN0ZXIvc3JjL25nL2RpcmVjdGl2ZS9uZ1JlcGVhdC5qcyNMMjExXHJcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goL15cXHMqKFtcXHNcXFNdKz8pXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpP1xccyokLyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZmlsdGVyUGF0dGVybiA9IC9cXHxcXHMqaXRlbXNQZXJQYWdlXFxzKjpbXnxdKi87XHJcbiAgICAgICAgICAgIGlmIChtYXRjaFsyXS5tYXRjaChmaWx0ZXJQYXR0ZXJuKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgJ3BhZ2luYXRpb24gZGlyZWN0aXZlOiB0aGUgXFwnaXRlbXNQZXJQYWdlXFwnIGZpbHRlciBtdXN0IGJlIHNldC4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpdGVtc1BlclBhZ2VGaWx0ZXJSZW1vdmVkID0gbWF0Y2hbMl0ucmVwbGFjZShmaWx0ZXJQYXR0ZXJuLCAnJyk7XHJcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uR2V0dGVyID0gJHBhcnNlKGl0ZW1zUGVyUGFnZUZpbHRlclJlbW92ZWQpO1xyXG5cclxuICAgICAgICAgICAgYWRkTm9Db21waWxlQXR0cmlidXRlcyh0RWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBhbnkgdmFsdWUgaXMgc3BlY2lmaWVkIGZvciBwYWdpbmF0aW9uSWQsIHdlIHJlZ2lzdGVyIHRoZSB1bi1ldmFsdWF0ZWQgZXhwcmVzc2lvbiBhdCB0aGlzIHN0YWdlIGZvciB0aGUgYmVuZWZpdCBvZiBhbnlcclxuICAgICAgICAgICAgLy8gZGlyLXBhZ2luYXRpb24tY29udHJvbHMgZGlyZWN0aXZlcyB0aGF0IG1heSBiZSBsb29raW5nIGZvciB0aGlzIElELlxyXG4gICAgICAgICAgICB2YXIgcmF3SWQgPSB0QXR0cnMucGFnaW5hdGlvbklkIHx8IERFRkFVTFRfSUQ7XHJcbiAgICAgICAgICAgIHBhZ2luYXRpb25TZXJ2aWNlLnJlZ2lzdGVySW5zdGFuY2UocmF3SWQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRpclBhZ2luYXRpb25MaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKXtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBOb3cgdGhhdCB3ZSBoYXZlIGFjY2VzcyB0byB0aGUgYHNjb3BlYCB3ZSBjYW4gaW50ZXJwb2xhdGUgYW55IGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIHBhZ2luYXRpb25JZCBhdHRyaWJ1dGUgYW5kXHJcbiAgICAgICAgICAgICAgICAvLyBwb3RlbnRpYWxseSByZWdpc3RlciBhIG5ldyBJRCBpZiBpdCBldmFsdWF0ZXMgdG8gYSBkaWZmZXJlbnQgdmFsdWUgdGhhbiB0aGUgcmF3SWQuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFnaW5hdGlvbklkID0gJHBhcnNlKGF0dHJzLnBhZ2luYXRpb25JZCkoc2NvcGUpIHx8IGF0dHJzLnBhZ2luYXRpb25JZCB8fCBERUZBVUxUX0lEO1xyXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvblNlcnZpY2UucmVnaXN0ZXJJbnN0YW5jZShwYWdpbmF0aW9uSWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByZXBlYXRFeHByZXNzaW9uID0gZ2V0UmVwZWF0RXhwcmVzc2lvbihleHByZXNzaW9uLCBwYWdpbmF0aW9uSWQpO1xyXG4gICAgICAgICAgICAgICAgYWRkTmdSZXBlYXRUb0VsZW1lbnQoZWxlbWVudCwgYXR0cnMsIHJlcGVhdEV4cHJlc3Npb24pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlbW92ZVRlbXBvcmFyeUF0dHJpYnV0ZXMoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tcGlsZWQgPSAgJGNvbXBpbGUoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQYWdlR2V0dGVyID0gbWFrZUN1cnJlbnRQYWdlR2V0dGVyRm4oc2NvcGUsIGF0dHJzLCBwYWdpbmF0aW9uSWQpO1xyXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvblNlcnZpY2Uuc2V0Q3VycmVudFBhZ2VQYXJzZXIocGFnaW5hdGlvbklkLCBjdXJyZW50UGFnZUdldHRlciwgc2NvcGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXR0cnMudG90YWxJdGVtcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uU2VydmljZS5zZXRBc3luY01vZGVUcnVlKHBhZ2luYXRpb25JZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHBhcnNlKGF0dHJzLnRvdGFsSXRlbXMpKHNjb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwIDw9IHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvblNlcnZpY2Uuc2V0Q29sbGVjdGlvbkxlbmd0aChwYWdpbmF0aW9uSWQsIHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25HZXR0ZXIoc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25TZXJ2aWNlLnNldENvbGxlY3Rpb25MZW5ndGgocGFnaW5hdGlvbklkLCBjb2xsZWN0aW9uLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBEZWxlZ2F0ZSB0byB0aGUgbGluayBmdW5jdGlvbiByZXR1cm5lZCBieSB0aGUgbmV3IGNvbXBpbGF0aW9uIG9mIHRoZSBuZy1yZXBlYXRcclxuICAgICAgICAgICAgICAgIGNvbXBpbGVkKHNjb3BlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElmIGEgcGFnaW5hdGlvbiBpZCBoYXMgYmVlbiBzcGVjaWZpZWQsIHdlIG5lZWQgdG8gY2hlY2sgdGhhdCBpdCBpcyBwcmVzZW50IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgcGFzc2VkIHRvXHJcbiAgICAgICAgICogdGhlIGl0ZW1zUGVyUGFnZSBmaWx0ZXIuIElmIGl0IGlzIG5vdCB0aGVyZSwgd2UgYWRkIGl0IGFuZCByZXR1cm4gdGhlIG1vZGlmaWVkIGV4cHJlc3Npb24uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gZXhwcmVzc2lvblxyXG4gICAgICAgICAqIEBwYXJhbSBwYWdpbmF0aW9uSWRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXRSZXBlYXRFeHByZXNzaW9uKGV4cHJlc3Npb24sIHBhZ2luYXRpb25JZCkge1xyXG4gICAgICAgICAgICB2YXIgcmVwZWF0RXhwcmVzc2lvbixcclxuICAgICAgICAgICAgICAgIGlkRGVmaW5lZEluRmlsdGVyID0gISFleHByZXNzaW9uLm1hdGNoKC8oXFx8XFxzKml0ZW1zUGVyUGFnZVxccyo6W158XSo6W158XSopLyk7XHJcblxyXG4gICAgICAgICAgICBpZiAocGFnaW5hdGlvbklkICE9PSBERUZBVUxUX0lEICYmICFpZERlZmluZWRJbkZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgcmVwZWF0RXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZSgvKFxcfFxccyppdGVtc1BlclBhZ2VcXHMqOltefF0qKS8sIFwiJDEgOiAnXCIgKyBwYWdpbmF0aW9uSWQgKyBcIidcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXBlYXRFeHByZXNzaW9uID0gZXhwcmVzc2lvbjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlcGVhdEV4cHJlc3Npb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGRzIHRoZSBuZy1yZXBlYXQgZGlyZWN0aXZlIHRvIHRoZSBlbGVtZW50LiBJbiB0aGUgY2FzZSBvZiBtdWx0aS1lbGVtZW50ICgtc3RhcnQsIC1lbmQpIGl0IGFkZHMgdGhlXHJcbiAgICAgICAgICogYXBwcm9wcmlhdGUgbXVsdGktZWxlbWVudCBuZy1yZXBlYXQgdG8gdGhlIGZpcnN0IGFuZCBsYXN0IGVsZW1lbnQgaW4gdGhlIHJhbmdlLlxyXG4gICAgICAgICAqIEBwYXJhbSBlbGVtZW50XHJcbiAgICAgICAgICogQHBhcmFtIGF0dHJzXHJcbiAgICAgICAgICogQHBhcmFtIHJlcGVhdEV4cHJlc3Npb25cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBhZGROZ1JlcGVhdFRvRWxlbWVudChlbGVtZW50LCBhdHRycywgcmVwZWF0RXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudFswXS5oYXNBdHRyaWJ1dGUoJ2Rpci1wYWdpbmF0ZS1zdGFydCcpIHx8IGVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdkYXRhLWRpci1wYWdpbmF0ZS1zdGFydCcpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB1c2luZyBtdWx0aUVsZW1lbnQgbW9kZSAoZGlyLXBhZ2luYXRlLXN0YXJ0LCBkaXItcGFnaW5hdGUtZW5kKVxyXG4gICAgICAgICAgICAgICAgYXR0cnMuJHNldCgnbmdSZXBlYXRTdGFydCcsIHJlcGVhdEV4cHJlc3Npb24pO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5lcShlbGVtZW50Lmxlbmd0aCAtIDEpLmF0dHIoJ25nLXJlcGVhdC1lbmQnLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGF0dHJzLiRzZXQoJ25nUmVwZWF0JywgcmVwZWF0RXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFkZHMgdGhlIGRpci1wYWdpbmF0ZS1uby1jb21waWxlIGRpcmVjdGl2ZSB0byBlYWNoIGVsZW1lbnQgaW4gdGhlIHRFbGVtZW50IHJhbmdlLlxyXG4gICAgICAgICAqIEBwYXJhbSB0RWxlbWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGFkZE5vQ29tcGlsZUF0dHJpYnV0ZXModEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRFbGVtZW50LCBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbCkuYXR0cignZGlyLXBhZ2luYXRlLW5vLWNvbXBpbGUnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZW1vdmVzIHRoZSB2YXJpYXRpb25zIG9uIGRpci1wYWdpbmF0ZSAoZGF0YS0sIC1zdGFydCwgLWVuZCkgYW5kIHRoZSBkaXItcGFnaW5hdGUtbm8tY29tcGlsZSBkaXJlY3RpdmVzLlxyXG4gICAgICAgICAqIEBwYXJhbSBlbGVtZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlVGVtcG9yYXJ5QXR0cmlidXRlcyhlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChlbGVtZW50LCBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbCkucmVtb3ZlQXR0cignZGlyLXBhZ2luYXRlLW5vLWNvbXBpbGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuZXEoMCkucmVtb3ZlQXR0cignZGlyLXBhZ2luYXRlLXN0YXJ0JykucmVtb3ZlQXR0cignZGlyLXBhZ2luYXRlJykucmVtb3ZlQXR0cignZGF0YS1kaXItcGFnaW5hdGUtc3RhcnQnKS5yZW1vdmVBdHRyKCdkYXRhLWRpci1wYWdpbmF0ZScpO1xyXG4gICAgICAgICAgICBlbGVtZW50LmVxKGVsZW1lbnQubGVuZ3RoIC0gMSkucmVtb3ZlQXR0cignZGlyLXBhZ2luYXRlLWVuZCcpLnJlbW92ZUF0dHIoJ2RhdGEtZGlyLXBhZ2luYXRlLWVuZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIGdldHRlciBmdW5jdGlvbiBmb3IgdGhlIGN1cnJlbnQtcGFnZSBhdHRyaWJ1dGUsIHVzaW5nIHRoZSBleHByZXNzaW9uIHByb3ZpZGVkIG9yIGEgZGVmYXVsdCB2YWx1ZSBpZlxyXG4gICAgICAgICAqIG5vIGN1cnJlbnQtcGFnZSBleHByZXNzaW9uIHdhcyBzcGVjaWZpZWQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gc2NvcGVcclxuICAgICAgICAgKiBAcGFyYW0gYXR0cnNcclxuICAgICAgICAgKiBAcGFyYW0gcGFnaW5hdGlvbklkXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gbWFrZUN1cnJlbnRQYWdlR2V0dGVyRm4oc2NvcGUsIGF0dHJzLCBwYWdpbmF0aW9uSWQpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRQYWdlR2V0dGVyO1xyXG4gICAgICAgICAgICBpZiAoYXR0cnMuY3VycmVudFBhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlR2V0dGVyID0gJHBhcnNlKGF0dHJzLmN1cnJlbnRQYWdlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjdXJyZW50LXBhZ2UgYXR0cmlidXRlIHdhcyBub3Qgc2V0LCB3ZSdsbCBtYWtlIG91ciBvd25cclxuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0Q3VycmVudFBhZ2UgPSBwYWdpbmF0aW9uSWQgKyAnX19jdXJyZW50UGFnZSc7XHJcbiAgICAgICAgICAgICAgICBzY29wZVtkZWZhdWx0Q3VycmVudFBhZ2VdID0gMTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlR2V0dGVyID0gJHBhcnNlKGRlZmF1bHRDdXJyZW50UGFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRQYWdlR2V0dGVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgaXMgYSBoZWxwZXIgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIGNvcnJlY3QgY29tcGlsYXRpb24gd2hlbiBpbiBtdWx0aS1lbGVtZW50IG1vZGUgKGllIGRpci1wYWdpbmF0ZS1zdGFydCwgZGlyLXBhZ2luYXRlLWVuZCkuXHJcbiAgICAgKiBJdCBpcyBkeW5hbWljYWxseSBhZGRlZCB0byBhbGwgZWxlbWVudHMgaW4gdGhlIGRpci1wYWdpbmF0ZSBjb21waWxlIGZ1bmN0aW9uLCBhbmQgaXQgcHJldmVudHMgZnVydGhlciBjb21waWxhdGlvbiBvZlxyXG4gICAgICogYW55IGlubmVyIGRpcmVjdGl2ZXMuIEl0IGlzIHRoZW4gcmVtb3ZlZCBpbiB0aGUgbGluayBmdW5jdGlvbiwgYW5kIGFsbCBpbm5lciBkaXJlY3RpdmVzIGFyZSB0aGVuIG1hbnVhbGx5IGNvbXBpbGVkLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBub0NvbXBpbGVEaXJlY3RpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJpb3JpdHk6IDUwMDAsXHJcbiAgICAgICAgICAgIHRlcm1pbmFsOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXJQYWdpbmF0aW9uQ29udHJvbHNUZW1wbGF0ZUluc3RhbGxlcigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgnYW5ndWxhclV0aWxzLmRpcmVjdGl2ZXMuZGlyUGFnaW5hdGlvbi50ZW1wbGF0ZScsICc8dWwgY2xhc3M9XCJwYWdpbmF0aW9uXCIgbmctaWY9XCIxIDwgcGFnZXMubGVuZ3RoXCI+PGxpIG5nLWlmPVwiYm91bmRhcnlMaW5rc1wiIG5nLWNsYXNzPVwieyBkaXNhYmxlZCA6IHBhZ2luYXRpb24uY3VycmVudCA9PSAxIH1cIj48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJzZXRDdXJyZW50KDEpXCI+JmxhcXVvOzwvYT48L2xpPjxsaSBuZy1pZj1cImRpcmVjdGlvbkxpbmtzXCIgbmctY2xhc3M9XCJ7IGRpc2FibGVkIDogcGFnaW5hdGlvbi5jdXJyZW50ID09IDEgfVwiPjxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInNldEN1cnJlbnQocGFnaW5hdGlvbi5jdXJyZW50IC0gMSlcIj4mbHNhcXVvOzwvYT48L2xpPjxsaSBuZy1yZXBlYXQ9XCJwYWdlTnVtYmVyIGluIHBhZ2VzIHRyYWNrIGJ5ICRpbmRleFwiIG5nLWNsYXNzPVwieyBhY3RpdmUgOiBwYWdpbmF0aW9uLmN1cnJlbnQgPT0gcGFnZU51bWJlciwgZGlzYWJsZWQgOiBwYWdlTnVtYmVyID09IFxcJy4uLlxcJyB9XCI+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwic2V0Q3VycmVudChwYWdlTnVtYmVyKVwiPnt7IHBhZ2VOdW1iZXIgfX08L2E+PC9saT48bGkgbmctaWY9XCJkaXJlY3Rpb25MaW5rc1wiIG5nLWNsYXNzPVwieyBkaXNhYmxlZCA6IHBhZ2luYXRpb24uY3VycmVudCA9PSBwYWdpbmF0aW9uLmxhc3QgfVwiPjxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInNldEN1cnJlbnQocGFnaW5hdGlvbi5jdXJyZW50ICsgMSlcIj4mcnNhcXVvOzwvYT48L2xpPjxsaSBuZy1pZj1cImJvdW5kYXJ5TGlua3NcIiAgbmctY2xhc3M9XCJ7IGRpc2FibGVkIDogcGFnaW5hdGlvbi5jdXJyZW50ID09IHBhZ2luYXRpb24ubGFzdCB9XCI+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwic2V0Q3VycmVudChwYWdpbmF0aW9uLmxhc3QpXCI+JnJhcXVvOzwvYT48L2xpPjwvdWw+Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGlyUGFnaW5hdGlvbkNvbnRyb2xzRGlyZWN0aXZlKHBhZ2luYXRpb25TZXJ2aWNlLCBwYWdpbmF0aW9uVGVtcGxhdGUpIHtcclxuXHJcbiAgICAgICAgdmFyIG51bWJlclJlZ2V4ID0gL15cXGQrJC87XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQUUnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbSwgYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCBwYWdpbmF0aW9uVGVtcGxhdGUuZ2V0UGF0aCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY29wZToge1xyXG4gICAgICAgICAgICAgICAgbWF4U2l6ZTogJz0/JyxcclxuICAgICAgICAgICAgICAgIG9uUGFnZUNoYW5nZTogJyY/JyxcclxuICAgICAgICAgICAgICAgIHBhZ2luYXRpb25JZDogJz0/J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsaW5rOiBkaXJQYWdpbmF0aW9uQ29udHJvbHNMaW5rRm5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBkaXJQYWdpbmF0aW9uQ29udHJvbHNMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcblxyXG4gICAgICAgICAgICAvLyByYXdJZCBpcyB0aGUgdW4taW50ZXJwb2xhdGVkIHZhbHVlIG9mIHRoZSBwYWdpbmF0aW9uLWlkIGF0dHJpYnV0ZS4gVGhpcyBpcyBvbmx5IGltcG9ydGFudCB3aGVuIHRoZSBjb3JyZXNwb25kaW5nIGRpci1wYWdpbmF0ZSBkaXJlY3RpdmUgaGFzXHJcbiAgICAgICAgICAgIC8vIG5vdCB5ZXQgYmVlbiBsaW5rZWQgKGUuZy4gaWYgaXQgaXMgaW5zaWRlIGFuIG5nLWlmIGJsb2NrKSwgYW5kIGluIHRoYXQgY2FzZSBpdCBwcmV2ZW50cyB0aGlzIGNvbnRyb2xzIGRpcmVjdGl2ZSBmcm9tIGFzc3VtaW5nIHRoYXQgdGhlcmUgaXNcclxuICAgICAgICAgICAgLy8gbm8gY29ycmVzcG9uZGluZyBkaXItcGFnaW5hdGUgZGlyZWN0aXZlIGFuZCB3cm9uZ2x5IHRocm93aW5nIGFuIGV4Y2VwdGlvbi5cclxuICAgICAgICAgICAgdmFyIHJhd0lkID0gYXR0cnMucGFnaW5hdGlvbklkIHx8ICBERUZBVUxUX0lEO1xyXG4gICAgICAgICAgICB2YXIgcGFnaW5hdGlvbklkID0gc2NvcGUucGFnaW5hdGlvbklkIHx8IGF0dHJzLnBhZ2luYXRpb25JZCB8fCAgREVGQVVMVF9JRDtcclxuXHJcbiAgICAgICAgICAgIGlmICghcGFnaW5hdGlvblNlcnZpY2UuaXNSZWdpc3RlcmVkKHBhZ2luYXRpb25JZCkgJiYgIXBhZ2luYXRpb25TZXJ2aWNlLmlzUmVnaXN0ZXJlZChyYXdJZCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpZE1lc3NhZ2UgPSAocGFnaW5hdGlvbklkICE9PSBERUZBVUxUX0lEKSA/ICcgKGlkOiAnICsgcGFnaW5hdGlvbklkICsgJykgJyA6ICcgJztcclxuICAgICAgICAgICAgICAgIHRocm93ICdwYWdpbmF0aW9uIGRpcmVjdGl2ZTogdGhlIHBhZ2luYXRpb24gY29udHJvbHMnICsgaWRNZXNzYWdlICsgJ2Nhbm5vdCBiZSB1c2VkIHdpdGhvdXQgdGhlIGNvcnJlc3BvbmRpbmcgcGFnaW5hdGlvbiBkaXJlY3RpdmUuJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFzY29wZS5tYXhTaXplKSB7IHNjb3BlLm1heFNpemUgPSA5OyB9XHJcbiAgICAgICAgICAgIHNjb3BlLmRpcmVjdGlvbkxpbmtzID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMuZGlyZWN0aW9uTGlua3MpID8gc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy5kaXJlY3Rpb25MaW5rcykgOiB0cnVlO1xyXG4gICAgICAgICAgICBzY29wZS5ib3VuZGFyeUxpbmtzID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMuYm91bmRhcnlMaW5rcykgPyBzY29wZS4kcGFyZW50LiRldmFsKGF0dHJzLmJvdW5kYXJ5TGlua3MpIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFnaW5hdGlvblJhbmdlID0gTWF0aC5tYXgoc2NvcGUubWF4U2l6ZSwgNSk7XHJcbiAgICAgICAgICAgIHNjb3BlLnBhZ2VzID0gW107XHJcbiAgICAgICAgICAgIHNjb3BlLnBhZ2luYXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0OiAxLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudDogMVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzY29wZS5yYW5nZSA9IHtcclxuICAgICAgICAgICAgICAgIGxvd2VyOiAxLFxyXG4gICAgICAgICAgICAgICAgdXBwZXI6IDEsXHJcbiAgICAgICAgICAgICAgICB0b3RhbDogMVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChwYWdpbmF0aW9uU2VydmljZS5nZXRDb2xsZWN0aW9uTGVuZ3RoKHBhZ2luYXRpb25JZCkgKyAxKSAqIHBhZ2luYXRpb25TZXJ2aWNlLmdldEl0ZW1zUGVyUGFnZShwYWdpbmF0aW9uSWQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgwIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVQYWdpbmF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChwYWdpbmF0aW9uU2VydmljZS5nZXRJdGVtc1BlclBhZ2UocGFnaW5hdGlvbklkKSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGN1cnJlbnQsIHByZXZpb3VzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCAhPSBwcmV2aW91cyAmJiB0eXBlb2YgcHJldmlvdXMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ29Ub1BhZ2Uoc2NvcGUucGFnaW5hdGlvbi5jdXJyZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFnaW5hdGlvblNlcnZpY2UuZ2V0Q3VycmVudFBhZ2UocGFnaW5hdGlvbklkKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oY3VycmVudFBhZ2UsIHByZXZpb3VzUGFnZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlICE9IHByZXZpb3VzUGFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdvVG9QYWdlKGN1cnJlbnRQYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzY29wZS5zZXRDdXJyZW50ID0gZnVuY3Rpb24obnVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZFBhZ2VOdW1iZXIobnVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG51bSA9IHBhcnNlSW50KG51bSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25TZXJ2aWNlLnNldEN1cnJlbnRQYWdlKHBhZ2luYXRpb25JZCwgbnVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdvVG9QYWdlKG51bSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRQYWdlTnVtYmVyKG51bSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS5wYWdlcyA9IGdlbmVyYXRlUGFnZXNBcnJheShudW0sIHBhZ2luYXRpb25TZXJ2aWNlLmdldENvbGxlY3Rpb25MZW5ndGgocGFnaW5hdGlvbklkKSwgcGFnaW5hdGlvblNlcnZpY2UuZ2V0SXRlbXNQZXJQYWdlKHBhZ2luYXRpb25JZCksIHBhZ2luYXRpb25SYW5nZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucGFnaW5hdGlvbi5jdXJyZW50ID0gbnVtO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlVmFsdWVzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGEgY2FsbGJhY2sgaGFzIGJlZW4gc2V0LCB0aGVuIGNhbGwgaXQgd2l0aCB0aGUgcGFnZSBudW1iZXIgYXMgYW4gYXJndW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUub25QYWdlQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLm9uUGFnZUNoYW5nZSh7IG5ld1BhZ2VOdW1iZXIgOiBudW0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVBhZ2luYXRpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFnZSA9IHBhcnNlSW50KHBhZ2luYXRpb25TZXJ2aWNlLmdldEN1cnJlbnRQYWdlKHBhZ2luYXRpb25JZCkpIHx8IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgc2NvcGUucGFnZXMgPSBnZW5lcmF0ZVBhZ2VzQXJyYXkocGFnZSwgcGFnaW5hdGlvblNlcnZpY2UuZ2V0Q29sbGVjdGlvbkxlbmd0aChwYWdpbmF0aW9uSWQpLCBwYWdpbmF0aW9uU2VydmljZS5nZXRJdGVtc1BlclBhZ2UocGFnaW5hdGlvbklkKSwgcGFnaW5hdGlvblJhbmdlKTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLnBhZ2luYXRpb24uY3VycmVudCA9IHBhZ2U7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5wYWdpbmF0aW9uLmxhc3QgPSBzY29wZS5wYWdlc1tzY29wZS5wYWdlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIGlmIChzY29wZS5wYWdpbmF0aW9uLmxhc3QgPCBzY29wZS5wYWdpbmF0aW9uLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS5zZXRDdXJyZW50KHNjb3BlLnBhZ2luYXRpb24ubGFzdCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlVmFsdWVzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIHVwZGF0ZXMgdGhlIHZhbHVlcyAobG93ZXIsIHVwcGVyLCB0b3RhbCkgb2YgdGhlIGBzY29wZS5yYW5nZWAgb2JqZWN0LCB3aGljaCBjYW4gYmUgdXNlZCBpbiB0aGUgcGFnaW5hdGlvblxyXG4gICAgICAgICAgICAgKiB0ZW1wbGF0ZSB0byBkaXNwbGF5IHRoZSBjdXJyZW50IHBhZ2UgcmFuZ2UsIGUuZy4gXCJzaG93aW5nIDIxIC0gNDAgb2YgMTQ0IHJlc3VsdHNcIjtcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVJhbmdlVmFsdWVzKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQYWdlID0gcGFnaW5hdGlvblNlcnZpY2UuZ2V0Q3VycmVudFBhZ2UocGFnaW5hdGlvbklkKSxcclxuICAgICAgICAgICAgICAgICAgICBpdGVtc1BlclBhZ2UgPSBwYWdpbmF0aW9uU2VydmljZS5nZXRJdGVtc1BlclBhZ2UocGFnaW5hdGlvbklkKSxcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbEl0ZW1zID0gcGFnaW5hdGlvblNlcnZpY2UuZ2V0Q29sbGVjdGlvbkxlbmd0aChwYWdpbmF0aW9uSWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNjb3BlLnJhbmdlLmxvd2VyID0gKGN1cnJlbnRQYWdlIC0gMSkgKiBpdGVtc1BlclBhZ2UgKyAxO1xyXG4gICAgICAgICAgICAgICAgc2NvcGUucmFuZ2UudXBwZXIgPSBNYXRoLm1pbihjdXJyZW50UGFnZSAqIGl0ZW1zUGVyUGFnZSwgdG90YWxJdGVtcyk7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5yYW5nZS50b3RhbCA9IHRvdGFsSXRlbXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVmFsaWRQYWdlTnVtYmVyKG51bSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChudW1iZXJSZWdleC50ZXN0KG51bSkgJiYgKDAgPCBudW0gJiYgbnVtIDw9IHNjb3BlLnBhZ2luYXRpb24ubGFzdCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZW5lcmF0ZSBhbiBhcnJheSBvZiBwYWdlIG51bWJlcnMgKG9yIHRoZSAnLi4uJyBzdHJpbmcpIHdoaWNoIGlzIHVzZWQgaW4gYW4gbmctcmVwZWF0IHRvIGdlbmVyYXRlIHRoZVxyXG4gICAgICAgICAqIGxpbmtzIHVzZWQgaW4gcGFnaW5hdGlvblxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGN1cnJlbnRQYWdlXHJcbiAgICAgICAgICogQHBhcmFtIHJvd3NQZXJQYWdlXHJcbiAgICAgICAgICogQHBhcmFtIHBhZ2luYXRpb25SYW5nZVxyXG4gICAgICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uTGVuZ3RoXHJcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlUGFnZXNBcnJheShjdXJyZW50UGFnZSwgY29sbGVjdGlvbkxlbmd0aCwgcm93c1BlclBhZ2UsIHBhZ2luYXRpb25SYW5nZSkge1xyXG4gICAgICAgICAgICB2YXIgcGFnZXMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoY29sbGVjdGlvbkxlbmd0aCAvIHJvd3NQZXJQYWdlKTtcclxuICAgICAgICAgICAgdmFyIGhhbGZXYXkgPSBNYXRoLmNlaWwocGFnaW5hdGlvblJhbmdlIC8gMik7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA8PSBoYWxmV2F5KSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICdzdGFydCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG90YWxQYWdlcyAtIGhhbGZXYXkgPCBjdXJyZW50UGFnZSkge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSAnZW5kJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gJ21pZGRsZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBlbGxpcHNlc05lZWRlZCA9IHBhZ2luYXRpb25SYW5nZSA8IHRvdGFsUGFnZXM7XHJcbiAgICAgICAgICAgIHZhciBpID0gMTtcclxuICAgICAgICAgICAgd2hpbGUgKGkgPD0gdG90YWxQYWdlcyAmJiBpIDw9IHBhZ2luYXRpb25SYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VOdW1iZXIgPSBjYWxjdWxhdGVQYWdlTnVtYmVyKGksIGN1cnJlbnRQYWdlLCBwYWdpbmF0aW9uUmFuZ2UsIHRvdGFsUGFnZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvcGVuaW5nRWxsaXBzZXNOZWVkZWQgPSAoaSA9PT0gMiAmJiAocG9zaXRpb24gPT09ICdtaWRkbGUnIHx8IHBvc2l0aW9uID09PSAnZW5kJykpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNsb3NpbmdFbGxpcHNlc05lZWRlZCA9IChpID09PSBwYWdpbmF0aW9uUmFuZ2UgLSAxICYmIChwb3NpdGlvbiA9PT0gJ21pZGRsZScgfHwgcG9zaXRpb24gPT09ICdzdGFydCcpKTtcclxuICAgICAgICAgICAgICAgIGlmIChlbGxpcHNlc05lZWRlZCAmJiAob3BlbmluZ0VsbGlwc2VzTmVlZGVkIHx8IGNsb3NpbmdFbGxpcHNlc05lZWRlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlcy5wdXNoKCcuLi4nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZXMucHVzaChwYWdlTnVtYmVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkgKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHBhZ2VzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2l2ZW4gdGhlIHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZSBvZiBwYWdpbmF0aW9uIGxpbmtzIFtpXSwgZmlndXJlIG91dCB3aGF0IHBhZ2UgbnVtYmVyIGNvcnJlc3BvbmRzIHRvIHRoYXQgcG9zaXRpb24uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gaVxyXG4gICAgICAgICAqIEBwYXJhbSBjdXJyZW50UGFnZVxyXG4gICAgICAgICAqIEBwYXJhbSBwYWdpbmF0aW9uUmFuZ2VcclxuICAgICAgICAgKiBAcGFyYW0gdG90YWxQYWdlc1xyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVBhZ2VOdW1iZXIoaSwgY3VycmVudFBhZ2UsIHBhZ2luYXRpb25SYW5nZSwgdG90YWxQYWdlcykge1xyXG4gICAgICAgICAgICB2YXIgaGFsZldheSA9IE1hdGguY2VpbChwYWdpbmF0aW9uUmFuZ2UvMik7XHJcbiAgICAgICAgICAgIGlmIChpID09PSBwYWdpbmF0aW9uUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0b3RhbFBhZ2VzO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhZ2luYXRpb25SYW5nZSA8IHRvdGFsUGFnZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0b3RhbFBhZ2VzIC0gaGFsZldheSA8IGN1cnJlbnRQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvdGFsUGFnZXMgLSBwYWdpbmF0aW9uUmFuZ2UgKyBpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYWxmV2F5IDwgY3VycmVudFBhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFBhZ2UgLSBoYWxmV2F5ICsgaTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZmlsdGVyIHNsaWNlcyB0aGUgY29sbGVjdGlvbiBpbnRvIHBhZ2VzIGJhc2VkIG9uIHRoZSBjdXJyZW50IHBhZ2UgbnVtYmVyIGFuZCBudW1iZXIgb2YgaXRlbXMgcGVyIHBhZ2UuXHJcbiAgICAgKiBAcGFyYW0gcGFnaW5hdGlvblNlcnZpY2VcclxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaXRlbXNQZXJQYWdlRmlsdGVyKHBhZ2luYXRpb25TZXJ2aWNlKSB7XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVtc1BlclBhZ2UsIHBhZ2luYXRpb25JZCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIChwYWdpbmF0aW9uSWQpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbklkID0gREVGQVVMVF9JRDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXBhZ2luYXRpb25TZXJ2aWNlLmlzUmVnaXN0ZXJlZChwYWdpbmF0aW9uSWQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAncGFnaW5hdGlvbiBkaXJlY3RpdmU6IHRoZSBpdGVtc1BlclBhZ2UgaWQgYXJndW1lbnQgKGlkOiAnICsgcGFnaW5hdGlvbklkICsgJykgZG9lcyBub3QgbWF0Y2ggYSByZWdpc3RlcmVkIHBhZ2luYXRpb24taWQuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZW5kO1xyXG4gICAgICAgICAgICB2YXIgc3RhcnQ7XHJcbiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zUGVyUGFnZSA9IHBhcnNlSW50KGl0ZW1zUGVyUGFnZSkgfHwgOTk5OTk5OTk5OTtcclxuICAgICAgICAgICAgICAgIGlmIChwYWdpbmF0aW9uU2VydmljZS5pc0FzeW5jTW9kZShwYWdpbmF0aW9uSWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IChwYWdpbmF0aW9uU2VydmljZS5nZXRDdXJyZW50UGFnZShwYWdpbmF0aW9uSWQpIC0gMSkgKiBpdGVtc1BlclBhZ2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBzdGFydCArIGl0ZW1zUGVyUGFnZTtcclxuICAgICAgICAgICAgICAgIHBhZ2luYXRpb25TZXJ2aWNlLnNldEl0ZW1zUGVyUGFnZShwYWdpbmF0aW9uSWQsIGl0ZW1zUGVyUGFnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2xpY2Uoc3RhcnQsIGVuZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIHNlcnZpY2UgYWxsb3dzIHRoZSB2YXJpb3VzIHBhcnRzIG9mIHRoZSBtb2R1bGUgdG8gY29tbXVuaWNhdGUgYW5kIHN0YXkgaW4gc3luYy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcGFnaW5hdGlvblNlcnZpY2UoKSB7XHJcblxyXG4gICAgICAgIHZhciBpbnN0YW5jZXMgPSB7fTtcclxuICAgICAgICB2YXIgbGFzdFJlZ2lzdGVyZWRJbnN0YW5jZTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24oaW5zdGFuY2VJZCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlc1tpbnN0YW5jZUlkXSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlc1tpbnN0YW5jZUlkXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBhc3luY01vZGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgbGFzdFJlZ2lzdGVyZWRJbnN0YW5jZSA9IGluc3RhbmNlSWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmlzUmVnaXN0ZXJlZCA9IGZ1bmN0aW9uKGluc3RhbmNlSWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgaW5zdGFuY2VzW2luc3RhbmNlSWRdICE9PSAndW5kZWZpbmVkJyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5nZXRMYXN0SW5zdGFuY2VJZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlZ2lzdGVyZWRJbnN0YW5jZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnNldEN1cnJlbnRQYWdlUGFyc2VyID0gZnVuY3Rpb24oaW5zdGFuY2VJZCwgdmFsLCBzY29wZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZXNbaW5zdGFuY2VJZF0uY3VycmVudFBhZ2VQYXJzZXIgPSB2YWw7XHJcbiAgICAgICAgICAgIGluc3RhbmNlc1tpbnN0YW5jZUlkXS5jb250ZXh0ID0gc2NvcGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnNldEN1cnJlbnRQYWdlID0gZnVuY3Rpb24oaW5zdGFuY2VJZCwgdmFsKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlc1tpbnN0YW5jZUlkXS5jdXJyZW50UGFnZVBhcnNlci5hc3NpZ24oaW5zdGFuY2VzW2luc3RhbmNlSWRdLmNvbnRleHQsIHZhbCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldEN1cnJlbnRQYWdlID0gZnVuY3Rpb24oaW5zdGFuY2VJZCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyc2VyID0gaW5zdGFuY2VzW2luc3RhbmNlSWRdLmN1cnJlbnRQYWdlUGFyc2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VyID8gcGFyc2VyKGluc3RhbmNlc1tpbnN0YW5jZUlkXS5jb250ZXh0KSA6IDE7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRJdGVtc1BlclBhZ2UgPSBmdW5jdGlvbihpbnN0YW5jZUlkLCB2YWwpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2VzW2luc3RhbmNlSWRdLml0ZW1zUGVyUGFnZSA9IHZhbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZ2V0SXRlbXNQZXJQYWdlID0gZnVuY3Rpb24oaW5zdGFuY2VJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VzW2luc3RhbmNlSWRdLml0ZW1zUGVyUGFnZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnNldENvbGxlY3Rpb25MZW5ndGggPSBmdW5jdGlvbihpbnN0YW5jZUlkLCB2YWwpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2VzW2luc3RhbmNlSWRdLmNvbGxlY3Rpb25MZW5ndGggPSB2YWw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldENvbGxlY3Rpb25MZW5ndGggPSBmdW5jdGlvbihpbnN0YW5jZUlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZXNbaW5zdGFuY2VJZF0uY29sbGVjdGlvbkxlbmd0aDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnNldEFzeW5jTW9kZVRydWUgPSBmdW5jdGlvbihpbnN0YW5jZUlkKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlc1tpbnN0YW5jZUlkXS5hc3luY01vZGUgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuaXNBc3luY01vZGUgPSBmdW5jdGlvbihpbnN0YW5jZUlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZXNbaW5zdGFuY2VJZF0uYXN5bmNNb2RlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBnbG9iYWwgY29uZmlndXJhdGlvbiBvZiB0aGUgdGVtcGxhdGUgcGF0aCB1c2VkIGJ5IHRoZSBkaXItcGFnaW5hdGlvbi1jb250cm9scyBkaXJlY3RpdmUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHBhZ2luYXRpb25UZW1wbGF0ZVByb3ZpZGVyKCkge1xyXG5cclxuICAgICAgICB2YXIgdGVtcGxhdGVQYXRoID0gJ2FuZ3VsYXJVdGlscy5kaXJlY3RpdmVzLmRpclBhZ2luYXRpb24udGVtcGxhdGUnO1xyXG5cclxuICAgICAgICB0aGlzLnNldFBhdGggPSBmdW5jdGlvbihwYXRoKSB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlUGF0aCA9IHBhdGg7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBnZXRQYXRoOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVQYXRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbihkLCBzLCBpZCkge1xyXG4gIHZhciBqcywgZmpzID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXTtcclxuICBpZiAoZC5nZXRFbGVtZW50QnlJZChpZCkpIHJldHVybjtcclxuICBqcyA9IGQuY3JlYXRlRWxlbWVudChzKTsganMuaWQgPSBpZDtcclxuICBqcy5zcmMgPSBcIi8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fR0Ivc2RrLmpzI3hmYm1sPTEmdmVyc2lvbj12Mi4zJmFwcElkPTk3NDEyODg3NTkzOTA5M1wiO1xyXG4gIGZqcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqcywgZmpzKTtcclxufShkb2N1bWVudCwgJ3NjcmlwdCcsICdmYWNlYm9vay1qc3NkaycpKTsiLCIoZnVuY3Rpb24oaSxzLG8sZyxyLGEsbSl7aVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J109cjtpW3JdPWlbcl18fGZ1bmN0aW9uKCl7XHJcbihpW3JdLnE9aVtyXS5xfHxbXSkucHVzaChhcmd1bWVudHMpfSxpW3JdLmw9MSpuZXcgRGF0ZSgpO2E9cy5jcmVhdGVFbGVtZW50KG8pLFxyXG5tPXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07YS5hc3luYz0xO2Euc3JjPWc7bS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLG0pXHJcbn0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnLy93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpzJywnZ2EnKTtcclxuXHJcbmdhKCdjcmVhdGUnLCAnVUEtNjQyNTc2MzAtMScsICdhdXRvJyk7XHJcbmdhKCdzZW5kJywgJ3BhZ2V2aWV3Jyk7IiwiLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3IgbXIuZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbnZhciBEZXRlY3RvciA9IHtcclxuXHJcblx0Y2FudmFzOiAhISB3aW5kb3cuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxyXG5cdHdlYmdsOiAoIGZ1bmN0aW9uICgpIHsgdHJ5IHsgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdjYW52YXMnICk7IHJldHVybiAhISB3aW5kb3cuV2ViR0xSZW5kZXJpbmdDb250ZXh0ICYmICggY2FudmFzLmdldENvbnRleHQoICd3ZWJnbCcgKSB8fCBjYW52YXMuZ2V0Q29udGV4dCggJ2V4cGVyaW1lbnRhbC13ZWJnbCcgKSApOyB9IGNhdGNoKCBlICkgeyByZXR1cm4gZmFsc2U7IH0gfSApKCksXHJcblx0d29ya2VyczogISEgd2luZG93LldvcmtlcixcclxuXHRmaWxlYXBpOiB3aW5kb3cuRmlsZSAmJiB3aW5kb3cuRmlsZVJlYWRlciAmJiB3aW5kb3cuRmlsZUxpc3QgJiYgd2luZG93LkJsb2IsXHJcblxyXG5cdGdldFdlYkdMRXJyb3JNZXNzYWdlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xyXG5cdFx0ZWxlbWVudC5pZCA9ICd3ZWJnbC1lcnJvci1tZXNzYWdlJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9ICdtb25vc3BhY2UnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5mb250U2l6ZSA9ICcxM3B4JztcclxuXHRcdGVsZW1lbnQuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9ICcjZmZmJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuY29sb3IgPSAnIzAwMCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMS41ZW0nO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS53aWR0aCA9ICc0MDBweCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLm1hcmdpbiA9ICc1ZW0gYXV0byAwJztcclxuXHJcblx0XHRpZiAoICEgdGhpcy53ZWJnbCApIHtcclxuXHJcblx0XHRcdGVsZW1lbnQuaW5uZXJIVE1MID0gd2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCA/IFtcclxuXHRcdFx0XHQnWW91ciBncmFwaGljcyBjYXJkIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+V2ViR0w8L2E+LjxiciAvPicsXHJcblx0XHRcdFx0J0ZpbmQgb3V0IGhvdyB0byBnZXQgaXQgPGEgaHJlZj1cImh0dHA6Ly9nZXQud2ViZ2wub3JnL1wiIHN0eWxlPVwiY29sb3I6IzAwMFwiPmhlcmU8L2E+LidcclxuXHRcdFx0XS5qb2luKCAnXFxuJyApIDogW1xyXG5cdFx0XHRcdCdZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc2VlbSB0byBzdXBwb3J0IDxhIGhyZWY9XCJodHRwOi8va2hyb25vcy5vcmcvd2ViZ2wvd2lraS9HZXR0aW5nX2FfV2ViR0xfSW1wbGVtZW50YXRpb25cIiBzdHlsZT1cImNvbG9yOiMwMDBcIj5XZWJHTDwvYT4uPGJyLz4nLFxyXG5cdFx0XHRcdCdGaW5kIG91dCBob3cgdG8gZ2V0IGl0IDxhIGhyZWY9XCJodHRwOi8vZ2V0LndlYmdsLm9yZy9cIiBzdHlsZT1cImNvbG9yOiMwMDBcIj5oZXJlPC9hPi4nXHJcblx0XHRcdF0uam9pbiggJ1xcbicgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGVsZW1lbnQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFkZEdldFdlYkdMTWVzc2FnZTogZnVuY3Rpb24gKCBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdHZhciBwYXJlbnQsIGlkLCBlbGVtZW50O1xyXG5cclxuXHRcdHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzIHx8IHt9O1xyXG5cclxuXHRcdHBhcmVudCA9IHBhcmFtZXRlcnMucGFyZW50ICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnBhcmVudCA6IGRvY3VtZW50LmJvZHk7XHJcblx0XHRpZCA9IHBhcmFtZXRlcnMuaWQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuaWQgOiAnb2xkaWUnO1xyXG5cclxuXHRcdGVsZW1lbnQgPSBEZXRlY3Rvci5nZXRXZWJHTEVycm9yTWVzc2FnZSgpO1xyXG5cdFx0ZWxlbWVudC5pZCA9IGlkO1xyXG5cclxuXHRcdHBhcmVudC5hcHBlbmRDaGlsZCggZWxlbWVudCApO1xyXG5cclxuXHR9XHJcblxyXG59OyIsIi8vIHRocmVlanMub3JnL2xpY2Vuc2VcclxuJ3VzZSBzdHJpY3QnO3ZhciBUSFJFRT17UkVWSVNJT046XCI3MVwifTtcIm9iamVjdFwiPT09dHlwZW9mIG1vZHVsZSYmKG1vZHVsZS5leHBvcnRzPVRIUkVFKTt2b2lkIDA9PT1NYXRoLnNpZ24mJihNYXRoLnNpZ249ZnVuY3Rpb24oYSl7cmV0dXJuIDA+YT8tMTowPGE/MTorYX0pO1RIUkVFLmxvZz1mdW5jdGlvbigpe2NvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsYXJndW1lbnRzKX07VEhSRUUud2Fybj1mdW5jdGlvbigpe2NvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLGFyZ3VtZW50cyl9O1RIUkVFLmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLGFyZ3VtZW50cyl9O1RIUkVFLk1PVVNFPXtMRUZUOjAsTUlERExFOjEsUklHSFQ6Mn07VEhSRUUuQ3VsbEZhY2VOb25lPTA7VEhSRUUuQ3VsbEZhY2VCYWNrPTE7VEhSRUUuQ3VsbEZhY2VGcm9udD0yO1RIUkVFLkN1bGxGYWNlRnJvbnRCYWNrPTM7VEhSRUUuRnJvbnRGYWNlRGlyZWN0aW9uQ1c9MDtcclxuVEhSRUUuRnJvbnRGYWNlRGlyZWN0aW9uQ0NXPTE7VEhSRUUuQmFzaWNTaGFkb3dNYXA9MDtUSFJFRS5QQ0ZTaGFkb3dNYXA9MTtUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwPTI7VEhSRUUuRnJvbnRTaWRlPTA7VEhSRUUuQmFja1NpZGU9MTtUSFJFRS5Eb3VibGVTaWRlPTI7VEhSRUUuTm9TaGFkaW5nPTA7VEhSRUUuRmxhdFNoYWRpbmc9MTtUSFJFRS5TbW9vdGhTaGFkaW5nPTI7VEhSRUUuTm9Db2xvcnM9MDtUSFJFRS5GYWNlQ29sb3JzPTE7VEhSRUUuVmVydGV4Q29sb3JzPTI7VEhSRUUuTm9CbGVuZGluZz0wO1RIUkVFLk5vcm1hbEJsZW5kaW5nPTE7VEhSRUUuQWRkaXRpdmVCbGVuZGluZz0yO1RIUkVFLlN1YnRyYWN0aXZlQmxlbmRpbmc9MztUSFJFRS5NdWx0aXBseUJsZW5kaW5nPTQ7VEhSRUUuQ3VzdG9tQmxlbmRpbmc9NTtUSFJFRS5BZGRFcXVhdGlvbj0xMDA7VEhSRUUuU3VidHJhY3RFcXVhdGlvbj0xMDE7VEhSRUUuUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb249MTAyO1xyXG5USFJFRS5NaW5FcXVhdGlvbj0xMDM7VEhSRUUuTWF4RXF1YXRpb249MTA0O1RIUkVFLlplcm9GYWN0b3I9MjAwO1RIUkVFLk9uZUZhY3Rvcj0yMDE7VEhSRUUuU3JjQ29sb3JGYWN0b3I9MjAyO1RIUkVFLk9uZU1pbnVzU3JjQ29sb3JGYWN0b3I9MjAzO1RIUkVFLlNyY0FscGhhRmFjdG9yPTIwNDtUSFJFRS5PbmVNaW51c1NyY0FscGhhRmFjdG9yPTIwNTtUSFJFRS5Ec3RBbHBoYUZhY3Rvcj0yMDY7VEhSRUUuT25lTWludXNEc3RBbHBoYUZhY3Rvcj0yMDc7VEhSRUUuRHN0Q29sb3JGYWN0b3I9MjA4O1RIUkVFLk9uZU1pbnVzRHN0Q29sb3JGYWN0b3I9MjA5O1RIUkVFLlNyY0FscGhhU2F0dXJhdGVGYWN0b3I9MjEwO1RIUkVFLk11bHRpcGx5T3BlcmF0aW9uPTA7VEhSRUUuTWl4T3BlcmF0aW9uPTE7VEhSRUUuQWRkT3BlcmF0aW9uPTI7VEhSRUUuVVZNYXBwaW5nPTMwMDtUSFJFRS5DdWJlUmVmbGVjdGlvbk1hcHBpbmc9MzAxO1RIUkVFLkN1YmVSZWZyYWN0aW9uTWFwcGluZz0zMDI7XHJcblRIUkVFLkVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nPTMwMztUSFJFRS5FcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZz0zMDQ7VEhSRUUuU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc9MzA1O1RIUkVFLlJlcGVhdFdyYXBwaW5nPTFFMztUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nPTEwMDE7VEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZz0xMDAyO1RIUkVFLk5lYXJlc3RGaWx0ZXI9MTAwMztUSFJFRS5OZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcj0xMDA0O1RIUkVFLk5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXI9MTAwNTtUSFJFRS5MaW5lYXJGaWx0ZXI9MTAwNjtUSFJFRS5MaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyPTEwMDc7VEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyPTEwMDg7VEhSRUUuVW5zaWduZWRCeXRlVHlwZT0xMDA5O1RIUkVFLkJ5dGVUeXBlPTEwMTA7VEhSRUUuU2hvcnRUeXBlPTEwMTE7XHJcblRIUkVFLlVuc2lnbmVkU2hvcnRUeXBlPTEwMTI7VEhSRUUuSW50VHlwZT0xMDEzO1RIUkVFLlVuc2lnbmVkSW50VHlwZT0xMDE0O1RIUkVFLkZsb2F0VHlwZT0xMDE1O1RIUkVFLkhhbGZGbG9hdFR5cGU9MTAyNTtUSFJFRS5VbnNpZ25lZFNob3J0NDQ0NFR5cGU9MTAxNjtUSFJFRS5VbnNpZ25lZFNob3J0NTU1MVR5cGU9MTAxNztUSFJFRS5VbnNpZ25lZFNob3J0NTY1VHlwZT0xMDE4O1RIUkVFLkFscGhhRm9ybWF0PTEwMTk7VEhSRUUuUkdCRm9ybWF0PTEwMjA7VEhSRUUuUkdCQUZvcm1hdD0xMDIxO1RIUkVFLkx1bWluYW5jZUZvcm1hdD0xMDIyO1RIUkVFLkx1bWluYW5jZUFscGhhRm9ybWF0PTEwMjM7VEhSRUUuUkdCRUZvcm1hdD1USFJFRS5SR0JBRm9ybWF0O1RIUkVFLlJHQl9TM1RDX0RYVDFfRm9ybWF0PTIwMDE7VEhSRUUuUkdCQV9TM1RDX0RYVDFfRm9ybWF0PTIwMDI7VEhSRUUuUkdCQV9TM1RDX0RYVDNfRm9ybWF0PTIwMDM7XHJcblRIUkVFLlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdD0yMDA0O1RIUkVFLlJHQl9QVlJUQ180QlBQVjFfRm9ybWF0PTIxMDA7VEhSRUUuUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQ9MjEwMTtUSFJFRS5SR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQ9MjEwMjtUSFJFRS5SR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQ9MjEwMztcclxuVEhSRUUuUHJvamVjdG9yPWZ1bmN0aW9uKCl7VEhSRUUuZXJyb3IoXCJUSFJFRS5Qcm9qZWN0b3IgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3JlbmRlcmVycy9Qcm9qZWN0b3IuanMuXCIpO3RoaXMucHJvamVjdFZlY3Rvcj1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5Qcm9qZWN0b3I6IC5wcm9qZWN0VmVjdG9yKCkgaXMgbm93IHZlY3Rvci5wcm9qZWN0KCkuXCIpO2EucHJvamVjdChiKX07dGhpcy51bnByb2plY3RWZWN0b3I9ZnVuY3Rpb24oYSxiKXtUSFJFRS53YXJuKFwiVEhSRUUuUHJvamVjdG9yOiAudW5wcm9qZWN0VmVjdG9yKCkgaXMgbm93IHZlY3Rvci51bnByb2plY3QoKS5cIik7YS51bnByb2plY3QoYil9O3RoaXMucGlja2luZ1JheT1mdW5jdGlvbihhLGIpe1RIUkVFLmVycm9yKFwiVEhSRUUuUHJvamVjdG9yOiAucGlja2luZ1JheSgpIGlzIG5vdyByYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSgpLlwiKX19O1xyXG5USFJFRS5DYW52YXNSZW5kZXJlcj1mdW5jdGlvbigpe1RIUkVFLmVycm9yKFwiVEhSRUUuQ2FudmFzUmVuZGVyZXIgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3JlbmRlcmVycy9DYW52YXNSZW5kZXJlci5qc1wiKTt0aGlzLmRvbUVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTt0aGlzLmNsZWFyPWZ1bmN0aW9uKCl7fTt0aGlzLnJlbmRlcj1mdW5jdGlvbigpe307dGhpcy5zZXRDbGVhckNvbG9yPWZ1bmN0aW9uKCl7fTt0aGlzLnNldFNpemU9ZnVuY3Rpb24oKXt9fTtUSFJFRS5Db2xvcj1mdW5jdGlvbihhKXtyZXR1cm4gMz09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5zZXRSR0IoYXJndW1lbnRzWzBdLGFyZ3VtZW50c1sxXSxhcmd1bWVudHNbMl0pOnRoaXMuc2V0KGEpfTtcclxuVEhSRUUuQ29sb3IucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5Db2xvcixyOjEsZzoxLGI6MSxzZXQ6ZnVuY3Rpb24oYSl7YSBpbnN0YW5jZW9mIFRIUkVFLkNvbG9yP3RoaXMuY29weShhKTpcIm51bWJlclwiPT09dHlwZW9mIGE/dGhpcy5zZXRIZXgoYSk6XCJzdHJpbmdcIj09PXR5cGVvZiBhJiZ0aGlzLnNldFN0eWxlKGEpO3JldHVybiB0aGlzfSxzZXRIZXg6ZnVuY3Rpb24oYSl7YT1NYXRoLmZsb29yKGEpO3RoaXMucj0oYT4+MTYmMjU1KS8yNTU7dGhpcy5nPShhPj44JjI1NSkvMjU1O3RoaXMuYj0oYSYyNTUpLzI1NTtyZXR1cm4gdGhpc30sc2V0UkdCOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnI9YTt0aGlzLmc9Yjt0aGlzLmI9YztyZXR1cm4gdGhpc30sc2V0SFNMOmZ1bmN0aW9uKGEsYixjKXtpZigwPT09Yil0aGlzLnI9dGhpcy5nPXRoaXMuYj1jO2Vsc2V7dmFyIGQ9ZnVuY3Rpb24oYSxiLGMpezA+YyYmKGMrPTEpOzE8YyYmKGMtPTEpO3JldHVybiBjPDEvNj9hKzYqKGItYSkqXHJcbmM6LjU+Yz9iOmM8Mi8zP2ErNiooYi1hKSooMi8zLWMpOmF9O2I9LjU+PWM/YyooMStiKTpjK2ItYypiO2M9MipjLWI7dGhpcy5yPWQoYyxiLGErMS8zKTt0aGlzLmc9ZChjLGIsYSk7dGhpcy5iPWQoYyxiLGEtMS8zKX1yZXR1cm4gdGhpc30sc2V0U3R5bGU6ZnVuY3Rpb24oYSl7aWYoL15yZ2JcXCgoXFxkKyksID8oXFxkKyksID8oXFxkKylcXCkkL2kudGVzdChhKSlyZXR1cm4gYT0vXnJnYlxcKChcXGQrKSwgPyhcXGQrKSwgPyhcXGQrKVxcKSQvaS5leGVjKGEpLHRoaXMucj1NYXRoLm1pbigyNTUscGFyc2VJbnQoYVsxXSwxMCkpLzI1NSx0aGlzLmc9TWF0aC5taW4oMjU1LHBhcnNlSW50KGFbMl0sMTApKS8yNTUsdGhpcy5iPU1hdGgubWluKDI1NSxwYXJzZUludChhWzNdLDEwKSkvMjU1LHRoaXM7aWYoL15yZ2JcXCgoXFxkKylcXCUsID8oXFxkKylcXCUsID8oXFxkKylcXCVcXCkkL2kudGVzdChhKSlyZXR1cm4gYT0vXnJnYlxcKChcXGQrKVxcJSwgPyhcXGQrKVxcJSwgPyhcXGQrKVxcJVxcKSQvaS5leGVjKGEpLHRoaXMucj1cclxuTWF0aC5taW4oMTAwLHBhcnNlSW50KGFbMV0sMTApKS8xMDAsdGhpcy5nPU1hdGgubWluKDEwMCxwYXJzZUludChhWzJdLDEwKSkvMTAwLHRoaXMuYj1NYXRoLm1pbigxMDAscGFyc2VJbnQoYVszXSwxMCkpLzEwMCx0aGlzO2lmKC9eXFwjKFswLTlhLWZdezZ9KSQvaS50ZXN0KGEpKXJldHVybiBhPS9eXFwjKFswLTlhLWZdezZ9KSQvaS5leGVjKGEpLHRoaXMuc2V0SGV4KHBhcnNlSW50KGFbMV0sMTYpKSx0aGlzO2lmKC9eXFwjKFswLTlhLWZdKShbMC05YS1mXSkoWzAtOWEtZl0pJC9pLnRlc3QoYSkpcmV0dXJuIGE9L15cXCMoWzAtOWEtZl0pKFswLTlhLWZdKShbMC05YS1mXSkkL2kuZXhlYyhhKSx0aGlzLnNldEhleChwYXJzZUludChhWzFdK2FbMV0rYVsyXSthWzJdK2FbM10rYVszXSwxNikpLHRoaXM7aWYoL14oXFx3KykkL2kudGVzdChhKSlyZXR1cm4gdGhpcy5zZXRIZXgoVEhSRUUuQ29sb3JLZXl3b3Jkc1thXSksdGhpc30sY29weTpmdW5jdGlvbihhKXt0aGlzLnI9YS5yO3RoaXMuZz1cclxuYS5nO3RoaXMuYj1hLmI7cmV0dXJuIHRoaXN9LGNvcHlHYW1tYVRvTGluZWFyOmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9Mik7dGhpcy5yPU1hdGgucG93KGEucixiKTt0aGlzLmc9TWF0aC5wb3coYS5nLGIpO3RoaXMuYj1NYXRoLnBvdyhhLmIsYik7cmV0dXJuIHRoaXN9LGNvcHlMaW5lYXJUb0dhbW1hOmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9Mik7dmFyIGM9MDxiPzEvYjoxO3RoaXMucj1NYXRoLnBvdyhhLnIsYyk7dGhpcy5nPU1hdGgucG93KGEuZyxjKTt0aGlzLmI9TWF0aC5wb3coYS5iLGMpO3JldHVybiB0aGlzfSxjb252ZXJ0R2FtbWFUb0xpbmVhcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMucixiPXRoaXMuZyxjPXRoaXMuYjt0aGlzLnI9YSphO3RoaXMuZz1iKmI7dGhpcy5iPWMqYztyZXR1cm4gdGhpc30sY29udmVydExpbmVhclRvR2FtbWE6ZnVuY3Rpb24oKXt0aGlzLnI9TWF0aC5zcXJ0KHRoaXMucik7dGhpcy5nPU1hdGguc3FydCh0aGlzLmcpO3RoaXMuYj1cclxuTWF0aC5zcXJ0KHRoaXMuYik7cmV0dXJuIHRoaXN9LGdldEhleDpmdW5jdGlvbigpe3JldHVybiAyNTUqdGhpcy5yPDwxNl4yNTUqdGhpcy5nPDw4XjI1NSp0aGlzLmI8PDB9LGdldEhleFN0cmluZzpmdW5jdGlvbigpe3JldHVybihcIjAwMDAwMFwiK3RoaXMuZ2V0SGV4KCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNil9LGdldEhTTDpmdW5jdGlvbihhKXthPWF8fHtoOjAsczowLGw6MH07dmFyIGI9dGhpcy5yLGM9dGhpcy5nLGQ9dGhpcy5iLGU9TWF0aC5tYXgoYixjLGQpLGY9TWF0aC5taW4oYixjLGQpLGcsaD0oZitlKS8yO2lmKGY9PT1lKWY9Zz0wO2Vsc2V7dmFyIGs9ZS1mLGY9LjU+PWg/ay8oZStmKTprLygyLWUtZik7c3dpdGNoKGUpe2Nhc2UgYjpnPShjLWQpL2srKGM8ZD82OjApO2JyZWFrO2Nhc2UgYzpnPShkLWIpL2srMjticmVhaztjYXNlIGQ6Zz0oYi1jKS9rKzR9Zy89Nn1hLmg9ZzthLnM9ZjthLmw9aDtyZXR1cm4gYX0sZ2V0U3R5bGU6ZnVuY3Rpb24oKXtyZXR1cm5cInJnYihcIitcclxuKDI1NSp0aGlzLnJ8MCkrXCIsXCIrKDI1NSp0aGlzLmd8MCkrXCIsXCIrKDI1NSp0aGlzLmJ8MCkrXCIpXCJ9LG9mZnNldEhTTDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5nZXRIU0woKTtkLmgrPWE7ZC5zKz1iO2QubCs9Yzt0aGlzLnNldEhTTChkLmgsZC5zLGQubCk7cmV0dXJuIHRoaXN9LGFkZDpmdW5jdGlvbihhKXt0aGlzLnIrPWEucjt0aGlzLmcrPWEuZzt0aGlzLmIrPWEuYjtyZXR1cm4gdGhpc30sYWRkQ29sb3JzOmZ1bmN0aW9uKGEsYil7dGhpcy5yPWEucitiLnI7dGhpcy5nPWEuZytiLmc7dGhpcy5iPWEuYitiLmI7cmV0dXJuIHRoaXN9LGFkZFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLnIrPWE7dGhpcy5nKz1hO3RoaXMuYis9YTtyZXR1cm4gdGhpc30sbXVsdGlwbHk6ZnVuY3Rpb24oYSl7dGhpcy5yKj1hLnI7dGhpcy5nKj1hLmc7dGhpcy5iKj1hLmI7cmV0dXJuIHRoaXN9LG11bHRpcGx5U2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMucio9YTt0aGlzLmcqPWE7dGhpcy5iKj1hO1xyXG5yZXR1cm4gdGhpc30sbGVycDpmdW5jdGlvbihhLGIpe3RoaXMucis9KGEuci10aGlzLnIpKmI7dGhpcy5nKz0oYS5nLXRoaXMuZykqYjt0aGlzLmIrPShhLmItdGhpcy5iKSpiO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucj09PXRoaXMuciYmYS5nPT09dGhpcy5nJiZhLmI9PT10aGlzLmJ9LGZyb21BcnJheTpmdW5jdGlvbihhKXt0aGlzLnI9YVswXTt0aGlzLmc9YVsxXTt0aGlzLmI9YVsyXTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMucjthW2IrMV09dGhpcy5nO2FbYisyXT10aGlzLmI7cmV0dXJuIGF9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBUSFJFRS5Db2xvcikuc2V0UkdCKHRoaXMucix0aGlzLmcsdGhpcy5iKX19O1xyXG5USFJFRS5Db2xvcktleXdvcmRzPXthbGljZWJsdWU6MTU3OTIzODMsYW50aXF1ZXdoaXRlOjE2NDQ0Mzc1LGFxdWE6NjU1MzUsYXF1YW1hcmluZTo4Mzg4NTY0LGF6dXJlOjE1Nzk0MTc1LGJlaWdlOjE2MTE5MjYwLGJpc3F1ZToxNjc3MDI0NCxibGFjazowLGJsYW5jaGVkYWxtb25kOjE2NzcyMDQ1LGJsdWU6MjU1LGJsdWV2aW9sZXQ6OTA1NTIwMixicm93bjoxMDgyNDIzNCxidXJseXdvb2Q6MTQ1OTYyMzEsY2FkZXRibHVlOjYyNjY1MjgsY2hhcnRyZXVzZTo4Mzg4MzUyLGNob2NvbGF0ZToxMzc4OTQ3MCxjb3JhbDoxNjc0NDI3Mixjb3JuZmxvd2VyYmx1ZTo2NTkxOTgxLGNvcm5zaWxrOjE2Nzc1Mzg4LGNyaW1zb246MTQ0MjMxMDAsY3lhbjo2NTUzNSxkYXJrYmx1ZToxMzksZGFya2N5YW46MzU3MjMsZGFya2dvbGRlbnJvZDoxMjA5MjkzOSxkYXJrZ3JheToxMTExOTAxNyxkYXJrZ3JlZW46MjU2MDAsZGFya2dyZXk6MTExMTkwMTcsZGFya2toYWtpOjEyNDMzMjU5LGRhcmttYWdlbnRhOjkxMDk2NDMsXHJcbmRhcmtvbGl2ZWdyZWVuOjU1OTc5OTksZGFya29yYW5nZToxNjc0NzUyMCxkYXJrb3JjaGlkOjEwMDQwMDEyLGRhcmtyZWQ6OTEwOTUwNCxkYXJrc2FsbW9uOjE1MzA4NDEwLGRhcmtzZWFncmVlbjo5NDE5OTE5LGRhcmtzbGF0ZWJsdWU6NDczNDM0NyxkYXJrc2xhdGVncmF5OjMxMDA0OTUsZGFya3NsYXRlZ3JleTozMTAwNDk1LGRhcmt0dXJxdW9pc2U6NTI5NDUsZGFya3Zpb2xldDo5Njk5NTM5LGRlZXBwaW5rOjE2NzE2OTQ3LGRlZXBza3libHVlOjQ5MTUxLGRpbWdyYXk6NjkwODI2NSxkaW1ncmV5OjY5MDgyNjUsZG9kZ2VyYmx1ZToyMDAzMTk5LGZpcmVicmljazoxMTY3NDE0NixmbG9yYWx3aGl0ZToxNjc3NTkyMCxmb3Jlc3RncmVlbjoyMjYzODQyLGZ1Y2hzaWE6MTY3MTE5MzUsZ2FpbnNib3JvOjE0NDc0NDYwLGdob3N0d2hpdGU6MTYzMTY2NzEsZ29sZDoxNjc2NjcyMCxnb2xkZW5yb2Q6MTQzMjkxMjAsZ3JheTo4NDIxNTA0LGdyZWVuOjMyNzY4LGdyZWVueWVsbG93OjExNDAzMDU1LFxyXG5ncmV5Ojg0MjE1MDQsaG9uZXlkZXc6MTU3OTQxNjAsaG90cGluazoxNjczODc0MCxpbmRpYW5yZWQ6MTM0NTg1MjQsaW5kaWdvOjQ5MTUzMzAsaXZvcnk6MTY3NzcyMDAsa2hha2k6MTU3ODc2NjAsbGF2ZW5kZXI6MTUxMzI0MTAsbGF2ZW5kZXJibHVzaDoxNjc3MzM2NSxsYXduZ3JlZW46ODE5MDk3NixsZW1vbmNoaWZmb246MTY3NzU4ODUsbGlnaHRibHVlOjExMzkzMjU0LGxpZ2h0Y29yYWw6MTU3NjE1MzYsbGlnaHRjeWFuOjE0NzQ1NTk5LGxpZ2h0Z29sZGVucm9keWVsbG93OjE2NDQ4MjEwLGxpZ2h0Z3JheToxMzg4MjMyMyxsaWdodGdyZWVuOjk0OTgyNTYsbGlnaHRncmV5OjEzODgyMzIzLGxpZ2h0cGluazoxNjc1ODQ2NSxsaWdodHNhbG1vbjoxNjc1Mjc2MixsaWdodHNlYWdyZWVuOjIxNDI4OTAsbGlnaHRza3libHVlOjg5MDAzNDYsbGlnaHRzbGF0ZWdyYXk6NzgzMzc1MyxsaWdodHNsYXRlZ3JleTo3ODMzNzUzLGxpZ2h0c3RlZWxibHVlOjExNTg0NzM0LGxpZ2h0eWVsbG93OjE2Nzc3MTg0LFxyXG5saW1lOjY1MjgwLGxpbWVncmVlbjozMzI5MzMwLGxpbmVuOjE2NDQ1NjcwLG1hZ2VudGE6MTY3MTE5MzUsbWFyb29uOjgzODg2MDgsbWVkaXVtYXF1YW1hcmluZTo2NzM3MzIyLG1lZGl1bWJsdWU6MjA1LG1lZGl1bW9yY2hpZDoxMjIxMTY2NyxtZWRpdW1wdXJwbGU6OTY2MjY4MyxtZWRpdW1zZWFncmVlbjozOTc4MDk3LG1lZGl1bXNsYXRlYmx1ZTo4MDg3NzkwLG1lZGl1bXNwcmluZ2dyZWVuOjY0MTU0LG1lZGl1bXR1cnF1b2lzZTo0NzcyMzAwLG1lZGl1bXZpb2xldHJlZDoxMzA0NzE3MyxtaWRuaWdodGJsdWU6MTY0NDkxMixtaW50Y3JlYW06MTYxMjE4NTAsbWlzdHlyb3NlOjE2NzcwMjczLG1vY2Nhc2luOjE2NzcwMjI5LG5hdmFqb3doaXRlOjE2NzY4Njg1LG5hdnk6MTI4LG9sZGxhY2U6MTY2NDM1NTgsb2xpdmU6ODQyMTM3NixvbGl2ZWRyYWI6NzA0ODczOSxvcmFuZ2U6MTY3NTM5MjAsb3JhbmdlcmVkOjE2NzI5MzQ0LG9yY2hpZDoxNDMxNTczNCxwYWxlZ29sZGVucm9kOjE1NjU3MTMwLFxyXG5wYWxlZ3JlZW46MTAwMjU4ODAscGFsZXR1cnF1b2lzZToxMTUyOTk2NixwYWxldmlvbGV0cmVkOjE0MzgxMjAzLHBhcGF5YXdoaXA6MTY3NzMwNzcscGVhY2hwdWZmOjE2NzY3NjczLHBlcnU6MTM0Njg5OTEscGluazoxNjc2MTAzNSxwbHVtOjE0NTI0NjM3LHBvd2RlcmJsdWU6MTE1OTE5MTAscHVycGxlOjgzODg3MzYscmVkOjE2NzExNjgwLHJvc3licm93bjoxMjM1NzUxOSxyb3lhbGJsdWU6NDI4Njk0NSxzYWRkbGVicm93bjo5MTI3MTg3LHNhbG1vbjoxNjQxNjg4MixzYW5keWJyb3duOjE2MDMyODY0LHNlYWdyZWVuOjMwNTAzMjcsc2Vhc2hlbGw6MTY3NzQ2Mzgsc2llbm5hOjEwNTA2Nzk3LHNpbHZlcjoxMjYzMjI1Nixza3libHVlOjg5MDAzMzEsc2xhdGVibHVlOjY5NzAwNjEsc2xhdGVncmF5OjczNzI5NDQsc2xhdGVncmV5OjczNzI5NDQsc25vdzoxNjc3NTkzMCxzcHJpbmdncmVlbjo2NTQwNyxzdGVlbGJsdWU6NDYyMDk4MCx0YW46MTM4MDg3ODAsdGVhbDozMjg5Nix0aGlzdGxlOjE0MjA0ODg4LFxyXG50b21hdG86MTY3MzcwOTUsdHVycXVvaXNlOjQyNTE4NTYsdmlvbGV0OjE1NjMxMDg2LHdoZWF0OjE2MTEzMzMxLHdoaXRlOjE2Nzc3MjE1LHdoaXRlc21va2U6MTYxMTkyODUseWVsbG93OjE2Nzc2OTYwLHllbGxvd2dyZWVuOjEwMTQ1MDc0fTtUSFJFRS5RdWF0ZXJuaW9uPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX3g9YXx8MDt0aGlzLl95PWJ8fDA7dGhpcy5fej1jfHwwO3RoaXMuX3c9dm9pZCAwIT09ZD9kOjF9O1xyXG5USFJFRS5RdWF0ZXJuaW9uLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuUXVhdGVybmlvbixfeDowLF95OjAsX3o6MCxfdzowLGdldCB4KCl7cmV0dXJuIHRoaXMuX3h9LHNldCB4KGEpe3RoaXMuX3g9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sZ2V0IHkoKXtyZXR1cm4gdGhpcy5feX0sc2V0IHkoYSl7dGhpcy5feT1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfSxnZXQgeigpe3JldHVybiB0aGlzLl96fSxzZXQgeihhKXt0aGlzLl96PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9LGdldCB3KCl7cmV0dXJuIHRoaXMuX3d9LHNldCB3KGEpe3RoaXMuX3c9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sc2V0OmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX3g9YTt0aGlzLl95PWI7dGhpcy5fej1jO3RoaXMuX3c9ZDt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sY29weTpmdW5jdGlvbihhKXt0aGlzLl94PWEueDt0aGlzLl95PWEueTt0aGlzLl96PWEuejtcclxudGhpcy5fdz1hLnc7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21FdWxlcjpmdW5jdGlvbihhLGIpe2lmKCExPT09YSBpbnN0YW5jZW9mIFRIUkVFLkV1bGVyKXRocm93IEVycm9yKFwiVEhSRUUuUXVhdGVybmlvbjogLnNldEZyb21FdWxlcigpIG5vdyBleHBlY3RzIGEgRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci5cIik7dmFyIGM9TWF0aC5jb3MoYS5feC8yKSxkPU1hdGguY29zKGEuX3kvMiksZT1NYXRoLmNvcyhhLl96LzIpLGY9TWF0aC5zaW4oYS5feC8yKSxnPU1hdGguc2luKGEuX3kvMiksaD1NYXRoLnNpbihhLl96LzIpO1wiWFlaXCI9PT1hLm9yZGVyPyh0aGlzLl94PWYqZCplK2MqZypoLHRoaXMuX3k9YypnKmUtZipkKmgsdGhpcy5fej1jKmQqaCtmKmcqZSx0aGlzLl93PWMqZCplLWYqZypoKTpcIllYWlwiPT09YS5vcmRlcj8odGhpcy5feD1mKmQqZStjKmcqaCx0aGlzLl95PWMqZyplLWYqZCpoLHRoaXMuX3o9XHJcbmMqZCpoLWYqZyplLHRoaXMuX3c9YypkKmUrZipnKmgpOlwiWlhZXCI9PT1hLm9yZGVyPyh0aGlzLl94PWYqZCplLWMqZypoLHRoaXMuX3k9YypnKmUrZipkKmgsdGhpcy5fej1jKmQqaCtmKmcqZSx0aGlzLl93PWMqZCplLWYqZypoKTpcIlpZWFwiPT09YS5vcmRlcj8odGhpcy5feD1mKmQqZS1jKmcqaCx0aGlzLl95PWMqZyplK2YqZCpoLHRoaXMuX3o9YypkKmgtZipnKmUsdGhpcy5fdz1jKmQqZStmKmcqaCk6XCJZWlhcIj09PWEub3JkZXI/KHRoaXMuX3g9ZipkKmUrYypnKmgsdGhpcy5feT1jKmcqZStmKmQqaCx0aGlzLl96PWMqZCpoLWYqZyplLHRoaXMuX3c9YypkKmUtZipnKmgpOlwiWFpZXCI9PT1hLm9yZGVyJiYodGhpcy5feD1mKmQqZS1jKmcqaCx0aGlzLl95PWMqZyplLWYqZCpoLHRoaXMuX3o9YypkKmgrZipnKmUsdGhpcy5fdz1jKmQqZStmKmcqaCk7aWYoITEhPT1iKXRoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxzZXRGcm9tQXhpc0FuZ2xlOmZ1bmN0aW9uKGEsXHJcbmIpe3ZhciBjPWIvMixkPU1hdGguc2luKGMpO3RoaXMuX3g9YS54KmQ7dGhpcy5feT1hLnkqZDt0aGlzLl96PWEueipkO3RoaXMuX3c9TWF0aC5jb3MoYyk7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYj1hLmVsZW1lbnRzLGM9YlswXTthPWJbNF07dmFyIGQ9Yls4XSxlPWJbMV0sZj1iWzVdLGc9Yls5XSxoPWJbMl0saz1iWzZdLGI9YlsxMF0sbD1jK2YrYjswPGw/KGM9LjUvTWF0aC5zcXJ0KGwrMSksdGhpcy5fdz0uMjUvYyx0aGlzLl94PShrLWcpKmMsdGhpcy5feT0oZC1oKSpjLHRoaXMuX3o9KGUtYSkqYyk6Yz5mJiZjPmI/KGM9MipNYXRoLnNxcnQoMStjLWYtYiksdGhpcy5fdz0oay1nKS9jLHRoaXMuX3g9LjI1KmMsdGhpcy5feT0oYStlKS9jLHRoaXMuX3o9KGQraCkvYyk6Zj5iPyhjPTIqTWF0aC5zcXJ0KDErZi1jLWIpLHRoaXMuX3c9KGQtaCkvYyx0aGlzLl94PShhK2UpL2MsdGhpcy5feT1cclxuLjI1KmMsdGhpcy5fej0oZytrKS9jKTooYz0yKk1hdGguc3FydCgxK2ItYy1mKSx0aGlzLl93PShlLWEpL2MsdGhpcy5feD0oZCtoKS9jLHRoaXMuX3k9KGcraykvYyx0aGlzLl96PS4yNSpjKTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbVVuaXRWZWN0b3JzOmZ1bmN0aW9uKCl7dmFyIGEsYjtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVmVjdG9yMyk7Yj1jLmRvdChkKSsxOzFFLTY+Yj8oYj0wLE1hdGguYWJzKGMueCk+TWF0aC5hYnMoYy56KT9hLnNldCgtYy55LGMueCwwKTphLnNldCgwLC1jLnosYy55KSk6YS5jcm9zc1ZlY3RvcnMoYyxkKTt0aGlzLl94PWEueDt0aGlzLl95PWEueTt0aGlzLl96PWEuejt0aGlzLl93PWI7dGhpcy5ub3JtYWxpemUoKTtyZXR1cm4gdGhpc319KCksaW52ZXJzZTpmdW5jdGlvbigpe3RoaXMuY29uanVnYXRlKCkubm9ybWFsaXplKCk7cmV0dXJuIHRoaXN9LGNvbmp1Z2F0ZTpmdW5jdGlvbigpe3RoaXMuX3gqPVxyXG4tMTt0aGlzLl95Kj0tMTt0aGlzLl96Kj0tMTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sZG90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl94KmEuX3grdGhpcy5feSphLl95K3RoaXMuX3oqYS5feit0aGlzLl93KmEuX3d9LGxlbmd0aFNxOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3gqdGhpcy5feCt0aGlzLl95KnRoaXMuX3krdGhpcy5feip0aGlzLl96K3RoaXMuX3cqdGhpcy5fd30sbGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguc3FydCh0aGlzLl94KnRoaXMuX3grdGhpcy5feSp0aGlzLl95K3RoaXMuX3oqdGhpcy5feit0aGlzLl93KnRoaXMuX3cpfSxub3JtYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmxlbmd0aCgpOzA9PT1hPyh0aGlzLl96PXRoaXMuX3k9dGhpcy5feD0wLHRoaXMuX3c9MSk6KGE9MS9hLHRoaXMuX3gqPWEsdGhpcy5feSo9YSx0aGlzLl96Kj1hLHRoaXMuX3cqPWEpO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxcclxubXVsdGlwbHk6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdm9pZCAwIT09Yj8oVEhSRUUud2FybihcIlRIUkVFLlF1YXRlcm5pb246IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5UXVhdGVybmlvbnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoYSxiKSk6dGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKHRoaXMsYSl9LG11bHRpcGx5UXVhdGVybmlvbnM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLl94LGQ9YS5feSxlPWEuX3osZj1hLl93LGc9Yi5feCxoPWIuX3ksaz1iLl96LGw9Yi5fdzt0aGlzLl94PWMqbCtmKmcrZCprLWUqaDt0aGlzLl95PWQqbCtmKmgrZSpnLWMqazt0aGlzLl96PWUqbCtmKmsrYypoLWQqZzt0aGlzLl93PWYqbC1jKmctZCpoLWUqazt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sbXVsdGlwbHlWZWN0b3IzOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGlzIG5vdyB2ZWN0b3IuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICkgaW5zdGVhZC5cIik7XHJcbnJldHVybiBhLmFwcGx5UXVhdGVybmlvbih0aGlzKX0sc2xlcnA6ZnVuY3Rpb24oYSxiKXtpZigwPT09YilyZXR1cm4gdGhpcztpZigxPT09YilyZXR1cm4gdGhpcy5jb3B5KGEpO3ZhciBjPXRoaXMuX3gsZD10aGlzLl95LGU9dGhpcy5feixmPXRoaXMuX3csZz1mKmEuX3crYyphLl94K2QqYS5feStlKmEuX3o7MD5nPyh0aGlzLl93PS1hLl93LHRoaXMuX3g9LWEuX3gsdGhpcy5feT0tYS5feSx0aGlzLl96PS1hLl96LGc9LWcpOnRoaXMuY29weShhKTtpZigxPD1nKXJldHVybiB0aGlzLl93PWYsdGhpcy5feD1jLHRoaXMuX3k9ZCx0aGlzLl96PWUsdGhpczt2YXIgaD1NYXRoLmFjb3MoZyksaz1NYXRoLnNxcnQoMS1nKmcpO2lmKC4wMDE+TWF0aC5hYnMoaykpcmV0dXJuIHRoaXMuX3c9LjUqKGYrdGhpcy5fdyksdGhpcy5feD0uNSooYyt0aGlzLl94KSx0aGlzLl95PS41KihkK3RoaXMuX3kpLHRoaXMuX3o9LjUqKGUrdGhpcy5feiksdGhpcztnPU1hdGguc2luKCgxLWIpKmgpL2s7aD1cclxuTWF0aC5zaW4oYipoKS9rO3RoaXMuX3c9ZipnK3RoaXMuX3cqaDt0aGlzLl94PWMqZyt0aGlzLl94Kmg7dGhpcy5feT1kKmcrdGhpcy5feSpoO3RoaXMuX3o9ZSpnK3RoaXMuX3oqaDt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLl94PT09dGhpcy5feCYmYS5feT09PXRoaXMuX3kmJmEuX3o9PT10aGlzLl96JiZhLl93PT09dGhpcy5fd30sZnJvbUFycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7dGhpcy5feD1hW2JdO3RoaXMuX3k9YVtiKzFdO3RoaXMuX3o9YVtiKzJdO3RoaXMuX3c9YVtiKzNdO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy5feDthW2IrMV09dGhpcy5feTthW2IrMl09dGhpcy5fejthW2IrM109dGhpcy5fdztyZXR1cm4gYX0sb25DaGFuZ2U6ZnVuY3Rpb24oYSl7dGhpcy5vbkNoYW5nZUNhbGxiYWNrPVxyXG5hO3JldHVybiB0aGlzfSxvbkNoYW5nZUNhbGxiYWNrOmZ1bmN0aW9uKCl7fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuUXVhdGVybmlvbih0aGlzLl94LHRoaXMuX3ksdGhpcy5feix0aGlzLl93KX19O1RIUkVFLlF1YXRlcm5pb24uc2xlcnA9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIGMuY29weShhKS5zbGVycChiLGQpfTtUSFJFRS5WZWN0b3IyPWZ1bmN0aW9uKGEsYil7dGhpcy54PWF8fDA7dGhpcy55PWJ8fDB9O1xyXG5USFJFRS5WZWN0b3IyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuVmVjdG9yMixzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLng9YTt0aGlzLnk9YjtyZXR1cm4gdGhpc30sc2V0WDpmdW5jdGlvbihhKXt0aGlzLng9YTtyZXR1cm4gdGhpc30sc2V0WTpmdW5jdGlvbihhKXt0aGlzLnk9YTtyZXR1cm4gdGhpc30sc2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMDp0aGlzLng9YjticmVhaztjYXNlIDE6dGhpcy55PWI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fX0sZ2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuIHRoaXMueDtjYXNlIDE6cmV0dXJuIHRoaXMueTtkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIithKTt9fSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMueD1hLng7dGhpcy55PWEueTtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsXHJcbmIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIFRIUkVFLndhcm4oXCJUSFJFRS5WZWN0b3IyOiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuYWRkVmVjdG9ycyhhLGIpO3RoaXMueCs9YS54O3RoaXMueSs9YS55O3JldHVybiB0aGlzfSxhZGRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54Kz1hO3RoaXMueSs9YTtyZXR1cm4gdGhpc30sYWRkVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngrYi54O3RoaXMueT1hLnkrYi55O3JldHVybiB0aGlzfSxzdWI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yMjogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLnN1YlZlY3RvcnMoYSxiKTt0aGlzLngtPWEueDt0aGlzLnktPWEueTtyZXR1cm4gdGhpc30sXHJcbnN1YlNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngtPWE7dGhpcy55LT1hO3JldHVybiB0aGlzfSxzdWJWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueC1iLng7dGhpcy55PWEueS1iLnk7cmV0dXJuIHRoaXN9LG11bHRpcGx5OmZ1bmN0aW9uKGEpe3RoaXMueCo9YS54O3RoaXMueSo9YS55O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngqPWE7dGhpcy55Kj1hO3JldHVybiB0aGlzfSxkaXZpZGU6ZnVuY3Rpb24oYSl7dGhpcy54Lz1hLng7dGhpcy55Lz1hLnk7cmV0dXJuIHRoaXN9LGRpdmlkZVNjYWxhcjpmdW5jdGlvbihhKXswIT09YT8oYT0xL2EsdGhpcy54Kj1hLHRoaXMueSo9YSk6dGhpcy55PXRoaXMueD0wO3JldHVybiB0aGlzfSxtaW46ZnVuY3Rpb24oYSl7dGhpcy54PmEueCYmKHRoaXMueD1hLngpO3RoaXMueT5hLnkmJih0aGlzLnk9YS55KTtyZXR1cm4gdGhpc30sbWF4OmZ1bmN0aW9uKGEpe3RoaXMueDxhLngmJih0aGlzLng9YS54KTtcclxudGhpcy55PGEueSYmKHRoaXMueT1hLnkpO3JldHVybiB0aGlzfSxjbGFtcDpmdW5jdGlvbihhLGIpe3RoaXMueDxhLng/dGhpcy54PWEueDp0aGlzLng+Yi54JiYodGhpcy54PWIueCk7dGhpcy55PGEueT90aGlzLnk9YS55OnRoaXMueT5iLnkmJih0aGlzLnk9Yi55KTtyZXR1cm4gdGhpc30sY2xhbXBTY2FsYXI6ZnVuY3Rpb24oKXt2YXIgYSxiO3JldHVybiBmdW5jdGlvbihjLGQpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5WZWN0b3IyLGI9bmV3IFRIUkVFLlZlY3RvcjIpO2Euc2V0KGMsYyk7Yi5zZXQoZCxkKTtyZXR1cm4gdGhpcy5jbGFtcChhLGIpfX0oKSxmbG9vcjpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PU1hdGguZmxvb3IodGhpcy55KTtyZXR1cm4gdGhpc30sY2VpbDpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmNlaWwodGhpcy54KTt0aGlzLnk9TWF0aC5jZWlsKHRoaXMueSk7cmV0dXJuIHRoaXN9LHJvdW5kOmZ1bmN0aW9uKCl7dGhpcy54PVxyXG5NYXRoLnJvdW5kKHRoaXMueCk7dGhpcy55PU1hdGgucm91bmQodGhpcy55KTtyZXR1cm4gdGhpc30scm91bmRUb1plcm86ZnVuY3Rpb24oKXt0aGlzLng9MD50aGlzLng/TWF0aC5jZWlsKHRoaXMueCk6TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT0wPnRoaXMueT9NYXRoLmNlaWwodGhpcy55KTpNYXRoLmZsb29yKHRoaXMueSk7cmV0dXJuIHRoaXN9LG5lZ2F0ZTpmdW5jdGlvbigpe3RoaXMueD0tdGhpcy54O3RoaXMueT0tdGhpcy55O3JldHVybiB0aGlzfSxkb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMueCphLngrdGhpcy55KmEueX0sbGVuZ3RoU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55fSxsZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCp0aGlzLngrdGhpcy55KnRoaXMueSl9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcih0aGlzLmxlbmd0aCgpKX0sZGlzdGFuY2VUbzpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoYSkpfSxcclxuZGlzdGFuY2VUb1NxdWFyZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LWEueDthPXRoaXMueS1hLnk7cmV0dXJuIGIqYithKmF9LHNldExlbmd0aDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCgpOzAhPT1iJiZhIT09YiYmdGhpcy5tdWx0aXBseVNjYWxhcihhL2IpO3JldHVybiB0aGlzfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz0oYS54LXRoaXMueCkqYjt0aGlzLnkrPShhLnktdGhpcy55KSpiO3JldHVybiB0aGlzfSxsZXJwVmVjdG9yczpmdW5jdGlvbihhLGIsYyl7dGhpcy5zdWJWZWN0b3JzKGIsYSkubXVsdGlwbHlTY2FsYXIoYykuYWRkKGEpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEueD09PXRoaXMueCYmYS55PT09dGhpcy55fSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLng9YVtiXTt0aGlzLnk9YVtiKzFdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09XHJcbmEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMueDthW2IrMV09dGhpcy55O3JldHVybiBhfSxmcm9tQXR0cmlidXRlOmZ1bmN0aW9uKGEsYixjKXt2b2lkIDA9PT1jJiYoYz0wKTtiPWIqYS5pdGVtU2l6ZStjO3RoaXMueD1hLmFycmF5W2JdO3RoaXMueT1hLmFycmF5W2IrMV07cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IyKHRoaXMueCx0aGlzLnkpfX07VEhSRUUuVmVjdG9yMz1mdW5jdGlvbihhLGIsYyl7dGhpcy54PWF8fDA7dGhpcy55PWJ8fDA7dGhpcy56PWN8fDB9O1xyXG5USFJFRS5WZWN0b3IzLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuVmVjdG9yMyxzZXQ6ZnVuY3Rpb24oYSxiLGMpe3RoaXMueD1hO3RoaXMueT1iO3RoaXMuej1jO3JldHVybiB0aGlzfSxzZXRYOmZ1bmN0aW9uKGEpe3RoaXMueD1hO3JldHVybiB0aGlzfSxzZXRZOmZ1bmN0aW9uKGEpe3RoaXMueT1hO3JldHVybiB0aGlzfSxzZXRaOmZ1bmN0aW9uKGEpe3RoaXMuej1hO3JldHVybiB0aGlzfSxzZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAwOnRoaXMueD1iO2JyZWFrO2Nhc2UgMTp0aGlzLnk9YjticmVhaztjYXNlIDI6dGhpcy56PWI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fX0sZ2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuIHRoaXMueDtjYXNlIDE6cmV0dXJuIHRoaXMueTtjYXNlIDI6cmV0dXJuIHRoaXMuejtkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIitcclxuYSk7fX0sY29weTpmdW5jdGlvbihhKXt0aGlzLng9YS54O3RoaXMueT1hLnk7dGhpcy56PWEuejtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gVEhSRUUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5hZGRWZWN0b3JzKGEsYik7dGhpcy54Kz1hLng7dGhpcy55Kz1hLnk7dGhpcy56Kz1hLno7cmV0dXJuIHRoaXN9LGFkZFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngrPWE7dGhpcy55Kz1hO3RoaXMueis9YTtyZXR1cm4gdGhpc30sYWRkVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngrYi54O3RoaXMueT1hLnkrYi55O3RoaXMuej1hLnorYi56O3JldHVybiB0aGlzfSxzdWI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSxcclxudGhpcy5zdWJWZWN0b3JzKGEsYik7dGhpcy54LT1hLng7dGhpcy55LT1hLnk7dGhpcy56LT1hLno7cmV0dXJuIHRoaXN9LHN1YlNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngtPWE7dGhpcy55LT1hO3RoaXMuei09YTtyZXR1cm4gdGhpc30sc3ViVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngtYi54O3RoaXMueT1hLnktYi55O3RoaXMuej1hLnotYi56O3JldHVybiB0aGlzfSxtdWx0aXBseTpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIFRIUkVFLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseVZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLm11bHRpcGx5VmVjdG9ycyhhLGIpO3RoaXMueCo9YS54O3RoaXMueSo9YS55O3RoaXMueio9YS56O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngqPWE7dGhpcy55Kj1hO3RoaXMueio9XHJcbmE7cmV0dXJuIHRoaXN9LG11bHRpcGx5VmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngqYi54O3RoaXMueT1hLnkqYi55O3RoaXMuej1hLnoqYi56O3JldHVybiB0aGlzfSxhcHBseUV1bGVyOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpeyExPT09YiBpbnN0YW5jZW9mIFRIUkVFLkV1bGVyJiZUSFJFRS5lcnJvcihcIlRIUkVFLlZlY3RvcjM6IC5hcHBseUV1bGVyKCkgbm93IGV4cGVjdHMgYSBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLlwiKTt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuUXVhdGVybmlvbik7dGhpcy5hcHBseVF1YXRlcm5pb24oYS5zZXRGcm9tRXVsZXIoYikpO3JldHVybiB0aGlzfX0oKSxhcHBseUF4aXNBbmdsZTpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiLGMpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5RdWF0ZXJuaW9uKTt0aGlzLmFwcGx5UXVhdGVybmlvbihhLnNldEZyb21BeGlzQW5nbGUoYixcclxuYykpO3JldHVybiB0aGlzfX0oKSxhcHBseU1hdHJpeDM6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56O2E9YS5lbGVtZW50czt0aGlzLng9YVswXSpiK2FbM10qYythWzZdKmQ7dGhpcy55PWFbMV0qYithWzRdKmMrYVs3XSpkO3RoaXMuej1hWzJdKmIrYVs1XSpjK2FbOF0qZDtyZXR1cm4gdGhpc30sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMuejthPWEuZWxlbWVudHM7dGhpcy54PWFbMF0qYithWzRdKmMrYVs4XSpkK2FbMTJdO3RoaXMueT1hWzFdKmIrYVs1XSpjK2FbOV0qZCthWzEzXTt0aGlzLno9YVsyXSpiK2FbNl0qYythWzEwXSpkK2FbMTRdO3JldHVybiB0aGlzfSxhcHBseVByb2plY3Rpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56O2E9YS5lbGVtZW50czt2YXIgZT0xLyhhWzNdKmIrYVs3XSpjK2FbMTFdKmQrYVsxNV0pO3RoaXMueD0oYVswXSpiK2FbNF0qXHJcbmMrYVs4XSpkK2FbMTJdKSplO3RoaXMueT0oYVsxXSpiK2FbNV0qYythWzldKmQrYVsxM10pKmU7dGhpcy56PShhWzJdKmIrYVs2XSpjK2FbMTBdKmQrYVsxNF0pKmU7cmV0dXJuIHRoaXN9LGFwcGx5UXVhdGVybmlvbjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngsYz10aGlzLnksZD10aGlzLnosZT1hLngsZj1hLnksZz1hLno7YT1hLnc7dmFyIGg9YSpiK2YqZC1nKmMsaz1hKmMrZypiLWUqZCxsPWEqZCtlKmMtZipiLGI9LWUqYi1mKmMtZypkO3RoaXMueD1oKmErYiotZStrKi1nLWwqLWY7dGhpcy55PWsqYStiKi1mK2wqLWUtaCotZzt0aGlzLno9bCphK2IqLWcraCotZi1rKi1lO3JldHVybiB0aGlzfSxwcm9qZWN0OmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5NYXRyaXg0KTthLm11bHRpcGx5TWF0cmljZXMoYi5wcm9qZWN0aW9uTWF0cml4LGEuZ2V0SW52ZXJzZShiLm1hdHJpeFdvcmxkKSk7cmV0dXJuIHRoaXMuYXBwbHlQcm9qZWN0aW9uKGEpfX0oKSxcclxudW5wcm9qZWN0OmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5NYXRyaXg0KTthLm11bHRpcGx5TWF0cmljZXMoYi5tYXRyaXhXb3JsZCxhLmdldEludmVyc2UoYi5wcm9qZWN0aW9uTWF0cml4KSk7cmV0dXJuIHRoaXMuYXBwbHlQcm9qZWN0aW9uKGEpfX0oKSx0cmFuc2Zvcm1EaXJlY3Rpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56O2E9YS5lbGVtZW50czt0aGlzLng9YVswXSpiK2FbNF0qYythWzhdKmQ7dGhpcy55PWFbMV0qYithWzVdKmMrYVs5XSpkO3RoaXMuej1hWzJdKmIrYVs2XSpjK2FbMTBdKmQ7dGhpcy5ub3JtYWxpemUoKTtyZXR1cm4gdGhpc30sZGl2aWRlOmZ1bmN0aW9uKGEpe3RoaXMueC89YS54O3RoaXMueS89YS55O3RoaXMuei89YS56O3JldHVybiB0aGlzfSxkaXZpZGVTY2FsYXI6ZnVuY3Rpb24oYSl7MCE9PWE/KGE9MS9hLHRoaXMueCo9YSx0aGlzLnkqPWEsdGhpcy56Kj1cclxuYSk6dGhpcy56PXRoaXMueT10aGlzLng9MDtyZXR1cm4gdGhpc30sbWluOmZ1bmN0aW9uKGEpe3RoaXMueD5hLngmJih0aGlzLng9YS54KTt0aGlzLnk+YS55JiYodGhpcy55PWEueSk7dGhpcy56PmEueiYmKHRoaXMuej1hLnopO3JldHVybiB0aGlzfSxtYXg6ZnVuY3Rpb24oYSl7dGhpcy54PGEueCYmKHRoaXMueD1hLngpO3RoaXMueTxhLnkmJih0aGlzLnk9YS55KTt0aGlzLno8YS56JiYodGhpcy56PWEueik7cmV0dXJuIHRoaXN9LGNsYW1wOmZ1bmN0aW9uKGEsYil7dGhpcy54PGEueD90aGlzLng9YS54OnRoaXMueD5iLngmJih0aGlzLng9Yi54KTt0aGlzLnk8YS55P3RoaXMueT1hLnk6dGhpcy55PmIueSYmKHRoaXMueT1iLnkpO3RoaXMuejxhLno/dGhpcy56PWEuejp0aGlzLno+Yi56JiYodGhpcy56PWIueik7cmV0dXJuIHRoaXN9LGNsYW1wU2NhbGFyOmZ1bmN0aW9uKCl7dmFyIGEsYjtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVmVjdG9yMyxcclxuYj1uZXcgVEhSRUUuVmVjdG9yMyk7YS5zZXQoYyxjLGMpO2Iuc2V0KGQsZCxkKTtyZXR1cm4gdGhpcy5jbGFtcChhLGIpfX0oKSxmbG9vcjpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PU1hdGguZmxvb3IodGhpcy55KTt0aGlzLno9TWF0aC5mbG9vcih0aGlzLnopO3JldHVybiB0aGlzfSxjZWlsOmZ1bmN0aW9uKCl7dGhpcy54PU1hdGguY2VpbCh0aGlzLngpO3RoaXMueT1NYXRoLmNlaWwodGhpcy55KTt0aGlzLno9TWF0aC5jZWlsKHRoaXMueik7cmV0dXJuIHRoaXN9LHJvdW5kOmZ1bmN0aW9uKCl7dGhpcy54PU1hdGgucm91bmQodGhpcy54KTt0aGlzLnk9TWF0aC5yb3VuZCh0aGlzLnkpO3RoaXMuej1NYXRoLnJvdW5kKHRoaXMueik7cmV0dXJuIHRoaXN9LHJvdW5kVG9aZXJvOmZ1bmN0aW9uKCl7dGhpcy54PTA+dGhpcy54P01hdGguY2VpbCh0aGlzLngpOk1hdGguZmxvb3IodGhpcy54KTt0aGlzLnk9MD50aGlzLnk/TWF0aC5jZWlsKHRoaXMueSk6XHJcbk1hdGguZmxvb3IodGhpcy55KTt0aGlzLno9MD50aGlzLno/TWF0aC5jZWlsKHRoaXMueik6TWF0aC5mbG9vcih0aGlzLnopO3JldHVybiB0aGlzfSxuZWdhdGU6ZnVuY3Rpb24oKXt0aGlzLng9LXRoaXMueDt0aGlzLnk9LXRoaXMueTt0aGlzLno9LXRoaXMuejtyZXR1cm4gdGhpc30sZG90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLngqYS54K3RoaXMueSphLnkrdGhpcy56KmEuen0sbGVuZ3RoU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnp9LGxlbmd0aDpmdW5jdGlvbigpe3JldHVybiBNYXRoLnNxcnQodGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnopfSxsZW5ndGhNYW5oYXR0YW46ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5hYnModGhpcy54KStNYXRoLmFicyh0aGlzLnkpK01hdGguYWJzKHRoaXMueil9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcih0aGlzLmxlbmd0aCgpKX0sXHJcbnNldExlbmd0aDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCgpOzAhPT1iJiZhIT09YiYmdGhpcy5tdWx0aXBseVNjYWxhcihhL2IpO3JldHVybiB0aGlzfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz0oYS54LXRoaXMueCkqYjt0aGlzLnkrPShhLnktdGhpcy55KSpiO3RoaXMueis9KGEuei10aGlzLnopKmI7cmV0dXJuIHRoaXN9LGxlcnBWZWN0b3JzOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnN1YlZlY3RvcnMoYixhKS5tdWx0aXBseVNjYWxhcihjKS5hZGQoYSk7cmV0dXJuIHRoaXN9LGNyb3NzOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gVEhSRUUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5jcm9zcygpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmNyb3NzVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuY3Jvc3NWZWN0b3JzKGEsYik7dmFyIGM9dGhpcy54LGQ9dGhpcy55LGU9dGhpcy56O3RoaXMueD1kKmEuei1lKmEueTt0aGlzLnk9XHJcbmUqYS54LWMqYS56O3RoaXMuej1jKmEueS1kKmEueDtyZXR1cm4gdGhpc30sY3Jvc3NWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS54LGQ9YS55LGU9YS56LGY9Yi54LGc9Yi55LGg9Yi56O3RoaXMueD1kKmgtZSpnO3RoaXMueT1lKmYtYypoO3RoaXMuej1jKmctZCpmO3JldHVybiB0aGlzfSxwcm9qZWN0T25WZWN0b3I6ZnVuY3Rpb24oKXt2YXIgYSxiO3JldHVybiBmdW5jdGlvbihjKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVmVjdG9yMyk7YS5jb3B5KGMpLm5vcm1hbGl6ZSgpO2I9dGhpcy5kb3QoYSk7cmV0dXJuIHRoaXMuY29weShhKS5tdWx0aXBseVNjYWxhcihiKX19KCkscHJvamVjdE9uUGxhbmU6ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oYil7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlZlY3RvcjMpO2EuY29weSh0aGlzKS5wcm9qZWN0T25WZWN0b3IoYik7cmV0dXJuIHRoaXMuc3ViKGEpfX0oKSxyZWZsZWN0OmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMD09PVxyXG5hJiYoYT1uZXcgVEhSRUUuVmVjdG9yMyk7cmV0dXJuIHRoaXMuc3ViKGEuY29weShiKS5tdWx0aXBseVNjYWxhcigyKnRoaXMuZG90KGIpKSl9fSgpLGFuZ2xlVG86ZnVuY3Rpb24oYSl7YT10aGlzLmRvdChhKS8odGhpcy5sZW5ndGgoKSphLmxlbmd0aCgpKTtyZXR1cm4gTWF0aC5hY29zKFRIUkVFLk1hdGguY2xhbXAoYSwtMSwxKSl9LGRpc3RhbmNlVG86ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKGEpKX0sZGlzdGFuY2VUb1NxdWFyZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LWEueCxjPXRoaXMueS1hLnk7YT10aGlzLnotYS56O3JldHVybiBiKmIrYypjK2EqYX0sc2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXg6ZnVuY3Rpb24oYSxiKXtUSFJFRS5lcnJvcihcIlRIUkVFLlZlY3RvcjM6IC5zZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFdWxlci5zZXRGcm9tUm90YXRpb25NYXRyaXgoKSBpbnN0ZWFkLlwiKX0sXHJcbnNldEV1bGVyRnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oYSxiKXtUSFJFRS5lcnJvcihcIlRIUkVFLlZlY3RvcjM6IC5zZXRFdWxlckZyb21RdWF0ZXJuaW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21RdWF0ZXJuaW9uKCkgaW5zdGVhZC5cIil9LGdldFBvc2l0aW9uRnJvbU1hdHJpeDpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmdldFBvc2l0aW9uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhQb3NpdGlvbigpLlwiKTtyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oYSl9LGdldFNjYWxlRnJvbU1hdHJpeDpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmdldFNjYWxlRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhTY2FsZSgpLlwiKTtyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4U2NhbGUoYSl9LGdldENvbHVtbkZyb21NYXRyaXg6ZnVuY3Rpb24oYSxcclxuYil7VEhSRUUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5nZXRDb2x1bW5Gcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeENvbHVtbigpLlwiKTtyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKGEsYil9LHNldEZyb21NYXRyaXhQb3NpdGlvbjpmdW5jdGlvbihhKXt0aGlzLng9YS5lbGVtZW50c1sxMl07dGhpcy55PWEuZWxlbWVudHNbMTNdO3RoaXMuej1hLmVsZW1lbnRzWzE0XTtyZXR1cm4gdGhpc30sc2V0RnJvbU1hdHJpeFNjYWxlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuc2V0KGEuZWxlbWVudHNbMF0sYS5lbGVtZW50c1sxXSxhLmVsZW1lbnRzWzJdKS5sZW5ndGgoKSxjPXRoaXMuc2V0KGEuZWxlbWVudHNbNF0sYS5lbGVtZW50c1s1XSxhLmVsZW1lbnRzWzZdKS5sZW5ndGgoKTthPXRoaXMuc2V0KGEuZWxlbWVudHNbOF0sYS5lbGVtZW50c1s5XSxhLmVsZW1lbnRzWzEwXSkubGVuZ3RoKCk7dGhpcy54PWI7dGhpcy55PWM7dGhpcy56PWE7XHJcbnJldHVybiB0aGlzfSxzZXRGcm9tTWF0cml4Q29sdW1uOmZ1bmN0aW9uKGEsYil7dmFyIGM9NCphLGQ9Yi5lbGVtZW50czt0aGlzLng9ZFtjXTt0aGlzLnk9ZFtjKzFdO3RoaXMuej1kW2MrMl07cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS54PT09dGhpcy54JiZhLnk9PT10aGlzLnkmJmEuej09PXRoaXMuen0sZnJvbUFycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7dGhpcy54PWFbYl07dGhpcy55PWFbYisxXTt0aGlzLno9YVtiKzJdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy54O2FbYisxXT10aGlzLnk7YVtiKzJdPXRoaXMuejtyZXR1cm4gYX0sZnJvbUF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7dm9pZCAwPT09YyYmKGM9MCk7Yj1iKmEuaXRlbVNpemUrYzt0aGlzLng9YS5hcnJheVtiXTt0aGlzLnk9YS5hcnJheVtiKzFdO3RoaXMuej1cclxuYS5hcnJheVtiKzJdO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuVmVjdG9yMyh0aGlzLngsdGhpcy55LHRoaXMueil9fTtUSFJFRS5WZWN0b3I0PWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMueD1hfHwwO3RoaXMueT1ifHwwO3RoaXMuej1jfHwwO3RoaXMudz12b2lkIDAhPT1kP2Q6MX07XHJcblRIUkVFLlZlY3RvcjQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5WZWN0b3I0LHNldDpmdW5jdGlvbihhLGIsYyxkKXt0aGlzLng9YTt0aGlzLnk9Yjt0aGlzLno9Yzt0aGlzLnc9ZDtyZXR1cm4gdGhpc30sc2V0WDpmdW5jdGlvbihhKXt0aGlzLng9YTtyZXR1cm4gdGhpc30sc2V0WTpmdW5jdGlvbihhKXt0aGlzLnk9YTtyZXR1cm4gdGhpc30sc2V0WjpmdW5jdGlvbihhKXt0aGlzLno9YTtyZXR1cm4gdGhpc30sc2V0VzpmdW5jdGlvbihhKXt0aGlzLnc9YTtyZXR1cm4gdGhpc30sc2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMDp0aGlzLng9YjticmVhaztjYXNlIDE6dGhpcy55PWI7YnJlYWs7Y2FzZSAyOnRoaXMuej1iO2JyZWFrO2Nhc2UgMzp0aGlzLnc9YjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIithKTt9fSxnZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2UgMDpyZXR1cm4gdGhpcy54O1xyXG5jYXNlIDE6cmV0dXJuIHRoaXMueTtjYXNlIDI6cmV0dXJuIHRoaXMuejtjYXNlIDM6cmV0dXJuIHRoaXMudztkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIithKTt9fSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMueD1hLng7dGhpcy55PWEueTt0aGlzLno9YS56O3RoaXMudz12b2lkIDAhPT1hLnc/YS53OjE7cmV0dXJuIHRoaXN9LGFkZDpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIFRIUkVFLndhcm4oXCJUSFJFRS5WZWN0b3I0OiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuYWRkVmVjdG9ycyhhLGIpO3RoaXMueCs9YS54O3RoaXMueSs9YS55O3RoaXMueis9YS56O3RoaXMudys9YS53O3JldHVybiB0aGlzfSxhZGRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54Kz1hO3RoaXMueSs9YTt0aGlzLnorPWE7dGhpcy53Kz1hO3JldHVybiB0aGlzfSxhZGRWZWN0b3JzOmZ1bmN0aW9uKGEsXHJcbmIpe3RoaXMueD1hLngrYi54O3RoaXMueT1hLnkrYi55O3RoaXMuej1hLnorYi56O3RoaXMudz1hLncrYi53O3JldHVybiB0aGlzfSxzdWI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yNDogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLnN1YlZlY3RvcnMoYSxiKTt0aGlzLngtPWEueDt0aGlzLnktPWEueTt0aGlzLnotPWEuejt0aGlzLnctPWEudztyZXR1cm4gdGhpc30sc3ViU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueC09YTt0aGlzLnktPWE7dGhpcy56LT1hO3RoaXMudy09YTtyZXR1cm4gdGhpc30sc3ViVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngtYi54O3RoaXMueT1hLnktYi55O3RoaXMuej1hLnotYi56O3RoaXMudz1hLnctYi53O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngqPVxyXG5hO3RoaXMueSo9YTt0aGlzLnoqPWE7dGhpcy53Kj1hO3JldHVybiB0aGlzfSxhcHBseU1hdHJpeDQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56LGU9dGhpcy53O2E9YS5lbGVtZW50czt0aGlzLng9YVswXSpiK2FbNF0qYythWzhdKmQrYVsxMl0qZTt0aGlzLnk9YVsxXSpiK2FbNV0qYythWzldKmQrYVsxM10qZTt0aGlzLno9YVsyXSpiK2FbNl0qYythWzEwXSpkK2FbMTRdKmU7dGhpcy53PWFbM10qYithWzddKmMrYVsxMV0qZCthWzE1XSplO3JldHVybiB0aGlzfSxkaXZpZGVTY2FsYXI6ZnVuY3Rpb24oYSl7MCE9PWE/KGE9MS9hLHRoaXMueCo9YSx0aGlzLnkqPWEsdGhpcy56Kj1hLHRoaXMudyo9YSk6KHRoaXMuej10aGlzLnk9dGhpcy54PTAsdGhpcy53PTEpO3JldHVybiB0aGlzfSxzZXRBeGlzQW5nbGVGcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXt0aGlzLnc9MipNYXRoLmFjb3MoYS53KTt2YXIgYj1NYXRoLnNxcnQoMS1hLncqYS53KTsxRS00PlxyXG5iPyh0aGlzLng9MSx0aGlzLno9dGhpcy55PTApOih0aGlzLng9YS54L2IsdGhpcy55PWEueS9iLHRoaXMuej1hLnovYik7cmV0dXJuIHRoaXN9LHNldEF4aXNBbmdsZUZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYixjLGQ7YT1hLmVsZW1lbnRzO3ZhciBlPWFbMF07ZD1hWzRdO3ZhciBmPWFbOF0sZz1hWzFdLGg9YVs1XSxrPWFbOV07Yz1hWzJdO2I9YVs2XTt2YXIgbD1hWzEwXTtpZiguMDE+TWF0aC5hYnMoZC1nKSYmLjAxPk1hdGguYWJzKGYtYykmJi4wMT5NYXRoLmFicyhrLWIpKXtpZiguMT5NYXRoLmFicyhkK2cpJiYuMT5NYXRoLmFicyhmK2MpJiYuMT5NYXRoLmFicyhrK2IpJiYuMT5NYXRoLmFicyhlK2grbC0zKSlyZXR1cm4gdGhpcy5zZXQoMSwwLDAsMCksdGhpczthPU1hdGguUEk7ZT0oZSsxKS8yO2g9KGgrMSkvMjtsPShsKzEpLzI7ZD0oZCtnKS80O2Y9KGYrYykvNDtrPShrK2IpLzQ7ZT5oJiZlPmw/LjAxPmU/KGI9MCxkPWM9LjcwNzEwNjc4MSk6KGI9XHJcbk1hdGguc3FydChlKSxjPWQvYixkPWYvYik6aD5sPy4wMT5oPyhiPS43MDcxMDY3ODEsYz0wLGQ9LjcwNzEwNjc4MSk6KGM9TWF0aC5zcXJ0KGgpLGI9ZC9jLGQ9ay9jKTouMDE+bD8oYz1iPS43MDcxMDY3ODEsZD0wKTooZD1NYXRoLnNxcnQobCksYj1mL2QsYz1rL2QpO3RoaXMuc2V0KGIsYyxkLGEpO3JldHVybiB0aGlzfWE9TWF0aC5zcXJ0KChiLWspKihiLWspKyhmLWMpKihmLWMpKyhnLWQpKihnLWQpKTsuMDAxPk1hdGguYWJzKGEpJiYoYT0xKTt0aGlzLng9KGItaykvYTt0aGlzLnk9KGYtYykvYTt0aGlzLno9KGctZCkvYTt0aGlzLnc9TWF0aC5hY29zKChlK2grbC0xKS8yKTtyZXR1cm4gdGhpc30sbWluOmZ1bmN0aW9uKGEpe3RoaXMueD5hLngmJih0aGlzLng9YS54KTt0aGlzLnk+YS55JiYodGhpcy55PWEueSk7dGhpcy56PmEueiYmKHRoaXMuej1hLnopO3RoaXMudz5hLncmJih0aGlzLnc9YS53KTtyZXR1cm4gdGhpc30sbWF4OmZ1bmN0aW9uKGEpe3RoaXMueDxhLngmJlxyXG4odGhpcy54PWEueCk7dGhpcy55PGEueSYmKHRoaXMueT1hLnkpO3RoaXMuejxhLnomJih0aGlzLno9YS56KTt0aGlzLnc8YS53JiYodGhpcy53PWEudyk7cmV0dXJuIHRoaXN9LGNsYW1wOmZ1bmN0aW9uKGEsYil7dGhpcy54PGEueD90aGlzLng9YS54OnRoaXMueD5iLngmJih0aGlzLng9Yi54KTt0aGlzLnk8YS55P3RoaXMueT1hLnk6dGhpcy55PmIueSYmKHRoaXMueT1iLnkpO3RoaXMuejxhLno/dGhpcy56PWEuejp0aGlzLno+Yi56JiYodGhpcy56PWIueik7dGhpcy53PGEudz90aGlzLnc9YS53OnRoaXMudz5iLncmJih0aGlzLnc9Yi53KTtyZXR1cm4gdGhpc30sY2xhbXBTY2FsYXI6ZnVuY3Rpb24oKXt2YXIgYSxiO3JldHVybiBmdW5jdGlvbihjLGQpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5WZWN0b3I0LGI9bmV3IFRIUkVFLlZlY3RvcjQpO2Euc2V0KGMsYyxjLGMpO2Iuc2V0KGQsZCxkLGQpO3JldHVybiB0aGlzLmNsYW1wKGEsYil9fSgpLGZsb29yOmZ1bmN0aW9uKCl7dGhpcy54PVxyXG5NYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PU1hdGguZmxvb3IodGhpcy55KTt0aGlzLno9TWF0aC5mbG9vcih0aGlzLnopO3RoaXMudz1NYXRoLmZsb29yKHRoaXMudyk7cmV0dXJuIHRoaXN9LGNlaWw6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5jZWlsKHRoaXMueCk7dGhpcy55PU1hdGguY2VpbCh0aGlzLnkpO3RoaXMuej1NYXRoLmNlaWwodGhpcy56KTt0aGlzLnc9TWF0aC5jZWlsKHRoaXMudyk7cmV0dXJuIHRoaXN9LHJvdW5kOmZ1bmN0aW9uKCl7dGhpcy54PU1hdGgucm91bmQodGhpcy54KTt0aGlzLnk9TWF0aC5yb3VuZCh0aGlzLnkpO3RoaXMuej1NYXRoLnJvdW5kKHRoaXMueik7dGhpcy53PU1hdGgucm91bmQodGhpcy53KTtyZXR1cm4gdGhpc30scm91bmRUb1plcm86ZnVuY3Rpb24oKXt0aGlzLng9MD50aGlzLng/TWF0aC5jZWlsKHRoaXMueCk6TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT0wPnRoaXMueT9NYXRoLmNlaWwodGhpcy55KTpNYXRoLmZsb29yKHRoaXMueSk7XHJcbnRoaXMuej0wPnRoaXMuej9NYXRoLmNlaWwodGhpcy56KTpNYXRoLmZsb29yKHRoaXMueik7dGhpcy53PTA+dGhpcy53P01hdGguY2VpbCh0aGlzLncpOk1hdGguZmxvb3IodGhpcy53KTtyZXR1cm4gdGhpc30sbmVnYXRlOmZ1bmN0aW9uKCl7dGhpcy54PS10aGlzLng7dGhpcy55PS10aGlzLnk7dGhpcy56PS10aGlzLno7dGhpcy53PS10aGlzLnc7cmV0dXJuIHRoaXN9LGRvdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy54KmEueCt0aGlzLnkqYS55K3RoaXMueiphLnordGhpcy53KmEud30sbGVuZ3RoU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnordGhpcy53KnRoaXMud30sbGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguc3FydCh0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkrdGhpcy56KnRoaXMueit0aGlzLncqdGhpcy53KX0sbGVuZ3RoTWFuaGF0dGFuOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguYWJzKHRoaXMueCkrXHJcbk1hdGguYWJzKHRoaXMueSkrTWF0aC5hYnModGhpcy56KStNYXRoLmFicyh0aGlzLncpfSxub3JtYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIodGhpcy5sZW5ndGgoKSl9LHNldExlbmd0aDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCgpOzAhPT1iJiZhIT09YiYmdGhpcy5tdWx0aXBseVNjYWxhcihhL2IpO3JldHVybiB0aGlzfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz0oYS54LXRoaXMueCkqYjt0aGlzLnkrPShhLnktdGhpcy55KSpiO3RoaXMueis9KGEuei10aGlzLnopKmI7dGhpcy53Kz0oYS53LXRoaXMudykqYjtyZXR1cm4gdGhpc30sbGVycFZlY3RvcnM6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuc3ViVmVjdG9ycyhiLGEpLm11bHRpcGx5U2NhbGFyKGMpLmFkZChhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLng9PT10aGlzLngmJmEueT09PXRoaXMueSYmYS56PT09dGhpcy56JiZhLnc9PT10aGlzLnd9LFxyXG5mcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLng9YVtiXTt0aGlzLnk9YVtiKzFdO3RoaXMuej1hW2IrMl07dGhpcy53PWFbYiszXTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMueDthW2IrMV09dGhpcy55O2FbYisyXT10aGlzLno7YVtiKzNdPXRoaXMudztyZXR1cm4gYX0sZnJvbUF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7dm9pZCAwPT09YyYmKGM9MCk7Yj1iKmEuaXRlbVNpemUrYzt0aGlzLng9YS5hcnJheVtiXTt0aGlzLnk9YS5hcnJheVtiKzFdO3RoaXMuej1hLmFycmF5W2IrMl07dGhpcy53PWEuYXJyYXlbYiszXTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjQodGhpcy54LHRoaXMueSx0aGlzLnosdGhpcy53KX19O1xyXG5USFJFRS5FdWxlcj1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLl94PWF8fDA7dGhpcy5feT1ifHwwO3RoaXMuX3o9Y3x8MDt0aGlzLl9vcmRlcj1kfHxUSFJFRS5FdWxlci5EZWZhdWx0T3JkZXJ9O1RIUkVFLkV1bGVyLlJvdGF0aW9uT3JkZXJzPVwiWFlaIFlaWCBaWFkgWFpZIFlYWiBaWVhcIi5zcGxpdChcIiBcIik7VEhSRUUuRXVsZXIuRGVmYXVsdE9yZGVyPVwiWFlaXCI7XHJcblRIUkVFLkV1bGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuRXVsZXIsX3g6MCxfeTowLF96OjAsX29yZGVyOlRIUkVFLkV1bGVyLkRlZmF1bHRPcmRlcixnZXQgeCgpe3JldHVybiB0aGlzLl94fSxzZXQgeChhKXt0aGlzLl94PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9LGdldCB5KCl7cmV0dXJuIHRoaXMuX3l9LHNldCB5KGEpe3RoaXMuX3k9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sZ2V0IHooKXtyZXR1cm4gdGhpcy5fen0sc2V0IHooYSl7dGhpcy5fej1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfSxnZXQgb3JkZXIoKXtyZXR1cm4gdGhpcy5fb3JkZXJ9LHNldCBvcmRlcihhKXt0aGlzLl9vcmRlcj1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfSxzZXQ6ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5feD1hO3RoaXMuX3k9Yjt0aGlzLl96PWM7dGhpcy5fb3JkZXI9ZHx8dGhpcy5fb3JkZXI7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5feD1cclxuYS5feDt0aGlzLl95PWEuX3k7dGhpcy5fej1hLl96O3RoaXMuX29yZGVyPWEuX29yZGVyO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxzZXRGcm9tUm90YXRpb25NYXRyaXg6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVRIUkVFLk1hdGguY2xhbXAsZT1hLmVsZW1lbnRzO2E9ZVswXTt2YXIgZj1lWzRdLGc9ZVs4XSxoPWVbMV0saz1lWzVdLGw9ZVs5XSxwPWVbMl0scT1lWzZdLGU9ZVsxMF07Yj1ifHx0aGlzLl9vcmRlcjtcIlhZWlwiPT09Yj8odGhpcy5feT1NYXRoLmFzaW4oZChnLC0xLDEpKSwuOTk5OTk+TWF0aC5hYnMoZyk/KHRoaXMuX3g9TWF0aC5hdGFuMigtbCxlKSx0aGlzLl96PU1hdGguYXRhbjIoLWYsYSkpOih0aGlzLl94PU1hdGguYXRhbjIocSxrKSx0aGlzLl96PTApKTpcIllYWlwiPT09Yj8odGhpcy5feD1NYXRoLmFzaW4oLWQobCwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKGwpPyh0aGlzLl95PU1hdGguYXRhbjIoZyxlKSx0aGlzLl96PU1hdGguYXRhbjIoaCxcclxuaykpOih0aGlzLl95PU1hdGguYXRhbjIoLXAsYSksdGhpcy5fej0wKSk6XCJaWFlcIj09PWI/KHRoaXMuX3g9TWF0aC5hc2luKGQocSwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKHEpPyh0aGlzLl95PU1hdGguYXRhbjIoLXAsZSksdGhpcy5fej1NYXRoLmF0YW4yKC1mLGspKToodGhpcy5feT0wLHRoaXMuX3o9TWF0aC5hdGFuMihoLGEpKSk6XCJaWVhcIj09PWI/KHRoaXMuX3k9TWF0aC5hc2luKC1kKHAsLTEsMSkpLC45OTk5OT5NYXRoLmFicyhwKT8odGhpcy5feD1NYXRoLmF0YW4yKHEsZSksdGhpcy5fej1NYXRoLmF0YW4yKGgsYSkpOih0aGlzLl94PTAsdGhpcy5fej1NYXRoLmF0YW4yKC1mLGspKSk6XCJZWlhcIj09PWI/KHRoaXMuX3o9TWF0aC5hc2luKGQoaCwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKGgpPyh0aGlzLl94PU1hdGguYXRhbjIoLWwsayksdGhpcy5feT1NYXRoLmF0YW4yKC1wLGEpKToodGhpcy5feD0wLHRoaXMuX3k9TWF0aC5hdGFuMihnLGUpKSk6XCJYWllcIj09PWI/KHRoaXMuX3o9XHJcbk1hdGguYXNpbigtZChmLC0xLDEpKSwuOTk5OTk+TWF0aC5hYnMoZik/KHRoaXMuX3g9TWF0aC5hdGFuMihxLGspLHRoaXMuX3k9TWF0aC5hdGFuMihnLGEpKToodGhpcy5feD1NYXRoLmF0YW4yKC1sLGUpLHRoaXMuX3k9MCkpOlRIUkVFLndhcm4oXCJUSFJFRS5FdWxlcjogLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGdpdmVuIHVuc3VwcG9ydGVkIG9yZGVyOiBcIitiKTt0aGlzLl9vcmRlcj1iO2lmKCExIT09Yyl0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oYixjLGQpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5NYXRyaXg0KTthLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKGIpO3RoaXMuc2V0RnJvbVJvdGF0aW9uTWF0cml4KGEsYyxkKTtyZXR1cm4gdGhpc319KCksc2V0RnJvbVZlY3RvcjM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5zZXQoYS54LGEueSxhLnosXHJcbmJ8fHRoaXMuX29yZGVyKX0scmVvcmRlcjpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5RdWF0ZXJuaW9uO3JldHVybiBmdW5jdGlvbihiKXthLnNldEZyb21FdWxlcih0aGlzKTt0aGlzLnNldEZyb21RdWF0ZXJuaW9uKGEsYil9fSgpLGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5feD09PXRoaXMuX3gmJmEuX3k9PT10aGlzLl95JiZhLl96PT09dGhpcy5feiYmYS5fb3JkZXI9PT10aGlzLl9vcmRlcn0sZnJvbUFycmF5OmZ1bmN0aW9uKGEpe3RoaXMuX3g9YVswXTt0aGlzLl95PWFbMV07dGhpcy5fej1hWzJdO3ZvaWQgMCE9PWFbM10mJih0aGlzLl9vcmRlcj1hWzNdKTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMuX3g7YVtiKzFdPXRoaXMuX3k7YVtiKzJdPXRoaXMuX3o7YVtiKzNdPXRoaXMuX29yZGVyO3JldHVybiBhfSx0b1ZlY3RvcjM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/XHJcbmEuc2V0KHRoaXMuX3gsdGhpcy5feSx0aGlzLl96KTpuZXcgVEhSRUUuVmVjdG9yMyh0aGlzLl94LHRoaXMuX3ksdGhpcy5feil9LG9uQ2hhbmdlOmZ1bmN0aW9uKGEpe3RoaXMub25DaGFuZ2VDYWxsYmFjaz1hO3JldHVybiB0aGlzfSxvbkNoYW5nZUNhbGxiYWNrOmZ1bmN0aW9uKCl7fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuRXVsZXIodGhpcy5feCx0aGlzLl95LHRoaXMuX3osdGhpcy5fb3JkZXIpfX07VEhSRUUuTGluZTM9ZnVuY3Rpb24oYSxiKXt0aGlzLnN0YXJ0PXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuVmVjdG9yMzt0aGlzLmVuZD12b2lkIDAhPT1iP2I6bmV3IFRIUkVFLlZlY3RvcjN9O1xyXG5USFJFRS5MaW5lMy5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkxpbmUzLHNldDpmdW5jdGlvbihhLGIpe3RoaXMuc3RhcnQuY29weShhKTt0aGlzLmVuZC5jb3B5KGIpO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuc3RhcnQuY29weShhLnN0YXJ0KTt0aGlzLmVuZC5jb3B5KGEuZW5kKTtyZXR1cm4gdGhpc30sY2VudGVyOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuVmVjdG9yMykuYWRkVmVjdG9ycyh0aGlzLnN0YXJ0LHRoaXMuZW5kKS5tdWx0aXBseVNjYWxhciguNSl9LGRlbHRhOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuVmVjdG9yMykuc3ViVmVjdG9ycyh0aGlzLmVuZCx0aGlzLnN0YXJ0KX0sZGlzdGFuY2VTcTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMuZW5kKX0sZGlzdGFuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydC5kaXN0YW5jZVRvKHRoaXMuZW5kKX0sYXQ6ZnVuY3Rpb24oYSxcclxuYil7dmFyIGM9Ynx8bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIHRoaXMuZGVsdGEoYykubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMuc3RhcnQpfSxjbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYyxkKXthLnN1YlZlY3RvcnMoYyx0aGlzLnN0YXJ0KTtiLnN1YlZlY3RvcnModGhpcy5lbmQsdGhpcy5zdGFydCk7dmFyIGU9Yi5kb3QoYiksZT1iLmRvdChhKS9lO2QmJihlPVRIUkVFLk1hdGguY2xhbXAoZSwwLDEpKTtyZXR1cm4gZX19KCksY2xvc2VzdFBvaW50VG9Qb2ludDpmdW5jdGlvbihhLGIsYyl7YT10aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIoYSxiKTtjPWN8fG5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiB0aGlzLmRlbHRhKGMpLm11bHRpcGx5U2NhbGFyKGEpLmFkZCh0aGlzLnN0YXJ0KX0sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKGEpe3RoaXMuc3RhcnQuYXBwbHlNYXRyaXg0KGEpO1xyXG50aGlzLmVuZC5hcHBseU1hdHJpeDQoYSk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5zdGFydC5lcXVhbHModGhpcy5zdGFydCkmJmEuZW5kLmVxdWFscyh0aGlzLmVuZCl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBUSFJFRS5MaW5lMykuY29weSh0aGlzKX19O1RIUkVFLkJveDI9ZnVuY3Rpb24oYSxiKXt0aGlzLm1pbj12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlZlY3RvcjIoSW5maW5pdHksSW5maW5pdHkpO3RoaXMubWF4PXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuVmVjdG9yMigtSW5maW5pdHksLUluZmluaXR5KX07XHJcblRIUkVFLkJveDIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5Cb3gyLHNldDpmdW5jdGlvbihhLGIpe3RoaXMubWluLmNvcHkoYSk7dGhpcy5tYXguY29weShiKTtyZXR1cm4gdGhpc30sc2V0RnJvbVBvaW50czpmdW5jdGlvbihhKXt0aGlzLm1ha2VFbXB0eSgpO2Zvcih2YXIgYj0wLGM9YS5sZW5ndGg7YjxjO2IrKyl0aGlzLmV4cGFuZEJ5UG9pbnQoYVtiXSk7cmV0dXJuIHRoaXN9LHNldEZyb21DZW50ZXJBbmRTaXplOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjI7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS5jb3B5KGMpLm11bHRpcGx5U2NhbGFyKC41KTt0aGlzLm1pbi5jb3B5KGIpLnN1YihkKTt0aGlzLm1heC5jb3B5KGIpLmFkZChkKTtyZXR1cm4gdGhpc319KCksY29weTpmdW5jdGlvbihhKXt0aGlzLm1pbi5jb3B5KGEubWluKTt0aGlzLm1heC5jb3B5KGEubWF4KTtyZXR1cm4gdGhpc30sbWFrZUVtcHR5OmZ1bmN0aW9uKCl7dGhpcy5taW4ueD1cclxudGhpcy5taW4ueT1JbmZpbml0eTt0aGlzLm1heC54PXRoaXMubWF4Lnk9LUluZmluaXR5O3JldHVybiB0aGlzfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1heC54PHRoaXMubWluLnh8fHRoaXMubWF4Lnk8dGhpcy5taW4ueX0sY2VudGVyOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuVmVjdG9yMikuYWRkVmVjdG9ycyh0aGlzLm1pbix0aGlzLm1heCkubXVsdGlwbHlTY2FsYXIoLjUpfSxzaXplOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuVmVjdG9yMikuc3ViVmVjdG9ycyh0aGlzLm1heCx0aGlzLm1pbil9LGV4cGFuZEJ5UG9pbnQ6ZnVuY3Rpb24oYSl7dGhpcy5taW4ubWluKGEpO3RoaXMubWF4Lm1heChhKTtyZXR1cm4gdGhpc30sZXhwYW5kQnlWZWN0b3I6ZnVuY3Rpb24oYSl7dGhpcy5taW4uc3ViKGEpO3RoaXMubWF4LmFkZChhKTtyZXR1cm4gdGhpc30sZXhwYW5kQnlTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy5taW4uYWRkU2NhbGFyKC1hKTtcclxudGhpcy5tYXguYWRkU2NhbGFyKGEpO3JldHVybiB0aGlzfSxjb250YWluc1BvaW50OmZ1bmN0aW9uKGEpe3JldHVybiBhLng8dGhpcy5taW4ueHx8YS54PnRoaXMubWF4Lnh8fGEueTx0aGlzLm1pbi55fHxhLnk+dGhpcy5tYXgueT8hMTohMH0sY29udGFpbnNCb3g6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubWluLng8PWEubWluLngmJmEubWF4Lng8PXRoaXMubWF4LngmJnRoaXMubWluLnk8PWEubWluLnkmJmEubWF4Lnk8PXRoaXMubWF4Lnk/ITA6ITF9LGdldFBhcmFtZXRlcjpmdW5jdGlvbihhLGIpe3JldHVybihifHxuZXcgVEhSRUUuVmVjdG9yMikuc2V0KChhLngtdGhpcy5taW4ueCkvKHRoaXMubWF4LngtdGhpcy5taW4ueCksKGEueS10aGlzLm1pbi55KS8odGhpcy5tYXgueS10aGlzLm1pbi55KSl9LGlzSW50ZXJzZWN0aW9uQm94OmZ1bmN0aW9uKGEpe3JldHVybiBhLm1heC54PHRoaXMubWluLnh8fGEubWluLng+dGhpcy5tYXgueHx8YS5tYXgueTx0aGlzLm1pbi55fHxhLm1pbi55PlxyXG50aGlzLm1heC55PyExOiEwfSxjbGFtcFBvaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuKGJ8fG5ldyBUSFJFRS5WZWN0b3IyKS5jb3B5KGEpLmNsYW1wKHRoaXMubWluLHRoaXMubWF4KX0sZGlzdGFuY2VUb1BvaW50OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjI7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBhLmNvcHkoYikuY2xhbXAodGhpcy5taW4sdGhpcy5tYXgpLnN1YihiKS5sZW5ndGgoKX19KCksaW50ZXJzZWN0OmZ1bmN0aW9uKGEpe3RoaXMubWluLm1heChhLm1pbik7dGhpcy5tYXgubWluKGEubWF4KTtyZXR1cm4gdGhpc30sdW5pb246ZnVuY3Rpb24oYSl7dGhpcy5taW4ubWluKGEubWluKTt0aGlzLm1heC5tYXgoYS5tYXgpO3JldHVybiB0aGlzfSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSl7dGhpcy5taW4uYWRkKGEpO3RoaXMubWF4LmFkZChhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLm1pbi5lcXVhbHModGhpcy5taW4pJiZcclxuYS5tYXguZXF1YWxzKHRoaXMubWF4KX0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IFRIUkVFLkJveDIpLmNvcHkodGhpcyl9fTtUSFJFRS5Cb3gzPWZ1bmN0aW9uKGEsYil7dGhpcy5taW49dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5WZWN0b3IzKEluZmluaXR5LEluZmluaXR5LEluZmluaXR5KTt0aGlzLm1heD12b2lkIDAhPT1iP2I6bmV3IFRIUkVFLlZlY3RvcjMoLUluZmluaXR5LC1JbmZpbml0eSwtSW5maW5pdHkpfTtcclxuVEhSRUUuQm94My5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkJveDMsc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5taW4uY29weShhKTt0aGlzLm1heC5jb3B5KGIpO3JldHVybiB0aGlzfSxzZXRGcm9tUG9pbnRzOmZ1bmN0aW9uKGEpe3RoaXMubWFrZUVtcHR5KCk7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aDtiPGM7YisrKXRoaXMuZXhwYW5kQnlQb2ludChhW2JdKTtyZXR1cm4gdGhpc30sc2V0RnJvbUNlbnRlckFuZFNpemU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYixjKXt2YXIgZD1hLmNvcHkoYykubXVsdGlwbHlTY2FsYXIoLjUpO3RoaXMubWluLmNvcHkoYikuc3ViKGQpO3RoaXMubWF4LmNvcHkoYikuYWRkKGQpO3JldHVybiB0aGlzfX0oKSxzZXRGcm9tT2JqZWN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPXRoaXM7Yi51cGRhdGVNYXRyaXhXb3JsZCghMCk7XHJcbnRoaXMubWFrZUVtcHR5KCk7Yi50cmF2ZXJzZShmdW5jdGlvbihiKXt2YXIgZT1iLmdlb21ldHJ5O2lmKHZvaWQgMCE9PWUpaWYoZSBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5KWZvcih2YXIgZj1lLnZlcnRpY2VzLGU9MCxnPWYubGVuZ3RoO2U8ZztlKyspYS5jb3B5KGZbZV0pLGEuYXBwbHlNYXRyaXg0KGIubWF0cml4V29ybGQpLGMuZXhwYW5kQnlQb2ludChhKTtlbHNlIGlmKGUgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeSYmdm9pZCAwIT09ZS5hdHRyaWJ1dGVzLnBvc2l0aW9uKWZvcihmPWUuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheSxlPTAsZz1mLmxlbmd0aDtlPGc7ZSs9MylhLnNldChmW2VdLGZbZSsxXSxmW2UrMl0pLGEuYXBwbHlNYXRyaXg0KGIubWF0cml4V29ybGQpLGMuZXhwYW5kQnlQb2ludChhKX0pO3JldHVybiB0aGlzfX0oKSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMubWluLmNvcHkoYS5taW4pO3RoaXMubWF4LmNvcHkoYS5tYXgpO3JldHVybiB0aGlzfSxcclxubWFrZUVtcHR5OmZ1bmN0aW9uKCl7dGhpcy5taW4ueD10aGlzLm1pbi55PXRoaXMubWluLno9SW5maW5pdHk7dGhpcy5tYXgueD10aGlzLm1heC55PXRoaXMubWF4Lno9LUluZmluaXR5O3JldHVybiB0aGlzfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1heC54PHRoaXMubWluLnh8fHRoaXMubWF4Lnk8dGhpcy5taW4ueXx8dGhpcy5tYXguejx0aGlzLm1pbi56fSxjZW50ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBUSFJFRS5WZWN0b3IzKS5hZGRWZWN0b3JzKHRoaXMubWluLHRoaXMubWF4KS5tdWx0aXBseVNjYWxhciguNSl9LHNpemU6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBUSFJFRS5WZWN0b3IzKS5zdWJWZWN0b3JzKHRoaXMubWF4LHRoaXMubWluKX0sZXhwYW5kQnlQb2ludDpmdW5jdGlvbihhKXt0aGlzLm1pbi5taW4oYSk7dGhpcy5tYXgubWF4KGEpO3JldHVybiB0aGlzfSxleHBhbmRCeVZlY3RvcjpmdW5jdGlvbihhKXt0aGlzLm1pbi5zdWIoYSk7XHJcbnRoaXMubWF4LmFkZChhKTtyZXR1cm4gdGhpc30sZXhwYW5kQnlTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy5taW4uYWRkU2NhbGFyKC1hKTt0aGlzLm1heC5hZGRTY2FsYXIoYSk7cmV0dXJuIHRoaXN9LGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEueDx0aGlzLm1pbi54fHxhLng+dGhpcy5tYXgueHx8YS55PHRoaXMubWluLnl8fGEueT50aGlzLm1heC55fHxhLno8dGhpcy5taW4uenx8YS56PnRoaXMubWF4Lno/ITE6ITB9LGNvbnRhaW5zQm94OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm1pbi54PD1hLm1pbi54JiZhLm1heC54PD10aGlzLm1heC54JiZ0aGlzLm1pbi55PD1hLm1pbi55JiZhLm1heC55PD10aGlzLm1heC55JiZ0aGlzLm1pbi56PD1hLm1pbi56JiZhLm1heC56PD10aGlzLm1heC56PyEwOiExfSxnZXRQYXJhbWV0ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYnx8bmV3IFRIUkVFLlZlY3RvcjMpLnNldCgoYS54LXRoaXMubWluLngpLyh0aGlzLm1heC54LVxyXG50aGlzLm1pbi54KSwoYS55LXRoaXMubWluLnkpLyh0aGlzLm1heC55LXRoaXMubWluLnkpLChhLnotdGhpcy5taW4ueikvKHRoaXMubWF4LnotdGhpcy5taW4ueikpfSxpc0ludGVyc2VjdGlvbkJveDpmdW5jdGlvbihhKXtyZXR1cm4gYS5tYXgueDx0aGlzLm1pbi54fHxhLm1pbi54PnRoaXMubWF4Lnh8fGEubWF4Lnk8dGhpcy5taW4ueXx8YS5taW4ueT50aGlzLm1heC55fHxhLm1heC56PHRoaXMubWluLnp8fGEubWluLno+dGhpcy5tYXguej8hMTohMH0sY2xhbXBQb2ludDpmdW5jdGlvbihhLGIpe3JldHVybihifHxuZXcgVEhSRUUuVmVjdG9yMykuY29weShhKS5jbGFtcCh0aGlzLm1pbix0aGlzLm1heCl9LGRpc3RhbmNlVG9Qb2ludDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gYS5jb3B5KGIpLmNsYW1wKHRoaXMubWluLHRoaXMubWF4KS5zdWIoYikubGVuZ3RoKCl9fSgpLGdldEJvdW5kaW5nU3BoZXJlOmZ1bmN0aW9uKCl7dmFyIGE9XHJcbm5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiKXtiPWJ8fG5ldyBUSFJFRS5TcGhlcmU7Yi5jZW50ZXI9dGhpcy5jZW50ZXIoKTtiLnJhZGl1cz0uNSp0aGlzLnNpemUoYSkubGVuZ3RoKCk7cmV0dXJuIGJ9fSgpLGludGVyc2VjdDpmdW5jdGlvbihhKXt0aGlzLm1pbi5tYXgoYS5taW4pO3RoaXMubWF4Lm1pbihhLm1heCk7cmV0dXJuIHRoaXN9LHVuaW9uOmZ1bmN0aW9uKGEpe3RoaXMubWluLm1pbihhLm1pbik7dGhpcy5tYXgubWF4KGEubWF4KTtyZXR1cm4gdGhpc30sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKCl7dmFyIGE9W25ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzXTtyZXR1cm4gZnVuY3Rpb24oYil7YVswXS5zZXQodGhpcy5taW4ueCx0aGlzLm1pbi55LFxyXG50aGlzLm1pbi56KS5hcHBseU1hdHJpeDQoYik7YVsxXS5zZXQodGhpcy5taW4ueCx0aGlzLm1pbi55LHRoaXMubWF4LnopLmFwcGx5TWF0cml4NChiKTthWzJdLnNldCh0aGlzLm1pbi54LHRoaXMubWF4LnksdGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KGIpO2FbM10uc2V0KHRoaXMubWluLngsdGhpcy5tYXgueSx0aGlzLm1heC56KS5hcHBseU1hdHJpeDQoYik7YVs0XS5zZXQodGhpcy5tYXgueCx0aGlzLm1pbi55LHRoaXMubWluLnopLmFwcGx5TWF0cml4NChiKTthWzVdLnNldCh0aGlzLm1heC54LHRoaXMubWluLnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KGIpO2FbNl0uc2V0KHRoaXMubWF4LngsdGhpcy5tYXgueSx0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQoYik7YVs3XS5zZXQodGhpcy5tYXgueCx0aGlzLm1heC55LHRoaXMubWF4LnopLmFwcGx5TWF0cml4NChiKTt0aGlzLm1ha2VFbXB0eSgpO3RoaXMuc2V0RnJvbVBvaW50cyhhKTtyZXR1cm4gdGhpc319KCksdHJhbnNsYXRlOmZ1bmN0aW9uKGEpe3RoaXMubWluLmFkZChhKTtcclxudGhpcy5tYXguYWRkKGEpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEubWluLmVxdWFscyh0aGlzLm1pbikmJmEubWF4LmVxdWFscyh0aGlzLm1heCl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBUSFJFRS5Cb3gzKS5jb3B5KHRoaXMpfX07VEhSRUUuTWF0cml4Mz1mdW5jdGlvbigpe3RoaXMuZWxlbWVudHM9bmV3IEZsb2F0MzJBcnJheShbMSwwLDAsMCwxLDAsMCwwLDFdKTswPGFyZ3VtZW50cy5sZW5ndGgmJlRIUkVFLmVycm9yKFwiVEhSRUUuTWF0cml4MzogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC5cIil9O1xyXG5USFJFRS5NYXRyaXgzLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuTWF0cml4MyxzZXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPXRoaXMuZWxlbWVudHM7bFswXT1hO2xbM109YjtsWzZdPWM7bFsxXT1kO2xbNF09ZTtsWzddPWY7bFsyXT1nO2xbNV09aDtsWzhdPWs7cmV0dXJuIHRoaXN9LGlkZW50aXR5OmZ1bmN0aW9uKCl7dGhpcy5zZXQoMSwwLDAsMCwxLDAsMCwwLDEpO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe2E9YS5lbGVtZW50czt0aGlzLnNldChhWzBdLGFbM10sYVs2XSxhWzFdLGFbNF0sYVs3XSxhWzJdLGFbNV0sYVs4XSk7cmV0dXJuIHRoaXN9LG11bHRpcGx5VmVjdG9yMzpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXgzKCBtYXRyaXggKSBpbnN0ZWFkLlwiKTtyZXR1cm4gYS5hcHBseU1hdHJpeDModGhpcyl9LFxyXG5tdWx0aXBseVZlY3RvcjNBcnJheTpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVuYW1lZC4gVXNlIG1hdHJpeC5hcHBseVRvVmVjdG9yM0FycmF5KCBhcnJheSApIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLmFwcGx5VG9WZWN0b3IzQXJyYXkoYSl9LGFwcGx5VG9WZWN0b3IzQXJyYXk6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYixjLGQpe3ZvaWQgMD09PWMmJihjPTApO3ZvaWQgMD09PWQmJihkPWIubGVuZ3RoKTtmb3IodmFyIGU9MDtlPGQ7ZSs9MyxjKz0zKWEueD1iW2NdLGEueT1iW2MrMV0sYS56PWJbYysyXSxhLmFwcGx5TWF0cml4Myh0aGlzKSxiW2NdPWEueCxiW2MrMV09YS55LGJbYysyXT1hLno7cmV0dXJuIGJ9fSgpLG11bHRpcGx5U2NhbGFyOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHM7YlswXSo9YTtiWzNdKj1hO2JbNl0qPVxyXG5hO2JbMV0qPWE7Yls0XSo9YTtiWzddKj1hO2JbMl0qPWE7Yls1XSo9YTtiWzhdKj1hO3JldHVybiB0aGlzfSxkZXRlcm1pbmFudDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHMsYj1hWzBdLGM9YVsxXSxkPWFbMl0sZT1hWzNdLGY9YVs0XSxnPWFbNV0saD1hWzZdLGs9YVs3XSxhPWFbOF07cmV0dXJuIGIqZiphLWIqZyprLWMqZSphK2MqZypoK2QqZSprLWQqZipofSxnZXRJbnZlcnNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5lbGVtZW50cyxkPXRoaXMuZWxlbWVudHM7ZFswXT1jWzEwXSpjWzVdLWNbNl0qY1s5XTtkWzFdPS1jWzEwXSpjWzFdK2NbMl0qY1s5XTtkWzJdPWNbNl0qY1sxXS1jWzJdKmNbNV07ZFszXT0tY1sxMF0qY1s0XStjWzZdKmNbOF07ZFs0XT1jWzEwXSpjWzBdLWNbMl0qY1s4XTtkWzVdPS1jWzZdKmNbMF0rY1syXSpjWzRdO2RbNl09Y1s5XSpjWzRdLWNbNV0qY1s4XTtkWzddPS1jWzldKmNbMF0rY1sxXSpjWzhdO2RbOF09Y1s1XSpjWzBdLWNbMV0qY1s0XTtcclxuYz1jWzBdKmRbMF0rY1sxXSpkWzNdK2NbMl0qZFs2XTtpZigwPT09Yyl7aWYoYil0aHJvdyBFcnJvcihcIk1hdHJpeDMuZ2V0SW52ZXJzZSgpOiBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCIpO1RIUkVFLndhcm4oXCJNYXRyaXgzLmdldEludmVyc2UoKTogY2FuJ3QgaW52ZXJ0IG1hdHJpeCwgZGV0ZXJtaW5hbnQgaXMgMFwiKTt0aGlzLmlkZW50aXR5KCk7cmV0dXJuIHRoaXN9dGhpcy5tdWx0aXBseVNjYWxhcigxL2MpO3JldHVybiB0aGlzfSx0cmFuc3Bvc2U6ZnVuY3Rpb24oKXt2YXIgYSxiPXRoaXMuZWxlbWVudHM7YT1iWzFdO2JbMV09YlszXTtiWzNdPWE7YT1iWzJdO2JbMl09Yls2XTtiWzZdPWE7YT1iWzVdO2JbNV09Yls3XTtiWzddPWE7cmV0dXJuIHRoaXN9LGZsYXR0ZW5Ub0FycmF5T2Zmc2V0OmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5lbGVtZW50czthW2JdPWNbMF07YVtiKzFdPWNbMV07YVtiKzJdPWNbMl07YVtiKzNdPWNbM107YVtiKzRdPWNbNF07XHJcbmFbYis1XT1jWzVdO2FbYis2XT1jWzZdO2FbYis3XT1jWzddO2FbYis4XT1jWzhdO3JldHVybiBhfSxnZXROb3JtYWxNYXRyaXg6ZnVuY3Rpb24oYSl7dGhpcy5nZXRJbnZlcnNlKGEpLnRyYW5zcG9zZSgpO3JldHVybiB0aGlzfSx0cmFuc3Bvc2VJbnRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50czthWzBdPWJbMF07YVsxXT1iWzNdO2FbMl09Yls2XTthWzNdPWJbMV07YVs0XT1iWzRdO2FbNV09Yls3XTthWzZdPWJbMl07YVs3XT1iWzVdO2FbOF09Yls4XTtyZXR1cm4gdGhpc30sZnJvbUFycmF5OmZ1bmN0aW9uKGEpe3RoaXMuZWxlbWVudHMuc2V0KGEpO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50cztyZXR1cm5bYVswXSxhWzFdLGFbMl0sYVszXSxhWzRdLGFbNV0sYVs2XSxhWzddLGFbOF1dfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgVEhSRUUuTWF0cml4MykuZnJvbUFycmF5KHRoaXMuZWxlbWVudHMpfX07XHJcblRIUkVFLk1hdHJpeDQ9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnRzPW5ldyBGbG9hdDMyQXJyYXkoWzEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLDAsMCwwLDFdKTswPGFyZ3VtZW50cy5sZW5ndGgmJlRIUkVFLmVycm9yKFwiVEhSRUUuTWF0cml4NDogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC5cIil9O1xyXG5USFJFRS5NYXRyaXg0LnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuTWF0cml4NCxzZXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGssbCxwLHEsbix0LHIscyl7dmFyIHU9dGhpcy5lbGVtZW50czt1WzBdPWE7dVs0XT1iO3VbOF09Yzt1WzEyXT1kO3VbMV09ZTt1WzVdPWY7dVs5XT1nO3VbMTNdPWg7dVsyXT1rO3VbNl09bDt1WzEwXT1wO3VbMTRdPXE7dVszXT1uO3VbN109dDt1WzExXT1yO3VbMTVdPXM7cmV0dXJuIHRoaXN9LGlkZW50aXR5OmZ1bmN0aW9uKCl7dGhpcy5zZXQoMSwwLDAsMCwwLDEsMCwwLDAsMCwxLDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5lbGVtZW50cy5zZXQoYS5lbGVtZW50cyk7cmV0dXJuIHRoaXN9LGV4dHJhY3RQb3NpdGlvbjpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4NDogLmV4dHJhY3RQb3NpdGlvbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNvcHlQb3NpdGlvbigpLlwiKTtyZXR1cm4gdGhpcy5jb3B5UG9zaXRpb24oYSl9LFxyXG5jb3B5UG9zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50czthPWEuZWxlbWVudHM7YlsxMl09YVsxMl07YlsxM109YVsxM107YlsxNF09YVsxNF07cmV0dXJuIHRoaXN9LGV4dHJhY3RCYXNpczpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5lbGVtZW50czthLnNldChkWzBdLGRbMV0sZFsyXSk7Yi5zZXQoZFs0XSxkWzVdLGRbNl0pO2Muc2V0KGRbOF0sZFs5XSxkWzEwXSk7cmV0dXJuIHRoaXN9LG1ha2VCYXNpczpmdW5jdGlvbihhLGIsYyl7dGhpcy5zZXQoYS54LGIueCxjLngsMCxhLnksYi55LGMueSwwLGEueixiLnosYy56LDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LGV4dHJhY3RSb3RhdGlvbjpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz10aGlzLmVsZW1lbnRzO2I9Yi5lbGVtZW50czt2YXIgZD0xL2Euc2V0KGJbMF0sYlsxXSxiWzJdKS5sZW5ndGgoKSxlPTEvYS5zZXQoYls0XSxiWzVdLGJbNl0pLmxlbmd0aCgpLFxyXG5mPTEvYS5zZXQoYls4XSxiWzldLGJbMTBdKS5sZW5ndGgoKTtjWzBdPWJbMF0qZDtjWzFdPWJbMV0qZDtjWzJdPWJbMl0qZDtjWzRdPWJbNF0qZTtjWzVdPWJbNV0qZTtjWzZdPWJbNl0qZTtjWzhdPWJbOF0qZjtjWzldPWJbOV0qZjtjWzEwXT1iWzEwXSpmO3JldHVybiB0aGlzfX0oKSxtYWtlUm90YXRpb25Gcm9tRXVsZXI6ZnVuY3Rpb24oYSl7ITE9PT1hIGluc3RhbmNlb2YgVEhSRUUuRXVsZXImJlRIUkVFLmVycm9yKFwiVEhSRUUuTWF0cml4OiAubWFrZVJvdGF0aW9uRnJvbUV1bGVyKCkgbm93IGV4cGVjdHMgYSBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLlwiKTt2YXIgYj10aGlzLmVsZW1lbnRzLGM9YS54LGQ9YS55LGU9YS56LGY9TWF0aC5jb3MoYyksYz1NYXRoLnNpbihjKSxnPU1hdGguY29zKGQpLGQ9TWF0aC5zaW4oZCksaD1NYXRoLmNvcyhlKSxlPU1hdGguc2luKGUpO2lmKFwiWFlaXCI9PT1hLm9yZGVyKXthPWYqaDt2YXIgaz1mKmUsXHJcbmw9YypoLHA9YyplO2JbMF09ZypoO2JbNF09LWcqZTtiWzhdPWQ7YlsxXT1rK2wqZDtiWzVdPWEtcCpkO2JbOV09LWMqZztiWzJdPXAtYSpkO2JbNl09bCtrKmQ7YlsxMF09ZipnfWVsc2VcIllYWlwiPT09YS5vcmRlcj8oYT1nKmgsaz1nKmUsbD1kKmgscD1kKmUsYlswXT1hK3AqYyxiWzRdPWwqYy1rLGJbOF09ZipkLGJbMV09ZiplLGJbNV09ZipoLGJbOV09LWMsYlsyXT1rKmMtbCxiWzZdPXArYSpjLGJbMTBdPWYqZyk6XCJaWFlcIj09PWEub3JkZXI/KGE9ZypoLGs9ZyplLGw9ZCpoLHA9ZCplLGJbMF09YS1wKmMsYls0XT0tZiplLGJbOF09bCtrKmMsYlsxXT1rK2wqYyxiWzVdPWYqaCxiWzldPXAtYSpjLGJbMl09LWYqZCxiWzZdPWMsYlsxMF09ZipnKTpcIlpZWFwiPT09YS5vcmRlcj8oYT1mKmgsaz1mKmUsbD1jKmgscD1jKmUsYlswXT1nKmgsYls0XT1sKmQtayxiWzhdPWEqZCtwLGJbMV09ZyplLGJbNV09cCpkK2EsYls5XT1rKmQtbCxiWzJdPS1kLGJbNl09YypnLGJbMTBdPWYqZyk6XCJZWlhcIj09PVxyXG5hLm9yZGVyPyhhPWYqZyxrPWYqZCxsPWMqZyxwPWMqZCxiWzBdPWcqaCxiWzRdPXAtYSplLGJbOF09bCplK2ssYlsxXT1lLGJbNV09ZipoLGJbOV09LWMqaCxiWzJdPS1kKmgsYls2XT1rKmUrbCxiWzEwXT1hLXAqZSk6XCJYWllcIj09PWEub3JkZXImJihhPWYqZyxrPWYqZCxsPWMqZyxwPWMqZCxiWzBdPWcqaCxiWzRdPS1lLGJbOF09ZCpoLGJbMV09YSplK3AsYls1XT1mKmgsYls5XT1rKmUtbCxiWzJdPWwqZS1rLGJbNl09YypoLGJbMTBdPXAqZSthKTtiWzNdPTA7Yls3XT0wO2JbMTFdPTA7YlsxMl09MDtiWzEzXT0wO2JbMTRdPTA7YlsxNV09MTtyZXR1cm4gdGhpc30sc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4NDogLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbigpLlwiKTtyZXR1cm4gdGhpcy5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbihhKX0sXHJcbm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHMsYz1hLngsZD1hLnksZT1hLnosZj1hLncsZz1jK2MsaD1kK2Qsaz1lK2U7YT1jKmc7dmFyIGw9YypoLGM9YyprLHA9ZCpoLGQ9ZCprLGU9ZSprLGc9ZipnLGg9ZipoLGY9ZiprO2JbMF09MS0ocCtlKTtiWzRdPWwtZjtiWzhdPWMraDtiWzFdPWwrZjtiWzVdPTEtKGErZSk7Yls5XT1kLWc7YlsyXT1jLWg7Yls2XT1kK2c7YlsxMF09MS0oYStwKTtiWzNdPTA7Yls3XT0wO2JbMTFdPTA7YlsxMl09MDtiWzEzXT0wO2JbMTRdPTA7YlsxNV09MTtyZXR1cm4gdGhpc30sbG9va0F0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMyxjPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihkLGUsZil7dmFyIGc9dGhpcy5lbGVtZW50cztjLnN1YlZlY3RvcnMoZCxlKS5ub3JtYWxpemUoKTswPT09Yy5sZW5ndGgoKSYmKGMuej0xKTthLmNyb3NzVmVjdG9ycyhmLFxyXG5jKS5ub3JtYWxpemUoKTswPT09YS5sZW5ndGgoKSYmKGMueCs9MUUtNCxhLmNyb3NzVmVjdG9ycyhmLGMpLm5vcm1hbGl6ZSgpKTtiLmNyb3NzVmVjdG9ycyhjLGEpO2dbMF09YS54O2dbNF09Yi54O2dbOF09Yy54O2dbMV09YS55O2dbNV09Yi55O2dbOV09Yy55O2dbMl09YS56O2dbNl09Yi56O2dbMTBdPWMuejtyZXR1cm4gdGhpc319KCksbXVsdGlwbHk6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdm9pZCAwIT09Yj8oVEhSRUUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLm11bHRpcGx5TWF0cmljZXMoYSxiKSk6dGhpcy5tdWx0aXBseU1hdHJpY2VzKHRoaXMsYSl9LG11bHRpcGx5TWF0cmljZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmVsZW1lbnRzLGQ9Yi5lbGVtZW50cyxlPXRoaXMuZWxlbWVudHMsZj1jWzBdLGc9Y1s0XSxoPWNbOF0sXHJcbms9Y1sxMl0sbD1jWzFdLHA9Y1s1XSxxPWNbOV0sbj1jWzEzXSx0PWNbMl0scj1jWzZdLHM9Y1sxMF0sdT1jWzE0XSx2PWNbM10seD1jWzddLEQ9Y1sxMV0sYz1jWzE1XSx3PWRbMF0seT1kWzRdLEE9ZFs4XSxFPWRbMTJdLEc9ZFsxXSxGPWRbNV0sej1kWzldLEk9ZFsxM10sVT1kWzJdLE09ZFs2XSxIPWRbMTBdLEw9ZFsxNF0sUD1kWzNdLE49ZFs3XSxSPWRbMTFdLGQ9ZFsxNV07ZVswXT1mKncrZypHK2gqVStrKlA7ZVs0XT1mKnkrZypGK2gqTStrKk47ZVs4XT1mKkErZyp6K2gqSCtrKlI7ZVsxMl09ZipFK2cqSStoKkwraypkO2VbMV09bCp3K3AqRytxKlUrbipQO2VbNV09bCp5K3AqRitxKk0rbipOO2VbOV09bCpBK3AqeitxKkgrbipSO2VbMTNdPWwqRStwKkkrcSpMK24qZDtlWzJdPXQqdytyKkcrcypVK3UqUDtlWzZdPXQqeStyKkYrcypNK3UqTjtlWzEwXT10KkErcip6K3MqSCt1KlI7ZVsxNF09dCpFK3IqSStzKkwrdSpkO2VbM109dip3K3gqRytEKlUrYypQO2VbN109dip5K1xyXG54KkYrRCpNK2MqTjtlWzExXT12KkEreCp6K0QqSCtjKlI7ZVsxNV09dipFK3gqSStEKkwrYypkO3JldHVybiB0aGlzfSxtdWx0aXBseVRvQXJyYXk6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuZWxlbWVudHM7dGhpcy5tdWx0aXBseU1hdHJpY2VzKGEsYik7Y1swXT1kWzBdO2NbMV09ZFsxXTtjWzJdPWRbMl07Y1szXT1kWzNdO2NbNF09ZFs0XTtjWzVdPWRbNV07Y1s2XT1kWzZdO2NbN109ZFs3XTtjWzhdPWRbOF07Y1s5XT1kWzldO2NbMTBdPWRbMTBdO2NbMTFdPWRbMTFdO2NbMTJdPWRbMTJdO2NbMTNdPWRbMTNdO2NbMTRdPWRbMTRdO2NbMTVdPWRbMTVdO3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzO2JbMF0qPWE7Yls0XSo9YTtiWzhdKj1hO2JbMTJdKj1hO2JbMV0qPWE7Yls1XSo9YTtiWzldKj1hO2JbMTNdKj1hO2JbMl0qPWE7Yls2XSo9YTtiWzEwXSo9YTtiWzE0XSo9YTtiWzNdKj1hO2JbN10qPWE7YlsxMV0qPVxyXG5hO2JbMTVdKj1hO3JldHVybiB0aGlzfSxtdWx0aXBseVZlY3RvcjM6ZnVuY3Rpb24oYSl7VEhSRUUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgb3IgdmVjdG9yLmFwcGx5UHJvamVjdGlvbiggbWF0cml4ICkgaW5zdGVhZC5cIik7cmV0dXJuIGEuYXBwbHlQcm9qZWN0aW9uKHRoaXMpfSxtdWx0aXBseVZlY3RvcjQ6ZnVuY3Rpb24oYSl7VEhSRUUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjQoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC5cIik7cmV0dXJuIGEuYXBwbHlNYXRyaXg0KHRoaXMpfSxtdWx0aXBseVZlY3RvcjNBcnJheTpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVuYW1lZC4gVXNlIG1hdHJpeC5hcHBseVRvVmVjdG9yM0FycmF5KCBhcnJheSApIGluc3RlYWQuXCIpO1xyXG5yZXR1cm4gdGhpcy5hcHBseVRvVmVjdG9yM0FycmF5KGEpfSxhcHBseVRvVmVjdG9yM0FycmF5OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXt2b2lkIDA9PT1jJiYoYz0wKTt2b2lkIDA9PT1kJiYoZD1iLmxlbmd0aCk7Zm9yKHZhciBlPTA7ZTxkO2UrPTMsYys9MylhLng9YltjXSxhLnk9YltjKzFdLGEuej1iW2MrMl0sYS5hcHBseU1hdHJpeDQodGhpcyksYltjXT1hLngsYltjKzFdPWEueSxiW2MrMl09YS56O3JldHVybiBifX0oKSxyb3RhdGVBeGlzOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlQXhpcygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4ICkgaW5zdGVhZC5cIik7YS50cmFuc2Zvcm1EaXJlY3Rpb24odGhpcyl9LGNyb3NzVmVjdG9yOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAuY3Jvc3NWZWN0b3IoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC5cIik7XHJcbnJldHVybiBhLmFwcGx5TWF0cml4NCh0aGlzKX0sZGV0ZXJtaW5hbnQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsZW1lbnRzLGI9YVswXSxjPWFbNF0sZD1hWzhdLGU9YVsxMl0sZj1hWzFdLGc9YVs1XSxoPWFbOV0saz1hWzEzXSxsPWFbMl0scD1hWzZdLHE9YVsxMF0sbj1hWzE0XTtyZXR1cm4gYVszXSooK2UqaCpwLWQqaypwLWUqZypxK2MqaypxK2QqZypuLWMqaCpuKSthWzddKigrYipoKm4tYiprKnErZSpmKnEtZCpmKm4rZCprKmwtZSpoKmwpK2FbMTFdKigrYiprKnAtYipnKm4tZSpmKnArYypmKm4rZSpnKmwtYyprKmwpK2FbMTVdKigtZCpnKmwtYipoKnArYipnKnErZCpmKnAtYypmKnErYypoKmwpfSx0cmFuc3Bvc2U6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsZW1lbnRzLGI7Yj1hWzFdO2FbMV09YVs0XTthWzRdPWI7Yj1hWzJdO2FbMl09YVs4XTthWzhdPWI7Yj1hWzZdO2FbNl09YVs5XTthWzldPWI7Yj1hWzNdO2FbM109YVsxMl07YVsxMl09YjtiPWFbN107YVs3XT1hWzEzXTtcclxuYVsxM109YjtiPWFbMTFdO2FbMTFdPWFbMTRdO2FbMTRdPWI7cmV0dXJuIHRoaXN9LGZsYXR0ZW5Ub0FycmF5T2Zmc2V0OmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5lbGVtZW50czthW2JdPWNbMF07YVtiKzFdPWNbMV07YVtiKzJdPWNbMl07YVtiKzNdPWNbM107YVtiKzRdPWNbNF07YVtiKzVdPWNbNV07YVtiKzZdPWNbNl07YVtiKzddPWNbN107YVtiKzhdPWNbOF07YVtiKzldPWNbOV07YVtiKzEwXT1jWzEwXTthW2IrMTFdPWNbMTFdO2FbYisxMl09Y1sxMl07YVtiKzEzXT1jWzEzXTthW2IrMTRdPWNbMTRdO2FbYisxNV09Y1sxNV07cmV0dXJuIGF9LGdldFBvc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKCl7VEhSRUUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5nZXRQb3NpdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbWF0cml4ICkgaW5zdGVhZC5cIik7dmFyIGI9XHJcbnRoaXMuZWxlbWVudHM7cmV0dXJuIGEuc2V0KGJbMTJdLGJbMTNdLGJbMTRdKX19KCksc2V0UG9zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50cztiWzEyXT1hLng7YlsxM109YS55O2JbMTRdPWEuejtyZXR1cm4gdGhpc30sZ2V0SW52ZXJzZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZWxlbWVudHMsZD1hLmVsZW1lbnRzLGU9ZFswXSxmPWRbNF0sZz1kWzhdLGg9ZFsxMl0saz1kWzFdLGw9ZFs1XSxwPWRbOV0scT1kWzEzXSxuPWRbMl0sdD1kWzZdLHI9ZFsxMF0scz1kWzE0XSx1PWRbM10sdj1kWzddLHg9ZFsxMV0sZD1kWzE1XTtjWzBdPXAqcyp2LXEqcip2K3EqdCp4LWwqcyp4LXAqdCpkK2wqcipkO2NbNF09aCpyKnYtZypzKnYtaCp0KngrZipzKngrZyp0KmQtZipyKmQ7Y1s4XT1nKnEqdi1oKnAqditoKmwqeC1mKnEqeC1nKmwqZCtmKnAqZDtjWzEyXT1oKnAqdC1nKnEqdC1oKmwqcitmKnEqcitnKmwqcy1mKnAqcztjWzFdPXEqcip1LXAqcyp1LXEqbip4K1xyXG5rKnMqeCtwKm4qZC1rKnIqZDtjWzVdPWcqcyp1LWgqcip1K2gqbip4LWUqcyp4LWcqbipkK2UqcipkO2NbOV09aCpwKnUtZypxKnUtaCprKngrZSpxKngrZyprKmQtZSpwKmQ7Y1sxM109ZypxKm4taCpwKm4raCprKnItZSpxKnItZyprKnMrZSpwKnM7Y1syXT1sKnMqdS1xKnQqdStxKm4qdi1rKnMqdi1sKm4qZCtrKnQqZDtjWzZdPWgqdCp1LWYqcyp1LWgqbip2K2Uqcyp2K2YqbipkLWUqdCpkO2NbMTBdPWYqcSp1LWgqbCp1K2gqayp2LWUqcSp2LWYqaypkK2UqbCpkO2NbMTRdPWgqbCpuLWYqcSpuLWgqayp0K2UqcSp0K2YqaypzLWUqbCpzO2NbM109cCp0KnUtbCpyKnUtcCpuKnYraypyKnYrbCpuKngtayp0Kng7Y1s3XT1mKnIqdS1nKnQqdStnKm4qdi1lKnIqdi1mKm4qeCtlKnQqeDtjWzExXT1nKmwqdS1mKnAqdS1nKmsqditlKnAqditmKmsqeC1lKmwqeDtjWzE1XT1mKnAqbi1nKmwqbitnKmsqdC1lKnAqdC1mKmsqcitlKmwqcjtjPWUqY1swXStrKmNbNF0rbipjWzhdK3UqY1sxMl07XHJcbmlmKDA9PWMpe2lmKGIpdGhyb3cgRXJyb3IoXCJUSFJFRS5NYXRyaXg0LmdldEludmVyc2UoKTogY2FuJ3QgaW52ZXJ0IG1hdHJpeCwgZGV0ZXJtaW5hbnQgaXMgMFwiKTtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4NC5nZXRJbnZlcnNlKCk6IGNhbid0IGludmVydCBtYXRyaXgsIGRldGVybWluYW50IGlzIDBcIik7dGhpcy5pZGVudGl0eSgpO3JldHVybiB0aGlzfXRoaXMubXVsdGlwbHlTY2FsYXIoMS9jKTtyZXR1cm4gdGhpc30sdHJhbnNsYXRlOmZ1bmN0aW9uKGEpe1RIUkVFLmVycm9yKFwiVEhSRUUuTWF0cml4NDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxyb3RhdGVYOmZ1bmN0aW9uKGEpe1RIUkVFLmVycm9yKFwiVEhSRUUuTWF0cml4NDogLnJvdGF0ZVgoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0scm90YXRlWTpmdW5jdGlvbihhKXtUSFJFRS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVZKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHJvdGF0ZVo6ZnVuY3Rpb24oYSl7VEhSRUUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlWigpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxcclxucm90YXRlQnlBeGlzOmZ1bmN0aW9uKGEsYil7VEhSRUUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlQnlBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHNjYWxlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHMsYz1hLngsZD1hLnk7YT1hLno7YlswXSo9YztiWzRdKj1kO2JbOF0qPWE7YlsxXSo9YztiWzVdKj1kO2JbOV0qPWE7YlsyXSo9YztiWzZdKj1kO2JbMTBdKj1hO2JbM10qPWM7Yls3XSo9ZDtiWzExXSo9YTtyZXR1cm4gdGhpc30sZ2V0TWF4U2NhbGVPbkF4aXM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsZW1lbnRzO3JldHVybiBNYXRoLnNxcnQoTWF0aC5tYXgoYVswXSphWzBdK2FbMV0qYVsxXSthWzJdKmFbMl0sTWF0aC5tYXgoYVs0XSphWzRdK2FbNV0qYVs1XSthWzZdKmFbNl0sYVs4XSphWzhdK2FbOV0qYVs5XSthWzEwXSphWzEwXSkpKX0sbWFrZVRyYW5zbGF0aW9uOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnNldCgxLDAsMCxhLDAsMSwwLGIsMCwwLDEsXHJcbmMsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VSb3RhdGlvblg6ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5jb3MoYSk7YT1NYXRoLnNpbihhKTt0aGlzLnNldCgxLDAsMCwwLDAsYiwtYSwwLDAsYSxiLDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VSb3RhdGlvblk6ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5jb3MoYSk7YT1NYXRoLnNpbihhKTt0aGlzLnNldChiLDAsYSwwLDAsMSwwLDAsLWEsMCxiLDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VSb3RhdGlvblo6ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5jb3MoYSk7YT1NYXRoLnNpbihhKTt0aGlzLnNldChiLC1hLDAsMCxhLGIsMCwwLDAsMCwxLDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VSb3RhdGlvbkF4aXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1NYXRoLmNvcyhiKSxkPU1hdGguc2luKGIpLGU9MS1jLGY9YS54LGc9YS55LGg9YS56LGs9ZSpmLGw9ZSpnO3RoaXMuc2V0KGsqZitjLGsqZy1kKmgsaypoK2QqZywwLGsqZytcclxuZCpoLGwqZytjLGwqaC1kKmYsMCxrKmgtZCpnLGwqaCtkKmYsZSpoKmgrYywwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxtYWtlU2NhbGU6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuc2V0KGEsMCwwLDAsMCxiLDAsMCwwLDAsYywwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxjb21wb3NlOmZ1bmN0aW9uKGEsYixjKXt0aGlzLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKGIpO3RoaXMuc2NhbGUoYyk7dGhpcy5zZXRQb3NpdGlvbihhKTtyZXR1cm4gdGhpc30sZGVjb21wb3NlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuTWF0cml4NDtyZXR1cm4gZnVuY3Rpb24oYyxkLGUpe3ZhciBmPXRoaXMuZWxlbWVudHMsZz1hLnNldChmWzBdLGZbMV0sZlsyXSkubGVuZ3RoKCksaD1hLnNldChmWzRdLGZbNV0sZls2XSkubGVuZ3RoKCksaz1hLnNldChmWzhdLGZbOV0sZlsxMF0pLmxlbmd0aCgpOzA+dGhpcy5kZXRlcm1pbmFudCgpJiYoZz0tZyk7Yy54PWZbMTJdO1xyXG5jLnk9ZlsxM107Yy56PWZbMTRdO2IuZWxlbWVudHMuc2V0KHRoaXMuZWxlbWVudHMpO2M9MS9nO3ZhciBmPTEvaCxsPTEvaztiLmVsZW1lbnRzWzBdKj1jO2IuZWxlbWVudHNbMV0qPWM7Yi5lbGVtZW50c1syXSo9YztiLmVsZW1lbnRzWzRdKj1mO2IuZWxlbWVudHNbNV0qPWY7Yi5lbGVtZW50c1s2XSo9ZjtiLmVsZW1lbnRzWzhdKj1sO2IuZWxlbWVudHNbOV0qPWw7Yi5lbGVtZW50c1sxMF0qPWw7ZC5zZXRGcm9tUm90YXRpb25NYXRyaXgoYik7ZS54PWc7ZS55PWg7ZS56PWs7cmV0dXJuIHRoaXN9fSgpLG1ha2VGcnVzdHVtOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgZz10aGlzLmVsZW1lbnRzO2dbMF09MiplLyhiLWEpO2dbNF09MDtnWzhdPShiK2EpLyhiLWEpO2dbMTJdPTA7Z1sxXT0wO2dbNV09MiplLyhkLWMpO2dbOV09KGQrYykvKGQtYyk7Z1sxM109MDtnWzJdPTA7Z1s2XT0wO2dbMTBdPS0oZitlKS8oZi1lKTtnWzE0XT0tMipmKmUvKGYtZSk7Z1szXT0wO2dbN109MDtcclxuZ1sxMV09LTE7Z1sxNV09MDtyZXR1cm4gdGhpc30sbWFrZVBlcnNwZWN0aXZlOmZ1bmN0aW9uKGEsYixjLGQpe2E9YypNYXRoLnRhbihUSFJFRS5NYXRoLmRlZ1RvUmFkKC41KmEpKTt2YXIgZT0tYTtyZXR1cm4gdGhpcy5tYWtlRnJ1c3R1bShlKmIsYSpiLGUsYSxjLGQpfSxtYWtlT3J0aG9ncmFwaGljOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgZz10aGlzLmVsZW1lbnRzLGg9Yi1hLGs9Yy1kLGw9Zi1lO2dbMF09Mi9oO2dbNF09MDtnWzhdPTA7Z1sxMl09LSgoYithKS9oKTtnWzFdPTA7Z1s1XT0yL2s7Z1s5XT0wO2dbMTNdPS0oKGMrZCkvayk7Z1syXT0wO2dbNl09MDtnWzEwXT0tMi9sO2dbMTRdPS0oKGYrZSkvbCk7Z1szXT0wO2dbN109MDtnWzExXT0wO2dbMTVdPTE7cmV0dXJuIHRoaXN9LGZyb21BcnJheTpmdW5jdGlvbihhKXt0aGlzLmVsZW1lbnRzLnNldChhKTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHM7cmV0dXJuW2FbMF0sXHJcbmFbMV0sYVsyXSxhWzNdLGFbNF0sYVs1XSxhWzZdLGFbN10sYVs4XSxhWzldLGFbMTBdLGFbMTFdLGFbMTJdLGFbMTNdLGFbMTRdLGFbMTVdXX0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IFRIUkVFLk1hdHJpeDQpLmZyb21BcnJheSh0aGlzLmVsZW1lbnRzKX19O1RIUkVFLlJheT1mdW5jdGlvbihhLGIpe3RoaXMub3JpZ2luPXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuVmVjdG9yMzt0aGlzLmRpcmVjdGlvbj12b2lkIDAhPT1iP2I6bmV3IFRIUkVFLlZlY3RvcjN9O1xyXG5USFJFRS5SYXkucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5SYXksc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5vcmlnaW4uY29weShhKTt0aGlzLmRpcmVjdGlvbi5jb3B5KGIpO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMub3JpZ2luLmNvcHkoYS5vcmlnaW4pO3RoaXMuZGlyZWN0aW9uLmNvcHkoYS5kaXJlY3Rpb24pO3JldHVybiB0aGlzfSxhdDpmdW5jdGlvbihhLGIpe3JldHVybihifHxuZXcgVEhSRUUuVmVjdG9yMykuY29weSh0aGlzLmRpcmVjdGlvbikubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMub3JpZ2luKX0scmVjYXN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe3RoaXMub3JpZ2luLmNvcHkodGhpcy5hdChiLGEpKTtyZXR1cm4gdGhpc319KCksY2xvc2VzdFBvaW50VG9Qb2ludDpmdW5jdGlvbihhLGIpe3ZhciBjPWJ8fG5ldyBUSFJFRS5WZWN0b3IzO2Muc3ViVmVjdG9ycyhhLHRoaXMub3JpZ2luKTtcclxudmFyIGQ9Yy5kb3QodGhpcy5kaXJlY3Rpb24pO3JldHVybiAwPmQ/Yy5jb3B5KHRoaXMub3JpZ2luKTpjLmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKGQpLmFkZCh0aGlzLm9yaWdpbil9LGRpc3RhbmNlVG9Qb2ludDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1hLnN1YlZlY3RvcnMoYix0aGlzLm9yaWdpbikuZG90KHRoaXMuZGlyZWN0aW9uKTtpZigwPmMpcmV0dXJuIHRoaXMub3JpZ2luLmRpc3RhbmNlVG8oYik7YS5jb3B5KHRoaXMuZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcihjKS5hZGQodGhpcy5vcmlnaW4pO3JldHVybiBhLmRpc3RhbmNlVG8oYil9fSgpLGRpc3RhbmNlU3FUb1NlZ21lbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzLGM9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGQsZSxmLGcpe2EuY29weShkKS5hZGQoZSkubXVsdGlwbHlTY2FsYXIoLjUpO1xyXG5iLmNvcHkoZSkuc3ViKGQpLm5vcm1hbGl6ZSgpO2MuY29weSh0aGlzLm9yaWdpbikuc3ViKGEpO3ZhciBoPS41KmQuZGlzdGFuY2VUbyhlKSxrPS10aGlzLmRpcmVjdGlvbi5kb3QoYiksbD1jLmRvdCh0aGlzLmRpcmVjdGlvbikscD0tYy5kb3QoYikscT1jLmxlbmd0aFNxKCksbj1NYXRoLmFicygxLWsqayksdDswPG4/KGQ9aypwLWwsZT1rKmwtcCx0PWgqbiwwPD1kP2U+PS10P2U8PXQ/KGg9MS9uLGQqPWgsZSo9aCxrPWQqKGQrayplKzIqbCkrZSooaypkK2UrMipwKStxKTooZT1oLGQ9TWF0aC5tYXgoMCwtKGsqZStsKSksaz0tZCpkK2UqKGUrMipwKStxKTooZT0taCxkPU1hdGgubWF4KDAsLShrKmUrbCkpLGs9LWQqZCtlKihlKzIqcCkrcSk6ZTw9LXQ/KGQ9TWF0aC5tYXgoMCwtKC1rKmgrbCkpLGU9MDxkPy1oOk1hdGgubWluKE1hdGgubWF4KC1oLC1wKSxoKSxrPS1kKmQrZSooZSsyKnApK3EpOmU8PXQ/KGQ9MCxlPU1hdGgubWluKE1hdGgubWF4KC1oLC1wKSxoKSxrPWUqKGUrXHJcbjIqcCkrcSk6KGQ9TWF0aC5tYXgoMCwtKGsqaCtsKSksZT0wPGQ/aDpNYXRoLm1pbihNYXRoLm1heCgtaCwtcCksaCksaz0tZCpkK2UqKGUrMipwKStxKSk6KGU9MDxrPy1oOmgsZD1NYXRoLm1heCgwLC0oayplK2wpKSxrPS1kKmQrZSooZSsyKnApK3EpO2YmJmYuY29weSh0aGlzLmRpcmVjdGlvbikubXVsdGlwbHlTY2FsYXIoZCkuYWRkKHRoaXMub3JpZ2luKTtnJiZnLmNvcHkoYikubXVsdGlwbHlTY2FsYXIoZSkuYWRkKGEpO3JldHVybiBrfX0oKSxpc0ludGVyc2VjdGlvblNwaGVyZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQoYS5jZW50ZXIpPD1hLnJhZGl1c30saW50ZXJzZWN0U3BoZXJlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5zdWJWZWN0b3JzKGIuY2VudGVyLHRoaXMub3JpZ2luKTt2YXIgZD1hLmRvdCh0aGlzLmRpcmVjdGlvbiksZT1hLmRvdChhKS1kKmQsZj1iLnJhZGl1cypiLnJhZGl1cztcclxuaWYoZT5mKXJldHVybiBudWxsO2Y9TWF0aC5zcXJ0KGYtZSk7ZT1kLWY7ZCs9ZjtyZXR1cm4gMD5lJiYwPmQ/bnVsbDowPmU/dGhpcy5hdChkLGMpOnRoaXMuYXQoZSxjKX19KCksaXNJbnRlcnNlY3Rpb25QbGFuZTpmdW5jdGlvbihhKXt2YXIgYj1hLmRpc3RhbmNlVG9Qb2ludCh0aGlzLm9yaWdpbik7cmV0dXJuIDA9PT1ifHwwPmEubm9ybWFsLmRvdCh0aGlzLmRpcmVjdGlvbikqYj8hMDohMX0sZGlzdGFuY2VUb1BsYW5lOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9ybWFsLmRvdCh0aGlzLmRpcmVjdGlvbik7aWYoMD09YilyZXR1cm4gMD09YS5kaXN0YW5jZVRvUG9pbnQodGhpcy5vcmlnaW4pPzA6bnVsbDthPS0odGhpcy5vcmlnaW4uZG90KGEubm9ybWFsKSthLmNvbnN0YW50KS9iO3JldHVybiAwPD1hP2E6bnVsbH0saW50ZXJzZWN0UGxhbmU6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmRpc3RhbmNlVG9QbGFuZShhKTtyZXR1cm4gbnVsbD09PWM/bnVsbDp0aGlzLmF0KGMsYil9LFxyXG5pc0ludGVyc2VjdGlvbkJveDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gbnVsbCE9PXRoaXMuaW50ZXJzZWN0Qm94KGIsYSl9fSgpLGludGVyc2VjdEJveDpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmLGc7ZD0xL3RoaXMuZGlyZWN0aW9uLng7Zj0xL3RoaXMuZGlyZWN0aW9uLnk7Zz0xL3RoaXMuZGlyZWN0aW9uLno7dmFyIGg9dGhpcy5vcmlnaW47MDw9ZD8oYz0oYS5taW4ueC1oLngpKmQsZCo9YS5tYXgueC1oLngpOihjPShhLm1heC54LWgueCkqZCxkKj1hLm1pbi54LWgueCk7MDw9Zj8oZT0oYS5taW4ueS1oLnkpKmYsZio9YS5tYXgueS1oLnkpOihlPShhLm1heC55LWgueSkqZixmKj1hLm1pbi55LWgueSk7aWYoYz5mfHxlPmQpcmV0dXJuIG51bGw7aWYoZT5jfHxjIT09YyljPWU7aWYoZjxkfHxkIT09ZClkPWY7MDw9Zz8oZT0oYS5taW4uei1oLnopKmcsZyo9YS5tYXguei1oLnopOihlPShhLm1heC56LWgueikqXHJcbmcsZyo9YS5taW4uei1oLnopO2lmKGM+Z3x8ZT5kKXJldHVybiBudWxsO2lmKGU+Y3x8YyE9PWMpYz1lO2lmKGc8ZHx8ZCE9PWQpZD1nO3JldHVybiAwPmQ/bnVsbDp0aGlzLmF0KDA8PWM/YzpkLGIpfSxpbnRlcnNlY3RUcmlhbmdsZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjMsYz1uZXcgVEhSRUUuVmVjdG9yMyxkPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihlLGYsZyxoLGspe2Iuc3ViVmVjdG9ycyhmLGUpO2Muc3ViVmVjdG9ycyhnLGUpO2QuY3Jvc3NWZWN0b3JzKGIsYyk7Zj10aGlzLmRpcmVjdGlvbi5kb3QoZCk7aWYoMDxmKXtpZihoKXJldHVybiBudWxsO2g9MX1lbHNlIGlmKDA+ZiloPS0xLGY9LWY7ZWxzZSByZXR1cm4gbnVsbDthLnN1YlZlY3RvcnModGhpcy5vcmlnaW4sZSk7ZT1oKnRoaXMuZGlyZWN0aW9uLmRvdChjLmNyb3NzVmVjdG9ycyhhLGMpKTtpZigwPmUpcmV0dXJuIG51bGw7Zz1oKnRoaXMuZGlyZWN0aW9uLmRvdChiLmNyb3NzKGEpKTtcclxuaWYoMD5nfHxlK2c+ZilyZXR1cm4gbnVsbDtlPS1oKmEuZG90KGQpO3JldHVybiAwPmU/bnVsbDp0aGlzLmF0KGUvZixrKX19KCksYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKGEpe3RoaXMuZGlyZWN0aW9uLmFkZCh0aGlzLm9yaWdpbikuYXBwbHlNYXRyaXg0KGEpO3RoaXMub3JpZ2luLmFwcGx5TWF0cml4NChhKTt0aGlzLmRpcmVjdGlvbi5zdWIodGhpcy5vcmlnaW4pO3RoaXMuZGlyZWN0aW9uLm5vcm1hbGl6ZSgpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEub3JpZ2luLmVxdWFscyh0aGlzLm9yaWdpbikmJmEuZGlyZWN0aW9uLmVxdWFscyh0aGlzLmRpcmVjdGlvbil9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBUSFJFRS5SYXkpLmNvcHkodGhpcyl9fTtUSFJFRS5TcGhlcmU9ZnVuY3Rpb24oYSxiKXt0aGlzLmNlbnRlcj12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy5yYWRpdXM9dm9pZCAwIT09Yj9iOjB9O1xyXG5USFJFRS5TcGhlcmUucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5TcGhlcmUsc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5jZW50ZXIuY29weShhKTt0aGlzLnJhZGl1cz1iO3JldHVybiB0aGlzfSxzZXRGcm9tUG9pbnRzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkJveDM7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7dmFyIGQ9dGhpcy5jZW50ZXI7dm9pZCAwIT09Yz9kLmNvcHkoYyk6YS5zZXRGcm9tUG9pbnRzKGIpLmNlbnRlcihkKTtmb3IodmFyIGU9MCxmPTAsZz1iLmxlbmd0aDtmPGc7ZisrKWU9TWF0aC5tYXgoZSxkLmRpc3RhbmNlVG9TcXVhcmVkKGJbZl0pKTt0aGlzLnJhZGl1cz1NYXRoLnNxcnQoZSk7cmV0dXJuIHRoaXN9fSgpLGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5jZW50ZXIuY29weShhLmNlbnRlcik7dGhpcy5yYWRpdXM9YS5yYWRpdXM7cmV0dXJuIHRoaXN9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIDA+PXRoaXMucmFkaXVzfSxjb250YWluc1BvaW50OmZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMuY2VudGVyKTw9XHJcbnRoaXMucmFkaXVzKnRoaXMucmFkaXVzfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzdGFuY2VUbyh0aGlzLmNlbnRlciktdGhpcy5yYWRpdXN9LGludGVyc2VjdHNTcGhlcmU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5yYWRpdXMrYS5yYWRpdXM7cmV0dXJuIGEuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMuY2VudGVyKTw9YipifSxjbGFtcFBvaW50OmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoYSksZD1ifHxuZXcgVEhSRUUuVmVjdG9yMztkLmNvcHkoYSk7Yz50aGlzLnJhZGl1cyp0aGlzLnJhZGl1cyYmKGQuc3ViKHRoaXMuY2VudGVyKS5ub3JtYWxpemUoKSxkLm11bHRpcGx5U2NhbGFyKHRoaXMucmFkaXVzKS5hZGQodGhpcy5jZW50ZXIpKTtyZXR1cm4gZH0sZ2V0Qm91bmRpbmdCb3g6ZnVuY3Rpb24oYSl7YT1hfHxuZXcgVEhSRUUuQm94MzthLnNldCh0aGlzLmNlbnRlcix0aGlzLmNlbnRlcik7YS5leHBhbmRCeVNjYWxhcih0aGlzLnJhZGl1cyk7XHJcbnJldHVybiBhfSxhcHBseU1hdHJpeDQ6ZnVuY3Rpb24oYSl7dGhpcy5jZW50ZXIuYXBwbHlNYXRyaXg0KGEpO3RoaXMucmFkaXVzKj1hLmdldE1heFNjYWxlT25BeGlzKCk7cmV0dXJuIHRoaXN9LHRyYW5zbGF0ZTpmdW5jdGlvbihhKXt0aGlzLmNlbnRlci5hZGQoYSk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5jZW50ZXIuZXF1YWxzKHRoaXMuY2VudGVyKSYmYS5yYWRpdXM9PT10aGlzLnJhZGl1c30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IFRIUkVFLlNwaGVyZSkuY29weSh0aGlzKX19O1xyXG5USFJFRS5GcnVzdHVtPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLnBsYW5lcz1bdm9pZCAwIT09YT9hOm5ldyBUSFJFRS5QbGFuZSx2b2lkIDAhPT1iP2I6bmV3IFRIUkVFLlBsYW5lLHZvaWQgMCE9PWM/YzpuZXcgVEhSRUUuUGxhbmUsdm9pZCAwIT09ZD9kOm5ldyBUSFJFRS5QbGFuZSx2b2lkIDAhPT1lP2U6bmV3IFRIUkVFLlBsYW5lLHZvaWQgMCE9PWY/ZjpuZXcgVEhSRUUuUGxhbmVdfTtcclxuVEhSRUUuRnJ1c3R1bS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkZydXN0dW0sc2V0OmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgZz10aGlzLnBsYW5lcztnWzBdLmNvcHkoYSk7Z1sxXS5jb3B5KGIpO2dbMl0uY29weShjKTtnWzNdLmNvcHkoZCk7Z1s0XS5jb3B5KGUpO2dbNV0uY29weShmKTtyZXR1cm4gdGhpc30sY29weTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5wbGFuZXMsYz0wOzY+YztjKyspYltjXS5jb3B5KGEucGxhbmVzW2NdKTtyZXR1cm4gdGhpc30sc2V0RnJvbU1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBsYW5lcyxjPWEuZWxlbWVudHM7YT1jWzBdO3ZhciBkPWNbMV0sZT1jWzJdLGY9Y1szXSxnPWNbNF0saD1jWzVdLGs9Y1s2XSxsPWNbN10scD1jWzhdLHE9Y1s5XSxuPWNbMTBdLHQ9Y1sxMV0scj1jWzEyXSxzPWNbMTNdLHU9Y1sxNF0sYz1jWzE1XTtiWzBdLnNldENvbXBvbmVudHMoZi1hLGwtZyx0LXAsYy1yKS5ub3JtYWxpemUoKTtiWzFdLnNldENvbXBvbmVudHMoZitcclxuYSxsK2csdCtwLGMrcikubm9ybWFsaXplKCk7YlsyXS5zZXRDb21wb25lbnRzKGYrZCxsK2gsdCtxLGMrcykubm9ybWFsaXplKCk7YlszXS5zZXRDb21wb25lbnRzKGYtZCxsLWgsdC1xLGMtcykubm9ybWFsaXplKCk7Yls0XS5zZXRDb21wb25lbnRzKGYtZSxsLWssdC1uLGMtdSkubm9ybWFsaXplKCk7Yls1XS5zZXRDb21wb25lbnRzKGYrZSxsK2ssdCtuLGMrdSkubm9ybWFsaXplKCk7cmV0dXJuIHRoaXN9LGludGVyc2VjdHNPYmplY3Q6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuU3BoZXJlO3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLmdlb21ldHJ5O251bGw9PT1jLmJvdW5kaW5nU3BoZXJlJiZjLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2EuY29weShjLmJvdW5kaW5nU3BoZXJlKTthLmFwcGx5TWF0cml4NChiLm1hdHJpeFdvcmxkKTtyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKGEpfX0oKSxpbnRlcnNlY3RzU3BoZXJlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucGxhbmVzLFxyXG5jPWEuY2VudGVyO2E9LWEucmFkaXVzO2Zvcih2YXIgZD0wOzY+ZDtkKyspaWYoYltkXS5kaXN0YW5jZVRvUG9pbnQoYyk8YSlyZXR1cm4hMTtyZXR1cm4hMH0saW50ZXJzZWN0c0JveDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGMpe2Zvcih2YXIgZD10aGlzLnBsYW5lcyxlPTA7Nj5lO2UrKyl7dmFyIGY9ZFtlXTthLng9MDxmLm5vcm1hbC54P2MubWluLng6Yy5tYXgueDtiLng9MDxmLm5vcm1hbC54P2MubWF4Lng6Yy5taW4ueDthLnk9MDxmLm5vcm1hbC55P2MubWluLnk6Yy5tYXgueTtiLnk9MDxmLm5vcm1hbC55P2MubWF4Lnk6Yy5taW4ueTthLno9MDxmLm5vcm1hbC56P2MubWluLno6Yy5tYXguejtiLno9MDxmLm5vcm1hbC56P2MubWF4Lno6Yy5taW4uejt2YXIgZz1mLmRpc3RhbmNlVG9Qb2ludChhKSxmPWYuZGlzdGFuY2VUb1BvaW50KGIpO2lmKDA+ZyYmMD5mKXJldHVybiExfXJldHVybiEwfX0oKSxcclxuY29udGFpbnNQb2ludDpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5wbGFuZXMsYz0wOzY+YztjKyspaWYoMD5iW2NdLmRpc3RhbmNlVG9Qb2ludChhKSlyZXR1cm4hMTtyZXR1cm4hMH0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IFRIUkVFLkZydXN0dW0pLmNvcHkodGhpcyl9fTtUSFJFRS5QbGFuZT1mdW5jdGlvbihhLGIpe3RoaXMubm9ybWFsPXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuVmVjdG9yMygxLDAsMCk7dGhpcy5jb25zdGFudD12b2lkIDAhPT1iP2I6MH07XHJcblRIUkVFLlBsYW5lLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuUGxhbmUsc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5ub3JtYWwuY29weShhKTt0aGlzLmNvbnN0YW50PWI7cmV0dXJuIHRoaXN9LHNldENvbXBvbmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5ub3JtYWwuc2V0KGEsYixjKTt0aGlzLmNvbnN0YW50PWQ7cmV0dXJuIHRoaXN9LHNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50OmZ1bmN0aW9uKGEsYil7dGhpcy5ub3JtYWwuY29weShhKTt0aGlzLmNvbnN0YW50PS1iLmRvdCh0aGlzLm5vcm1hbCk7cmV0dXJuIHRoaXN9LHNldEZyb21Db3BsYW5hclBvaW50czpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGMsZCxlKXtkPWEuc3ViVmVjdG9ycyhlLGQpLmNyb3NzKGIuc3ViVmVjdG9ycyhjLGQpKS5ub3JtYWxpemUoKTt0aGlzLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KGQsXHJcbmMpO3JldHVybiB0aGlzfX0oKSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMubm9ybWFsLmNvcHkoYS5ub3JtYWwpO3RoaXMuY29uc3RhbnQ9YS5jb25zdGFudDtyZXR1cm4gdGhpc30sbm9ybWFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9MS90aGlzLm5vcm1hbC5sZW5ndGgoKTt0aGlzLm5vcm1hbC5tdWx0aXBseVNjYWxhcihhKTt0aGlzLmNvbnN0YW50Kj1hO3JldHVybiB0aGlzfSxuZWdhdGU6ZnVuY3Rpb24oKXt0aGlzLmNvbnN0YW50Kj0tMTt0aGlzLm5vcm1hbC5uZWdhdGUoKTtyZXR1cm4gdGhpc30sZGlzdGFuY2VUb1BvaW50OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm5vcm1hbC5kb3QoYSkrdGhpcy5jb25zdGFudH0sZGlzdGFuY2VUb1NwaGVyZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQoYS5jZW50ZXIpLWEucmFkaXVzfSxwcm9qZWN0UG9pbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5vcnRob1BvaW50KGEsYikuc3ViKGEpLm5lZ2F0ZSgpfSxvcnRob1BvaW50OmZ1bmN0aW9uKGEsXHJcbmIpe3ZhciBjPXRoaXMuZGlzdGFuY2VUb1BvaW50KGEpO3JldHVybihifHxuZXcgVEhSRUUuVmVjdG9yMykuY29weSh0aGlzLm5vcm1hbCkubXVsdGlwbHlTY2FsYXIoYyl9LGlzSW50ZXJzZWN0aW9uTGluZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmRpc3RhbmNlVG9Qb2ludChhLnN0YXJ0KTthPXRoaXMuZGlzdGFuY2VUb1BvaW50KGEuZW5kKTtyZXR1cm4gMD5iJiYwPGF8fDA+YSYmMDxifSxpbnRlcnNlY3RMaW5lOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7dmFyIGQ9Y3x8bmV3IFRIUkVFLlZlY3RvcjMsZT1iLmRlbHRhKGEpLGY9dGhpcy5ub3JtYWwuZG90KGUpO2lmKDA9PWYpe2lmKDA9PXRoaXMuZGlzdGFuY2VUb1BvaW50KGIuc3RhcnQpKXJldHVybiBkLmNvcHkoYi5zdGFydCl9ZWxzZSByZXR1cm4gZj0tKGIuc3RhcnQuZG90KHRoaXMubm9ybWFsKSt0aGlzLmNvbnN0YW50KS9mLDA+Znx8MTxmP3ZvaWQgMDpkLmNvcHkoZSkubXVsdGlwbHlTY2FsYXIoZikuYWRkKGIuc3RhcnQpfX0oKSxcclxuY29wbGFuYXJQb2ludDpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IFRIUkVFLlZlY3RvcjMpLmNvcHkodGhpcy5ub3JtYWwpLm11bHRpcGx5U2NhbGFyKC10aGlzLmNvbnN0YW50KX0sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMyxjPW5ldyBUSFJFRS5NYXRyaXgzO3JldHVybiBmdW5jdGlvbihkLGUpe3ZhciBmPWV8fGMuZ2V0Tm9ybWFsTWF0cml4KGQpLGY9YS5jb3B5KHRoaXMubm9ybWFsKS5hcHBseU1hdHJpeDMoZiksZz10aGlzLmNvcGxhbmFyUG9pbnQoYik7Zy5hcHBseU1hdHJpeDQoZCk7dGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChmLGcpO3JldHVybiB0aGlzfX0oKSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSl7dGhpcy5jb25zdGFudC09YS5kb3QodGhpcy5ub3JtYWwpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEubm9ybWFsLmVxdWFscyh0aGlzLm5vcm1hbCkmJlxyXG5hLmNvbnN0YW50PT10aGlzLmNvbnN0YW50fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgVEhSRUUuUGxhbmUpLmNvcHkodGhpcyl9fTtcclxuVEhSRUUuTWF0aD17Z2VuZXJhdGVVVUlEOmZ1bmN0aW9uKCl7dmFyIGE9XCIwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLnNwbGl0KFwiXCIpLGI9QXJyYXkoMzYpLGM9MCxkO3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgZT0wOzM2PmU7ZSsrKTg9PWV8fDEzPT1lfHwxOD09ZXx8MjM9PWU/YltlXT1cIi1cIjoxND09ZT9iW2VdPVwiNFwiOigyPj1jJiYoYz0zMzU1NDQzMisxNjc3NzIxNipNYXRoLnJhbmRvbSgpfDApLGQ9YyYxNSxjPj49NCxiW2VdPWFbMTk9PWU/ZCYzfDg6ZF0pO3JldHVybiBiLmpvaW4oXCJcIil9fSgpLGNsYW1wOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYTxiP2I6YT5jP2M6YX0sY2xhbXBCb3R0b206ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYTxiP2I6YX0sbWFwTGluZWFyOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGQrKGEtYikqKGUtZCkvKGMtYil9LHNtb290aHN0ZXA6ZnVuY3Rpb24oYSxiLGMpe2lmKGE8PVxyXG5iKXJldHVybiAwO2lmKGE+PWMpcmV0dXJuIDE7YT0oYS1iKS8oYy1iKTtyZXR1cm4gYSphKigzLTIqYSl9LHNtb290aGVyc3RlcDpmdW5jdGlvbihhLGIsYyl7aWYoYTw9YilyZXR1cm4gMDtpZihhPj1jKXJldHVybiAxO2E9KGEtYikvKGMtYik7cmV0dXJuIGEqYSphKihhKig2KmEtMTUpKzEwKX0scmFuZG9tMTY6ZnVuY3Rpb24oKXtyZXR1cm4oNjUyODAqTWF0aC5yYW5kb20oKSsyNTUqTWF0aC5yYW5kb20oKSkvNjU1MzV9LHJhbmRJbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gTWF0aC5mbG9vcih0aGlzLnJhbmRGbG9hdChhLGIpKX0scmFuZEZsb2F0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGErTWF0aC5yYW5kb20oKSooYi1hKX0scmFuZEZsb2F0U3ByZWFkOmZ1bmN0aW9uKGEpe3JldHVybiBhKiguNS1NYXRoLnJhbmRvbSgpKX0sZGVnVG9SYWQ6ZnVuY3Rpb24oKXt2YXIgYT1NYXRoLlBJLzE4MDtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGIqYX19KCkscmFkVG9EZWc6ZnVuY3Rpb24oKXt2YXIgYT1cclxuMTgwL01hdGguUEk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBiKmF9fSgpLGlzUG93ZXJPZlR3bzpmdW5jdGlvbihhKXtyZXR1cm4gMD09PShhJmEtMSkmJjAhPT1hfSxuZXh0UG93ZXJPZlR3bzpmdW5jdGlvbihhKXthLS07YXw9YT4+MTthfD1hPj4yO2F8PWE+PjQ7YXw9YT4+ODthfD1hPj4xNjthKys7cmV0dXJuIGF9fTtcclxuVEhSRUUuU3BsaW5lPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGYsZyl7YT0uNSooYy1hKTtkPS41KihkLWIpO3JldHVybigyKihiLWMpK2ErZCkqZysoLTMqKGItYyktMiphLWQpKmYrYSplK2J9dGhpcy5wb2ludHM9YTt2YXIgYz1bXSxkPXt4OjAseTowLHo6MH0sZSxmLGcsaCxrLGwscCxxLG47dGhpcy5pbml0RnJvbUFycmF5PWZ1bmN0aW9uKGEpe3RoaXMucG9pbnRzPVtdO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXRoaXMucG9pbnRzW2JdPXt4OmFbYl1bMF0seTphW2JdWzFdLHo6YVtiXVsyXX19O3RoaXMuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7ZT0odGhpcy5wb2ludHMubGVuZ3RoLTEpKmE7Zj1NYXRoLmZsb29yKGUpO2c9ZS1mO2NbMF09MD09PWY/ZjpmLTE7Y1sxXT1mO2NbMl09Zj50aGlzLnBvaW50cy5sZW5ndGgtMj90aGlzLnBvaW50cy5sZW5ndGgtMTpmKzE7Y1szXT1mPnRoaXMucG9pbnRzLmxlbmd0aC0zP3RoaXMucG9pbnRzLmxlbmd0aC0xOmYrXHJcbjI7bD10aGlzLnBvaW50c1tjWzBdXTtwPXRoaXMucG9pbnRzW2NbMV1dO3E9dGhpcy5wb2ludHNbY1syXV07bj10aGlzLnBvaW50c1tjWzNdXTtoPWcqZztrPWcqaDtkLng9YihsLngscC54LHEueCxuLngsZyxoLGspO2QueT1iKGwueSxwLnkscS55LG4ueSxnLGgsayk7ZC56PWIobC56LHAueixxLnosbi56LGcsaCxrKTtyZXR1cm4gZH07dGhpcy5nZXRDb250cm9sUG9pbnRzQXJyYXk9ZnVuY3Rpb24oKXt2YXIgYSxiLGM9dGhpcy5wb2ludHMubGVuZ3RoLGQ9W107Zm9yKGE9MDthPGM7YSsrKWI9dGhpcy5wb2ludHNbYV0sZFthXT1bYi54LGIueSxiLnpdO3JldHVybiBkfTt0aGlzLmdldExlbmd0aD1mdW5jdGlvbihhKXt2YXIgYixjLGQsZT1iPWI9MCxmPW5ldyBUSFJFRS5WZWN0b3IzLGc9bmV3IFRIUkVFLlZlY3RvcjMsaD1bXSxrPTA7aFswXT0wO2F8fChhPTEwMCk7Yz10aGlzLnBvaW50cy5sZW5ndGgqYTtmLmNvcHkodGhpcy5wb2ludHNbMF0pO2ZvcihhPTE7YTxjO2ErKyliPVxyXG5hL2MsZD10aGlzLmdldFBvaW50KGIpLGcuY29weShkKSxrKz1nLmRpc3RhbmNlVG8oZiksZi5jb3B5KGQpLGIqPXRoaXMucG9pbnRzLmxlbmd0aC0xLGI9TWF0aC5mbG9vcihiKSxiIT1lJiYoaFtiXT1rLGU9Yik7aFtoLmxlbmd0aF09aztyZXR1cm57Y2h1bmtzOmgsdG90YWw6a319O3RoaXMucmVwYXJhbWV0cml6ZUJ5QXJjTGVuZ3RoPWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoPVtdLGs9bmV3IFRIUkVFLlZlY3RvcjMsbj10aGlzLmdldExlbmd0aCgpO2gucHVzaChrLmNvcHkodGhpcy5wb2ludHNbMF0pLmNsb25lKCkpO2ZvcihiPTE7Yjx0aGlzLnBvaW50cy5sZW5ndGg7YisrKXtjPW4uY2h1bmtzW2JdLW4uY2h1bmtzW2ItMV07Zz1NYXRoLmNlaWwoYSpjL24udG90YWwpO2U9KGItMSkvKHRoaXMucG9pbnRzLmxlbmd0aC0xKTtmPWIvKHRoaXMucG9pbnRzLmxlbmd0aC0xKTtmb3IoYz0xO2M8Zy0xO2MrKylkPWUrMS9nKmMqKGYtZSksZD10aGlzLmdldFBvaW50KGQpLGgucHVzaChrLmNvcHkoZCkuY2xvbmUoKSk7XHJcbmgucHVzaChrLmNvcHkodGhpcy5wb2ludHNbYl0pLmNsb25lKCkpfXRoaXMucG9pbnRzPWh9fTtUSFJFRS5UcmlhbmdsZT1mdW5jdGlvbihhLGIsYyl7dGhpcy5hPXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuVmVjdG9yMzt0aGlzLmI9dm9pZCAwIT09Yj9iOm5ldyBUSFJFRS5WZWN0b3IzO3RoaXMuYz12b2lkIDAhPT1jP2M6bmV3IFRIUkVFLlZlY3RvcjN9O1RIUkVFLlRyaWFuZ2xlLm5vcm1hbD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiLGMsZCxlKXtlPWV8fG5ldyBUSFJFRS5WZWN0b3IzO2Uuc3ViVmVjdG9ycyhkLGMpO2Euc3ViVmVjdG9ycyhiLGMpO2UuY3Jvc3MoYSk7Yj1lLmxlbmd0aFNxKCk7cmV0dXJuIDA8Yj9lLm11bHRpcGx5U2NhbGFyKDEvTWF0aC5zcXJ0KGIpKTplLnNldCgwLDAsMCl9fSgpO1xyXG5USFJFRS5UcmlhbmdsZS5iYXJ5Y29vcmRGcm9tUG9pbnQ9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzLGM9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGQsZSxmLGcsaCl7YS5zdWJWZWN0b3JzKGcsZSk7Yi5zdWJWZWN0b3JzKGYsZSk7Yy5zdWJWZWN0b3JzKGQsZSk7ZD1hLmRvdChhKTtlPWEuZG90KGIpO2Y9YS5kb3QoYyk7dmFyIGs9Yi5kb3QoYik7Zz1iLmRvdChjKTt2YXIgbD1kKmstZSplO2g9aHx8bmV3IFRIUkVFLlZlY3RvcjM7aWYoMD09bClyZXR1cm4gaC5zZXQoLTIsLTEsLTEpO2w9MS9sO2s9KGsqZi1lKmcpKmw7ZD0oZCpnLWUqZikqbDtyZXR1cm4gaC5zZXQoMS1rLWQsZCxrKX19KCk7XHJcblRIUkVFLlRyaWFuZ2xlLmNvbnRhaW5zUG9pbnQ9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYixjLGQsZSl7Yj1USFJFRS5UcmlhbmdsZS5iYXJ5Y29vcmRGcm9tUG9pbnQoYixjLGQsZSxhKTtyZXR1cm4gMDw9Yi54JiYwPD1iLnkmJjE+PWIueCtiLnl9fSgpO1xyXG5USFJFRS5UcmlhbmdsZS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLlRyaWFuZ2xlLHNldDpmdW5jdGlvbihhLGIsYyl7dGhpcy5hLmNvcHkoYSk7dGhpcy5iLmNvcHkoYik7dGhpcy5jLmNvcHkoYyk7cmV0dXJuIHRoaXN9LHNldEZyb21Qb2ludHNBbmRJbmRpY2VzOmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuYS5jb3B5KGFbYl0pO3RoaXMuYi5jb3B5KGFbY10pO3RoaXMuYy5jb3B5KGFbZF0pO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuYS5jb3B5KGEuYSk7dGhpcy5iLmNvcHkoYS5iKTt0aGlzLmMuY29weShhLmMpO3JldHVybiB0aGlzfSxhcmVhOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXthLnN1YlZlY3RvcnModGhpcy5jLHRoaXMuYik7Yi5zdWJWZWN0b3JzKHRoaXMuYSx0aGlzLmIpO3JldHVybi41KmEuY3Jvc3MoYikubGVuZ3RoKCl9fSgpLG1pZHBvaW50OmZ1bmN0aW9uKGEpe3JldHVybihhfHxcclxubmV3IFRIUkVFLlZlY3RvcjMpLmFkZFZlY3RvcnModGhpcy5hLHRoaXMuYikuYWRkKHRoaXMuYykubXVsdGlwbHlTY2FsYXIoMS8zKX0sbm9ybWFsOmZ1bmN0aW9uKGEpe3JldHVybiBUSFJFRS5UcmlhbmdsZS5ub3JtYWwodGhpcy5hLHRoaXMuYix0aGlzLmMsYSl9LHBsYW5lOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuUGxhbmUpLnNldEZyb21Db3BsYW5hclBvaW50cyh0aGlzLmEsdGhpcy5iLHRoaXMuYyl9LGJhcnljb29yZEZyb21Qb2ludDpmdW5jdGlvbihhLGIpe3JldHVybiBUSFJFRS5UcmlhbmdsZS5iYXJ5Y29vcmRGcm9tUG9pbnQoYSx0aGlzLmEsdGhpcy5iLHRoaXMuYyxiKX0sY29udGFpbnNQb2ludDpmdW5jdGlvbihhKXtyZXR1cm4gVEhSRUUuVHJpYW5nbGUuY29udGFpbnNQb2ludChhLHRoaXMuYSx0aGlzLmIsdGhpcy5jKX0sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLmEuZXF1YWxzKHRoaXMuYSkmJmEuYi5lcXVhbHModGhpcy5iKSYmYS5jLmVxdWFscyh0aGlzLmMpfSxcclxuY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IFRIUkVFLlRyaWFuZ2xlKS5jb3B5KHRoaXMpfX07VEhSRUUuQ2xvY2s9ZnVuY3Rpb24oYSl7dGhpcy5hdXRvU3RhcnQ9dm9pZCAwIT09YT9hOiEwO3RoaXMuZWxhcHNlZFRpbWU9dGhpcy5vbGRUaW1lPXRoaXMuc3RhcnRUaW1lPTA7dGhpcy5ydW5uaW5nPSExfTtcclxuVEhSRUUuQ2xvY2sucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5DbG9jayxzdGFydDpmdW5jdGlvbigpe3RoaXMub2xkVGltZT10aGlzLnN0YXJ0VGltZT12b2lkIDAhPT1zZWxmLnBlcmZvcm1hbmNlJiZ2b2lkIDAhPT1zZWxmLnBlcmZvcm1hbmNlLm5vdz9zZWxmLnBlcmZvcm1hbmNlLm5vdygpOkRhdGUubm93KCk7dGhpcy5ydW5uaW5nPSEwfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5nZXRFbGFwc2VkVGltZSgpO3RoaXMucnVubmluZz0hMX0sZ2V0RWxhcHNlZFRpbWU6ZnVuY3Rpb24oKXt0aGlzLmdldERlbHRhKCk7cmV0dXJuIHRoaXMuZWxhcHNlZFRpbWV9LGdldERlbHRhOmZ1bmN0aW9uKCl7dmFyIGE9MDt0aGlzLmF1dG9TdGFydCYmIXRoaXMucnVubmluZyYmdGhpcy5zdGFydCgpO2lmKHRoaXMucnVubmluZyl7dmFyIGI9dm9pZCAwIT09c2VsZi5wZXJmb3JtYW5jZSYmdm9pZCAwIT09c2VsZi5wZXJmb3JtYW5jZS5ub3c/c2VsZi5wZXJmb3JtYW5jZS5ub3coKTpEYXRlLm5vdygpLFxyXG5hPS4wMDEqKGItdGhpcy5vbGRUaW1lKTt0aGlzLm9sZFRpbWU9Yjt0aGlzLmVsYXBzZWRUaW1lKz1hfXJldHVybiBhfX07VEhSRUUuRXZlbnREaXNwYXRjaGVyPWZ1bmN0aW9uKCl7fTtcclxuVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuRXZlbnREaXNwYXRjaGVyLGFwcGx5OmZ1bmN0aW9uKGEpe2EuYWRkRXZlbnRMaXN0ZW5lcj1USFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI7YS5oYXNFdmVudExpc3RlbmVyPVRIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuaGFzRXZlbnRMaXN0ZW5lcjthLnJlbW92ZUV2ZW50TGlzdGVuZXI9VEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyO2EuZGlzcGF0Y2hFdmVudD1USFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmRpc3BhdGNoRXZlbnR9LGFkZEV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT10aGlzLl9saXN0ZW5lcnMmJih0aGlzLl9saXN0ZW5lcnM9e30pO3ZhciBjPXRoaXMuX2xpc3RlbmVyczt2b2lkIDA9PT1jW2FdJiYoY1thXT1bXSk7LTE9PT1jW2FdLmluZGV4T2YoYikmJlxyXG5jW2FdLnB1c2goYil9LGhhc0V2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDA9PT10aGlzLl9saXN0ZW5lcnMpcmV0dXJuITE7dmFyIGM9dGhpcy5fbGlzdGVuZXJzO3JldHVybiB2b2lkIDAhPT1jW2FdJiYtMSE9PWNbYV0uaW5kZXhPZihiKT8hMDohMX0scmVtb3ZlRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PXRoaXMuX2xpc3RlbmVycyl7dmFyIGM9dGhpcy5fbGlzdGVuZXJzW2FdO2lmKHZvaWQgMCE9PWMpe3ZhciBkPWMuaW5kZXhPZihiKTstMSE9PWQmJmMuc3BsaWNlKGQsMSl9fX0sZGlzcGF0Y2hFdmVudDpmdW5jdGlvbihhKXtpZih2b2lkIDAhPT10aGlzLl9saXN0ZW5lcnMpe3ZhciBiPXRoaXMuX2xpc3RlbmVyc1thLnR5cGVdO2lmKHZvaWQgMCE9PWIpe2EudGFyZ2V0PXRoaXM7Zm9yKHZhciBjPVtdLGQ9Yi5sZW5ndGgsZT0wO2U8ZDtlKyspY1tlXT1iW2VdO2ZvcihlPTA7ZTxkO2UrKyljW2VdLmNhbGwodGhpcyxhKX19fX07XHJcbihmdW5jdGlvbihhKXthLlJheWNhc3Rlcj1mdW5jdGlvbihiLGMsZixnKXt0aGlzLnJheT1uZXcgYS5SYXkoYixjKTt0aGlzLm5lYXI9Znx8MDt0aGlzLmZhcj1nfHxJbmZpbml0eTt0aGlzLnBhcmFtcz17U3ByaXRlOnt9LE1lc2g6e30sUG9pbnRDbG91ZDp7dGhyZXNob2xkOjF9LExPRDp7fSxMaW5lOnt9fX07dmFyIGI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5kaXN0YW5jZS1iLmRpc3RhbmNlfSxjPWZ1bmN0aW9uKGEsYixmLGcpe2EucmF5Y2FzdChiLGYpO2lmKCEwPT09Zyl7YT1hLmNoaWxkcmVuO2c9MDtmb3IodmFyIGg9YS5sZW5ndGg7ZzxoO2crKyljKGFbZ10sYixmLCEwKX19O2EuUmF5Y2FzdGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6YS5SYXljYXN0ZXIscHJlY2lzaW9uOjFFLTQsbGluZVByZWNpc2lvbjoxLHNldDpmdW5jdGlvbihhLGIpe3RoaXMucmF5LnNldChhLGIpfSxzZXRGcm9tQ2FtZXJhOmZ1bmN0aW9uKGIsYyl7YyBpbnN0YW5jZW9mIGEuUGVyc3BlY3RpdmVDYW1lcmE/XHJcbih0aGlzLnJheS5vcmlnaW4uY29weShjLnBvc2l0aW9uKSx0aGlzLnJheS5kaXJlY3Rpb24uc2V0KGIueCxiLnksLjUpLnVucHJvamVjdChjKS5zdWIoYy5wb3NpdGlvbikubm9ybWFsaXplKCkpOmMgaW5zdGFuY2VvZiBhLk9ydGhvZ3JhcGhpY0NhbWVyYT8odGhpcy5yYXkub3JpZ2luLnNldChiLngsYi55LC0xKS51bnByb2plY3QoYyksdGhpcy5yYXkuZGlyZWN0aW9uLnNldCgwLDAsLTEpLnRyYW5zZm9ybURpcmVjdGlvbihjLm1hdHJpeFdvcmxkKSk6YS5lcnJvcihcIlRIUkVFLlJheWNhc3RlcjogVW5zdXBwb3J0ZWQgY2FtZXJhIHR5cGUuXCIpfSxpbnRlcnNlY3RPYmplY3Q6ZnVuY3Rpb24oYSxlKXt2YXIgZj1bXTtjKGEsdGhpcyxmLGUpO2Yuc29ydChiKTtyZXR1cm4gZn0saW50ZXJzZWN0T2JqZWN0czpmdW5jdGlvbihkLGUpe3ZhciBmPVtdO2lmKCExPT09ZCBpbnN0YW5jZW9mIEFycmF5KXJldHVybiBhLndhcm4oXCJUSFJFRS5SYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0czogb2JqZWN0cyBpcyBub3QgYW4gQXJyYXkuXCIpLFxyXG5mO2Zvcih2YXIgZz0wLGg9ZC5sZW5ndGg7ZzxoO2crKyljKGRbZ10sdGhpcyxmLGUpO2Yuc29ydChiKTtyZXR1cm4gZn19fSkoVEhSRUUpO1xyXG5USFJFRS5PYmplY3QzRD1mdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6VEhSRUUuT2JqZWN0M0RJZENvdW50Kyt9KTt0aGlzLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJPYmplY3QzRFwiO3RoaXMucGFyZW50PXZvaWQgMDt0aGlzLmNoaWxkcmVuPVtdO3RoaXMudXA9VEhSRUUuT2JqZWN0M0QuRGVmYXVsdFVwLmNsb25lKCk7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuRXVsZXIsYz1uZXcgVEhSRUUuUXVhdGVybmlvbixkPW5ldyBUSFJFRS5WZWN0b3IzKDEsMSwxKTtiLm9uQ2hhbmdlKGZ1bmN0aW9uKCl7Yy5zZXRGcm9tRXVsZXIoYiwhMSl9KTtjLm9uQ2hhbmdlKGZ1bmN0aW9uKCl7Yi5zZXRGcm9tUXVhdGVybmlvbihjLHZvaWQgMCwhMSl9KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLHtwb3NpdGlvbjp7ZW51bWVyYWJsZTohMCx2YWx1ZTphfSxyb3RhdGlvbjp7ZW51bWVyYWJsZTohMCxcclxudmFsdWU6Yn0scXVhdGVybmlvbjp7ZW51bWVyYWJsZTohMCx2YWx1ZTpjfSxzY2FsZTp7ZW51bWVyYWJsZTohMCx2YWx1ZTpkfX0pO3RoaXMucm90YXRpb25BdXRvVXBkYXRlPSEwO3RoaXMubWF0cml4PW5ldyBUSFJFRS5NYXRyaXg0O3RoaXMubWF0cml4V29ybGQ9bmV3IFRIUkVFLk1hdHJpeDQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSEwO3RoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMTt0aGlzLnZpc2libGU9ITA7dGhpcy5yZWNlaXZlU2hhZG93PXRoaXMuY2FzdFNoYWRvdz0hMTt0aGlzLmZydXN0dW1DdWxsZWQ9ITA7dGhpcy5yZW5kZXJPcmRlcj0wO3RoaXMudXNlckRhdGE9e319O1RIUkVFLk9iamVjdDNELkRlZmF1bHRVcD1uZXcgVEhSRUUuVmVjdG9yMygwLDEsMCk7XHJcblRIUkVFLk9iamVjdDNELnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuT2JqZWN0M0QsZ2V0IGV1bGVyT3JkZXIoKXtUSFJFRS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC5ldWxlck9yZGVyIGhhcyBiZWVuIG1vdmVkIHRvIC5yb3RhdGlvbi5vcmRlci5cIik7cmV0dXJuIHRoaXMucm90YXRpb24ub3JkZXJ9LHNldCBldWxlck9yZGVyKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLmV1bGVyT3JkZXIgaGFzIGJlZW4gbW92ZWQgdG8gLnJvdGF0aW9uLm9yZGVyLlwiKTt0aGlzLnJvdGF0aW9uLm9yZGVyPWF9LGdldCB1c2VRdWF0ZXJuaW9uKCl7VEhSRUUud2FybihcIlRIUkVFLk9iamVjdDNEOiAudXNlUXVhdGVybmlvbiBoYXMgYmVlbiByZW1vdmVkLiBUaGUgbGlicmFyeSBub3cgdXNlcyBxdWF0ZXJuaW9ucyBieSBkZWZhdWx0LlwiKX0sc2V0IHVzZVF1YXRlcm5pb24oYSl7VEhSRUUud2FybihcIlRIUkVFLk9iamVjdDNEOiAudXNlUXVhdGVybmlvbiBoYXMgYmVlbiByZW1vdmVkLiBUaGUgbGlicmFyeSBub3cgdXNlcyBxdWF0ZXJuaW9ucyBieSBkZWZhdWx0LlwiKX0sXHJcbmFwcGx5TWF0cml4OmZ1bmN0aW9uKGEpe3RoaXMubWF0cml4Lm11bHRpcGx5TWF0cmljZXMoYSx0aGlzLm1hdHJpeCk7dGhpcy5tYXRyaXguZGVjb21wb3NlKHRoaXMucG9zaXRpb24sdGhpcy5xdWF0ZXJuaW9uLHRoaXMuc2NhbGUpfSxzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGU6ZnVuY3Rpb24oYSxiKXt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZShhLGIpfSxzZXRSb3RhdGlvbkZyb21FdWxlcjpmdW5jdGlvbihhKXt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKGEsITApfSxzZXRSb3RhdGlvbkZyb21NYXRyaXg6ZnVuY3Rpb24oYSl7dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeChhKX0sc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXt0aGlzLnF1YXRlcm5pb24uY29weShhKX0scm90YXRlT25BeGlzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlF1YXRlcm5pb247cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5zZXRGcm9tQXhpc0FuZ2xlKGIsXHJcbmMpO3RoaXMucXVhdGVybmlvbi5tdWx0aXBseShhKTtyZXR1cm4gdGhpc319KCkscm90YXRlWDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzKDEsMCwwKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKGEsYil9fSgpLHJvdGF0ZVk6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMygwLDEsMCk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyhhLGIpfX0oKSxyb3RhdGVaOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoYSxiKX19KCksdHJhbnNsYXRlT25BeGlzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5jb3B5KGIpLmFwcGx5UXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pO3RoaXMucG9zaXRpb24uYWRkKGEubXVsdGlwbHlTY2FsYXIoYykpO1xyXG5yZXR1cm4gdGhpc319KCksdHJhbnNsYXRlOmZ1bmN0aW9uKGEsYil7VEhSRUUud2FybihcIlRIUkVFLk9iamVjdDNEOiAudHJhbnNsYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC50cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICkgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKGIsYSl9LHRyYW5zbGF0ZVg6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMygxLDAsMCk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyhhLGIpfX0oKSx0cmFuc2xhdGVZOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoYSxiKX19KCksdHJhbnNsYXRlWjpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzKDAsMCwxKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKGEsXHJcbmIpfX0oKSxsb2NhbFRvV29ybGQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpfSx3b3JsZFRvTG9jYWw6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWF0cml4NDtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGIuYXBwbHlNYXRyaXg0KGEuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKSl9fSgpLGxvb2tBdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NYXRyaXg0O3JldHVybiBmdW5jdGlvbihiKXthLmxvb2tBdChiLHRoaXMucG9zaXRpb24sdGhpcy51cCk7dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeChhKX19KCksYWRkOmZ1bmN0aW9uKGEpe2lmKDE8YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciBiPTA7Yjxhcmd1bWVudHMubGVuZ3RoO2IrKyl0aGlzLmFkZChhcmd1bWVudHNbYl0pO3JldHVybiB0aGlzfWlmKGE9PT10aGlzKXJldHVybiBUSFJFRS5lcnJvcihcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IGNhbid0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgaXRzZWxmLlwiLFxyXG5hKSx0aGlzO2EgaW5zdGFuY2VvZiBUSFJFRS5PYmplY3QzRD8odm9pZCAwIT09YS5wYXJlbnQmJmEucGFyZW50LnJlbW92ZShhKSxhLnBhcmVudD10aGlzLGEuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImFkZGVkXCJ9KSx0aGlzLmNoaWxkcmVuLnB1c2goYSkpOlRIUkVFLmVycm9yKFwiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3Qgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk9iamVjdDNELlwiLGEpO3JldHVybiB0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oYSl7aWYoMTxhcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgYj0wO2I8YXJndW1lbnRzLmxlbmd0aDtiKyspdGhpcy5yZW1vdmUoYXJndW1lbnRzW2JdKTtiPXRoaXMuY2hpbGRyZW4uaW5kZXhPZihhKTstMSE9PWImJihhLnBhcmVudD12b2lkIDAsYS5kaXNwYXRjaEV2ZW50KHt0eXBlOlwicmVtb3ZlZFwifSksdGhpcy5jaGlsZHJlbi5zcGxpY2UoYiwxKSl9LGdldENoaWxkQnlOYW1lOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLmdldENoaWxkQnlOYW1lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0T2JqZWN0QnlOYW1lKCkuXCIpO1xyXG5yZXR1cm4gdGhpcy5nZXRPYmplY3RCeU5hbWUoYSl9LGdldE9iamVjdEJ5SWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlQcm9wZXJ0eShcImlkXCIsYSl9LGdldE9iamVjdEJ5TmFtZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KFwibmFtZVwiLGEpfSxnZXRPYmplY3RCeVByb3BlcnR5OmZ1bmN0aW9uKGEsYil7aWYodGhpc1thXT09PWIpcmV0dXJuIHRoaXM7Zm9yKHZhciBjPTAsZD10aGlzLmNoaWxkcmVuLmxlbmd0aDtjPGQ7YysrKXt2YXIgZT10aGlzLmNoaWxkcmVuW2NdLmdldE9iamVjdEJ5UHJvcGVydHkoYSxiKTtpZih2b2lkIDAhPT1lKXJldHVybiBlfX0sZ2V0V29ybGRQb3NpdGlvbjpmdW5jdGlvbihhKXthPWF8fG5ldyBUSFJFRS5WZWN0b3IzO3RoaXMudXBkYXRlTWF0cml4V29ybGQoITApO3JldHVybiBhLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLm1hdHJpeFdvcmxkKX0sZ2V0V29ybGRRdWF0ZXJuaW9uOmZ1bmN0aW9uKCl7dmFyIGE9XHJcbm5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGMpe2M9Y3x8bmV3IFRIUkVFLlF1YXRlcm5pb247dGhpcy51cGRhdGVNYXRyaXhXb3JsZCghMCk7dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoYSxjLGIpO3JldHVybiBjfX0oKSxnZXRXb3JsZFJvdGF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlF1YXRlcm5pb247cmV0dXJuIGZ1bmN0aW9uKGIpe2I9Ynx8bmV3IFRIUkVFLkV1bGVyO3RoaXMuZ2V0V29ybGRRdWF0ZXJuaW9uKGEpO3JldHVybiBiLnNldEZyb21RdWF0ZXJuaW9uKGEsdGhpcy5yb3RhdGlvbi5vcmRlciwhMSl9fSgpLGdldFdvcmxkU2NhbGU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5RdWF0ZXJuaW9uO3JldHVybiBmdW5jdGlvbihjKXtjPWN8fG5ldyBUSFJFRS5WZWN0b3IzO3RoaXMudXBkYXRlTWF0cml4V29ybGQoITApO3RoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKGEsXHJcbmIsYyk7cmV0dXJuIGN9fSgpLGdldFdvcmxkRGlyZWN0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlF1YXRlcm5pb247cmV0dXJuIGZ1bmN0aW9uKGIpe2I9Ynx8bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy5nZXRXb3JsZFF1YXRlcm5pb24oYSk7cmV0dXJuIGIuc2V0KDAsMCwxKS5hcHBseVF1YXRlcm5pb24oYSl9fSgpLHJheWNhc3Q6ZnVuY3Rpb24oKXt9LHRyYXZlcnNlOmZ1bmN0aW9uKGEpe2EodGhpcyk7Zm9yKHZhciBiPTAsYz10aGlzLmNoaWxkcmVuLmxlbmd0aDtiPGM7YisrKXRoaXMuY2hpbGRyZW5bYl0udHJhdmVyc2UoYSl9LHRyYXZlcnNlVmlzaWJsZTpmdW5jdGlvbihhKXtpZighMSE9PXRoaXMudmlzaWJsZSl7YSh0aGlzKTtmb3IodmFyIGI9MCxjPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2I8YztiKyspdGhpcy5jaGlsZHJlbltiXS50cmF2ZXJzZVZpc2libGUoYSl9fSx0cmF2ZXJzZUFuY2VzdG9yczpmdW5jdGlvbihhKXt0aGlzLnBhcmVudCYmKGEodGhpcy5wYXJlbnQpLFxyXG50aGlzLnBhcmVudC50cmF2ZXJzZUFuY2VzdG9ycyhhKSl9LHVwZGF0ZU1hdHJpeDpmdW5jdGlvbigpe3RoaXMubWF0cml4LmNvbXBvc2UodGhpcy5wb3NpdGlvbix0aGlzLnF1YXRlcm5pb24sdGhpcy5zY2FsZSk7dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPSEwfSx1cGRhdGVNYXRyaXhXb3JsZDpmdW5jdGlvbihhKXshMD09PXRoaXMubWF0cml4QXV0b1VwZGF0ZSYmdGhpcy51cGRhdGVNYXRyaXgoKTtpZighMD09PXRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZXx8ITA9PT1hKXZvaWQgMD09PXRoaXMucGFyZW50P3RoaXMubWF0cml4V29ybGQuY29weSh0aGlzLm1hdHJpeCk6dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLHRoaXMubWF0cml4KSx0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITEsYT0hMDtmb3IodmFyIGI9MCxjPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2I8YztiKyspdGhpcy5jaGlsZHJlbltiXS51cGRhdGVNYXRyaXhXb3JsZChhKX0sXHJcbnRvSlNPTjpmdW5jdGlvbigpe3ZhciBhPXttZXRhZGF0YTp7dmVyc2lvbjo0LjMsdHlwZTpcIk9iamVjdFwiLGdlbmVyYXRvcjpcIk9iamVjdEV4cG9ydGVyXCJ9fSxiPXt9LGM9e30sZD1mdW5jdGlvbihiKXt2b2lkIDA9PT1hLm1hdGVyaWFscyYmKGEubWF0ZXJpYWxzPVtdKTtpZih2b2lkIDA9PT1jW2IudXVpZF0pe3ZhciBkPWIudG9KU09OKCk7ZGVsZXRlIGQubWV0YWRhdGE7Y1tiLnV1aWRdPWQ7YS5tYXRlcmlhbHMucHVzaChkKX1yZXR1cm4gYi51dWlkfSxlPWZ1bmN0aW9uKGMpe3ZhciBnPXt9O2cudXVpZD1jLnV1aWQ7Zy50eXBlPWMudHlwZTtcIlwiIT09Yy5uYW1lJiYoZy5uYW1lPWMubmFtZSk7XCJ7fVwiIT09SlNPTi5zdHJpbmdpZnkoYy51c2VyRGF0YSkmJihnLnVzZXJEYXRhPWMudXNlckRhdGEpOyEwIT09Yy52aXNpYmxlJiYoZy52aXNpYmxlPWMudmlzaWJsZSk7aWYoYyBpbnN0YW5jZW9mIFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKWcuZm92PWMuZm92LGcuYXNwZWN0PWMuYXNwZWN0LFxyXG5nLm5lYXI9Yy5uZWFyLGcuZmFyPWMuZmFyO2Vsc2UgaWYoYyBpbnN0YW5jZW9mIFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSlnLmxlZnQ9Yy5sZWZ0LGcucmlnaHQ9Yy5yaWdodCxnLnRvcD1jLnRvcCxnLmJvdHRvbT1jLmJvdHRvbSxnLm5lYXI9Yy5uZWFyLGcuZmFyPWMuZmFyO2Vsc2UgaWYoYyBpbnN0YW5jZW9mIFRIUkVFLkFtYmllbnRMaWdodClnLmNvbG9yPWMuY29sb3IuZ2V0SGV4KCk7ZWxzZSBpZihjIGluc3RhbmNlb2YgVEhSRUUuRGlyZWN0aW9uYWxMaWdodClnLmNvbG9yPWMuY29sb3IuZ2V0SGV4KCksZy5pbnRlbnNpdHk9Yy5pbnRlbnNpdHk7ZWxzZSBpZihjIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRMaWdodClnLmNvbG9yPWMuY29sb3IuZ2V0SGV4KCksZy5pbnRlbnNpdHk9Yy5pbnRlbnNpdHksZy5kaXN0YW5jZT1jLmRpc3RhbmNlLGcuZGVjYXk9Yy5kZWNheTtlbHNlIGlmKGMgaW5zdGFuY2VvZiBUSFJFRS5TcG90TGlnaHQpZy5jb2xvcj1jLmNvbG9yLmdldEhleCgpLFxyXG5nLmludGVuc2l0eT1jLmludGVuc2l0eSxnLmRpc3RhbmNlPWMuZGlzdGFuY2UsZy5hbmdsZT1jLmFuZ2xlLGcuZXhwb25lbnQ9Yy5leHBvbmVudCxnLmRlY2F5PWMuZGVjYXk7ZWxzZSBpZihjIGluc3RhbmNlb2YgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0KWcuY29sb3I9Yy5jb2xvci5nZXRIZXgoKSxnLmdyb3VuZENvbG9yPWMuZ3JvdW5kQ29sb3IuZ2V0SGV4KCk7ZWxzZSBpZihjIGluc3RhbmNlb2YgVEhSRUUuTWVzaHx8YyBpbnN0YW5jZW9mIFRIUkVFLkxpbmV8fGMgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludENsb3VkKXt2YXIgaD1jLmdlb21ldHJ5O3ZvaWQgMD09PWEuZ2VvbWV0cmllcyYmKGEuZ2VvbWV0cmllcz1bXSk7aWYodm9pZCAwPT09YltoLnV1aWRdKXt2YXIgaz1oLnRvSlNPTigpO2RlbGV0ZSBrLm1ldGFkYXRhO2JbaC51dWlkXT1rO2EuZ2VvbWV0cmllcy5wdXNoKGspfWcuZ2VvbWV0cnk9aC51dWlkO2cubWF0ZXJpYWw9ZChjLm1hdGVyaWFsKTtjIGluc3RhbmNlb2YgVEhSRUUuTGluZSYmXHJcbihnLm1vZGU9Yy5tb2RlKX1lbHNlIGMgaW5zdGFuY2VvZiBUSFJFRS5TcHJpdGUmJihnLm1hdGVyaWFsPWQoYy5tYXRlcmlhbCkpO2cubWF0cml4PWMubWF0cml4LnRvQXJyYXkoKTtpZigwPGMuY2hpbGRyZW4ubGVuZ3RoKWZvcihnLmNoaWxkcmVuPVtdLGg9MDtoPGMuY2hpbGRyZW4ubGVuZ3RoO2grKylnLmNoaWxkcmVuLnB1c2goZShjLmNoaWxkcmVuW2hdKSk7cmV0dXJuIGd9O2Eub2JqZWN0PWUodGhpcyk7cmV0dXJuIGF9LGNsb25lOmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk9iamVjdDNEKTt2b2lkIDA9PT1iJiYoYj0hMCk7YS5uYW1lPXRoaXMubmFtZTthLnVwLmNvcHkodGhpcy51cCk7YS5wb3NpdGlvbi5jb3B5KHRoaXMucG9zaXRpb24pO2EucXVhdGVybmlvbi5jb3B5KHRoaXMucXVhdGVybmlvbik7YS5zY2FsZS5jb3B5KHRoaXMuc2NhbGUpO2Eucm90YXRpb25BdXRvVXBkYXRlPXRoaXMucm90YXRpb25BdXRvVXBkYXRlO2EubWF0cml4LmNvcHkodGhpcy5tYXRyaXgpO1xyXG5hLm1hdHJpeFdvcmxkLmNvcHkodGhpcy5tYXRyaXhXb3JsZCk7YS5tYXRyaXhBdXRvVXBkYXRlPXRoaXMubWF0cml4QXV0b1VwZGF0ZTthLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlO2EudmlzaWJsZT10aGlzLnZpc2libGU7YS5jYXN0U2hhZG93PXRoaXMuY2FzdFNoYWRvdzthLnJlY2VpdmVTaGFkb3c9dGhpcy5yZWNlaXZlU2hhZG93O2EuZnJ1c3R1bUN1bGxlZD10aGlzLmZydXN0dW1DdWxsZWQ7YS51c2VyRGF0YT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMudXNlckRhdGEpKTtpZighMD09PWIpZm9yKHZhciBjPTA7Yzx0aGlzLmNoaWxkcmVuLmxlbmd0aDtjKyspYS5hZGQodGhpcy5jaGlsZHJlbltjXS5jbG9uZSgpKTtyZXR1cm4gYX19O1RIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5PYmplY3QzRElkQ291bnQ9MDtcclxuVEhSRUUuRmFjZTM9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuYT1hO3RoaXMuYj1iO3RoaXMuYz1jO3RoaXMubm9ybWFsPWQgaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzP2Q6bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy52ZXJ0ZXhOb3JtYWxzPWQgaW5zdGFuY2VvZiBBcnJheT9kOltdO3RoaXMuY29sb3I9ZSBpbnN0YW5jZW9mIFRIUkVFLkNvbG9yP2U6bmV3IFRIUkVFLkNvbG9yO3RoaXMudmVydGV4Q29sb3JzPWUgaW5zdGFuY2VvZiBBcnJheT9lOltdO3RoaXMudmVydGV4VGFuZ2VudHM9W107dGhpcy5tYXRlcmlhbEluZGV4PXZvaWQgMCE9PWY/ZjowfTtcclxuVEhSRUUuRmFjZTMucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5GYWNlMyxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5GYWNlMyh0aGlzLmEsdGhpcy5iLHRoaXMuYyk7YS5ub3JtYWwuY29weSh0aGlzLm5vcm1hbCk7YS5jb2xvci5jb3B5KHRoaXMuY29sb3IpO2EubWF0ZXJpYWxJbmRleD10aGlzLm1hdGVyaWFsSW5kZXg7Zm9yKHZhciBiPTAsYz10aGlzLnZlcnRleE5vcm1hbHMubGVuZ3RoO2I8YztiKyspYS52ZXJ0ZXhOb3JtYWxzW2JdPXRoaXMudmVydGV4Tm9ybWFsc1tiXS5jbG9uZSgpO2I9MDtmb3IoYz10aGlzLnZlcnRleENvbG9ycy5sZW5ndGg7YjxjO2IrKylhLnZlcnRleENvbG9yc1tiXT10aGlzLnZlcnRleENvbG9yc1tiXS5jbG9uZSgpO2I9MDtmb3IoYz10aGlzLnZlcnRleFRhbmdlbnRzLmxlbmd0aDtiPGM7YisrKWEudmVydGV4VGFuZ2VudHNbYl09dGhpcy52ZXJ0ZXhUYW5nZW50c1tiXS5jbG9uZSgpO3JldHVybiBhfX07XHJcblRIUkVFLkZhY2U0PWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe1RIUkVFLndhcm4oXCJUSFJFRS5GYWNlNCBoYXMgYmVlbiByZW1vdmVkLiBBIFRIUkVFLkZhY2UzIHdpbGwgYmUgY3JlYXRlZCBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IFRIUkVFLkZhY2UzKGEsYixjLGUsZixnKX07VEhSRUUuQnVmZmVyQXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7dGhpcy5hcnJheT1hO3RoaXMuaXRlbVNpemU9Yjt0aGlzLm5lZWRzVXBkYXRlPSExfTtcclxuVEhSRUUuQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuQnVmZmVyQXR0cmlidXRlLGdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5hcnJheS5sZW5ndGh9LGNvcHlBdDpmdW5jdGlvbihhLGIsYyl7YSo9dGhpcy5pdGVtU2l6ZTtjKj1iLml0ZW1TaXplO2Zvcih2YXIgZD0wLGU9dGhpcy5pdGVtU2l6ZTtkPGU7ZCsrKXRoaXMuYXJyYXlbYStkXT1iLmFycmF5W2MrZF07cmV0dXJuIHRoaXN9LHNldDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMuYXJyYXkuc2V0KGEsYik7cmV0dXJuIHRoaXN9LHNldFg6ZnVuY3Rpb24oYSxiKXt0aGlzLmFycmF5W2EqdGhpcy5pdGVtU2l6ZV09YjtyZXR1cm4gdGhpc30sc2V0WTpmdW5jdGlvbihhLGIpe3RoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplKzFdPWI7cmV0dXJuIHRoaXN9LHNldFo6ZnVuY3Rpb24oYSxiKXt0aGlzLmFycmF5W2EqdGhpcy5pdGVtU2l6ZSsyXT1iO3JldHVybiB0aGlzfSxzZXRYWTpmdW5jdGlvbihhLFxyXG5iLGMpe2EqPXRoaXMuaXRlbVNpemU7dGhpcy5hcnJheVthXT1iO3RoaXMuYXJyYXlbYSsxXT1jO3JldHVybiB0aGlzfSxzZXRYWVo6ZnVuY3Rpb24oYSxiLGMsZCl7YSo9dGhpcy5pdGVtU2l6ZTt0aGlzLmFycmF5W2FdPWI7dGhpcy5hcnJheVthKzFdPWM7dGhpcy5hcnJheVthKzJdPWQ7cmV0dXJuIHRoaXN9LHNldFhZWlc6ZnVuY3Rpb24oYSxiLGMsZCxlKXthKj10aGlzLml0ZW1TaXplO3RoaXMuYXJyYXlbYV09Yjt0aGlzLmFycmF5W2ErMV09Yzt0aGlzLmFycmF5W2ErMl09ZDt0aGlzLmFycmF5W2ErM109ZTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgdGhpcy5hcnJheS5jb25zdHJ1Y3Rvcih0aGlzLmFycmF5KSx0aGlzLml0ZW1TaXplKX19O1xyXG5USFJFRS5JbnQ4QXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7VEhSRUUud2FybihcIlRIUkVFLkludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07VEhSRUUuVWludDhBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtUSFJFRS53YXJuKFwiVEhSRUUuVWludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07XHJcblRIUkVFLlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5VaW50OENsYW1wZWRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07VEhSRUUuSW50MTZBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtUSFJFRS53YXJuKFwiVEhSRUUuSW50MTZBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07XHJcblRIUkVFLlVpbnQxNkF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5VaW50MTZBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07VEhSRUUuSW50MzJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtUSFJFRS53YXJuKFwiVEhSRUUuSW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07XHJcblRIUkVFLlVpbnQzMkF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5VaW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07VEhSRUUuRmxvYXQzMkF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5GbG9hdDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIGluc3RlYWQuXCIpO3JldHVybiBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGEsYil9O1xyXG5USFJFRS5GbG9hdDY0QXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7VEhSRUUud2FybihcIlRIUkVFLkZsb2F0NjRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07VEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jYWxsKHRoaXMsYSxiKTt0aGlzLnVwZGF0ZVJhbmdlPXtvZmZzZXQ6MCxjb3VudDotMX19O1RIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSk7VEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZTtcclxuVEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFRIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUobmV3IHRoaXMuYXJyYXkuY29uc3RydWN0b3IodGhpcy5hcnJheSksdGhpcy5pdGVtU2l6ZSl9O1RIUkVFLkJ1ZmZlckdlb21ldHJ5PWZ1bmN0aW9uKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpZFwiLHt2YWx1ZTpUSFJFRS5HZW9tZXRyeUlkQ291bnQrK30pO3RoaXMudXVpZD1USFJFRS5NYXRoLmdlbmVyYXRlVVVJRCgpO3RoaXMubmFtZT1cIlwiO3RoaXMudHlwZT1cIkJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5hdHRyaWJ1dGVzPXt9O3RoaXMuYXR0cmlidXRlc0tleXM9W107dGhpcy5vZmZzZXRzPXRoaXMuZHJhd2NhbGxzPVtdO3RoaXMuYm91bmRpbmdTcGhlcmU9dGhpcy5ib3VuZGluZ0JveD1udWxsfTtcclxuVEhSRUUuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5CdWZmZXJHZW9tZXRyeSxhZGRBdHRyaWJ1dGU6ZnVuY3Rpb24oYSxiLGMpeyExPT09YiBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZT8oVEhSRUUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkQXR0cmlidXRlKCkgbm93IGV4cGVjdHMgKCBuYW1lLCBhdHRyaWJ1dGUgKS5cIiksdGhpcy5hdHRyaWJ1dGVzW2FdPXthcnJheTpiLGl0ZW1TaXplOmN9KToodGhpcy5hdHRyaWJ1dGVzW2FdPWIsdGhpcy5hdHRyaWJ1dGVzS2V5cz1PYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpKX0sZ2V0QXR0cmlidXRlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmF0dHJpYnV0ZXNbYV19LGFkZERyYXdDYWxsOmZ1bmN0aW9uKGEsYixjKXt0aGlzLmRyYXdjYWxscy5wdXNoKHtzdGFydDphLGNvdW50OmIsaW5kZXg6dm9pZCAwIT09Yz9jOjB9KX0sYXBwbHlNYXRyaXg6ZnVuY3Rpb24oYSl7dmFyIGI9XHJcbnRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjt2b2lkIDAhPT1iJiYoYS5hcHBseVRvVmVjdG9yM0FycmF5KGIuYXJyYXkpLGIubmVlZHNVcGRhdGU9ITApO2I9dGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDt2b2lkIDAhPT1iJiYoKG5ldyBUSFJFRS5NYXRyaXgzKS5nZXROb3JtYWxNYXRyaXgoYSkuYXBwbHlUb1ZlY3RvcjNBcnJheShiLmFycmF5KSxiLm5lZWRzVXBkYXRlPSEwKTtudWxsIT09dGhpcy5ib3VuZGluZ0JveCYmdGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtudWxsIT09dGhpcy5ib3VuZGluZ1NwaGVyZSYmdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKX0sY2VudGVyOmZ1bmN0aW9uKCl7dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTt2YXIgYT10aGlzLmJvdW5kaW5nQm94LmNlbnRlcigpLm5lZ2F0ZSgpO3RoaXMuYXBwbHlNYXRyaXgoKG5ldyBUSFJFRS5NYXRyaXg0KS5zZXRQb3NpdGlvbihhKSk7cmV0dXJuIGF9LGZyb21HZW9tZXRyeTpmdW5jdGlvbihhLGIpe2I9Ynx8e3ZlcnRleENvbG9yczpUSFJFRS5Ob0NvbG9yc307XHJcbnZhciBjPWEudmVydGljZXMsZD1hLmZhY2VzLGU9YS5mYWNlVmVydGV4VXZzLGY9Yi52ZXJ0ZXhDb2xvcnMsZz0wPGVbMF0ubGVuZ3RoLGg9Mz09ZFswXS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aCxrPW5ldyBGbG9hdDMyQXJyYXkoOSpkLmxlbmd0aCk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaywzKSk7dmFyIGw9bmV3IEZsb2F0MzJBcnJheSg5KmQubGVuZ3RoKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobCwzKSk7aWYoZiE9PVRIUkVFLk5vQ29sb3JzKXt2YXIgcD1uZXcgRmxvYXQzMkFycmF5KDkqZC5sZW5ndGgpO3RoaXMuYWRkQXR0cmlidXRlKFwiY29sb3JcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHAsMykpfWlmKCEwPT09Zyl7dmFyIHE9bmV3IEZsb2F0MzJBcnJheSg2KmQubGVuZ3RoKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShxLFxyXG4yKSl9Zm9yKHZhciBuPTAsdD0wLHI9MDtuPGQubGVuZ3RoO24rKyx0Kz02LHIrPTkpe3ZhciBzPWRbbl0sdT1jW3MuYV0sdj1jW3MuYl0seD1jW3MuY107a1tyXT11Lng7a1tyKzFdPXUueTtrW3IrMl09dS56O2tbciszXT12Lng7a1tyKzRdPXYueTtrW3IrNV09di56O2tbcis2XT14Lng7a1tyKzddPXgueTtrW3IrOF09eC56OyEwPT09aD8odT1zLnZlcnRleE5vcm1hbHNbMF0sdj1zLnZlcnRleE5vcm1hbHNbMV0seD1zLnZlcnRleE5vcm1hbHNbMl0sbFtyXT11LngsbFtyKzFdPXUueSxsW3IrMl09dS56LGxbciszXT12LngsbFtyKzRdPXYueSxsW3IrNV09di56LGxbcis2XT14LngsbFtyKzddPXgueSxsW3IrOF09eC56KToodT1zLm5vcm1hbCxsW3JdPXUueCxsW3IrMV09dS55LGxbcisyXT11LnosbFtyKzNdPXUueCxsW3IrNF09dS55LGxbcis1XT11LnosbFtyKzZdPXUueCxsW3IrN109dS55LGxbcis4XT11LnopO2Y9PT1USFJFRS5GYWNlQ29sb3JzPyhzPXMuY29sb3IscFtyXT1cclxucy5yLHBbcisxXT1zLmcscFtyKzJdPXMuYixwW3IrM109cy5yLHBbcis0XT1zLmcscFtyKzVdPXMuYixwW3IrNl09cy5yLHBbcis3XT1zLmcscFtyKzhdPXMuYik6Zj09PVRIUkVFLlZlcnRleENvbG9ycyYmKHU9cy52ZXJ0ZXhDb2xvcnNbMF0sdj1zLnZlcnRleENvbG9yc1sxXSxzPXMudmVydGV4Q29sb3JzWzJdLHBbcl09dS5yLHBbcisxXT11LmcscFtyKzJdPXUuYixwW3IrM109di5yLHBbcis0XT12LmcscFtyKzVdPXYuYixwW3IrNl09cy5yLHBbcis3XT1zLmcscFtyKzhdPXMuYik7ITA9PT1nJiYocz1lWzBdW25dWzBdLHU9ZVswXVtuXVsxXSx2PWVbMF1bbl1bMl0scVt0XT1zLngscVt0KzFdPXMueSxxW3QrMl09dS54LHFbdCszXT11LnkscVt0KzRdPXYueCxxW3QrNV09di55KX10aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO3JldHVybiB0aGlzfSxjb21wdXRlQm91bmRpbmdCb3g6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXtudWxsPT09XHJcbnRoaXMuYm91bmRpbmdCb3gmJih0aGlzLmJvdW5kaW5nQm94PW5ldyBUSFJFRS5Cb3gzKTt2YXIgYj10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7aWYoYil7dmFyIGM9dGhpcy5ib3VuZGluZ0JveDtjLm1ha2VFbXB0eSgpO2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrPTMpYS5zZXQoYltkXSxiW2QrMV0sYltkKzJdKSxjLmV4cGFuZEJ5UG9pbnQoYSl9aWYodm9pZCAwPT09Ynx8MD09PWIubGVuZ3RoKXRoaXMuYm91bmRpbmdCb3gubWluLnNldCgwLDAsMCksdGhpcy5ib3VuZGluZ0JveC5tYXguc2V0KDAsMCwwKTsoaXNOYU4odGhpcy5ib3VuZGluZ0JveC5taW4ueCl8fGlzTmFOKHRoaXMuYm91bmRpbmdCb3gubWluLnkpfHxpc05hTih0aGlzLmJvdW5kaW5nQm94Lm1pbi56KSkmJlRIUkVFLmVycm9yKCdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3g6IENvbXB1dGVkIG1pbi9tYXggaGF2ZSBOYU4gdmFsdWVzLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicpfX0oKSxcclxuY29tcHV0ZUJvdW5kaW5nU3BoZXJlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkJveDMsYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXtudWxsPT09dGhpcy5ib3VuZGluZ1NwaGVyZSYmKHRoaXMuYm91bmRpbmdTcGhlcmU9bmV3IFRIUkVFLlNwaGVyZSk7dmFyIGM9dGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O2lmKGMpe2EubWFrZUVtcHR5KCk7Zm9yKHZhciBkPXRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyLGU9MCxmPWMubGVuZ3RoO2U8ZjtlKz0zKWIuc2V0KGNbZV0sY1tlKzFdLGNbZSsyXSksYS5leHBhbmRCeVBvaW50KGIpO2EuY2VudGVyKGQpO2Zvcih2YXIgZz0wLGU9MCxmPWMubGVuZ3RoO2U8ZjtlKz0zKWIuc2V0KGNbZV0sY1tlKzFdLGNbZSsyXSksZz1NYXRoLm1heChnLGQuZGlzdGFuY2VUb1NxdWFyZWQoYikpO3RoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzPU1hdGguc3FydChnKTtpc05hTih0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cykmJlxyXG5USFJFRS5lcnJvcignVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk6IENvbXB1dGVkIHJhZGl1cyBpcyBOYU4uIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJyl9fX0oKSxjb21wdXRlRmFjZU5vcm1hbHM6ZnVuY3Rpb24oKXt9LGNvbXB1dGVWZXJ0ZXhOb3JtYWxzOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5hdHRyaWJ1dGVzO2lmKGEucG9zaXRpb24pe3ZhciBiPWEucG9zaXRpb24uYXJyYXk7aWYodm9pZCAwPT09YS5ub3JtYWwpdGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYi5sZW5ndGgpLDMpKTtlbHNlIGZvcih2YXIgYz1hLm5vcm1hbC5hcnJheSxkPTAsZT1jLmxlbmd0aDtkPGU7ZCsrKWNbZF09MDt2YXIgYz1hLm5vcm1hbC5hcnJheSxmLGcsaCxrPW5ldyBUSFJFRS5WZWN0b3IzLGw9bmV3IFRIUkVFLlZlY3RvcjMsXHJcbnA9bmV3IFRIUkVFLlZlY3RvcjMscT1uZXcgVEhSRUUuVmVjdG9yMyxuPW5ldyBUSFJFRS5WZWN0b3IzO2lmKGEuaW5kZXgpZm9yKHZhciB0PWEuaW5kZXguYXJyYXkscj0wPHRoaXMub2Zmc2V0cy5sZW5ndGg/dGhpcy5vZmZzZXRzOlt7c3RhcnQ6MCxjb3VudDp0Lmxlbmd0aCxpbmRleDowfV0scz0wLHU9ci5sZW5ndGg7czx1Oysrcyl7ZT1yW3NdLnN0YXJ0O2Y9cltzXS5jb3VudDtmb3IodmFyIHY9cltzXS5pbmRleCxkPWUsZT1lK2Y7ZDxlO2QrPTMpZj0zKih2K3RbZF0pLGc9Myoodit0W2QrMV0pLGg9Myoodit0W2QrMl0pLGsuZnJvbUFycmF5KGIsZiksbC5mcm9tQXJyYXkoYixnKSxwLmZyb21BcnJheShiLGgpLHEuc3ViVmVjdG9ycyhwLGwpLG4uc3ViVmVjdG9ycyhrLGwpLHEuY3Jvc3MobiksY1tmXSs9cS54LGNbZisxXSs9cS55LGNbZisyXSs9cS56LGNbZ10rPXEueCxjW2crMV0rPXEueSxjW2crMl0rPXEueixjW2hdKz1xLngsY1toKzFdKz1xLnksY1toKzJdKz1xLnp9ZWxzZSBmb3IoZD1cclxuMCxlPWIubGVuZ3RoO2Q8ZTtkKz05KWsuZnJvbUFycmF5KGIsZCksbC5mcm9tQXJyYXkoYixkKzMpLHAuZnJvbUFycmF5KGIsZCs2KSxxLnN1YlZlY3RvcnMocCxsKSxuLnN1YlZlY3RvcnMoayxsKSxxLmNyb3NzKG4pLGNbZF09cS54LGNbZCsxXT1xLnksY1tkKzJdPXEueixjW2QrM109cS54LGNbZCs0XT1xLnksY1tkKzVdPXEueixjW2QrNl09cS54LGNbZCs3XT1xLnksY1tkKzhdPXEuejt0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTthLm5vcm1hbC5uZWVkc1VwZGF0ZT0hMH19LGNvbXB1dGVUYW5nZW50czpmdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxiLGMpe3EuZnJvbUFycmF5KGQsMyphKTtuLmZyb21BcnJheShkLDMqYik7dC5mcm9tQXJyYXkoZCwzKmMpO3IuZnJvbUFycmF5KGYsMiphKTtzLmZyb21BcnJheShmLDIqYik7dS5mcm9tQXJyYXkoZiwyKmMpO3Y9bi54LXEueDt4PXQueC1xLng7RD1uLnktcS55O3c9dC55LXEueTt5PW4uei1xLno7QT10LnotcS56O0U9cy54LXIueDtHPVxyXG51Lngtci54O0Y9cy55LXIueTt6PXUueS1yLnk7ST0xLyhFKnotRypGKTtVLnNldCgoeip2LUYqeCkqSSwoeipELUYqdykqSSwoeip5LUYqQSkqSSk7TS5zZXQoKEUqeC1HKnYpKkksKEUqdy1HKkQpKkksKEUqQS1HKnkpKkkpO2tbYV0uYWRkKFUpO2tbYl0uYWRkKFUpO2tbY10uYWRkKFUpO2xbYV0uYWRkKE0pO2xbYl0uYWRkKE0pO2xbY10uYWRkKE0pfWZ1bmN0aW9uIGIoYSl7aGEuZnJvbUFycmF5KGUsMyphKTtPLmNvcHkoaGEpO2JhPWtbYV07b2EuY29weShiYSk7b2Euc3ViKGhhLm11bHRpcGx5U2NhbGFyKGhhLmRvdChiYSkpKS5ub3JtYWxpemUoKTtqYS5jcm9zc1ZlY3RvcnMoTyxiYSk7cWE9amEuZG90KGxbYV0pO2NhPTA+cWE/LTE6MTtoWzQqYV09b2EueDtoWzQqYSsxXT1vYS55O2hbNCphKzJdPW9hLno7aFs0KmErM109Y2F9aWYodm9pZCAwPT09dGhpcy5hdHRyaWJ1dGVzLmluZGV4fHx2b2lkIDA9PT10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb258fHZvaWQgMD09PXRoaXMuYXR0cmlidXRlcy5ub3JtYWx8fFxyXG52b2lkIDA9PT10aGlzLmF0dHJpYnV0ZXMudXYpVEhSRUUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiBNaXNzaW5nIHJlcXVpcmVkIGF0dHJpYnV0ZXMgKGluZGV4LCBwb3NpdGlvbiwgbm9ybWFsIG9yIHV2KSBpbiBCdWZmZXJHZW9tZXRyeS5jb21wdXRlVGFuZ2VudHMoKVwiKTtlbHNle3ZhciBjPXRoaXMuYXR0cmlidXRlcy5pbmRleC5hcnJheSxkPXRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheSxlPXRoaXMuYXR0cmlidXRlcy5ub3JtYWwuYXJyYXksZj10aGlzLmF0dHJpYnV0ZXMudXYuYXJyYXksZz1kLmxlbmd0aC8zO3ZvaWQgMD09PXRoaXMuYXR0cmlidXRlcy50YW5nZW50JiZ0aGlzLmFkZEF0dHJpYnV0ZShcInRhbmdlbnRcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoNCpnKSw0KSk7Zm9yKHZhciBoPXRoaXMuYXR0cmlidXRlcy50YW5nZW50LmFycmF5LGs9W10sbD1bXSxwPTA7cDxnO3ArKylrW3BdPW5ldyBUSFJFRS5WZWN0b3IzLFxyXG5sW3BdPW5ldyBUSFJFRS5WZWN0b3IzO3ZhciBxPW5ldyBUSFJFRS5WZWN0b3IzLG49bmV3IFRIUkVFLlZlY3RvcjMsdD1uZXcgVEhSRUUuVmVjdG9yMyxyPW5ldyBUSFJFRS5WZWN0b3IyLHM9bmV3IFRIUkVFLlZlY3RvcjIsdT1uZXcgVEhSRUUuVmVjdG9yMix2LHgsRCx3LHksQSxFLEcsRix6LEksVT1uZXcgVEhSRUUuVmVjdG9yMyxNPW5ldyBUSFJFRS5WZWN0b3IzLEgsTCxQLE4sUjswPT09dGhpcy5kcmF3Y2FsbHMubGVuZ3RoJiZ0aGlzLmFkZERyYXdDYWxsKDAsYy5sZW5ndGgsMCk7dmFyIFY9dGhpcy5kcmF3Y2FsbHMscD0wO2ZvcihMPVYubGVuZ3RoO3A8TDsrK3Ape0g9VltwXS5zdGFydDtQPVZbcF0uY291bnQ7dmFyIEo9VltwXS5pbmRleCxnPUg7Zm9yKEgrPVA7ZzxIO2crPTMpUD1KK2NbZ10sTj1KK2NbZysxXSxSPUorY1tnKzJdLGEoUCxOLFIpfXZhciBvYT1uZXcgVEhSRUUuVmVjdG9yMyxqYT1uZXcgVEhSRUUuVmVjdG9yMyxoYT1uZXcgVEhSRUUuVmVjdG9yMyxPPW5ldyBUSFJFRS5WZWN0b3IzLFxyXG5jYSxiYSxxYSxwPTA7Zm9yKEw9Vi5sZW5ndGg7cDxMOysrcClmb3IoSD1WW3BdLnN0YXJ0LFA9VltwXS5jb3VudCxKPVZbcF0uaW5kZXgsZz1ILEgrPVA7ZzxIO2crPTMpUD1KK2NbZ10sTj1KK2NbZysxXSxSPUorY1tnKzJdLGIoUCksYihOKSxiKFIpfX0sY29tcHV0ZU9mZnNldHM6ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9NjU1MzUpO2Zvcih2YXIgYj10aGlzLmF0dHJpYnV0ZXMuaW5kZXguYXJyYXksYz10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXksZD1iLmxlbmd0aC8zLGU9bmV3IFVpbnQxNkFycmF5KGIubGVuZ3RoKSxmPTAsZz0wLGg9W3tzdGFydDowLGNvdW50OjAsaW5kZXg6MH1dLGs9aFswXSxsPTAscD0wLHE9bmV3IEludDMyQXJyYXkoNiksbj1uZXcgSW50MzJBcnJheShjLmxlbmd0aCksdD1uZXcgSW50MzJBcnJheShjLmxlbmd0aCkscj0wO3I8Yy5sZW5ndGg7cisrKW5bcl09LTEsdFtyXT0tMTtmb3IoYz0wO2M8ZDtjKyspe2Zvcih2YXIgcz1wPTA7Mz5cclxucztzKyspcj1iWzMqYytzXSwtMT09bltyXT8ocVsyKnNdPXIscVsyKnMrMV09LTEscCsrKTpuW3JdPGsuaW5kZXg/KHFbMipzXT1yLHFbMipzKzFdPS0xLGwrKyk6KHFbMipzXT1yLHFbMipzKzFdPW5bcl0pO2lmKGcrcD5rLmluZGV4K2EpZm9yKGs9e3N0YXJ0OmYsY291bnQ6MCxpbmRleDpnfSxoLnB1c2goaykscD0wOzY+cDtwKz0yKXM9cVtwKzFdLC0xPHMmJnM8ay5pbmRleCYmKHFbcCsxXT0tMSk7Zm9yKHA9MDs2PnA7cCs9MilyPXFbcF0scz1xW3ArMV0sLTE9PT1zJiYocz1nKyspLG5bcl09cyx0W3NdPXIsZVtmKytdPXMtay5pbmRleCxrLmNvdW50Kyt9dGhpcy5yZW9yZGVyQnVmZmVycyhlLHQsZyk7cmV0dXJuIHRoaXMuZHJhd2NhbGxzPXRoaXMub2Zmc2V0cz1ofSxtZXJnZTpmdW5jdGlvbihhLGIpe2lmKCExPT09YSBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5KVRIUkVFLmVycm9yKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnkubWVyZ2UoKTogZ2VvbWV0cnkgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5LlwiLFxyXG5hKTtlbHNle3ZvaWQgMD09PWImJihiPTApO3ZhciBjPXRoaXMuYXR0cmlidXRlcyxkO2ZvcihkIGluIGMpaWYodm9pZCAwIT09YS5hdHRyaWJ1dGVzW2RdKWZvcih2YXIgZT1jW2RdLmFycmF5LGY9YS5hdHRyaWJ1dGVzW2RdLGc9Zi5hcnJheSxoPTAsZj1mLml0ZW1TaXplKmI7aDxnLmxlbmd0aDtoKyssZisrKWVbZl09Z1toXTtyZXR1cm4gdGhpc319LG5vcm1hbGl6ZU5vcm1hbHM6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5hdHRyaWJ1dGVzLm5vcm1hbC5hcnJheSxiLGMsZCxlPTAsZj1hLmxlbmd0aDtlPGY7ZSs9MyliPWFbZV0sYz1hW2UrMV0sZD1hW2UrMl0sYj0xL01hdGguc3FydChiKmIrYypjK2QqZCksYVtlXSo9YixhW2UrMV0qPWIsYVtlKzJdKj1ifSxyZW9yZGVyQnVmZmVyczpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9e30sZTtmb3IoZSBpbiB0aGlzLmF0dHJpYnV0ZXMpXCJpbmRleFwiIT1lJiYoZFtlXT1uZXcgdGhpcy5hdHRyaWJ1dGVzW2VdLmFycmF5LmNvbnN0cnVjdG9yKHRoaXMuYXR0cmlidXRlc1tlXS5pdGVtU2l6ZSpcclxuYykpO2Zvcih2YXIgZj0wO2Y8YztmKyspe3ZhciBnPWJbZl07Zm9yKGUgaW4gdGhpcy5hdHRyaWJ1dGVzKWlmKFwiaW5kZXhcIiE9ZSlmb3IodmFyIGg9dGhpcy5hdHRyaWJ1dGVzW2VdLmFycmF5LGs9dGhpcy5hdHRyaWJ1dGVzW2VdLml0ZW1TaXplLGw9ZFtlXSxwPTA7cDxrO3ArKylsW2YqaytwXT1oW2cqaytwXX10aGlzLmF0dHJpYnV0ZXMuaW5kZXguYXJyYXk9YTtmb3IoZSBpbiB0aGlzLmF0dHJpYnV0ZXMpXCJpbmRleFwiIT1lJiYodGhpcy5hdHRyaWJ1dGVzW2VdLmFycmF5PWRbZV0sdGhpcy5hdHRyaWJ1dGVzW2VdLm51bUl0ZW1zPXRoaXMuYXR0cmlidXRlc1tlXS5pdGVtU2l6ZSpjKX0sdG9KU09OOmZ1bmN0aW9uKCl7dmFyIGE9e21ldGFkYXRhOnt2ZXJzaW9uOjQsdHlwZTpcIkJ1ZmZlckdlb21ldHJ5XCIsZ2VuZXJhdG9yOlwiQnVmZmVyR2VvbWV0cnlFeHBvcnRlclwifSx1dWlkOnRoaXMudXVpZCx0eXBlOnRoaXMudHlwZSxkYXRhOnthdHRyaWJ1dGVzOnt9fX0sYj10aGlzLmF0dHJpYnV0ZXMsXHJcbmM9dGhpcy5vZmZzZXRzLGQ9dGhpcy5ib3VuZGluZ1NwaGVyZSxlO2ZvcihlIGluIGIpe3ZhciBmPWJbZV0sZz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmLmFycmF5KTthLmRhdGEuYXR0cmlidXRlc1tlXT17aXRlbVNpemU6Zi5pdGVtU2l6ZSx0eXBlOmYuYXJyYXkuY29uc3RydWN0b3IubmFtZSxhcnJheTpnfX0wPGMubGVuZ3RoJiYoYS5kYXRhLm9mZnNldHM9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjKSkpO251bGwhPT1kJiYoYS5kYXRhLmJvdW5kaW5nU3BoZXJlPXtjZW50ZXI6ZC5jZW50ZXIudG9BcnJheSgpLHJhZGl1czpkLnJhZGl1c30pO3JldHVybiBhfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSxiO2ZvcihiIGluIHRoaXMuYXR0cmlidXRlcylhLmFkZEF0dHJpYnV0ZShiLHRoaXMuYXR0cmlidXRlc1tiXS5jbG9uZSgpKTtiPTA7Zm9yKHZhciBjPXRoaXMub2Zmc2V0cy5sZW5ndGg7YjxjO2IrKyl7dmFyIGQ9dGhpcy5vZmZzZXRzW2JdO1xyXG5hLm9mZnNldHMucHVzaCh7c3RhcnQ6ZC5zdGFydCxpbmRleDpkLmluZGV4LGNvdW50OmQuY291bnR9KX1yZXR1cm4gYX0sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImRpc3Bvc2VcIn0pfX07VEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5hcHBseShUSFJFRS5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5USFJFRS5HZW9tZXRyeT1mdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6VEhSRUUuR2VvbWV0cnlJZENvdW50Kyt9KTt0aGlzLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJHZW9tZXRyeVwiO3RoaXMudmVydGljZXM9W107dGhpcy5jb2xvcnM9W107dGhpcy5mYWNlcz1bXTt0aGlzLmZhY2VWZXJ0ZXhVdnM9W1tdXTt0aGlzLm1vcnBoVGFyZ2V0cz1bXTt0aGlzLm1vcnBoQ29sb3JzPVtdO3RoaXMubW9ycGhOb3JtYWxzPVtdO3RoaXMuc2tpbldlaWdodHM9W107dGhpcy5za2luSW5kaWNlcz1bXTt0aGlzLmxpbmVEaXN0YW5jZXM9W107dGhpcy5ib3VuZGluZ1NwaGVyZT10aGlzLmJvdW5kaW5nQm94PW51bGw7dGhpcy5oYXNUYW5nZW50cz0hMTt0aGlzLmR5bmFtaWM9ITA7dGhpcy5ncm91cHNOZWVkVXBkYXRlPXRoaXMubGluZURpc3RhbmNlc05lZWRVcGRhdGU9dGhpcy5jb2xvcnNOZWVkVXBkYXRlPVxyXG50aGlzLnRhbmdlbnRzTmVlZFVwZGF0ZT10aGlzLm5vcm1hbHNOZWVkVXBkYXRlPXRoaXMudXZzTmVlZFVwZGF0ZT10aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZT10aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZT0hMX07XHJcblRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuR2VvbWV0cnksYXBwbHlNYXRyaXg6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPShuZXcgVEhSRUUuTWF0cml4MykuZ2V0Tm9ybWFsTWF0cml4KGEpLGM9MCxkPXRoaXMudmVydGljZXMubGVuZ3RoO2M8ZDtjKyspdGhpcy52ZXJ0aWNlc1tjXS5hcHBseU1hdHJpeDQoYSk7Yz0wO2ZvcihkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspe2E9dGhpcy5mYWNlc1tjXTthLm5vcm1hbC5hcHBseU1hdHJpeDMoYikubm9ybWFsaXplKCk7Zm9yKHZhciBlPTAsZj1hLnZlcnRleE5vcm1hbHMubGVuZ3RoO2U8ZjtlKyspYS52ZXJ0ZXhOb3JtYWxzW2VdLmFwcGx5TWF0cml4MyhiKS5ub3JtYWxpemUoKX1udWxsIT09dGhpcy5ib3VuZGluZ0JveCYmdGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtudWxsIT09dGhpcy5ib3VuZGluZ1NwaGVyZSYmdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTt0aGlzLm5vcm1hbHNOZWVkVXBkYXRlPVxyXG50aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZT0hMH0sZnJvbUJ1ZmZlckdlb21ldHJ5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLGM9YS5hdHRyaWJ1dGVzLGQ9Yy5wb3NpdGlvbi5hcnJheSxlPXZvaWQgMCE9PWMuaW5kZXg/Yy5pbmRleC5hcnJheTp2b2lkIDAsZj12b2lkIDAhPT1jLm5vcm1hbD9jLm5vcm1hbC5hcnJheTp2b2lkIDAsZz12b2lkIDAhPT1jLmNvbG9yP2MuY29sb3IuYXJyYXk6dm9pZCAwLGg9dm9pZCAwIT09Yy51dj9jLnV2LmFycmF5OnZvaWQgMCxrPVtdLGw9W10scD1jPTA7YzxkLmxlbmd0aDtjKz0zLHArPTIpYi52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKGRbY10sZFtjKzFdLGRbYysyXSkpLHZvaWQgMCE9PWYmJmsucHVzaChuZXcgVEhSRUUuVmVjdG9yMyhmW2NdLGZbYysxXSxmW2MrMl0pKSx2b2lkIDAhPT1nJiZiLmNvbG9ycy5wdXNoKG5ldyBUSFJFRS5Db2xvcihnW2NdLGdbYysxXSxnW2MrMl0pKSx2b2lkIDAhPT1oJiZsLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoaFtwXSxcclxuaFtwKzFdKSk7dmFyIHE9ZnVuY3Rpb24oYSxjLGQpe3ZhciBlPXZvaWQgMCE9PWY/W2tbYV0uY2xvbmUoKSxrW2NdLmNsb25lKCksa1tkXS5jbG9uZSgpXTpbXSxuPXZvaWQgMCE9PWc/W2IuY29sb3JzW2FdLmNsb25lKCksYi5jb2xvcnNbY10uY2xvbmUoKSxiLmNvbG9yc1tkXS5jbG9uZSgpXTpbXTtiLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGEsYyxkLGUsbikpO3ZvaWQgMCE9PWgmJmIuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtsW2FdLmNsb25lKCksbFtjXS5jbG9uZSgpLGxbZF0uY2xvbmUoKV0pfTtpZih2b2lkIDAhPT1lKWlmKGQ9YS5kcmF3Y2FsbHMsMDxkLmxlbmd0aClmb3IoYz0wO2M8ZC5sZW5ndGg7YysrKWZvcih2YXIgcD1kW2NdLG49cC5zdGFydCx0PXAuY291bnQscj1wLmluZGV4LHA9bixuPW4rdDtwPG47cCs9MylxKHIrZVtwXSxyK2VbcCsxXSxyK2VbcCsyXSk7ZWxzZSBmb3IoYz0wO2M8ZS5sZW5ndGg7Yys9MylxKGVbY10sZVtjKzFdLGVbYysyXSk7ZWxzZSBmb3IoYz1cclxuMDtjPGQubGVuZ3RoLzM7Yys9MylxKGMsYysxLGMrMik7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTtudWxsIT09YS5ib3VuZGluZ0JveCYmKHRoaXMuYm91bmRpbmdCb3g9YS5ib3VuZGluZ0JveC5jbG9uZSgpKTtudWxsIT09YS5ib3VuZGluZ1NwaGVyZSYmKHRoaXMuYm91bmRpbmdTcGhlcmU9YS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpKTtyZXR1cm4gdGhpc30sY2VudGVyOmZ1bmN0aW9uKCl7dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTt2YXIgYT10aGlzLmJvdW5kaW5nQm94LmNlbnRlcigpLm5lZ2F0ZSgpO3RoaXMuYXBwbHlNYXRyaXgoKG5ldyBUSFJFRS5NYXRyaXg0KS5zZXRQb3NpdGlvbihhKSk7cmV0dXJuIGF9LGNvbXB1dGVGYWNlTm9ybWFsczpmdW5jdGlvbigpe2Zvcih2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzLGM9MCxkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPXRoaXMuZmFjZXNbY10sZj10aGlzLnZlcnRpY2VzW2UuYV0sXHJcbmc9dGhpcy52ZXJ0aWNlc1tlLmJdO2Euc3ViVmVjdG9ycyh0aGlzLnZlcnRpY2VzW2UuY10sZyk7Yi5zdWJWZWN0b3JzKGYsZyk7YS5jcm9zcyhiKTthLm5vcm1hbGl6ZSgpO2Uubm9ybWFsLmNvcHkoYSl9fSxjb21wdXRlVmVydGV4Tm9ybWFsczpmdW5jdGlvbihhKXt2YXIgYixjLGQ7ZD1BcnJheSh0aGlzLnZlcnRpY2VzLmxlbmd0aCk7Yj0wO2ZvcihjPXRoaXMudmVydGljZXMubGVuZ3RoO2I8YztiKyspZFtiXT1uZXcgVEhSRUUuVmVjdG9yMztpZihhKXt2YXIgZSxmLGcsaD1uZXcgVEhSRUUuVmVjdG9yMyxrPW5ldyBUSFJFRS5WZWN0b3IzO2E9MDtmb3IoYj10aGlzLmZhY2VzLmxlbmd0aDthPGI7YSsrKWM9dGhpcy5mYWNlc1thXSxlPXRoaXMudmVydGljZXNbYy5hXSxmPXRoaXMudmVydGljZXNbYy5iXSxnPXRoaXMudmVydGljZXNbYy5jXSxoLnN1YlZlY3RvcnMoZyxmKSxrLnN1YlZlY3RvcnMoZSxmKSxoLmNyb3NzKGspLGRbYy5hXS5hZGQoaCksZFtjLmJdLmFkZChoKSxkW2MuY10uYWRkKGgpfWVsc2UgZm9yKGE9XHJcbjAsYj10aGlzLmZhY2VzLmxlbmd0aDthPGI7YSsrKWM9dGhpcy5mYWNlc1thXSxkW2MuYV0uYWRkKGMubm9ybWFsKSxkW2MuYl0uYWRkKGMubm9ybWFsKSxkW2MuY10uYWRkKGMubm9ybWFsKTtiPTA7Zm9yKGM9dGhpcy52ZXJ0aWNlcy5sZW5ndGg7YjxjO2IrKylkW2JdLm5vcm1hbGl6ZSgpO2E9MDtmb3IoYj10aGlzLmZhY2VzLmxlbmd0aDthPGI7YSsrKWM9dGhpcy5mYWNlc1thXSxjLnZlcnRleE5vcm1hbHNbMF09ZFtjLmFdLmNsb25lKCksYy52ZXJ0ZXhOb3JtYWxzWzFdPWRbYy5iXS5jbG9uZSgpLGMudmVydGV4Tm9ybWFsc1syXT1kW2MuY10uY2xvbmUoKX0sY29tcHV0ZU1vcnBoTm9ybWFsczpmdW5jdGlvbigpe3ZhciBhLGIsYyxkLGU7Yz0wO2ZvcihkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspZm9yKGU9dGhpcy5mYWNlc1tjXSxlLl9fb3JpZ2luYWxGYWNlTm9ybWFsP2UuX19vcmlnaW5hbEZhY2VOb3JtYWwuY29weShlLm5vcm1hbCk6ZS5fX29yaWdpbmFsRmFjZU5vcm1hbD1cclxuZS5ub3JtYWwuY2xvbmUoKSxlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzfHwoZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFscz1bXSksYT0wLGI9ZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDthPGI7YSsrKWUuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbYV0/ZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1thXS5jb3B5KGUudmVydGV4Tm9ybWFsc1thXSk6ZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1thXT1lLnZlcnRleE5vcm1hbHNbYV0uY2xvbmUoKTt2YXIgZj1uZXcgVEhSRUUuR2VvbWV0cnk7Zi5mYWNlcz10aGlzLmZhY2VzO2E9MDtmb3IoYj10aGlzLm1vcnBoVGFyZ2V0cy5sZW5ndGg7YTxiO2ErKyl7aWYoIXRoaXMubW9ycGhOb3JtYWxzW2FdKXt0aGlzLm1vcnBoTm9ybWFsc1thXT17fTt0aGlzLm1vcnBoTm9ybWFsc1thXS5mYWNlTm9ybWFscz1bXTt0aGlzLm1vcnBoTm9ybWFsc1thXS52ZXJ0ZXhOb3JtYWxzPVtdO2U9dGhpcy5tb3JwaE5vcm1hbHNbYV0uZmFjZU5vcm1hbHM7dmFyIGc9XHJcbnRoaXMubW9ycGhOb3JtYWxzW2FdLnZlcnRleE5vcm1hbHMsaCxrO2M9MDtmb3IoZD10aGlzLmZhY2VzLmxlbmd0aDtjPGQ7YysrKWg9bmV3IFRIUkVFLlZlY3RvcjMsaz17YTpuZXcgVEhSRUUuVmVjdG9yMyxiOm5ldyBUSFJFRS5WZWN0b3IzLGM6bmV3IFRIUkVFLlZlY3RvcjN9LGUucHVzaChoKSxnLnB1c2goayl9Zz10aGlzLm1vcnBoTm9ybWFsc1thXTtmLnZlcnRpY2VzPXRoaXMubW9ycGhUYXJnZXRzW2FdLnZlcnRpY2VzO2YuY29tcHV0ZUZhY2VOb3JtYWxzKCk7Zi5jb21wdXRlVmVydGV4Tm9ybWFscygpO2M9MDtmb3IoZD10aGlzLmZhY2VzLmxlbmd0aDtjPGQ7YysrKWU9dGhpcy5mYWNlc1tjXSxoPWcuZmFjZU5vcm1hbHNbY10saz1nLnZlcnRleE5vcm1hbHNbY10saC5jb3B5KGUubm9ybWFsKSxrLmEuY29weShlLnZlcnRleE5vcm1hbHNbMF0pLGsuYi5jb3B5KGUudmVydGV4Tm9ybWFsc1sxXSksay5jLmNvcHkoZS52ZXJ0ZXhOb3JtYWxzWzJdKX1jPTA7Zm9yKGQ9dGhpcy5mYWNlcy5sZW5ndGg7YzxcclxuZDtjKyspZT10aGlzLmZhY2VzW2NdLGUubm9ybWFsPWUuX19vcmlnaW5hbEZhY2VOb3JtYWwsZS52ZXJ0ZXhOb3JtYWxzPWUuX19vcmlnaW5hbFZlcnRleE5vcm1hbHN9LGNvbXB1dGVUYW5nZW50czpmdW5jdGlvbigpe3ZhciBhLGIsYyxkLGUsZixnLGgsayxsLHAscSxuLHQscixzLHUsdj1bXSx4PVtdO2M9bmV3IFRIUkVFLlZlY3RvcjM7dmFyIEQ9bmV3IFRIUkVFLlZlY3RvcjMsdz1uZXcgVEhSRUUuVmVjdG9yMyx5PW5ldyBUSFJFRS5WZWN0b3IzLEE9bmV3IFRIUkVFLlZlY3RvcjM7YT0wO2ZvcihiPXRoaXMudmVydGljZXMubGVuZ3RoO2E8YjthKyspdlthXT1uZXcgVEhSRUUuVmVjdG9yMyx4W2FdPW5ldyBUSFJFRS5WZWN0b3IzO2E9MDtmb3IoYj10aGlzLmZhY2VzLmxlbmd0aDthPGI7YSsrKWU9dGhpcy5mYWNlc1thXSxmPXRoaXMuZmFjZVZlcnRleFV2c1swXVthXSxkPWUuYSx1PWUuYixlPWUuYyxnPXRoaXMudmVydGljZXNbZF0saD10aGlzLnZlcnRpY2VzW3VdLGs9dGhpcy52ZXJ0aWNlc1tlXSxcclxubD1mWzBdLHA9ZlsxXSxxPWZbMl0sZj1oLngtZy54LG49ay54LWcueCx0PWgueS1nLnkscj1rLnktZy55LGg9aC56LWcueixnPWsuei1nLnosaz1wLngtbC54LHM9cS54LWwueCxwPXAueS1sLnksbD1xLnktbC55LHE9MS8oaypsLXMqcCksYy5zZXQoKGwqZi1wKm4pKnEsKGwqdC1wKnIpKnEsKGwqaC1wKmcpKnEpLEQuc2V0KChrKm4tcypmKSpxLChrKnItcyp0KSpxLChrKmctcypoKSpxKSx2W2RdLmFkZChjKSx2W3VdLmFkZChjKSx2W2VdLmFkZChjKSx4W2RdLmFkZChEKSx4W3VdLmFkZChEKSx4W2VdLmFkZChEKTtEPVtcImFcIixcImJcIixcImNcIixcImRcIl07YT0wO2ZvcihiPXRoaXMuZmFjZXMubGVuZ3RoO2E8YjthKyspZm9yKGU9dGhpcy5mYWNlc1thXSxjPTA7YzxNYXRoLm1pbihlLnZlcnRleE5vcm1hbHMubGVuZ3RoLDMpO2MrKylBLmNvcHkoZS52ZXJ0ZXhOb3JtYWxzW2NdKSxkPWVbRFtjXV0sdT12W2RdLHcuY29weSh1KSx3LnN1YihBLm11bHRpcGx5U2NhbGFyKEEuZG90KHUpKSkubm9ybWFsaXplKCksXHJcbnkuY3Jvc3NWZWN0b3JzKGUudmVydGV4Tm9ybWFsc1tjXSx1KSxkPXkuZG90KHhbZF0pLGQ9MD5kPy0xOjEsZS52ZXJ0ZXhUYW5nZW50c1tjXT1uZXcgVEhSRUUuVmVjdG9yNCh3Lngsdy55LHcueixkKTt0aGlzLmhhc1RhbmdlbnRzPSEwfSxjb21wdXRlTGluZURpc3RhbmNlczpmdW5jdGlvbigpe2Zvcih2YXIgYT0wLGI9dGhpcy52ZXJ0aWNlcyxjPTAsZD1iLmxlbmd0aDtjPGQ7YysrKTA8YyYmKGErPWJbY10uZGlzdGFuY2VUbyhiW2MtMV0pKSx0aGlzLmxpbmVEaXN0YW5jZXNbY109YX0sY29tcHV0ZUJvdW5kaW5nQm94OmZ1bmN0aW9uKCl7bnVsbD09PXRoaXMuYm91bmRpbmdCb3gmJih0aGlzLmJvdW5kaW5nQm94PW5ldyBUSFJFRS5Cb3gzKTt0aGlzLmJvdW5kaW5nQm94LnNldEZyb21Qb2ludHModGhpcy52ZXJ0aWNlcyl9LGNvbXB1dGVCb3VuZGluZ1NwaGVyZTpmdW5jdGlvbigpe251bGw9PT10aGlzLmJvdW5kaW5nU3BoZXJlJiYodGhpcy5ib3VuZGluZ1NwaGVyZT1uZXcgVEhSRUUuU3BoZXJlKTtcclxudGhpcy5ib3VuZGluZ1NwaGVyZS5zZXRGcm9tUG9pbnRzKHRoaXMudmVydGljZXMpfSxtZXJnZTpmdW5jdGlvbihhLGIsYyl7aWYoITE9PT1hIGluc3RhbmNlb2YgVEhSRUUuR2VvbWV0cnkpVEhSRUUuZXJyb3IoXCJUSFJFRS5HZW9tZXRyeS5tZXJnZSgpOiBnZW9tZXRyeSBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuR2VvbWV0cnkuXCIsYSk7ZWxzZXt2YXIgZCxlPXRoaXMudmVydGljZXMubGVuZ3RoLGY9dGhpcy52ZXJ0aWNlcyxnPWEudmVydGljZXMsaD10aGlzLmZhY2VzLGs9YS5mYWNlcyxsPXRoaXMuZmFjZVZlcnRleFV2c1swXTthPWEuZmFjZVZlcnRleFV2c1swXTt2b2lkIDA9PT1jJiYoYz0wKTt2b2lkIDAhPT1iJiYoZD0obmV3IFRIUkVFLk1hdHJpeDMpLmdldE5vcm1hbE1hdHJpeChiKSk7Zm9yKHZhciBwPTAscT1nLmxlbmd0aDtwPHE7cCsrKXt2YXIgbj1nW3BdLmNsb25lKCk7dm9pZCAwIT09YiYmbi5hcHBseU1hdHJpeDQoYik7Zi5wdXNoKG4pfXA9MDtmb3IocT1rLmxlbmd0aDtwPFxyXG5xO3ArKyl7dmFyIGc9a1twXSx0LHI9Zy52ZXJ0ZXhOb3JtYWxzLHM9Zy52ZXJ0ZXhDb2xvcnMsbj1uZXcgVEhSRUUuRmFjZTMoZy5hK2UsZy5iK2UsZy5jK2UpO24ubm9ybWFsLmNvcHkoZy5ub3JtYWwpO3ZvaWQgMCE9PWQmJm4ubm9ybWFsLmFwcGx5TWF0cml4MyhkKS5ub3JtYWxpemUoKTtiPTA7Zm9yKGY9ci5sZW5ndGg7YjxmO2IrKyl0PXJbYl0uY2xvbmUoKSx2b2lkIDAhPT1kJiZ0LmFwcGx5TWF0cml4MyhkKS5ub3JtYWxpemUoKSxuLnZlcnRleE5vcm1hbHMucHVzaCh0KTtuLmNvbG9yLmNvcHkoZy5jb2xvcik7Yj0wO2ZvcihmPXMubGVuZ3RoO2I8ZjtiKyspdD1zW2JdLG4udmVydGV4Q29sb3JzLnB1c2godC5jbG9uZSgpKTtuLm1hdGVyaWFsSW5kZXg9Zy5tYXRlcmlhbEluZGV4K2M7aC5wdXNoKG4pfXA9MDtmb3IocT1hLmxlbmd0aDtwPHE7cCsrKWlmKGM9YVtwXSxkPVtdLHZvaWQgMCE9PWMpe2I9MDtmb3IoZj1jLmxlbmd0aDtiPGY7YisrKWQucHVzaChjW2JdLmNsb25lKCkpO1xyXG5sLnB1c2goZCl9fX0sbWVyZ2VNZXNoOmZ1bmN0aW9uKGEpeyExPT09YSBpbnN0YW5jZW9mIFRIUkVFLk1lc2g/VEhSRUUuZXJyb3IoXCJUSFJFRS5HZW9tZXRyeS5tZXJnZU1lc2goKTogbWVzaCBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuTWVzaC5cIixhKTooYS5tYXRyaXhBdXRvVXBkYXRlJiZhLnVwZGF0ZU1hdHJpeCgpLHRoaXMubWVyZ2UoYS5nZW9tZXRyeSxhLm1hdHJpeCkpfSxtZXJnZVZlcnRpY2VzOmZ1bmN0aW9uKCl7dmFyIGE9e30sYj1bXSxjPVtdLGQsZT1NYXRoLnBvdygxMCw0KSxmLGc7Zj0wO2ZvcihnPXRoaXMudmVydGljZXMubGVuZ3RoO2Y8ZztmKyspZD10aGlzLnZlcnRpY2VzW2ZdLGQ9TWF0aC5yb3VuZChkLngqZSkrXCJfXCIrTWF0aC5yb3VuZChkLnkqZSkrXCJfXCIrTWF0aC5yb3VuZChkLnoqZSksdm9pZCAwPT09YVtkXT8oYVtkXT1mLGIucHVzaCh0aGlzLnZlcnRpY2VzW2ZdKSxjW2ZdPWIubGVuZ3RoLTEpOmNbZl09Y1thW2RdXTthPVtdO2Y9MDtmb3IoZz10aGlzLmZhY2VzLmxlbmd0aDtmPFxyXG5nO2YrKylmb3IoZT10aGlzLmZhY2VzW2ZdLGUuYT1jW2UuYV0sZS5iPWNbZS5iXSxlLmM9Y1tlLmNdLGU9W2UuYSxlLmIsZS5jXSxkPTA7Mz5kO2QrKylpZihlW2RdPT1lWyhkKzEpJTNdKXthLnB1c2goZik7YnJlYWt9Zm9yKGY9YS5sZW5ndGgtMTswPD1mO2YtLSlmb3IoZT1hW2ZdLHRoaXMuZmFjZXMuc3BsaWNlKGUsMSksYz0wLGc9dGhpcy5mYWNlVmVydGV4VXZzLmxlbmd0aDtjPGc7YysrKXRoaXMuZmFjZVZlcnRleFV2c1tjXS5zcGxpY2UoZSwxKTtmPXRoaXMudmVydGljZXMubGVuZ3RoLWIubGVuZ3RoO3RoaXMudmVydGljZXM9YjtyZXR1cm4gZn0sdG9KU09OOmZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGIsYyl7cmV0dXJuIGM/YXwxPDxiOmEmfigxPDxiKX1mdW5jdGlvbiBiKGEpe3ZhciBiPWEueC50b1N0cmluZygpK2EueS50b1N0cmluZygpK2Euei50b1N0cmluZygpO2lmKHZvaWQgMCE9PWxbYl0pcmV0dXJuIGxbYl07bFtiXT1rLmxlbmd0aC8zO2sucHVzaChhLngsYS55LFxyXG5hLnopO3JldHVybiBsW2JdfWZ1bmN0aW9uIGMoYSl7dmFyIGI9YS5yLnRvU3RyaW5nKCkrYS5nLnRvU3RyaW5nKCkrYS5iLnRvU3RyaW5nKCk7aWYodm9pZCAwIT09cVtiXSlyZXR1cm4gcVtiXTtxW2JdPXAubGVuZ3RoO3AucHVzaChhLmdldEhleCgpKTtyZXR1cm4gcVtiXX1mdW5jdGlvbiBkKGEpe3ZhciBiPWEueC50b1N0cmluZygpK2EueS50b1N0cmluZygpO2lmKHZvaWQgMCE9PXRbYl0pcmV0dXJuIHRbYl07dFtiXT1uLmxlbmd0aC8yO24ucHVzaChhLngsYS55KTtyZXR1cm4gdFtiXX12YXIgZT17bWV0YWRhdGE6e3ZlcnNpb246NCx0eXBlOlwiQnVmZmVyR2VvbWV0cnlcIixnZW5lcmF0b3I6XCJCdWZmZXJHZW9tZXRyeUV4cG9ydGVyXCJ9LHV1aWQ6dGhpcy51dWlkLHR5cGU6dGhpcy50eXBlfTtcIlwiIT09dGhpcy5uYW1lJiYoZS5uYW1lPXRoaXMubmFtZSk7aWYodm9pZCAwIT09dGhpcy5wYXJhbWV0ZXJzKXt2YXIgZj10aGlzLnBhcmFtZXRlcnMsZztmb3IoZyBpbiBmKXZvaWQgMCE9PVxyXG5mW2ddJiYoZVtnXT1mW2ddKTtyZXR1cm4gZX1mPVtdO2ZvcihnPTA7Zzx0aGlzLnZlcnRpY2VzLmxlbmd0aDtnKyspe3ZhciBoPXRoaXMudmVydGljZXNbZ107Zi5wdXNoKGgueCxoLnksaC56KX12YXIgaD1bXSxrPVtdLGw9e30scD1bXSxxPXt9LG49W10sdD17fTtmb3IoZz0wO2c8dGhpcy5mYWNlcy5sZW5ndGg7ZysrKXt2YXIgcj10aGlzLmZhY2VzW2ddLHM9dm9pZCAwIT09dGhpcy5mYWNlVmVydGV4VXZzWzBdW2ddLHU9MDxyLm5vcm1hbC5sZW5ndGgoKSx2PTA8ci52ZXJ0ZXhOb3JtYWxzLmxlbmd0aCx4PTEhPT1yLmNvbG9yLnJ8fDEhPT1yLmNvbG9yLmd8fDEhPT1yLmNvbG9yLmIsRD0wPHIudmVydGV4Q29sb3JzLmxlbmd0aCx3PTAsdz1hKHcsMCwwKSx3PWEodywxLCExKSx3PWEodywyLCExKSx3PWEodywzLHMpLHc9YSh3LDQsdSksdz1hKHcsNSx2KSx3PWEodyw2LHgpLHc9YSh3LDcsRCk7aC5wdXNoKHcpO2gucHVzaChyLmEsci5iLHIuYyk7cyYmKHM9dGhpcy5mYWNlVmVydGV4VXZzWzBdW2ddLFxyXG5oLnB1c2goZChzWzBdKSxkKHNbMV0pLGQoc1syXSkpKTt1JiZoLnB1c2goYihyLm5vcm1hbCkpO3YmJih1PXIudmVydGV4Tm9ybWFscyxoLnB1c2goYih1WzBdKSxiKHVbMV0pLGIodVsyXSkpKTt4JiZoLnB1c2goYyhyLmNvbG9yKSk7RCYmKHI9ci52ZXJ0ZXhDb2xvcnMsaC5wdXNoKGMoclswXSksYyhyWzFdKSxjKHJbMl0pKSl9ZS5kYXRhPXt9O2UuZGF0YS52ZXJ0aWNlcz1mO2UuZGF0YS5ub3JtYWxzPWs7MDxwLmxlbmd0aCYmKGUuZGF0YS5jb2xvcnM9cCk7MDxuLmxlbmd0aCYmKGUuZGF0YS51dnM9W25dKTtlLmRhdGEuZmFjZXM9aDtyZXR1cm4gZX0sY2xvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIGE9bmV3IFRIUkVFLkdlb21ldHJ5LGI9dGhpcy52ZXJ0aWNlcyxjPTAsZD1iLmxlbmd0aDtjPGQ7YysrKWEudmVydGljZXMucHVzaChiW2NdLmNsb25lKCkpO2I9dGhpcy5mYWNlcztjPTA7Zm9yKGQ9Yi5sZW5ndGg7YzxkO2MrKylhLmZhY2VzLnB1c2goYltjXS5jbG9uZSgpKTtjPTA7XHJcbmZvcihkPXRoaXMuZmFjZVZlcnRleFV2cy5sZW5ndGg7YzxkO2MrKyl7Yj10aGlzLmZhY2VWZXJ0ZXhVdnNbY107dm9pZCAwPT09YS5mYWNlVmVydGV4VXZzW2NdJiYoYS5mYWNlVmVydGV4VXZzW2NdPVtdKTtmb3IodmFyIGU9MCxmPWIubGVuZ3RoO2U8ZjtlKyspe2Zvcih2YXIgZz1iW2VdLGg9W10saz0wLGw9Zy5sZW5ndGg7azxsO2srKyloLnB1c2goZ1trXS5jbG9uZSgpKTthLmZhY2VWZXJ0ZXhVdnNbY10ucHVzaChoKX19cmV0dXJuIGF9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX19O1RIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5HZW9tZXRyeUlkQ291bnQ9MDtcclxuVEhSRUUuQ2FtZXJhPWZ1bmN0aW9uKCl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDYW1lcmFcIjt0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZT1uZXcgVEhSRUUuTWF0cml4NDt0aGlzLnByb2plY3Rpb25NYXRyaXg9bmV3IFRIUkVFLk1hdHJpeDR9O1RIUkVFLkNhbWVyYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkNhbWVyYS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ2FtZXJhO1RIUkVFLkNhbWVyYS5wcm90b3R5cGUuZ2V0V29ybGREaXJlY3Rpb249ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuUXVhdGVybmlvbjtyZXR1cm4gZnVuY3Rpb24oYil7Yj1ifHxuZXcgVEhSRUUuVmVjdG9yMzt0aGlzLmdldFdvcmxkUXVhdGVybmlvbihhKTtyZXR1cm4gYi5zZXQoMCwwLC0xKS5hcHBseVF1YXRlcm5pb24oYSl9fSgpO1xyXG5USFJFRS5DYW1lcmEucHJvdG90eXBlLmxvb2tBdD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NYXRyaXg0O3JldHVybiBmdW5jdGlvbihiKXthLmxvb2tBdCh0aGlzLnBvc2l0aW9uLGIsdGhpcy51cCk7dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeChhKX19KCk7VEhSRUUuQ2FtZXJhLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuQ2FtZXJhKTtUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EubWF0cml4V29ybGRJbnZlcnNlLmNvcHkodGhpcy5tYXRyaXhXb3JsZEludmVyc2UpO2EucHJvamVjdGlvbk1hdHJpeC5jb3B5KHRoaXMucHJvamVjdGlvbk1hdHJpeCk7cmV0dXJuIGF9O1xyXG5USFJFRS5DdWJlQ2FtZXJhPWZ1bmN0aW9uKGEsYixjKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkN1YmVDYW1lcmFcIjt2YXIgZD1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoOTAsMSxhLGIpO2QudXAuc2V0KDAsLTEsMCk7ZC5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMSwwLDApKTt0aGlzLmFkZChkKTt2YXIgZT1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoOTAsMSxhLGIpO2UudXAuc2V0KDAsLTEsMCk7ZS5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoLTEsMCwwKSk7dGhpcy5hZGQoZSk7dmFyIGY9bmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDkwLDEsYSxiKTtmLnVwLnNldCgwLDAsMSk7Zi5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApKTt0aGlzLmFkZChmKTt2YXIgZz1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoOTAsMSxhLGIpO2cudXAuc2V0KDAsMCwtMSk7Zy5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwtMSwwKSk7XHJcbnRoaXMuYWRkKGcpO3ZhciBoPW5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg5MCwxLGEsYik7aC51cC5zZXQoMCwtMSwwKTtoLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygwLDAsMSkpO3RoaXMuYWRkKGgpO3ZhciBrPW5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg5MCwxLGEsYik7ay51cC5zZXQoMCwtMSwwKTtrLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygwLDAsLTEpKTt0aGlzLmFkZChrKTt0aGlzLnJlbmRlclRhcmdldD1uZXcgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlKGMsYyx7Zm9ybWF0OlRIUkVFLlJHQkZvcm1hdCxtYWdGaWx0ZXI6VEhSRUUuTGluZWFyRmlsdGVyLG1pbkZpbHRlcjpUSFJFRS5MaW5lYXJGaWx0ZXJ9KTt0aGlzLnVwZGF0ZUN1YmVNYXA9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLnJlbmRlclRhcmdldCxuPWMuZ2VuZXJhdGVNaXBtYXBzO2MuZ2VuZXJhdGVNaXBtYXBzPSExO2MuYWN0aXZlQ3ViZUZhY2U9MDthLnJlbmRlcihiLGQsYyk7Yy5hY3RpdmVDdWJlRmFjZT1cclxuMTthLnJlbmRlcihiLGUsYyk7Yy5hY3RpdmVDdWJlRmFjZT0yO2EucmVuZGVyKGIsZixjKTtjLmFjdGl2ZUN1YmVGYWNlPTM7YS5yZW5kZXIoYixnLGMpO2MuYWN0aXZlQ3ViZUZhY2U9NDthLnJlbmRlcihiLGgsYyk7Yy5nZW5lcmF0ZU1pcG1hcHM9bjtjLmFjdGl2ZUN1YmVGYWNlPTU7YS5yZW5kZXIoYixrLGMpfX07VEhSRUUuQ3ViZUNhbWVyYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkN1YmVDYW1lcmEucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkN1YmVDYW1lcmE7XHJcblRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYT1mdW5jdGlvbihhLGIsYyxkLGUsZil7VEhSRUUuQ2FtZXJhLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiT3J0aG9ncmFwaGljQ2FtZXJhXCI7dGhpcy56b29tPTE7dGhpcy5sZWZ0PWE7dGhpcy5yaWdodD1iO3RoaXMudG9wPWM7dGhpcy5ib3R0b209ZDt0aGlzLm5lYXI9dm9pZCAwIT09ZT9lOi4xO3RoaXMuZmFyPXZvaWQgMCE9PWY/ZjoyRTM7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9O1RIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DYW1lcmEucHJvdG90eXBlKTtUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYTtcclxuVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhLnByb3RvdHlwZS51cGRhdGVQcm9qZWN0aW9uTWF0cml4PWZ1bmN0aW9uKCl7dmFyIGE9KHRoaXMucmlnaHQtdGhpcy5sZWZ0KS8oMip0aGlzLnpvb20pLGI9KHRoaXMudG9wLXRoaXMuYm90dG9tKS8oMip0aGlzLnpvb20pLGM9KHRoaXMucmlnaHQrdGhpcy5sZWZ0KS8yLGQ9KHRoaXMudG9wK3RoaXMuYm90dG9tKS8yO3RoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKGMtYSxjK2EsZCtiLGQtYix0aGlzLm5lYXIsdGhpcy5mYXIpfTtcclxuVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmE7VEhSRUUuQ2FtZXJhLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS56b29tPXRoaXMuem9vbTthLmxlZnQ9dGhpcy5sZWZ0O2EucmlnaHQ9dGhpcy5yaWdodDthLnRvcD10aGlzLnRvcDthLmJvdHRvbT10aGlzLmJvdHRvbTthLm5lYXI9dGhpcy5uZWFyO2EuZmFyPXRoaXMuZmFyO2EucHJvamVjdGlvbk1hdHJpeC5jb3B5KHRoaXMucHJvamVjdGlvbk1hdHJpeCk7cmV0dXJuIGF9O1xyXG5USFJFRS5QZXJzcGVjdGl2ZUNhbWVyYT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5DYW1lcmEuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQZXJzcGVjdGl2ZUNhbWVyYVwiO3RoaXMuem9vbT0xO3RoaXMuZm92PXZvaWQgMCE9PWE/YTo1MDt0aGlzLmFzcGVjdD12b2lkIDAhPT1iP2I6MTt0aGlzLm5lYXI9dm9pZCAwIT09Yz9jOi4xO3RoaXMuZmFyPXZvaWQgMCE9PWQ/ZDoyRTM7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9O1RIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkNhbWVyYS5wcm90b3R5cGUpO1RIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5QZXJzcGVjdGl2ZUNhbWVyYTtcclxuVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLnNldExlbnM9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0yNCk7dGhpcy5mb3Y9MipUSFJFRS5NYXRoLnJhZFRvRGVnKE1hdGguYXRhbihiLygyKmEpKSk7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9O1RIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZS5zZXRWaWV3T2Zmc2V0PWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmZ1bGxXaWR0aD1hO3RoaXMuZnVsbEhlaWdodD1iO3RoaXMueD1jO3RoaXMueT1kO3RoaXMud2lkdGg9ZTt0aGlzLmhlaWdodD1mO3RoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpfTtcclxuVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLnVwZGF0ZVByb2plY3Rpb25NYXRyaXg9ZnVuY3Rpb24oKXt2YXIgYT1USFJFRS5NYXRoLnJhZFRvRGVnKDIqTWF0aC5hdGFuKE1hdGgudGFuKC41KlRIUkVFLk1hdGguZGVnVG9SYWQodGhpcy5mb3YpKS90aGlzLnpvb20pKTtpZih0aGlzLmZ1bGxXaWR0aCl7dmFyIGI9dGhpcy5mdWxsV2lkdGgvdGhpcy5mdWxsSGVpZ2h0LGE9TWF0aC50YW4oVEhSRUUuTWF0aC5kZWdUb1JhZCguNSphKSkqdGhpcy5uZWFyLGM9LWEsZD1iKmMsYj1NYXRoLmFicyhiKmEtZCksYz1NYXRoLmFicyhhLWMpO3RoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlRnJ1c3R1bShkK3RoaXMueCpiL3RoaXMuZnVsbFdpZHRoLGQrKHRoaXMueCt0aGlzLndpZHRoKSpiL3RoaXMuZnVsbFdpZHRoLGEtKHRoaXMueSt0aGlzLmhlaWdodCkqYy90aGlzLmZ1bGxIZWlnaHQsYS10aGlzLnkqYy90aGlzLmZ1bGxIZWlnaHQsdGhpcy5uZWFyLHRoaXMuZmFyKX1lbHNlIHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlUGVyc3BlY3RpdmUoYSxcclxudGhpcy5hc3BlY3QsdGhpcy5uZWFyLHRoaXMuZmFyKX07VEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhO1RIUkVFLkNhbWVyYS5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2Euem9vbT10aGlzLnpvb207YS5mb3Y9dGhpcy5mb3Y7YS5hc3BlY3Q9dGhpcy5hc3BlY3Q7YS5uZWFyPXRoaXMubmVhcjthLmZhcj10aGlzLmZhcjthLnByb2plY3Rpb25NYXRyaXguY29weSh0aGlzLnByb2plY3Rpb25NYXRyaXgpO3JldHVybiBhfTtUSFJFRS5MaWdodD1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpZ2h0XCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoYSl9O1RIUkVFLkxpZ2h0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuTGlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkxpZ2h0O1xyXG5USFJFRS5MaWdodC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLkxpZ2h0KTtUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuY29sb3IuY29weSh0aGlzLmNvbG9yKTtyZXR1cm4gYX07VEhSRUUuQW1iaWVudExpZ2h0PWZ1bmN0aW9uKGEpe1RIUkVFLkxpZ2h0LmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJBbWJpZW50TGlnaHRcIn07VEhSRUUuQW1iaWVudExpZ2h0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpZ2h0LnByb3RvdHlwZSk7VEhSRUUuQW1iaWVudExpZ2h0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5BbWJpZW50TGlnaHQ7VEhSRUUuQW1iaWVudExpZ2h0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5BbWJpZW50TGlnaHQ7VEhSRUUuTGlnaHQucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtyZXR1cm4gYX07XHJcblRIUkVFLkFyZWFMaWdodD1mdW5jdGlvbihhLGIpe1RIUkVFLkxpZ2h0LmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJBcmVhTGlnaHRcIjt0aGlzLm5vcm1hbD1uZXcgVEhSRUUuVmVjdG9yMygwLC0xLDApO3RoaXMucmlnaHQ9bmV3IFRIUkVFLlZlY3RvcjMoMSwwLDApO3RoaXMuaW50ZW5zaXR5PXZvaWQgMCE9PWI/YjoxO3RoaXMuaGVpZ2h0PXRoaXMud2lkdGg9MTt0aGlzLmNvbnN0YW50QXR0ZW51YXRpb249MS41O3RoaXMubGluZWFyQXR0ZW51YXRpb249LjU7dGhpcy5xdWFkcmF0aWNBdHRlbnVhdGlvbj0uMX07VEhSRUUuQXJlYUxpZ2h0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpZ2h0LnByb3RvdHlwZSk7VEhSRUUuQXJlYUxpZ2h0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5BcmVhTGlnaHQ7XHJcblRIUkVFLkRpcmVjdGlvbmFsTGlnaHQ9ZnVuY3Rpb24oYSxiKXtUSFJFRS5MaWdodC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiRGlyZWN0aW9uYWxMaWdodFwiO3RoaXMucG9zaXRpb24uc2V0KDAsMSwwKTt0aGlzLnRhcmdldD1uZXcgVEhSRUUuT2JqZWN0M0Q7dGhpcy5pbnRlbnNpdHk9dm9pZCAwIT09Yj9iOjE7dGhpcy5vbmx5U2hhZG93PXRoaXMuY2FzdFNoYWRvdz0hMTt0aGlzLnNoYWRvd0NhbWVyYU5lYXI9NTA7dGhpcy5zaGFkb3dDYW1lcmFGYXI9NUUzO3RoaXMuc2hhZG93Q2FtZXJhTGVmdD0tNTAwO3RoaXMuc2hhZG93Q2FtZXJhVG9wPXRoaXMuc2hhZG93Q2FtZXJhUmlnaHQ9NTAwO3RoaXMuc2hhZG93Q2FtZXJhQm90dG9tPS01MDA7dGhpcy5zaGFkb3dDYW1lcmFWaXNpYmxlPSExO3RoaXMuc2hhZG93Qmlhcz0wO3RoaXMuc2hhZG93RGFya25lc3M9LjU7dGhpcy5zaGFkb3dNYXBIZWlnaHQ9dGhpcy5zaGFkb3dNYXBXaWR0aD01MTI7dGhpcy5zaGFkb3dDYXNjYWRlPSExO1xyXG50aGlzLnNoYWRvd0Nhc2NhZGVPZmZzZXQ9bmV3IFRIUkVFLlZlY3RvcjMoMCwwLC0xRTMpO3RoaXMuc2hhZG93Q2FzY2FkZUNvdW50PTI7dGhpcy5zaGFkb3dDYXNjYWRlQmlhcz1bMCwwLDBdO3RoaXMuc2hhZG93Q2FzY2FkZVdpZHRoPVs1MTIsNTEyLDUxMl07dGhpcy5zaGFkb3dDYXNjYWRlSGVpZ2h0PVs1MTIsNTEyLDUxMl07dGhpcy5zaGFkb3dDYXNjYWRlTmVhclo9Wy0xLC45OSwuOTk4XTt0aGlzLnNoYWRvd0Nhc2NhZGVGYXJaPVsuOTksLjk5OCwxXTt0aGlzLnNoYWRvd0Nhc2NhZGVBcnJheT1bXTt0aGlzLnNoYWRvd01hdHJpeD10aGlzLnNoYWRvd0NhbWVyYT10aGlzLnNoYWRvd01hcFNpemU9dGhpcy5zaGFkb3dNYXA9bnVsbH07VEhSRUUuRGlyZWN0aW9uYWxMaWdodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaWdodC5wcm90b3R5cGUpO1RIUkVFLkRpcmVjdGlvbmFsTGlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkRpcmVjdGlvbmFsTGlnaHQ7XHJcblRIUkVFLkRpcmVjdGlvbmFsTGlnaHQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQ7VEhSRUUuTGlnaHQucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLnRhcmdldD10aGlzLnRhcmdldC5jbG9uZSgpO2EuaW50ZW5zaXR5PXRoaXMuaW50ZW5zaXR5O2EuY2FzdFNoYWRvdz10aGlzLmNhc3RTaGFkb3c7YS5vbmx5U2hhZG93PXRoaXMub25seVNoYWRvdzthLnNoYWRvd0NhbWVyYU5lYXI9dGhpcy5zaGFkb3dDYW1lcmFOZWFyO2Euc2hhZG93Q2FtZXJhRmFyPXRoaXMuc2hhZG93Q2FtZXJhRmFyO2Euc2hhZG93Q2FtZXJhTGVmdD10aGlzLnNoYWRvd0NhbWVyYUxlZnQ7YS5zaGFkb3dDYW1lcmFSaWdodD10aGlzLnNoYWRvd0NhbWVyYVJpZ2h0O2Euc2hhZG93Q2FtZXJhVG9wPXRoaXMuc2hhZG93Q2FtZXJhVG9wO2Euc2hhZG93Q2FtZXJhQm90dG9tPXRoaXMuc2hhZG93Q2FtZXJhQm90dG9tO2Euc2hhZG93Q2FtZXJhVmlzaWJsZT1cclxudGhpcy5zaGFkb3dDYW1lcmFWaXNpYmxlO2Euc2hhZG93Qmlhcz10aGlzLnNoYWRvd0JpYXM7YS5zaGFkb3dEYXJrbmVzcz10aGlzLnNoYWRvd0RhcmtuZXNzO2Euc2hhZG93TWFwV2lkdGg9dGhpcy5zaGFkb3dNYXBXaWR0aDthLnNoYWRvd01hcEhlaWdodD10aGlzLnNoYWRvd01hcEhlaWdodDthLnNoYWRvd0Nhc2NhZGU9dGhpcy5zaGFkb3dDYXNjYWRlO2Euc2hhZG93Q2FzY2FkZU9mZnNldC5jb3B5KHRoaXMuc2hhZG93Q2FzY2FkZU9mZnNldCk7YS5zaGFkb3dDYXNjYWRlQ291bnQ9dGhpcy5zaGFkb3dDYXNjYWRlQ291bnQ7YS5zaGFkb3dDYXNjYWRlQmlhcz10aGlzLnNoYWRvd0Nhc2NhZGVCaWFzLnNsaWNlKDApO2Euc2hhZG93Q2FzY2FkZVdpZHRoPXRoaXMuc2hhZG93Q2FzY2FkZVdpZHRoLnNsaWNlKDApO2Euc2hhZG93Q2FzY2FkZUhlaWdodD10aGlzLnNoYWRvd0Nhc2NhZGVIZWlnaHQuc2xpY2UoMCk7YS5zaGFkb3dDYXNjYWRlTmVhclo9dGhpcy5zaGFkb3dDYXNjYWRlTmVhclouc2xpY2UoMCk7XHJcbmEuc2hhZG93Q2FzY2FkZUZhclo9dGhpcy5zaGFkb3dDYXNjYWRlRmFyWi5zbGljZSgwKTtyZXR1cm4gYX07VEhSRUUuSGVtaXNwaGVyZUxpZ2h0PWZ1bmN0aW9uKGEsYixjKXtUSFJFRS5MaWdodC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiSGVtaXNwaGVyZUxpZ2h0XCI7dGhpcy5wb3NpdGlvbi5zZXQoMCwxMDAsMCk7dGhpcy5ncm91bmRDb2xvcj1uZXcgVEhSRUUuQ29sb3IoYik7dGhpcy5pbnRlbnNpdHk9dm9pZCAwIT09Yz9jOjF9O1RIUkVFLkhlbWlzcGhlcmVMaWdodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaWdodC5wcm90b3R5cGUpO1RIUkVFLkhlbWlzcGhlcmVMaWdodC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuSGVtaXNwaGVyZUxpZ2h0O1xyXG5USFJFRS5IZW1pc3BoZXJlTGlnaHQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodDtUSFJFRS5MaWdodC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuZ3JvdW5kQ29sb3IuY29weSh0aGlzLmdyb3VuZENvbG9yKTthLmludGVuc2l0eT10aGlzLmludGVuc2l0eTtyZXR1cm4gYX07VEhSRUUuUG9pbnRMaWdodD1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5MaWdodC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiUG9pbnRMaWdodFwiO3RoaXMuaW50ZW5zaXR5PXZvaWQgMCE9PWI/YjoxO3RoaXMuZGlzdGFuY2U9dm9pZCAwIT09Yz9jOjA7dGhpcy5kZWNheT12b2lkIDAhPT1kP2Q6MX07VEhSRUUuUG9pbnRMaWdodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaWdodC5wcm90b3R5cGUpO1RIUkVFLlBvaW50TGlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBvaW50TGlnaHQ7XHJcblRIUkVFLlBvaW50TGlnaHQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlBvaW50TGlnaHQ7VEhSRUUuTGlnaHQucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLmludGVuc2l0eT10aGlzLmludGVuc2l0eTthLmRpc3RhbmNlPXRoaXMuZGlzdGFuY2U7YS5kZWNheT10aGlzLmRlY2F5O3JldHVybiBhfTtcclxuVEhSRUUuU3BvdExpZ2h0PWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtUSFJFRS5MaWdodC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiU3BvdExpZ2h0XCI7dGhpcy5wb3NpdGlvbi5zZXQoMCwxLDApO3RoaXMudGFyZ2V0PW5ldyBUSFJFRS5PYmplY3QzRDt0aGlzLmludGVuc2l0eT12b2lkIDAhPT1iP2I6MTt0aGlzLmRpc3RhbmNlPXZvaWQgMCE9PWM/YzowO3RoaXMuYW5nbGU9dm9pZCAwIT09ZD9kOk1hdGguUEkvMzt0aGlzLmV4cG9uZW50PXZvaWQgMCE9PWU/ZToxMDt0aGlzLmRlY2F5PXZvaWQgMCE9PWY/ZjoxO3RoaXMub25seVNoYWRvdz10aGlzLmNhc3RTaGFkb3c9ITE7dGhpcy5zaGFkb3dDYW1lcmFOZWFyPTUwO3RoaXMuc2hhZG93Q2FtZXJhRmFyPTVFMzt0aGlzLnNoYWRvd0NhbWVyYUZvdj01MDt0aGlzLnNoYWRvd0NhbWVyYVZpc2libGU9ITE7dGhpcy5zaGFkb3dCaWFzPTA7dGhpcy5zaGFkb3dEYXJrbmVzcz0uNTt0aGlzLnNoYWRvd01hcEhlaWdodD10aGlzLnNoYWRvd01hcFdpZHRoPVxyXG41MTI7dGhpcy5zaGFkb3dNYXRyaXg9dGhpcy5zaGFkb3dDYW1lcmE9dGhpcy5zaGFkb3dNYXBTaXplPXRoaXMuc2hhZG93TWFwPW51bGx9O1RIUkVFLlNwb3RMaWdodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaWdodC5wcm90b3R5cGUpO1RIUkVFLlNwb3RMaWdodC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU3BvdExpZ2h0O1xyXG5USFJFRS5TcG90TGlnaHQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlNwb3RMaWdodDtUSFJFRS5MaWdodC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EudGFyZ2V0PXRoaXMudGFyZ2V0LmNsb25lKCk7YS5pbnRlbnNpdHk9dGhpcy5pbnRlbnNpdHk7YS5kaXN0YW5jZT10aGlzLmRpc3RhbmNlO2EuYW5nbGU9dGhpcy5hbmdsZTthLmV4cG9uZW50PXRoaXMuZXhwb25lbnQ7YS5kZWNheT10aGlzLmRlY2F5O2EuY2FzdFNoYWRvdz10aGlzLmNhc3RTaGFkb3c7YS5vbmx5U2hhZG93PXRoaXMub25seVNoYWRvdzthLnNoYWRvd0NhbWVyYU5lYXI9dGhpcy5zaGFkb3dDYW1lcmFOZWFyO2Euc2hhZG93Q2FtZXJhRmFyPXRoaXMuc2hhZG93Q2FtZXJhRmFyO2Euc2hhZG93Q2FtZXJhRm92PXRoaXMuc2hhZG93Q2FtZXJhRm92O2Euc2hhZG93Q2FtZXJhVmlzaWJsZT10aGlzLnNoYWRvd0NhbWVyYVZpc2libGU7YS5zaGFkb3dCaWFzPXRoaXMuc2hhZG93QmlhcztcclxuYS5zaGFkb3dEYXJrbmVzcz10aGlzLnNoYWRvd0RhcmtuZXNzO2Euc2hhZG93TWFwV2lkdGg9dGhpcy5zaGFkb3dNYXBXaWR0aDthLnNoYWRvd01hcEhlaWdodD10aGlzLnNoYWRvd01hcEhlaWdodDtyZXR1cm4gYX07VEhSRUUuQ2FjaGU9e2ZpbGVzOnt9LGFkZDpmdW5jdGlvbihhLGIpe3RoaXMuZmlsZXNbYV09Yn0sZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmZpbGVzW2FdfSxyZW1vdmU6ZnVuY3Rpb24oYSl7ZGVsZXRlIHRoaXMuZmlsZXNbYV19LGNsZWFyOmZ1bmN0aW9uKCl7dGhpcy5maWxlcz17fX19O1xyXG5USFJFRS5Mb2FkZXI9ZnVuY3Rpb24oYSl7dGhpcy5zdGF0dXNEb21FbGVtZW50PSh0aGlzLnNob3dTdGF0dXM9YSk/VEhSRUUuTG9hZGVyLnByb3RvdHlwZS5hZGRTdGF0dXNFbGVtZW50KCk6bnVsbDt0aGlzLmltYWdlTG9hZGVyPW5ldyBUSFJFRS5JbWFnZUxvYWRlcjt0aGlzLm9uTG9hZFN0YXJ0PWZ1bmN0aW9uKCl7fTt0aGlzLm9uTG9hZFByb2dyZXNzPWZ1bmN0aW9uKCl7fTt0aGlzLm9uTG9hZENvbXBsZXRlPWZ1bmN0aW9uKCl7fX07XHJcblRIUkVFLkxvYWRlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkxvYWRlcixjcm9zc09yaWdpbjp2b2lkIDAsYWRkU3RhdHVzRWxlbWVudDpmdW5jdGlvbigpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7YS5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCI7YS5zdHlsZS5yaWdodD1cIjBweFwiO2Euc3R5bGUudG9wPVwiMHB4XCI7YS5zdHlsZS5mb250U2l6ZT1cIjAuOGVtXCI7YS5zdHlsZS50ZXh0QWxpZ249XCJsZWZ0XCI7YS5zdHlsZS5iYWNrZ3JvdW5kPVwicmdiYSgwLDAsMCwwLjI1KVwiO2Euc3R5bGUuY29sb3I9XCIjZmZmXCI7YS5zdHlsZS53aWR0aD1cIjEyMHB4XCI7YS5zdHlsZS5wYWRkaW5nPVwiMC41ZW0gMC41ZW0gMC41ZW0gMC41ZW1cIjthLnN0eWxlLnpJbmRleD0xRTM7YS5pbm5lckhUTUw9XCJMb2FkaW5nIC4uLlwiO3JldHVybiBhfSx1cGRhdGVQcm9ncmVzczpmdW5jdGlvbihhKXt2YXIgYj1cIkxvYWRlZCBcIixiPWEudG90YWw/YisoKDEwMCphLmxvYWRlZC9hLnRvdGFsKS50b0ZpeGVkKDApK1xyXG5cIiVcIik6YisoKGEubG9hZGVkLzEwMjQpLnRvRml4ZWQoMikrXCIgS0JcIik7dGhpcy5zdGF0dXNEb21FbGVtZW50LmlubmVySFRNTD1ifSxleHRyYWN0VXJsQmFzZTpmdW5jdGlvbihhKXthPWEuc3BsaXQoXCIvXCIpO2lmKDE9PT1hLmxlbmd0aClyZXR1cm5cIi4vXCI7YS5wb3AoKTtyZXR1cm4gYS5qb2luKFwiL1wiKStcIi9cIn0saW5pdE1hdGVyaWFsczpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhLmxlbmd0aDsrK2QpY1tkXT10aGlzLmNyZWF0ZU1hdGVyaWFsKGFbZF0sYik7cmV0dXJuIGN9LG5lZWRzVGFuZ2VudHM6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aDtiPGM7YisrKWlmKGFbYl1pbnN0YW5jZW9mIFRIUkVFLlNoYWRlck1hdGVyaWFsKXJldHVybiEwO3JldHVybiExfSxjcmVhdGVNYXRlcmlhbDpmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSl7YT1NYXRoLmxvZyhhKS9NYXRoLkxOMjtyZXR1cm4gTWF0aC5wb3coMixNYXRoLnJvdW5kKGEpKX1mdW5jdGlvbiBkKGEsXHJcbmQsZSxnLGgsayxzKXt2YXIgdT1iK2Usdix4PVRIUkVFLkxvYWRlci5IYW5kbGVycy5nZXQodSk7bnVsbCE9PXg/dj14LmxvYWQodSk6KHY9bmV3IFRIUkVFLlRleHR1cmUseD1mLmltYWdlTG9hZGVyLHguY3Jvc3NPcmlnaW49Zi5jcm9zc09yaWdpbix4LmxvYWQodSxmdW5jdGlvbihhKXtpZighMT09PVRIUkVFLk1hdGguaXNQb3dlck9mVHdvKGEud2lkdGgpfHwhMT09PVRIUkVFLk1hdGguaXNQb3dlck9mVHdvKGEuaGVpZ2h0KSl7dmFyIGI9YyhhLndpZHRoKSxkPWMoYS5oZWlnaHQpLGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtlLndpZHRoPWI7ZS5oZWlnaHQ9ZDtlLmdldENvbnRleHQoXCIyZFwiKS5kcmF3SW1hZ2UoYSwwLDAsYixkKTt2LmltYWdlPWV9ZWxzZSB2LmltYWdlPWE7di5uZWVkc1VwZGF0ZT0hMH0pKTt2LnNvdXJjZUZpbGU9ZTtnJiYodi5yZXBlYXQuc2V0KGdbMF0sZ1sxXSksMSE9PWdbMF0mJih2LndyYXBTPVRIUkVFLlJlcGVhdFdyYXBwaW5nKSxcclxuMSE9PWdbMV0mJih2LndyYXBUPVRIUkVFLlJlcGVhdFdyYXBwaW5nKSk7aCYmdi5vZmZzZXQuc2V0KGhbMF0saFsxXSk7ayYmKGU9e3JlcGVhdDpUSFJFRS5SZXBlYXRXcmFwcGluZyxtaXJyb3I6VEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZ30sdm9pZCAwIT09ZVtrWzBdXSYmKHYud3JhcFM9ZVtrWzBdXSksdm9pZCAwIT09ZVtrWzFdXSYmKHYud3JhcFQ9ZVtrWzFdXSkpO3MmJih2LmFuaXNvdHJvcHk9cyk7YVtkXT12fWZ1bmN0aW9uIGUoYSl7cmV0dXJuKDI1NSphWzBdPDwxNikrKDI1NSphWzFdPDw4KSsyNTUqYVsyXX12YXIgZj10aGlzLGc9XCJNZXNoTGFtYmVydE1hdGVyaWFsXCIsaD17Y29sb3I6MTU2NTg3MzQsb3BhY2l0eToxLG1hcDpudWxsLGxpZ2h0TWFwOm51bGwsbm9ybWFsTWFwOm51bGwsYnVtcE1hcDpudWxsLHdpcmVmcmFtZTohMX07aWYoYS5zaGFkaW5nKXt2YXIgaz1hLnNoYWRpbmcudG9Mb3dlckNhc2UoKTtcInBob25nXCI9PT1rP2c9XCJNZXNoUGhvbmdNYXRlcmlhbFwiOlxyXG5cImJhc2ljXCI9PT1rJiYoZz1cIk1lc2hCYXNpY01hdGVyaWFsXCIpfXZvaWQgMCE9PWEuYmxlbmRpbmcmJnZvaWQgMCE9PVRIUkVFW2EuYmxlbmRpbmddJiYoaC5ibGVuZGluZz1USFJFRVthLmJsZW5kaW5nXSk7dm9pZCAwIT09YS50cmFuc3BhcmVudCYmKGgudHJhbnNwYXJlbnQ9YS50cmFuc3BhcmVudCk7dm9pZCAwIT09YS5vcGFjaXR5JiYxPmEub3BhY2l0eSYmKGgudHJhbnNwYXJlbnQ9ITApO3ZvaWQgMCE9PWEuZGVwdGhUZXN0JiYoaC5kZXB0aFRlc3Q9YS5kZXB0aFRlc3QpO3ZvaWQgMCE9PWEuZGVwdGhXcml0ZSYmKGguZGVwdGhXcml0ZT1hLmRlcHRoV3JpdGUpO3ZvaWQgMCE9PWEudmlzaWJsZSYmKGgudmlzaWJsZT1hLnZpc2libGUpO3ZvaWQgMCE9PWEuZmxpcFNpZGVkJiYoaC5zaWRlPVRIUkVFLkJhY2tTaWRlKTt2b2lkIDAhPT1hLmRvdWJsZVNpZGVkJiYoaC5zaWRlPVRIUkVFLkRvdWJsZVNpZGUpO3ZvaWQgMCE9PWEud2lyZWZyYW1lJiYoaC53aXJlZnJhbWU9YS53aXJlZnJhbWUpO1xyXG52b2lkIDAhPT1hLnZlcnRleENvbG9ycyYmKFwiZmFjZVwiPT09YS52ZXJ0ZXhDb2xvcnM/aC52ZXJ0ZXhDb2xvcnM9VEhSRUUuRmFjZUNvbG9yczphLnZlcnRleENvbG9ycyYmKGgudmVydGV4Q29sb3JzPVRIUkVFLlZlcnRleENvbG9ycykpO2EuY29sb3JEaWZmdXNlP2guY29sb3I9ZShhLmNvbG9yRGlmZnVzZSk6YS5EYmdDb2xvciYmKGguY29sb3I9YS5EYmdDb2xvcik7YS5jb2xvclNwZWN1bGFyJiYoaC5zcGVjdWxhcj1lKGEuY29sb3JTcGVjdWxhcikpO2EuY29sb3JFbWlzc2l2ZSYmKGguZW1pc3NpdmU9ZShhLmNvbG9yRW1pc3NpdmUpKTt2b2lkIDAhPT1hLnRyYW5zcGFyZW5jeSYmKGNvbnNvbGUud2FybihcIlRIUkVFLkxvYWRlcjogdHJhbnNwYXJlbmN5IGhhcyBiZWVuIHJlbmFtZWQgdG8gb3BhY2l0eVwiKSxhLm9wYWNpdHk9YS50cmFuc3BhcmVuY3kpO3ZvaWQgMCE9PWEub3BhY2l0eSYmKGgub3BhY2l0eT1hLm9wYWNpdHkpO2Euc3BlY3VsYXJDb2VmJiYoaC5zaGluaW5lc3M9XHJcbmEuc3BlY3VsYXJDb2VmKTthLm1hcERpZmZ1c2UmJmImJmQoaCxcIm1hcFwiLGEubWFwRGlmZnVzZSxhLm1hcERpZmZ1c2VSZXBlYXQsYS5tYXBEaWZmdXNlT2Zmc2V0LGEubWFwRGlmZnVzZVdyYXAsYS5tYXBEaWZmdXNlQW5pc290cm9weSk7YS5tYXBMaWdodCYmYiYmZChoLFwibGlnaHRNYXBcIixhLm1hcExpZ2h0LGEubWFwTGlnaHRSZXBlYXQsYS5tYXBMaWdodE9mZnNldCxhLm1hcExpZ2h0V3JhcCxhLm1hcExpZ2h0QW5pc290cm9weSk7YS5tYXBCdW1wJiZiJiZkKGgsXCJidW1wTWFwXCIsYS5tYXBCdW1wLGEubWFwQnVtcFJlcGVhdCxhLm1hcEJ1bXBPZmZzZXQsYS5tYXBCdW1wV3JhcCxhLm1hcEJ1bXBBbmlzb3Ryb3B5KTthLm1hcE5vcm1hbCYmYiYmZChoLFwibm9ybWFsTWFwXCIsYS5tYXBOb3JtYWwsYS5tYXBOb3JtYWxSZXBlYXQsYS5tYXBOb3JtYWxPZmZzZXQsYS5tYXBOb3JtYWxXcmFwLGEubWFwTm9ybWFsQW5pc290cm9weSk7YS5tYXBTcGVjdWxhciYmYiYmZChoLFwic3BlY3VsYXJNYXBcIixcclxuYS5tYXBTcGVjdWxhcixhLm1hcFNwZWN1bGFyUmVwZWF0LGEubWFwU3BlY3VsYXJPZmZzZXQsYS5tYXBTcGVjdWxhcldyYXAsYS5tYXBTcGVjdWxhckFuaXNvdHJvcHkpO2EubWFwQWxwaGEmJmImJmQoaCxcImFscGhhTWFwXCIsYS5tYXBBbHBoYSxhLm1hcEFscGhhUmVwZWF0LGEubWFwQWxwaGFPZmZzZXQsYS5tYXBBbHBoYVdyYXAsYS5tYXBBbHBoYUFuaXNvdHJvcHkpO2EubWFwQnVtcFNjYWxlJiYoaC5idW1wU2NhbGU9YS5tYXBCdW1wU2NhbGUpO2EubWFwTm9ybWFsRmFjdG9yJiYoaC5ub3JtYWxTY2FsZT1uZXcgVEhSRUUuVmVjdG9yMihhLm1hcE5vcm1hbEZhY3RvcixhLm1hcE5vcm1hbEZhY3RvcikpO2c9bmV3IFRIUkVFW2ddKGgpO3ZvaWQgMCE9PWEuRGJnTmFtZSYmKGcubmFtZT1hLkRiZ05hbWUpO3JldHVybiBnfX07XHJcblRIUkVFLkxvYWRlci5IYW5kbGVycz17aGFuZGxlcnM6W10sYWRkOmZ1bmN0aW9uKGEsYil7dGhpcy5oYW5kbGVycy5wdXNoKGEsYil9LGdldDpmdW5jdGlvbihhKXtmb3IodmFyIGI9MCxjPXRoaXMuaGFuZGxlcnMubGVuZ3RoO2I8YztiKz0yKXt2YXIgZD10aGlzLmhhbmRsZXJzW2IrMV07aWYodGhpcy5oYW5kbGVyc1tiXS50ZXN0KGEpKXJldHVybiBkfXJldHVybiBudWxsfX07VEhSRUUuWEhSTG9hZGVyPWZ1bmN0aW9uKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyfTtcclxuVEhSRUUuWEhSTG9hZGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuWEhSTG9hZGVyLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxmPVRIUkVFLkNhY2hlLmdldChhKTt2b2lkIDAhPT1mP2ImJmIoZik6KGY9bmV3IFhNTEh0dHBSZXF1ZXN0LGYub3BlbihcIkdFVFwiLGEsITApLGYuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbihjKXtUSFJFRS5DYWNoZS5hZGQoYSx0aGlzLnJlc3BvbnNlKTtiJiZiKHRoaXMucmVzcG9uc2UpO2UubWFuYWdlci5pdGVtRW5kKGEpfSwhMSksdm9pZCAwIT09YyYmZi5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIixmdW5jdGlvbihhKXtjKGEpfSwhMSksdm9pZCAwIT09ZCYmZi5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIixmdW5jdGlvbihhKXtkKGEpfSwhMSksdm9pZCAwIT09dGhpcy5jcm9zc09yaWdpbiYmKGYuY3Jvc3NPcmlnaW49dGhpcy5jcm9zc09yaWdpbiksdm9pZCAwIT09dGhpcy5yZXNwb25zZVR5cGUmJihmLnJlc3BvbnNlVHlwZT1cclxudGhpcy5yZXNwb25zZVR5cGUpLGYuc2VuZChudWxsKSxlLm1hbmFnZXIuaXRlbVN0YXJ0KGEpKX0sc2V0UmVzcG9uc2VUeXBlOmZ1bmN0aW9uKGEpe3RoaXMucmVzcG9uc2VUeXBlPWF9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YX19O1RIUkVFLkltYWdlTG9hZGVyPWZ1bmN0aW9uKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyfTtcclxuVEhSRUUuSW1hZ2VMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5JbWFnZUxvYWRlcixsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXMsZj1USFJFRS5DYWNoZS5nZXQoYSk7aWYodm9pZCAwIT09ZiliKGYpO2Vsc2UgcmV0dXJuIGY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSxmLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsZnVuY3Rpb24oYyl7VEhSRUUuQ2FjaGUuYWRkKGEsdGhpcyk7YiYmYih0aGlzKTtlLm1hbmFnZXIuaXRlbUVuZChhKX0sITEpLHZvaWQgMCE9PWMmJmYuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsZnVuY3Rpb24oYSl7YyhhKX0sITEpLHZvaWQgMCE9PWQmJmYuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZnVuY3Rpb24oYSl7ZChhKX0sITEpLHZvaWQgMCE9PXRoaXMuY3Jvc3NPcmlnaW4mJihmLmNyb3NzT3JpZ2luPXRoaXMuY3Jvc3NPcmlnaW4pLGYuc3JjPWEsZS5tYW5hZ2VyLml0ZW1TdGFydChhKSxmfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPVxyXG5hfX07VEhSRUUuSlNPTkxvYWRlcj1mdW5jdGlvbihhKXtUSFJFRS5Mb2FkZXIuY2FsbCh0aGlzLGEpO3RoaXMud2l0aENyZWRlbnRpYWxzPSExfTtUSFJFRS5KU09OTG9hZGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxvYWRlci5wcm90b3R5cGUpO1RIUkVFLkpTT05Mb2FkZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkpTT05Mb2FkZXI7VEhSRUUuSlNPTkxvYWRlci5wcm90b3R5cGUubG9hZD1mdW5jdGlvbihhLGIsYyl7Yz1jJiZcInN0cmluZ1wiPT09dHlwZW9mIGM/Yzp0aGlzLmV4dHJhY3RVcmxCYXNlKGEpO3RoaXMub25Mb2FkU3RhcnQoKTt0aGlzLmxvYWRBamF4SlNPTih0aGlzLGEsYixjKX07XHJcblRIUkVFLkpTT05Mb2FkZXIucHJvdG90eXBlLmxvYWRBamF4SlNPTj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPW5ldyBYTUxIdHRwUmVxdWVzdCxnPTA7Zi5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtpZihmLnJlYWR5U3RhdGU9PT1mLkRPTkUpaWYoMjAwPT09Zi5zdGF0dXN8fDA9PT1mLnN0YXR1cyl7aWYoZi5yZXNwb25zZVRleHQpe3ZhciBoPUpTT04ucGFyc2UoZi5yZXNwb25zZVRleHQpLGs9aC5tZXRhZGF0YTtpZih2b2lkIDAhPT1rKXtpZihcIm9iamVjdFwiPT09ay50eXBlKXtUSFJFRS5lcnJvcihcIlRIUkVFLkpTT05Mb2FkZXI6IFwiK2IrXCIgc2hvdWxkIGJlIGxvYWRlZCB3aXRoIFRIUkVFLk9iamVjdExvYWRlciBpbnN0ZWFkLlwiKTtyZXR1cm59aWYoXCJzY2VuZVwiPT09ay50eXBlKXtUSFJFRS5lcnJvcihcIlRIUkVFLkpTT05Mb2FkZXI6IFwiK2IrXCIgc2VlbXMgdG8gYmUgYSBTY2VuZS4gVXNlIFRIUkVFLlNjZW5lTG9hZGVyIGluc3RlYWQuXCIpO3JldHVybn19aD1hLnBhcnNlKGgsXHJcbmQpO2MoaC5nZW9tZXRyeSxoLm1hdGVyaWFscyl9ZWxzZSBUSFJFRS5lcnJvcihcIlRIUkVFLkpTT05Mb2FkZXI6IFwiK2IrXCIgc2VlbXMgdG8gYmUgdW5yZWFjaGFibGUgb3IgdGhlIGZpbGUgaXMgZW1wdHkuXCIpO2Eub25Mb2FkQ29tcGxldGUoKX1lbHNlIFRIUkVFLmVycm9yKFwiVEhSRUUuSlNPTkxvYWRlcjogQ291bGRuJ3QgbG9hZCBcIitiK1wiIChcIitmLnN0YXR1cytcIilcIik7ZWxzZSBmLnJlYWR5U3RhdGU9PT1mLkxPQURJTkc/ZSYmKDA9PT1nJiYoZz1mLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1MZW5ndGhcIikpLGUoe3RvdGFsOmcsbG9hZGVkOmYucmVzcG9uc2VUZXh0Lmxlbmd0aH0pKTpmLnJlYWR5U3RhdGU9PT1mLkhFQURFUlNfUkVDRUlWRUQmJnZvaWQgMCE9PWUmJihnPWYuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LUxlbmd0aFwiKSl9O2Yub3BlbihcIkdFVFwiLGIsITApO2Yud2l0aENyZWRlbnRpYWxzPXRoaXMud2l0aENyZWRlbnRpYWxzO2Yuc2VuZChudWxsKX07XHJcblRIUkVFLkpTT05Mb2FkZXIucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IFRIUkVFLkdlb21ldHJ5LGQ9dm9pZCAwIT09YS5zY2FsZT8xL2Euc2NhbGU6MTsoZnVuY3Rpb24oYil7dmFyIGQsZyxoLGssbCxwLHEsbix0LHIscyx1LHYseD1hLmZhY2VzO3A9YS52ZXJ0aWNlczt2YXIgRD1hLm5vcm1hbHMsdz1hLmNvbG9ycyx5PTA7aWYodm9pZCAwIT09YS51dnMpe2ZvcihkPTA7ZDxhLnV2cy5sZW5ndGg7ZCsrKWEudXZzW2RdLmxlbmd0aCYmeSsrO2ZvcihkPTA7ZDx5O2QrKyljLmZhY2VWZXJ0ZXhVdnNbZF09W119az0wO2ZvcihsPXAubGVuZ3RoO2s8bDspZD1uZXcgVEhSRUUuVmVjdG9yMyxkLng9cFtrKytdKmIsZC55PXBbaysrXSpiLGQuej1wW2srK10qYixjLnZlcnRpY2VzLnB1c2goZCk7az0wO2ZvcihsPXgubGVuZ3RoO2s8bDspaWYoYj14W2srK10sdD1iJjEsaD1iJjIsZD1iJjgscT1iJjE2LHI9YiYzMixwPWImNjQsYiY9MTI4LHQpe3Q9bmV3IFRIUkVFLkZhY2UzO1xyXG50LmE9eFtrXTt0LmI9eFtrKzFdO3QuYz14W2srM107cz1uZXcgVEhSRUUuRmFjZTM7cy5hPXhbaysxXTtzLmI9eFtrKzJdO3MuYz14W2srM107ays9NDtoJiYoaD14W2srK10sdC5tYXRlcmlhbEluZGV4PWgscy5tYXRlcmlhbEluZGV4PWgpO2g9Yy5mYWNlcy5sZW5ndGg7aWYoZClmb3IoZD0wO2Q8eTtkKyspZm9yKHU9YS51dnNbZF0sYy5mYWNlVmVydGV4VXZzW2RdW2hdPVtdLGMuZmFjZVZlcnRleFV2c1tkXVtoKzFdPVtdLGc9MDs0Pmc7ZysrKW49eFtrKytdLHY9dVsyKm5dLG49dVsyKm4rMV0sdj1uZXcgVEhSRUUuVmVjdG9yMih2LG4pLDIhPT1nJiZjLmZhY2VWZXJ0ZXhVdnNbZF1baF0ucHVzaCh2KSwwIT09ZyYmYy5mYWNlVmVydGV4VXZzW2RdW2grMV0ucHVzaCh2KTtxJiYocT0zKnhbaysrXSx0Lm5vcm1hbC5zZXQoRFtxKytdLERbcSsrXSxEW3FdKSxzLm5vcm1hbC5jb3B5KHQubm9ybWFsKSk7aWYocilmb3IoZD0wOzQ+ZDtkKyspcT0zKnhbaysrXSxyPW5ldyBUSFJFRS5WZWN0b3IzKERbcSsrXSxcclxuRFtxKytdLERbcV0pLDIhPT1kJiZ0LnZlcnRleE5vcm1hbHMucHVzaChyKSwwIT09ZCYmcy52ZXJ0ZXhOb3JtYWxzLnB1c2gocik7cCYmKHA9eFtrKytdLHA9d1twXSx0LmNvbG9yLnNldEhleChwKSxzLmNvbG9yLnNldEhleChwKSk7aWYoYilmb3IoZD0wOzQ+ZDtkKyspcD14W2srK10scD13W3BdLDIhPT1kJiZ0LnZlcnRleENvbG9ycy5wdXNoKG5ldyBUSFJFRS5Db2xvcihwKSksMCE9PWQmJnMudmVydGV4Q29sb3JzLnB1c2gobmV3IFRIUkVFLkNvbG9yKHApKTtjLmZhY2VzLnB1c2godCk7Yy5mYWNlcy5wdXNoKHMpfWVsc2V7dD1uZXcgVEhSRUUuRmFjZTM7dC5hPXhbaysrXTt0LmI9eFtrKytdO3QuYz14W2srK107aCYmKGg9eFtrKytdLHQubWF0ZXJpYWxJbmRleD1oKTtoPWMuZmFjZXMubGVuZ3RoO2lmKGQpZm9yKGQ9MDtkPHk7ZCsrKWZvcih1PWEudXZzW2RdLGMuZmFjZVZlcnRleFV2c1tkXVtoXT1bXSxnPTA7Mz5nO2crKyluPXhbaysrXSx2PXVbMipuXSxuPXVbMipuKzFdLFxyXG52PW5ldyBUSFJFRS5WZWN0b3IyKHYsbiksYy5mYWNlVmVydGV4VXZzW2RdW2hdLnB1c2godik7cSYmKHE9Myp4W2srK10sdC5ub3JtYWwuc2V0KERbcSsrXSxEW3ErK10sRFtxXSkpO2lmKHIpZm9yKGQ9MDszPmQ7ZCsrKXE9Myp4W2srK10scj1uZXcgVEhSRUUuVmVjdG9yMyhEW3ErK10sRFtxKytdLERbcV0pLHQudmVydGV4Tm9ybWFscy5wdXNoKHIpO3AmJihwPXhbaysrXSx0LmNvbG9yLnNldEhleCh3W3BdKSk7aWYoYilmb3IoZD0wOzM+ZDtkKyspcD14W2srK10sdC52ZXJ0ZXhDb2xvcnMucHVzaChuZXcgVEhSRUUuQ29sb3Iod1twXSkpO2MuZmFjZXMucHVzaCh0KX19KShkKTsoZnVuY3Rpb24oKXt2YXIgYj12b2lkIDAhPT1hLmluZmx1ZW5jZXNQZXJWZXJ0ZXg/YS5pbmZsdWVuY2VzUGVyVmVydGV4OjI7aWYoYS5za2luV2VpZ2h0cylmb3IodmFyIGQ9MCxnPWEuc2tpbldlaWdodHMubGVuZ3RoO2Q8ZztkKz1iKWMuc2tpbldlaWdodHMucHVzaChuZXcgVEhSRUUuVmVjdG9yNChhLnNraW5XZWlnaHRzW2RdLFxyXG4xPGI/YS5za2luV2VpZ2h0c1tkKzFdOjAsMjxiP2Euc2tpbldlaWdodHNbZCsyXTowLDM8Yj9hLnNraW5XZWlnaHRzW2QrM106MCkpO2lmKGEuc2tpbkluZGljZXMpZm9yKGQ9MCxnPWEuc2tpbkluZGljZXMubGVuZ3RoO2Q8ZztkKz1iKWMuc2tpbkluZGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yNChhLnNraW5JbmRpY2VzW2RdLDE8Yj9hLnNraW5JbmRpY2VzW2QrMV06MCwyPGI/YS5za2luSW5kaWNlc1tkKzJdOjAsMzxiP2Euc2tpbkluZGljZXNbZCszXTowKSk7Yy5ib25lcz1hLmJvbmVzO2MuYm9uZXMmJjA8Yy5ib25lcy5sZW5ndGgmJihjLnNraW5XZWlnaHRzLmxlbmd0aCE9PWMuc2tpbkluZGljZXMubGVuZ3RofHxjLnNraW5JbmRpY2VzLmxlbmd0aCE9PWMudmVydGljZXMubGVuZ3RoKSYmVEhSRUUud2FybihcIlRIUkVFLkpTT05Mb2FkZXI6IFdoZW4gc2tpbm5pbmcsIG51bWJlciBvZiB2ZXJ0aWNlcyAoXCIrYy52ZXJ0aWNlcy5sZW5ndGgrXCIpLCBza2luSW5kaWNlcyAoXCIrXHJcbmMuc2tpbkluZGljZXMubGVuZ3RoK1wiKSwgYW5kIHNraW5XZWlnaHRzIChcIitjLnNraW5XZWlnaHRzLmxlbmd0aCtcIikgc2hvdWxkIG1hdGNoLlwiKTtjLmFuaW1hdGlvbj1hLmFuaW1hdGlvbjtjLmFuaW1hdGlvbnM9YS5hbmltYXRpb25zfSkoKTsoZnVuY3Rpb24oYil7aWYodm9pZCAwIT09YS5tb3JwaFRhcmdldHMpe3ZhciBkLGcsaCxrLGwscDtkPTA7Zm9yKGc9YS5tb3JwaFRhcmdldHMubGVuZ3RoO2Q8ZztkKyspZm9yKGMubW9ycGhUYXJnZXRzW2RdPXt9LGMubW9ycGhUYXJnZXRzW2RdLm5hbWU9YS5tb3JwaFRhcmdldHNbZF0ubmFtZSxjLm1vcnBoVGFyZ2V0c1tkXS52ZXJ0aWNlcz1bXSxsPWMubW9ycGhUYXJnZXRzW2RdLnZlcnRpY2VzLHA9YS5tb3JwaFRhcmdldHNbZF0udmVydGljZXMsaD0wLGs9cC5sZW5ndGg7aDxrO2grPTMpe3ZhciBxPW5ldyBUSFJFRS5WZWN0b3IzO3EueD1wW2hdKmI7cS55PXBbaCsxXSpiO3Euej1wW2grMl0qYjtsLnB1c2gocSl9fWlmKHZvaWQgMCE9PVxyXG5hLm1vcnBoQ29sb3JzKWZvcihkPTAsZz1hLm1vcnBoQ29sb3JzLmxlbmd0aDtkPGc7ZCsrKWZvcihjLm1vcnBoQ29sb3JzW2RdPXt9LGMubW9ycGhDb2xvcnNbZF0ubmFtZT1hLm1vcnBoQ29sb3JzW2RdLm5hbWUsYy5tb3JwaENvbG9yc1tkXS5jb2xvcnM9W10saz1jLm1vcnBoQ29sb3JzW2RdLmNvbG9ycyxsPWEubW9ycGhDb2xvcnNbZF0uY29sb3JzLGI9MCxoPWwubGVuZ3RoO2I8aDtiKz0zKXA9bmV3IFRIUkVFLkNvbG9yKDE2NzU1MjAwKSxwLnNldFJHQihsW2JdLGxbYisxXSxsW2IrMl0pLGsucHVzaChwKX0pKGQpO2MuY29tcHV0ZUZhY2VOb3JtYWxzKCk7Yy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtpZih2b2lkIDA9PT1hLm1hdGVyaWFsc3x8MD09PWEubWF0ZXJpYWxzLmxlbmd0aClyZXR1cm57Z2VvbWV0cnk6Y307ZD10aGlzLmluaXRNYXRlcmlhbHMoYS5tYXRlcmlhbHMsYik7dGhpcy5uZWVkc1RhbmdlbnRzKGQpJiZjLmNvbXB1dGVUYW5nZW50cygpO3JldHVybntnZW9tZXRyeTpjLFxyXG5tYXRlcmlhbHM6ZH19O1RIUkVFLkxvYWRpbmdNYW5hZ2VyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLGU9MCxmPTA7dGhpcy5vbkxvYWQ9YTt0aGlzLm9uUHJvZ3Jlc3M9Yjt0aGlzLm9uRXJyb3I9Yzt0aGlzLml0ZW1TdGFydD1mdW5jdGlvbihhKXtmKyt9O3RoaXMuaXRlbUVuZD1mdW5jdGlvbihhKXtlKys7aWYodm9pZCAwIT09ZC5vblByb2dyZXNzKWQub25Qcm9ncmVzcyhhLGUsZik7aWYoZT09PWYmJnZvaWQgMCE9PWQub25Mb2FkKWQub25Mb2FkKCl9fTtUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI9bmV3IFRIUkVFLkxvYWRpbmdNYW5hZ2VyO1RIUkVFLkJ1ZmZlckdlb21ldHJ5TG9hZGVyPWZ1bmN0aW9uKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyfTtcclxuVEhSRUUuQnVmZmVyR2VvbWV0cnlMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5CdWZmZXJHZW9tZXRyeUxvYWRlcixsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXMsZj1uZXcgVEhSRUUuWEhSTG9hZGVyKGUubWFuYWdlcik7Zi5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtmLmxvYWQoYSxmdW5jdGlvbihhKXtiKGUucGFyc2UoSlNPTi5wYXJzZShhKSkpfSxjLGQpfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPWF9LHBhcnNlOmZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSxjPWEuZGF0YS5hdHRyaWJ1dGVzLGQ7Zm9yKGQgaW4gYyl7dmFyIGU9Y1tkXSxmPW5ldyBzZWxmW2UudHlwZV0oZS5hcnJheSk7Yi5hZGRBdHRyaWJ1dGUoZCxuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGYsZS5pdGVtU2l6ZSkpfWM9YS5kYXRhLm9mZnNldHM7dm9pZCAwIT09YyYmKGIub2Zmc2V0cz1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKSk7XHJcbmE9YS5kYXRhLmJvdW5kaW5nU3BoZXJlO3ZvaWQgMCE9PWEmJihjPW5ldyBUSFJFRS5WZWN0b3IzLHZvaWQgMCE9PWEuY2VudGVyJiZjLmZyb21BcnJheShhLmNlbnRlciksYi5ib3VuZGluZ1NwaGVyZT1uZXcgVEhSRUUuU3BoZXJlKGMsYS5yYWRpdXMpKTtyZXR1cm4gYn19O1RIUkVFLk1hdGVyaWFsTG9hZGVyPWZ1bmN0aW9uKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyfTtcclxuVEhSRUUuTWF0ZXJpYWxMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5NYXRlcmlhbExvYWRlcixsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXMsZj1uZXcgVEhSRUUuWEhSTG9hZGVyKGUubWFuYWdlcik7Zi5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtmLmxvYWQoYSxmdW5jdGlvbihhKXtiKGUucGFyc2UoSlNPTi5wYXJzZShhKSkpfSxjLGQpfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPWF9LHBhcnNlOmZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBUSFJFRVthLnR5cGVdO3ZvaWQgMCE9PWEuY29sb3ImJmIuY29sb3Iuc2V0SGV4KGEuY29sb3IpO3ZvaWQgMCE9PWEuZW1pc3NpdmUmJmIuZW1pc3NpdmUuc2V0SGV4KGEuZW1pc3NpdmUpO3ZvaWQgMCE9PWEuc3BlY3VsYXImJmIuc3BlY3VsYXIuc2V0SGV4KGEuc3BlY3VsYXIpO3ZvaWQgMCE9PWEuc2hpbmluZXNzJiYoYi5zaGluaW5lc3M9YS5zaGluaW5lc3MpO1xyXG52b2lkIDAhPT1hLnVuaWZvcm1zJiYoYi51bmlmb3Jtcz1hLnVuaWZvcm1zKTt2b2lkIDAhPT1hLnZlcnRleFNoYWRlciYmKGIudmVydGV4U2hhZGVyPWEudmVydGV4U2hhZGVyKTt2b2lkIDAhPT1hLmZyYWdtZW50U2hhZGVyJiYoYi5mcmFnbWVudFNoYWRlcj1hLmZyYWdtZW50U2hhZGVyKTt2b2lkIDAhPT1hLnZlcnRleENvbG9ycyYmKGIudmVydGV4Q29sb3JzPWEudmVydGV4Q29sb3JzKTt2b2lkIDAhPT1hLnNoYWRpbmcmJihiLnNoYWRpbmc9YS5zaGFkaW5nKTt2b2lkIDAhPT1hLmJsZW5kaW5nJiYoYi5ibGVuZGluZz1hLmJsZW5kaW5nKTt2b2lkIDAhPT1hLnNpZGUmJihiLnNpZGU9YS5zaWRlKTt2b2lkIDAhPT1hLm9wYWNpdHkmJihiLm9wYWNpdHk9YS5vcGFjaXR5KTt2b2lkIDAhPT1hLnRyYW5zcGFyZW50JiYoYi50cmFuc3BhcmVudD1hLnRyYW5zcGFyZW50KTt2b2lkIDAhPT1hLndpcmVmcmFtZSYmKGIud2lyZWZyYW1lPWEud2lyZWZyYW1lKTt2b2lkIDAhPT1hLnNpemUmJlxyXG4oYi5zaXplPWEuc2l6ZSk7dm9pZCAwIT09YS5zaXplQXR0ZW51YXRpb24mJihiLnNpemVBdHRlbnVhdGlvbj1hLnNpemVBdHRlbnVhdGlvbik7aWYodm9pZCAwIT09YS5tYXRlcmlhbHMpZm9yKHZhciBjPTAsZD1hLm1hdGVyaWFscy5sZW5ndGg7YzxkO2MrKyliLm1hdGVyaWFscy5wdXNoKHRoaXMucGFyc2UoYS5tYXRlcmlhbHNbY10pKTtyZXR1cm4gYn19O1RIUkVFLk9iamVjdExvYWRlcj1mdW5jdGlvbihhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOlRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcjt0aGlzLnRleHR1cmVQYXRoPVwiXCJ9O1xyXG5USFJFRS5PYmplY3RMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5PYmplY3RMb2FkZXIsbG9hZDpmdW5jdGlvbihhLGIsYyxkKXtcIlwiPT09dGhpcy50ZXh0dXJlUGF0aCYmKHRoaXMudGV4dHVyZVBhdGg9YS5zdWJzdHJpbmcoMCxhLmxhc3RJbmRleE9mKFwiL1wiKSsxKSk7dmFyIGU9dGhpcyxmPW5ldyBUSFJFRS5YSFJMb2FkZXIoZS5tYW5hZ2VyKTtmLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO2YubG9hZChhLGZ1bmN0aW9uKGEpe2UucGFyc2UoSlNPTi5wYXJzZShhKSxiKX0sYyxkKX0sc2V0VGV4dHVyZVBhdGg6ZnVuY3Rpb24oYSl7dGhpcy50ZXh0dXJlUGF0aD1hfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPWF9LHBhcnNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5wYXJzZUdlb21ldHJpZXMoYS5nZW9tZXRyaWVzKSxkPXRoaXMucGFyc2VJbWFnZXMoYS5pbWFnZXMsZnVuY3Rpb24oKXt2b2lkIDAhPT1iJiZiKGUpfSksXHJcbmQ9dGhpcy5wYXJzZVRleHR1cmVzKGEudGV4dHVyZXMsZCksZD10aGlzLnBhcnNlTWF0ZXJpYWxzKGEubWF0ZXJpYWxzLGQpLGU9dGhpcy5wYXJzZU9iamVjdChhLm9iamVjdCxjLGQpO3ZvaWQgMCE9PWEuaW1hZ2VzJiYwIT09YS5pbWFnZXMubGVuZ3RofHx2b2lkIDA9PT1ifHxiKGUpO3JldHVybiBlfSxwYXJzZUdlb21ldHJpZXM6ZnVuY3Rpb24oYSl7dmFyIGI9e307aWYodm9pZCAwIT09YSlmb3IodmFyIGM9bmV3IFRIUkVFLkpTT05Mb2FkZXIsZD1uZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnlMb2FkZXIsZT0wLGY9YS5sZW5ndGg7ZTxmO2UrKyl7dmFyIGcsaD1hW2VdO3N3aXRjaChoLnR5cGUpe2Nhc2UgXCJQbGFuZUdlb21ldHJ5XCI6Y2FzZSBcIlBsYW5lQnVmZmVyR2VvbWV0cnlcIjpnPW5ldyBUSFJFRVtoLnR5cGVdKGgud2lkdGgsaC5oZWlnaHQsaC53aWR0aFNlZ21lbnRzLGguaGVpZ2h0U2VnbWVudHMpO2JyZWFrO2Nhc2UgXCJCb3hHZW9tZXRyeVwiOmNhc2UgXCJDdWJlR2VvbWV0cnlcIjpnPVxyXG5uZXcgVEhSRUUuQm94R2VvbWV0cnkoaC53aWR0aCxoLmhlaWdodCxoLmRlcHRoLGgud2lkdGhTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzLGguZGVwdGhTZWdtZW50cyk7YnJlYWs7Y2FzZSBcIkNpcmNsZUdlb21ldHJ5XCI6Zz1uZXcgVEhSRUUuQ2lyY2xlR2VvbWV0cnkoaC5yYWRpdXMsaC5zZWdtZW50cyk7YnJlYWs7Y2FzZSBcIkN5bGluZGVyR2VvbWV0cnlcIjpnPW5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KGgucmFkaXVzVG9wLGgucmFkaXVzQm90dG9tLGguaGVpZ2h0LGgucmFkaWFsU2VnbWVudHMsaC5oZWlnaHRTZWdtZW50cyxoLm9wZW5FbmRlZCk7YnJlYWs7Y2FzZSBcIlNwaGVyZUdlb21ldHJ5XCI6Zz1uZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoaC5yYWRpdXMsaC53aWR0aFNlZ21lbnRzLGguaGVpZ2h0U2VnbWVudHMsaC5waGlTdGFydCxoLnBoaUxlbmd0aCxoLnRoZXRhU3RhcnQsaC50aGV0YUxlbmd0aCk7YnJlYWs7Y2FzZSBcIkljb3NhaGVkcm9uR2VvbWV0cnlcIjpnPW5ldyBUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5KGgucmFkaXVzLFxyXG5oLmRldGFpbCk7YnJlYWs7Y2FzZSBcIlRvcnVzR2VvbWV0cnlcIjpnPW5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5KGgucmFkaXVzLGgudHViZSxoLnJhZGlhbFNlZ21lbnRzLGgudHVidWxhclNlZ21lbnRzLGguYXJjKTticmVhaztjYXNlIFwiVG9ydXNLbm90R2VvbWV0cnlcIjpnPW5ldyBUSFJFRS5Ub3J1c0tub3RHZW9tZXRyeShoLnJhZGl1cyxoLnR1YmUsaC5yYWRpYWxTZWdtZW50cyxoLnR1YnVsYXJTZWdtZW50cyxoLnAsaC5xLGguaGVpZ2h0U2NhbGUpO2JyZWFrO2Nhc2UgXCJCdWZmZXJHZW9tZXRyeVwiOmc9ZC5wYXJzZShoKTticmVhaztjYXNlIFwiR2VvbWV0cnlcIjpnPWMucGFyc2UoaC5kYXRhKS5nZW9tZXRyeX1nLnV1aWQ9aC51dWlkO3ZvaWQgMCE9PWgubmFtZSYmKGcubmFtZT1oLm5hbWUpO2JbaC51dWlkXT1nfXJldHVybiBifSxwYXJzZU1hdGVyaWFsczpmdW5jdGlvbihhLGIpe3ZhciBjPXt9O2lmKHZvaWQgMCE9PWEpZm9yKHZhciBkPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWJbYV0mJlxyXG5USFJFRS53YXJuKFwiVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgdGV4dHVyZVwiLGEpO3JldHVybiBiW2FdfSxlPW5ldyBUSFJFRS5NYXRlcmlhbExvYWRlcixmPTAsZz1hLmxlbmd0aDtmPGc7ZisrKXt2YXIgaD1hW2ZdLGs9ZS5wYXJzZShoKTtrLnV1aWQ9aC51dWlkO3ZvaWQgMCE9PWgubmFtZSYmKGsubmFtZT1oLm5hbWUpO3ZvaWQgMCE9PWgubWFwJiYoay5tYXA9ZChoLm1hcCkpO3ZvaWQgMCE9PWguYnVtcE1hcCYmKGsuYnVtcE1hcD1kKGguYnVtcE1hcCksaC5idW1wU2NhbGUmJihrLmJ1bXBTY2FsZT1uZXcgVEhSRUUuVmVjdG9yMihoLmJ1bXBTY2FsZSxoLmJ1bXBTY2FsZSkpKTt2b2lkIDAhPT1oLmFscGhhTWFwJiYoay5hbHBoYU1hcD1kKGguYWxwaGFNYXApKTt2b2lkIDAhPT1oLmVudk1hcCYmKGsuZW52TWFwPWQoaC5lbnZNYXApKTt2b2lkIDAhPT1oLm5vcm1hbE1hcCYmKGsubm9ybWFsTWFwPWQoaC5ub3JtYWxNYXApLGgubm9ybWFsU2NhbGUmJihrLm5vcm1hbFNjYWxlPVxyXG5uZXcgVEhSRUUuVmVjdG9yMihoLm5vcm1hbFNjYWxlLGgubm9ybWFsU2NhbGUpKSk7dm9pZCAwIT09aC5saWdodE1hcCYmKGsubGlnaHRNYXA9ZChoLmxpZ2h0TWFwKSk7dm9pZCAwIT09aC5zcGVjdWxhck1hcCYmKGsuc3BlY3VsYXJNYXA9ZChoLnNwZWN1bGFyTWFwKSk7Y1toLnV1aWRdPWt9cmV0dXJuIGN9LHBhcnNlSW1hZ2VzOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPXt9O2lmKHZvaWQgMCE9PWEmJjA8YS5sZW5ndGgpe3ZhciBlPW5ldyBUSFJFRS5Mb2FkaW5nTWFuYWdlcihiKSxmPW5ldyBUSFJFRS5JbWFnZUxvYWRlcihlKTtmLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO2Zvcih2YXIgZT1mdW5jdGlvbihhKXtjLm1hbmFnZXIuaXRlbVN0YXJ0KGEpO3JldHVybiBmLmxvYWQoYSxmdW5jdGlvbigpe2MubWFuYWdlci5pdGVtRW5kKGEpfSl9LGc9MCxoPWEubGVuZ3RoO2c8aDtnKyspe3ZhciBrPWFbZ10sbD0vXihcXC9cXC8pfChbYS16XSs6KFxcL1xcLyk/KS9pLnRlc3Qoay51cmwpP1xyXG5rLnVybDpjLnRleHR1cmVQYXRoK2sudXJsO2Rbay51dWlkXT1lKGwpfX1yZXR1cm4gZH0scGFyc2VUZXh0dXJlczpmdW5jdGlvbihhLGIpe3ZhciBjPXt9O2lmKHZvaWQgMCE9PWEpZm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZj1hW2RdO3ZvaWQgMD09PWYuaW1hZ2UmJlRIUkVFLndhcm4oJ1RIUkVFLk9iamVjdExvYWRlcjogTm8gXCJpbWFnZVwiIHNwZWZpY2llZCBmb3InLGYudXVpZCk7dm9pZCAwPT09YltmLmltYWdlXSYmVEhSRUUud2FybihcIlRIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGltYWdlXCIsZi5pbWFnZSk7dmFyIGc9bmV3IFRIUkVFLlRleHR1cmUoYltmLmltYWdlXSk7Zy5uZWVkc1VwZGF0ZT0hMDtnLnV1aWQ9Zi51dWlkO3ZvaWQgMCE9PWYubmFtZSYmKGcubmFtZT1mLm5hbWUpO3ZvaWQgMCE9PWYucmVwZWF0JiYoZy5yZXBlYXQ9bmV3IFRIUkVFLlZlY3RvcjIoZi5yZXBlYXRbMF0sZi5yZXBlYXRbMV0pKTt2b2lkIDAhPT1mLm1pbkZpbHRlciYmXHJcbihnLm1pbkZpbHRlcj1USFJFRVtmLm1pbkZpbHRlcl0pO3ZvaWQgMCE9PWYubWFnRmlsdGVyJiYoZy5tYWdGaWx0ZXI9VEhSRUVbZi5tYWdGaWx0ZXJdKTt2b2lkIDAhPT1mLmFuaXNvdHJvcHkmJihnLmFuaXNvdHJvcHk9Zi5hbmlzb3Ryb3B5KTtmLndyYXAgaW5zdGFuY2VvZiBBcnJheSYmKGcud3JhcFM9VEhSRUVbZi53cmFwWzBdXSxnLndyYXBUPVRIUkVFW2Yud3JhcFsxXV0pO2NbZi51dWlkXT1nfXJldHVybiBjfSxwYXJzZU9iamVjdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NYXRyaXg0O3JldHVybiBmdW5jdGlvbihiLGMsZCl7dmFyIGU7ZT1mdW5jdGlvbihhKXt2b2lkIDA9PT1jW2FdJiZUSFJFRS53YXJuKFwiVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgZ2VvbWV0cnlcIixhKTtyZXR1cm4gY1thXX07dmFyIGY9ZnVuY3Rpb24oYSl7dm9pZCAwPT09ZFthXSYmVEhSRUUud2FybihcIlRIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsXCIsYSk7cmV0dXJuIGRbYV19O1xyXG5zd2l0Y2goYi50eXBlKXtjYXNlIFwiU2NlbmVcIjplPW5ldyBUSFJFRS5TY2VuZTticmVhaztjYXNlIFwiUGVyc3BlY3RpdmVDYW1lcmFcIjplPW5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShiLmZvdixiLmFzcGVjdCxiLm5lYXIsYi5mYXIpO2JyZWFrO2Nhc2UgXCJPcnRob2dyYXBoaWNDYW1lcmFcIjplPW5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEoYi5sZWZ0LGIucmlnaHQsYi50b3AsYi5ib3R0b20sYi5uZWFyLGIuZmFyKTticmVhaztjYXNlIFwiQW1iaWVudExpZ2h0XCI6ZT1uZXcgVEhSRUUuQW1iaWVudExpZ2h0KGIuY29sb3IpO2JyZWFrO2Nhc2UgXCJEaXJlY3Rpb25hbExpZ2h0XCI6ZT1uZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodChiLmNvbG9yLGIuaW50ZW5zaXR5KTticmVhaztjYXNlIFwiUG9pbnRMaWdodFwiOmU9bmV3IFRIUkVFLlBvaW50TGlnaHQoYi5jb2xvcixiLmludGVuc2l0eSxiLmRpc3RhbmNlLGIuZGVjYXkpO2JyZWFrO2Nhc2UgXCJTcG90TGlnaHRcIjplPW5ldyBUSFJFRS5TcG90TGlnaHQoYi5jb2xvcixcclxuYi5pbnRlbnNpdHksYi5kaXN0YW5jZSxiLmFuZ2xlLGIuZXhwb25lbnQsYi5kZWNheSk7YnJlYWs7Y2FzZSBcIkhlbWlzcGhlcmVMaWdodFwiOmU9bmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodChiLmNvbG9yLGIuZ3JvdW5kQ29sb3IsYi5pbnRlbnNpdHkpO2JyZWFrO2Nhc2UgXCJNZXNoXCI6ZT1uZXcgVEhSRUUuTWVzaChlKGIuZ2VvbWV0cnkpLGYoYi5tYXRlcmlhbCkpO2JyZWFrO2Nhc2UgXCJMaW5lXCI6ZT1uZXcgVEhSRUUuTGluZShlKGIuZ2VvbWV0cnkpLGYoYi5tYXRlcmlhbCksYi5tb2RlKTticmVhaztjYXNlIFwiUG9pbnRDbG91ZFwiOmU9bmV3IFRIUkVFLlBvaW50Q2xvdWQoZShiLmdlb21ldHJ5KSxmKGIubWF0ZXJpYWwpKTticmVhaztjYXNlIFwiU3ByaXRlXCI6ZT1uZXcgVEhSRUUuU3ByaXRlKGYoYi5tYXRlcmlhbCkpO2JyZWFrO2Nhc2UgXCJHcm91cFwiOmU9bmV3IFRIUkVFLkdyb3VwO2JyZWFrO2RlZmF1bHQ6ZT1uZXcgVEhSRUUuT2JqZWN0M0R9ZS51dWlkPWIudXVpZDt2b2lkIDAhPT1cclxuYi5uYW1lJiYoZS5uYW1lPWIubmFtZSk7dm9pZCAwIT09Yi5tYXRyaXg/KGEuZnJvbUFycmF5KGIubWF0cml4KSxhLmRlY29tcG9zZShlLnBvc2l0aW9uLGUucXVhdGVybmlvbixlLnNjYWxlKSk6KHZvaWQgMCE9PWIucG9zaXRpb24mJmUucG9zaXRpb24uZnJvbUFycmF5KGIucG9zaXRpb24pLHZvaWQgMCE9PWIucm90YXRpb24mJmUucm90YXRpb24uZnJvbUFycmF5KGIucm90YXRpb24pLHZvaWQgMCE9PWIuc2NhbGUmJmUuc2NhbGUuZnJvbUFycmF5KGIuc2NhbGUpKTt2b2lkIDAhPT1iLnZpc2libGUmJihlLnZpc2libGU9Yi52aXNpYmxlKTt2b2lkIDAhPT1iLnVzZXJEYXRhJiYoZS51c2VyRGF0YT1iLnVzZXJEYXRhKTtpZih2b2lkIDAhPT1iLmNoaWxkcmVuKWZvcih2YXIgZyBpbiBiLmNoaWxkcmVuKWUuYWRkKHRoaXMucGFyc2VPYmplY3QoYi5jaGlsZHJlbltnXSxjLGQpKTtyZXR1cm4gZX19KCl9O1xyXG5USFJFRS5UZXh0dXJlTG9hZGVyPWZ1bmN0aW9uKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyfTtUSFJFRS5UZXh0dXJlTG9hZGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuVGV4dHVyZUxvYWRlcixsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW5ldyBUSFJFRS5JbWFnZUxvYWRlcih0aGlzLm1hbmFnZXIpO2Uuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7ZS5sb2FkKGEsZnVuY3Rpb24oYSl7YT1uZXcgVEhSRUUuVGV4dHVyZShhKTthLm5lZWRzVXBkYXRlPSEwO3ZvaWQgMCE9PWImJmIoYSl9LGMsZCl9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YX19O1RIUkVFLkRhdGFUZXh0dXJlTG9hZGVyPVRIUkVFLkJpbmFyeVRleHR1cmVMb2FkZXI9ZnVuY3Rpb24oKXt0aGlzLl9wYXJzZXI9bnVsbH07XHJcblRIUkVFLkJpbmFyeVRleHR1cmVMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5CaW5hcnlUZXh0dXJlTG9hZGVyLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxmPW5ldyBUSFJFRS5EYXRhVGV4dHVyZSxnPW5ldyBUSFJFRS5YSFJMb2FkZXI7Zy5zZXRSZXNwb25zZVR5cGUoXCJhcnJheWJ1ZmZlclwiKTtnLmxvYWQoYSxmdW5jdGlvbihhKXtpZihhPWUuX3BhcnNlcihhKSl2b2lkIDAhPT1hLmltYWdlP2YuaW1hZ2U9YS5pbWFnZTp2b2lkIDAhPT1hLmRhdGEmJihmLmltYWdlLndpZHRoPWEud2lkdGgsZi5pbWFnZS5oZWlnaHQ9YS5oZWlnaHQsZi5pbWFnZS5kYXRhPWEuZGF0YSksZi53cmFwUz12b2lkIDAhPT1hLndyYXBTP2Eud3JhcFM6VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZyxmLndyYXBUPXZvaWQgMCE9PWEud3JhcFQ/YS53cmFwVDpUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLGYubWFnRmlsdGVyPXZvaWQgMCE9PWEubWFnRmlsdGVyP2EubWFnRmlsdGVyOlxyXG5USFJFRS5MaW5lYXJGaWx0ZXIsZi5taW5GaWx0ZXI9dm9pZCAwIT09YS5taW5GaWx0ZXI/YS5taW5GaWx0ZXI6VEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyLGYuYW5pc290cm9weT12b2lkIDAhPT1hLmFuaXNvdHJvcHk/YS5hbmlzb3Ryb3B5OjEsdm9pZCAwIT09YS5mb3JtYXQmJihmLmZvcm1hdD1hLmZvcm1hdCksdm9pZCAwIT09YS50eXBlJiYoZi50eXBlPWEudHlwZSksdm9pZCAwIT09YS5taXBtYXBzJiYoZi5taXBtYXBzPWEubWlwbWFwcyksMT09PWEubWlwbWFwQ291bnQmJihmLm1pbkZpbHRlcj1USFJFRS5MaW5lYXJGaWx0ZXIpLGYubmVlZHNVcGRhdGU9ITAsYiYmYihmLGEpfSxjLGQpO3JldHVybiBmfX07VEhSRUUuQ29tcHJlc3NlZFRleHR1cmVMb2FkZXI9ZnVuY3Rpb24oKXt0aGlzLl9wYXJzZXI9bnVsbH07XHJcblRIUkVFLkNvbXByZXNzZWRUZXh0dXJlTG9hZGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIsbG9hZDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcyxlPVtdLGY9bmV3IFRIUkVFLkNvbXByZXNzZWRUZXh0dXJlO2YuaW1hZ2U9ZTt2YXIgZz1uZXcgVEhSRUUuWEhSTG9hZGVyO2cuc2V0UmVzcG9uc2VUeXBlKFwiYXJyYXlidWZmZXJcIik7aWYoYSBpbnN0YW5jZW9mIEFycmF5KXt2YXIgaD0wO2M9ZnVuY3Rpb24oYyl7Zy5sb2FkKGFbY10sZnVuY3Rpb24oYSl7YT1kLl9wYXJzZXIoYSwhMCk7ZVtjXT17d2lkdGg6YS53aWR0aCxoZWlnaHQ6YS5oZWlnaHQsZm9ybWF0OmEuZm9ybWF0LG1pcG1hcHM6YS5taXBtYXBzfTtoKz0xOzY9PT1oJiYoMT09YS5taXBtYXBDb3VudCYmKGYubWluRmlsdGVyPVRIUkVFLkxpbmVhckZpbHRlciksZi5mb3JtYXQ9YS5mb3JtYXQsZi5uZWVkc1VwZGF0ZT0hMCxiJiZiKGYpKX0pfTtmb3IodmFyIGs9MCxsPVxyXG5hLmxlbmd0aDtrPGw7KytrKWMoayl9ZWxzZSBnLmxvYWQoYSxmdW5jdGlvbihhKXthPWQuX3BhcnNlcihhLCEwKTtpZihhLmlzQ3ViZW1hcClmb3IodmFyIGM9YS5taXBtYXBzLmxlbmd0aC9hLm1pcG1hcENvdW50LGc9MDtnPGM7ZysrKXtlW2ddPXttaXBtYXBzOltdfTtmb3IodmFyIGg9MDtoPGEubWlwbWFwQ291bnQ7aCsrKWVbZ10ubWlwbWFwcy5wdXNoKGEubWlwbWFwc1tnKmEubWlwbWFwQ291bnQraF0pLGVbZ10uZm9ybWF0PWEuZm9ybWF0LGVbZ10ud2lkdGg9YS53aWR0aCxlW2ddLmhlaWdodD1hLmhlaWdodH1lbHNlIGYuaW1hZ2Uud2lkdGg9YS53aWR0aCxmLmltYWdlLmhlaWdodD1hLmhlaWdodCxmLm1pcG1hcHM9YS5taXBtYXBzOzE9PT1hLm1pcG1hcENvdW50JiYoZi5taW5GaWx0ZXI9VEhSRUUuTGluZWFyRmlsdGVyKTtmLmZvcm1hdD1hLmZvcm1hdDtmLm5lZWRzVXBkYXRlPSEwO2ImJmIoZil9KTtyZXR1cm4gZn19O1xyXG5USFJFRS5NYXRlcmlhbD1mdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6VEhSRUUuTWF0ZXJpYWxJZENvdW50Kyt9KTt0aGlzLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJNYXRlcmlhbFwiO3RoaXMuc2lkZT1USFJFRS5Gcm9udFNpZGU7dGhpcy5vcGFjaXR5PTE7dGhpcy50cmFuc3BhcmVudD0hMTt0aGlzLmJsZW5kaW5nPVRIUkVFLk5vcm1hbEJsZW5kaW5nO3RoaXMuYmxlbmRTcmM9VEhSRUUuU3JjQWxwaGFGYWN0b3I7dGhpcy5ibGVuZERzdD1USFJFRS5PbmVNaW51c1NyY0FscGhhRmFjdG9yO3RoaXMuYmxlbmRFcXVhdGlvbj1USFJFRS5BZGRFcXVhdGlvbjt0aGlzLmJsZW5kRXF1YXRpb25BbHBoYT10aGlzLmJsZW5kRHN0QWxwaGE9dGhpcy5ibGVuZFNyY0FscGhhPW51bGw7dGhpcy5jb2xvcldyaXRlPXRoaXMuZGVwdGhXcml0ZT10aGlzLmRlcHRoVGVzdD0hMDt0aGlzLnBvbHlnb25PZmZzZXQ9XHJcbiExO3RoaXMub3ZlcmRyYXc9dGhpcy5hbHBoYVRlc3Q9dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM9dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yPTA7dGhpcy5fbmVlZHNVcGRhdGU9dGhpcy52aXNpYmxlPSEwfTtcclxuVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5NYXRlcmlhbCxnZXQgbmVlZHNVcGRhdGUoKXtyZXR1cm4gdGhpcy5fbmVlZHNVcGRhdGV9LHNldCBuZWVkc1VwZGF0ZShhKXshMD09PWEmJnRoaXMudXBkYXRlKCk7dGhpcy5fbmVlZHNVcGRhdGU9YX0sc2V0VmFsdWVzOmZ1bmN0aW9uKGEpe2lmKHZvaWQgMCE9PWEpZm9yKHZhciBiIGluIGEpe3ZhciBjPWFbYl07aWYodm9pZCAwPT09YylUSFJFRS53YXJuKFwiVEhSRUUuTWF0ZXJpYWw6ICdcIitiK1wiJyBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLlwiKTtlbHNlIGlmKGIgaW4gdGhpcyl7dmFyIGQ9dGhpc1tiXTtkIGluc3RhbmNlb2YgVEhSRUUuQ29sb3I/ZC5zZXQoYyk6ZCBpbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjMmJmMgaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzP2QuY29weShjKTp0aGlzW2JdPVwib3ZlcmRyYXdcIj09Yj9OdW1iZXIoYyk6Y319fSx0b0pTT046ZnVuY3Rpb24oKXt2YXIgYT17bWV0YWRhdGE6e3ZlcnNpb246NC4yLFxyXG50eXBlOlwibWF0ZXJpYWxcIixnZW5lcmF0b3I6XCJNYXRlcmlhbEV4cG9ydGVyXCJ9LHV1aWQ6dGhpcy51dWlkLHR5cGU6dGhpcy50eXBlfTtcIlwiIT09dGhpcy5uYW1lJiYoYS5uYW1lPXRoaXMubmFtZSk7dGhpcyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsPyhhLmNvbG9yPXRoaXMuY29sb3IuZ2V0SGV4KCksdGhpcy52ZXJ0ZXhDb2xvcnMhPT1USFJFRS5Ob0NvbG9ycyYmKGEudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzKSx0aGlzLmJsZW5kaW5nIT09VEhSRUUuTm9ybWFsQmxlbmRpbmcmJihhLmJsZW5kaW5nPXRoaXMuYmxlbmRpbmcpLHRoaXMuc2lkZSE9PVRIUkVFLkZyb250U2lkZSYmKGEuc2lkZT10aGlzLnNpZGUpKTp0aGlzIGluc3RhbmNlb2YgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbD8oYS5jb2xvcj10aGlzLmNvbG9yLmdldEhleCgpLGEuZW1pc3NpdmU9dGhpcy5lbWlzc2l2ZS5nZXRIZXgoKSx0aGlzLnZlcnRleENvbG9ycyE9PVRIUkVFLk5vQ29sb3JzJiZcclxuKGEudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzKSx0aGlzLnNoYWRpbmchPT1USFJFRS5TbW9vdGhTaGFkaW5nJiYoYS5zaGFkaW5nPXRoaXMuc2hhZGluZyksdGhpcy5ibGVuZGluZyE9PVRIUkVFLk5vcm1hbEJsZW5kaW5nJiYoYS5ibGVuZGluZz10aGlzLmJsZW5kaW5nKSx0aGlzLnNpZGUhPT1USFJFRS5Gcm9udFNpZGUmJihhLnNpZGU9dGhpcy5zaWRlKSk6dGhpcyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsPyhhLmNvbG9yPXRoaXMuY29sb3IuZ2V0SGV4KCksYS5lbWlzc2l2ZT10aGlzLmVtaXNzaXZlLmdldEhleCgpLGEuc3BlY3VsYXI9dGhpcy5zcGVjdWxhci5nZXRIZXgoKSxhLnNoaW5pbmVzcz10aGlzLnNoaW5pbmVzcyx0aGlzLnZlcnRleENvbG9ycyE9PVRIUkVFLk5vQ29sb3JzJiYoYS52ZXJ0ZXhDb2xvcnM9dGhpcy52ZXJ0ZXhDb2xvcnMpLHRoaXMuc2hhZGluZyE9PVRIUkVFLlNtb290aFNoYWRpbmcmJihhLnNoYWRpbmc9dGhpcy5zaGFkaW5nKSxcclxudGhpcy5ibGVuZGluZyE9PVRIUkVFLk5vcm1hbEJsZW5kaW5nJiYoYS5ibGVuZGluZz10aGlzLmJsZW5kaW5nKSx0aGlzLnNpZGUhPT1USFJFRS5Gcm9udFNpZGUmJihhLnNpZGU9dGhpcy5zaWRlKSk6dGhpcyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hOb3JtYWxNYXRlcmlhbD8odGhpcy5ibGVuZGluZyE9PVRIUkVFLk5vcm1hbEJsZW5kaW5nJiYoYS5ibGVuZGluZz10aGlzLmJsZW5kaW5nKSx0aGlzLnNpZGUhPT1USFJFRS5Gcm9udFNpZGUmJihhLnNpZGU9dGhpcy5zaWRlKSk6dGhpcyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hEZXB0aE1hdGVyaWFsPyh0aGlzLmJsZW5kaW5nIT09VEhSRUUuTm9ybWFsQmxlbmRpbmcmJihhLmJsZW5kaW5nPXRoaXMuYmxlbmRpbmcpLHRoaXMuc2lkZSE9PVRIUkVFLkZyb250U2lkZSYmKGEuc2lkZT10aGlzLnNpZGUpKTp0aGlzIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsPyhhLnNpemU9dGhpcy5zaXplLGEuc2l6ZUF0dGVudWF0aW9uPVxyXG50aGlzLnNpemVBdHRlbnVhdGlvbixhLmNvbG9yPXRoaXMuY29sb3IuZ2V0SGV4KCksdGhpcy52ZXJ0ZXhDb2xvcnMhPT1USFJFRS5Ob0NvbG9ycyYmKGEudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzKSx0aGlzLmJsZW5kaW5nIT09VEhSRUUuTm9ybWFsQmxlbmRpbmcmJihhLmJsZW5kaW5nPXRoaXMuYmxlbmRpbmcpKTp0aGlzIGluc3RhbmNlb2YgVEhSRUUuU2hhZGVyTWF0ZXJpYWw/KGEudW5pZm9ybXM9dGhpcy51bmlmb3JtcyxhLnZlcnRleFNoYWRlcj10aGlzLnZlcnRleFNoYWRlcixhLmZyYWdtZW50U2hhZGVyPXRoaXMuZnJhZ21lbnRTaGFkZXIpOnRoaXMgaW5zdGFuY2VvZiBUSFJFRS5TcHJpdGVNYXRlcmlhbCYmKGEuY29sb3I9dGhpcy5jb2xvci5nZXRIZXgoKSk7MT50aGlzLm9wYWNpdHkmJihhLm9wYWNpdHk9dGhpcy5vcGFjaXR5KTshMSE9PXRoaXMudHJhbnNwYXJlbnQmJihhLnRyYW5zcGFyZW50PXRoaXMudHJhbnNwYXJlbnQpOyExIT09dGhpcy53aXJlZnJhbWUmJlxyXG4oYS53aXJlZnJhbWU9dGhpcy53aXJlZnJhbWUpO3JldHVybiBhfSxjbG9uZTpmdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTWF0ZXJpYWwpO2EubmFtZT10aGlzLm5hbWU7YS5zaWRlPXRoaXMuc2lkZTthLm9wYWNpdHk9dGhpcy5vcGFjaXR5O2EudHJhbnNwYXJlbnQ9dGhpcy50cmFuc3BhcmVudDthLmJsZW5kaW5nPXRoaXMuYmxlbmRpbmc7YS5ibGVuZFNyYz10aGlzLmJsZW5kU3JjO2EuYmxlbmREc3Q9dGhpcy5ibGVuZERzdDthLmJsZW5kRXF1YXRpb249dGhpcy5ibGVuZEVxdWF0aW9uO2EuYmxlbmRTcmNBbHBoYT10aGlzLmJsZW5kU3JjQWxwaGE7YS5ibGVuZERzdEFscGhhPXRoaXMuYmxlbmREc3RBbHBoYTthLmJsZW5kRXF1YXRpb25BbHBoYT10aGlzLmJsZW5kRXF1YXRpb25BbHBoYTthLmRlcHRoVGVzdD10aGlzLmRlcHRoVGVzdDthLmRlcHRoV3JpdGU9dGhpcy5kZXB0aFdyaXRlO2EucG9seWdvbk9mZnNldD10aGlzLnBvbHlnb25PZmZzZXQ7YS5wb2x5Z29uT2Zmc2V0RmFjdG9yPVxyXG50aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I7YS5wb2x5Z29uT2Zmc2V0VW5pdHM9dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM7YS5hbHBoYVRlc3Q9dGhpcy5hbHBoYVRlc3Q7YS5vdmVyZHJhdz10aGlzLm92ZXJkcmF3O2EudmlzaWJsZT10aGlzLnZpc2libGU7cmV0dXJuIGF9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcInVwZGF0ZVwifSl9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX19O1RIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtUSFJFRS5NYXRlcmlhbElkQ291bnQ9MDtcclxuVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMaW5lQmFzaWNNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KTt0aGlzLmxpbmV3aWR0aD0xO3RoaXMubGluZWpvaW49dGhpcy5saW5lY2FwPVwicm91bmRcIjt0aGlzLnZlcnRleENvbG9ycz1USFJFRS5Ob0NvbG9yczt0aGlzLmZvZz0hMDt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTGluZUJhc2ljTWF0ZXJpYWw7XHJcblRIUkVFLkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbDtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuY29sb3IuY29weSh0aGlzLmNvbG9yKTthLmxpbmV3aWR0aD10aGlzLmxpbmV3aWR0aDthLmxpbmVjYXA9dGhpcy5saW5lY2FwO2EubGluZWpvaW49dGhpcy5saW5lam9pbjthLnZlcnRleENvbG9ycz10aGlzLnZlcnRleENvbG9yczthLmZvZz10aGlzLmZvZztyZXR1cm4gYX07XHJcblRIUkVFLkxpbmVEYXNoZWRNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpbmVEYXNoZWRNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KTt0aGlzLnNjYWxlPXRoaXMubGluZXdpZHRoPTE7dGhpcy5kYXNoU2l6ZT0zO3RoaXMuZ2FwU2l6ZT0xO3RoaXMudmVydGV4Q29sb3JzPSExO3RoaXMuZm9nPSEwO3RoaXMuc2V0VmFsdWVzKGEpfTtUSFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtUSFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkxpbmVEYXNoZWRNYXRlcmlhbDtcclxuVEhSRUUuTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWw7VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLmNvbG9yLmNvcHkodGhpcy5jb2xvcik7YS5saW5ld2lkdGg9dGhpcy5saW5ld2lkdGg7YS5zY2FsZT10aGlzLnNjYWxlO2EuZGFzaFNpemU9dGhpcy5kYXNoU2l6ZTthLmdhcFNpemU9dGhpcy5nYXBTaXplO2EudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzO2EuZm9nPXRoaXMuZm9nO3JldHVybiBhfTtcclxuVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoQmFzaWNNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KTt0aGlzLmVudk1hcD10aGlzLmFscGhhTWFwPXRoaXMuc3BlY3VsYXJNYXA9dGhpcy5saWdodE1hcD10aGlzLm1hcD1udWxsO3RoaXMuY29tYmluZT1USFJFRS5NdWx0aXBseU9wZXJhdGlvbjt0aGlzLnJlZmxlY3Rpdml0eT0xO3RoaXMucmVmcmFjdGlvblJhdGlvPS45ODt0aGlzLmZvZz0hMDt0aGlzLnNoYWRpbmc9VEhSRUUuU21vb3RoU2hhZGluZzt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMud2lyZWZyYW1lTGluZWpvaW49dGhpcy53aXJlZnJhbWVMaW5lY2FwPVwicm91bmRcIjt0aGlzLnZlcnRleENvbG9ycz1USFJFRS5Ob0NvbG9yczt0aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPSExO3RoaXMuc2V0VmFsdWVzKGEpfTtcclxuVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWw7XHJcblRIUkVFLk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbDtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuY29sb3IuY29weSh0aGlzLmNvbG9yKTthLm1hcD10aGlzLm1hcDthLmxpZ2h0TWFwPXRoaXMubGlnaHRNYXA7YS5zcGVjdWxhck1hcD10aGlzLnNwZWN1bGFyTWFwO2EuYWxwaGFNYXA9dGhpcy5hbHBoYU1hcDthLmVudk1hcD10aGlzLmVudk1hcDthLmNvbWJpbmU9dGhpcy5jb21iaW5lO2EucmVmbGVjdGl2aXR5PXRoaXMucmVmbGVjdGl2aXR5O2EucmVmcmFjdGlvblJhdGlvPXRoaXMucmVmcmFjdGlvblJhdGlvO2EuZm9nPXRoaXMuZm9nO2Euc2hhZGluZz10aGlzLnNoYWRpbmc7YS53aXJlZnJhbWU9dGhpcy53aXJlZnJhbWU7YS53aXJlZnJhbWVMaW5ld2lkdGg9dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7YS53aXJlZnJhbWVMaW5lY2FwPXRoaXMud2lyZWZyYW1lTGluZWNhcDtcclxuYS53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVqb2luO2EudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzO2Euc2tpbm5pbmc9dGhpcy5za2lubmluZzthLm1vcnBoVGFyZ2V0cz10aGlzLm1vcnBoVGFyZ2V0cztyZXR1cm4gYX07XHJcblRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoTGFtYmVydE1hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoMTY3NzcyMTUpO3RoaXMuZW1pc3NpdmU9bmV3IFRIUkVFLkNvbG9yKDApO3RoaXMud3JhcEFyb3VuZD0hMTt0aGlzLndyYXBSR0I9bmV3IFRIUkVFLlZlY3RvcjMoMSwxLDEpO3RoaXMuZW52TWFwPXRoaXMuYWxwaGFNYXA9dGhpcy5zcGVjdWxhck1hcD10aGlzLmxpZ2h0TWFwPXRoaXMubWFwPW51bGw7dGhpcy5jb21iaW5lPVRIUkVFLk11bHRpcGx5T3BlcmF0aW9uO3RoaXMucmVmbGVjdGl2aXR5PTE7dGhpcy5yZWZyYWN0aW9uUmF0aW89Ljk4O3RoaXMuZm9nPSEwO3RoaXMuc2hhZGluZz1USFJFRS5TbW9vdGhTaGFkaW5nO3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVjYXA9XHJcblwicm91bmRcIjt0aGlzLnZlcnRleENvbG9ycz1USFJFRS5Ob0NvbG9yczt0aGlzLm1vcnBoTm9ybWFscz10aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPSExO3RoaXMuc2V0VmFsdWVzKGEpfTtUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbDtcclxuVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbDtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuY29sb3IuY29weSh0aGlzLmNvbG9yKTthLmVtaXNzaXZlLmNvcHkodGhpcy5lbWlzc2l2ZSk7YS53cmFwQXJvdW5kPXRoaXMud3JhcEFyb3VuZDthLndyYXBSR0IuY29weSh0aGlzLndyYXBSR0IpO2EubWFwPXRoaXMubWFwO2EubGlnaHRNYXA9dGhpcy5saWdodE1hcDthLnNwZWN1bGFyTWFwPXRoaXMuc3BlY3VsYXJNYXA7YS5hbHBoYU1hcD10aGlzLmFscGhhTWFwO2EuZW52TWFwPXRoaXMuZW52TWFwO2EuY29tYmluZT10aGlzLmNvbWJpbmU7YS5yZWZsZWN0aXZpdHk9dGhpcy5yZWZsZWN0aXZpdHk7YS5yZWZyYWN0aW9uUmF0aW89dGhpcy5yZWZyYWN0aW9uUmF0aW87YS5mb2c9dGhpcy5mb2c7YS5zaGFkaW5nPXRoaXMuc2hhZGluZzthLndpcmVmcmFtZT1cclxudGhpcy53aXJlZnJhbWU7YS53aXJlZnJhbWVMaW5ld2lkdGg9dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7YS53aXJlZnJhbWVMaW5lY2FwPXRoaXMud2lyZWZyYW1lTGluZWNhcDthLndpcmVmcmFtZUxpbmVqb2luPXRoaXMud2lyZWZyYW1lTGluZWpvaW47YS52ZXJ0ZXhDb2xvcnM9dGhpcy52ZXJ0ZXhDb2xvcnM7YS5za2lubmluZz10aGlzLnNraW5uaW5nO2EubW9ycGhUYXJnZXRzPXRoaXMubW9ycGhUYXJnZXRzO2EubW9ycGhOb3JtYWxzPXRoaXMubW9ycGhOb3JtYWxzO3JldHVybiBhfTtcclxuVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoUGhvbmdNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KTt0aGlzLmVtaXNzaXZlPW5ldyBUSFJFRS5Db2xvcigwKTt0aGlzLnNwZWN1bGFyPW5ldyBUSFJFRS5Db2xvcigxMTE4NDgxKTt0aGlzLnNoaW5pbmVzcz0zMDt0aGlzLndyYXBBcm91bmQ9dGhpcy5tZXRhbD0hMTt0aGlzLndyYXBSR0I9bmV3IFRIUkVFLlZlY3RvcjMoMSwxLDEpO3RoaXMuYnVtcE1hcD10aGlzLmxpZ2h0TWFwPXRoaXMubWFwPW51bGw7dGhpcy5idW1wU2NhbGU9MTt0aGlzLm5vcm1hbE1hcD1udWxsO3RoaXMubm9ybWFsU2NhbGU9bmV3IFRIUkVFLlZlY3RvcjIoMSwxKTt0aGlzLmVudk1hcD10aGlzLmFscGhhTWFwPXRoaXMuc3BlY3VsYXJNYXA9bnVsbDt0aGlzLmNvbWJpbmU9VEhSRUUuTXVsdGlwbHlPcGVyYXRpb247dGhpcy5yZWZsZWN0aXZpdHk9XHJcbjE7dGhpcy5yZWZyYWN0aW9uUmF0aW89Ljk4O3RoaXMuZm9nPSEwO3RoaXMuc2hhZGluZz1USFJFRS5TbW9vdGhTaGFkaW5nO3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVjYXA9XCJyb3VuZFwiO3RoaXMudmVydGV4Q29sb3JzPVRIUkVFLk5vQ29sb3JzO3RoaXMubW9ycGhOb3JtYWxzPXRoaXMubW9ycGhUYXJnZXRzPXRoaXMuc2tpbm5pbmc9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9O1RIUkVFLk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsO1xyXG5USFJFRS5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw7VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLmNvbG9yLmNvcHkodGhpcy5jb2xvcik7YS5lbWlzc2l2ZS5jb3B5KHRoaXMuZW1pc3NpdmUpO2Euc3BlY3VsYXIuY29weSh0aGlzLnNwZWN1bGFyKTthLnNoaW5pbmVzcz10aGlzLnNoaW5pbmVzczthLm1ldGFsPXRoaXMubWV0YWw7YS53cmFwQXJvdW5kPXRoaXMud3JhcEFyb3VuZDthLndyYXBSR0IuY29weSh0aGlzLndyYXBSR0IpO2EubWFwPXRoaXMubWFwO2EubGlnaHRNYXA9dGhpcy5saWdodE1hcDthLmJ1bXBNYXA9dGhpcy5idW1wTWFwO2EuYnVtcFNjYWxlPXRoaXMuYnVtcFNjYWxlO2Eubm9ybWFsTWFwPXRoaXMubm9ybWFsTWFwO2Eubm9ybWFsU2NhbGUuY29weSh0aGlzLm5vcm1hbFNjYWxlKTthLnNwZWN1bGFyTWFwPXRoaXMuc3BlY3VsYXJNYXA7XHJcbmEuYWxwaGFNYXA9dGhpcy5hbHBoYU1hcDthLmVudk1hcD10aGlzLmVudk1hcDthLmNvbWJpbmU9dGhpcy5jb21iaW5lO2EucmVmbGVjdGl2aXR5PXRoaXMucmVmbGVjdGl2aXR5O2EucmVmcmFjdGlvblJhdGlvPXRoaXMucmVmcmFjdGlvblJhdGlvO2EuZm9nPXRoaXMuZm9nO2Euc2hhZGluZz10aGlzLnNoYWRpbmc7YS53aXJlZnJhbWU9dGhpcy53aXJlZnJhbWU7YS53aXJlZnJhbWVMaW5ld2lkdGg9dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7YS53aXJlZnJhbWVMaW5lY2FwPXRoaXMud2lyZWZyYW1lTGluZWNhcDthLndpcmVmcmFtZUxpbmVqb2luPXRoaXMud2lyZWZyYW1lTGluZWpvaW47YS52ZXJ0ZXhDb2xvcnM9dGhpcy52ZXJ0ZXhDb2xvcnM7YS5za2lubmluZz10aGlzLnNraW5uaW5nO2EubW9ycGhUYXJnZXRzPXRoaXMubW9ycGhUYXJnZXRzO2EubW9ycGhOb3JtYWxzPXRoaXMubW9ycGhOb3JtYWxzO3JldHVybiBhfTtcclxuVEhSRUUuTWVzaERlcHRoTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoRGVwdGhNYXRlcmlhbFwiO3RoaXMud2lyZWZyYW1lPXRoaXMubW9ycGhUYXJnZXRzPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy5zZXRWYWx1ZXMoYSl9O1RIUkVFLk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1lc2hEZXB0aE1hdGVyaWFsO1xyXG5USFJFRS5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWVzaERlcHRoTWF0ZXJpYWw7VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLndpcmVmcmFtZT10aGlzLndpcmVmcmFtZTthLndpcmVmcmFtZUxpbmV3aWR0aD10aGlzLndpcmVmcmFtZUxpbmV3aWR0aDtyZXR1cm4gYX07VEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsPWZ1bmN0aW9uKGEpe1RIUkVFLk1hdGVyaWFsLmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJNZXNoTm9ybWFsTWF0ZXJpYWxcIjt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMubW9ycGhUYXJnZXRzPSExO3RoaXMuc2V0VmFsdWVzKGEpfTtUSFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtcclxuVEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWw7VEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWw7VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLndpcmVmcmFtZT10aGlzLndpcmVmcmFtZTthLndpcmVmcmFtZUxpbmV3aWR0aD10aGlzLndpcmVmcmFtZUxpbmV3aWR0aDtyZXR1cm4gYX07VEhSRUUuTWVzaEZhY2VNYXRlcmlhbD1mdW5jdGlvbihhKXt0aGlzLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKTt0aGlzLnR5cGU9XCJNZXNoRmFjZU1hdGVyaWFsXCI7dGhpcy5tYXRlcmlhbHM9YSBpbnN0YW5jZW9mIEFycmF5P2E6W119O1xyXG5USFJFRS5NZXNoRmFjZU1hdGVyaWFsLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuTWVzaEZhY2VNYXRlcmlhbCx0b0pTT046ZnVuY3Rpb24oKXtmb3IodmFyIGE9e21ldGFkYXRhOnt2ZXJzaW9uOjQuMix0eXBlOlwibWF0ZXJpYWxcIixnZW5lcmF0b3I6XCJNYXRlcmlhbEV4cG9ydGVyXCJ9LHV1aWQ6dGhpcy51dWlkLHR5cGU6dGhpcy50eXBlLG1hdGVyaWFsczpbXX0sYj0wLGM9dGhpcy5tYXRlcmlhbHMubGVuZ3RoO2I8YztiKyspYS5tYXRlcmlhbHMucHVzaCh0aGlzLm1hdGVyaWFsc1tiXS50b0pTT04oKSk7cmV0dXJuIGF9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPW5ldyBUSFJFRS5NZXNoRmFjZU1hdGVyaWFsLGI9MDtiPHRoaXMubWF0ZXJpYWxzLmxlbmd0aDtiKyspYS5tYXRlcmlhbHMucHVzaCh0aGlzLm1hdGVyaWFsc1tiXS5jbG9uZSgpKTtyZXR1cm4gYX19O1xyXG5USFJFRS5Qb2ludENsb3VkTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQb2ludENsb3VkTWF0ZXJpYWxcIjt0aGlzLmNvbG9yPW5ldyBUSFJFRS5Db2xvcigxNjc3NzIxNSk7dGhpcy5tYXA9bnVsbDt0aGlzLnNpemU9MTt0aGlzLnNpemVBdHRlbnVhdGlvbj0hMDt0aGlzLnZlcnRleENvbG9ycz1USFJFRS5Ob0NvbG9yczt0aGlzLmZvZz0hMDt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Qb2ludENsb3VkTWF0ZXJpYWw7XHJcblRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsO1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5jb2xvci5jb3B5KHRoaXMuY29sb3IpO2EubWFwPXRoaXMubWFwO2Euc2l6ZT10aGlzLnNpemU7YS5zaXplQXR0ZW51YXRpb249dGhpcy5zaXplQXR0ZW51YXRpb247YS52ZXJ0ZXhDb2xvcnM9dGhpcy52ZXJ0ZXhDb2xvcnM7YS5mb2c9dGhpcy5mb2c7cmV0dXJuIGF9O1RIUkVFLlBhcnRpY2xlQmFzaWNNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuUGFydGljbGVCYXNpY01hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsLlwiKTtyZXR1cm4gbmV3IFRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbChhKX07XHJcblRIUkVFLlBhcnRpY2xlU3lzdGVtTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUud2FybihcIlRIUkVFLlBhcnRpY2xlU3lzdGVtTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwuXCIpO3JldHVybiBuZXcgVEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsKGEpfTtcclxuVEhSRUUuU2hhZGVyTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTaGFkZXJNYXRlcmlhbFwiO3RoaXMuZGVmaW5lcz17fTt0aGlzLnVuaWZvcm1zPXt9O3RoaXMuYXR0cmlidXRlcz1udWxsO3RoaXMudmVydGV4U2hhZGVyPVwidm9pZCBtYWluKCkge1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG59XCI7dGhpcy5mcmFnbWVudFNoYWRlcj1cInZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG59XCI7dGhpcy5zaGFkaW5nPVRIUkVFLlNtb290aFNoYWRpbmc7dGhpcy5saW5ld2lkdGg9MTt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMubGlnaHRzPXRoaXMuZm9nPSExO3RoaXMudmVydGV4Q29sb3JzPVRIUkVFLk5vQ29sb3JzO3RoaXMubW9ycGhOb3JtYWxzPVxyXG50aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPSExO3RoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcz17Y29sb3I6WzEsMSwxXSx1djpbMCwwXSx1djI6WzAsMF19O3RoaXMuaW5kZXgwQXR0cmlidXRlTmFtZT12b2lkIDA7dGhpcy5zZXRWYWx1ZXMoYSl9O1RIUkVFLlNoYWRlck1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNoYWRlck1hdGVyaWFsO1xyXG5USFJFRS5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWw7VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLmZyYWdtZW50U2hhZGVyPXRoaXMuZnJhZ21lbnRTaGFkZXI7YS52ZXJ0ZXhTaGFkZXI9dGhpcy52ZXJ0ZXhTaGFkZXI7YS51bmlmb3Jtcz1USFJFRS5Vbmlmb3Jtc1V0aWxzLmNsb25lKHRoaXMudW5pZm9ybXMpO2EuYXR0cmlidXRlcz10aGlzLmF0dHJpYnV0ZXM7YS5kZWZpbmVzPXRoaXMuZGVmaW5lczthLnNoYWRpbmc9dGhpcy5zaGFkaW5nO2Eud2lyZWZyYW1lPXRoaXMud2lyZWZyYW1lO2Eud2lyZWZyYW1lTGluZXdpZHRoPXRoaXMud2lyZWZyYW1lTGluZXdpZHRoO2EuZm9nPXRoaXMuZm9nO2EubGlnaHRzPXRoaXMubGlnaHRzO2EudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzO2Euc2tpbm5pbmc9dGhpcy5za2lubmluZzthLm1vcnBoVGFyZ2V0cz1cclxudGhpcy5tb3JwaFRhcmdldHM7YS5tb3JwaE5vcm1hbHM9dGhpcy5tb3JwaE5vcm1hbHM7cmV0dXJuIGF9O1RIUkVFLlJhd1NoYWRlck1hdGVyaWFsPWZ1bmN0aW9uKGEpe1RIUkVFLlNoYWRlck1hdGVyaWFsLmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJSYXdTaGFkZXJNYXRlcmlhbFwifTtUSFJFRS5SYXdTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUpO1RIUkVFLlJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5SYXdTaGFkZXJNYXRlcmlhbDtUSFJFRS5SYXdTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuUmF3U2hhZGVyTWF0ZXJpYWw7VEhSRUUuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtyZXR1cm4gYX07XHJcblRIUkVFLlNwcml0ZU1hdGVyaWFsPWZ1bmN0aW9uKGEpe1RIUkVFLk1hdGVyaWFsLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3ByaXRlTWF0ZXJpYWxcIjt0aGlzLmNvbG9yPW5ldyBUSFJFRS5Db2xvcigxNjc3NzIxNSk7dGhpcy5tYXA9bnVsbDt0aGlzLnJvdGF0aW9uPTA7dGhpcy5mb2c9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9O1RIUkVFLlNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNwcml0ZU1hdGVyaWFsO1xyXG5USFJFRS5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuU3ByaXRlTWF0ZXJpYWw7VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLmNvbG9yLmNvcHkodGhpcy5jb2xvcik7YS5tYXA9dGhpcy5tYXA7YS5yb3RhdGlvbj10aGlzLnJvdGF0aW9uO2EuZm9nPXRoaXMuZm9nO3JldHVybiBhfTtcclxuVEhSRUUuVGV4dHVyZT1mdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpZFwiLHt2YWx1ZTpUSFJFRS5UZXh0dXJlSWRDb3VudCsrfSk7dGhpcy51dWlkPVRIUkVFLk1hdGguZ2VuZXJhdGVVVUlEKCk7dGhpcy5zb3VyY2VGaWxlPXRoaXMubmFtZT1cIlwiO3RoaXMuaW1hZ2U9dm9pZCAwIT09YT9hOlRIUkVFLlRleHR1cmUuREVGQVVMVF9JTUFHRTt0aGlzLm1pcG1hcHM9W107dGhpcy5tYXBwaW5nPXZvaWQgMCE9PWI/YjpUSFJFRS5UZXh0dXJlLkRFRkFVTFRfTUFQUElORzt0aGlzLndyYXBTPXZvaWQgMCE9PWM/YzpUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nO3RoaXMud3JhcFQ9dm9pZCAwIT09ZD9kOlRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmc7dGhpcy5tYWdGaWx0ZXI9dm9pZCAwIT09ZT9lOlRIUkVFLkxpbmVhckZpbHRlcjt0aGlzLm1pbkZpbHRlcj12b2lkIDAhPT1mP2Y6VEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyO1xyXG50aGlzLmFuaXNvdHJvcHk9dm9pZCAwIT09az9rOjE7dGhpcy5mb3JtYXQ9dm9pZCAwIT09Zz9nOlRIUkVFLlJHQkFGb3JtYXQ7dGhpcy50eXBlPXZvaWQgMCE9PWg/aDpUSFJFRS5VbnNpZ25lZEJ5dGVUeXBlO3RoaXMub2Zmc2V0PW5ldyBUSFJFRS5WZWN0b3IyKDAsMCk7dGhpcy5yZXBlYXQ9bmV3IFRIUkVFLlZlY3RvcjIoMSwxKTt0aGlzLmdlbmVyYXRlTWlwbWFwcz0hMDt0aGlzLnByZW11bHRpcGx5QWxwaGE9ITE7dGhpcy5mbGlwWT0hMDt0aGlzLnVucGFja0FsaWdubWVudD00O3RoaXMuX25lZWRzVXBkYXRlPSExO3RoaXMub25VcGRhdGU9bnVsbH07VEhSRUUuVGV4dHVyZS5ERUZBVUxUX0lNQUdFPXZvaWQgMDtUSFJFRS5UZXh0dXJlLkRFRkFVTFRfTUFQUElORz1USFJFRS5VVk1hcHBpbmc7XHJcblRIUkVFLlRleHR1cmUucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5UZXh0dXJlLGdldCBuZWVkc1VwZGF0ZSgpe3JldHVybiB0aGlzLl9uZWVkc1VwZGF0ZX0sc2V0IG5lZWRzVXBkYXRlKGEpeyEwPT09YSYmdGhpcy51cGRhdGUoKTt0aGlzLl9uZWVkc1VwZGF0ZT1hfSxjbG9uZTpmdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVGV4dHVyZSk7YS5pbWFnZT10aGlzLmltYWdlO2EubWlwbWFwcz10aGlzLm1pcG1hcHMuc2xpY2UoMCk7YS5tYXBwaW5nPXRoaXMubWFwcGluZzthLndyYXBTPXRoaXMud3JhcFM7YS53cmFwVD10aGlzLndyYXBUO2EubWFnRmlsdGVyPXRoaXMubWFnRmlsdGVyO2EubWluRmlsdGVyPXRoaXMubWluRmlsdGVyO2EuYW5pc290cm9weT10aGlzLmFuaXNvdHJvcHk7YS5mb3JtYXQ9dGhpcy5mb3JtYXQ7YS50eXBlPXRoaXMudHlwZTthLm9mZnNldC5jb3B5KHRoaXMub2Zmc2V0KTthLnJlcGVhdC5jb3B5KHRoaXMucmVwZWF0KTthLmdlbmVyYXRlTWlwbWFwcz1cclxudGhpcy5nZW5lcmF0ZU1pcG1hcHM7YS5wcmVtdWx0aXBseUFscGhhPXRoaXMucHJlbXVsdGlwbHlBbHBoYTthLmZsaXBZPXRoaXMuZmxpcFk7YS51bnBhY2tBbGlnbm1lbnQ9dGhpcy51bnBhY2tBbGlnbm1lbnQ7cmV0dXJuIGF9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcInVwZGF0ZVwifSl9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX19O1RIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuVGV4dHVyZS5wcm90b3R5cGUpO1RIUkVFLlRleHR1cmVJZENvdW50PTA7VEhSRUUuQ3ViZVRleHR1cmU9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe2I9dm9pZCAwIT09Yj9iOlRIUkVFLkN1YmVSZWZsZWN0aW9uTWFwcGluZztUSFJFRS5UZXh0dXJlLmNhbGwodGhpcyxhLGIsYyxkLGUsZixnLGgsayk7dGhpcy5pbWFnZXM9YX07XHJcblRIUkVFLkN1YmVUZXh0dXJlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLlRleHR1cmUucHJvdG90eXBlKTtUSFJFRS5DdWJlVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ3ViZVRleHR1cmU7VEhSRUUuQ3ViZVRleHR1cmUuY2xvbmU9ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLkN1YmVUZXh0dXJlKTtUSFJFRS5UZXh0dXJlLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5pbWFnZXM9dGhpcy5pbWFnZXM7cmV0dXJuIGF9O1RIUkVFLkNvbXByZXNzZWRUZXh0dXJlPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrLGwscCl7VEhSRUUuVGV4dHVyZS5jYWxsKHRoaXMsbnVsbCxmLGcsaCxrLGwsZCxlLHApO3RoaXMuaW1hZ2U9e3dpZHRoOmIsaGVpZ2h0OmN9O3RoaXMubWlwbWFwcz1hO3RoaXMuZ2VuZXJhdGVNaXBtYXBzPXRoaXMuZmxpcFk9ITF9O1RIUkVFLkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLlRleHR1cmUucHJvdG90eXBlKTtcclxuVEhSRUUuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkNvbXByZXNzZWRUZXh0dXJlO1RIUkVFLkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5Db21wcmVzc2VkVGV4dHVyZTtUSFJFRS5UZXh0dXJlLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7cmV0dXJuIGF9O1RIUkVFLkRhdGFUZXh0dXJlPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrLGwscCl7VEhSRUUuVGV4dHVyZS5jYWxsKHRoaXMsbnVsbCxmLGcsaCxrLGwsZCxlLHApO3RoaXMuaW1hZ2U9e2RhdGE6YSx3aWR0aDpiLGhlaWdodDpjfX07VEhSRUUuRGF0YVRleHR1cmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuVGV4dHVyZS5wcm90b3R5cGUpO1RIUkVFLkRhdGFUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5EYXRhVGV4dHVyZTtcclxuVEhSRUUuRGF0YVRleHR1cmUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkRhdGFUZXh0dXJlO1RIUkVFLlRleHR1cmUucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtyZXR1cm4gYX07VEhSRUUuVmlkZW9UZXh0dXJlPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtUSFJFRS5UZXh0dXJlLmNhbGwodGhpcyxhLGIsYyxkLGUsZixnLGgsayk7dGhpcy5nZW5lcmF0ZU1pcG1hcHM9ITE7dmFyIGw9dGhpcyxwPWZ1bmN0aW9uKCl7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHApO2EucmVhZHlTdGF0ZT09PWEuSEFWRV9FTk9VR0hfREFUQSYmKGwubmVlZHNVcGRhdGU9ITApfTtwKCl9O1RIUkVFLlZpZGVvVGV4dHVyZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5UZXh0dXJlLnByb3RvdHlwZSk7VEhSRUUuVmlkZW9UZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5WaWRlb1RleHR1cmU7XHJcblRIUkVFLkdyb3VwPWZ1bmN0aW9uKCl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJHcm91cFwifTtUSFJFRS5Hcm91cC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkdyb3VwLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Hcm91cDtUSFJFRS5Qb2ludENsb3VkPWZ1bmN0aW9uKGEsYil7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQb2ludENsb3VkXCI7dGhpcy5nZW9tZXRyeT12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLkdlb21ldHJ5O3RoaXMubWF0ZXJpYWw9dm9pZCAwIT09Yj9iOm5ldyBUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwoe2NvbG9yOjE2Nzc3MjE1Kk1hdGgucmFuZG9tKCl9KX07VEhSRUUuUG9pbnRDbG91ZC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLlBvaW50Q2xvdWQucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBvaW50Q2xvdWQ7XHJcblRIUkVFLlBvaW50Q2xvdWQucHJvdG90eXBlLnJheWNhc3Q9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWF0cml4NCxiPW5ldyBUSFJFRS5SYXk7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7dmFyIGU9dGhpcyxmPWUuZ2VvbWV0cnksZz1jLnBhcmFtcy5Qb2ludENsb3VkLnRocmVzaG9sZDthLmdldEludmVyc2UodGhpcy5tYXRyaXhXb3JsZCk7Yi5jb3B5KGMucmF5KS5hcHBseU1hdHJpeDQoYSk7aWYobnVsbD09PWYuYm91bmRpbmdCb3h8fCExIT09Yi5pc0ludGVyc2VjdGlvbkJveChmLmJvdW5kaW5nQm94KSl7dmFyIGg9Zy8oKHRoaXMuc2NhbGUueCt0aGlzLnNjYWxlLnkrdGhpcy5zY2FsZS56KS8zKSxrPW5ldyBUSFJFRS5WZWN0b3IzLGc9ZnVuY3Rpb24oYSxmKXt2YXIgZz1iLmRpc3RhbmNlVG9Qb2ludChhKTtpZihnPGgpe3ZhciBrPWIuY2xvc2VzdFBvaW50VG9Qb2ludChhKTtrLmFwcGx5TWF0cml4NChlLm1hdHJpeFdvcmxkKTt2YXIgbj1jLnJheS5vcmlnaW4uZGlzdGFuY2VUbyhrKTtcclxuZC5wdXNoKHtkaXN0YW5jZTpuLGRpc3RhbmNlVG9SYXk6Zyxwb2ludDprLmNsb25lKCksaW5kZXg6ZixmYWNlOm51bGwsb2JqZWN0OmV9KX19O2lmKGYgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeSl7dmFyIGw9Zi5hdHRyaWJ1dGVzLHA9bC5wb3NpdGlvbi5hcnJheTtpZih2b2lkIDAhPT1sLmluZGV4KXt2YXIgbD1sLmluZGV4LmFycmF5LHE9Zi5vZmZzZXRzOzA9PT1xLmxlbmd0aCYmKHE9W3tzdGFydDowLGNvdW50OmwubGVuZ3RoLGluZGV4OjB9XSk7Zm9yKHZhciBuPTAsdD1xLmxlbmd0aDtuPHQ7KytuKWZvcih2YXIgcj1xW25dLnN0YXJ0LHM9cVtuXS5pbmRleCxmPXIscj1yK3Fbbl0uY291bnQ7ZjxyO2YrKyl7dmFyIHU9cytsW2ZdO2suZnJvbUFycmF5KHAsMyp1KTtnKGssdSl9fWVsc2UgZm9yKGw9cC5sZW5ndGgvMyxmPTA7ZjxsO2YrKylrLnNldChwWzMqZl0scFszKmYrMV0scFszKmYrMl0pLGcoayxmKX1lbHNlIGZvcihrPXRoaXMuZ2VvbWV0cnkudmVydGljZXMsXHJcbmY9MDtmPGsubGVuZ3RoO2YrKylnKGtbZl0sZil9fX0oKTtUSFJFRS5Qb2ludENsb3VkLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuUG9pbnRDbG91ZCh0aGlzLmdlb21ldHJ5LHRoaXMubWF0ZXJpYWwpKTtUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO3JldHVybiBhfTtUSFJFRS5QYXJ0aWNsZVN5c3RlbT1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5QYXJ0aWNsZVN5c3RlbSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50Q2xvdWQuXCIpO3JldHVybiBuZXcgVEhSRUUuUG9pbnRDbG91ZChhLGIpfTtcclxuVEhSRUUuTGluZT1mdW5jdGlvbihhLGIsYyl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMaW5lXCI7dGhpcy5nZW9tZXRyeT12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLkdlb21ldHJ5O3RoaXMubWF0ZXJpYWw9dm9pZCAwIT09Yj9iOm5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Y29sb3I6MTY3NzcyMTUqTWF0aC5yYW5kb20oKX0pO3RoaXMubW9kZT12b2lkIDAhPT1jP2M6VEhSRUUuTGluZVN0cmlwfTtUSFJFRS5MaW5lU3RyaXA9MDtUSFJFRS5MaW5lUGllY2VzPTE7VEhSRUUuTGluZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkxpbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkxpbmU7XHJcblRIUkVFLkxpbmUucHJvdG90eXBlLnJheWNhc3Q9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWF0cml4NCxiPW5ldyBUSFJFRS5SYXksYz1uZXcgVEhSRUUuU3BoZXJlO3JldHVybiBmdW5jdGlvbihkLGUpe3ZhciBmPWQubGluZVByZWNpc2lvbixmPWYqZixnPXRoaXMuZ2VvbWV0cnk7bnVsbD09PWcuYm91bmRpbmdTcGhlcmUmJmcuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7Yy5jb3B5KGcuYm91bmRpbmdTcGhlcmUpO2MuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpO2lmKCExIT09ZC5yYXkuaXNJbnRlcnNlY3Rpb25TcGhlcmUoYykpe2EuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKTtiLmNvcHkoZC5yYXkpLmFwcGx5TWF0cml4NChhKTt2YXIgaD1uZXcgVEhSRUUuVmVjdG9yMyxrPW5ldyBUSFJFRS5WZWN0b3IzLGw9bmV3IFRIUkVFLlZlY3RvcjMscD1uZXcgVEhSRUUuVmVjdG9yMyxxPXRoaXMubW9kZT09PVRIUkVFLkxpbmVTdHJpcD8xOjI7aWYoZyBpbnN0YW5jZW9mXHJcblRIUkVFLkJ1ZmZlckdlb21ldHJ5KXt2YXIgbj1nLmF0dHJpYnV0ZXM7aWYodm9pZCAwIT09bi5pbmRleCl7dmFyIHQ9bi5pbmRleC5hcnJheSxuPW4ucG9zaXRpb24uYXJyYXkscj1nLm9mZnNldHM7MD09PXIubGVuZ3RoJiYocj1be3N0YXJ0OjAsY291bnQ6dC5sZW5ndGgsaW5kZXg6MH1dKTtmb3IodmFyIHM9MDtzPHIubGVuZ3RoO3MrKylmb3IodmFyIHU9cltzXS5zdGFydCx2PXJbc10uY291bnQseD1yW3NdLmluZGV4LGc9dTtnPHUrdi0xO2crPXEpe3ZhciBEPXgrdFtnKzFdO2guZnJvbUFycmF5KG4sMyooeCt0W2ddKSk7ay5mcm9tQXJyYXkobiwzKkQpO0Q9Yi5kaXN0YW5jZVNxVG9TZWdtZW50KGgsayxwLGwpO0Q+Znx8KEQ9Yi5vcmlnaW4uZGlzdGFuY2VUbyhwKSxEPGQubmVhcnx8RD5kLmZhcnx8ZS5wdXNoKHtkaXN0YW5jZTpELHBvaW50OmwuY2xvbmUoKS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCksaW5kZXg6ZyxvZmZzZXRJbmRleDpzLGZhY2U6bnVsbCxmYWNlSW5kZXg6bnVsbCxcclxub2JqZWN0OnRoaXN9KSl9fWVsc2UgZm9yKG49bi5wb3NpdGlvbi5hcnJheSxnPTA7ZzxuLmxlbmd0aC8zLTE7Zys9cSloLmZyb21BcnJheShuLDMqZyksay5mcm9tQXJyYXkobiwzKmcrMyksRD1iLmRpc3RhbmNlU3FUb1NlZ21lbnQoaCxrLHAsbCksRD5mfHwoRD1iLm9yaWdpbi5kaXN0YW5jZVRvKHApLEQ8ZC5uZWFyfHxEPmQuZmFyfHxlLnB1c2goe2Rpc3RhbmNlOkQscG9pbnQ6bC5jbG9uZSgpLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSxpbmRleDpnLGZhY2U6bnVsbCxmYWNlSW5kZXg6bnVsbCxvYmplY3Q6dGhpc30pKX1lbHNlIGlmKGcgaW5zdGFuY2VvZiBUSFJFRS5HZW9tZXRyeSlmb3IoaD1nLnZlcnRpY2VzLGs9aC5sZW5ndGgsZz0wO2c8ay0xO2crPXEpRD1iLmRpc3RhbmNlU3FUb1NlZ21lbnQoaFtnXSxoW2crMV0scCxsKSxEPmZ8fChEPWIub3JpZ2luLmRpc3RhbmNlVG8ocCksRDxkLm5lYXJ8fEQ+ZC5mYXJ8fGUucHVzaCh7ZGlzdGFuY2U6RCxwb2ludDpsLmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLFxyXG5pbmRleDpnLGZhY2U6bnVsbCxmYWNlSW5kZXg6bnVsbCxvYmplY3Q6dGhpc30pKX19fSgpO1RIUkVFLkxpbmUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5MaW5lKHRoaXMuZ2VvbWV0cnksdGhpcy5tYXRlcmlhbCx0aGlzLm1vZGUpKTtUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO3JldHVybiBhfTtUSFJFRS5NZXNoPWZ1bmN0aW9uKGEsYil7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoXCI7dGhpcy5nZW9tZXRyeT12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLkdlb21ldHJ5O3RoaXMubWF0ZXJpYWw9dm9pZCAwIT09Yj9iOm5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7Y29sb3I6MTY3NzcyMTUqTWF0aC5yYW5kb20oKX0pO3RoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCl9O1RIUkVFLk1lc2gucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtcclxuVEhSRUUuTWVzaC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTWVzaDtUSFJFRS5NZXNoLnByb3RvdHlwZS51cGRhdGVNb3JwaFRhcmdldHM9ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT10aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyYmMDx0aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGgpe3RoaXMubW9ycGhUYXJnZXRCYXNlPS0xO3RoaXMubW9ycGhUYXJnZXRGb3JjZWRPcmRlcj1bXTt0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcz1bXTt0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeT17fTtmb3IodmFyIGE9MCxiPXRoaXMuZ2VvbWV0cnkubW9ycGhUYXJnZXRzLmxlbmd0aDthPGI7YSsrKXRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goMCksdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbdGhpcy5nZW9tZXRyeS5tb3JwaFRhcmdldHNbYV0ubmFtZV09YX19O1xyXG5USFJFRS5NZXNoLnByb3RvdHlwZS5nZXRNb3JwaFRhcmdldEluZGV4QnlOYW1lPWZ1bmN0aW9uKGEpe2lmKHZvaWQgMCE9PXRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5W2FdKXJldHVybiB0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVthXTtUSFJFRS53YXJuKFwiVEhSRUUuTWVzaC5nZXRNb3JwaFRhcmdldEluZGV4QnlOYW1lOiBtb3JwaCB0YXJnZXQgXCIrYStcIiBkb2VzIG5vdCBleGlzdC4gUmV0dXJuaW5nIDAuXCIpO3JldHVybiAwfTtcclxuVEhSRUUuTWVzaC5wcm90b3R5cGUucmF5Y2FzdD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NYXRyaXg0LGI9bmV3IFRIUkVFLlJheSxjPW5ldyBUSFJFRS5TcGhlcmUsZD1uZXcgVEhSRUUuVmVjdG9yMyxlPW5ldyBUSFJFRS5WZWN0b3IzLGY9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGcsaCl7dmFyIGs9dGhpcy5nZW9tZXRyeTtudWxsPT09ay5ib3VuZGluZ1NwaGVyZSYmay5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtjLmNvcHkoay5ib3VuZGluZ1NwaGVyZSk7Yy5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCk7aWYoITEhPT1nLnJheS5pc0ludGVyc2VjdGlvblNwaGVyZShjKSYmKGEuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKSxiLmNvcHkoZy5yYXkpLmFwcGx5TWF0cml4NChhKSxudWxsPT09ay5ib3VuZGluZ0JveHx8ITEhPT1iLmlzSW50ZXJzZWN0aW9uQm94KGsuYm91bmRpbmdCb3gpKSlpZihrIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpe3ZhciBsPVxyXG50aGlzLm1hdGVyaWFsO2lmKHZvaWQgMCE9PWwpe3ZhciBwPWsuYXR0cmlidXRlcyxxLG4sdD1nLnByZWNpc2lvbjtpZih2b2lkIDAhPT1wLmluZGV4KXt2YXIgcj1wLmluZGV4LmFycmF5LHM9cC5wb3NpdGlvbi5hcnJheSx1PWsub2Zmc2V0czswPT09dS5sZW5ndGgmJih1PVt7c3RhcnQ6MCxjb3VudDpyLmxlbmd0aCxpbmRleDowfV0pO2Zvcih2YXIgdj0wLHg9dS5sZW5ndGg7djx4Oysrdilmb3IodmFyIHA9dVt2XS5zdGFydCxEPXVbdl0uaW5kZXgsaz1wLHc9cCt1W3ZdLmNvdW50O2s8dztrKz0zKXtwPUQrcltrXTtxPUQrcltrKzFdO249RCtyW2srMl07ZC5mcm9tQXJyYXkocywzKnApO2UuZnJvbUFycmF5KHMsMypxKTtmLmZyb21BcnJheShzLDMqbik7dmFyIHk9bC5zaWRlPT09VEhSRUUuQmFja1NpZGU/Yi5pbnRlcnNlY3RUcmlhbmdsZShmLGUsZCwhMCk6Yi5pbnRlcnNlY3RUcmlhbmdsZShkLGUsZixsLnNpZGUhPT1USFJFRS5Eb3VibGVTaWRlKTtpZihudWxsIT09eSl7eS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCk7XHJcbnZhciBBPWcucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKHkpO0E8dHx8QTxnLm5lYXJ8fEE+Zy5mYXJ8fGgucHVzaCh7ZGlzdGFuY2U6QSxwb2ludDp5LGZhY2U6bmV3IFRIUkVFLkZhY2UzKHAscSxuLFRIUkVFLlRyaWFuZ2xlLm5vcm1hbChkLGUsZikpLGZhY2VJbmRleDpudWxsLG9iamVjdDp0aGlzfSl9fX1lbHNlIGZvcihzPXAucG9zaXRpb24uYXJyYXkscj1rPTAsdz1zLmxlbmd0aDtrPHc7ays9MyxyKz05KXA9ayxxPWsrMSxuPWsrMixkLmZyb21BcnJheShzLHIpLGUuZnJvbUFycmF5KHMsciszKSxmLmZyb21BcnJheShzLHIrNikseT1sLnNpZGU9PT1USFJFRS5CYWNrU2lkZT9iLmludGVyc2VjdFRyaWFuZ2xlKGYsZSxkLCEwKTpiLmludGVyc2VjdFRyaWFuZ2xlKGQsZSxmLGwuc2lkZSE9PVRIUkVFLkRvdWJsZVNpZGUpLG51bGwhPT15JiYoeS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCksQT1nLnJheS5vcmlnaW4uZGlzdGFuY2VUbyh5KSxBPHR8fEE8Zy5uZWFyfHxBPlxyXG5nLmZhcnx8aC5wdXNoKHtkaXN0YW5jZTpBLHBvaW50OnksZmFjZTpuZXcgVEhSRUUuRmFjZTMocCxxLG4sVEhSRUUuVHJpYW5nbGUubm9ybWFsKGQsZSxmKSksZmFjZUluZGV4Om51bGwsb2JqZWN0OnRoaXN9KSl9fWVsc2UgaWYoayBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5KWZvcihyPXRoaXMubWF0ZXJpYWwgaW5zdGFuY2VvZiBUSFJFRS5NZXNoRmFjZU1hdGVyaWFsLHM9ITA9PT1yP3RoaXMubWF0ZXJpYWwubWF0ZXJpYWxzOm51bGwsdD1nLnByZWNpc2lvbix1PWsudmVydGljZXMsdj0wLHg9ay5mYWNlcy5sZW5ndGg7djx4O3YrKylpZihEPWsuZmFjZXNbdl0sbD0hMD09PXI/c1tELm1hdGVyaWFsSW5kZXhdOnRoaXMubWF0ZXJpYWwsdm9pZCAwIT09bCl7cD11W0QuYV07cT11W0QuYl07bj11W0QuY107aWYoITA9PT1sLm1vcnBoVGFyZ2V0cyl7eT1rLm1vcnBoVGFyZ2V0cztBPXRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzO2Quc2V0KDAsMCwwKTtlLnNldCgwLDAsMCk7Zi5zZXQoMCxcclxuMCwwKTtmb3IodmFyIHc9MCxFPXkubGVuZ3RoO3c8RTt3Kyspe3ZhciBHPUFbd107aWYoMCE9PUcpe3ZhciBGPXlbd10udmVydGljZXM7ZC54Kz0oRltELmFdLngtcC54KSpHO2QueSs9KEZbRC5hXS55LXAueSkqRztkLnorPShGW0QuYV0uei1wLnopKkc7ZS54Kz0oRltELmJdLngtcS54KSpHO2UueSs9KEZbRC5iXS55LXEueSkqRztlLnorPShGW0QuYl0uei1xLnopKkc7Zi54Kz0oRltELmNdLngtbi54KSpHO2YueSs9KEZbRC5jXS55LW4ueSkqRztmLnorPShGW0QuY10uei1uLnopKkd9fWQuYWRkKHApO2UuYWRkKHEpO2YuYWRkKG4pO3A9ZDtxPWU7bj1mfXk9bC5zaWRlPT09VEhSRUUuQmFja1NpZGU/Yi5pbnRlcnNlY3RUcmlhbmdsZShuLHEscCwhMCk6Yi5pbnRlcnNlY3RUcmlhbmdsZShwLHEsbixsLnNpZGUhPT1USFJFRS5Eb3VibGVTaWRlKTtudWxsIT09eSYmKHkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLEE9Zy5yYXkub3JpZ2luLmRpc3RhbmNlVG8oeSksQTx0fHxcclxuQTxnLm5lYXJ8fEE+Zy5mYXJ8fGgucHVzaCh7ZGlzdGFuY2U6QSxwb2ludDp5LGZhY2U6RCxmYWNlSW5kZXg6dixvYmplY3Q6dGhpc30pKX19fSgpO1RIUkVFLk1lc2gucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk1lc2godGhpcy5nZW9tZXRyeSx0aGlzLm1hdGVyaWFsKSk7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhLGIpO3JldHVybiBhfTtUSFJFRS5Cb25lPWZ1bmN0aW9uKGEpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQm9uZVwiO3RoaXMuc2tpbj1hfTtUSFJFRS5Cb25lLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuQm9uZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQm9uZTtcclxuVEhSRUUuU2tlbGV0b249ZnVuY3Rpb24oYSxiLGMpe3RoaXMudXNlVmVydGV4VGV4dHVyZT12b2lkIDAhPT1jP2M6ITA7dGhpcy5pZGVudGl0eU1hdHJpeD1uZXcgVEhSRUUuTWF0cml4NDthPWF8fFtdO3RoaXMuYm9uZXM9YS5zbGljZSgwKTt0aGlzLnVzZVZlcnRleFRleHR1cmU/KHRoaXMuYm9uZVRleHR1cmVIZWlnaHQ9dGhpcy5ib25lVGV4dHVyZVdpZHRoPWE9MjU2PHRoaXMuYm9uZXMubGVuZ3RoPzY0OjY0PHRoaXMuYm9uZXMubGVuZ3RoPzMyOjE2PHRoaXMuYm9uZXMubGVuZ3RoPzE2OjgsdGhpcy5ib25lTWF0cmljZXM9bmV3IEZsb2F0MzJBcnJheSh0aGlzLmJvbmVUZXh0dXJlV2lkdGgqdGhpcy5ib25lVGV4dHVyZUhlaWdodCo0KSx0aGlzLmJvbmVUZXh0dXJlPW5ldyBUSFJFRS5EYXRhVGV4dHVyZSh0aGlzLmJvbmVNYXRyaWNlcyx0aGlzLmJvbmVUZXh0dXJlV2lkdGgsdGhpcy5ib25lVGV4dHVyZUhlaWdodCxUSFJFRS5SR0JBRm9ybWF0LFRIUkVFLkZsb2F0VHlwZSksXHJcbnRoaXMuYm9uZVRleHR1cmUubWluRmlsdGVyPVRIUkVFLk5lYXJlc3RGaWx0ZXIsdGhpcy5ib25lVGV4dHVyZS5tYWdGaWx0ZXI9VEhSRUUuTmVhcmVzdEZpbHRlcix0aGlzLmJvbmVUZXh0dXJlLmdlbmVyYXRlTWlwbWFwcz0hMSx0aGlzLmJvbmVUZXh0dXJlLmZsaXBZPSExKTp0aGlzLmJvbmVNYXRyaWNlcz1uZXcgRmxvYXQzMkFycmF5KDE2KnRoaXMuYm9uZXMubGVuZ3RoKTtpZih2b2lkIDA9PT1iKXRoaXMuY2FsY3VsYXRlSW52ZXJzZXMoKTtlbHNlIGlmKHRoaXMuYm9uZXMubGVuZ3RoPT09Yi5sZW5ndGgpdGhpcy5ib25lSW52ZXJzZXM9Yi5zbGljZSgwKTtlbHNlIGZvcihUSFJFRS53YXJuKFwiVEhSRUUuU2tlbGV0b24gYm9uSW52ZXJzZXMgaXMgdGhlIHdyb25nIGxlbmd0aC5cIiksdGhpcy5ib25lSW52ZXJzZXM9W10sYj0wLGE9dGhpcy5ib25lcy5sZW5ndGg7YjxhO2IrKyl0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKG5ldyBUSFJFRS5NYXRyaXg0KX07XHJcblRIUkVFLlNrZWxldG9uLnByb3RvdHlwZS5jYWxjdWxhdGVJbnZlcnNlcz1mdW5jdGlvbigpe3RoaXMuYm9uZUludmVyc2VzPVtdO2Zvcih2YXIgYT0wLGI9dGhpcy5ib25lcy5sZW5ndGg7YTxiO2ErKyl7dmFyIGM9bmV3IFRIUkVFLk1hdHJpeDQ7dGhpcy5ib25lc1thXSYmYy5nZXRJbnZlcnNlKHRoaXMuYm9uZXNbYV0ubWF0cml4V29ybGQpO3RoaXMuYm9uZUludmVyc2VzLnB1c2goYyl9fTtcclxuVEhSRUUuU2tlbGV0b24ucHJvdG90eXBlLnBvc2U9ZnVuY3Rpb24oKXtmb3IodmFyIGEsYj0wLGM9dGhpcy5ib25lcy5sZW5ndGg7YjxjO2IrKykoYT10aGlzLmJvbmVzW2JdKSYmYS5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKHRoaXMuYm9uZUludmVyc2VzW2JdKTtiPTA7Zm9yKGM9dGhpcy5ib25lcy5sZW5ndGg7YjxjO2IrKylpZihhPXRoaXMuYm9uZXNbYl0pYS5wYXJlbnQ/KGEubWF0cml4LmdldEludmVyc2UoYS5wYXJlbnQubWF0cml4V29ybGQpLGEubWF0cml4Lm11bHRpcGx5KGEubWF0cml4V29ybGQpKTphLm1hdHJpeC5jb3B5KGEubWF0cml4V29ybGQpLGEubWF0cml4LmRlY29tcG9zZShhLnBvc2l0aW9uLGEucXVhdGVybmlvbixhLnNjYWxlKX07XHJcblRIUkVFLlNrZWxldG9uLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWF0cml4NDtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIGI9MCxjPXRoaXMuYm9uZXMubGVuZ3RoO2I8YztiKyspYS5tdWx0aXBseU1hdHJpY2VzKHRoaXMuYm9uZXNbYl0/dGhpcy5ib25lc1tiXS5tYXRyaXhXb3JsZDp0aGlzLmlkZW50aXR5TWF0cml4LHRoaXMuYm9uZUludmVyc2VzW2JdKSxhLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0KHRoaXMuYm9uZU1hdHJpY2VzLDE2KmIpO3RoaXMudXNlVmVydGV4VGV4dHVyZSYmKHRoaXMuYm9uZVRleHR1cmUubmVlZHNVcGRhdGU9ITApfX0oKTtcclxuVEhSRUUuU2tpbm5lZE1lc2g9ZnVuY3Rpb24oYSxiLGMpe1RIUkVFLk1lc2guY2FsbCh0aGlzLGEsYik7dGhpcy50eXBlPVwiU2tpbm5lZE1lc2hcIjt0aGlzLmJpbmRNb2RlPVwiYXR0YWNoZWRcIjt0aGlzLmJpbmRNYXRyaXg9bmV3IFRIUkVFLk1hdHJpeDQ7dGhpcy5iaW5kTWF0cml4SW52ZXJzZT1uZXcgVEhSRUUuTWF0cml4NDthPVtdO2lmKHRoaXMuZ2VvbWV0cnkmJnZvaWQgMCE9PXRoaXMuZ2VvbWV0cnkuYm9uZXMpe2Zvcih2YXIgZCxlLGYsZyxoPTAsaz10aGlzLmdlb21ldHJ5LmJvbmVzLmxlbmd0aDtoPGs7KytoKWQ9dGhpcy5nZW9tZXRyeS5ib25lc1toXSxlPWQucG9zLGY9ZC5yb3RxLGc9ZC5zY2wsYj1uZXcgVEhSRUUuQm9uZSh0aGlzKSxhLnB1c2goYiksYi5uYW1lPWQubmFtZSxiLnBvc2l0aW9uLnNldChlWzBdLGVbMV0sZVsyXSksYi5xdWF0ZXJuaW9uLnNldChmWzBdLGZbMV0sZlsyXSxmWzNdKSx2b2lkIDAhPT1nP2Iuc2NhbGUuc2V0KGdbMF0sZ1sxXSxnWzJdKTpiLnNjYWxlLnNldCgxLFxyXG4xLDEpO2g9MDtmb3Ioaz10aGlzLmdlb21ldHJ5LmJvbmVzLmxlbmd0aDtoPGs7KytoKWQ9dGhpcy5nZW9tZXRyeS5ib25lc1toXSwtMSE9PWQucGFyZW50P2FbZC5wYXJlbnRdLmFkZChhW2hdKTp0aGlzLmFkZChhW2hdKX10aGlzLm5vcm1hbGl6ZVNraW5XZWlnaHRzKCk7dGhpcy51cGRhdGVNYXRyaXhXb3JsZCghMCk7dGhpcy5iaW5kKG5ldyBUSFJFRS5Ta2VsZXRvbihhLHZvaWQgMCxjKSl9O1RIUkVFLlNraW5uZWRNZXNoLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1lc2gucHJvdG90eXBlKTtUSFJFRS5Ta2lubmVkTWVzaC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU2tpbm5lZE1lc2g7VEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oYSxiKXt0aGlzLnNrZWxldG9uPWE7dm9pZCAwPT09YiYmKHRoaXMudXBkYXRlTWF0cml4V29ybGQoITApLGI9dGhpcy5tYXRyaXhXb3JsZCk7dGhpcy5iaW5kTWF0cml4LmNvcHkoYik7dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKGIpfTtcclxuVEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLnBvc2U9ZnVuY3Rpb24oKXt0aGlzLnNrZWxldG9uLnBvc2UoKX07VEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLm5vcm1hbGl6ZVNraW5XZWlnaHRzPWZ1bmN0aW9uKCl7aWYodGhpcy5nZW9tZXRyeSBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5KWZvcih2YXIgYT0wO2E8dGhpcy5nZW9tZXRyeS5za2luSW5kaWNlcy5sZW5ndGg7YSsrKXt2YXIgYj10aGlzLmdlb21ldHJ5LnNraW5XZWlnaHRzW2FdLGM9MS9iLmxlbmd0aE1hbmhhdHRhbigpO0luZmluaXR5IT09Yz9iLm11bHRpcGx5U2NhbGFyKGMpOmIuc2V0KDEpfX07XHJcblRIUkVFLlNraW5uZWRNZXNoLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZD1mdW5jdGlvbihhKXtUSFJFRS5NZXNoLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKHRoaXMsITApO1wiYXR0YWNoZWRcIj09PXRoaXMuYmluZE1vZGU/dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKHRoaXMubWF0cml4V29ybGQpOlwiZGV0YWNoZWRcIj09PXRoaXMuYmluZE1vZGU/dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKHRoaXMuYmluZE1hdHJpeCk6VEhSRUUud2FybihcIlRIUkVFLlNraW5uZWRNZXNoIHVucmVja29nbml6ZWQgYmluZE1vZGU6IFwiK3RoaXMuYmluZE1vZGUpfTtcclxuVEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5Ta2lubmVkTWVzaCh0aGlzLmdlb21ldHJ5LHRoaXMubWF0ZXJpYWwsdGhpcy51c2VWZXJ0ZXhUZXh0dXJlKSk7VEhSRUUuTWVzaC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO3JldHVybiBhfTtUSFJFRS5Nb3JwaEFuaW1NZXNoPWZ1bmN0aW9uKGEsYil7VEhSRUUuTWVzaC5jYWxsKHRoaXMsYSxiKTt0aGlzLnR5cGU9XCJNb3JwaEFuaW1NZXNoXCI7dGhpcy5kdXJhdGlvbj0xRTM7dGhpcy5taXJyb3JlZExvb3A9ITE7dGhpcy5jdXJyZW50S2V5ZnJhbWU9dGhpcy5sYXN0S2V5ZnJhbWU9dGhpcy50aW1lPTA7dGhpcy5kaXJlY3Rpb249MTt0aGlzLmRpcmVjdGlvbkJhY2t3YXJkcz0hMTt0aGlzLnNldEZyYW1lUmFuZ2UoMCx0aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGgtMSl9O1RIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWVzaC5wcm90b3R5cGUpO1xyXG5USFJFRS5Nb3JwaEFuaW1NZXNoLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Nb3JwaEFuaW1NZXNoO1RIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLnNldEZyYW1lUmFuZ2U9ZnVuY3Rpb24oYSxiKXt0aGlzLnN0YXJ0S2V5ZnJhbWU9YTt0aGlzLmVuZEtleWZyYW1lPWI7dGhpcy5sZW5ndGg9dGhpcy5lbmRLZXlmcmFtZS10aGlzLnN0YXJ0S2V5ZnJhbWUrMX07VEhSRUUuTW9ycGhBbmltTWVzaC5wcm90b3R5cGUuc2V0RGlyZWN0aW9uRm9yd2FyZD1mdW5jdGlvbigpe3RoaXMuZGlyZWN0aW9uPTE7dGhpcy5kaXJlY3Rpb25CYWNrd2FyZHM9ITF9O1RIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLnNldERpcmVjdGlvbkJhY2t3YXJkPWZ1bmN0aW9uKCl7dGhpcy5kaXJlY3Rpb249LTE7dGhpcy5kaXJlY3Rpb25CYWNrd2FyZHM9ITB9O1xyXG5USFJFRS5Nb3JwaEFuaW1NZXNoLnByb3RvdHlwZS5wYXJzZUFuaW1hdGlvbnM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdlb21ldHJ5O2EuYW5pbWF0aW9uc3x8KGEuYW5pbWF0aW9ucz17fSk7Zm9yKHZhciBiLGM9YS5hbmltYXRpb25zLGQ9LyhbYS16XSspXz8oXFxkKykvLGU9MCxmPWEubW9ycGhUYXJnZXRzLmxlbmd0aDtlPGY7ZSsrKXt2YXIgZz1hLm1vcnBoVGFyZ2V0c1tlXS5uYW1lLm1hdGNoKGQpO2lmKGcmJjE8Zy5sZW5ndGgpe2c9Z1sxXTtjW2ddfHwoY1tnXT17c3RhcnQ6SW5maW5pdHksZW5kOi1JbmZpbml0eX0pO3ZhciBoPWNbZ107ZTxoLnN0YXJ0JiYoaC5zdGFydD1lKTtlPmguZW5kJiYoaC5lbmQ9ZSk7Ynx8KGI9Zyl9fWEuZmlyc3RBbmltYXRpb249Yn07XHJcblRIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLnNldEFuaW1hdGlvbkxhYmVsPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmdlb21ldHJ5LmFuaW1hdGlvbnN8fCh0aGlzLmdlb21ldHJ5LmFuaW1hdGlvbnM9e30pO3RoaXMuZ2VvbWV0cnkuYW5pbWF0aW9uc1thXT17c3RhcnQ6YixlbmQ6Y319O1RIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLnBsYXlBbmltYXRpb249ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmdlb21ldHJ5LmFuaW1hdGlvbnNbYV07Yz8odGhpcy5zZXRGcmFtZVJhbmdlKGMuc3RhcnQsYy5lbmQpLHRoaXMuZHVyYXRpb249KGMuZW5kLWMuc3RhcnQpL2IqMUUzLHRoaXMudGltZT0wKTpUSFJFRS53YXJuKFwiVEhSRUUuTW9ycGhBbmltTWVzaDogYW5pbWF0aW9uW1wiK2ErXCJdIHVuZGVmaW5lZCBpbiAucGxheUFuaW1hdGlvbigpXCIpfTtcclxuVEhSRUUuTW9ycGhBbmltTWVzaC5wcm90b3R5cGUudXBkYXRlQW5pbWF0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZHVyYXRpb24vdGhpcy5sZW5ndGg7dGhpcy50aW1lKz10aGlzLmRpcmVjdGlvbiphO2lmKHRoaXMubWlycm9yZWRMb29wKXtpZih0aGlzLnRpbWU+dGhpcy5kdXJhdGlvbnx8MD50aGlzLnRpbWUpdGhpcy5kaXJlY3Rpb24qPS0xLHRoaXMudGltZT50aGlzLmR1cmF0aW9uJiYodGhpcy50aW1lPXRoaXMuZHVyYXRpb24sdGhpcy5kaXJlY3Rpb25CYWNrd2FyZHM9ITApLDA+dGhpcy50aW1lJiYodGhpcy50aW1lPTAsdGhpcy5kaXJlY3Rpb25CYWNrd2FyZHM9ITEpfWVsc2UgdGhpcy50aW1lJT10aGlzLmR1cmF0aW9uLDA+dGhpcy50aW1lJiYodGhpcy50aW1lKz10aGlzLmR1cmF0aW9uKTthPXRoaXMuc3RhcnRLZXlmcmFtZStUSFJFRS5NYXRoLmNsYW1wKE1hdGguZmxvb3IodGhpcy50aW1lL2IpLDAsdGhpcy5sZW5ndGgtMSk7YSE9PXRoaXMuY3VycmVudEtleWZyYW1lJiZcclxuKHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW3RoaXMubGFzdEtleWZyYW1lXT0wLHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW3RoaXMuY3VycmVudEtleWZyYW1lXT0xLHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW2FdPTAsdGhpcy5sYXN0S2V5ZnJhbWU9dGhpcy5jdXJyZW50S2V5ZnJhbWUsdGhpcy5jdXJyZW50S2V5ZnJhbWU9YSk7Yj10aGlzLnRpbWUlYi9iO3RoaXMuZGlyZWN0aW9uQmFja3dhcmRzJiYoYj0xLWIpO3RoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW3RoaXMuY3VycmVudEtleWZyYW1lXT1iO3RoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW3RoaXMubGFzdEtleWZyYW1lXT0xLWJ9O1xyXG5USFJFRS5Nb3JwaEFuaW1NZXNoLnByb3RvdHlwZS5pbnRlcnBvbGF0ZVRhcmdldHM9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD10aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyxlPTAsZj1kLmxlbmd0aDtlPGY7ZSsrKWRbZV09MDstMTxhJiYoZFthXT0xLWMpOy0xPGImJihkW2JdPWMpfTtcclxuVEhSRUUuTW9ycGhBbmltTWVzaC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk1vcnBoQW5pbU1lc2godGhpcy5nZW9tZXRyeSx0aGlzLm1hdGVyaWFsKSk7YS5kdXJhdGlvbj10aGlzLmR1cmF0aW9uO2EubWlycm9yZWRMb29wPXRoaXMubWlycm9yZWRMb29wO2EudGltZT10aGlzLnRpbWU7YS5sYXN0S2V5ZnJhbWU9dGhpcy5sYXN0S2V5ZnJhbWU7YS5jdXJyZW50S2V5ZnJhbWU9dGhpcy5jdXJyZW50S2V5ZnJhbWU7YS5kaXJlY3Rpb249dGhpcy5kaXJlY3Rpb247YS5kaXJlY3Rpb25CYWNrd2FyZHM9dGhpcy5kaXJlY3Rpb25CYWNrd2FyZHM7VEhSRUUuTWVzaC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO3JldHVybiBhfTtUSFJFRS5MT0Q9ZnVuY3Rpb24oKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMub2JqZWN0cz1bXX07VEhSRUUuTE9ELnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7XHJcblRIUkVFLkxPRC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTE9EO1RIUkVFLkxPRC5wcm90b3R5cGUuYWRkTGV2ZWw9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTtiPU1hdGguYWJzKGIpO2Zvcih2YXIgYz0wO2M8dGhpcy5vYmplY3RzLmxlbmd0aCYmIShiPHRoaXMub2JqZWN0c1tjXS5kaXN0YW5jZSk7YysrKTt0aGlzLm9iamVjdHMuc3BsaWNlKGMsMCx7ZGlzdGFuY2U6YixvYmplY3Q6YX0pO3RoaXMuYWRkKGEpfTtUSFJFRS5MT0QucHJvdG90eXBlLmdldE9iamVjdEZvckRpc3RhbmNlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0xLGM9dGhpcy5vYmplY3RzLmxlbmd0aDtiPGMmJiEoYTx0aGlzLm9iamVjdHNbYl0uZGlzdGFuY2UpO2IrKyk7cmV0dXJuIHRoaXMub2JqZWN0c1tiLTFdLm9iamVjdH07XHJcblRIUkVFLkxPRC5wcm90b3R5cGUucmF5Y2FzdD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiLGMpe2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO3ZhciBkPWIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGEpO3RoaXMuZ2V0T2JqZWN0Rm9yRGlzdGFuY2UoZCkucmF5Y2FzdChiLGMpfX0oKTtcclxuVEhSRUUuTE9ELnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihjKXtpZigxPHRoaXMub2JqZWN0cy5sZW5ndGgpe2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGMubWF0cml4V29ybGQpO2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO2M9YS5kaXN0YW5jZVRvKGIpO3RoaXMub2JqZWN0c1swXS5vYmplY3QudmlzaWJsZT0hMDtmb3IodmFyIGQ9MSxlPXRoaXMub2JqZWN0cy5sZW5ndGg7ZDxlO2QrKylpZihjPj10aGlzLm9iamVjdHNbZF0uZGlzdGFuY2UpdGhpcy5vYmplY3RzW2QtMV0ub2JqZWN0LnZpc2libGU9ITEsdGhpcy5vYmplY3RzW2RdLm9iamVjdC52aXNpYmxlPSEwO2Vsc2UgYnJlYWs7Zm9yKDtkPGU7ZCsrKXRoaXMub2JqZWN0c1tkXS5vYmplY3QudmlzaWJsZT0hMX19fSgpO1xyXG5USFJFRS5MT0QucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5MT0QpO1RIUkVFLk9iamVjdDNELnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7Zm9yKHZhciBiPTAsYz10aGlzLm9iamVjdHMubGVuZ3RoO2I8YztiKyspe3ZhciBkPXRoaXMub2JqZWN0c1tiXS5vYmplY3QuY2xvbmUoKTtkLnZpc2libGU9MD09PWI7YS5hZGRMZXZlbChkLHRoaXMub2JqZWN0c1tiXS5kaXN0YW5jZSl9cmV0dXJuIGF9O1xyXG5USFJFRS5TcHJpdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVWludDE2QXJyYXkoWzAsMSwyLDAsMiwzXSksYj1uZXcgRmxvYXQzMkFycmF5KFstLjUsLS41LDAsLjUsLS41LDAsLjUsLjUsMCwtLjUsLjUsMF0pLGM9bmV3IEZsb2F0MzJBcnJheShbMCwwLDEsMCwxLDEsMCwxXSksZD1uZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnk7ZC5hZGRBdHRyaWJ1dGUoXCJpbmRleFwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSwxKSk7ZC5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYiwzKSk7ZC5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYywyKSk7cmV0dXJuIGZ1bmN0aW9uKGEpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3ByaXRlXCI7dGhpcy5nZW9tZXRyeT1kO3RoaXMubWF0ZXJpYWw9dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5TcHJpdGVNYXRlcmlhbH19KCk7XHJcblRIUkVFLlNwcml0ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLlNwcml0ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU3ByaXRlO1RIUkVFLlNwcml0ZS5wcm90b3R5cGUucmF5Y2FzdD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiLGMpe2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO3ZhciBkPWIucmF5LmRpc3RhbmNlVG9Qb2ludChhKTtkPnRoaXMuc2NhbGUueHx8Yy5wdXNoKHtkaXN0YW5jZTpkLHBvaW50OnRoaXMucG9zaXRpb24sZmFjZTpudWxsLG9iamVjdDp0aGlzfSl9fSgpO1RIUkVFLlNwcml0ZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlNwcml0ZSh0aGlzLm1hdGVyaWFsKSk7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtyZXR1cm4gYX07XHJcblRIUkVFLlBhcnRpY2xlPVRIUkVFLlNwcml0ZTtUSFJFRS5MZW5zRmxhcmU9ZnVuY3Rpb24oYSxiLGMsZCxlKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMubGVuc0ZsYXJlcz1bXTt0aGlzLnBvc2l0aW9uU2NyZWVuPW5ldyBUSFJFRS5WZWN0b3IzO3RoaXMuY3VzdG9tVXBkYXRlQ2FsbGJhY2s9dm9pZCAwO3ZvaWQgMCE9PWEmJnRoaXMuYWRkKGEsYixjLGQsZSl9O1RIUkVFLkxlbnNGbGFyZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkxlbnNGbGFyZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTGVuc0ZsYXJlO1xyXG5USFJFRS5MZW5zRmxhcmUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihhLGIsYyxkLGUsZil7dm9pZCAwPT09YiYmKGI9LTEpO3ZvaWQgMD09PWMmJihjPTApO3ZvaWQgMD09PWYmJihmPTEpO3ZvaWQgMD09PWUmJihlPW5ldyBUSFJFRS5Db2xvcigxNjc3NzIxNSkpO3ZvaWQgMD09PWQmJihkPVRIUkVFLk5vcm1hbEJsZW5kaW5nKTtjPU1hdGgubWluKGMsTWF0aC5tYXgoMCxjKSk7dGhpcy5sZW5zRmxhcmVzLnB1c2goe3RleHR1cmU6YSxzaXplOmIsZGlzdGFuY2U6Yyx4OjAseTowLHo6MCxzY2FsZToxLHJvdGF0aW9uOjEsb3BhY2l0eTpmLGNvbG9yOmUsYmxlbmRpbmc6ZH0pfTtcclxuVEhSRUUuTGVuc0ZsYXJlLnByb3RvdHlwZS51cGRhdGVMZW5zRmxhcmVzPWZ1bmN0aW9uKCl7dmFyIGEsYj10aGlzLmxlbnNGbGFyZXMubGVuZ3RoLGMsZD0yKi10aGlzLnBvc2l0aW9uU2NyZWVuLngsZT0yKi10aGlzLnBvc2l0aW9uU2NyZWVuLnk7Zm9yKGE9MDthPGI7YSsrKWM9dGhpcy5sZW5zRmxhcmVzW2FdLGMueD10aGlzLnBvc2l0aW9uU2NyZWVuLngrZCpjLmRpc3RhbmNlLGMueT10aGlzLnBvc2l0aW9uU2NyZWVuLnkrZSpjLmRpc3RhbmNlLGMud2FudGVkUm90YXRpb249Yy54Kk1hdGguUEkqLjI1LGMucm90YXRpb24rPS4yNSooYy53YW50ZWRSb3RhdGlvbi1jLnJvdGF0aW9uKX07VEhSRUUuU2NlbmU9ZnVuY3Rpb24oKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNjZW5lXCI7dGhpcy5vdmVycmlkZU1hdGVyaWFsPXRoaXMuZm9nPW51bGw7dGhpcy5hdXRvVXBkYXRlPSEwfTtUSFJFRS5TY2VuZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1xyXG5USFJFRS5TY2VuZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU2NlbmU7VEhSRUUuU2NlbmUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5TY2VuZSk7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtudWxsIT09dGhpcy5mb2cmJihhLmZvZz10aGlzLmZvZy5jbG9uZSgpKTtudWxsIT09dGhpcy5vdmVycmlkZU1hdGVyaWFsJiYoYS5vdmVycmlkZU1hdGVyaWFsPXRoaXMub3ZlcnJpZGVNYXRlcmlhbC5jbG9uZSgpKTthLmF1dG9VcGRhdGU9dGhpcy5hdXRvVXBkYXRlO2EubWF0cml4QXV0b1VwZGF0ZT10aGlzLm1hdHJpeEF1dG9VcGRhdGU7cmV0dXJuIGF9O1RIUkVFLkZvZz1mdW5jdGlvbihhLGIsYyl7dGhpcy5uYW1lPVwiXCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoYSk7dGhpcy5uZWFyPXZvaWQgMCE9PWI/YjoxO3RoaXMuZmFyPXZvaWQgMCE9PWM/YzoxRTN9O1xyXG5USFJFRS5Gb2cucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUSFJFRS5Gb2codGhpcy5jb2xvci5nZXRIZXgoKSx0aGlzLm5lYXIsdGhpcy5mYXIpfTtUSFJFRS5Gb2dFeHAyPWZ1bmN0aW9uKGEsYil7dGhpcy5uYW1lPVwiXCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoYSk7dGhpcy5kZW5zaXR5PXZvaWQgMCE9PWI/YjoyLjVFLTR9O1RIUkVFLkZvZ0V4cDIucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUSFJFRS5Gb2dFeHAyKHRoaXMuY29sb3IuZ2V0SGV4KCksdGhpcy5kZW5zaXR5KX07VEhSRUUuU2hhZGVyQ2h1bms9e307VEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uPVwiI2RlZmluZSBQSSAzLjE0MTU5XFxuI2RlZmluZSBQSTIgNi4yODMxOFxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NFxcbiNkZWZpbmUgTE9HMiAxLjQ0MjY5NVxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuXFxuZmxvYXQgc3F1YXJlKCBpbiBmbG9hdCBhICkgeyByZXR1cm4gYSphOyB9XFxudmVjMiAgc3F1YXJlKCBpbiB2ZWMyIGEgKSAgeyByZXR1cm4gdmVjMiggYS54KmEueCwgYS55KmEueSApOyB9XFxudmVjMyAgc3F1YXJlKCBpbiB2ZWMzIGEgKSAgeyByZXR1cm4gdmVjMyggYS54KmEueCwgYS55KmEueSwgYS56KmEueiApOyB9XFxudmVjNCAgc3F1YXJlKCBpbiB2ZWM0IGEgKSAgeyByZXR1cm4gdmVjNCggYS54KmEueCwgYS55KmEueSwgYS56KmEueiwgYS53KmEudyApOyB9XFxuZmxvYXQgc2F0dXJhdGUoIGluIGZsb2F0IGEgKSB7IHJldHVybiBjbGFtcCggYSwgMC4wLCAxLjAgKTsgfVxcbnZlYzIgIHNhdHVyYXRlKCBpbiB2ZWMyIGEgKSAgeyByZXR1cm4gY2xhbXAoIGEsIDAuMCwgMS4wICk7IH1cXG52ZWMzICBzYXR1cmF0ZSggaW4gdmVjMyBhICkgIHsgcmV0dXJuIGNsYW1wKCBhLCAwLjAsIDEuMCApOyB9XFxudmVjNCAgc2F0dXJhdGUoIGluIHZlYzQgYSApICB7IHJldHVybiBjbGFtcCggYSwgMC4wLCAxLjAgKTsgfVxcbmZsb2F0IGF2ZXJhZ2UoIGluIGZsb2F0IGEgKSB7IHJldHVybiBhOyB9XFxuZmxvYXQgYXZlcmFnZSggaW4gdmVjMiBhICkgIHsgcmV0dXJuICggYS54ICsgYS55KSAqIDAuNTsgfVxcbmZsb2F0IGF2ZXJhZ2UoIGluIHZlYzMgYSApICB7IHJldHVybiAoIGEueCArIGEueSArIGEueikgLyAzLjA7IH1cXG5mbG9hdCBhdmVyYWdlKCBpbiB2ZWM0IGEgKSAgeyByZXR1cm4gKCBhLnggKyBhLnkgKyBhLnogKyBhLncpICogMC4yNTsgfVxcbmZsb2F0IHdoaXRlQ29tcGxpbWVudCggaW4gZmxvYXQgYSApIHsgcmV0dXJuIHNhdHVyYXRlKCAxLjAgLSBhICk7IH1cXG52ZWMyICB3aGl0ZUNvbXBsaW1lbnQoIGluIHZlYzIgYSApICB7IHJldHVybiBzYXR1cmF0ZSggdmVjMigxLjApIC0gYSApOyB9XFxudmVjMyAgd2hpdGVDb21wbGltZW50KCBpbiB2ZWMzIGEgKSAgeyByZXR1cm4gc2F0dXJhdGUoIHZlYzMoMS4wKSAtIGEgKTsgfVxcbnZlYzQgIHdoaXRlQ29tcGxpbWVudCggaW4gdmVjNCBhICkgIHsgcmV0dXJuIHNhdHVyYXRlKCB2ZWM0KDEuMCkgLSBhICk7IH1cXG52ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBub3JtYWwsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggbWF0cml4ICogdmVjNCggbm9ybWFsLCAwLjAgKSApLnh5eiApO1xcbn1cXG4vLyBodHRwOi8vZW4ud2lraWJvb2tzLm9yZy93aWtpL0dMU0xfUHJvZ3JhbW1pbmcvQXBwbHlpbmdfTWF0cml4X1RyYW5zZm9ybWF0aW9uc1xcbnZlYzMgaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBub3JtYWwsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggdmVjNCggbm9ybWFsLCAwLjAgKSAqIG1hdHJpeCApLnh5eiApO1xcbn1cXG52ZWMzIHByb2plY3RPblBsYW5lKGluIHZlYzMgcG9pbnQsIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsKSB7XFxuXFx0ZmxvYXQgZGlzdGFuY2UgPSBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludC1wb2ludE9uUGxhbmUgKTtcXG5cXHRyZXR1cm4gcG9pbnQgLSBkaXN0YW5jZSAqIHBsYW5lTm9ybWFsO1xcbn1cXG5mbG9hdCBzaWRlT2ZQbGFuZSggaW4gdmVjMyBwb2ludCwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0cmV0dXJuIHNpZ24oIGRvdCggcG9pbnQgLSBwb2ludE9uUGxhbmUsIHBsYW5lTm9ybWFsICkgKTtcXG59XFxudmVjMyBsaW5lUGxhbmVJbnRlcnNlY3QoIGluIHZlYzMgcG9pbnRPbkxpbmUsIGluIHZlYzMgbGluZURpcmVjdGlvbiwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0cmV0dXJuIHBvaW50T25MaW5lICsgbGluZURpcmVjdGlvbiAqICggZG90KCBwbGFuZU5vcm1hbCwgcG9pbnRPblBsYW5lIC0gcG9pbnRPbkxpbmUgKSAvIGRvdCggcGxhbmVOb3JtYWwsIGxpbmVEaXJlY3Rpb24gKSApO1xcbn1cXG5mbG9hdCBjYWxjTGlnaHRBdHRlbnVhdGlvbiggZmxvYXQgbGlnaHREaXN0YW5jZSwgZmxvYXQgY3V0b2ZmRGlzdGFuY2UsIGZsb2F0IGRlY2F5RXhwb25lbnQgKSB7XFxuXFx0aWYgKCBkZWNheUV4cG9uZW50ID4gMC4wICkge1xcblxcdCAgcmV0dXJuIHBvdyggc2F0dXJhdGUoIDEuMCAtIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSApLCBkZWNheUV4cG9uZW50ICk7XFxuXFx0fVxcblxcdHJldHVybiAxLjA7XFxufVxcblxcbnZlYzMgaW5wdXRUb0xpbmVhciggaW4gdmVjMyBhICkge1xcbiNpZmRlZiBHQU1NQV9JTlBVVFxcblxcdHJldHVybiBwb3coIGEsIHZlYzMoIGZsb2F0KCBHQU1NQV9GQUNUT1IgKSApICk7XFxuI2Vsc2VcXG5cXHRyZXR1cm4gYTtcXG4jZW5kaWZcXG59XFxudmVjMyBsaW5lYXJUb091dHB1dCggaW4gdmVjMyBhICkge1xcbiNpZmRlZiBHQU1NQV9PVVRQVVRcXG5cXHRyZXR1cm4gcG93KCBhLCB2ZWMzKCAxLjAgLyBmbG9hdCggR0FNTUFfRkFDVE9SICkgKSApO1xcbiNlbHNlXFxuXFx0cmV0dXJuIGE7XFxuI2VuZGlmXFxufVxcblwiO1xyXG5USFJFRS5TaGFkZXJDaHVuay5hbHBoYXRlc3RfZnJhZ21lbnQ9XCIjaWZkZWYgQUxQSEFURVNUXFxuXFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IEFMUEhBVEVTVCApIGRpc2NhcmQ7XFxuXFxuI2VuZGlmXFxuXCI7VEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRzX2xhbWJlcnRfdmVydGV4PVwidkxpZ2h0RnJvbnQgPSB2ZWMzKCAwLjAgKTtcXG5cXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFxuXFx0dkxpZ2h0QmFjayA9IHZlYzMoIDAuMCApO1xcblxcbiNlbmRpZlxcblxcbnRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcblxcbiNpZiBNQVhfRElSX0xJR0hUUyA+IDBcXG5cXG5mb3IoIGludCBpID0gMDsgaSA8IE1BWF9ESVJfTElHSFRTOyBpICsrICkge1xcblxcblxcdHZlYzMgZGlyVmVjdG9yID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyBpIF0sIHZpZXdNYXRyaXggKTtcXG5cXG5cXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCB0cmFuc2Zvcm1lZE5vcm1hbCwgZGlyVmVjdG9yICk7XFxuXFx0dmVjMyBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nID0gdmVjMyggbWF4KCBkb3RQcm9kdWN0LCAwLjAgKSApO1xcblxcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmdCYWNrID0gdmVjMyggbWF4KCAtZG90UHJvZHVjdCwgMC4wICkgKTtcXG5cXG5cXHRcXHQjaWZkZWYgV1JBUF9BUk9VTkRcXG5cXG5cXHRcXHRcXHR2ZWMzIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmdIYWxmQmFjayA9IHZlYzMoIG1heCggLTAuNSAqIGRvdFByb2R1Y3QgKyAwLjUsIDAuMCApICk7XFxuXFxuXFx0XFx0I2VuZGlmXFxuXFxuXFx0I2VuZGlmXFxuXFxuXFx0I2lmZGVmIFdSQVBfQVJPVU5EXFxuXFxuXFx0XFx0dmVjMyBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nSGFsZiA9IHZlYzMoIG1heCggMC41ICogZG90UHJvZHVjdCArIDAuNSwgMC4wICkgKTtcXG5cXHRcXHRkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nID0gbWl4KCBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nLCBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nSGFsZiwgd3JhcFJHQiApO1xcblxcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRcXHRkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nQmFjayA9IG1peCggZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZ0JhY2ssIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmdIYWxmQmFjaywgd3JhcFJHQiApO1xcblxcblxcdFxcdCNlbmRpZlxcblxcblxcdCNlbmRpZlxcblxcblxcdHZMaWdodEZyb250ICs9IGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgaSBdICogZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZztcXG5cXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFxuXFx0XFx0dkxpZ2h0QmFjayArPSBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIGkgXSAqIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmdCYWNrO1xcblxcblxcdCNlbmRpZlxcblxcbn1cXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX1BPSU5UX0xJR0hUUyA+IDBcXG5cXG5cXHRmb3IoIGludCBpID0gMDsgaSA8IE1BWF9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFxuXFx0XFx0dmVjNCBsUG9zaXRpb24gPSB2aWV3TWF0cml4ICogdmVjNCggcG9pbnRMaWdodFBvc2l0aW9uWyBpIF0sIDEuMCApO1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IGxQb3NpdGlvbi54eXogLSBtdlBvc2l0aW9uLnh5ejtcXG5cXG5cXHRcXHRmbG9hdCBhdHRlbnVhdGlvbiA9IGNhbGNMaWdodEF0dGVudWF0aW9uKCBsZW5ndGgoIGxWZWN0b3IgKSwgcG9pbnRMaWdodERpc3RhbmNlWyBpIF0sIHBvaW50TGlnaHREZWNheVsgaSBdICk7XFxuXFxuXFx0XFx0bFZlY3RvciA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIHRyYW5zZm9ybWVkTm9ybWFsLCBsVmVjdG9yICk7XFxuXFxuXFx0XFx0dmVjMyBwb2ludExpZ2h0V2VpZ2h0aW5nID0gdmVjMyggbWF4KCBkb3RQcm9kdWN0LCAwLjAgKSApO1xcblxcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRcXHR2ZWMzIHBvaW50TGlnaHRXZWlnaHRpbmdCYWNrID0gdmVjMyggbWF4KCAtZG90UHJvZHVjdCwgMC4wICkgKTtcXG5cXG5cXHRcXHRcXHQjaWZkZWYgV1JBUF9BUk9VTkRcXG5cXG5cXHRcXHRcXHRcXHR2ZWMzIHBvaW50TGlnaHRXZWlnaHRpbmdIYWxmQmFjayA9IHZlYzMoIG1heCggLTAuNSAqIGRvdFByb2R1Y3QgKyAwLjUsIDAuMCApICk7XFxuXFxuXFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0I2lmZGVmIFdSQVBfQVJPVU5EXFxuXFxuXFx0XFx0XFx0dmVjMyBwb2ludExpZ2h0V2VpZ2h0aW5nSGFsZiA9IHZlYzMoIG1heCggMC41ICogZG90UHJvZHVjdCArIDAuNSwgMC4wICkgKTtcXG5cXHRcXHRcXHRwb2ludExpZ2h0V2VpZ2h0aW5nID0gbWl4KCBwb2ludExpZ2h0V2VpZ2h0aW5nLCBwb2ludExpZ2h0V2VpZ2h0aW5nSGFsZiwgd3JhcFJHQiApO1xcblxcblxcdFxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRcXHRcXHRwb2ludExpZ2h0V2VpZ2h0aW5nQmFjayA9IG1peCggcG9pbnRMaWdodFdlaWdodGluZ0JhY2ssIHBvaW50TGlnaHRXZWlnaHRpbmdIYWxmQmFjaywgd3JhcFJHQiApO1xcblxcblxcdFxcdFxcdCNlbmRpZlxcblxcblxcdFxcdCNlbmRpZlxcblxcblxcdFxcdHZMaWdodEZyb250ICs9IHBvaW50TGlnaHRDb2xvclsgaSBdICogcG9pbnRMaWdodFdlaWdodGluZyAqIGF0dGVudWF0aW9uO1xcblxcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRcXHR2TGlnaHRCYWNrICs9IHBvaW50TGlnaHRDb2xvclsgaSBdICogcG9pbnRMaWdodFdlaWdodGluZ0JhY2sgKiBhdHRlbnVhdGlvbjtcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9TUE9UX0xJR0hUUyA+IDBcXG5cXG5cXHRmb3IoIGludCBpID0gMDsgaSA8IE1BWF9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXG5cXHRcXHR2ZWM0IGxQb3NpdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBzcG90TGlnaHRQb3NpdGlvblsgaSBdLCAxLjAgKTtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBsUG9zaXRpb24ueHl6IC0gbXZQb3NpdGlvbi54eXo7XFxuXFxuXFx0XFx0ZmxvYXQgc3BvdEVmZmVjdCA9IGRvdCggc3BvdExpZ2h0RGlyZWN0aW9uWyBpIF0sIG5vcm1hbGl6ZSggc3BvdExpZ2h0UG9zaXRpb25bIGkgXSAtIHdvcmxkUG9zaXRpb24ueHl6ICkgKTtcXG5cXG5cXHRcXHRpZiAoIHNwb3RFZmZlY3QgPiBzcG90TGlnaHRBbmdsZUNvc1sgaSBdICkge1xcblxcblxcdFxcdFxcdHNwb3RFZmZlY3QgPSBtYXgoIHBvdyggbWF4KCBzcG90RWZmZWN0LCAwLjAgKSwgc3BvdExpZ2h0RXhwb25lbnRbIGkgXSApLCAwLjAgKTtcXG5cXG5cXHRcXHRcXHRmbG9hdCBhdHRlbnVhdGlvbiA9IGNhbGNMaWdodEF0dGVudWF0aW9uKCBsZW5ndGgoIGxWZWN0b3IgKSwgc3BvdExpZ2h0RGlzdGFuY2VbIGkgXSwgc3BvdExpZ2h0RGVjYXlbIGkgXSApO1xcblxcblxcdFxcdFxcdGxWZWN0b3IgPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXG5cXHRcXHRcXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCB0cmFuc2Zvcm1lZE5vcm1hbCwgbFZlY3RvciApO1xcblxcdFxcdFxcdHZlYzMgc3BvdExpZ2h0V2VpZ2h0aW5nID0gdmVjMyggbWF4KCBkb3RQcm9kdWN0LCAwLjAgKSApO1xcblxcblxcdFxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRcXHRcXHR2ZWMzIHNwb3RMaWdodFdlaWdodGluZ0JhY2sgPSB2ZWMzKCBtYXgoIC1kb3RQcm9kdWN0LCAwLjAgKSApO1xcblxcblxcdFxcdFxcdFxcdCNpZmRlZiBXUkFQX0FST1VORFxcblxcblxcdFxcdFxcdFxcdFxcdHZlYzMgc3BvdExpZ2h0V2VpZ2h0aW5nSGFsZkJhY2sgPSB2ZWMzKCBtYXgoIC0wLjUgKiBkb3RQcm9kdWN0ICsgMC41LCAwLjAgKSApO1xcblxcblxcdFxcdFxcdFxcdCNlbmRpZlxcblxcblxcdFxcdFxcdCNlbmRpZlxcblxcblxcdFxcdFxcdCNpZmRlZiBXUkFQX0FST1VORFxcblxcblxcdFxcdFxcdFxcdHZlYzMgc3BvdExpZ2h0V2VpZ2h0aW5nSGFsZiA9IHZlYzMoIG1heCggMC41ICogZG90UHJvZHVjdCArIDAuNSwgMC4wICkgKTtcXG5cXHRcXHRcXHRcXHRzcG90TGlnaHRXZWlnaHRpbmcgPSBtaXgoIHNwb3RMaWdodFdlaWdodGluZywgc3BvdExpZ2h0V2VpZ2h0aW5nSGFsZiwgd3JhcFJHQiApO1xcblxcblxcdFxcdFxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRcXHRcXHRcXHRzcG90TGlnaHRXZWlnaHRpbmdCYWNrID0gbWl4KCBzcG90TGlnaHRXZWlnaHRpbmdCYWNrLCBzcG90TGlnaHRXZWlnaHRpbmdIYWxmQmFjaywgd3JhcFJHQiApO1xcblxcblxcdFxcdFxcdFxcdCNlbmRpZlxcblxcblxcdFxcdFxcdCNlbmRpZlxcblxcblxcdFxcdFxcdHZMaWdodEZyb250ICs9IHNwb3RMaWdodENvbG9yWyBpIF0gKiBzcG90TGlnaHRXZWlnaHRpbmcgKiBhdHRlbnVhdGlvbiAqIHNwb3RFZmZlY3Q7XFxuXFxuXFx0XFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc3BvdExpZ2h0Q29sb3JbIGkgXSAqIHNwb3RMaWdodFdlaWdodGluZ0JhY2sgKiBhdHRlbnVhdGlvbiAqIHNwb3RFZmZlY3Q7XFxuXFxuXFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0fVxcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX0hFTUlfTElHSFRTID4gMFxcblxcblxcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzMgbFZlY3RvciA9IHRyYW5zZm9ybURpcmVjdGlvbiggaGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uWyBpIF0sIHZpZXdNYXRyaXggKTtcXG5cXG5cXHRcXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCB0cmFuc2Zvcm1lZE5vcm1hbCwgbFZlY3RvciApO1xcblxcblxcdFxcdGZsb2F0IGhlbWlEaWZmdXNlV2VpZ2h0ID0gMC41ICogZG90UHJvZHVjdCArIDAuNTtcXG5cXHRcXHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodEJhY2sgPSAtMC41ICogZG90UHJvZHVjdCArIDAuNTtcXG5cXG5cXHRcXHR2TGlnaHRGcm9udCArPSBtaXgoIGhlbWlzcGhlcmVMaWdodEdyb3VuZENvbG9yWyBpIF0sIGhlbWlzcGhlcmVMaWdodFNreUNvbG9yWyBpIF0sIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gbWl4KCBoZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvclsgaSBdLCBoZW1pc3BoZXJlTGlnaHRTa3lDb2xvclsgaSBdLCBoZW1pRGlmZnVzZVdlaWdodEJhY2sgKTtcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXFxudkxpZ2h0RnJvbnQgKz0gYW1iaWVudExpZ2h0Q29sb3I7XFxuXFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdHZMaWdodEJhY2sgKz0gYW1iaWVudExpZ2h0Q29sb3I7XFxuXFxuI2VuZGlmXFxuXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9NQVBcXG5cXG5cXHR1bmlmb3JtIHZlYzQgb2Zmc2V0UmVwZWF0O1xcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0X3ZlcnRleD1cIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiBza2lubmVkO1xcblxcbiNlbGlmIGRlZmluZWQoIFVTRV9NT1JQSFRBUkdFVFMgKVxcblxcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIG1vcnBoZWQsIDEuMCApO1xcblxcbiNlbHNlXFxuXFxuXFx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcblxcbiNlbmRpZlxcblxcbmdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XFxuXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJzX2ZyYWdtZW50PVwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfU1BFQ1VMQVJNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxcblxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuXFxuI2VuZGlmXFxuXFxuI2lmZGVmIFVTRV9NQVBcXG5cXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5vcm1hbF92ZXJ0ZXg9XCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFxuXFx0bWF0NCBza2luTWF0cml4ID0gbWF0NCggMC4wICk7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnggKiBib25lTWF0WDtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueSAqIGJvbmVNYXRZO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC56ICogYm9uZU1hdFo7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LncgKiBib25lTWF0VztcXG5cXHRza2luTWF0cml4ICA9IGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbk1hdHJpeCAqIGJpbmRNYXRyaXg7XFxuXFxuXFx0I2lmZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXG5cXHR2ZWM0IHNraW5uZWROb3JtYWwgPSBza2luTWF0cml4ICogdmVjNCggbW9ycGhlZE5vcm1hbCwgMC4wICk7XFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHR2ZWM0IHNraW5uZWROb3JtYWwgPSBza2luTWF0cml4ICogdmVjNCggbm9ybWFsLCAwLjAgKTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtcclxuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg9XCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFxuXFx0I2VuZGlmXFxuXFxuXFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX3BhcnNfdmVydGV4PVwiI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19waG9uZ19mcmFnbWVudD1cIiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggdk5vcm1hbCApO1xcblxcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRub3JtYWwgPSBub3JtYWwgKiAoIC0xLjAgKyAyLjAgKiBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSApO1xcblxcblxcdCNlbmRpZlxcblxcbiNlbHNlXFxuXFxuXFx0dmVjMyBmZHggPSBkRmR4KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBmZHkgPSBkRmR5KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCBmZHgsIGZkeSApICk7XFxuXFxuI2VuZGlmXFxuXFxudmVjMyB2aWV3UG9zaXRpb24gPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5cXG4jaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcblxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsICk7XFxuXFxuI2VsaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKVxcblxcblxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWxBcmIoIC12Vmlld1Bvc2l0aW9uLCBub3JtYWwsIGRIZHh5X2Z3ZCgpICk7XFxuXFxuI2VuZGlmXFxuXFxudmVjMyB0b3RhbERpZmZ1c2VMaWdodCA9IHZlYzMoIDAuMCApO1xcbnZlYzMgdG90YWxTcGVjdWxhckxpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFxuI2lmIE1BWF9QT0lOVF9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTUFYX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXG5cXHRcXHR2ZWM0IGxQb3NpdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBwb2ludExpZ2h0UG9zaXRpb25bIGkgXSwgMS4wICk7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gbFBvc2l0aW9uLnh5eiArIHZWaWV3UG9zaXRpb24ueHl6O1xcblxcblxcdFxcdGZsb2F0IGF0dGVudWF0aW9uID0gY2FsY0xpZ2h0QXR0ZW51YXRpb24oIGxlbmd0aCggbFZlY3RvciApLCBwb2ludExpZ2h0RGlzdGFuY2VbIGkgXSwgcG9pbnRMaWdodERlY2F5WyBpIF0gKTtcXG5cXG5cXHRcXHRsVmVjdG9yID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFxuXFx0XFx0Ly8gZGlmZnVzZVxcblxcblxcdFxcdGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIG5vcm1hbCwgbFZlY3RvciApO1xcblxcblxcdFxcdCNpZmRlZiBXUkFQX0FST1VORFxcblxcblxcdFxcdFxcdGZsb2F0IHBvaW50RGlmZnVzZVdlaWdodEZ1bGwgPSBtYXgoIGRvdFByb2R1Y3QsIDAuMCApO1xcblxcdFxcdFxcdGZsb2F0IHBvaW50RGlmZnVzZVdlaWdodEhhbGYgPSBtYXgoIDAuNSAqIGRvdFByb2R1Y3QgKyAwLjUsIDAuMCApO1xcblxcblxcdFxcdFxcdHZlYzMgcG9pbnREaWZmdXNlV2VpZ2h0ID0gbWl4KCB2ZWMzKCBwb2ludERpZmZ1c2VXZWlnaHRGdWxsICksIHZlYzMoIHBvaW50RGlmZnVzZVdlaWdodEhhbGYgKSwgd3JhcFJHQiApO1xcblxcblxcdFxcdCNlbHNlXFxuXFxuXFx0XFx0XFx0ZmxvYXQgcG9pbnREaWZmdXNlV2VpZ2h0ID0gbWF4KCBkb3RQcm9kdWN0LCAwLjAgKTtcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHRcXHR0b3RhbERpZmZ1c2VMaWdodCArPSBwb2ludExpZ2h0Q29sb3JbIGkgXSAqIHBvaW50RGlmZnVzZVdlaWdodCAqIGF0dGVudWF0aW9uO1xcblxcblxcdFxcdFxcdFxcdC8vIHNwZWN1bGFyXFxuXFxuXFx0XFx0dmVjMyBwb2ludEhhbGZWZWN0b3IgPSBub3JtYWxpemUoIGxWZWN0b3IgKyB2aWV3UG9zaXRpb24gKTtcXG5cXHRcXHRmbG9hdCBwb2ludERvdE5vcm1hbEhhbGYgPSBtYXgoIGRvdCggbm9ybWFsLCBwb2ludEhhbGZWZWN0b3IgKSwgMC4wICk7XFxuXFx0XFx0ZmxvYXQgcG9pbnRTcGVjdWxhcldlaWdodCA9IHNwZWN1bGFyU3RyZW5ndGggKiBtYXgoIHBvdyggcG9pbnREb3ROb3JtYWxIYWxmLCBzaGluaW5lc3MgKSwgMC4wICk7XFxuXFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJOb3JtYWxpemF0aW9uID0gKCBzaGluaW5lc3MgKyAyLjAgKSAvIDguMDtcXG5cXG5cXHRcXHR2ZWMzIHNjaGxpY2sgPSBzcGVjdWxhciArIHZlYzMoIDEuMCAtIHNwZWN1bGFyICkgKiBwb3coIG1heCggMS4wIC0gZG90KCBsVmVjdG9yLCBwb2ludEhhbGZWZWN0b3IgKSwgMC4wICksIDUuMCApO1xcblxcdFxcdHRvdGFsU3BlY3VsYXJMaWdodCArPSBzY2hsaWNrICogcG9pbnRMaWdodENvbG9yWyBpIF0gKiBwb2ludFNwZWN1bGFyV2VpZ2h0ICogcG9pbnREaWZmdXNlV2VpZ2h0ICogYXR0ZW51YXRpb24gKiBzcGVjdWxhck5vcm1hbGl6YXRpb247XFxuXFxuXFx0fVxcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfU1BPVF9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTUFYX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzQgbFBvc2l0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIHNwb3RMaWdodFBvc2l0aW9uWyBpIF0sIDEuMCApO1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IGxQb3NpdGlvbi54eXogKyB2Vmlld1Bvc2l0aW9uLnh5ejtcXG5cXG5cXHRcXHRmbG9hdCBhdHRlbnVhdGlvbiA9IGNhbGNMaWdodEF0dGVudWF0aW9uKCBsZW5ndGgoIGxWZWN0b3IgKSwgc3BvdExpZ2h0RGlzdGFuY2VbIGkgXSwgc3BvdExpZ2h0RGVjYXlbIGkgXSApO1xcblxcblxcdFxcdGxWZWN0b3IgPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXG5cXHRcXHRmbG9hdCBzcG90RWZmZWN0ID0gZG90KCBzcG90TGlnaHREaXJlY3Rpb25bIGkgXSwgbm9ybWFsaXplKCBzcG90TGlnaHRQb3NpdGlvblsgaSBdIC0gdldvcmxkUG9zaXRpb24gKSApO1xcblxcblxcdFxcdGlmICggc3BvdEVmZmVjdCA+IHNwb3RMaWdodEFuZ2xlQ29zWyBpIF0gKSB7XFxuXFxuXFx0XFx0XFx0c3BvdEVmZmVjdCA9IG1heCggcG93KCBtYXgoIHNwb3RFZmZlY3QsIDAuMCApLCBzcG90TGlnaHRFeHBvbmVudFsgaSBdICksIDAuMCApO1xcblxcblxcdFxcdFxcdC8vIGRpZmZ1c2VcXG5cXG5cXHRcXHRcXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxWZWN0b3IgKTtcXG5cXG5cXHRcXHRcXHQjaWZkZWYgV1JBUF9BUk9VTkRcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBzcG90RGlmZnVzZVdlaWdodEZ1bGwgPSBtYXgoIGRvdFByb2R1Y3QsIDAuMCApO1xcblxcdFxcdFxcdFxcdGZsb2F0IHNwb3REaWZmdXNlV2VpZ2h0SGFsZiA9IG1heCggMC41ICogZG90UHJvZHVjdCArIDAuNSwgMC4wICk7XFxuXFxuXFx0XFx0XFx0XFx0dmVjMyBzcG90RGlmZnVzZVdlaWdodCA9IG1peCggdmVjMyggc3BvdERpZmZ1c2VXZWlnaHRGdWxsICksIHZlYzMoIHNwb3REaWZmdXNlV2VpZ2h0SGFsZiApLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0XFx0I2Vsc2VcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBzcG90RGlmZnVzZVdlaWdodCA9IG1heCggZG90UHJvZHVjdCwgMC4wICk7XFxuXFxuXFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0XFx0dG90YWxEaWZmdXNlTGlnaHQgKz0gc3BvdExpZ2h0Q29sb3JbIGkgXSAqIHNwb3REaWZmdXNlV2VpZ2h0ICogYXR0ZW51YXRpb24gKiBzcG90RWZmZWN0O1xcblxcblxcdFxcdFxcdC8vIHNwZWN1bGFyXFxuXFxuXFx0XFx0XFx0dmVjMyBzcG90SGFsZlZlY3RvciA9IG5vcm1hbGl6ZSggbFZlY3RvciArIHZpZXdQb3NpdGlvbiApO1xcblxcdFxcdFxcdGZsb2F0IHNwb3REb3ROb3JtYWxIYWxmID0gbWF4KCBkb3QoIG5vcm1hbCwgc3BvdEhhbGZWZWN0b3IgKSwgMC4wICk7XFxuXFx0XFx0XFx0ZmxvYXQgc3BvdFNwZWN1bGFyV2VpZ2h0ID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBzcG90RG90Tm9ybWFsSGFsZiwgc2hpbmluZXNzICksIDAuMCApO1xcblxcblxcdFxcdFxcdGZsb2F0IHNwZWN1bGFyTm9ybWFsaXphdGlvbiA9ICggc2hpbmluZXNzICsgMi4wICkgLyA4LjA7XFxuXFxuXFx0XFx0XFx0dmVjMyBzY2hsaWNrID0gc3BlY3VsYXIgKyB2ZWMzKCAxLjAgLSBzcGVjdWxhciApICogcG93KCBtYXgoIDEuMCAtIGRvdCggbFZlY3Rvciwgc3BvdEhhbGZWZWN0b3IgKSwgMC4wICksIDUuMCApO1xcblxcdFxcdFxcdHRvdGFsU3BlY3VsYXJMaWdodCArPSBzY2hsaWNrICogc3BvdExpZ2h0Q29sb3JbIGkgXSAqIHNwb3RTcGVjdWxhcldlaWdodCAqIHNwb3REaWZmdXNlV2VpZ2h0ICogYXR0ZW51YXRpb24gKiBzcGVjdWxhck5vcm1hbGl6YXRpb24gKiBzcG90RWZmZWN0O1xcblxcblxcdFxcdH1cXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9ESVJfTElHSFRTID4gMFxcblxcblxcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFxuXFx0XFx0dmVjMyBkaXJWZWN0b3IgPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIGkgXSwgdmlld01hdHJpeCApO1xcblxcblxcdFxcdC8vIGRpZmZ1c2VcXG5cXG5cXHRcXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGRpclZlY3RvciApO1xcblxcblxcdFxcdCNpZmRlZiBXUkFQX0FST1VORFxcblxcblxcdFxcdFxcdGZsb2F0IGRpckRpZmZ1c2VXZWlnaHRGdWxsID0gbWF4KCBkb3RQcm9kdWN0LCAwLjAgKTtcXG5cXHRcXHRcXHRmbG9hdCBkaXJEaWZmdXNlV2VpZ2h0SGFsZiA9IG1heCggMC41ICogZG90UHJvZHVjdCArIDAuNSwgMC4wICk7XFxuXFxuXFx0XFx0XFx0dmVjMyBkaXJEaWZmdXNlV2VpZ2h0ID0gbWl4KCB2ZWMzKCBkaXJEaWZmdXNlV2VpZ2h0RnVsbCApLCB2ZWMzKCBkaXJEaWZmdXNlV2VpZ2h0SGFsZiApLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0I2Vsc2VcXG5cXG5cXHRcXHRcXHRmbG9hdCBkaXJEaWZmdXNlV2VpZ2h0ID0gbWF4KCBkb3RQcm9kdWN0LCAwLjAgKTtcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHRcXHR0b3RhbERpZmZ1c2VMaWdodCArPSBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIGkgXSAqIGRpckRpZmZ1c2VXZWlnaHQ7XFxuXFxuXFx0XFx0Ly8gc3BlY3VsYXJcXG5cXG5cXHRcXHR2ZWMzIGRpckhhbGZWZWN0b3IgPSBub3JtYWxpemUoIGRpclZlY3RvciArIHZpZXdQb3NpdGlvbiApO1xcblxcdFxcdGZsb2F0IGRpckRvdE5vcm1hbEhhbGYgPSBtYXgoIGRvdCggbm9ybWFsLCBkaXJIYWxmVmVjdG9yICksIDAuMCApO1xcblxcdFxcdGZsb2F0IGRpclNwZWN1bGFyV2VpZ2h0ID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBkaXJEb3ROb3JtYWxIYWxmLCBzaGluaW5lc3MgKSwgMC4wICk7XFxuXFxuXFx0XFx0LypcXG5cXHRcXHQvLyBmcmVzbmVsIHRlcm0gZnJvbSBza2luIHNoYWRlclxcblxcdFxcdGNvbnN0IGZsb2F0IEYwID0gMC4xMjg7XFxuXFxuXFx0XFx0ZmxvYXQgYmFzZSA9IDEuMCAtIGRvdCggdmlld1Bvc2l0aW9uLCBkaXJIYWxmVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgZXhwb25lbnRpYWwgPSBwb3coIGJhc2UsIDUuMCApO1xcblxcblxcdFxcdGZsb2F0IGZyZXNuZWwgPSBleHBvbmVudGlhbCArIEYwICogKCAxLjAgLSBleHBvbmVudGlhbCApO1xcblxcdFxcdCovXFxuXFxuXFx0XFx0LypcXG5cXHRcXHQvLyBmcmVzbmVsIHRlcm0gZnJvbSBmcmVzbmVsIHNoYWRlclxcblxcdFxcdGNvbnN0IGZsb2F0IG1GcmVzbmVsQmlhcyA9IDAuMDg7XFxuXFx0XFx0Y29uc3QgZmxvYXQgbUZyZXNuZWxTY2FsZSA9IDAuMztcXG5cXHRcXHRjb25zdCBmbG9hdCBtRnJlc25lbFBvd2VyID0gNS4wO1xcblxcblxcdFxcdGZsb2F0IGZyZXNuZWwgPSBtRnJlc25lbEJpYXMgKyBtRnJlc25lbFNjYWxlICogcG93KCAxLjAgKyBkb3QoIG5vcm1hbGl6ZSggLXZpZXdQb3NpdGlvbiApLCBub3JtYWwgKSwgbUZyZXNuZWxQb3dlciApO1xcblxcdFxcdCovXFxuXFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJOb3JtYWxpemF0aW9uID0gKCBzaGluaW5lc3MgKyAyLjAgKSAvIDguMDtcXG5cXG5cXHRcXHQvLyBcXHRcXHRkaXJTcGVjdWxhciArPSBzcGVjdWxhciAqIGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgaSBdICogZGlyU3BlY3VsYXJXZWlnaHQgKiBkaXJEaWZmdXNlV2VpZ2h0ICogc3BlY3VsYXJOb3JtYWxpemF0aW9uICogZnJlc25lbDtcXG5cXG5cXHRcXHR2ZWMzIHNjaGxpY2sgPSBzcGVjdWxhciArIHZlYzMoIDEuMCAtIHNwZWN1bGFyICkgKiBwb3coIG1heCggMS4wIC0gZG90KCBkaXJWZWN0b3IsIGRpckhhbGZWZWN0b3IgKSwgMC4wICksIDUuMCApO1xcblxcdFxcdHRvdGFsU3BlY3VsYXJMaWdodCArPSBzY2hsaWNrICogZGlyZWN0aW9uYWxMaWdodENvbG9yWyBpIF0gKiBkaXJTcGVjdWxhcldlaWdodCAqIGRpckRpZmZ1c2VXZWlnaHQgKiBzcGVjdWxhck5vcm1hbGl6YXRpb247XFxuXFxuXFxuXFx0fVxcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfSEVNSV9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBNQVhfSEVNSV9MSUdIVFM7IGkgKysgKSB7XFxuXFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBoZW1pc3BoZXJlTGlnaHREaXJlY3Rpb25bIGkgXSwgdmlld01hdHJpeCApO1xcblxcblxcdFxcdC8vIGRpZmZ1c2VcXG5cXG5cXHRcXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodCA9IDAuNSAqIGRvdFByb2R1Y3QgKyAwLjU7XFxuXFxuXFx0XFx0dmVjMyBoZW1pQ29sb3IgPSBtaXgoIGhlbWlzcGhlcmVMaWdodEdyb3VuZENvbG9yWyBpIF0sIGhlbWlzcGhlcmVMaWdodFNreUNvbG9yWyBpIF0sIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFxuXFx0XFx0dG90YWxEaWZmdXNlTGlnaHQgKz0gaGVtaUNvbG9yO1xcblxcblxcdFxcdC8vIHNwZWN1bGFyIChza3kgbGlnaHQpXFxuXFxuXFx0XFx0dmVjMyBoZW1pSGFsZlZlY3RvclNreSA9IG5vcm1hbGl6ZSggbFZlY3RvciArIHZpZXdQb3NpdGlvbiApO1xcblxcdFxcdGZsb2F0IGhlbWlEb3ROb3JtYWxIYWxmU2t5ID0gMC41ICogZG90KCBub3JtYWwsIGhlbWlIYWxmVmVjdG9yU2t5ICkgKyAwLjU7XFxuXFx0XFx0ZmxvYXQgaGVtaVNwZWN1bGFyV2VpZ2h0U2t5ID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBtYXgoIGhlbWlEb3ROb3JtYWxIYWxmU2t5LCAwLjAgKSwgc2hpbmluZXNzICksIDAuMCApO1xcblxcblxcdFxcdC8vIHNwZWN1bGFyIChncm91bmQgbGlnaHQpXFxuXFxuXFx0XFx0dmVjMyBsVmVjdG9yR3JvdW5kID0gLWxWZWN0b3I7XFxuXFxuXFx0XFx0dmVjMyBoZW1pSGFsZlZlY3Rvckdyb3VuZCA9IG5vcm1hbGl6ZSggbFZlY3Rvckdyb3VuZCArIHZpZXdQb3NpdGlvbiApO1xcblxcdFxcdGZsb2F0IGhlbWlEb3ROb3JtYWxIYWxmR3JvdW5kID0gMC41ICogZG90KCBub3JtYWwsIGhlbWlIYWxmVmVjdG9yR3JvdW5kICkgKyAwLjU7XFxuXFx0XFx0ZmxvYXQgaGVtaVNwZWN1bGFyV2VpZ2h0R3JvdW5kID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBtYXgoIGhlbWlEb3ROb3JtYWxIYWxmR3JvdW5kLCAwLjAgKSwgc2hpbmluZXNzICksIDAuMCApO1xcblxcblxcdFxcdGZsb2F0IGRvdFByb2R1Y3RHcm91bmQgPSBkb3QoIG5vcm1hbCwgbFZlY3Rvckdyb3VuZCApO1xcblxcblxcdFxcdGZsb2F0IHNwZWN1bGFyTm9ybWFsaXphdGlvbiA9ICggc2hpbmluZXNzICsgMi4wICkgLyA4LjA7XFxuXFxuXFx0XFx0dmVjMyBzY2hsaWNrU2t5ID0gc3BlY3VsYXIgKyB2ZWMzKCAxLjAgLSBzcGVjdWxhciApICogcG93KCBtYXgoIDEuMCAtIGRvdCggbFZlY3RvciwgaGVtaUhhbGZWZWN0b3JTa3kgKSwgMC4wICksIDUuMCApO1xcblxcdFxcdHZlYzMgc2NobGlja0dyb3VuZCA9IHNwZWN1bGFyICsgdmVjMyggMS4wIC0gc3BlY3VsYXIgKSAqIHBvdyggbWF4KCAxLjAgLSBkb3QoIGxWZWN0b3JHcm91bmQsIGhlbWlIYWxmVmVjdG9yR3JvdW5kICksIDAuMCApLCA1LjAgKTtcXG5cXHRcXHR0b3RhbFNwZWN1bGFyTGlnaHQgKz0gaGVtaUNvbG9yICogc3BlY3VsYXJOb3JtYWxpemF0aW9uICogKCBzY2hsaWNrU2t5ICogaGVtaVNwZWN1bGFyV2VpZ2h0U2t5ICogbWF4KCBkb3RQcm9kdWN0LCAwLjAgKSArIHNjaGxpY2tHcm91bmQgKiBoZW1pU3BlY3VsYXJXZWlnaHRHcm91bmQgKiBtYXgoIGRvdFByb2R1Y3RHcm91bmQsIDAuMCApICk7XFxuXFxuXFx0fVxcblxcbiNlbmRpZlxcblxcbiNpZmRlZiBNRVRBTFxcblxcblxcdG91dGdvaW5nTGlnaHQgKz0gZGlmZnVzZUNvbG9yLnJnYiAqICggdG90YWxEaWZmdXNlTGlnaHQgKyBhbWJpZW50TGlnaHRDb2xvciApICogc3BlY3VsYXIgKyB0b3RhbFNwZWN1bGFyTGlnaHQgKyBlbWlzc2l2ZTtcXG5cXG4jZWxzZVxcblxcblxcdG91dGdvaW5nTGlnaHQgKz0gZGlmZnVzZUNvbG9yLnJnYiAqICggdG90YWxEaWZmdXNlTGlnaHQgKyBhbWJpZW50TGlnaHRDb2xvciApICsgdG90YWxTcGVjdWxhckxpZ2h0ICsgZW1pc3NpdmU7XFxuXFxuI2VuZGlmXFxuXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLmZvZ19wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9GT0dcXG5cXG5cXHR1bmlmb3JtIHZlYzMgZm9nQ29sb3I7XFxuXFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBmb2dEZW5zaXR5O1xcblxcblxcdCNlbHNlXFxuXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBmb2dOZWFyO1xcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRmFyO1xcblxcdCNlbmRpZlxcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLm1vcnBobm9ybWFsX3ZlcnRleD1cIiNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFxuXFx0dmVjMyBtb3JwaGVkTm9ybWFsID0gdmVjMyggMC4wICk7XFxuXFxuXFx0bW9ycGhlZE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMCAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0bW9ycGhlZE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMSAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAxIF07XFxuXFx0bW9ycGhlZE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMiAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0bW9ycGhlZE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMyAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuXFxuXFx0bW9ycGhlZE5vcm1hbCArPSBub3JtYWw7XFxuXFxuI2VuZGlmXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXG5cXHR1bmlmb3JtIGZsb2F0IHJlZmxlY3Rpdml0eTtcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcXG5cXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxcblxcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcblxcdCNlbHNlXFxuXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZSZWZsZWN0O1xcblxcblxcdCNlbmRpZlxcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50PVwiI2lmIGRlZmluZWQoVVNFX0xPR0RFUFRIQlVGKSAmJiBkZWZpbmVkKFVTRV9MT0dERVBUSEJVRl9FWFQpXFxuXFxuXFx0Z2xfRnJhZ0RlcHRoRVhUID0gbG9nMih2RnJhZ0RlcHRoKSAqIGxvZ0RlcHRoQnVmRkMgKiAwLjU7XFxuXFxuI2VuZGlmXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLm5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9OT1JNQUxNQVBcXG5cXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBub3JtYWxNYXA7XFxuXFx0dW5pZm9ybSB2ZWMyIG5vcm1hbFNjYWxlO1xcblxcblxcdC8vIFBlci1QaXhlbCBUYW5nZW50IFNwYWNlIE5vcm1hbCBNYXBwaW5nXFxuXFx0Ly8gaHR0cDovL2hhY2tzb2ZsaWZlLmJsb2dzcG90LmNoLzIwMDkvMTEvcGVyLXBpeGVsLXRhbmdlbnQtc3BhY2Utbm9ybWFsLW1hcHBpbmcuaHRtbFxcblxcblxcdHZlYzMgcGVydHVyYk5vcm1hbDJBcmIoIHZlYzMgZXllX3BvcywgdmVjMyBzdXJmX25vcm0gKSB7XFxuXFxuXFx0XFx0dmVjMyBxMCA9IGRGZHgoIGV5ZV9wb3MueHl6ICk7XFxuXFx0XFx0dmVjMyBxMSA9IGRGZHkoIGV5ZV9wb3MueHl6ICk7XFxuXFx0XFx0dmVjMiBzdDAgPSBkRmR4KCB2VXYuc3QgKTtcXG5cXHRcXHR2ZWMyIHN0MSA9IGRGZHkoIHZVdi5zdCApO1xcblxcblxcdFxcdHZlYzMgUyA9IG5vcm1hbGl6ZSggcTAgKiBzdDEudCAtIHExICogc3QwLnQgKTtcXG5cXHRcXHR2ZWMzIFQgPSBub3JtYWxpemUoIC1xMCAqIHN0MS5zICsgcTEgKiBzdDAucyApO1xcblxcdFxcdHZlYzMgTiA9IG5vcm1hbGl6ZSggc3VyZl9ub3JtICk7XFxuXFxuXFx0XFx0dmVjMyBtYXBOID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHRcXHRtYXBOLnh5ID0gbm9ybWFsU2NhbGUgKiBtYXBOLnh5O1xcblxcdFxcdG1hdDMgdHNuID0gbWF0MyggUywgVCwgTiApO1xcblxcdFxcdHJldHVybiBub3JtYWxpemUoIHRzbiAqIG1hcE4gKTtcXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19waG9uZ19wYXJzX3ZlcnRleD1cIiNpZiBNQVhfU1BPVF9MSUdIVFMgPiAwIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX0VOVk1BUCApXFxuXFxuXFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjI7XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbGlnaHRNYXA7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3ZlcnRleD1cIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFxuXFx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBNQVhfU0hBRE9XUzsgaSArKyApIHtcXG5cXG5cXHRcXHR2U2hhZG93Q29vcmRbIGkgXSA9IHNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcXG5cXG5cXHR9XFxuXFxuI2VuZGlmXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19waG9uZ192ZXJ0ZXg9XCIjaWYgTUFYX1NQT1RfTElHSFRTID4gMCB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9FTlZNQVAgKVxcblxcblxcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsubWFwX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9NQVBcXG5cXG5cXHR2ZWM0IHRleGVsQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdlV2ICk7XFxuXFxuXFx0dGV4ZWxDb2xvci54eXogPSBpbnB1dFRvTGluZWFyKCB0ZXhlbENvbG9yLnh5eiApO1xcblxcblxcdGRpZmZ1c2VDb2xvciAqPSB0ZXhlbENvbG9yO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX3ZlcnRleD1cIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXG5cXHR2VXYyID0gdXYyO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJ0aWNsZV9mcmFnbWVudD1cIiNpZmRlZiBVU0VfTUFQXFxuXFxuXFx0ZGlmZnVzZUNvbG9yICo9IHRleHR1cmUyRCggbWFwLCB2ZWMyKCBnbF9Qb2ludENvb3JkLngsIDEuMCAtIGdsX1BvaW50Q29vcmQueSApICogb2Zmc2V0UmVwZWF0Lnp3ICsgb2Zmc2V0UmVwZWF0Lnh5ICk7XFxuXFxuI2VuZGlmXFxuXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0NPTE9SXFxuXFxuXFx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl92ZXJ0ZXg9XCIjaWZkZWYgVVNFX0NPTE9SXFxuXFxuXFx0dkNvbG9yLnh5eiA9IGlucHV0VG9MaW5lYXIoIGNvbG9yLnh5eiApO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3ZlcnRleD1cIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXG5cXHQjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcblxcdHZlYzQgc2tpblZlcnRleCA9IGJpbmRNYXRyaXggKiB2ZWM0KCBtb3JwaGVkLCAxLjAgKTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdHZlYzQgc2tpblZlcnRleCA9IGJpbmRNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxuXFxuXFx0I2VuZGlmXFxuXFxuXFx0dmVjNCBza2lubmVkID0gdmVjNCggMC4wICk7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WCAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lng7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WSAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lnk7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WiAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lno7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0VyAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lnc7XFxuXFx0c2tpbm5lZCAgPSBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5uZWQ7XFxuXFxuI2VuZGlmXFxuXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX3ZlcnRleD1cIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgISBkZWZpbmVkKCBVU0VfQlVNUE1BUCApICYmICEgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApICYmICEgZGVmaW5lZCggUEhPTkcgKVxcblxcblxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXG5cXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5saW5lYXJfdG9fZ2FtbWFfZnJhZ21lbnQ9XCJcXG5cXHRvdXRnb2luZ0xpZ2h0ID0gbGluZWFyVG9PdXRwdXQoIG91dGdvaW5nTGlnaHQgKTtcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX3ZlcnRleD1cIiNpZmRlZiBVU0VfQ09MT1JcXG5cXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19sYW1iZXJ0X3BhcnNfdmVydGV4PVwidW5pZm9ybSB2ZWMzIGFtYmllbnRMaWdodENvbG9yO1xcblxcbiNpZiBNQVhfRElSX0xJR0hUUyA+IDBcXG5cXG5cXHR1bmlmb3JtIHZlYzMgZGlyZWN0aW9uYWxMaWdodENvbG9yWyBNQVhfRElSX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyBNQVhfRElSX0xJR0hUUyBdO1xcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfSEVNSV9MSUdIVFMgPiAwXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIGhlbWlzcGhlcmVMaWdodFNreUNvbG9yWyBNQVhfSEVNSV9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgaGVtaXNwaGVyZUxpZ2h0R3JvdW5kQ29sb3JbIE1BWF9IRU1JX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBoZW1pc3BoZXJlTGlnaHREaXJlY3Rpb25bIE1BWF9IRU1JX0xJR0hUUyBdO1xcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfUE9JTlRfTElHSFRTID4gMFxcblxcblxcdHVuaWZvcm0gdmVjMyBwb2ludExpZ2h0Q29sb3JbIE1BWF9QT0lOVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgcG9pbnRMaWdodFBvc2l0aW9uWyBNQVhfUE9JTlRfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBwb2ludExpZ2h0RGlzdGFuY2VbIE1BWF9QT0lOVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHBvaW50TGlnaHREZWNheVsgTUFYX1BPSU5UX0xJR0hUUyBdO1xcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfU1BPVF9MSUdIVFMgPiAwXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIHNwb3RMaWdodENvbG9yWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgc3BvdExpZ2h0UG9zaXRpb25bIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBzcG90TGlnaHREaXJlY3Rpb25bIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0RGlzdGFuY2VbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0QW5nbGVDb3NbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0RXhwb25lbnRbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0RGVjYXlbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcbiNlbmRpZlxcblxcbiNpZmRlZiBXUkFQX0FST1VORFxcblxcblxcdHVuaWZvcm0gdmVjMyB3cmFwUkdCO1xcblxcbiNlbmRpZlxcblwiO1xyXG5USFJFRS5TaGFkZXJDaHVuay5tYXBfcGFyc192ZXJ0ZXg9XCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApXFxuXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjtcXG5cXHR1bmlmb3JtIHZlYzQgb2Zmc2V0UmVwZWF0O1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmVudm1hcF9mcmFnbWVudD1cIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HIClcXG5cXG5cXHRcXHR2ZWMzIGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB2V29ybGRQb3NpdGlvbiAtIGNhbWVyYVBvc2l0aW9uICk7XFxuXFxuXFx0XFx0Ly8gVHJhbnNmb3JtaW5nIE5vcm1hbCBWZWN0b3JzIHdpdGggdGhlIEludmVyc2UgVHJhbnNmb3JtYXRpb25cXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXG5cXHRcXHQjZWxzZVxcblxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZnJhY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFxuXFx0XFx0I2VuZGlmXFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSB2UmVmbGVjdDtcXG5cXG5cXHQjZW5kaWZcXG5cXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0ZmxvYXQgZmxpcE5vcm1hbCA9ICggLTEuMCArIDIuMCAqIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBmbGlwTm9ybWFsID0gMS4wO1xcblxcdCNlbmRpZlxcblxcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIGZsaXBOb3JtYWwgKiB2ZWMzKCBmbGlwRW52TWFwICogcmVmbGVjdFZlYy54LCByZWZsZWN0VmVjLnl6ICkgKTtcXG5cXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9FUVVJUkVDIClcXG5cXHRcXHR2ZWMyIHNhbXBsZVVWO1xcblxcdFxcdHNhbXBsZVVWLnkgPSBzYXR1cmF0ZSggZmxpcE5vcm1hbCAqIHJlZmxlY3RWZWMueSAqIDAuNSArIDAuNSApO1xcblxcdFxcdHNhbXBsZVVWLnggPSBhdGFuKCBmbGlwTm9ybWFsICogcmVmbGVjdFZlYy56LCBmbGlwTm9ybWFsICogcmVmbGVjdFZlYy54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHNhbXBsZVVWICk7XFxuXFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfU1BIRVJFIClcXG5cXHRcXHR2ZWMzIHJlZmxlY3RWaWV3ID0gZmxpcE5vcm1hbCAqIG5vcm1hbGl6ZSgodmlld01hdHJpeCAqIHZlYzQoIHJlZmxlY3RWZWMsIDAuMCApKS54eXogKyB2ZWMzKDAuMCwwLjAsMS4wKSk7XFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSApO1xcblxcdCNlbmRpZlxcblxcblxcdGVudkNvbG9yLnh5eiA9IGlucHV0VG9MaW5lYXIoIGVudkNvbG9yLnh5eiApO1xcblxcblxcdCNpZmRlZiBFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcXG5cXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBvdXRnb2luZ0xpZ2h0ICogZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX01JWCApXFxuXFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX0FERCApXFxuXFxuXFx0XFx0b3V0Z29pbmdMaWdodCArPSBlbnZDb2xvci54eXogKiBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5O1xcblxcblxcdCNlbmRpZlxcblxcbiNlbmRpZlxcblwiO1xyXG5USFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleD1cIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXG5cXHRnbF9Qb3NpdGlvbi56ID0gbG9nMihtYXgoIEVQU0lMT04sIGdsX1Bvc2l0aW9uLncgKyAxLjAgKSkgKiBsb2dEZXB0aEJ1ZkZDO1xcblxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFxuXFx0XFx0dkZyYWdEZXB0aCA9IDEuMCArIGdsX1Bvc2l0aW9uLnc7XFxuXFxuI2Vsc2VcXG5cXG5cXHRcXHRnbF9Qb3NpdGlvbi56ID0gKGdsX1Bvc2l0aW9uLnogLSAxLjApICogZ2xfUG9zaXRpb24udztcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF9wYXJzX3ZlcnRleD1cIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFxuXFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFxuXFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDggXTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFxuXFx0I2VuZGlmXFxuXFxuI2VuZGlmXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLnNwZWN1bGFybWFwX2ZyYWdtZW50PVwiZmxvYXQgc3BlY3VsYXJTdHJlbmd0aDtcXG5cXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFxuXFx0dmVjNCB0ZXhlbFNwZWN1bGFyID0gdGV4dHVyZTJEKCBzcGVjdWxhck1hcCwgdlV2ICk7XFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IHRleGVsU3BlY3VsYXIucjtcXG5cXG4jZWxzZVxcblxcblxcdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsuZm9nX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9GT0dcXG5cXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcblxcdFxcdGZsb2F0IGRlcHRoID0gZ2xfRnJhZ0RlcHRoRVhUIC8gZ2xfRnJhZ0Nvb3JkLnc7XFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHRcXHRmbG9hdCBkZXB0aCA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7XFxuXFxuXFx0I2VuZGlmXFxuXFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gZXhwMiggLSBzcXVhcmUoIGZvZ0RlbnNpdHkgKSAqIHNxdWFyZSggZGVwdGggKSAqIExPRzIgKTtcXG5cXHRcXHRmb2dGYWN0b3IgPSB3aGl0ZUNvbXBsaW1lbnQoIGZvZ0ZhY3RvciApO1xcblxcblxcdCNlbHNlXFxuXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBkZXB0aCApO1xcblxcblxcdCNlbmRpZlxcblxcdFxcblxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIGZvZ0NvbG9yLCBmb2dGYWN0b3IgKTtcXG5cXG4jZW5kaWZcIjtcclxuVEhSRUUuU2hhZGVyQ2h1bmsuYnVtcG1hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9CVU1QTUFQXFxuXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYnVtcE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGJ1bXBTY2FsZTtcXG5cXG5cXHQvLyBEZXJpdmF0aXZlIG1hcHMgLSBidW1wIG1hcHBpbmcgdW5wYXJhbWV0cml6ZWQgc3VyZmFjZXMgYnkgTW9ydGVuIE1pa2tlbHNlblxcblxcdC8vIGh0dHA6Ly9tbWlra2Vsc2VuM2QuYmxvZ3Nwb3Quc2svMjAxMS8wNy9kZXJpdmF0aXZlLW1hcHMuaHRtbFxcblxcblxcdC8vIEV2YWx1YXRlIHRoZSBkZXJpdmF0aXZlIG9mIHRoZSBoZWlnaHQgdy5yLnQuIHNjcmVlbi1zcGFjZSB1c2luZyBmb3J3YXJkIGRpZmZlcmVuY2luZyAobGlzdGluZyAyKVxcblxcblxcdHZlYzIgZEhkeHlfZndkKCkge1xcblxcblxcdFxcdHZlYzIgZFNUZHggPSBkRmR4KCB2VXYgKTtcXG5cXHRcXHR2ZWMyIGRTVGR5ID0gZEZkeSggdlV2ICk7XFxuXFxuXFx0XFx0ZmxvYXQgSGxsID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKS54O1xcblxcdFxcdGZsb2F0IGRCeCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHggKS54IC0gSGxsO1xcblxcdFxcdGZsb2F0IGRCeSA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHkgKS54IC0gSGxsO1xcblxcblxcdFxcdHJldHVybiB2ZWMyKCBkQngsIGRCeSApO1xcblxcblxcdH1cXG5cXG5cXHR2ZWMzIHBlcnR1cmJOb3JtYWxBcmIoIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIGRIZHh5ICkge1xcblxcblxcdFxcdHZlYzMgdlNpZ21hWCA9IGRGZHgoIHN1cmZfcG9zICk7XFxuXFx0XFx0dmVjMyB2U2lnbWFZID0gZEZkeSggc3VyZl9wb3MgKTtcXG5cXHRcXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xcdFxcdC8vIG5vcm1hbGl6ZWRcXG5cXG5cXHRcXHR2ZWMzIFIxID0gY3Jvc3MoIHZTaWdtYVksIHZOICk7XFxuXFx0XFx0dmVjMyBSMiA9IGNyb3NzKCB2TiwgdlNpZ21hWCApO1xcblxcblxcdFxcdGZsb2F0IGZEZXQgPSBkb3QoIHZTaWdtYVgsIFIxICk7XFxuXFxuXFx0XFx0dmVjMyB2R3JhZCA9IHNpZ24oIGZEZXQgKSAqICggZEhkeHkueCAqIFIxICsgZEhkeHkueSAqIFIyICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggYWJzKCBmRGV0ICkgKiBzdXJmX25vcm0gLSB2R3JhZCApO1xcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cIjtcclxuVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdG5vcm1hbF92ZXJ0ZXg9XCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFxuXFx0dmVjMyBvYmplY3ROb3JtYWwgPSBza2lubmVkTm9ybWFsLnh5ejtcXG5cXG4jZWxpZiBkZWZpbmVkKCBVU0VfTU9SUEhOT1JNQUxTIClcXG5cXG5cXHR2ZWMzIG9iamVjdE5vcm1hbCA9IG1vcnBoZWROb3JtYWw7XFxuXFxuI2Vsc2VcXG5cXG5cXHR2ZWMzIG9iamVjdE5vcm1hbCA9IG5vcm1hbDtcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgRkxJUF9TSURFRFxcblxcblxcdG9iamVjdE5vcm1hbCA9IC1vYmplY3ROb3JtYWw7XFxuXFxuI2VuZGlmXFxuXFxudmVjMyB0cmFuc2Zvcm1lZE5vcm1hbCA9IG5vcm1hbE1hdHJpeCAqIG9iamVjdE5vcm1hbDtcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD1cInVuaWZvcm0gdmVjMyBhbWJpZW50TGlnaHRDb2xvcjtcXG5cXG4jaWYgTUFYX0RJUl9MSUdIVFMgPiAwXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgTUFYX0RJUl9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvblsgTUFYX0RJUl9MSUdIVFMgXTtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX0hFTUlfTElHSFRTID4gMFxcblxcblxcdHVuaWZvcm0gdmVjMyBoZW1pc3BoZXJlTGlnaHRTa3lDb2xvclsgTUFYX0hFTUlfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIGhlbWlzcGhlcmVMaWdodEdyb3VuZENvbG9yWyBNQVhfSEVNSV9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgaGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uWyBNQVhfSEVNSV9MSUdIVFMgXTtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX1BPSU5UX0xJR0hUUyA+IDBcXG5cXG5cXHR1bmlmb3JtIHZlYzMgcG9pbnRMaWdodENvbG9yWyBNQVhfUE9JTlRfTElHSFRTIF07XFxuXFxuXFx0dW5pZm9ybSB2ZWMzIHBvaW50TGlnaHRQb3NpdGlvblsgTUFYX1BPSU5UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgcG9pbnRMaWdodERpc3RhbmNlWyBNQVhfUE9JTlRfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBwb2ludExpZ2h0RGVjYXlbIE1BWF9QT0lOVF9MSUdIVFMgXTtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX1NQT1RfTElHSFRTID4gMFxcblxcblxcdHVuaWZvcm0gdmVjMyBzcG90TGlnaHRDb2xvclsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIHNwb3RMaWdodFBvc2l0aW9uWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgc3BvdExpZ2h0RGlyZWN0aW9uWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNwb3RMaWdodEFuZ2xlQ29zWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNwb3RMaWdodEV4cG9uZW50WyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNwb3RMaWdodERpc3RhbmNlWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNwb3RMaWdodERlY2F5WyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX1NQT1RfTElHSFRTID4gMCB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9FTlZNQVAgKVxcblxcblxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgV1JBUF9BUk9VTkRcXG5cXG5cXHR1bmlmb3JtIHZlYzMgd3JhcFJHQjtcXG5cXG4jZW5kaWZcXG5cXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuXFxuI2VuZGlmXFxuXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLnNraW5iYXNlX3ZlcnRleD1cIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXG5cXHRtYXQ0IGJvbmVNYXRYID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnggKTtcXG5cXHRtYXQ0IGJvbmVNYXRZID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnkgKTtcXG5cXHRtYXQ0IGJvbmVNYXRaID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnogKTtcXG5cXHRtYXQ0IGJvbmVNYXRXID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LncgKTtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5tYXBfdmVydGV4PVwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfU1BFQ1VMQVJNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxcblxcblxcdHZVdiA9IHV2ICogb2Zmc2V0UmVwZWF0Lnp3ICsgb2Zmc2V0UmVwZWF0Lnh5O1xcblxcbiNlbmRpZlwiO1xyXG5USFJFRS5TaGFkZXJDaHVuay5saWdodG1hcF9mcmFnbWVudD1cIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXG5cXHRvdXRnb2luZ0xpZ2h0ICo9IGRpZmZ1c2VDb2xvci54eXogKiB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICkueHl6O1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX3ZlcnRleD1cIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFxuXFx0dmFyeWluZyB2ZWM0IHZTaGFkb3dDb29yZFsgTUFYX1NIQURPV1MgXTtcXG5cXHR1bmlmb3JtIG1hdDQgc2hhZG93TWF0cml4WyBNQVhfU0hBRE9XUyBdO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmNvbG9yX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9DT0xPUlxcblxcblxcdGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkNvbG9yO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3ZlcnRleD1cIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFxuXFx0dmVjMyBtb3JwaGVkID0gdmVjMyggMC4wICk7XFxuXFx0bW9ycGhlZCArPSAoIG1vcnBoVGFyZ2V0MCAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcXG5cXHRtb3JwaGVkICs9ICggbW9ycGhUYXJnZXQxIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdG1vcnBoZWQgKz0gKCBtb3JwaFRhcmdldDIgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0bW9ycGhlZCArPSAoIG1vcnBoVGFyZ2V0MyAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcXG5cXG5cXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXG5cXHRtb3JwaGVkICs9ICggbW9ycGhUYXJnZXQ0IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNCBdO1xcblxcdG1vcnBoZWQgKz0gKCBtb3JwaFRhcmdldDUgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA1IF07XFxuXFx0bW9ycGhlZCArPSAoIG1vcnBoVGFyZ2V0NiAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDYgXTtcXG5cXHRtb3JwaGVkICs9ICggbW9ycGhUYXJnZXQ3IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNyBdO1xcblxcblxcdCNlbmRpZlxcblxcblxcdG1vcnBoZWQgKz0gcG9zaXRpb247XFxuXFxuI2VuZGlmXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLmVudm1hcF92ZXJ0ZXg9XCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmICEgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSAmJiAhIGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSAmJiAhIGRlZmluZWQoIFBIT05HIClcXG5cXG5cXHR2ZWMzIHdvcmxkTm9ybWFsID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBvYmplY3ROb3JtYWwsIG1vZGVsTWF0cml4ICk7XFxuXFxuXFx0dmVjMyBjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggd29ybGRQb3NpdGlvbi54eXogLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcblxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFxuXFx0XFx0dlJlZmxlY3QgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdHZSZWZsZWN0ID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtcclxuVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXG5cXHQjaWZkZWYgU0hBRE9XTUFQX0RFQlVHXFxuXFxuXFx0XFx0dmVjMyBmcnVzdHVtQ29sb3JzWzNdO1xcblxcdFxcdGZydXN0dW1Db2xvcnNbMF0gPSB2ZWMzKCAxLjAsIDAuNSwgMC4wICk7XFxuXFx0XFx0ZnJ1c3R1bUNvbG9yc1sxXSA9IHZlYzMoIDAuMCwgMS4wLCAwLjggKTtcXG5cXHRcXHRmcnVzdHVtQ29sb3JzWzJdID0gdmVjMyggMC4wLCAwLjUsIDEuMCApO1xcblxcblxcdCNlbmRpZlxcblxcblxcdCNpZmRlZiBTSEFET1dNQVBfQ0FTQ0FERVxcblxcblxcdFxcdGludCBpbkZydXN0dW1Db3VudCA9IDA7XFxuXFxuXFx0I2VuZGlmXFxuXFxuXFx0ZmxvYXQgZkRlcHRoO1xcblxcdHZlYzMgc2hhZG93Q29sb3IgPSB2ZWMzKCAxLjAgKTtcXG5cXG5cXHRmb3IoIGludCBpID0gMDsgaSA8IE1BWF9TSEFET1dTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzMgc2hhZG93Q29vcmQgPSB2U2hhZG93Q29vcmRbIGkgXS54eXogLyB2U2hhZG93Q29vcmRbIGkgXS53O1xcblxcblxcdFxcdFxcdFxcdC8vIGlmICggc29tZXRoaW5nICYmIHNvbWV0aGluZyApIGJyZWFrcyBBVEkgT3BlbkdMIHNoYWRlciBjb21waWxlclxcblxcdFxcdFxcdFxcdC8vIGlmICggYWxsKCBzb21ldGhpbmcsIHNvbWV0aGluZyApICkgdXNpbmcgdGhpcyBpbnN0ZWFkXFxuXFxuXFx0XFx0YnZlYzQgaW5GcnVzdHVtVmVjID0gYnZlYzQgKCBzaGFkb3dDb29yZC54ID49IDAuMCwgc2hhZG93Q29vcmQueCA8PSAxLjAsIHNoYWRvd0Nvb3JkLnkgPj0gMC4wLCBzaGFkb3dDb29yZC55IDw9IDEuMCApO1xcblxcdFxcdGJvb2wgaW5GcnVzdHVtID0gYWxsKCBpbkZydXN0dW1WZWMgKTtcXG5cXG5cXHRcXHRcXHRcXHQvLyBkb24ndCBzaGFkb3cgcGl4ZWxzIG91dHNpZGUgb2YgbGlnaHQgZnJ1c3R1bVxcblxcdFxcdFxcdFxcdC8vIHVzZSBqdXN0IGZpcnN0IGZydXN0dW0gKGZvciBjYXNjYWRlcylcXG5cXHRcXHRcXHRcXHQvLyBkb24ndCBzaGFkb3cgcGl4ZWxzIGJlaGluZCBmYXIgcGxhbmUgb2YgbGlnaHQgZnJ1c3R1bVxcblxcblxcdFxcdCNpZmRlZiBTSEFET1dNQVBfQ0FTQ0FERVxcblxcblxcdFxcdFxcdGluRnJ1c3R1bUNvdW50ICs9IGludCggaW5GcnVzdHVtICk7XFxuXFx0XFx0XFx0YnZlYzMgZnJ1c3R1bVRlc3RWZWMgPSBidmVjMyggaW5GcnVzdHVtLCBpbkZydXN0dW1Db3VudCA9PSAxLCBzaGFkb3dDb29yZC56IDw9IDEuMCApO1xcblxcblxcdFxcdCNlbHNlXFxuXFxuXFx0XFx0XFx0YnZlYzIgZnJ1c3R1bVRlc3RWZWMgPSBidmVjMiggaW5GcnVzdHVtLCBzaGFkb3dDb29yZC56IDw9IDEuMCApO1xcblxcblxcdFxcdCNlbmRpZlxcblxcblxcdFxcdGJvb2wgZnJ1c3R1bVRlc3QgPSBhbGwoIGZydXN0dW1UZXN0VmVjICk7XFxuXFxuXFx0XFx0aWYgKCBmcnVzdHVtVGVzdCApIHtcXG5cXG5cXHRcXHRcXHRzaGFkb3dDb29yZC56ICs9IHNoYWRvd0JpYXNbIGkgXTtcXG5cXG5cXHRcXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGIClcXG5cXG5cXHRcXHRcXHRcXHRcXHRcXHQvLyBQZXJjZW50YWdlLWNsb3NlIGZpbHRlcmluZ1xcblxcdFxcdFxcdFxcdFxcdFxcdC8vICg5IHBpeGVsIGtlcm5lbClcXG5cXHRcXHRcXHRcXHRcXHRcXHQvLyBodHRwOi8vZmFiaWVuc2FuZ2xhcmQubmV0L3NoYWRvd21hcHBpbmdQQ0YvXFxuXFxuXFx0XFx0XFx0XFx0ZmxvYXQgc2hhZG93ID0gMC4wO1xcblxcblxcdFxcdC8qXFxuXFx0XFx0XFx0XFx0XFx0XFx0Ly8gbmVzdGVkIGxvb3BzIGJyZWFrcyBzaGFkZXIgY29tcGlsZXIgLyB2YWxpZGF0b3Igb24gc29tZSBBVEkgY2FyZHMgd2hlbiB1c2luZyBPcGVuR0xcXG5cXHRcXHRcXHRcXHRcXHRcXHQvLyBtdXN0IGVucm9sbCBsb29wIG1hbnVhbGx5XFxuXFxuXFx0XFx0XFx0XFx0Zm9yICggZmxvYXQgeSA9IC0xLjI1OyB5IDw9IDEuMjU7IHkgKz0gMS4yNSApXFxuXFx0XFx0XFx0XFx0XFx0Zm9yICggZmxvYXQgeCA9IC0xLjI1OyB4IDw9IDEuMjU7IHggKz0gMS4yNSApIHtcXG5cXG5cXHRcXHRcXHRcXHRcXHRcXHR2ZWM0IHJnYmFEZXB0aCA9IHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHZlYzIoIHggKiB4UGl4ZWxPZmZzZXQsIHkgKiB5UGl4ZWxPZmZzZXQgKSArIHNoYWRvd0Nvb3JkLnh5ICk7XFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0Ly8gZG9lc24ndCBzZWVtIHRvIHByb2R1Y2UgYW55IG5vdGljZWFibGUgdmlzdWFsIGRpZmZlcmVuY2UgY29tcGFyZWQgdG8gc2ltcGxlIHRleHR1cmUyRCBsb29rdXBcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQvL3ZlYzQgcmdiYURlcHRoID0gdGV4dHVyZTJEUHJvaiggc2hhZG93TWFwWyBpIF0sIHZlYzQoIHZTaGFkb3dDb29yZFsgaSBdLncgKiAoIHZlYzIoIHggKiB4UGl4ZWxPZmZzZXQsIHkgKiB5UGl4ZWxPZmZzZXQgKSArIHNoYWRvd0Nvb3JkLnh5ICksIDAuMDUsIHZTaGFkb3dDb29yZFsgaSBdLncgKSApO1xcblxcblxcdFxcdFxcdFxcdFxcdFxcdGZsb2F0IGZEZXB0aCA9IHVucGFja0RlcHRoKCByZ2JhRGVwdGggKTtcXG5cXG5cXHRcXHRcXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKVxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHNoYWRvdyArPSAxLjA7XFxuXFxuXFx0XFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdFxcdHNoYWRvdyAvPSA5LjA7XFxuXFxuXFx0XFx0Ki9cXG5cXG5cXHRcXHRcXHRcXHRjb25zdCBmbG9hdCBzaGFkb3dEZWx0YSA9IDEuMCAvIDkuMDtcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCB4UGl4ZWxPZmZzZXQgPSAxLjAgLyBzaGFkb3dNYXBTaXplWyBpIF0ueDtcXG5cXHRcXHRcXHRcXHRmbG9hdCB5UGl4ZWxPZmZzZXQgPSAxLjAgLyBzaGFkb3dNYXBTaXplWyBpIF0ueTtcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBkeDAgPSAtMS4yNSAqIHhQaXhlbE9mZnNldDtcXG5cXHRcXHRcXHRcXHRmbG9hdCBkeTAgPSAtMS4yNSAqIHlQaXhlbE9mZnNldDtcXG5cXHRcXHRcXHRcXHRmbG9hdCBkeDEgPSAxLjI1ICogeFBpeGVsT2Zmc2V0O1xcblxcdFxcdFxcdFxcdGZsb2F0IGR5MSA9IDEuMjUgKiB5UGl4ZWxPZmZzZXQ7XFxuXFxuXFx0XFx0XFx0XFx0ZkRlcHRoID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSApICk7XFxuXFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56ICkgc2hhZG93ICs9IHNoYWRvd0RlbHRhO1xcblxcblxcdFxcdFxcdFxcdGZEZXB0aCA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICkgKSApO1xcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApIHNoYWRvdyArPSBzaGFkb3dEZWx0YTtcXG5cXG5cXHRcXHRcXHRcXHRmRGVwdGggPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApICkgKTtcXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKSBzaGFkb3cgKz0gc2hhZG93RGVsdGE7XFxuXFxuXFx0XFx0XFx0XFx0ZkRlcHRoID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSApICk7XFxuXFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56ICkgc2hhZG93ICs9IHNoYWRvd0RlbHRhO1xcblxcblxcdFxcdFxcdFxcdGZEZXB0aCA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSApICk7XFxuXFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56ICkgc2hhZG93ICs9IHNoYWRvd0RlbHRhO1xcblxcblxcdFxcdFxcdFxcdGZEZXB0aCA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgMC4wICkgKSApO1xcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApIHNoYWRvdyArPSBzaGFkb3dEZWx0YTtcXG5cXG5cXHRcXHRcXHRcXHRmRGVwdGggPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApICkgKTtcXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKSBzaGFkb3cgKz0gc2hhZG93RGVsdGE7XFxuXFxuXFx0XFx0XFx0XFx0ZkRlcHRoID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSApICk7XFxuXFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56ICkgc2hhZG93ICs9IHNoYWRvd0RlbHRhO1xcblxcblxcdFxcdFxcdFxcdGZEZXB0aCA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkxICkgKSApO1xcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApIHNoYWRvdyArPSBzaGFkb3dEZWx0YTtcXG5cXG5cXHRcXHRcXHRcXHRzaGFkb3dDb2xvciA9IHNoYWRvd0NvbG9yICogdmVjMyggKCAxLjAgLSBzaGFkb3dEYXJrbmVzc1sgaSBdICogc2hhZG93ICkgKTtcXG5cXG5cXHRcXHRcXHQjZWxpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApXFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0Ly8gUGVyY2VudGFnZS1jbG9zZSBmaWx0ZXJpbmdcXG5cXHRcXHRcXHRcXHRcXHRcXHQvLyAoOSBwaXhlbCBrZXJuZWwpXFxuXFx0XFx0XFx0XFx0XFx0XFx0Ly8gaHR0cDovL2ZhYmllbnNhbmdsYXJkLm5ldC9zaGFkb3dtYXBwaW5nUENGL1xcblxcblxcdFxcdFxcdFxcdGZsb2F0IHNoYWRvdyA9IDAuMDtcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCB4UGl4ZWxPZmZzZXQgPSAxLjAgLyBzaGFkb3dNYXBTaXplWyBpIF0ueDtcXG5cXHRcXHRcXHRcXHRmbG9hdCB5UGl4ZWxPZmZzZXQgPSAxLjAgLyBzaGFkb3dNYXBTaXplWyBpIF0ueTtcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBkeDAgPSAtMS4wICogeFBpeGVsT2Zmc2V0O1xcblxcdFxcdFxcdFxcdGZsb2F0IGR5MCA9IC0xLjAgKiB5UGl4ZWxPZmZzZXQ7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHgxID0gMS4wICogeFBpeGVsT2Zmc2V0O1xcblxcdFxcdFxcdFxcdGZsb2F0IGR5MSA9IDEuMCAqIHlQaXhlbE9mZnNldDtcXG5cXG5cXHRcXHRcXHRcXHRtYXQzIHNoYWRvd0tlcm5lbDtcXG5cXHRcXHRcXHRcXHRtYXQzIGRlcHRoS2VybmVsO1xcblxcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWzBdWzBdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSApICk7XFxuXFx0XFx0XFx0XFx0ZGVwdGhLZXJuZWxbMF1bMV0gPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIDAuMCApICkgKTtcXG5cXHRcXHRcXHRcXHRkZXB0aEtlcm5lbFswXVsyXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWzFdWzBdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTAgKSApICk7XFxuXFx0XFx0XFx0XFx0ZGVwdGhLZXJuZWxbMV1bMV0gPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWzFdWzJdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSApICk7XFxuXFx0XFx0XFx0XFx0ZGVwdGhLZXJuZWxbMl1bMF0gPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApICkgKTtcXG5cXHRcXHRcXHRcXHRkZXB0aEtlcm5lbFsyXVsxXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgMC4wICkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWzJdWzJdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSApICk7XFxuXFxuXFx0XFx0XFx0XFx0dmVjMyBzaGFkb3daID0gdmVjMyggc2hhZG93Q29vcmQueiApO1xcblxcdFxcdFxcdFxcdHNoYWRvd0tlcm5lbFswXSA9IHZlYzMobGVzc1RoYW4oZGVwdGhLZXJuZWxbMF0sIHNoYWRvd1ogKSk7XFxuXFx0XFx0XFx0XFx0c2hhZG93S2VybmVsWzBdICo9IHZlYzMoMC4yNSk7XFxuXFxuXFx0XFx0XFx0XFx0c2hhZG93S2VybmVsWzFdID0gdmVjMyhsZXNzVGhhbihkZXB0aEtlcm5lbFsxXSwgc2hhZG93WiApKTtcXG5cXHRcXHRcXHRcXHRzaGFkb3dLZXJuZWxbMV0gKj0gdmVjMygwLjI1KTtcXG5cXG5cXHRcXHRcXHRcXHRzaGFkb3dLZXJuZWxbMl0gPSB2ZWMzKGxlc3NUaGFuKGRlcHRoS2VybmVsWzJdLCBzaGFkb3daICkpO1xcblxcdFxcdFxcdFxcdHNoYWRvd0tlcm5lbFsyXSAqPSB2ZWMzKDAuMjUpO1xcblxcblxcdFxcdFxcdFxcdHZlYzIgZnJhY3Rpb25hbENvb3JkID0gMS4wIC0gZnJhY3QoIHNoYWRvd0Nvb3JkLnh5ICogc2hhZG93TWFwU2l6ZVtpXS54eSApO1xcblxcblxcdFxcdFxcdFxcdHNoYWRvd0tlcm5lbFswXSA9IG1peCggc2hhZG93S2VybmVsWzFdLCBzaGFkb3dLZXJuZWxbMF0sIGZyYWN0aW9uYWxDb29yZC54ICk7XFxuXFx0XFx0XFx0XFx0c2hhZG93S2VybmVsWzFdID0gbWl4KCBzaGFkb3dLZXJuZWxbMl0sIHNoYWRvd0tlcm5lbFsxXSwgZnJhY3Rpb25hbENvb3JkLnggKTtcXG5cXG5cXHRcXHRcXHRcXHR2ZWM0IHNoYWRvd1ZhbHVlcztcXG5cXHRcXHRcXHRcXHRzaGFkb3dWYWx1ZXMueCA9IG1peCggc2hhZG93S2VybmVsWzBdWzFdLCBzaGFkb3dLZXJuZWxbMF1bMF0sIGZyYWN0aW9uYWxDb29yZC55ICk7XFxuXFx0XFx0XFx0XFx0c2hhZG93VmFsdWVzLnkgPSBtaXgoIHNoYWRvd0tlcm5lbFswXVsyXSwgc2hhZG93S2VybmVsWzBdWzFdLCBmcmFjdGlvbmFsQ29vcmQueSApO1xcblxcdFxcdFxcdFxcdHNoYWRvd1ZhbHVlcy56ID0gbWl4KCBzaGFkb3dLZXJuZWxbMV1bMV0sIHNoYWRvd0tlcm5lbFsxXVswXSwgZnJhY3Rpb25hbENvb3JkLnkgKTtcXG5cXHRcXHRcXHRcXHRzaGFkb3dWYWx1ZXMudyA9IG1peCggc2hhZG93S2VybmVsWzFdWzJdLCBzaGFkb3dLZXJuZWxbMV1bMV0sIGZyYWN0aW9uYWxDb29yZC55ICk7XFxuXFxuXFx0XFx0XFx0XFx0c2hhZG93ID0gZG90KCBzaGFkb3dWYWx1ZXMsIHZlYzQoIDEuMCApICk7XFxuXFxuXFx0XFx0XFx0XFx0c2hhZG93Q29sb3IgPSBzaGFkb3dDb2xvciAqIHZlYzMoICggMS4wIC0gc2hhZG93RGFya25lc3NbIGkgXSAqIHNoYWRvdyApICk7XFxuXFxuXFx0XFx0XFx0I2Vsc2VcXG5cXG5cXHRcXHRcXHRcXHR2ZWM0IHJnYmFEZXB0aCA9IHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICk7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgZkRlcHRoID0gdW5wYWNrRGVwdGgoIHJnYmFEZXB0aCApO1xcblxcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApXFxuXFxuXFx0XFx0Ly8gc3BvdCB3aXRoIG11bHRpcGxlIHNoYWRvd3MgaXMgZGFya2VyXFxuXFxuXFx0XFx0XFx0XFx0XFx0c2hhZG93Q29sb3IgPSBzaGFkb3dDb2xvciAqIHZlYzMoIDEuMCAtIHNoYWRvd0RhcmtuZXNzWyBpIF0gKTtcXG5cXG5cXHRcXHQvLyBzcG90IHdpdGggbXVsdGlwbGUgc2hhZG93cyBoYXMgdGhlIHNhbWUgY29sb3IgYXMgc2luZ2xlIHNoYWRvdyBzcG90XFxuXFxuXFx0XFx0Ly8gXFx0XFx0XFx0XFx0XFx0c2hhZG93Q29sb3IgPSBtaW4oIHNoYWRvd0NvbG9yLCB2ZWMzKCBzaGFkb3dEYXJrbmVzc1sgaSBdICkgKTtcXG5cXG5cXHRcXHRcXHQjZW5kaWZcXG5cXG5cXHRcXHR9XFxuXFxuXFxuXFx0XFx0I2lmZGVmIFNIQURPV01BUF9ERUJVR1xcblxcblxcdFxcdFxcdCNpZmRlZiBTSEFET1dNQVBfQ0FTQ0FERVxcblxcblxcdFxcdFxcdFxcdGlmICggaW5GcnVzdHVtICYmIGluRnJ1c3R1bUNvdW50ID09IDEgKSBvdXRnb2luZ0xpZ2h0ICo9IGZydXN0dW1Db2xvcnNbIGkgXTtcXG5cXG5cXHRcXHRcXHQjZWxzZVxcblxcblxcdFxcdFxcdFxcdGlmICggaW5GcnVzdHVtICkgb3V0Z29pbmdMaWdodCAqPSBmcnVzdHVtQ29sb3JzWyBpIF07XFxuXFxuXFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0I2VuZGlmXFxuXFxuXFx0fVxcblxcblxcdC8vIE5PVEU6IEkgYW0gdW5zdXJlIGlmIHRoaXMgaXMgY29ycmVjdCBpbiBsaW5lYXIgc3BhY2UuICAtYmhvdXN0b24sIERlYyAyOSwgMjAxNFxcblxcdHNoYWRvd0NvbG9yID0gaW5wdXRUb0xpbmVhciggc2hhZG93Q29sb3IgKTtcXG5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqIHNoYWRvd0NvbG9yO1xcblxcbiNlbmRpZlxcblwiO1xyXG5USFJFRS5TaGFkZXJDaHVuay53b3JsZHBvc192ZXJ0ZXg9XCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQoIFBIT05HICkgfHwgZGVmaW5lZCggTEFNQkVSVCApIHx8IGRlZmluZWQgKCBVU0VfU0hBRE9XTUFQIClcXG5cXG5cXHQjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFxuXFx0XFx0dmVjNCB3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXggKiBza2lubmVkO1xcblxcblxcdCNlbGlmIGRlZmluZWQoIFVTRV9NT1JQSFRBUkdFVFMgKVxcblxcblxcdFxcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogdmVjNCggbW9ycGhlZCwgMS4wICk7XFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHRcXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgc2hhZG93TWFwWyBNQVhfU0hBRE9XUyBdO1xcblxcdHVuaWZvcm0gdmVjMiBzaGFkb3dNYXBTaXplWyBNQVhfU0hBRE9XUyBdO1xcblxcblxcdHVuaWZvcm0gZmxvYXQgc2hhZG93RGFya25lc3NbIE1BWF9TSEFET1dTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBzaGFkb3dCaWFzWyBNQVhfU0hBRE9XUyBdO1xcblxcblxcdHZhcnlpbmcgdmVjNCB2U2hhZG93Q29vcmRbIE1BWF9TSEFET1dTIF07XFxuXFxuXFx0ZmxvYXQgdW5wYWNrRGVwdGgoIGNvbnN0IGluIHZlYzQgcmdiYV9kZXB0aCApIHtcXG5cXG5cXHRcXHRjb25zdCB2ZWM0IGJpdF9zaGlmdCA9IHZlYzQoIDEuMCAvICggMjU2LjAgKiAyNTYuMCAqIDI1Ni4wICksIDEuMCAvICggMjU2LjAgKiAyNTYuMCApLCAxLjAgLyAyNTYuMCwgMS4wICk7XFxuXFx0XFx0ZmxvYXQgZGVwdGggPSBkb3QoIHJnYmFfZGVwdGgsIGJpdF9zaGlmdCApO1xcblxcdFxcdHJldHVybiBkZXB0aDtcXG5cXG5cXHR9XFxuXFxuI2VuZGlmXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3BhcnNfdmVydGV4PVwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcXG5cXG5cXHQjaWZkZWYgQk9ORV9URVhUVVJFXFxuXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgYm9uZVRleHR1cmU7XFxuXFx0XFx0dW5pZm9ybSBpbnQgYm9uZVRleHR1cmVXaWR0aDtcXG5cXHRcXHR1bmlmb3JtIGludCBib25lVGV4dHVyZUhlaWdodDtcXG5cXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFxuXFx0XFx0XFx0ZmxvYXQgaiA9IGkgKiA0LjA7XFxuXFx0XFx0XFx0ZmxvYXQgeCA9IG1vZCggaiwgZmxvYXQoIGJvbmVUZXh0dXJlV2lkdGggKSApO1xcblxcdFxcdFxcdGZsb2F0IHkgPSBmbG9vciggaiAvIGZsb2F0KCBib25lVGV4dHVyZVdpZHRoICkgKTtcXG5cXG5cXHRcXHRcXHRmbG9hdCBkeCA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVdpZHRoICk7XFxuXFx0XFx0XFx0ZmxvYXQgZHkgPSAxLjAgLyBmbG9hdCggYm9uZVRleHR1cmVIZWlnaHQgKTtcXG5cXG5cXHRcXHRcXHR5ID0gZHkgKiAoIHkgKyAwLjUgKTtcXG5cXG5cXHRcXHRcXHR2ZWM0IHYxID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAwLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MiA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMS41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjMgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDIuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHY0ID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAzLjUgKSwgeSApICk7XFxuXFxuXFx0XFx0XFx0bWF0NCBib25lID0gbWF0NCggdjEsIHYyLCB2MywgdjQgKTtcXG5cXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXG5cXHRcXHR9XFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHRcXHR1bmlmb3JtIG1hdDQgYm9uZUdsb2JhbE1hdHJpY2VzWyBNQVhfQk9ORVMgXTtcXG5cXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFxuXFx0XFx0XFx0bWF0NCBib25lID0gYm9uZUdsb2JhbE1hdHJpY2VzWyBpbnQoaSkgXTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXG5cXHRcXHR9XFxuXFxuXFx0I2VuZGlmXFxuXFxuI2VuZGlmXFxuXCI7XHJcblRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFxuXFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcblxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFxuXFx0XFx0I2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZVxcblxcdFxcdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5hbHBoYW1hcF9mcmFnbWVudD1cIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB2VXYgKS5nO1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XFxuXFxuI2VuZGlmXFxuXCI7XHJcblRIUkVFLlVuaWZvcm1zVXRpbHM9e21lcmdlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj17fSxjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPXRoaXMuY2xvbmUoYVtjXSksZTtmb3IoZSBpbiBkKWJbZV09ZFtlXX1yZXR1cm4gYn0sY2xvbmU6ZnVuY3Rpb24oYSl7dmFyIGI9e30sYztmb3IoYyBpbiBhKXtiW2NdPXt9O2Zvcih2YXIgZCBpbiBhW2NdKXt2YXIgZT1hW2NdW2RdO2JbY11bZF09ZSBpbnN0YW5jZW9mIFRIUkVFLkNvbG9yfHxlIGluc3RhbmNlb2YgVEhSRUUuVmVjdG9yMnx8ZSBpbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjN8fGUgaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3I0fHxlIGluc3RhbmNlb2YgVEhSRUUuTWF0cml4NHx8ZSBpbnN0YW5jZW9mIFRIUkVFLlRleHR1cmU/ZS5jbG9uZSgpOmUgaW5zdGFuY2VvZiBBcnJheT9lLnNsaWNlKCk6ZX19cmV0dXJuIGJ9fTtcclxuVEhSRUUuVW5pZm9ybXNMaWI9e2NvbW1vbjp7ZGlmZnVzZTp7dHlwZTpcImNcIix2YWx1ZTpuZXcgVEhSRUUuQ29sb3IoMTU2NTg3MzQpfSxvcGFjaXR5Ont0eXBlOlwiZlwiLHZhbHVlOjF9LG1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxvZmZzZXRSZXBlYXQ6e3R5cGU6XCJ2NFwiLHZhbHVlOm5ldyBUSFJFRS5WZWN0b3I0KDAsMCwxLDEpfSxsaWdodE1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxzcGVjdWxhck1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxhbHBoYU1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxlbnZNYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sZmxpcEVudk1hcDp7dHlwZTpcImZcIix2YWx1ZTotMX0scmVmbGVjdGl2aXR5Ont0eXBlOlwiZlwiLHZhbHVlOjF9LHJlZnJhY3Rpb25SYXRpbzp7dHlwZTpcImZcIix2YWx1ZTouOTh9LG1vcnBoVGFyZ2V0SW5mbHVlbmNlczp7dHlwZTpcImZcIix2YWx1ZTowfX0sYnVtcDp7YnVtcE1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxidW1wU2NhbGU6e3R5cGU6XCJmXCIsXHJcbnZhbHVlOjF9fSxub3JtYWxtYXA6e25vcm1hbE1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxub3JtYWxTY2FsZTp7dHlwZTpcInYyXCIsdmFsdWU6bmV3IFRIUkVFLlZlY3RvcjIoMSwxKX19LGZvZzp7Zm9nRGVuc2l0eTp7dHlwZTpcImZcIix2YWx1ZToyLjVFLTR9LGZvZ05lYXI6e3R5cGU6XCJmXCIsdmFsdWU6MX0sZm9nRmFyOnt0eXBlOlwiZlwiLHZhbHVlOjJFM30sZm9nQ29sb3I6e3R5cGU6XCJjXCIsdmFsdWU6bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KX19LGxpZ2h0czp7YW1iaWVudExpZ2h0Q29sb3I6e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0sZGlyZWN0aW9uYWxMaWdodENvbG9yOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0saGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0saGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3I6e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxoZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvcjp7dHlwZTpcImZ2XCIsXHJcbnZhbHVlOltdfSxwb2ludExpZ2h0Q29sb3I6e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxwb2ludExpZ2h0UG9zaXRpb246e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxwb2ludExpZ2h0RGlzdGFuY2U6e3R5cGU6XCJmdjFcIix2YWx1ZTpbXX0scG9pbnRMaWdodERlY2F5Ont0eXBlOlwiZnYxXCIsdmFsdWU6W119LHNwb3RMaWdodENvbG9yOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0sc3BvdExpZ2h0UG9zaXRpb246e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxzcG90TGlnaHREaXJlY3Rpb246e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxzcG90TGlnaHREaXN0YW5jZTp7dHlwZTpcImZ2MVwiLHZhbHVlOltdfSxzcG90TGlnaHRBbmdsZUNvczp7dHlwZTpcImZ2MVwiLHZhbHVlOltdfSxzcG90TGlnaHRFeHBvbmVudDp7dHlwZTpcImZ2MVwiLHZhbHVlOltdfSxzcG90TGlnaHREZWNheTp7dHlwZTpcImZ2MVwiLHZhbHVlOltdfX0scGFydGljbGU6e3BzQ29sb3I6e3R5cGU6XCJjXCIsdmFsdWU6bmV3IFRIUkVFLkNvbG9yKDE1NjU4NzM0KX0sb3BhY2l0eTp7dHlwZTpcImZcIixcclxudmFsdWU6MX0sc2l6ZTp7dHlwZTpcImZcIix2YWx1ZToxfSxzY2FsZTp7dHlwZTpcImZcIix2YWx1ZToxfSxtYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sb2Zmc2V0UmVwZWF0Ont0eXBlOlwidjRcIix2YWx1ZTpuZXcgVEhSRUUuVmVjdG9yNCgwLDAsMSwxKX0sZm9nRGVuc2l0eTp7dHlwZTpcImZcIix2YWx1ZToyLjVFLTR9LGZvZ05lYXI6e3R5cGU6XCJmXCIsdmFsdWU6MX0sZm9nRmFyOnt0eXBlOlwiZlwiLHZhbHVlOjJFM30sZm9nQ29sb3I6e3R5cGU6XCJjXCIsdmFsdWU6bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KX19LHNoYWRvd21hcDp7c2hhZG93TWFwOnt0eXBlOlwidHZcIix2YWx1ZTpbXX0sc2hhZG93TWFwU2l6ZTp7dHlwZTpcInYydlwiLHZhbHVlOltdfSxzaGFkb3dCaWFzOnt0eXBlOlwiZnYxXCIsdmFsdWU6W119LHNoYWRvd0RhcmtuZXNzOnt0eXBlOlwiZnYxXCIsdmFsdWU6W119LHNoYWRvd01hdHJpeDp7dHlwZTpcIm00dlwiLHZhbHVlOltdfX19O1xyXG5USFJFRS5TaGFkZXJMaWI9e2Jhc2ljOnt1bmlmb3JtczpUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFtUSFJFRS5Vbmlmb3Jtc0xpYi5jb21tb24sVEhSRUUuVW5pZm9ybXNMaWIuZm9nLFRIUkVFLlVuaWZvcm1zTGliLnNoYWRvd21hcF0pLHZlcnRleFNoYWRlcjpbVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5saWdodG1hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFwidm9pZCBtYWluKCkge1wiLFxyXG5USFJFRS5TaGFkZXJDaHVuay5tYXBfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbmJhc2VfdmVydGV4LFwiXFx0I2lmZGVmIFVTRV9FTlZNQVBcIixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaG5vcm1hbF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5vcm1hbF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdG5vcm1hbF92ZXJ0ZXgsXCJcXHQjZW5kaWZcIixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmRlZmF1bHRfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay53b3JsZHBvc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfdmVydGV4LFxyXG5cIn1cIl0uam9pbihcIlxcblwiKSxmcmFnbWVudFNoYWRlcjpbXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYWxwaGFtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saWdodG1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmZvZ19wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcInZvaWQgbWFpbigpIHtcXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcIixcclxuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhdGVzdF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9mcmFnbWVudCxcIlxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1wiLFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubGluZWFyX3RvX2dhbW1hX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmZvZ19mcmFnbWVudCxcIlxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxufVwiXS5qb2luKFwiXFxuXCIpfSxcclxubGFtYmVydDp7dW5pZm9ybXM6VEhSRUUuVW5pZm9ybXNVdGlscy5tZXJnZShbVEhSRUUuVW5pZm9ybXNMaWIuY29tbW9uLFRIUkVFLlVuaWZvcm1zTGliLmZvZyxUSFJFRS5Vbmlmb3Jtc0xpYi5saWdodHMsVEhSRUUuVW5pZm9ybXNMaWIuc2hhZG93bWFwLHtlbWlzc2l2ZTp7dHlwZTpcImNcIix2YWx1ZTpuZXcgVEhSRUUuQ29sb3IoMCl9LHdyYXBSR0I6e3R5cGU6XCJ2M1wiLHZhbHVlOm5ldyBUSFJFRS5WZWN0b3IzKDEsMSwxKX19XSksdmVydGV4U2hhZGVyOltcIiNkZWZpbmUgTEFNQkVSVFxcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XFxuI2VuZGlmXCIsVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5saWdodG1hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRzX2xhbWJlcnRfcGFyc192ZXJ0ZXgsXHJcblRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay5tYXBfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGhub3JtYWxfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5iYXNlX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0bm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfdmVydGV4LFxyXG5USFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsud29ybGRwb3NfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRzX2xhbWJlcnRfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG52YXJ5aW5nIHZlYzMgdkxpZ2h0RnJvbnQ7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZhcnlpbmcgdmVjMyB2TGlnaHRCYWNrO1xcbiNlbmRpZlwiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX3BhcnNfZnJhZ21lbnQsXHJcblRIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1wiLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5hbHBoYW1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5hbHBoYXRlc3RfZnJhZ21lbnQsXHJcblRIUkVFLlNoYWRlckNodW5rLnNwZWN1bGFybWFwX2ZyYWdtZW50LFwiXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdGlmICggZ2xfRnJvbnRGYWNpbmcgKVxcblxcdFxcdFxcdG91dGdvaW5nTGlnaHQgKz0gZGlmZnVzZUNvbG9yLnJnYiAqIHZMaWdodEZyb250ICsgZW1pc3NpdmU7XFxuXFx0XFx0ZWxzZVxcblxcdFxcdFxcdG91dGdvaW5nTGlnaHQgKz0gZGlmZnVzZUNvbG9yLnJnYiAqIHZMaWdodEJhY2sgKyBlbWlzc2l2ZTtcXG5cXHQjZWxzZVxcblxcdFxcdG91dGdvaW5nTGlnaHQgKz0gZGlmZnVzZUNvbG9yLnJnYiAqIHZMaWdodEZyb250ICsgZW1pc3NpdmU7XFxuXFx0I2VuZGlmXCIsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRtYXBfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saW5lYXJfdG9fZ2FtbWFfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX2ZyYWdtZW50LFwiXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG59XCJdLmpvaW4oXCJcXG5cIil9LFxyXG5waG9uZzp7dW5pZm9ybXM6VEhSRUUuVW5pZm9ybXNVdGlscy5tZXJnZShbVEhSRUUuVW5pZm9ybXNMaWIuY29tbW9uLFRIUkVFLlVuaWZvcm1zTGliLmJ1bXAsVEhSRUUuVW5pZm9ybXNMaWIubm9ybWFsbWFwLFRIUkVFLlVuaWZvcm1zTGliLmZvZyxUSFJFRS5Vbmlmb3Jtc0xpYi5saWdodHMsVEhSRUUuVW5pZm9ybXNMaWIuc2hhZG93bWFwLHtlbWlzc2l2ZTp7dHlwZTpcImNcIix2YWx1ZTpuZXcgVEhSRUUuQ29sb3IoMCl9LHNwZWN1bGFyOnt0eXBlOlwiY1wiLHZhbHVlOm5ldyBUSFJFRS5Db2xvcigxMTE4NDgxKX0sc2hpbmluZXNzOnt0eXBlOlwiZlwiLHZhbHVlOjMwfSx3cmFwUkdCOnt0eXBlOlwidjNcIix2YWx1ZTpuZXcgVEhSRUUuVmVjdG9yMygxLDEsMSl9fV0pLHZlcnRleFNoYWRlcjpbXCIjZGVmaW5lIFBIT05HXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlwiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixcclxuVEhSRUUuU2hhZGVyQ2h1bmsubWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFwidm9pZCBtYWluKCkge1wiLFRIUkVFLlNoYWRlckNodW5rLm1hcF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRtYXBfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5tb3JwaG5vcm1hbF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbmJhc2VfdmVydGV4LFxyXG5USFJFRS5TaGFkZXJDaHVuay5za2lubm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0bm9ybWFsX3ZlcnRleCxcIiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbiNlbmRpZlwiLFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubmluZ192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4LFwiXFx0dlZpZXdQb3NpdGlvbiA9IC1tdlBvc2l0aW9uLnh5ejtcIixUSFJFRS5TaGFkZXJDaHVuay53b3JsZHBvc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1wiI2RlZmluZSBQSE9OR1xcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIHZlYzMgc3BlY3VsYXI7XFxudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1wiLFxyXG5USFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5tYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5hbHBoYW1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYnVtcG1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcclxuXCJ2b2lkIG1haW4oKSB7XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhdGVzdF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRtYXBfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saW5lYXJfdG9fZ2FtbWFfZnJhZ21lbnQsXHJcblRIUkVFLlNoYWRlckNodW5rLmZvZ19mcmFnbWVudCxcIlxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxufVwiXS5qb2luKFwiXFxuXCIpfSxwYXJ0aWNsZV9iYXNpYzp7dW5pZm9ybXM6VEhSRUUuVW5pZm9ybXNVdGlscy5tZXJnZShbVEhSRUUuVW5pZm9ybXNMaWIucGFydGljbGUsVEhSRUUuVW5pZm9ybXNMaWIuc2hhZG93bWFwXSksdmVydGV4U2hhZGVyOltcInVuaWZvcm0gZmxvYXQgc2l6ZTtcXG51bmlmb3JtIGZsb2F0IHNjYWxlO1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfdmVydGV4LFwiXFx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcblxcdCNpZmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Z2xfUG9pbnRTaXplID0gc2l6ZSAqICggc2NhbGUgLyBsZW5ndGgoIG12UG9zaXRpb24ueHl6ICkgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGdsX1BvaW50U2l6ZSA9IHNpemU7XFxuXFx0I2VuZGlmXFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcIixcclxuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLndvcmxkcG9zX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfdmVydGV4LFwifVwiXS5qb2luKFwiXFxuXCIpLGZyYWdtZW50U2hhZGVyOltcInVuaWZvcm0gdmVjMyBwc0NvbG9yO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5tYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5mb2dfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggcHNDb2xvciwgb3BhY2l0eSApO1wiLFxyXG5USFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5tYXBfcGFydGljbGVfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYWxwaGF0ZXN0X2ZyYWdtZW50LFwiXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmZvZ19mcmFnbWVudCxcIlxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxufVwiXS5qb2luKFwiXFxuXCIpfSxkYXNoZWQ6e3VuaWZvcm1zOlRIUkVFLlVuaWZvcm1zVXRpbHMubWVyZ2UoW1RIUkVFLlVuaWZvcm1zTGliLmNvbW1vbixUSFJFRS5Vbmlmb3Jtc0xpYi5mb2cse3NjYWxlOnt0eXBlOlwiZlwiLHZhbHVlOjF9LGRhc2hTaXplOnt0eXBlOlwiZlwiLHZhbHVlOjF9LHRvdGFsU2l6ZTp7dHlwZTpcImZcIix2YWx1ZToyfX1dKSxcclxudmVydGV4U2hhZGVyOltcInVuaWZvcm0gZmxvYXQgc2NhbGU7XFxuYXR0cmlidXRlIGZsb2F0IGxpbmVEaXN0YW5jZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFwidm9pZCBtYWluKCkge1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3ZlcnRleCxcIlxcdHZMaW5lRGlzdGFuY2UgPSBzY2FsZSAqIGxpbmVEaXN0YW5jZTtcXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcIixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gZmxvYXQgZGFzaFNpemU7XFxudW5pZm9ybSBmbG9hdCB0b3RhbFNpemU7XFxudmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1wiLFxyXG5USFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5mb2dfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcblxcdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xcblxcdFxcdGRpc2NhcmQ7XFxuXFx0fVxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1wiLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX2ZyYWdtZW50LFwiXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX2ZyYWdtZW50LFwiXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG59XCJdLmpvaW4oXCJcXG5cIil9LFxyXG5kZXB0aDp7dW5pZm9ybXM6e21OZWFyOnt0eXBlOlwiZlwiLHZhbHVlOjF9LG1GYXI6e3R5cGU6XCJmXCIsdmFsdWU6MkUzfSxvcGFjaXR5Ont0eXBlOlwiZlwiLHZhbHVlOjF9fSx2ZXJ0ZXhTaGFkZXI6W1RIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4LFwifVwiXS5qb2luKFwiXFxuXCIpLGZyYWdtZW50U2hhZGVyOltcInVuaWZvcm0gZmxvYXQgbU5lYXI7XFxudW5pZm9ybSBmbG9hdCBtRmFyO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcclxuXCJ2b2lkIG1haW4oKSB7XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsXCJcXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcdFxcdGZsb2F0IGRlcHRoID0gZ2xfRnJhZ0RlcHRoRVhUIC8gZ2xfRnJhZ0Nvb3JkLnc7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBkZXB0aCA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgY29sb3IgPSAxLjAgLSBzbW9vdGhzdGVwKCBtTmVhciwgbUZhciwgZGVwdGggKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCB2ZWMzKCBjb2xvciApLCBvcGFjaXR5ICk7XFxufVwiXS5qb2luKFwiXFxuXCIpfSxub3JtYWw6e3VuaWZvcm1zOntvcGFjaXR5Ont0eXBlOlwiZlwiLHZhbHVlOjF9fSx2ZXJ0ZXhTaGFkZXI6W1widmFyeWluZyB2ZWMzIHZOb3JtYWw7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFxyXG5cInZvaWQgbWFpbigpIHtcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCBub3JtYWxNYXRyaXggKiBub3JtYWwgKTtcIixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4LFwifVwiXS5qb2luKFwiXFxuXCIpLGZyYWdtZW50U2hhZGVyOltcInVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG52YXJ5aW5nIHZlYzMgdk5vcm1hbDtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcInZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAwLjUgKiBub3JtYWxpemUoIHZOb3JtYWwgKSArIDAuNSwgb3BhY2l0eSApO1wiLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50LFwifVwiXS5qb2luKFwiXFxuXCIpfSxjdWJlOnt1bmlmb3Jtczp7dEN1YmU6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sXHJcbnRGbGlwOnt0eXBlOlwiZlwiLHZhbHVlOi0xfX0sdmVydGV4U2hhZGVyOltcInZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkUG9zaXRpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcIixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSBzYW1wbGVyQ3ViZSB0Q3ViZTtcXG51bmlmb3JtIGZsb2F0IHRGbGlwO1xcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcclxuXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZUN1YmUoIHRDdWJlLCB2ZWMzKCB0RmxpcCAqIHZXb3JsZFBvc2l0aW9uLngsIHZXb3JsZFBvc2l0aW9uLnl6ICkgKTtcIixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9mcmFnbWVudCxcIn1cIl0uam9pbihcIlxcblwiKX0sZXF1aXJlY3Q6e3VuaWZvcm1zOnt0RXF1aXJlY3Q6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sdEZsaXA6e3R5cGU6XCJmXCIsdmFsdWU6LTF9fSx2ZXJ0ZXhTaGFkZXI6W1widmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGRQb3NpdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1wiLFxyXG5USFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0O1xcbnVuaWZvcm0gZmxvYXQgdEZsaXA7XFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcbnZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGRQb3NpdGlvbiApO1xcbnZlYzIgc2FtcGxlVVY7XFxuc2FtcGxlVVYueSA9IHNhdHVyYXRlKCB0RmxpcCAqIGRpcmVjdGlvbi55ICogLTAuNSArIDAuNSApO1xcbnNhbXBsZVVWLnggPSBhdGFuKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcbmdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApO1wiLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50LFxyXG5cIn1cIl0uam9pbihcIlxcblwiKX0sZGVwdGhSR0JBOnt1bmlmb3Jtczp7fSx2ZXJ0ZXhTaGFkZXI6W1RIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubmluZ19wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay5za2luYmFzZV92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1RIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidmVjNCBwYWNrX2RlcHRoKCBjb25zdCBpbiBmbG9hdCBkZXB0aCApIHtcXG5cXHRjb25zdCB2ZWM0IGJpdF9zaGlmdCA9IHZlYzQoIDI1Ni4wICogMjU2LjAgKiAyNTYuMCwgMjU2LjAgKiAyNTYuMCwgMjU2LjAsIDEuMCApO1xcblxcdGNvbnN0IHZlYzQgYml0X21hc2sgPSB2ZWM0KCAwLjAsIDEuMCAvIDI1Ni4wLCAxLjAgLyAyNTYuMCwgMS4wIC8gMjU2LjAgKTtcXG5cXHR2ZWM0IHJlcyA9IG1vZCggZGVwdGggKiBiaXRfc2hpZnQgKiB2ZWM0KCAyNTUgKSwgdmVjNCggMjU2ICkgKSAvIHZlYzQoIDI1NSApO1xcblxcdHJlcyAtPSByZXMueHh5eiAqIGJpdF9tYXNrO1xcblxcdHJldHVybiByZXM7XFxufVxcbnZvaWQgbWFpbigpIHtcIixcclxuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsXCJcXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcdFxcdGdsX0ZyYWdEYXRhWyAwIF0gPSBwYWNrX2RlcHRoKCBnbF9GcmFnRGVwdGhFWFQgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGdsX0ZyYWdEYXRhWyAwIF0gPSBwYWNrX2RlcHRoKCBnbF9GcmFnQ29vcmQueiApO1xcblxcdCNlbmRpZlxcbn1cIl0uam9pbihcIlxcblwiKX19O1xyXG5USFJFRS5XZWJHTFJlbmRlcmVyPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7dmFyIGI9YS5nZW9tZXRyeTthPWEubWF0ZXJpYWw7dmFyIGM9Yi52ZXJ0aWNlcy5sZW5ndGg7aWYoYS5hdHRyaWJ1dGVzKXt2b2lkIDA9PT1iLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdCYmKGIuX193ZWJnbEN1c3RvbUF0dHJpYnV0ZXNMaXN0PVtdKTtmb3IodmFyIGQgaW4gYS5hdHRyaWJ1dGVzKXt2YXIgZT1hLmF0dHJpYnV0ZXNbZF07aWYoIWUuX193ZWJnbEluaXRpYWxpemVkfHxlLmNyZWF0ZVVuaXF1ZUJ1ZmZlcnMpe2UuX193ZWJnbEluaXRpYWxpemVkPSEwO3ZhciBmPTE7XCJ2MlwiPT09ZS50eXBlP2Y9MjpcInYzXCI9PT1lLnR5cGU/Zj0zOlwidjRcIj09PWUudHlwZT9mPTQ6XCJjXCI9PT1lLnR5cGUmJihmPTMpO2Uuc2l6ZT1mO2UuYXJyYXk9bmV3IEZsb2F0MzJBcnJheShjKmYpO2UuYnVmZmVyPW0uY3JlYXRlQnVmZmVyKCk7ZS5idWZmZXIuYmVsb25nc1RvQXR0cmlidXRlPWQ7ZS5uZWVkc1VwZGF0ZT1cclxuITB9Yi5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3QucHVzaChlKX19fWZ1bmN0aW9uIGMoYSxiKXtyZXR1cm4gYS5tYXRlcmlhbCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hGYWNlTWF0ZXJpYWw/YS5tYXRlcmlhbC5tYXRlcmlhbHNbYi5tYXRlcmlhbEluZGV4XTphLm1hdGVyaWFsfWZ1bmN0aW9uIGQoYSxiLGMsZCl7Yz1jLmF0dHJpYnV0ZXM7dmFyIGU9Yi5hdHRyaWJ1dGVzO2I9Yi5hdHRyaWJ1dGVzS2V5cztmb3IodmFyIGY9MCxnPWIubGVuZ3RoO2Y8ZztmKyspe3ZhciBoPWJbZl0saz1lW2hdO2lmKDA8PWspe3ZhciBuPWNbaF07dm9pZCAwIT09bj8oaD1uLml0ZW1TaXplLG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixuLmJ1ZmZlciksVy5lbmFibGVBdHRyaWJ1dGUoayksbS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGssaCxtLkZMT0FULCExLDAsZCpoKjQpKTp2b2lkIDAhPT1hLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMmJigyPT09YS5kZWZhdWx0QXR0cmlidXRlVmFsdWVzW2hdLmxlbmd0aD9cclxubS52ZXJ0ZXhBdHRyaWIyZnYoayxhLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbaF0pOjM9PT1hLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbaF0ubGVuZ3RoJiZtLnZlcnRleEF0dHJpYjNmdihrLGEuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1toXSkpfX1XLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCl9ZnVuY3Rpb24gZShhLGIpe3JldHVybiBhLm9iamVjdC5yZW5kZXJPcmRlciE9PWIub2JqZWN0LnJlbmRlck9yZGVyP2Eub2JqZWN0LnJlbmRlck9yZGVyLWIub2JqZWN0LnJlbmRlck9yZGVyOmEubWF0ZXJpYWwuaWQhPT1iLm1hdGVyaWFsLmlkP2EubWF0ZXJpYWwuaWQtYi5tYXRlcmlhbC5pZDphLnohPT1iLno/YS56LWIuejphLmlkLWIuaWR9ZnVuY3Rpb24gZihhLGIpe3JldHVybiBhLm9iamVjdC5yZW5kZXJPcmRlciE9PWIub2JqZWN0LnJlbmRlck9yZGVyP2Eub2JqZWN0LnJlbmRlck9yZGVyLWIub2JqZWN0LnJlbmRlck9yZGVyOmEueiE9PWIuej9iLnotYS56OmEuaWQtYi5pZH1mdW5jdGlvbiBnKGEsXHJcbmIpe3JldHVybiBiWzBdLWFbMF19ZnVuY3Rpb24gaChhKXtpZighMSE9PWEudmlzaWJsZSl7aWYoIShhIGluc3RhbmNlb2YgVEhSRUUuU2NlbmV8fGEgaW5zdGFuY2VvZiBUSFJFRS5Hcm91cCkpe3ZvaWQgMD09PWEuX193ZWJnbEluaXQmJihhLl9fd2ViZ2xJbml0PSEwLGEuX21vZGVsVmlld01hdHJpeD1uZXcgVEhSRUUuTWF0cml4NCxhLl9ub3JtYWxNYXRyaXg9bmV3IFRIUkVFLk1hdHJpeDMsYS5hZGRFdmVudExpc3RlbmVyKFwicmVtb3ZlZFwiLHdiKSk7dmFyIGM9YS5nZW9tZXRyeTtpZih2b2lkIDAhPT1jJiZ2b2lkIDA9PT1jLl9fd2ViZ2xJbml0KWlmKGMuX193ZWJnbEluaXQ9ITAsYy5hZGRFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLGpiKSxjIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpQi5pbmZvLm1lbW9yeS5nZW9tZXRyaWVzKys7ZWxzZSBpZihhIGluc3RhbmNlb2YgVEhSRUUuTWVzaClxKGEsYyk7ZWxzZSBpZihhIGluc3RhbmNlb2YgVEhSRUUuTGluZSl7aWYodm9pZCAwPT09XHJcbmMuX193ZWJnbFZlcnRleEJ1ZmZlcil7Yy5fX3dlYmdsVmVydGV4QnVmZmVyPW0uY3JlYXRlQnVmZmVyKCk7Yy5fX3dlYmdsQ29sb3JCdWZmZXI9bS5jcmVhdGVCdWZmZXIoKTtjLl9fd2ViZ2xMaW5lRGlzdGFuY2VCdWZmZXI9bS5jcmVhdGVCdWZmZXIoKTtCLmluZm8ubWVtb3J5Lmdlb21ldHJpZXMrKzt2YXIgZD1jLnZlcnRpY2VzLmxlbmd0aDtjLl9fdmVydGV4QXJyYXk9bmV3IEZsb2F0MzJBcnJheSgzKmQpO2MuX19jb2xvckFycmF5PW5ldyBGbG9hdDMyQXJyYXkoMypkKTtjLl9fbGluZURpc3RhbmNlQXJyYXk9bmV3IEZsb2F0MzJBcnJheSgxKmQpO2MuX193ZWJnbExpbmVDb3VudD1kO2IoYSk7Yy52ZXJ0aWNlc05lZWRVcGRhdGU9ITA7Yy5jb2xvcnNOZWVkVXBkYXRlPSEwO2MubGluZURpc3RhbmNlc05lZWRVcGRhdGU9ITB9fWVsc2UgYSBpbnN0YW5jZW9mIFRIUkVFLlBvaW50Q2xvdWQmJnZvaWQgMD09PWMuX193ZWJnbFZlcnRleEJ1ZmZlciYmKGMuX193ZWJnbFZlcnRleEJ1ZmZlcj1cclxubS5jcmVhdGVCdWZmZXIoKSxjLl9fd2ViZ2xDb2xvckJ1ZmZlcj1tLmNyZWF0ZUJ1ZmZlcigpLEIuaW5mby5tZW1vcnkuZ2VvbWV0cmllcysrLGQ9Yy52ZXJ0aWNlcy5sZW5ndGgsYy5fX3ZlcnRleEFycmF5PW5ldyBGbG9hdDMyQXJyYXkoMypkKSxjLl9fY29sb3JBcnJheT1uZXcgRmxvYXQzMkFycmF5KDMqZCksYy5fX3dlYmdsUGFydGljbGVDb3VudD1kLGIoYSksYy52ZXJ0aWNlc05lZWRVcGRhdGU9ITAsYy5jb2xvcnNOZWVkVXBkYXRlPSEwKTtpZih2b2lkIDA9PT1hLl9fd2ViZ2xBY3RpdmUpaWYoYS5fX3dlYmdsQWN0aXZlPSEwLGEgaW5zdGFuY2VvZiBUSFJFRS5NZXNoKWlmKGMgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeSluKGJhLGMsYSk7ZWxzZXtpZihjIGluc3RhbmNlb2YgVEhSRUUuR2VvbWV0cnkpZm9yKHZhciBjPVVhW2MuaWRdLGQ9MCxlPWMubGVuZ3RoO2Q8ZTtkKyspbihiYSxjW2RdLGEpfWVsc2UgYSBpbnN0YW5jZW9mIFRIUkVFLkxpbmV8fGEgaW5zdGFuY2VvZlxyXG5USFJFRS5Qb2ludENsb3VkP24oYmEsYyxhKTooYSBpbnN0YW5jZW9mIFRIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdHx8YS5pbW1lZGlhdGVSZW5kZXJDYWxsYmFjaykmJnFhLnB1c2goe2lkOm51bGwsb2JqZWN0OmEsb3BhcXVlOm51bGwsdHJhbnNwYXJlbnQ6bnVsbCx6OjB9KTtpZihhIGluc3RhbmNlb2YgVEhSRUUuTGlnaHQpY2EucHVzaChhKTtlbHNlIGlmKGEgaW5zdGFuY2VvZiBUSFJFRS5TcHJpdGUpWGEucHVzaChhKTtlbHNlIGlmKGEgaW5zdGFuY2VvZiBUSFJFRS5MZW5zRmxhcmUpWWEucHVzaChhKTtlbHNlIGlmKChjPWJhW2EuaWRdKSYmKCExPT09YS5mcnVzdHVtQ3VsbGVkfHwhMD09PWNiLmludGVyc2VjdHNPYmplY3QoYSkpKWZvcihkPTAsZT1jLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZj1jW2RdLGc9ZixrPWcub2JqZWN0LGw9Zy5idWZmZXIscD1rLmdlb21ldHJ5LGs9ay5tYXRlcmlhbDtrIGluc3RhbmNlb2YgVEhSRUUuTWVzaEZhY2VNYXRlcmlhbD8oaz1rLm1hdGVyaWFsc1twIGluc3RhbmNlb2ZcclxuVEhSRUUuQnVmZmVyR2VvbWV0cnk/MDpsLm1hdGVyaWFsSW5kZXhdLGcubWF0ZXJpYWw9ayxrLnRyYW5zcGFyZW50P1FhLnB1c2goZyk6S2EucHVzaChnKSk6ayYmKGcubWF0ZXJpYWw9ayxrLnRyYW5zcGFyZW50P1FhLnB1c2goZyk6S2EucHVzaChnKSk7Zi5yZW5kZXI9ITA7ITA9PT1CLnNvcnRPYmplY3RzJiYod2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGEubWF0cml4V29ybGQpLHdhLmFwcGx5UHJvamVjdGlvbihkYiksZi56PXdhLnopfX1kPTA7Zm9yKGU9YS5jaGlsZHJlbi5sZW5ndGg7ZDxlO2QrKyloKGEuY2hpbGRyZW5bZF0pfX1mdW5jdGlvbiBrKGEsYixjLGQsZSl7Zm9yKHZhciBmLGc9MCxoPWEubGVuZ3RoO2c8aDtnKyspe2Y9YVtnXTt2YXIgaz1mLm9iamVjdCxtPWYuYnVmZmVyO3coayxiKTtpZihlKWY9ZTtlbHNle2Y9Zi5tYXRlcmlhbDtpZighZiljb250aW51ZTt1KGYpfUIuc2V0TWF0ZXJpYWxGYWNlcyhmKTttIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnk/XHJcbkIucmVuZGVyQnVmZmVyRGlyZWN0KGIsYyxkLGYsbSxrKTpCLnJlbmRlckJ1ZmZlcihiLGMsZCxmLG0sayl9fWZ1bmN0aW9uIGwoYSxiLGMsZCxlLGYpe2Zvcih2YXIgZyxoPTAsaz1hLmxlbmd0aDtoPGs7aCsrKXtnPWFbaF07dmFyIG09Zy5vYmplY3Q7aWYobS52aXNpYmxlKXtpZihmKWc9ZjtlbHNle2c9Z1tiXTtpZighZyljb250aW51ZTt1KGcpfUIucmVuZGVySW1tZWRpYXRlT2JqZWN0KGMsZCxlLGcsbSl9fX1mdW5jdGlvbiBwKGEpe3ZhciBiPWEub2JqZWN0Lm1hdGVyaWFsO2IudHJhbnNwYXJlbnQ/KGEudHJhbnNwYXJlbnQ9YixhLm9wYXF1ZT1udWxsKTooYS5vcGFxdWU9YixhLnRyYW5zcGFyZW50PW51bGwpfWZ1bmN0aW9uIHEoYSxiKXt2YXIgZD1hLm1hdGVyaWFsLGU9ITE7aWYodm9pZCAwPT09VWFbYi5pZF18fCEwPT09Yi5ncm91cHNOZWVkVXBkYXRlKXtkZWxldGUgYmFbYS5pZF07Zm9yKHZhciBmPVVhLGc9Yi5pZCxkPWQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoRmFjZU1hdGVyaWFsLFxyXG5oPWRhLmdldChcIk9FU19lbGVtZW50X2luZGV4X3VpbnRcIik/NDI5NDk2NzI5Njo2NTUzNSxrLGU9e30sbD1iLm1vcnBoVGFyZ2V0cy5sZW5ndGgscD1iLm1vcnBoTm9ybWFscy5sZW5ndGgscSxzPXt9LHQ9W10scj0wLHc9Yi5mYWNlcy5sZW5ndGg7cjx3O3IrKyl7az1iLmZhY2VzW3JdO3ZhciB1PWQ/ay5tYXRlcmlhbEluZGV4OjA7dSBpbiBlfHwoZVt1XT17aGFzaDp1LGNvdW50ZXI6MH0pO2s9ZVt1XS5oYXNoK1wiX1wiK2VbdV0uY291bnRlcjtrIGluIHN8fChxPXtpZDpRYisrLGZhY2VzMzpbXSxtYXRlcmlhbEluZGV4OnUsdmVydGljZXM6MCxudW1Nb3JwaFRhcmdldHM6bCxudW1Nb3JwaE5vcm1hbHM6cH0sc1trXT1xLHQucHVzaChxKSk7c1trXS52ZXJ0aWNlcyszPmgmJihlW3VdLmNvdW50ZXIrPTEsaz1lW3VdLmhhc2grXCJfXCIrZVt1XS5jb3VudGVyLGsgaW4gc3x8KHE9e2lkOlFiKyssZmFjZXMzOltdLG1hdGVyaWFsSW5kZXg6dSx2ZXJ0aWNlczowLG51bU1vcnBoVGFyZ2V0czpsLFxyXG5udW1Nb3JwaE5vcm1hbHM6cH0sc1trXT1xLHQucHVzaChxKSkpO3Nba10uZmFjZXMzLnB1c2gocik7c1trXS52ZXJ0aWNlcys9M31mW2ddPXQ7Yi5ncm91cHNOZWVkVXBkYXRlPSExfWY9VWFbYi5pZF07Zz0wO2ZvcihkPWYubGVuZ3RoO2c8ZDtnKyspe2g9ZltnXTtpZih2b2lkIDA9PT1oLl9fd2ViZ2xWZXJ0ZXhCdWZmZXIpe2U9aDtlLl9fd2ViZ2xWZXJ0ZXhCdWZmZXI9bS5jcmVhdGVCdWZmZXIoKTtlLl9fd2ViZ2xOb3JtYWxCdWZmZXI9bS5jcmVhdGVCdWZmZXIoKTtlLl9fd2ViZ2xUYW5nZW50QnVmZmVyPW0uY3JlYXRlQnVmZmVyKCk7ZS5fX3dlYmdsQ29sb3JCdWZmZXI9bS5jcmVhdGVCdWZmZXIoKTtlLl9fd2ViZ2xVVkJ1ZmZlcj1tLmNyZWF0ZUJ1ZmZlcigpO2UuX193ZWJnbFVWMkJ1ZmZlcj1tLmNyZWF0ZUJ1ZmZlcigpO2UuX193ZWJnbFNraW5JbmRpY2VzQnVmZmVyPW0uY3JlYXRlQnVmZmVyKCk7ZS5fX3dlYmdsU2tpbldlaWdodHNCdWZmZXI9bS5jcmVhdGVCdWZmZXIoKTtcclxuZS5fX3dlYmdsRmFjZUJ1ZmZlcj1tLmNyZWF0ZUJ1ZmZlcigpO2UuX193ZWJnbExpbmVCdWZmZXI9bS5jcmVhdGVCdWZmZXIoKTtpZihwPWUubnVtTW9ycGhUYXJnZXRzKWZvcihlLl9fd2ViZ2xNb3JwaFRhcmdldHNCdWZmZXJzPVtdLGw9MDtsPHA7bCsrKWUuX193ZWJnbE1vcnBoVGFyZ2V0c0J1ZmZlcnMucHVzaChtLmNyZWF0ZUJ1ZmZlcigpKTtpZihwPWUubnVtTW9ycGhOb3JtYWxzKWZvcihlLl9fd2ViZ2xNb3JwaE5vcm1hbHNCdWZmZXJzPVtdLGw9MDtsPHA7bCsrKWUuX193ZWJnbE1vcnBoTm9ybWFsc0J1ZmZlcnMucHVzaChtLmNyZWF0ZUJ1ZmZlcigpKTtCLmluZm8ubWVtb3J5Lmdlb21ldHJpZXMrKztlPWg7cj1hO3c9ci5nZW9tZXRyeTtwPWUuZmFjZXMzO2w9MypwLmxlbmd0aDtzPTEqcC5sZW5ndGg7dD0zKnAubGVuZ3RoO3A9YyhyLGUpO2UuX192ZXJ0ZXhBcnJheT1uZXcgRmxvYXQzMkFycmF5KDMqbCk7ZS5fX25vcm1hbEFycmF5PW5ldyBGbG9hdDMyQXJyYXkoMypsKTtcclxuZS5fX2NvbG9yQXJyYXk9bmV3IEZsb2F0MzJBcnJheSgzKmwpO2UuX191dkFycmF5PW5ldyBGbG9hdDMyQXJyYXkoMipsKTsxPHcuZmFjZVZlcnRleFV2cy5sZW5ndGgmJihlLl9fdXYyQXJyYXk9bmV3IEZsb2F0MzJBcnJheSgyKmwpKTt3Lmhhc1RhbmdlbnRzJiYoZS5fX3RhbmdlbnRBcnJheT1uZXcgRmxvYXQzMkFycmF5KDQqbCkpO3IuZ2VvbWV0cnkuc2tpbldlaWdodHMubGVuZ3RoJiZyLmdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCYmKGUuX19za2luSW5kZXhBcnJheT1uZXcgRmxvYXQzMkFycmF5KDQqbCksZS5fX3NraW5XZWlnaHRBcnJheT1uZXcgRmxvYXQzMkFycmF5KDQqbCkpO3I9bnVsbCE9PWRhLmdldChcIk9FU19lbGVtZW50X2luZGV4X3VpbnRcIikmJjIxODQ1PHM/VWludDMyQXJyYXk6VWludDE2QXJyYXk7ZS5fX3R5cGVBcnJheT1yO2UuX19mYWNlQXJyYXk9bmV3IHIoMypzKTtlLl9fbGluZUFycmF5PW5ldyByKDIqdCk7aWYodz1lLm51bU1vcnBoVGFyZ2V0cylmb3IoZS5fX21vcnBoVGFyZ2V0c0FycmF5cz1cclxuW10scj0wO3I8dztyKyspZS5fX21vcnBoVGFyZ2V0c0FycmF5cy5wdXNoKG5ldyBGbG9hdDMyQXJyYXkoMypsKSk7aWYodz1lLm51bU1vcnBoTm9ybWFscylmb3IoZS5fX21vcnBoTm9ybWFsc0FycmF5cz1bXSxyPTA7cjx3O3IrKyllLl9fbW9ycGhOb3JtYWxzQXJyYXlzLnB1c2gobmV3IEZsb2F0MzJBcnJheSgzKmwpKTtlLl9fd2ViZ2xGYWNlQ291bnQ9MypzO2UuX193ZWJnbExpbmVDb3VudD0yKnQ7aWYocC5hdHRyaWJ1dGVzKWZvcihzIGluIHZvaWQgMD09PWUuX193ZWJnbEN1c3RvbUF0dHJpYnV0ZXNMaXN0JiYoZS5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3Q9W10pLHM9dm9pZCAwLHAuYXR0cmlidXRlcyl7dmFyIHQ9cC5hdHRyaWJ1dGVzW3NdLHI9e30sdjtmb3IodiBpbiB0KXJbdl09dFt2XTtpZighci5fX3dlYmdsSW5pdGlhbGl6ZWR8fHIuY3JlYXRlVW5pcXVlQnVmZmVycylyLl9fd2ViZ2xJbml0aWFsaXplZD0hMCx3PTEsXCJ2MlwiPT09ci50eXBlP3c9MjpcInYzXCI9PT1cclxuci50eXBlP3c9MzpcInY0XCI9PT1yLnR5cGU/dz00OlwiY1wiPT09ci50eXBlJiYodz0zKSxyLnNpemU9dyxyLmFycmF5PW5ldyBGbG9hdDMyQXJyYXkobCp3KSxyLmJ1ZmZlcj1tLmNyZWF0ZUJ1ZmZlcigpLHIuYnVmZmVyLmJlbG9uZ3NUb0F0dHJpYnV0ZT1zLHQubmVlZHNVcGRhdGU9ITAsci5fX29yaWdpbmFsPXQ7ZS5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3QucHVzaChyKX1lLl9faW5pdHRlZEFycmF5cz0hMDtiLnZlcnRpY2VzTmVlZFVwZGF0ZT0hMDtiLm1vcnBoVGFyZ2V0c05lZWRVcGRhdGU9ITA7Yi5lbGVtZW50c05lZWRVcGRhdGU9ITA7Yi51dnNOZWVkVXBkYXRlPSEwO2Iubm9ybWFsc05lZWRVcGRhdGU9ITA7Yi50YW5nZW50c05lZWRVcGRhdGU9ITA7ZT1iLmNvbG9yc05lZWRVcGRhdGU9ITB9ZWxzZSBlPSExOyhlfHx2b2lkIDA9PT1hLl9fd2ViZ2xBY3RpdmUpJiZuKGJhLGgsYSl9YS5fX3dlYmdsQWN0aXZlPSEwfWZ1bmN0aW9uIG4oYSxiLGMpe3ZhciBkPWMuaWQ7YVtkXT1cclxuYVtkXXx8W107YVtkXS5wdXNoKHtpZDpkLGJ1ZmZlcjpiLG9iamVjdDpjLG1hdGVyaWFsOm51bGwsejowfSl9ZnVuY3Rpb24gdChhKXt2YXIgYj1hLmdlb21ldHJ5O2lmKGIgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeSlmb3IodmFyIGQ9Yi5hdHRyaWJ1dGVzLGU9Yi5hdHRyaWJ1dGVzS2V5cyxmPTAsZz1lLmxlbmd0aDtmPGc7ZisrKXt2YXIgaD1lW2ZdLGs9ZFtoXSxuPVwiaW5kZXhcIj09PWg/bS5FTEVNRU5UX0FSUkFZX0JVRkZFUjptLkFSUkFZX0JVRkZFUjt2b2lkIDA9PT1rLmJ1ZmZlcj8oay5idWZmZXI9bS5jcmVhdGVCdWZmZXIoKSxtLmJpbmRCdWZmZXIobixrLmJ1ZmZlciksbS5idWZmZXJEYXRhKG4say5hcnJheSxrIGluc3RhbmNlb2YgVEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZT9tLkRZTkFNSUNfRFJBVzptLlNUQVRJQ19EUkFXKSxrLm5lZWRzVXBkYXRlPSExKTohMD09PWsubmVlZHNVcGRhdGUmJihtLmJpbmRCdWZmZXIobixrLmJ1ZmZlciksdm9pZCAwPT09XHJcbmsudXBkYXRlUmFuZ2V8fC0xPT09ay51cGRhdGVSYW5nZS5jb3VudD9tLmJ1ZmZlclN1YkRhdGEobiwwLGsuYXJyYXkpOjA9PT1rLnVwZGF0ZVJhbmdlLmNvdW50P2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnVwZGF0ZU9iamVjdDogdXNpbmcgdXBkYXRlUmFuZ2UgZm9yIFRIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgYW5kIG1hcmtlZCBhcyBuZWVkc1VwZGF0ZSBidXQgY291bnQgaXMgMCwgZW5zdXJlIHlvdSBhcmUgdXNpbmcgc2V0IG1ldGhvZHMgb3IgdXBkYXRpbmcgbWFudWFsbHkuXCIpOihtLmJ1ZmZlclN1YkRhdGEobixrLnVwZGF0ZVJhbmdlLm9mZnNldCprLmFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULGsuYXJyYXkuc3ViYXJyYXkoay51cGRhdGVSYW5nZS5vZmZzZXQsay51cGRhdGVSYW5nZS5vZmZzZXQray51cGRhdGVSYW5nZS5jb3VudCkpLGsudXBkYXRlUmFuZ2UuY291bnQ9MCksay5uZWVkc1VwZGF0ZT0hMSl9ZWxzZSBpZihhIGluc3RhbmNlb2YgVEhSRUUuTWVzaCl7ITA9PT1cclxuYi5ncm91cHNOZWVkVXBkYXRlJiZxKGEsYik7Zm9yKHZhciBsPVVhW2IuaWRdLGY9MCxwPWwubGVuZ3RoO2Y8cDtmKyspe3ZhciB0PWxbZl0sdz1jKGEsdCksdT13LmF0dHJpYnV0ZXMmJnIodyk7aWYoYi52ZXJ0aWNlc05lZWRVcGRhdGV8fGIubW9ycGhUYXJnZXRzTmVlZFVwZGF0ZXx8Yi5lbGVtZW50c05lZWRVcGRhdGV8fGIudXZzTmVlZFVwZGF0ZXx8Yi5ub3JtYWxzTmVlZFVwZGF0ZXx8Yi5jb2xvcnNOZWVkVXBkYXRlfHxiLnRhbmdlbnRzTmVlZFVwZGF0ZXx8dSl7dmFyIHY9dCx4PWEsRD1tLkRZTkFNSUNfRFJBVyxBPSFiLmR5bmFtaWMsRT13O2lmKHYuX19pbml0dGVkQXJyYXlzKXt2YXIgRz0hMT09PUUgaW5zdGFuY2VvZiBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCYmRS5zaGFkaW5nPT09VEhSRUUuRmxhdFNoYWRpbmcseT12b2lkIDAsej12b2lkIDAsRj12b2lkIDAsQj12b2lkIDAsST12b2lkIDAsSD12b2lkIDAsTT12b2lkIDAsUj12b2lkIDAsUD12b2lkIDAsVT12b2lkIDAsXHJcbk89dm9pZCAwLEo9dm9pZCAwLEw9dm9pZCAwLE49dm9pZCAwLEthPXZvaWQgMCxWPXZvaWQgMCxXPXZvaWQgMCxRYT12b2lkIDAsWWE9dm9pZCAwLFhhPXZvaWQgMCxkYT12b2lkIDAsYmE9dm9pZCAwLGphPXZvaWQgMCxQYT12b2lkIDAsa2E9dm9pZCAwLFE9dm9pZCAwLGhhPXZvaWQgMCxpYT12b2lkIDAsb2I9dm9pZCAwLFk9dm9pZCAwLHViPXZvaWQgMCxwYT12b2lkIDAsYWI9dm9pZCAwLG9hPXZvaWQgMCxjYT12b2lkIDAscWE9dm9pZCAwLENhPXZvaWQgMCx0YT12b2lkIDAsbmE9dm9pZCAwLHdhPXZvaWQgMCxMYT0wLE1hPTAsa2I9MCx5Yj0wLHpiPTAsUmE9MCxBYT0wLGViPTAsSGE9MCxsYT0wLHJhPTAsSz0wLHphPXZvaWQgMCxTYT12Ll9fdmVydGV4QXJyYXksQWI9di5fX3V2QXJyYXksbGI9di5fX3V2MkFycmF5LE5hPXYuX19ub3JtYWxBcnJheSxzYT12Ll9fdGFuZ2VudEFycmF5LERhPXYuX19jb2xvckFycmF5LEVhPXYuX19za2luSW5kZXhBcnJheSxGYT12Ll9fc2tpbldlaWdodEFycmF5LFxyXG5HYj12Ll9fbW9ycGhUYXJnZXRzQXJyYXlzLEJiPXYuX19tb3JwaE5vcm1hbHNBcnJheXMsbWI9di5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3QsQz12b2lkIDAsVmE9di5fX2ZhY2VBcnJheSxUYT12Ll9fbGluZUFycmF5LGVhPXguZ2VvbWV0cnksZmI9ZWEuZWxlbWVudHNOZWVkVXBkYXRlLHZiPWVhLnV2c05lZWRVcGRhdGUsTWI9ZWEubm9ybWFsc05lZWRVcGRhdGUsT2I9ZWEudGFuZ2VudHNOZWVkVXBkYXRlLGliPWVhLmNvbG9yc05lZWRVcGRhdGUsc2I9ZWEubW9ycGhUYXJnZXRzTmVlZFVwZGF0ZSxDYj1lYS52ZXJ0aWNlcywkPXYuZmFjZXMzLHhhPWVhLmZhY2VzLEhiPWVhLmZhY2VWZXJ0ZXhVdnNbMF0sT2E9ZWEuZmFjZVZlcnRleFV2c1sxXSwkYT1lYS5za2luSW5kaWNlcyxHYT1lYS5za2luV2VpZ2h0cyxuYj1lYS5tb3JwaFRhcmdldHMsYmI9ZWEubW9ycGhOb3JtYWxzO2lmKGVhLnZlcnRpY2VzTmVlZFVwZGF0ZSl7eT0wO2Zvcih6PSQubGVuZ3RoO3k8ejt5KyspQj1cclxueGFbJFt5XV0sSj1DYltCLmFdLEw9Q2JbQi5iXSxOPUNiW0IuY10sU2FbTWFdPUoueCxTYVtNYSsxXT1KLnksU2FbTWErMl09Si56LFNhW01hKzNdPUwueCxTYVtNYSs0XT1MLnksU2FbTWErNV09TC56LFNhW01hKzZdPU4ueCxTYVtNYSs3XT1OLnksU2FbTWErOF09Ti56LE1hKz05O20uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUix2Ll9fd2ViZ2xWZXJ0ZXhCdWZmZXIpO20uYnVmZmVyRGF0YShtLkFSUkFZX0JVRkZFUixTYSxEKX1pZihzYilmb3IoY2E9MCxxYT1uYi5sZW5ndGg7Y2E8cWE7Y2ErKyl7eT1yYT0wO2Zvcih6PSQubGVuZ3RoO3k8ejt5KyspbmE9JFt5XSxCPXhhW25hXSxKPW5iW2NhXS52ZXJ0aWNlc1tCLmFdLEw9bmJbY2FdLnZlcnRpY2VzW0IuYl0sTj1uYltjYV0udmVydGljZXNbQi5jXSxDYT1HYltjYV0sQ2FbcmFdPUoueCxDYVtyYSsxXT1KLnksQ2FbcmErMl09Si56LENhW3JhKzNdPUwueCxDYVtyYSs0XT1MLnksQ2FbcmErNV09TC56LENhW3JhKzZdPU4ueCxDYVtyYStcclxuN109Ti55LENhW3JhKzhdPU4ueixFLm1vcnBoTm9ybWFscyYmKEc/WGE9WWE9UWE9YmJbY2FdLmZhY2VOb3JtYWxzW25hXTood2E9YmJbY2FdLnZlcnRleE5vcm1hbHNbbmFdLFFhPXdhLmEsWWE9d2EuYixYYT13YS5jKSx0YT1CYltjYV0sdGFbcmFdPVFhLngsdGFbcmErMV09UWEueSx0YVtyYSsyXT1RYS56LHRhW3JhKzNdPVlhLngsdGFbcmErNF09WWEueSx0YVtyYSs1XT1ZYS56LHRhW3JhKzZdPVhhLngsdGFbcmErN109WGEueSx0YVtyYSs4XT1YYS56KSxyYSs9OTttLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsdi5fX3dlYmdsTW9ycGhUYXJnZXRzQnVmZmVyc1tjYV0pO20uYnVmZmVyRGF0YShtLkFSUkFZX0JVRkZFUixHYltjYV0sRCk7RS5tb3JwaE5vcm1hbHMmJihtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsdi5fX3dlYmdsTW9ycGhOb3JtYWxzQnVmZmVyc1tjYV0pLG0uYnVmZmVyRGF0YShtLkFSUkFZX0JVRkZFUixCYltjYV0sRCkpfWlmKEdhLmxlbmd0aCl7eT0wO1xyXG5mb3Ioej0kLmxlbmd0aDt5PHo7eSsrKUI9eGFbJFt5XV0sUGE9R2FbQi5hXSxrYT1HYVtCLmJdLFE9R2FbQi5jXSxGYVtsYV09UGEueCxGYVtsYSsxXT1QYS55LEZhW2xhKzJdPVBhLnosRmFbbGErM109UGEudyxGYVtsYSs0XT1rYS54LEZhW2xhKzVdPWthLnksRmFbbGErNl09a2EueixGYVtsYSs3XT1rYS53LEZhW2xhKzhdPVEueCxGYVtsYSs5XT1RLnksRmFbbGErMTBdPVEueixGYVtsYSsxMV09US53LGhhPSRhW0IuYV0saWE9JGFbQi5iXSxvYj0kYVtCLmNdLEVhW2xhXT1oYS54LEVhW2xhKzFdPWhhLnksRWFbbGErMl09aGEueixFYVtsYSszXT1oYS53LEVhW2xhKzRdPWlhLngsRWFbbGErNV09aWEueSxFYVtsYSs2XT1pYS56LEVhW2xhKzddPWlhLncsRWFbbGErOF09b2IueCxFYVtsYSs5XT1vYi55LEVhW2xhKzEwXT1vYi56LEVhW2xhKzExXT1vYi53LGxhKz0xMjswPGxhJiYobS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLHYuX193ZWJnbFNraW5JbmRpY2VzQnVmZmVyKSxcclxubS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLEVhLEQpLG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUix2Ll9fd2ViZ2xTa2luV2VpZ2h0c0J1ZmZlciksbS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLEZhLEQpKX1pZihpYil7eT0wO2Zvcih6PSQubGVuZ3RoO3k8ejt5KyspQj14YVskW3ldXSxNPUIudmVydGV4Q29sb3JzLFI9Qi5jb2xvciwzPT09TS5sZW5ndGgmJkUudmVydGV4Q29sb3JzPT09VEhSRUUuVmVydGV4Q29sb3JzPyhkYT1NWzBdLGJhPU1bMV0samE9TVsyXSk6amE9YmE9ZGE9UixEYVtIYV09ZGEucixEYVtIYSsxXT1kYS5nLERhW0hhKzJdPWRhLmIsRGFbSGErM109YmEucixEYVtIYSs0XT1iYS5nLERhW0hhKzVdPWJhLmIsRGFbSGErNl09amEucixEYVtIYSs3XT1qYS5nLERhW0hhKzhdPWphLmIsSGErPTk7MDxIYSYmKG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUix2Ll9fd2ViZ2xDb2xvckJ1ZmZlciksbS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLERhLFxyXG5EKSl9aWYoT2ImJmVhLmhhc1RhbmdlbnRzKXt5PTA7Zm9yKHo9JC5sZW5ndGg7eTx6O3krKylCPXhhWyRbeV1dLFA9Qi52ZXJ0ZXhUYW5nZW50cyxLYT1QWzBdLFY9UFsxXSxXPVBbMl0sc2FbQWFdPUthLngsc2FbQWErMV09S2EueSxzYVtBYSsyXT1LYS56LHNhW0FhKzNdPUthLncsc2FbQWErNF09Vi54LHNhW0FhKzVdPVYueSxzYVtBYSs2XT1WLnosc2FbQWErN109Vi53LHNhW0FhKzhdPVcueCxzYVtBYSs5XT1XLnksc2FbQWErMTBdPVcueixzYVtBYSsxMV09Vy53LEFhKz0xMjttLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsdi5fX3dlYmdsVGFuZ2VudEJ1ZmZlcik7bS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLHNhLEQpfWlmKE1iKXt5PTA7Zm9yKHo9JC5sZW5ndGg7eTx6O3krKylpZihCPXhhWyRbeV1dLEk9Qi52ZXJ0ZXhOb3JtYWxzLEg9Qi5ub3JtYWwsMz09PUkubGVuZ3RoJiYhMT09PUcpZm9yKFk9MDszPlk7WSsrKXBhPUlbWV0sTmFbUmFdPXBhLngsTmFbUmErMV09XHJcbnBhLnksTmFbUmErMl09cGEueixSYSs9MztlbHNlIGZvcihZPTA7Mz5ZO1krKylOYVtSYV09SC54LE5hW1JhKzFdPUgueSxOYVtSYSsyXT1ILnosUmErPTM7bS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLHYuX193ZWJnbE5vcm1hbEJ1ZmZlcik7bS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLE5hLEQpfWlmKHZiJiZIYil7eT0wO2Zvcih6PSQubGVuZ3RoO3k8ejt5KyspaWYoRj0kW3ldLFU9SGJbRl0sdm9pZCAwIT09VSlmb3IoWT0wOzM+WTtZKyspYWI9VVtZXSxBYltrYl09YWIueCxBYltrYisxXT1hYi55LGtiKz0yOzA8a2ImJihtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsdi5fX3dlYmdsVVZCdWZmZXIpLG0uYnVmZmVyRGF0YShtLkFSUkFZX0JVRkZFUixBYixEKSl9aWYodmImJk9hKXt5PTA7Zm9yKHo9JC5sZW5ndGg7eTx6O3krKylpZihGPSRbeV0sTz1PYVtGXSx2b2lkIDAhPT1PKWZvcihZPTA7Mz5ZO1krKylvYT1PW1ldLGxiW3liXT1vYS54LGxiW3liKzFdPW9hLnksXHJcbnliKz0yOzA8eWImJihtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsdi5fX3dlYmdsVVYyQnVmZmVyKSxtLmJ1ZmZlckRhdGEobS5BUlJBWV9CVUZGRVIsbGIsRCkpfWlmKGZiKXt5PTA7Zm9yKHo9JC5sZW5ndGg7eTx6O3krKylWYVt6Yl09TGEsVmFbemIrMV09TGErMSxWYVt6YisyXT1MYSsyLHpiKz0zLFRhW2ViXT1MYSxUYVtlYisxXT1MYSsxLFRhW2ViKzJdPUxhLFRhW2ViKzNdPUxhKzIsVGFbZWIrNF09TGErMSxUYVtlYis1XT1MYSsyLGViKz02LExhKz0zO20uYmluZEJ1ZmZlcihtLkVMRU1FTlRfQVJSQVlfQlVGRkVSLHYuX193ZWJnbEZhY2VCdWZmZXIpO20uYnVmZmVyRGF0YShtLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFZhLEQpO20uYmluZEJ1ZmZlcihtLkVMRU1FTlRfQVJSQVlfQlVGRkVSLHYuX193ZWJnbExpbmVCdWZmZXIpO20uYnVmZmVyRGF0YShtLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFRhLEQpfWlmKG1iKWZvcihZPTAsdWI9bWIubGVuZ3RoO1k8dWI7WSsrKWlmKEM9XHJcbm1iW1ldLEMuX19vcmlnaW5hbC5uZWVkc1VwZGF0ZSl7Sz0wO2lmKDE9PT1DLnNpemUpaWYodm9pZCAwPT09Qy5ib3VuZFRvfHxcInZlcnRpY2VzXCI9PT1DLmJvdW5kVG8pZm9yKHk9MCx6PSQubGVuZ3RoO3k8ejt5KyspQj14YVskW3ldXSxDLmFycmF5W0tdPUMudmFsdWVbQi5hXSxDLmFycmF5W0srMV09Qy52YWx1ZVtCLmJdLEMuYXJyYXlbSysyXT1DLnZhbHVlW0IuY10sSys9MztlbHNle2lmKFwiZmFjZXNcIj09PUMuYm91bmRUbylmb3IoeT0wLHo9JC5sZW5ndGg7eTx6O3krKyl6YT1DLnZhbHVlWyRbeV1dLEMuYXJyYXlbS109emEsQy5hcnJheVtLKzFdPXphLEMuYXJyYXlbSysyXT16YSxLKz0zfWVsc2UgaWYoMj09PUMuc2l6ZSlpZih2b2lkIDA9PT1DLmJvdW5kVG98fFwidmVydGljZXNcIj09PUMuYm91bmRUbylmb3IoeT0wLHo9JC5sZW5ndGg7eTx6O3krKylCPXhhWyRbeV1dLEo9Qy52YWx1ZVtCLmFdLEw9Qy52YWx1ZVtCLmJdLE49Qy52YWx1ZVtCLmNdLEMuYXJyYXlbS109Si54LFxyXG5DLmFycmF5W0srMV09Si55LEMuYXJyYXlbSysyXT1MLngsQy5hcnJheVtLKzNdPUwueSxDLmFycmF5W0srNF09Ti54LEMuYXJyYXlbSys1XT1OLnksSys9NjtlbHNle2lmKFwiZmFjZXNcIj09PUMuYm91bmRUbylmb3IoeT0wLHo9JC5sZW5ndGg7eTx6O3krKylOPUw9Sj16YT1DLnZhbHVlWyRbeV1dLEMuYXJyYXlbS109Si54LEMuYXJyYXlbSysxXT1KLnksQy5hcnJheVtLKzJdPUwueCxDLmFycmF5W0srM109TC55LEMuYXJyYXlbSys0XT1OLngsQy5hcnJheVtLKzVdPU4ueSxLKz02fWVsc2UgaWYoMz09PUMuc2l6ZSl7dmFyIFQ7VD1cImNcIj09PUMudHlwZT9bXCJyXCIsXCJnXCIsXCJiXCJdOltcInhcIixcInlcIixcInpcIl07aWYodm9pZCAwPT09Qy5ib3VuZFRvfHxcInZlcnRpY2VzXCI9PT1DLmJvdW5kVG8pZm9yKHk9MCx6PSQubGVuZ3RoO3k8ejt5KyspQj14YVskW3ldXSxKPUMudmFsdWVbQi5hXSxMPUMudmFsdWVbQi5iXSxOPUMudmFsdWVbQi5jXSxDLmFycmF5W0tdPUpbVFswXV0sQy5hcnJheVtLKzFdPVxyXG5KW1RbMV1dLEMuYXJyYXlbSysyXT1KW1RbMl1dLEMuYXJyYXlbSyszXT1MW1RbMF1dLEMuYXJyYXlbSys0XT1MW1RbMV1dLEMuYXJyYXlbSys1XT1MW1RbMl1dLEMuYXJyYXlbSys2XT1OW1RbMF1dLEMuYXJyYXlbSys3XT1OW1RbMV1dLEMuYXJyYXlbSys4XT1OW1RbMl1dLEsrPTk7ZWxzZSBpZihcImZhY2VzXCI9PT1DLmJvdW5kVG8pZm9yKHk9MCx6PSQubGVuZ3RoO3k8ejt5KyspTj1MPUo9emE9Qy52YWx1ZVskW3ldXSxDLmFycmF5W0tdPUpbVFswXV0sQy5hcnJheVtLKzFdPUpbVFsxXV0sQy5hcnJheVtLKzJdPUpbVFsyXV0sQy5hcnJheVtLKzNdPUxbVFswXV0sQy5hcnJheVtLKzRdPUxbVFsxXV0sQy5hcnJheVtLKzVdPUxbVFsyXV0sQy5hcnJheVtLKzZdPU5bVFswXV0sQy5hcnJheVtLKzddPU5bVFsxXV0sQy5hcnJheVtLKzhdPU5bVFsyXV0sSys9OTtlbHNlIGlmKFwiZmFjZVZlcnRpY2VzXCI9PT1DLmJvdW5kVG8pZm9yKHk9MCx6PSQubGVuZ3RoO3k8ejt5KyspemE9Qy52YWx1ZVskW3ldXSxcclxuSj16YVswXSxMPXphWzFdLE49emFbMl0sQy5hcnJheVtLXT1KW1RbMF1dLEMuYXJyYXlbSysxXT1KW1RbMV1dLEMuYXJyYXlbSysyXT1KW1RbMl1dLEMuYXJyYXlbSyszXT1MW1RbMF1dLEMuYXJyYXlbSys0XT1MW1RbMV1dLEMuYXJyYXlbSys1XT1MW1RbMl1dLEMuYXJyYXlbSys2XT1OW1RbMF1dLEMuYXJyYXlbSys3XT1OW1RbMV1dLEMuYXJyYXlbSys4XT1OW1RbMl1dLEsrPTl9ZWxzZSBpZig0PT09Qy5zaXplKWlmKHZvaWQgMD09PUMuYm91bmRUb3x8XCJ2ZXJ0aWNlc1wiPT09Qy5ib3VuZFRvKWZvcih5PTAsej0kLmxlbmd0aDt5PHo7eSsrKUI9eGFbJFt5XV0sSj1DLnZhbHVlW0IuYV0sTD1DLnZhbHVlW0IuYl0sTj1DLnZhbHVlW0IuY10sQy5hcnJheVtLXT1KLngsQy5hcnJheVtLKzFdPUoueSxDLmFycmF5W0srMl09Si56LEMuYXJyYXlbSyszXT1KLncsQy5hcnJheVtLKzRdPUwueCxDLmFycmF5W0srNV09TC55LEMuYXJyYXlbSys2XT1MLnosQy5hcnJheVtLKzddPUwudyxDLmFycmF5W0srXHJcbjhdPU4ueCxDLmFycmF5W0srOV09Ti55LEMuYXJyYXlbSysxMF09Ti56LEMuYXJyYXlbSysxMV09Ti53LEsrPTEyO2Vsc2UgaWYoXCJmYWNlc1wiPT09Qy5ib3VuZFRvKWZvcih5PTAsej0kLmxlbmd0aDt5PHo7eSsrKU49TD1KPXphPUMudmFsdWVbJFt5XV0sQy5hcnJheVtLXT1KLngsQy5hcnJheVtLKzFdPUoueSxDLmFycmF5W0srMl09Si56LEMuYXJyYXlbSyszXT1KLncsQy5hcnJheVtLKzRdPUwueCxDLmFycmF5W0srNV09TC55LEMuYXJyYXlbSys2XT1MLnosQy5hcnJheVtLKzddPUwudyxDLmFycmF5W0srOF09Ti54LEMuYXJyYXlbSys5XT1OLnksQy5hcnJheVtLKzEwXT1OLnosQy5hcnJheVtLKzExXT1OLncsSys9MTI7ZWxzZSBpZihcImZhY2VWZXJ0aWNlc1wiPT09Qy5ib3VuZFRvKWZvcih5PTAsej0kLmxlbmd0aDt5PHo7eSsrKXphPUMudmFsdWVbJFt5XV0sSj16YVswXSxMPXphWzFdLE49emFbMl0sQy5hcnJheVtLXT1KLngsQy5hcnJheVtLKzFdPUoueSxDLmFycmF5W0srMl09XHJcbkoueixDLmFycmF5W0srM109Si53LEMuYXJyYXlbSys0XT1MLngsQy5hcnJheVtLKzVdPUwueSxDLmFycmF5W0srNl09TC56LEMuYXJyYXlbSys3XT1MLncsQy5hcnJheVtLKzhdPU4ueCxDLmFycmF5W0srOV09Ti55LEMuYXJyYXlbSysxMF09Ti56LEMuYXJyYXlbSysxMV09Ti53LEsrPTEyO20uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixDLmJ1ZmZlcik7bS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLEMuYXJyYXksRCl9QSYmKGRlbGV0ZSB2Ll9faW5pdHRlZEFycmF5cyxkZWxldGUgdi5fX2NvbG9yQXJyYXksZGVsZXRlIHYuX19ub3JtYWxBcnJheSxkZWxldGUgdi5fX3RhbmdlbnRBcnJheSxkZWxldGUgdi5fX3V2QXJyYXksZGVsZXRlIHYuX191djJBcnJheSxkZWxldGUgdi5fX2ZhY2VBcnJheSxkZWxldGUgdi5fX3ZlcnRleEFycmF5LGRlbGV0ZSB2Ll9fbGluZUFycmF5LGRlbGV0ZSB2Ll9fc2tpbkluZGV4QXJyYXksZGVsZXRlIHYuX19za2luV2VpZ2h0QXJyYXkpfX19Yi52ZXJ0aWNlc05lZWRVcGRhdGU9XHJcbiExO2IubW9ycGhUYXJnZXRzTmVlZFVwZGF0ZT0hMTtiLmVsZW1lbnRzTmVlZFVwZGF0ZT0hMTtiLnV2c05lZWRVcGRhdGU9ITE7Yi5ub3JtYWxzTmVlZFVwZGF0ZT0hMTtiLmNvbG9yc05lZWRVcGRhdGU9ITE7Yi50YW5nZW50c05lZWRVcGRhdGU9ITE7dy5hdHRyaWJ1dGVzJiZzKHcpfWVsc2UgaWYoYSBpbnN0YW5jZW9mIFRIUkVFLkxpbmUpe3c9YyhhLGIpO3U9dy5hdHRyaWJ1dGVzJiZyKHcpO2lmKGIudmVydGljZXNOZWVkVXBkYXRlfHxiLmNvbG9yc05lZWRVcGRhdGV8fGIubGluZURpc3RhbmNlc05lZWRVcGRhdGV8fHUpe3ZhciBEYj1tLkRZTkFNSUNfRFJBVyxTLGFhLFosQmEsWCxFYixSYj1iLnZlcnRpY2VzLEliPWIuY29sb3JzLGdiPWIubGluZURpc3RhbmNlcyx5YT1SYi5sZW5ndGgscGI9SWIubGVuZ3RoLHFiPWdiLmxlbmd0aCxXYT1iLl9fdmVydGV4QXJyYXksdGI9Yi5fX2NvbG9yQXJyYXksaGI9Yi5fX2xpbmVEaXN0YW5jZUFycmF5LCRiPWIuY29sb3JzTmVlZFVwZGF0ZSxcclxuRmI9Yi5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSxTYj1iLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdCxKYixjYix1YSxLYixJYSxmYTtpZihiLnZlcnRpY2VzTmVlZFVwZGF0ZSl7Zm9yKFM9MDtTPHlhO1MrKylCYT1SYltTXSxYPTMqUyxXYVtYXT1CYS54LFdhW1grMV09QmEueSxXYVtYKzJdPUJhLno7bS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLGIuX193ZWJnbFZlcnRleEJ1ZmZlcik7bS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLFdhLERiKX1pZigkYil7Zm9yKGFhPTA7YWE8cGI7YWErKylFYj1JYlthYV0sWD0zKmFhLHRiW1hdPUViLnIsdGJbWCsxXT1FYi5nLHRiW1grMl09RWIuYjttLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsYi5fX3dlYmdsQ29sb3JCdWZmZXIpO20uYnVmZmVyRGF0YShtLkFSUkFZX0JVRkZFUix0YixEYil9aWYoRmIpe2ZvcihaPTA7WjxxYjtaKyspaGJbWl09Z2JbWl07bS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLGIuX193ZWJnbExpbmVEaXN0YW5jZUJ1ZmZlcik7XHJcbm0uYnVmZmVyRGF0YShtLkFSUkFZX0JVRkZFUixoYixEYil9aWYoU2IpZm9yKEpiPTAsY2I9U2IubGVuZ3RoO0piPGNiO0piKyspaWYoZmE9U2JbSmJdLGZhLm5lZWRzVXBkYXRlJiYodm9pZCAwPT09ZmEuYm91bmRUb3x8XCJ2ZXJ0aWNlc1wiPT09ZmEuYm91bmRUbykpe1g9MDtLYj1mYS52YWx1ZS5sZW5ndGg7aWYoMT09PWZhLnNpemUpZm9yKHVhPTA7dWE8S2I7dWErKylmYS5hcnJheVt1YV09ZmEudmFsdWVbdWFdO2Vsc2UgaWYoMj09PWZhLnNpemUpZm9yKHVhPTA7dWE8S2I7dWErKylJYT1mYS52YWx1ZVt1YV0sZmEuYXJyYXlbWF09SWEueCxmYS5hcnJheVtYKzFdPUlhLnksWCs9MjtlbHNlIGlmKDM9PT1mYS5zaXplKWlmKFwiY1wiPT09ZmEudHlwZSlmb3IodWE9MDt1YTxLYjt1YSsrKUlhPWZhLnZhbHVlW3VhXSxmYS5hcnJheVtYXT1JYS5yLGZhLmFycmF5W1grMV09SWEuZyxmYS5hcnJheVtYKzJdPUlhLmIsWCs9MztlbHNlIGZvcih1YT0wO3VhPEtiO3VhKyspSWE9ZmEudmFsdWVbdWFdLFxyXG5mYS5hcnJheVtYXT1JYS54LGZhLmFycmF5W1grMV09SWEueSxmYS5hcnJheVtYKzJdPUlhLnosWCs9MztlbHNlIGlmKDQ9PT1mYS5zaXplKWZvcih1YT0wO3VhPEtiO3VhKyspSWE9ZmEudmFsdWVbdWFdLGZhLmFycmF5W1hdPUlhLngsZmEuYXJyYXlbWCsxXT1JYS55LGZhLmFycmF5W1grMl09SWEueixmYS5hcnJheVtYKzNdPUlhLncsWCs9NDttLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsZmEuYnVmZmVyKTttLmJ1ZmZlckRhdGEobS5BUlJBWV9CVUZGRVIsZmEuYXJyYXksRGIpO2ZhLm5lZWRzVXBkYXRlPSExfX1iLnZlcnRpY2VzTmVlZFVwZGF0ZT0hMTtiLmNvbG9yc05lZWRVcGRhdGU9ITE7Yi5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZT0hMTt3LmF0dHJpYnV0ZXMmJnModyl9ZWxzZSBpZihhIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRDbG91ZCl7dz1jKGEsYik7dT13LmF0dHJpYnV0ZXMmJnIodyk7aWYoYi52ZXJ0aWNlc05lZWRVcGRhdGV8fGIuY29sb3JzTmVlZFVwZGF0ZXx8XHJcbnUpe3ZhciBkYj1tLkRZTkFNSUNfRFJBVyxUYixVYixhYyxtYSxiYyxOYj1iLnZlcnRpY2VzLFZiPU5iLmxlbmd0aCxQYj1iLmNvbG9ycyxyYj1QYi5sZW5ndGgsY2M9Yi5fX3ZlcnRleEFycmF5LGRjPWIuX19jb2xvckFycmF5LHdiPWIuY29sb3JzTmVlZFVwZGF0ZSxnYz1iLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdCxlYyxqYix2YSxMYixKYSxnYTtpZihiLnZlcnRpY2VzTmVlZFVwZGF0ZSl7Zm9yKFRiPTA7VGI8VmI7VGIrKylhYz1OYltUYl0sbWE9MypUYixjY1ttYV09YWMueCxjY1ttYSsxXT1hYy55LGNjW21hKzJdPWFjLno7bS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLGIuX193ZWJnbFZlcnRleEJ1ZmZlcik7bS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLGNjLGRiKX1pZih3Yil7Zm9yKFViPTA7VWI8cmI7VWIrKyliYz1QYltVYl0sbWE9MypVYixkY1ttYV09YmMucixkY1ttYSsxXT1iYy5nLGRjW21hKzJdPWJjLmI7bS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLFxyXG5iLl9fd2ViZ2xDb2xvckJ1ZmZlcik7bS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLGRjLGRiKX1pZihnYylmb3IoZWM9MCxqYj1nYy5sZW5ndGg7ZWM8amI7ZWMrKyl7Z2E9Z2NbZWNdO2lmKGdhLm5lZWRzVXBkYXRlJiYodm9pZCAwPT09Z2EuYm91bmRUb3x8XCJ2ZXJ0aWNlc1wiPT09Z2EuYm91bmRUbykpaWYoTGI9Z2EudmFsdWUubGVuZ3RoLG1hPTAsMT09PWdhLnNpemUpZm9yKHZhPTA7dmE8TGI7dmErKylnYS5hcnJheVt2YV09Z2EudmFsdWVbdmFdO2Vsc2UgaWYoMj09PWdhLnNpemUpZm9yKHZhPTA7dmE8TGI7dmErKylKYT1nYS52YWx1ZVt2YV0sZ2EuYXJyYXlbbWFdPUphLngsZ2EuYXJyYXlbbWErMV09SmEueSxtYSs9MjtlbHNlIGlmKDM9PT1nYS5zaXplKWlmKFwiY1wiPT09Z2EudHlwZSlmb3IodmE9MDt2YTxMYjt2YSsrKUphPWdhLnZhbHVlW3ZhXSxnYS5hcnJheVttYV09SmEucixnYS5hcnJheVttYSsxXT1KYS5nLGdhLmFycmF5W21hKzJdPUphLmIsbWErPTM7ZWxzZSBmb3IodmE9XHJcbjA7dmE8TGI7dmErKylKYT1nYS52YWx1ZVt2YV0sZ2EuYXJyYXlbbWFdPUphLngsZ2EuYXJyYXlbbWErMV09SmEueSxnYS5hcnJheVttYSsyXT1KYS56LG1hKz0zO2Vsc2UgaWYoND09PWdhLnNpemUpZm9yKHZhPTA7dmE8TGI7dmErKylKYT1nYS52YWx1ZVt2YV0sZ2EuYXJyYXlbbWFdPUphLngsZ2EuYXJyYXlbbWErMV09SmEueSxnYS5hcnJheVttYSsyXT1KYS56LGdhLmFycmF5W21hKzNdPUphLncsbWErPTQ7bS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLGdhLmJ1ZmZlcik7bS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLGdhLmFycmF5LGRiKTtnYS5uZWVkc1VwZGF0ZT0hMX19Yi52ZXJ0aWNlc05lZWRVcGRhdGU9ITE7Yi5jb2xvcnNOZWVkVXBkYXRlPSExO3cuYXR0cmlidXRlcyYmcyh3KX19ZnVuY3Rpb24gcihhKXtmb3IodmFyIGIgaW4gYS5hdHRyaWJ1dGVzKWlmKGEuYXR0cmlidXRlc1tiXS5uZWVkc1VwZGF0ZSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBzKGEpe2Zvcih2YXIgYiBpbiBhLmF0dHJpYnV0ZXMpYS5hdHRyaWJ1dGVzW2JdLm5lZWRzVXBkYXRlPVxyXG4hMX1mdW5jdGlvbiB1KGEpeyEwPT09YS50cmFuc3BhcmVudD9XLnNldEJsZW5kaW5nKGEuYmxlbmRpbmcsYS5ibGVuZEVxdWF0aW9uLGEuYmxlbmRTcmMsYS5ibGVuZERzdCxhLmJsZW5kRXF1YXRpb25BbHBoYSxhLmJsZW5kU3JjQWxwaGEsYS5ibGVuZERzdEFscGhhKTpXLnNldEJsZW5kaW5nKFRIUkVFLk5vQmxlbmRpbmcpO1cuc2V0RGVwdGhUZXN0KGEuZGVwdGhUZXN0KTtXLnNldERlcHRoV3JpdGUoYS5kZXB0aFdyaXRlKTtXLnNldENvbG9yV3JpdGUoYS5jb2xvcldyaXRlKTtXLnNldFBvbHlnb25PZmZzZXQoYS5wb2x5Z29uT2Zmc2V0LGEucG9seWdvbk9mZnNldEZhY3RvcixhLnBvbHlnb25PZmZzZXRVbml0cyl9ZnVuY3Rpb24gdihhLGIsYyxkLGUpe3ZhciBmLGcsaCxrO01iPTA7aWYoZC5uZWVkc1VwZGF0ZSl7ZC5wcm9ncmFtJiZoYyhkKTtkLmFkZEV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsaWMpO3ZhciBuPXBjW2QudHlwZV07aWYobil7dmFyIGw9VEhSRUUuU2hhZGVyTGliW25dO1xyXG5kLl9fd2ViZ2xTaGFkZXI9e3VuaWZvcm1zOlRIUkVFLlVuaWZvcm1zVXRpbHMuY2xvbmUobC51bmlmb3JtcyksdmVydGV4U2hhZGVyOmwudmVydGV4U2hhZGVyLGZyYWdtZW50U2hhZGVyOmwuZnJhZ21lbnRTaGFkZXJ9fWVsc2UgZC5fX3dlYmdsU2hhZGVyPXt1bmlmb3JtczpkLnVuaWZvcm1zLHZlcnRleFNoYWRlcjpkLnZlcnRleFNoYWRlcixmcmFnbWVudFNoYWRlcjpkLmZyYWdtZW50U2hhZGVyfTtmb3IodmFyIHA9MCxxPTAscj0wLHM9MCx0PTAsdz1iLmxlbmd0aDt0PHc7dCsrKXt2YXIgdj1iW3RdO3Yub25seVNoYWRvd3x8ITE9PT12LnZpc2libGV8fCh2IGluc3RhbmNlb2YgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCYmcCsrLHYgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludExpZ2h0JiZxKyssdiBpbnN0YW5jZW9mIFRIUkVFLlNwb3RMaWdodCYmcisrLHYgaW5zdGFuY2VvZiBUSFJFRS5IZW1pc3BoZXJlTGlnaHQmJnMrKyl9Zj1wO2c9cTtoPXI7az1zO2Zvcih2YXIgdSx6PTAsRz1cclxuMCxGPWIubGVuZ3RoO0c8RjtHKyspe3ZhciBKPWJbR107Si5jYXN0U2hhZG93JiYoSiBpbnN0YW5jZW9mIFRIUkVFLlNwb3RMaWdodCYmeisrLEogaW5zdGFuY2VvZiBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0JiYhSi5zaGFkb3dDYXNjYWRlJiZ6KyspfXU9ejt2YXIgSDtpZihOYiYmZSYmZS5za2VsZXRvbiYmZS5za2VsZXRvbi51c2VWZXJ0ZXhUZXh0dXJlKUg9MTAyNDtlbHNle3ZhciBOPW0uZ2V0UGFyYW1ldGVyKG0uTUFYX1ZFUlRFWF9VTklGT1JNX1ZFQ1RPUlMpLE09TWF0aC5mbG9vcigoTi0yMCkvNCk7dm9pZCAwIT09ZSYmZSBpbnN0YW5jZW9mIFRIUkVFLlNraW5uZWRNZXNoJiYoTT1NYXRoLm1pbihlLnNrZWxldG9uLmJvbmVzLmxlbmd0aCxNKSxNPGUuc2tlbGV0b24uYm9uZXMubGVuZ3RoJiZUSFJFRS53YXJuKFwiV2ViR0xSZW5kZXJlcjogdG9vIG1hbnkgYm9uZXMgLSBcIitlLnNrZWxldG9uLmJvbmVzLmxlbmd0aCtcIiwgdGhpcyBHUFUgc3VwcG9ydHMganVzdCBcIitNK1wiICh0cnkgT3BlbkdMIGluc3RlYWQgb2YgQU5HTEUpXCIpKTtcclxuSD1NfXZhciBQPXtwcmVjaXNpb246TCxzdXBwb3J0c1ZlcnRleFRleHR1cmVzOlZiLG1hcDohIWQubWFwLGVudk1hcDohIWQuZW52TWFwLGVudk1hcE1vZGU6ZC5lbnZNYXAmJmQuZW52TWFwLm1hcHBpbmcsbGlnaHRNYXA6ISFkLmxpZ2h0TWFwLGJ1bXBNYXA6ISFkLmJ1bXBNYXAsbm9ybWFsTWFwOiEhZC5ub3JtYWxNYXAsc3BlY3VsYXJNYXA6ISFkLnNwZWN1bGFyTWFwLGFscGhhTWFwOiEhZC5hbHBoYU1hcCxjb21iaW5lOmQuY29tYmluZSx2ZXJ0ZXhDb2xvcnM6ZC52ZXJ0ZXhDb2xvcnMsZm9nOmMsdXNlRm9nOmQuZm9nLGZvZ0V4cDpjIGluc3RhbmNlb2YgVEhSRUUuRm9nRXhwMixmbGF0U2hhZGluZzpkLnNoYWRpbmc9PT1USFJFRS5GbGF0U2hhZGluZyxzaXplQXR0ZW51YXRpb246ZC5zaXplQXR0ZW51YXRpb24sbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjpqYSxza2lubmluZzpkLnNraW5uaW5nLG1heEJvbmVzOkgsdXNlVmVydGV4VGV4dHVyZTpOYiYmZSYmZS5za2VsZXRvbiYmXHJcbmUuc2tlbGV0b24udXNlVmVydGV4VGV4dHVyZSxtb3JwaFRhcmdldHM6ZC5tb3JwaFRhcmdldHMsbW9ycGhOb3JtYWxzOmQubW9ycGhOb3JtYWxzLG1heE1vcnBoVGFyZ2V0czpCLm1heE1vcnBoVGFyZ2V0cyxtYXhNb3JwaE5vcm1hbHM6Qi5tYXhNb3JwaE5vcm1hbHMsbWF4RGlyTGlnaHRzOmYsbWF4UG9pbnRMaWdodHM6ZyxtYXhTcG90TGlnaHRzOmgsbWF4SGVtaUxpZ2h0czprLG1heFNoYWRvd3M6dSxzaGFkb3dNYXBFbmFibGVkOkIuc2hhZG93TWFwRW5hYmxlZCYmZS5yZWNlaXZlU2hhZG93JiYwPHUsc2hhZG93TWFwVHlwZTpCLnNoYWRvd01hcFR5cGUsc2hhZG93TWFwRGVidWc6Qi5zaGFkb3dNYXBEZWJ1ZyxzaGFkb3dNYXBDYXNjYWRlOkIuc2hhZG93TWFwQ2FzY2FkZSxhbHBoYVRlc3Q6ZC5hbHBoYVRlc3QsbWV0YWw6ZC5tZXRhbCx3cmFwQXJvdW5kOmQud3JhcEFyb3VuZCxkb3VibGVTaWRlZDpkLnNpZGU9PT1USFJFRS5Eb3VibGVTaWRlLGZsaXBTaWRlZDpkLnNpZGU9PT1cclxuVEhSRUUuQmFja1NpZGV9LFI9W107bj9SLnB1c2gobik6KFIucHVzaChkLmZyYWdtZW50U2hhZGVyKSxSLnB1c2goZC52ZXJ0ZXhTaGFkZXIpKTtpZih2b2lkIDAhPT1kLmRlZmluZXMpZm9yKHZhciBPIGluIGQuZGVmaW5lcylSLnB1c2goTyksUi5wdXNoKGQuZGVmaW5lc1tPXSk7Zm9yKE8gaW4gUClSLnB1c2goTyksUi5wdXNoKFBbT10pO2Zvcih2YXIgS2E9Ui5qb2luKCksVixXPTAsUWE9UGEubGVuZ3RoO1c8UWE7VysrKXt2YXIgWWE9UGFbV107aWYoWWEuY29kZT09PUthKXtWPVlhO1YudXNlZFRpbWVzKys7YnJlYWt9fXZvaWQgMD09PVYmJihWPW5ldyBUSFJFRS5XZWJHTFByb2dyYW0oQixLYSxkLFApLFBhLnB1c2goViksQi5pbmZvLm1lbW9yeS5wcm9ncmFtcz1QYS5sZW5ndGgpO2QucHJvZ3JhbT1WO3ZhciBYYT1WLmF0dHJpYnV0ZXM7aWYoZC5tb3JwaFRhcmdldHMpe2QubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzPTA7Zm9yKHZhciBjYSxkYT1cIm1vcnBoVGFyZ2V0XCIsYmE9XHJcbjA7YmE8Qi5tYXhNb3JwaFRhcmdldHM7YmErKyljYT1kYStiYSwwPD1YYVtjYV0mJmQubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzKyt9aWYoZC5tb3JwaE5vcm1hbHMpZm9yKGQubnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzPTAsZGE9XCJtb3JwaE5vcm1hbFwiLGJhPTA7YmE8Qi5tYXhNb3JwaE5vcm1hbHM7YmErKyljYT1kYStiYSwwPD1YYVtjYV0mJmQubnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzKys7ZC51bmlmb3Jtc0xpc3Q9W107Zm9yKHZhciBoYSBpbiBkLl9fd2ViZ2xTaGFkZXIudW5pZm9ybXMpe3ZhciB0YT1kLnByb2dyYW0udW5pZm9ybXNbaGFdO3RhJiZkLnVuaWZvcm1zTGlzdC5wdXNoKFtkLl9fd2ViZ2xTaGFkZXIudW5pZm9ybXNbaGFdLHRhXSl9ZC5uZWVkc1VwZGF0ZT0hMX1kLm1vcnBoVGFyZ2V0cyYmIWUuX193ZWJnbE1vcnBoVGFyZ2V0SW5mbHVlbmNlcyYmKGUuX193ZWJnbE1vcnBoVGFyZ2V0SW5mbHVlbmNlcz1uZXcgRmxvYXQzMkFycmF5KEIubWF4TW9ycGhUYXJnZXRzKSk7XHJcbnZhciBhYj0hMSxvYT0hMSxxYT0hMSxVYT1kLnByb2dyYW0sa2E9VWEudW5pZm9ybXMsUT1kLl9fd2ViZ2xTaGFkZXIudW5pZm9ybXM7VWEuaWQhPT1vYiYmKG0udXNlUHJvZ3JhbShVYS5wcm9ncmFtKSxvYj1VYS5pZCxxYT1vYT1hYj0hMCk7ZC5pZCE9PXViJiYoLTE9PT11YiYmKHFhPSEwKSx1Yj1kLmlkLG9hPSEwKTtpZihhYnx8YSE9PXZiKW0udW5pZm9ybU1hdHJpeDRmdihrYS5wcm9qZWN0aW9uTWF0cml4LCExLGEucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cyksamEmJm0udW5pZm9ybTFmKGthLmxvZ0RlcHRoQnVmRkMsMi8oTWF0aC5sb2coYS5mYXIrMSkvTWF0aC5MTjIpKSxhIT09dmImJih2Yj1hKSwoZCBpbnN0YW5jZW9mIFRIUkVFLlNoYWRlck1hdGVyaWFsfHxkIGluc3RhbmNlb2YgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWx8fGQuZW52TWFwKSYmbnVsbCE9PWthLmNhbWVyYVBvc2l0aW9uJiYod2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGEubWF0cml4V29ybGQpLG0udW5pZm9ybTNmKGthLmNhbWVyYVBvc2l0aW9uLFxyXG53YS54LHdhLnksd2EueikpLChkIGluc3RhbmNlb2YgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWx8fGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsfHxkIGluc3RhbmNlb2YgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWx8fGQgaW5zdGFuY2VvZiBUSFJFRS5TaGFkZXJNYXRlcmlhbHx8ZC5za2lubmluZykmJm51bGwhPT1rYS52aWV3TWF0cml4JiZtLnVuaWZvcm1NYXRyaXg0ZnYoa2Eudmlld01hdHJpeCwhMSxhLm1hdHJpeFdvcmxkSW52ZXJzZS5lbGVtZW50cyk7aWYoZC5za2lubmluZylpZihlLmJpbmRNYXRyaXgmJm51bGwhPT1rYS5iaW5kTWF0cml4JiZtLnVuaWZvcm1NYXRyaXg0ZnYoa2EuYmluZE1hdHJpeCwhMSxlLmJpbmRNYXRyaXguZWxlbWVudHMpLGUuYmluZE1hdHJpeEludmVyc2UmJm51bGwhPT1rYS5iaW5kTWF0cml4SW52ZXJzZSYmbS51bmlmb3JtTWF0cml4NGZ2KGthLmJpbmRNYXRyaXhJbnZlcnNlLCExLGUuYmluZE1hdHJpeEludmVyc2UuZWxlbWVudHMpLFxyXG5OYiYmZS5za2VsZXRvbiYmZS5za2VsZXRvbi51c2VWZXJ0ZXhUZXh0dXJlKXtpZihudWxsIT09a2EuYm9uZVRleHR1cmUpe3ZhciBkYj1EKCk7bS51bmlmb3JtMWkoa2EuYm9uZVRleHR1cmUsZGIpO0Iuc2V0VGV4dHVyZShlLnNrZWxldG9uLmJvbmVUZXh0dXJlLGRiKX1udWxsIT09a2EuYm9uZVRleHR1cmVXaWR0aCYmbS51bmlmb3JtMWkoa2EuYm9uZVRleHR1cmVXaWR0aCxlLnNrZWxldG9uLmJvbmVUZXh0dXJlV2lkdGgpO251bGwhPT1rYS5ib25lVGV4dHVyZUhlaWdodCYmbS51bmlmb3JtMWkoa2EuYm9uZVRleHR1cmVIZWlnaHQsZS5za2VsZXRvbi5ib25lVGV4dHVyZUhlaWdodCl9ZWxzZSBlLnNrZWxldG9uJiZlLnNrZWxldG9uLmJvbmVNYXRyaWNlcyYmbnVsbCE9PWthLmJvbmVHbG9iYWxNYXRyaWNlcyYmbS51bmlmb3JtTWF0cml4NGZ2KGthLmJvbmVHbG9iYWxNYXRyaWNlcywhMSxlLnNrZWxldG9uLmJvbmVNYXRyaWNlcyk7aWYob2Epe2MmJmQuZm9nJiYoUS5mb2dDb2xvci52YWx1ZT1cclxuYy5jb2xvcixjIGluc3RhbmNlb2YgVEhSRUUuRm9nPyhRLmZvZ05lYXIudmFsdWU9Yy5uZWFyLFEuZm9nRmFyLnZhbHVlPWMuZmFyKTpjIGluc3RhbmNlb2YgVEhSRUUuRm9nRXhwMiYmKFEuZm9nRGVuc2l0eS52YWx1ZT1jLmRlbnNpdHkpKTtpZihkIGluc3RhbmNlb2YgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWx8fGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsfHxkLmxpZ2h0cyl7aWYoT2Ipe3ZhciBxYT0hMCxpYSxaYSxZLGJiPTAsY2I9MCxpYj0wLHhiLHBiLHFiLENhLGpiLG5hPWpjLHJiPW5hLmRpcmVjdGlvbmFsLmNvbG9ycyxMYT1uYS5kaXJlY3Rpb25hbC5wb3NpdGlvbnMsTWE9bmEucG9pbnQuY29sb3JzLGtiPW5hLnBvaW50LnBvc2l0aW9ucyx5Yj1uYS5wb2ludC5kaXN0YW5jZXMsemI9bmEucG9pbnQuZGVjYXlzLFJhPW5hLnNwb3QuY29sb3JzLEFhPW5hLnNwb3QucG9zaXRpb25zLGViPW5hLnNwb3QuZGlzdGFuY2VzLEhhPW5hLnNwb3QuZGlyZWN0aW9ucyxcclxubGE9bmEuc3BvdC5hbmdsZXNDb3MscmE9bmEuc3BvdC5leHBvbmVudHMsSz1uYS5zcG90LmRlY2F5cyx6YT1uYS5oZW1pLnNreUNvbG9ycyxTYT1uYS5oZW1pLmdyb3VuZENvbG9ycyxBYj1uYS5oZW1pLnBvc2l0aW9ucyxsYj0wLE5hPTAsc2E9MCxEYT0wLEVhPTAsRmE9MCxHYj0wLEJiPTAsbWI9MCxDPTAsVmE9MCxUYT0wO2lhPTA7Zm9yKFphPWIubGVuZ3RoO2lhPFphO2lhKyspWT1iW2lhXSxZLm9ubHlTaGFkb3d8fCh4Yj1ZLmNvbG9yLENhPVkuaW50ZW5zaXR5LGpiPVkuZGlzdGFuY2UsWSBpbnN0YW5jZW9mIFRIUkVFLkFtYmllbnRMaWdodD9ZLnZpc2libGUmJihiYis9eGIucixjYis9eGIuZyxpYis9eGIuYik6WSBpbnN0YW5jZW9mIFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQ/KEVhKz0xLFkudmlzaWJsZSYmKHBhLnNldEZyb21NYXRyaXhQb3NpdGlvbihZLm1hdHJpeFdvcmxkKSx3YS5zZXRGcm9tTWF0cml4UG9zaXRpb24oWS50YXJnZXQubWF0cml4V29ybGQpLHBhLnN1Yih3YSksXHJcbnBhLm5vcm1hbGl6ZSgpLG1iPTMqbGIsTGFbbWJdPXBhLngsTGFbbWIrMV09cGEueSxMYVttYisyXT1wYS56LHkocmIsbWIseGIsQ2EpLGxiKz0xKSk6WSBpbnN0YW5jZW9mIFRIUkVFLlBvaW50TGlnaHQ/KEZhKz0xLFkudmlzaWJsZSYmKEM9MypOYSx5KE1hLEMseGIsQ2EpLHdhLnNldEZyb21NYXRyaXhQb3NpdGlvbihZLm1hdHJpeFdvcmxkKSxrYltDXT13YS54LGtiW0MrMV09d2EueSxrYltDKzJdPXdhLnoseWJbTmFdPWpiLHpiW05hXT0wPT09WS5kaXN0YW5jZT8wOlkuZGVjYXksTmErPTEpKTpZIGluc3RhbmNlb2YgVEhSRUUuU3BvdExpZ2h0PyhHYis9MSxZLnZpc2libGUmJihWYT0zKnNhLHkoUmEsVmEseGIsQ2EpLHBhLnNldEZyb21NYXRyaXhQb3NpdGlvbihZLm1hdHJpeFdvcmxkKSxBYVtWYV09cGEueCxBYVtWYSsxXT1wYS55LEFhW1ZhKzJdPXBhLnosZWJbc2FdPWpiLHdhLnNldEZyb21NYXRyaXhQb3NpdGlvbihZLnRhcmdldC5tYXRyaXhXb3JsZCkscGEuc3ViKHdhKSxcclxucGEubm9ybWFsaXplKCksSGFbVmFdPXBhLngsSGFbVmErMV09cGEueSxIYVtWYSsyXT1wYS56LGxhW3NhXT1NYXRoLmNvcyhZLmFuZ2xlKSxyYVtzYV09WS5leHBvbmVudCxLW3NhXT0wPT09WS5kaXN0YW5jZT8wOlkuZGVjYXksc2ErPTEpKTpZIGluc3RhbmNlb2YgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0JiYoQmIrPTEsWS52aXNpYmxlJiYocGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKFkubWF0cml4V29ybGQpLHBhLm5vcm1hbGl6ZSgpLFRhPTMqRGEsQWJbVGFdPXBhLngsQWJbVGErMV09cGEueSxBYltUYSsyXT1wYS56LHBiPVkuY29sb3IscWI9WS5ncm91bmRDb2xvcix5KHphLFRhLHBiLENhKSx5KFNhLFRhLHFiLENhKSxEYSs9MSkpKTtpYT0zKmxiO2ZvcihaYT1NYXRoLm1heChyYi5sZW5ndGgsMypFYSk7aWE8WmE7aWErKylyYltpYV09MDtpYT0zKk5hO2ZvcihaYT1NYXRoLm1heChNYS5sZW5ndGgsMypGYSk7aWE8WmE7aWErKylNYVtpYV09MDtpYT0zKnNhO2ZvcihaYT1NYXRoLm1heChSYS5sZW5ndGgsXHJcbjMqR2IpO2lhPFphO2lhKyspUmFbaWFdPTA7aWE9MypEYTtmb3IoWmE9TWF0aC5tYXgoemEubGVuZ3RoLDMqQmIpO2lhPFphO2lhKyspemFbaWFdPTA7aWE9MypEYTtmb3IoWmE9TWF0aC5tYXgoU2EubGVuZ3RoLDMqQmIpO2lhPFphO2lhKyspU2FbaWFdPTA7bmEuZGlyZWN0aW9uYWwubGVuZ3RoPWxiO25hLnBvaW50Lmxlbmd0aD1OYTtuYS5zcG90Lmxlbmd0aD1zYTtuYS5oZW1pLmxlbmd0aD1EYTtuYS5hbWJpZW50WzBdPWJiO25hLmFtYmllbnRbMV09Y2I7bmEuYW1iaWVudFsyXT1pYjtPYj0hMX1pZihxYSl7dmFyIGVhPWpjO1EuYW1iaWVudExpZ2h0Q29sb3IudmFsdWU9ZWEuYW1iaWVudDtRLmRpcmVjdGlvbmFsTGlnaHRDb2xvci52YWx1ZT1lYS5kaXJlY3Rpb25hbC5jb2xvcnM7US5kaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uLnZhbHVlPWVhLmRpcmVjdGlvbmFsLnBvc2l0aW9ucztRLnBvaW50TGlnaHRDb2xvci52YWx1ZT1lYS5wb2ludC5jb2xvcnM7US5wb2ludExpZ2h0UG9zaXRpb24udmFsdWU9XHJcbmVhLnBvaW50LnBvc2l0aW9ucztRLnBvaW50TGlnaHREaXN0YW5jZS52YWx1ZT1lYS5wb2ludC5kaXN0YW5jZXM7US5wb2ludExpZ2h0RGVjYXkudmFsdWU9ZWEucG9pbnQuZGVjYXlzO1Euc3BvdExpZ2h0Q29sb3IudmFsdWU9ZWEuc3BvdC5jb2xvcnM7US5zcG90TGlnaHRQb3NpdGlvbi52YWx1ZT1lYS5zcG90LnBvc2l0aW9ucztRLnNwb3RMaWdodERpc3RhbmNlLnZhbHVlPWVhLnNwb3QuZGlzdGFuY2VzO1Euc3BvdExpZ2h0RGlyZWN0aW9uLnZhbHVlPWVhLnNwb3QuZGlyZWN0aW9ucztRLnNwb3RMaWdodEFuZ2xlQ29zLnZhbHVlPWVhLnNwb3QuYW5nbGVzQ29zO1Euc3BvdExpZ2h0RXhwb25lbnQudmFsdWU9ZWEuc3BvdC5leHBvbmVudHM7US5zcG90TGlnaHREZWNheS52YWx1ZT1lYS5zcG90LmRlY2F5cztRLmhlbWlzcGhlcmVMaWdodFNreUNvbG9yLnZhbHVlPWVhLmhlbWkuc2t5Q29sb3JzO1EuaGVtaXNwaGVyZUxpZ2h0R3JvdW5kQ29sb3IudmFsdWU9ZWEuaGVtaS5ncm91bmRDb2xvcnM7XHJcblEuaGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uLnZhbHVlPWVhLmhlbWkucG9zaXRpb25zO3goUSwhMCl9ZWxzZSB4KFEsITEpfWlmKGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbHx8ZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWx8fGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCl7US5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eTtRLmRpZmZ1c2UudmFsdWU9ZC5jb2xvcjtRLm1hcC52YWx1ZT1kLm1hcDtRLmxpZ2h0TWFwLnZhbHVlPWQubGlnaHRNYXA7US5zcGVjdWxhck1hcC52YWx1ZT1kLnNwZWN1bGFyTWFwO1EuYWxwaGFNYXAudmFsdWU9ZC5hbHBoYU1hcDtkLmJ1bXBNYXAmJihRLmJ1bXBNYXAudmFsdWU9ZC5idW1wTWFwLFEuYnVtcFNjYWxlLnZhbHVlPWQuYnVtcFNjYWxlKTtkLm5vcm1hbE1hcCYmKFEubm9ybWFsTWFwLnZhbHVlPWQubm9ybWFsTWFwLFEubm9ybWFsU2NhbGUudmFsdWUuY29weShkLm5vcm1hbFNjYWxlKSk7XHJcbnZhciBmYjtkLm1hcD9mYj1kLm1hcDpkLnNwZWN1bGFyTWFwP2ZiPWQuc3BlY3VsYXJNYXA6ZC5ub3JtYWxNYXA/ZmI9ZC5ub3JtYWxNYXA6ZC5idW1wTWFwP2ZiPWQuYnVtcE1hcDpkLmFscGhhTWFwJiYoZmI9ZC5hbHBoYU1hcCk7aWYodm9pZCAwIT09ZmIpe3ZhciB3Yj1mYi5vZmZzZXQsUWI9ZmIucmVwZWF0O1Eub2Zmc2V0UmVwZWF0LnZhbHVlLnNldCh3Yi54LHdiLnksUWIueCxRYi55KX1RLmVudk1hcC52YWx1ZT1kLmVudk1hcDtRLmZsaXBFbnZNYXAudmFsdWU9ZC5lbnZNYXAgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU/MTotMTtRLnJlZmxlY3Rpdml0eS52YWx1ZT1kLnJlZmxlY3Rpdml0eTtRLnJlZnJhY3Rpb25SYXRpby52YWx1ZT1kLnJlZnJhY3Rpb25SYXRpb31pZihkIGluc3RhbmNlb2YgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwpUS5kaWZmdXNlLnZhbHVlPWQuY29sb3IsUS5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eTtlbHNlIGlmKGQgaW5zdGFuY2VvZlxyXG5USFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWwpUS5kaWZmdXNlLnZhbHVlPWQuY29sb3IsUS5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSxRLmRhc2hTaXplLnZhbHVlPWQuZGFzaFNpemUsUS50b3RhbFNpemUudmFsdWU9ZC5kYXNoU2l6ZStkLmdhcFNpemUsUS5zY2FsZS52YWx1ZT1kLnNjYWxlO2Vsc2UgaWYoZCBpbnN0YW5jZW9mIFRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbCl7aWYoUS5wc0NvbG9yLnZhbHVlPWQuY29sb3IsUS5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSxRLnNpemUudmFsdWU9ZC5zaXplLFEuc2NhbGUudmFsdWU9VS5oZWlnaHQvMixRLm1hcC52YWx1ZT1kLm1hcCxudWxsIT09ZC5tYXApe3ZhciBXYj1kLm1hcC5vZmZzZXQsWGI9ZC5tYXAucmVwZWF0O1Eub2Zmc2V0UmVwZWF0LnZhbHVlLnNldChXYi54LFdiLnksWGIueCxYYi55KX19ZWxzZSBkIGluc3RhbmNlb2YgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw/KFEuc2hpbmluZXNzLnZhbHVlPWQuc2hpbmluZXNzLFEuZW1pc3NpdmUudmFsdWU9XHJcbmQuZW1pc3NpdmUsUS5zcGVjdWxhci52YWx1ZT1kLnNwZWN1bGFyLGQud3JhcEFyb3VuZCYmUS53cmFwUkdCLnZhbHVlLmNvcHkoZC53cmFwUkdCKSk6ZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWw/KFEuZW1pc3NpdmUudmFsdWU9ZC5lbWlzc2l2ZSxkLndyYXBBcm91bmQmJlEud3JhcFJHQi52YWx1ZS5jb3B5KGQud3JhcFJHQikpOmQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoRGVwdGhNYXRlcmlhbD8oUS5tTmVhci52YWx1ZT1hLm5lYXIsUS5tRmFyLnZhbHVlPWEuZmFyLFEub3BhY2l0eS52YWx1ZT1kLm9wYWNpdHkpOmQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWwmJihRLm9wYWNpdHkudmFsdWU9ZC5vcGFjaXR5KTtpZihlLnJlY2VpdmVTaGFkb3cmJiFkLl9zaGFkb3dQYXNzJiZRLnNoYWRvd01hdHJpeClmb3IodmFyIHNiPTAsQ2I9MCwkPWIubGVuZ3RoO0NiPCQ7Q2IrKyl7dmFyIHhhPWJbQ2JdO3hhLmNhc3RTaGFkb3cmJih4YSBpbnN0YW5jZW9mXHJcblRIUkVFLlNwb3RMaWdodHx8eGEgaW5zdGFuY2VvZiBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0JiYheGEuc2hhZG93Q2FzY2FkZSkmJihRLnNoYWRvd01hcC52YWx1ZVtzYl09eGEuc2hhZG93TWFwLFEuc2hhZG93TWFwU2l6ZS52YWx1ZVtzYl09eGEuc2hhZG93TWFwU2l6ZSxRLnNoYWRvd01hdHJpeC52YWx1ZVtzYl09eGEuc2hhZG93TWF0cml4LFEuc2hhZG93RGFya25lc3MudmFsdWVbc2JdPXhhLnNoYWRvd0RhcmtuZXNzLFEuc2hhZG93Qmlhcy52YWx1ZVtzYl09eGEuc2hhZG93QmlhcyxzYisrKX1mb3IodmFyIEhiPWQudW5pZm9ybXNMaXN0LE9hLCRhLEdhLG5iPTAsZmM9SGIubGVuZ3RoO25iPGZjO25iKyspe3ZhciBUPUhiW25iXVswXTtpZighMSE9PVQubmVlZHNVcGRhdGUpe3ZhciBEYj1ULnR5cGUsUz1ULnZhbHVlLGFhPUhiW25iXVsxXTtzd2l0Y2goRGIpe2Nhc2UgXCIxaVwiOm0udW5pZm9ybTFpKGFhLFMpO2JyZWFrO2Nhc2UgXCIxZlwiOm0udW5pZm9ybTFmKGFhLFMpO2JyZWFrO1xyXG5jYXNlIFwiMmZcIjptLnVuaWZvcm0yZihhYSxTWzBdLFNbMV0pO2JyZWFrO2Nhc2UgXCIzZlwiOm0udW5pZm9ybTNmKGFhLFNbMF0sU1sxXSxTWzJdKTticmVhaztjYXNlIFwiNGZcIjptLnVuaWZvcm00ZihhYSxTWzBdLFNbMV0sU1syXSxTWzNdKTticmVhaztjYXNlIFwiMWl2XCI6bS51bmlmb3JtMWl2KGFhLFMpO2JyZWFrO2Nhc2UgXCIzaXZcIjptLnVuaWZvcm0zaXYoYWEsUyk7YnJlYWs7Y2FzZSBcIjFmdlwiOm0udW5pZm9ybTFmdihhYSxTKTticmVhaztjYXNlIFwiMmZ2XCI6bS51bmlmb3JtMmZ2KGFhLFMpO2JyZWFrO2Nhc2UgXCIzZnZcIjptLnVuaWZvcm0zZnYoYWEsUyk7YnJlYWs7Y2FzZSBcIjRmdlwiOm0udW5pZm9ybTRmdihhYSxTKTticmVhaztjYXNlIFwiTWF0cml4M2Z2XCI6bS51bmlmb3JtTWF0cml4M2Z2KGFhLCExLFMpO2JyZWFrO2Nhc2UgXCJNYXRyaXg0ZnZcIjptLnVuaWZvcm1NYXRyaXg0ZnYoYWEsITEsUyk7YnJlYWs7Y2FzZSBcImlcIjptLnVuaWZvcm0xaShhYSxTKTticmVhaztjYXNlIFwiZlwiOm0udW5pZm9ybTFmKGFhLFxyXG5TKTticmVhaztjYXNlIFwidjJcIjptLnVuaWZvcm0yZihhYSxTLngsUy55KTticmVhaztjYXNlIFwidjNcIjptLnVuaWZvcm0zZihhYSxTLngsUy55LFMueik7YnJlYWs7Y2FzZSBcInY0XCI6bS51bmlmb3JtNGYoYWEsUy54LFMueSxTLnosUy53KTticmVhaztjYXNlIFwiY1wiOm0udW5pZm9ybTNmKGFhLFMucixTLmcsUy5iKTticmVhaztjYXNlIFwiaXYxXCI6bS51bmlmb3JtMWl2KGFhLFMpO2JyZWFrO2Nhc2UgXCJpdlwiOm0udW5pZm9ybTNpdihhYSxTKTticmVhaztjYXNlIFwiZnYxXCI6bS51bmlmb3JtMWZ2KGFhLFMpO2JyZWFrO2Nhc2UgXCJmdlwiOm0udW5pZm9ybTNmdihhYSxTKTticmVhaztjYXNlIFwidjJ2XCI6dm9pZCAwPT09VC5fYXJyYXkmJihULl9hcnJheT1uZXcgRmxvYXQzMkFycmF5KDIqUy5sZW5ndGgpKTtmb3IodmFyIFo9MCxCYT1TLmxlbmd0aDtaPEJhO1orKylHYT0yKlosVC5fYXJyYXlbR2FdPVNbWl0ueCxULl9hcnJheVtHYSsxXT1TW1pdLnk7bS51bmlmb3JtMmZ2KGFhLFQuX2FycmF5KTtcclxuYnJlYWs7Y2FzZSBcInYzdlwiOnZvaWQgMD09PVQuX2FycmF5JiYoVC5fYXJyYXk9bmV3IEZsb2F0MzJBcnJheSgzKlMubGVuZ3RoKSk7Wj0wO2ZvcihCYT1TLmxlbmd0aDtaPEJhO1orKylHYT0zKlosVC5fYXJyYXlbR2FdPVNbWl0ueCxULl9hcnJheVtHYSsxXT1TW1pdLnksVC5fYXJyYXlbR2ErMl09U1taXS56O20udW5pZm9ybTNmdihhYSxULl9hcnJheSk7YnJlYWs7Y2FzZSBcInY0dlwiOnZvaWQgMD09PVQuX2FycmF5JiYoVC5fYXJyYXk9bmV3IEZsb2F0MzJBcnJheSg0KlMubGVuZ3RoKSk7Wj0wO2ZvcihCYT1TLmxlbmd0aDtaPEJhO1orKylHYT00KlosVC5fYXJyYXlbR2FdPVNbWl0ueCxULl9hcnJheVtHYSsxXT1TW1pdLnksVC5fYXJyYXlbR2ErMl09U1taXS56LFQuX2FycmF5W0dhKzNdPVNbWl0udzttLnVuaWZvcm00ZnYoYWEsVC5fYXJyYXkpO2JyZWFrO2Nhc2UgXCJtM1wiOm0udW5pZm9ybU1hdHJpeDNmdihhYSwhMSxTLmVsZW1lbnRzKTticmVhaztjYXNlIFwibTN2XCI6dm9pZCAwPT09XHJcblQuX2FycmF5JiYoVC5fYXJyYXk9bmV3IEZsb2F0MzJBcnJheSg5KlMubGVuZ3RoKSk7Wj0wO2ZvcihCYT1TLmxlbmd0aDtaPEJhO1orKylTW1pdLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0KFQuX2FycmF5LDkqWik7bS51bmlmb3JtTWF0cml4M2Z2KGFhLCExLFQuX2FycmF5KTticmVhaztjYXNlIFwibTRcIjptLnVuaWZvcm1NYXRyaXg0ZnYoYWEsITEsUy5lbGVtZW50cyk7YnJlYWs7Y2FzZSBcIm00dlwiOnZvaWQgMD09PVQuX2FycmF5JiYoVC5fYXJyYXk9bmV3IEZsb2F0MzJBcnJheSgxNipTLmxlbmd0aCkpO1o9MDtmb3IoQmE9Uy5sZW5ndGg7WjxCYTtaKyspU1taXS5mbGF0dGVuVG9BcnJheU9mZnNldChULl9hcnJheSwxNipaKTttLnVuaWZvcm1NYXRyaXg0ZnYoYWEsITEsVC5fYXJyYXkpO2JyZWFrO2Nhc2UgXCJ0XCI6T2E9UzskYT1EKCk7bS51bmlmb3JtMWkoYWEsJGEpO2lmKCFPYSljb250aW51ZTtpZihPYSBpbnN0YW5jZW9mIFRIUkVFLkN1YmVUZXh0dXJlfHxPYS5pbWFnZSBpbnN0YW5jZW9mXHJcbkFycmF5JiY2PT09T2EuaW1hZ2UubGVuZ3RoKXt2YXIgWD1PYSxFYj0kYTtpZig2PT09WC5pbWFnZS5sZW5ndGgpaWYoWC5uZWVkc1VwZGF0ZSl7WC5pbWFnZS5fX3dlYmdsVGV4dHVyZUN1YmV8fChYLmFkZEV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsUGIpLFguaW1hZ2UuX193ZWJnbFRleHR1cmVDdWJlPW0uY3JlYXRlVGV4dHVyZSgpLEIuaW5mby5tZW1vcnkudGV4dHVyZXMrKyk7bS5hY3RpdmVUZXh0dXJlKG0uVEVYVFVSRTArRWIpO20uYmluZFRleHR1cmUobS5URVhUVVJFX0NVQkVfTUFQLFguaW1hZ2UuX193ZWJnbFRleHR1cmVDdWJlKTttLnBpeGVsU3RvcmVpKG0uVU5QQUNLX0ZMSVBfWV9XRUJHTCxYLmZsaXBZKTtmb3IodmFyIFJiPVggaW5zdGFuY2VvZiBUSFJFRS5Db21wcmVzc2VkVGV4dHVyZSxJYj1YLmltYWdlWzBdaW5zdGFuY2VvZiBUSFJFRS5EYXRhVGV4dHVyZSxnYj1bXSx5YT0wOzY+eWE7eWErKylnYlt5YV09IUIuYXV0b1NjYWxlQ3ViZW1hcHN8fFJifHxJYj9JYj9cclxuWC5pbWFnZVt5YV0uaW1hZ2U6WC5pbWFnZVt5YV06RShYLmltYWdlW3lhXSxxYyk7dmFyIFliPWdiWzBdLFpiPVRIUkVFLk1hdGguaXNQb3dlck9mVHdvKFliLndpZHRoKSYmVEhSRUUuTWF0aC5pc1Bvd2VyT2ZUd28oWWIuaGVpZ2h0KSxXYT1JKFguZm9ybWF0KSx0Yj1JKFgudHlwZSk7QShtLlRFWFRVUkVfQ1VCRV9NQVAsWCxaYik7Zm9yKHlhPTA7Nj55YTt5YSsrKWlmKFJiKWZvcih2YXIgaGIsJGI9Z2JbeWFdLm1pcG1hcHMsRmI9MCxTYj0kYi5sZW5ndGg7RmI8U2I7RmIrKyloYj0kYltGYl0sWC5mb3JtYXQhPT1USFJFRS5SR0JBRm9ybWF0JiZYLmZvcm1hdCE9PVRIUkVFLlJHQkZvcm1hdD8tMTxrYygpLmluZGV4T2YoV2EpP20uY29tcHJlc3NlZFRleEltYWdlMkQobS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1greWEsRmIsV2EsaGIud2lkdGgsaGIuaGVpZ2h0LDAsaGIuZGF0YSk6VEhSRUUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC5zZXRDdWJlVGV4dHVyZSgpXCIpOlxyXG5tLnRleEltYWdlMkQobS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1greWEsRmIsV2EsaGIud2lkdGgsaGIuaGVpZ2h0LDAsV2EsdGIsaGIuZGF0YSk7ZWxzZSBJYj9tLnRleEltYWdlMkQobS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1greWEsMCxXYSxnYlt5YV0ud2lkdGgsZ2JbeWFdLmhlaWdodCwwLFdhLHRiLGdiW3lhXS5kYXRhKTptLnRleEltYWdlMkQobS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1greWEsMCxXYSxXYSx0YixnYlt5YV0pO1guZ2VuZXJhdGVNaXBtYXBzJiZaYiYmbS5nZW5lcmF0ZU1pcG1hcChtLlRFWFRVUkVfQ1VCRV9NQVApO1gubmVlZHNVcGRhdGU9ITE7aWYoWC5vblVwZGF0ZSlYLm9uVXBkYXRlKCl9ZWxzZSBtLmFjdGl2ZVRleHR1cmUobS5URVhUVVJFMCtFYiksbS5iaW5kVGV4dHVyZShtLlRFWFRVUkVfQ1VCRV9NQVAsWC5pbWFnZS5fX3dlYmdsVGV4dHVyZUN1YmUpfWVsc2UgaWYoT2EgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmUpe3ZhciBKYj1cclxuT2E7bS5hY3RpdmVUZXh0dXJlKG0uVEVYVFVSRTArJGEpO20uYmluZFRleHR1cmUobS5URVhUVVJFX0NVQkVfTUFQLEpiLl9fd2ViZ2xUZXh0dXJlKX1lbHNlIEIuc2V0VGV4dHVyZShPYSwkYSk7YnJlYWs7Y2FzZSBcInR2XCI6dm9pZCAwPT09VC5fYXJyYXkmJihULl9hcnJheT1bXSk7Wj0wO2ZvcihCYT1ULnZhbHVlLmxlbmd0aDtaPEJhO1orKylULl9hcnJheVtaXT1EKCk7bS51bmlmb3JtMWl2KGFhLFQuX2FycmF5KTtaPTA7Zm9yKEJhPVQudmFsdWUubGVuZ3RoO1o8QmE7WisrKU9hPVQudmFsdWVbWl0sJGE9VC5fYXJyYXlbWl0sT2EmJkIuc2V0VGV4dHVyZShPYSwkYSk7YnJlYWs7ZGVmYXVsdDpUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogVW5rbm93biB1bmlmb3JtIHR5cGU6IFwiK0RiKX19fX1tLnVuaWZvcm1NYXRyaXg0ZnYoa2EubW9kZWxWaWV3TWF0cml4LCExLGUuX21vZGVsVmlld01hdHJpeC5lbGVtZW50cyk7a2Eubm9ybWFsTWF0cml4JiZtLnVuaWZvcm1NYXRyaXgzZnYoa2Eubm9ybWFsTWF0cml4LFxyXG4hMSxlLl9ub3JtYWxNYXRyaXguZWxlbWVudHMpO251bGwhPT1rYS5tb2RlbE1hdHJpeCYmbS51bmlmb3JtTWF0cml4NGZ2KGthLm1vZGVsTWF0cml4LCExLGUubWF0cml4V29ybGQuZWxlbWVudHMpO3JldHVybiBVYX1mdW5jdGlvbiB4KGEsYil7YS5hbWJpZW50TGlnaHRDb2xvci5uZWVkc1VwZGF0ZT1iO2EuZGlyZWN0aW9uYWxMaWdodENvbG9yLm5lZWRzVXBkYXRlPWI7YS5kaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uLm5lZWRzVXBkYXRlPWI7YS5wb2ludExpZ2h0Q29sb3IubmVlZHNVcGRhdGU9YjthLnBvaW50TGlnaHRQb3NpdGlvbi5uZWVkc1VwZGF0ZT1iO2EucG9pbnRMaWdodERpc3RhbmNlLm5lZWRzVXBkYXRlPWI7YS5wb2ludExpZ2h0RGVjYXkubmVlZHNVcGRhdGU9YjthLnNwb3RMaWdodENvbG9yLm5lZWRzVXBkYXRlPWI7YS5zcG90TGlnaHRQb3NpdGlvbi5uZWVkc1VwZGF0ZT1iO2Euc3BvdExpZ2h0RGlzdGFuY2UubmVlZHNVcGRhdGU9YjthLnNwb3RMaWdodERpcmVjdGlvbi5uZWVkc1VwZGF0ZT1cclxuYjthLnNwb3RMaWdodEFuZ2xlQ29zLm5lZWRzVXBkYXRlPWI7YS5zcG90TGlnaHRFeHBvbmVudC5uZWVkc1VwZGF0ZT1iO2Euc3BvdExpZ2h0RGVjYXkubmVlZHNVcGRhdGU9YjthLmhlbWlzcGhlcmVMaWdodFNreUNvbG9yLm5lZWRzVXBkYXRlPWI7YS5oZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvci5uZWVkc1VwZGF0ZT1iO2EuaGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uLm5lZWRzVXBkYXRlPWJ9ZnVuY3Rpb24gRCgpe3ZhciBhPU1iO2E+PVdiJiZUSFJFRS53YXJuKFwiV2ViR0xSZW5kZXJlcjogdHJ5aW5nIHRvIHVzZSBcIithK1wiIHRleHR1cmUgdW5pdHMgd2hpbGUgdGhpcyBHUFUgc3VwcG9ydHMgb25seSBcIitXYik7TWIrPTE7cmV0dXJuIGF9ZnVuY3Rpb24gdyhhLGIpe2EuX21vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKGIubWF0cml4V29ybGRJbnZlcnNlLGEubWF0cml4V29ybGQpO2EuX25vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoYS5fbW9kZWxWaWV3TWF0cml4KX1cclxuZnVuY3Rpb24geShhLGIsYyxkKXthW2JdPWMucipkO2FbYisxXT1jLmcqZDthW2IrMl09Yy5iKmR9ZnVuY3Rpb24gQShhLGIsYyl7Yz8obS50ZXhQYXJhbWV0ZXJpKGEsbS5URVhUVVJFX1dSQVBfUyxJKGIud3JhcFMpKSxtLnRleFBhcmFtZXRlcmkoYSxtLlRFWFRVUkVfV1JBUF9ULEkoYi53cmFwVCkpLG0udGV4UGFyYW1ldGVyaShhLG0uVEVYVFVSRV9NQUdfRklMVEVSLEkoYi5tYWdGaWx0ZXIpKSxtLnRleFBhcmFtZXRlcmkoYSxtLlRFWFRVUkVfTUlOX0ZJTFRFUixJKGIubWluRmlsdGVyKSkpOihtLnRleFBhcmFtZXRlcmkoYSxtLlRFWFRVUkVfV1JBUF9TLG0uQ0xBTVBfVE9fRURHRSksbS50ZXhQYXJhbWV0ZXJpKGEsbS5URVhUVVJFX1dSQVBfVCxtLkNMQU1QX1RPX0VER0UpLGIud3JhcFM9PT1USFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nJiZiLndyYXBUPT09VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZ3x8VEhSRUUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS53cmFwUyBhbmQgVGV4dHVyZS53cmFwVCBzaG91bGQgYmUgc2V0IHRvIFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmcuICggXCIrXHJcbmIuc291cmNlRmlsZStcIiApXCIpLG0udGV4UGFyYW1ldGVyaShhLG0uVEVYVFVSRV9NQUdfRklMVEVSLHooYi5tYWdGaWx0ZXIpKSxtLnRleFBhcmFtZXRlcmkoYSxtLlRFWFRVUkVfTUlOX0ZJTFRFUix6KGIubWluRmlsdGVyKSksYi5taW5GaWx0ZXIhPT1USFJFRS5OZWFyZXN0RmlsdGVyJiZiLm1pbkZpbHRlciE9PVRIUkVFLkxpbmVhckZpbHRlciYmVEhSRUUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS5taW5GaWx0ZXIgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5OZWFyZXN0RmlsdGVyIG9yIFRIUkVFLkxpbmVhckZpbHRlci4gKCBcIitiLnNvdXJjZUZpbGUrXCIgKVwiKSk7KGM9ZGEuZ2V0KFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpKSYmYi50eXBlIT09VEhSRUUuRmxvYXRUeXBlJiZiLnR5cGUhPT1USFJFRS5IYWxmRmxvYXRUeXBlJiYoMTxiLmFuaXNvdHJvcHl8fGIuX19jdXJyZW50QW5pc290cm9weSkmJlxyXG4obS50ZXhQYXJhbWV0ZXJmKGEsYy5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCxNYXRoLm1pbihiLmFuaXNvdHJvcHksQi5nZXRNYXhBbmlzb3Ryb3B5KCkpKSxiLl9fY3VycmVudEFuaXNvdHJvcHk9Yi5hbmlzb3Ryb3B5KX1mdW5jdGlvbiBFKGEsYil7aWYoYS53aWR0aD5ifHxhLmhlaWdodD5iKXt2YXIgYz1iL01hdGgubWF4KGEud2lkdGgsYS5oZWlnaHQpLGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtkLndpZHRoPU1hdGguZmxvb3IoYS53aWR0aCpjKTtkLmhlaWdodD1NYXRoLmZsb29yKGEuaGVpZ2h0KmMpO2QuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShhLDAsMCxhLndpZHRoLGEuaGVpZ2h0LDAsMCxkLndpZHRoLGQuaGVpZ2h0KTtUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogaW1hZ2UgaXMgdG9vIGJpZyAoXCIrYS53aWR0aCtcInhcIithLmhlaWdodCtcIikuIFJlc2l6ZWQgdG8gXCIrZC53aWR0aCtcInhcIitkLmhlaWdodCxhKTtyZXR1cm4gZH1yZXR1cm4gYX1cclxuZnVuY3Rpb24gRyhhLGIpe20uYmluZFJlbmRlcmJ1ZmZlcihtLlJFTkRFUkJVRkZFUixhKTtiLmRlcHRoQnVmZmVyJiYhYi5zdGVuY2lsQnVmZmVyPyhtLnJlbmRlcmJ1ZmZlclN0b3JhZ2UobS5SRU5ERVJCVUZGRVIsbS5ERVBUSF9DT01QT05FTlQxNixiLndpZHRoLGIuaGVpZ2h0KSxtLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKG0uRlJBTUVCVUZGRVIsbS5ERVBUSF9BVFRBQ0hNRU5ULG0uUkVOREVSQlVGRkVSLGEpKTpiLmRlcHRoQnVmZmVyJiZiLnN0ZW5jaWxCdWZmZXI/KG0ucmVuZGVyYnVmZmVyU3RvcmFnZShtLlJFTkRFUkJVRkZFUixtLkRFUFRIX1NURU5DSUwsYi53aWR0aCxiLmhlaWdodCksbS5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihtLkZSQU1FQlVGRkVSLG0uREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULG0uUkVOREVSQlVGRkVSLGEpKTptLnJlbmRlcmJ1ZmZlclN0b3JhZ2UobS5SRU5ERVJCVUZGRVIsbS5SR0JBNCxiLndpZHRoLGIuaGVpZ2h0KX1mdW5jdGlvbiBGKGEpe2EgaW5zdGFuY2VvZlxyXG5USFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU/KG0uYmluZFRleHR1cmUobS5URVhUVVJFX0NVQkVfTUFQLGEuX193ZWJnbFRleHR1cmUpLG0uZ2VuZXJhdGVNaXBtYXAobS5URVhUVVJFX0NVQkVfTUFQKSxtLmJpbmRUZXh0dXJlKG0uVEVYVFVSRV9DVUJFX01BUCxudWxsKSk6KG0uYmluZFRleHR1cmUobS5URVhUVVJFXzJELGEuX193ZWJnbFRleHR1cmUpLG0uZ2VuZXJhdGVNaXBtYXAobS5URVhUVVJFXzJEKSxtLmJpbmRUZXh0dXJlKG0uVEVYVFVSRV8yRCxudWxsKSl9ZnVuY3Rpb24geihhKXtyZXR1cm4gYT09PVRIUkVFLk5lYXJlc3RGaWx0ZXJ8fGE9PT1USFJFRS5OZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcnx8YT09PVRIUkVFLk5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXI/bS5ORUFSRVNUOm0uTElORUFSfWZ1bmN0aW9uIEkoYSl7dmFyIGI7aWYoYT09PVRIUkVFLlJlcGVhdFdyYXBwaW5nKXJldHVybiBtLlJFUEVBVDtpZihhPT09VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZylyZXR1cm4gbS5DTEFNUF9UT19FREdFO1xyXG5pZihhPT09VEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZylyZXR1cm4gbS5NSVJST1JFRF9SRVBFQVQ7aWYoYT09PVRIUkVFLk5lYXJlc3RGaWx0ZXIpcmV0dXJuIG0uTkVBUkVTVDtpZihhPT09VEhSRUUuTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIpcmV0dXJuIG0uTkVBUkVTVF9NSVBNQVBfTkVBUkVTVDtpZihhPT09VEhSRUUuTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlcilyZXR1cm4gbS5ORUFSRVNUX01JUE1BUF9MSU5FQVI7aWYoYT09PVRIUkVFLkxpbmVhckZpbHRlcilyZXR1cm4gbS5MSU5FQVI7aWYoYT09PVRIUkVFLkxpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIpcmV0dXJuIG0uTElORUFSX01JUE1BUF9ORUFSRVNUO2lmKGE9PT1USFJFRS5MaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIpcmV0dXJuIG0uTElORUFSX01JUE1BUF9MSU5FQVI7aWYoYT09PVRIUkVFLlVuc2lnbmVkQnl0ZVR5cGUpcmV0dXJuIG0uVU5TSUdORURfQllURTtpZihhPT09VEhSRUUuVW5zaWduZWRTaG9ydDQ0NDRUeXBlKXJldHVybiBtLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQ7XHJcbmlmKGE9PT1USFJFRS5VbnNpZ25lZFNob3J0NTU1MVR5cGUpcmV0dXJuIG0uVU5TSUdORURfU0hPUlRfNV81XzVfMTtpZihhPT09VEhSRUUuVW5zaWduZWRTaG9ydDU2NVR5cGUpcmV0dXJuIG0uVU5TSUdORURfU0hPUlRfNV82XzU7aWYoYT09PVRIUkVFLkJ5dGVUeXBlKXJldHVybiBtLkJZVEU7aWYoYT09PVRIUkVFLlNob3J0VHlwZSlyZXR1cm4gbS5TSE9SVDtpZihhPT09VEhSRUUuVW5zaWduZWRTaG9ydFR5cGUpcmV0dXJuIG0uVU5TSUdORURfU0hPUlQ7aWYoYT09PVRIUkVFLkludFR5cGUpcmV0dXJuIG0uSU5UO2lmKGE9PT1USFJFRS5VbnNpZ25lZEludFR5cGUpcmV0dXJuIG0uVU5TSUdORURfSU5UO2lmKGE9PT1USFJFRS5GbG9hdFR5cGUpcmV0dXJuIG0uRkxPQVQ7Yj1kYS5nZXQoXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XCIpO2lmKG51bGwhPT1iJiZhPT09VEhSRUUuSGFsZkZsb2F0VHlwZSlyZXR1cm4gYi5IQUxGX0ZMT0FUX09FUztpZihhPT09VEhSRUUuQWxwaGFGb3JtYXQpcmV0dXJuIG0uQUxQSEE7XHJcbmlmKGE9PT1USFJFRS5SR0JGb3JtYXQpcmV0dXJuIG0uUkdCO2lmKGE9PT1USFJFRS5SR0JBRm9ybWF0KXJldHVybiBtLlJHQkE7aWYoYT09PVRIUkVFLkx1bWluYW5jZUZvcm1hdClyZXR1cm4gbS5MVU1JTkFOQ0U7aWYoYT09PVRIUkVFLkx1bWluYW5jZUFscGhhRm9ybWF0KXJldHVybiBtLkxVTUlOQU5DRV9BTFBIQTtpZihhPT09VEhSRUUuQWRkRXF1YXRpb24pcmV0dXJuIG0uRlVOQ19BREQ7aWYoYT09PVRIUkVFLlN1YnRyYWN0RXF1YXRpb24pcmV0dXJuIG0uRlVOQ19TVUJUUkFDVDtpZihhPT09VEhSRUUuUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24pcmV0dXJuIG0uRlVOQ19SRVZFUlNFX1NVQlRSQUNUO2lmKGE9PT1USFJFRS5aZXJvRmFjdG9yKXJldHVybiBtLlpFUk87aWYoYT09PVRIUkVFLk9uZUZhY3RvcilyZXR1cm4gbS5PTkU7aWYoYT09PVRIUkVFLlNyY0NvbG9yRmFjdG9yKXJldHVybiBtLlNSQ19DT0xPUjtpZihhPT09VEhSRUUuT25lTWludXNTcmNDb2xvckZhY3RvcilyZXR1cm4gbS5PTkVfTUlOVVNfU1JDX0NPTE9SO1xyXG5pZihhPT09VEhSRUUuU3JjQWxwaGFGYWN0b3IpcmV0dXJuIG0uU1JDX0FMUEhBO2lmKGE9PT1USFJFRS5PbmVNaW51c1NyY0FscGhhRmFjdG9yKXJldHVybiBtLk9ORV9NSU5VU19TUkNfQUxQSEE7aWYoYT09PVRIUkVFLkRzdEFscGhhRmFjdG9yKXJldHVybiBtLkRTVF9BTFBIQTtpZihhPT09VEhSRUUuT25lTWludXNEc3RBbHBoYUZhY3RvcilyZXR1cm4gbS5PTkVfTUlOVVNfRFNUX0FMUEhBO2lmKGE9PT1USFJFRS5Ec3RDb2xvckZhY3RvcilyZXR1cm4gbS5EU1RfQ09MT1I7aWYoYT09PVRIUkVFLk9uZU1pbnVzRHN0Q29sb3JGYWN0b3IpcmV0dXJuIG0uT05FX01JTlVTX0RTVF9DT0xPUjtpZihhPT09VEhSRUUuU3JjQWxwaGFTYXR1cmF0ZUZhY3RvcilyZXR1cm4gbS5TUkNfQUxQSEFfU0FUVVJBVEU7Yj1kYS5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKTtpZihudWxsIT09Yil7aWYoYT09PVRIUkVFLlJHQl9TM1RDX0RYVDFfRm9ybWF0KXJldHVybiBiLkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7XHJcbmlmKGE9PT1USFJFRS5SR0JBX1MzVENfRFhUMV9Gb3JtYXQpcmV0dXJuIGIuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQ7aWYoYT09PVRIUkVFLlJHQkFfUzNUQ19EWFQzX0Zvcm1hdClyZXR1cm4gYi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVDtpZihhPT09VEhSRUUuUkdCQV9TM1RDX0RYVDVfRm9ybWF0KXJldHVybiBiLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUfWI9ZGEuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpO2lmKG51bGwhPT1iKXtpZihhPT09VEhSRUUuUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQpcmV0dXJuIGIuQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRztpZihhPT09VEhSRUUuUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQpcmV0dXJuIGIuQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRztpZihhPT09VEhSRUUuUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0KXJldHVybiBiLkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HO1xyXG5pZihhPT09VEhSRUUuUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0KXJldHVybiBiLkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HfWI9ZGEuZ2V0KFwiRVhUX2JsZW5kX21pbm1heFwiKTtpZihudWxsIT09Yil7aWYoYT09PVRIUkVFLk1pbkVxdWF0aW9uKXJldHVybiBiLk1JTl9FWFQ7aWYoYT09PVRIUkVFLk1heEVxdWF0aW9uKXJldHVybiBiLk1BWF9FWFR9cmV0dXJuIDB9Y29uc29sZS5sb2coXCJUSFJFRS5XZWJHTFJlbmRlcmVyXCIsVEhSRUUuUkVWSVNJT04pO2E9YXx8e307dmFyIFU9dm9pZCAwIT09YS5jYW52YXM/YS5jYW52YXM6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSxNPXZvaWQgMCE9PWEuY29udGV4dD9hLmNvbnRleHQ6bnVsbCxIPTEsTD12b2lkIDAhPT1hLnByZWNpc2lvbj9hLnByZWNpc2lvbjpcImhpZ2hwXCIsUD12b2lkIDAhPT1hLmFscGhhP2EuYWxwaGE6ITEsTj12b2lkIDAhPT1hLmRlcHRoP2EuZGVwdGg6ITAsUj12b2lkIDAhPT1hLnN0ZW5jaWw/XHJcbmEuc3RlbmNpbDohMCxWPXZvaWQgMCE9PWEuYW50aWFsaWFzP2EuYW50aWFsaWFzOiExLEo9dm9pZCAwIT09YS5wcmVtdWx0aXBsaWVkQWxwaGE/YS5wcmVtdWx0aXBsaWVkQWxwaGE6ITAsb2E9dm9pZCAwIT09YS5wcmVzZXJ2ZURyYXdpbmdCdWZmZXI/YS5wcmVzZXJ2ZURyYXdpbmdCdWZmZXI6ITEsamE9dm9pZCAwIT09YS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyP2EubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjohMSxoYT1uZXcgVEhSRUUuQ29sb3IoMCksTz0wLGNhPVtdLGJhPXt9LHFhPVtdLEthPVtdLFFhPVtdLFhhPVtdLFlhPVtdO3RoaXMuZG9tRWxlbWVudD1VO3RoaXMuY29udGV4dD1udWxsO3RoaXMuc29ydE9iamVjdHM9dGhpcy5hdXRvQ2xlYXJTdGVuY2lsPXRoaXMuYXV0b0NsZWFyRGVwdGg9dGhpcy5hdXRvQ2xlYXJDb2xvcj10aGlzLmF1dG9DbGVhcj0hMDt0aGlzLmdhbW1hRmFjdG9yPTI7dGhpcy5zaGFkb3dNYXBFbmFibGVkPXRoaXMuZ2FtbWFPdXRwdXQ9dGhpcy5nYW1tYUlucHV0PVxyXG4hMTt0aGlzLnNoYWRvd01hcFR5cGU9VEhSRUUuUENGU2hhZG93TWFwO3RoaXMuc2hhZG93TWFwQ3VsbEZhY2U9VEhSRUUuQ3VsbEZhY2VGcm9udDt0aGlzLnNoYWRvd01hcENhc2NhZGU9dGhpcy5zaGFkb3dNYXBEZWJ1Zz0hMTt0aGlzLm1heE1vcnBoVGFyZ2V0cz04O3RoaXMubWF4TW9ycGhOb3JtYWxzPTQ7dGhpcy5hdXRvU2NhbGVDdWJlbWFwcz0hMDt0aGlzLmluZm89e21lbW9yeTp7cHJvZ3JhbXM6MCxnZW9tZXRyaWVzOjAsdGV4dHVyZXM6MH0scmVuZGVyOntjYWxsczowLHZlcnRpY2VzOjAsZmFjZXM6MCxwb2ludHM6MH19O3ZhciBCPXRoaXMsUGE9W10sb2I9bnVsbCxhYj1udWxsLHViPS0xLHRhPVwiXCIsdmI9bnVsbCxNYj0wLGliPTAsYmI9MCxwYj1VLndpZHRoLHFiPVUuaGVpZ2h0LFhiPTAsZmM9MCxjYj1uZXcgVEhSRUUuRnJ1c3R1bSxkYj1uZXcgVEhSRUUuTWF0cml4NCx3YT1uZXcgVEhSRUUuVmVjdG9yMyxwYT1uZXcgVEhSRUUuVmVjdG9yMyxPYj0hMCxqYz17YW1iaWVudDpbMCxcclxuMCwwXSxkaXJlY3Rpb25hbDp7bGVuZ3RoOjAsY29sb3JzOltdLHBvc2l0aW9uczpbXX0scG9pbnQ6e2xlbmd0aDowLGNvbG9yczpbXSxwb3NpdGlvbnM6W10sZGlzdGFuY2VzOltdLGRlY2F5czpbXX0sc3BvdDp7bGVuZ3RoOjAsY29sb3JzOltdLHBvc2l0aW9uczpbXSxkaXN0YW5jZXM6W10sZGlyZWN0aW9uczpbXSxhbmdsZXNDb3M6W10sZXhwb25lbnRzOltdLGRlY2F5czpbXX0saGVtaTp7bGVuZ3RoOjAsc2t5Q29sb3JzOltdLGdyb3VuZENvbG9yczpbXSxwb3NpdGlvbnM6W119fSxtO3RyeXt2YXIgWWI9e2FscGhhOlAsZGVwdGg6TixzdGVuY2lsOlIsYW50aWFsaWFzOlYscHJlbXVsdGlwbGllZEFscGhhOkoscHJlc2VydmVEcmF3aW5nQnVmZmVyOm9hfTttPU18fFUuZ2V0Q29udGV4dChcIndlYmdsXCIsWWIpfHxVLmdldENvbnRleHQoXCJleHBlcmltZW50YWwtd2ViZ2xcIixZYik7aWYobnVsbD09PW0pe2lmKG51bGwhPT1VLmdldENvbnRleHQoXCJ3ZWJnbFwiKSl0aHJvd1wiRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dCB3aXRoIHlvdXIgc2VsZWN0ZWQgYXR0cmlidXRlcy5cIjtcclxudGhyb3dcIkVycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQuXCI7fVUuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dGxvc3RcIixmdW5jdGlvbihhKXthLnByZXZlbnREZWZhdWx0KCk7WmIoKTtsYygpO2JhPXt9fSwhMSl9Y2F0Y2gocmMpe1RIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogXCIrcmMpfXZhciBXPW5ldyBUSFJFRS5XZWJHTFN0YXRlKG0sSSk7dm9pZCAwPT09bS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQmJihtLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdD1mdW5jdGlvbigpe3JldHVybntyYW5nZU1pbjoxLHJhbmdlTWF4OjEscHJlY2lzaW9uOjF9fSk7dmFyIGRhPW5ldyBUSFJFRS5XZWJHTEV4dGVuc2lvbnMobSk7ZGEuZ2V0KFwiT0VTX3RleHR1cmVfZmxvYXRcIik7ZGEuZ2V0KFwiT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyXCIpO2RhLmdldChcIk9FU190ZXh0dXJlX2hhbGZfZmxvYXRcIik7ZGEuZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXJcIik7XHJcbmRhLmdldChcIk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlc1wiKTtqYSYmZGEuZ2V0KFwiRVhUX2ZyYWdfZGVwdGhcIik7dmFyIHJiPWZ1bmN0aW9uKGEsYixjLGQpeyEwPT09SiYmKGEqPWQsYio9ZCxjKj1kKTttLmNsZWFyQ29sb3IoYSxiLGMsZCl9LGxjPWZ1bmN0aW9uKCl7bS5jbGVhckNvbG9yKDAsMCwwLDEpO20uY2xlYXJEZXB0aCgxKTttLmNsZWFyU3RlbmNpbCgwKTttLmVuYWJsZShtLkRFUFRIX1RFU1QpO20uZGVwdGhGdW5jKG0uTEVRVUFMKTttLmZyb250RmFjZShtLkNDVyk7bS5jdWxsRmFjZShtLkJBQ0spO20uZW5hYmxlKG0uQ1VMTF9GQUNFKTttLmVuYWJsZShtLkJMRU5EKTttLmJsZW5kRXF1YXRpb24obS5GVU5DX0FERCk7bS5ibGVuZEZ1bmMobS5TUkNfQUxQSEEsbS5PTkVfTUlOVVNfU1JDX0FMUEhBKTttLnZpZXdwb3J0KGliLGJiLHBiLHFiKTtyYihoYS5yLGhhLmcsaGEuYixPKX0sWmI9ZnVuY3Rpb24oKXt2Yj1vYj1udWxsO3RhPVwiXCI7dWI9LTE7T2I9ITA7Vy5yZXNldCgpfTtcclxubGMoKTt0aGlzLmNvbnRleHQ9bTt0aGlzLnN0YXRlPVc7dmFyIFdiPW0uZ2V0UGFyYW1ldGVyKG0uTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpLHNjPW0uZ2V0UGFyYW1ldGVyKG0uTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTKSx0Yz1tLmdldFBhcmFtZXRlcihtLk1BWF9URVhUVVJFX1NJWkUpLHFjPW0uZ2V0UGFyYW1ldGVyKG0uTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSksVmI9MDxzYyxOYj1WYiYmZGEuZ2V0KFwiT0VTX3RleHR1cmVfZmxvYXRcIiksdWM9bS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQobS5WRVJURVhfU0hBREVSLG0uSElHSF9GTE9BVCksdmM9bS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQobS5WRVJURVhfU0hBREVSLG0uTUVESVVNX0ZMT0FUKSx3Yz1tLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChtLkZSQUdNRU5UX1NIQURFUixtLkhJR0hfRkxPQVQpLHhjPW0uZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KG0uRlJBR01FTlRfU0hBREVSLG0uTUVESVVNX0ZMT0FUKSxcclxua2M9ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1hKXJldHVybiBhO2E9W107aWYoZGEuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfHxkYS5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKSlmb3IodmFyIGI9bS5nZXRQYXJhbWV0ZXIobS5DT01QUkVTU0VEX1RFWFRVUkVfRk9STUFUUyksYz0wO2M8Yi5sZW5ndGg7YysrKWEucHVzaChiW2NdKTtyZXR1cm4gYX19KCkseWM9MDx1Yy5wcmVjaXNpb24mJjA8d2MucHJlY2lzaW9uLG1jPTA8dmMucHJlY2lzaW9uJiYwPHhjLnByZWNpc2lvbjtcImhpZ2hwXCIhPT1MfHx5Y3x8KG1jPyhMPVwibWVkaXVtcFwiLFRIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBoaWdocCBub3Qgc3VwcG9ydGVkLCB1c2luZyBtZWRpdW1wLlwiKSk6KEw9XCJsb3dwXCIsVEhSRUUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IGhpZ2hwIGFuZCBtZWRpdW1wIG5vdCBzdXBwb3J0ZWQsIHVzaW5nIGxvd3AuXCIpKSk7XHJcblwibWVkaXVtcFwiIT09THx8bWN8fChMPVwibG93cFwiLFRIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBtZWRpdW1wIG5vdCBzdXBwb3J0ZWQsIHVzaW5nIGxvd3AuXCIpKTt2YXIgemM9bmV3IFRIUkVFLlNoYWRvd01hcFBsdWdpbih0aGlzLGNhLGJhLHFhKSxBYz1uZXcgVEhSRUUuU3ByaXRlUGx1Z2luKHRoaXMsWGEpLEJjPW5ldyBUSFJFRS5MZW5zRmxhcmVQbHVnaW4odGhpcyxZYSk7dGhpcy5nZXRDb250ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIG19O3RoaXMuZm9yY2VDb250ZXh0TG9zcz1mdW5jdGlvbigpe2RhLmdldChcIldFQkdMX2xvc2VfY29udGV4dFwiKS5sb3NlQ29udGV4dCgpfTt0aGlzLnN1cHBvcnRzVmVydGV4VGV4dHVyZXM9ZnVuY3Rpb24oKXtyZXR1cm4gVmJ9O3RoaXMuc3VwcG9ydHNGbG9hdFRleHR1cmVzPWZ1bmN0aW9uKCl7cmV0dXJuIGRhLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0XCIpfTt0aGlzLnN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXM9ZnVuY3Rpb24oKXtyZXR1cm4gZGEuZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKX07XHJcbnRoaXMuc3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzPWZ1bmN0aW9uKCl7cmV0dXJuIGRhLmdldChcIk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlc1wiKX07dGhpcy5zdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQz1mdW5jdGlvbigpe3JldHVybiBkYS5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKX07dGhpcy5zdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUFZSVEM9ZnVuY3Rpb24oKXtyZXR1cm4gZGEuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfTt0aGlzLnN1cHBvcnRzQmxlbmRNaW5NYXg9ZnVuY3Rpb24oKXtyZXR1cm4gZGEuZ2V0KFwiRVhUX2JsZW5kX21pbm1heFwiKX07dGhpcy5nZXRNYXhBbmlzb3Ryb3B5PWZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKCl7aWYodm9pZCAwIT09YSlyZXR1cm4gYTt2YXIgYj1kYS5nZXQoXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIik7cmV0dXJuIGE9bnVsbCE9PWI/bS5nZXRQYXJhbWV0ZXIoYi5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpOlxyXG4wfX0oKTt0aGlzLmdldFByZWNpc2lvbj1mdW5jdGlvbigpe3JldHVybiBMfTt0aGlzLmdldFBpeGVsUmF0aW89ZnVuY3Rpb24oKXtyZXR1cm4gSH07dGhpcy5zZXRQaXhlbFJhdGlvPWZ1bmN0aW9uKGEpe0g9YX07dGhpcy5zZXRTaXplPWZ1bmN0aW9uKGEsYixjKXtVLndpZHRoPWEqSDtVLmhlaWdodD1iKkg7ITEhPT1jJiYoVS5zdHlsZS53aWR0aD1hK1wicHhcIixVLnN0eWxlLmhlaWdodD1iK1wicHhcIik7dGhpcy5zZXRWaWV3cG9ydCgwLDAsYSxiKX07dGhpcy5zZXRWaWV3cG9ydD1mdW5jdGlvbihhLGIsYyxkKXtpYj1hKkg7YmI9YipIO3BiPWMqSDtxYj1kKkg7bS52aWV3cG9ydChpYixiYixwYixxYil9O3RoaXMuc2V0U2Npc3Nvcj1mdW5jdGlvbihhLGIsYyxkKXttLnNjaXNzb3IoYSpILGIqSCxjKkgsZCpIKX07dGhpcy5lbmFibGVTY2lzc29yVGVzdD1mdW5jdGlvbihhKXthP20uZW5hYmxlKG0uU0NJU1NPUl9URVNUKTptLmRpc2FibGUobS5TQ0lTU09SX1RFU1QpfTt0aGlzLmdldENsZWFyQ29sb3I9XHJcbmZ1bmN0aW9uKCl7cmV0dXJuIGhhfTt0aGlzLnNldENsZWFyQ29sb3I9ZnVuY3Rpb24oYSxiKXtoYS5zZXQoYSk7Tz12b2lkIDAhPT1iP2I6MTtyYihoYS5yLGhhLmcsaGEuYixPKX07dGhpcy5nZXRDbGVhckFscGhhPWZ1bmN0aW9uKCl7cmV0dXJuIE99O3RoaXMuc2V0Q2xlYXJBbHBoYT1mdW5jdGlvbihhKXtPPWE7cmIoaGEucixoYS5nLGhhLmIsTyl9O3RoaXMuY2xlYXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPTA7aWYodm9pZCAwPT09YXx8YSlkfD1tLkNPTE9SX0JVRkZFUl9CSVQ7aWYodm9pZCAwPT09Ynx8YilkfD1tLkRFUFRIX0JVRkZFUl9CSVQ7aWYodm9pZCAwPT09Y3x8YylkfD1tLlNURU5DSUxfQlVGRkVSX0JJVDttLmNsZWFyKGQpfTt0aGlzLmNsZWFyQ29sb3I9ZnVuY3Rpb24oKXttLmNsZWFyKG0uQ09MT1JfQlVGRkVSX0JJVCl9O3RoaXMuY2xlYXJEZXB0aD1mdW5jdGlvbigpe20uY2xlYXIobS5ERVBUSF9CVUZGRVJfQklUKX07dGhpcy5jbGVhclN0ZW5jaWw9ZnVuY3Rpb24oKXttLmNsZWFyKG0uU1RFTkNJTF9CVUZGRVJfQklUKX07XHJcbnRoaXMuY2xlYXJUYXJnZXQ9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5zZXRSZW5kZXJUYXJnZXQoYSk7dGhpcy5jbGVhcihiLGMsZCl9O3RoaXMucmVzZXRHTFN0YXRlPVpiO3ZhciB3Yj1mdW5jdGlvbihhKXthLnRhcmdldC50cmF2ZXJzZShmdW5jdGlvbihhKXthLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZW1vdmVcIix3Yik7aWYoYSBpbnN0YW5jZW9mIFRIUkVFLk1lc2h8fGEgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludENsb3VkfHxhIGluc3RhbmNlb2YgVEhSRUUuTGluZSlkZWxldGUgYmFbYS5pZF07ZWxzZSBpZihhIGluc3RhbmNlb2YgVEhSRUUuSW1tZWRpYXRlUmVuZGVyT2JqZWN0fHxhLmltbWVkaWF0ZVJlbmRlckNhbGxiYWNrKWZvcih2YXIgYj1xYSxjPWIubGVuZ3RoLTE7MDw9YztjLS0pYltjXS5vYmplY3Q9PT1hJiZiLnNwbGljZShjLDEpO2RlbGV0ZSBhLl9fd2ViZ2xJbml0O2RlbGV0ZSBhLl9tb2RlbFZpZXdNYXRyaXg7ZGVsZXRlIGEuX25vcm1hbE1hdHJpeDtkZWxldGUgYS5fX3dlYmdsQWN0aXZlfSl9LFxyXG5qYj1mdW5jdGlvbihhKXthPWEudGFyZ2V0O2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixqYik7ZGVsZXRlIGEuX193ZWJnbEluaXQ7aWYoYSBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5KXtmb3IodmFyIGIgaW4gYS5hdHRyaWJ1dGVzKXt2YXIgYz1hLmF0dHJpYnV0ZXNbYl07dm9pZCAwIT09Yy5idWZmZXImJihtLmRlbGV0ZUJ1ZmZlcihjLmJ1ZmZlciksZGVsZXRlIGMuYnVmZmVyKX1CLmluZm8ubWVtb3J5Lmdlb21ldHJpZXMtLX1lbHNlIGlmKGI9VWFbYS5pZF0sdm9pZCAwIT09Yil7Zm9yKHZhciBjPTAsZD1iLmxlbmd0aDtjPGQ7YysrKXt2YXIgZT1iW2NdO2lmKHZvaWQgMCE9PWUubnVtTW9ycGhUYXJnZXRzKXtmb3IodmFyIGY9MCxnPWUubnVtTW9ycGhUYXJnZXRzO2Y8ZztmKyspbS5kZWxldGVCdWZmZXIoZS5fX3dlYmdsTW9ycGhUYXJnZXRzQnVmZmVyc1tmXSk7ZGVsZXRlIGUuX193ZWJnbE1vcnBoVGFyZ2V0c0J1ZmZlcnN9aWYodm9pZCAwIT09ZS5udW1Nb3JwaE5vcm1hbHMpe2Y9XHJcbjA7Zm9yKGc9ZS5udW1Nb3JwaE5vcm1hbHM7ZjxnO2YrKyltLmRlbGV0ZUJ1ZmZlcihlLl9fd2ViZ2xNb3JwaE5vcm1hbHNCdWZmZXJzW2ZdKTtkZWxldGUgZS5fX3dlYmdsTW9ycGhOb3JtYWxzQnVmZmVyc31uYyhlKX1kZWxldGUgVWFbYS5pZF19ZWxzZSBuYyhhKTt0YT1cIlwifSxQYj1mdW5jdGlvbihhKXthPWEudGFyZ2V0O2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixQYik7YS5pbWFnZSYmYS5pbWFnZS5fX3dlYmdsVGV4dHVyZUN1YmU/KG0uZGVsZXRlVGV4dHVyZShhLmltYWdlLl9fd2ViZ2xUZXh0dXJlQ3ViZSksZGVsZXRlIGEuaW1hZ2UuX193ZWJnbFRleHR1cmVDdWJlKTp2b2lkIDAhPT1hLl9fd2ViZ2xJbml0JiYobS5kZWxldGVUZXh0dXJlKGEuX193ZWJnbFRleHR1cmUpLGRlbGV0ZSBhLl9fd2ViZ2xUZXh0dXJlLGRlbGV0ZSBhLl9fd2ViZ2xJbml0KTtCLmluZm8ubWVtb3J5LnRleHR1cmVzLS19LG9jPWZ1bmN0aW9uKGEpe2E9YS50YXJnZXQ7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLFxyXG5vYyk7aWYoYSYmdm9pZCAwIT09YS5fX3dlYmdsVGV4dHVyZSl7bS5kZWxldGVUZXh0dXJlKGEuX193ZWJnbFRleHR1cmUpO2RlbGV0ZSBhLl9fd2ViZ2xUZXh0dXJlO2lmKGEgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmUpZm9yKHZhciBiPTA7Nj5iO2IrKyltLmRlbGV0ZUZyYW1lYnVmZmVyKGEuX193ZWJnbEZyYW1lYnVmZmVyW2JdKSxtLmRlbGV0ZVJlbmRlcmJ1ZmZlcihhLl9fd2ViZ2xSZW5kZXJidWZmZXJbYl0pO2Vsc2UgbS5kZWxldGVGcmFtZWJ1ZmZlcihhLl9fd2ViZ2xGcmFtZWJ1ZmZlciksbS5kZWxldGVSZW5kZXJidWZmZXIoYS5fX3dlYmdsUmVuZGVyYnVmZmVyKTtkZWxldGUgYS5fX3dlYmdsRnJhbWVidWZmZXI7ZGVsZXRlIGEuX193ZWJnbFJlbmRlcmJ1ZmZlcn1CLmluZm8ubWVtb3J5LnRleHR1cmVzLS19LGljPWZ1bmN0aW9uKGEpe2E9YS50YXJnZXQ7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLGljKTtoYyhhKX0sbmM9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVxyXG5cIl9fd2ViZ2xWZXJ0ZXhCdWZmZXIgX193ZWJnbE5vcm1hbEJ1ZmZlciBfX3dlYmdsVGFuZ2VudEJ1ZmZlciBfX3dlYmdsQ29sb3JCdWZmZXIgX193ZWJnbFVWQnVmZmVyIF9fd2ViZ2xVVjJCdWZmZXIgX193ZWJnbFNraW5JbmRpY2VzQnVmZmVyIF9fd2ViZ2xTa2luV2VpZ2h0c0J1ZmZlciBfX3dlYmdsRmFjZUJ1ZmZlciBfX3dlYmdsTGluZUJ1ZmZlciBfX3dlYmdsTGluZURpc3RhbmNlQnVmZmVyXCIuc3BsaXQoXCIgXCIpLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPWJbY107dm9pZCAwIT09YVtlXSYmKG0uZGVsZXRlQnVmZmVyKGFbZV0pLGRlbGV0ZSBhW2VdKX1pZih2b2lkIDAhPT1hLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdCl7Zm9yKGUgaW4gYS5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3QpbS5kZWxldGVCdWZmZXIoYS5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3RbZV0uYnVmZmVyKTtkZWxldGUgYS5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3R9Qi5pbmZvLm1lbW9yeS5nZW9tZXRyaWVzLS19LFxyXG5oYz1mdW5jdGlvbihhKXt2YXIgYj1hLnByb2dyYW0ucHJvZ3JhbTtpZih2b2lkIDAhPT1iKXthLnByb2dyYW09dm9pZCAwO3ZhciBjLGQsZT0hMTthPTA7Zm9yKGM9UGEubGVuZ3RoO2E8YzthKyspaWYoZD1QYVthXSxkLnByb2dyYW09PT1iKXtkLnVzZWRUaW1lcy0tOzA9PT1kLnVzZWRUaW1lcyYmKGU9ITApO2JyZWFrfWlmKCEwPT09ZSl7ZT1bXTthPTA7Zm9yKGM9UGEubGVuZ3RoO2E8YzthKyspZD1QYVthXSxkLnByb2dyYW0hPT1iJiZlLnB1c2goZCk7UGE9ZTttLmRlbGV0ZVByb2dyYW0oYik7Qi5pbmZvLm1lbW9yeS5wcm9ncmFtcy0tfX19O3RoaXMucmVuZGVyQnVmZmVySW1tZWRpYXRlPWZ1bmN0aW9uKGEsYixjKXtXLmluaXRBdHRyaWJ1dGVzKCk7YS5oYXNQb3NpdGlvbnMmJiFhLl9fd2ViZ2xWZXJ0ZXhCdWZmZXImJihhLl9fd2ViZ2xWZXJ0ZXhCdWZmZXI9bS5jcmVhdGVCdWZmZXIoKSk7YS5oYXNOb3JtYWxzJiYhYS5fX3dlYmdsTm9ybWFsQnVmZmVyJiYoYS5fX3dlYmdsTm9ybWFsQnVmZmVyPVxyXG5tLmNyZWF0ZUJ1ZmZlcigpKTthLmhhc1V2cyYmIWEuX193ZWJnbFV2QnVmZmVyJiYoYS5fX3dlYmdsVXZCdWZmZXI9bS5jcmVhdGVCdWZmZXIoKSk7YS5oYXNDb2xvcnMmJiFhLl9fd2ViZ2xDb2xvckJ1ZmZlciYmKGEuX193ZWJnbENvbG9yQnVmZmVyPW0uY3JlYXRlQnVmZmVyKCkpO2EuaGFzUG9zaXRpb25zJiYobS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLGEuX193ZWJnbFZlcnRleEJ1ZmZlciksbS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLGEucG9zaXRpb25BcnJheSxtLkRZTkFNSUNfRFJBVyksVy5lbmFibGVBdHRyaWJ1dGUoYi5hdHRyaWJ1dGVzLnBvc2l0aW9uKSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5hdHRyaWJ1dGVzLnBvc2l0aW9uLDMsbS5GTE9BVCwhMSwwLDApKTtpZihhLmhhc05vcm1hbHMpe20uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixhLl9fd2ViZ2xOb3JtYWxCdWZmZXIpO2lmKCExPT09YyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsJiZcclxuYy5zaGFkaW5nPT09VEhSRUUuRmxhdFNoYWRpbmcpe3ZhciBkLGUsZixnLGgsayxuLGwscCxxLHIscz0zKmEuY291bnQ7Zm9yKHI9MDtyPHM7cis9OSlxPWEubm9ybWFsQXJyYXksZD1xW3JdLGU9cVtyKzFdLGY9cVtyKzJdLGc9cVtyKzNdLGs9cVtyKzRdLGw9cVtyKzVdLGg9cVtyKzZdLG49cVtyKzddLHA9cVtyKzhdLGQ9KGQrZytoKS8zLGU9KGUraytuKS8zLGY9KGYrbCtwKS8zLHFbcl09ZCxxW3IrMV09ZSxxW3IrMl09ZixxW3IrM109ZCxxW3IrNF09ZSxxW3IrNV09ZixxW3IrNl09ZCxxW3IrN109ZSxxW3IrOF09Zn1tLmJ1ZmZlckRhdGEobS5BUlJBWV9CVUZGRVIsYS5ub3JtYWxBcnJheSxtLkRZTkFNSUNfRFJBVyk7Vy5lbmFibGVBdHRyaWJ1dGUoYi5hdHRyaWJ1dGVzLm5vcm1hbCk7bS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIuYXR0cmlidXRlcy5ub3JtYWwsMyxtLkZMT0FULCExLDAsMCl9YS5oYXNVdnMmJmMubWFwJiYobS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLGEuX193ZWJnbFV2QnVmZmVyKSxcclxubS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLGEudXZBcnJheSxtLkRZTkFNSUNfRFJBVyksVy5lbmFibGVBdHRyaWJ1dGUoYi5hdHRyaWJ1dGVzLnV2KSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5hdHRyaWJ1dGVzLnV2LDIsbS5GTE9BVCwhMSwwLDApKTthLmhhc0NvbG9ycyYmYy52ZXJ0ZXhDb2xvcnMhPT1USFJFRS5Ob0NvbG9ycyYmKG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixhLl9fd2ViZ2xDb2xvckJ1ZmZlciksbS5idWZmZXJEYXRhKG0uQVJSQVlfQlVGRkVSLGEuY29sb3JBcnJheSxtLkRZTkFNSUNfRFJBVyksVy5lbmFibGVBdHRyaWJ1dGUoYi5hdHRyaWJ1dGVzLmNvbG9yKSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5hdHRyaWJ1dGVzLmNvbG9yLDMsbS5GTE9BVCwhMSwwLDApKTtXLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7bS5kcmF3QXJyYXlzKG0uVFJJQU5HTEVTLDAsYS5jb3VudCk7YS5jb3VudD0wfTt0aGlzLnJlbmRlckJ1ZmZlckRpcmVjdD1mdW5jdGlvbihhLFxyXG5iLGMsZSxmLGcpe2lmKCExIT09ZS52aXNpYmxlKWlmKHQoZyksYT12KGEsYixjLGUsZyksYj0hMSxjPVwiZGlyZWN0X1wiK2YuaWQrXCJfXCIrYS5pZCtcIl9cIisoZS53aXJlZnJhbWU/MTowKSxjIT09dGEmJih0YT1jLGI9ITApLGImJlcuaW5pdEF0dHJpYnV0ZXMoKSxnIGluc3RhbmNlb2YgVEhSRUUuTWVzaCl7Zz0hMD09PWUud2lyZWZyYW1lP20uTElORVM6bS5UUklBTkdMRVM7dmFyIGg9Zi5hdHRyaWJ1dGVzLmluZGV4O2lmKGgpe3ZhciBrLG47aC5hcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5JiZkYS5nZXQoXCJPRVNfZWxlbWVudF9pbmRleF91aW50XCIpPyhrPW0uVU5TSUdORURfSU5ULG49NCk6KGs9bS5VTlNJR05FRF9TSE9SVCxuPTIpO2M9Zi5vZmZzZXRzO2lmKDA9PT1jLmxlbmd0aCliJiYoZChlLGEsZiwwKSxtLmJpbmRCdWZmZXIobS5FTEVNRU5UX0FSUkFZX0JVRkZFUixoLmJ1ZmZlcikpLG0uZHJhd0VsZW1lbnRzKGcsaC5hcnJheS5sZW5ndGgsaywwKSxCLmluZm8ucmVuZGVyLmNhbGxzKyssXHJcbkIuaW5mby5yZW5kZXIudmVydGljZXMrPWguYXJyYXkubGVuZ3RoLEIuaW5mby5yZW5kZXIuZmFjZXMrPWguYXJyYXkubGVuZ3RoLzM7ZWxzZXtiPSEwO2Zvcih2YXIgbD0wLHA9Yy5sZW5ndGg7bDxwO2wrKyl7dmFyIHE9Y1tsXS5pbmRleDtiJiYoZChlLGEsZixxKSxtLmJpbmRCdWZmZXIobS5FTEVNRU5UX0FSUkFZX0JVRkZFUixoLmJ1ZmZlcikpO20uZHJhd0VsZW1lbnRzKGcsY1tsXS5jb3VudCxrLGNbbF0uc3RhcnQqbik7Qi5pbmZvLnJlbmRlci5jYWxscysrO0IuaW5mby5yZW5kZXIudmVydGljZXMrPWNbbF0uY291bnQ7Qi5pbmZvLnJlbmRlci5mYWNlcys9Y1tsXS5jb3VudC8zfX19ZWxzZSBiJiZkKGUsYSxmLDApLGU9Zi5hdHRyaWJ1dGVzLnBvc2l0aW9uLG0uZHJhd0FycmF5cyhnLDAsZS5hcnJheS5sZW5ndGgvZS5pdGVtU2l6ZSksQi5pbmZvLnJlbmRlci5jYWxscysrLEIuaW5mby5yZW5kZXIudmVydGljZXMrPWUuYXJyYXkubGVuZ3RoL2UuaXRlbVNpemUsQi5pbmZvLnJlbmRlci5mYWNlcys9XHJcbmUuYXJyYXkubGVuZ3RoLygzKmUuaXRlbVNpemUpfWVsc2UgaWYoZyBpbnN0YW5jZW9mIFRIUkVFLlBvaW50Q2xvdWQpaWYoZz1tLlBPSU5UUyxoPWYuYXR0cmlidXRlcy5pbmRleClpZihoLmFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkmJmRhLmdldChcIk9FU19lbGVtZW50X2luZGV4X3VpbnRcIik/KGs9bS5VTlNJR05FRF9JTlQsbj00KTooaz1tLlVOU0lHTkVEX1NIT1JULG49MiksYz1mLm9mZnNldHMsMD09PWMubGVuZ3RoKWImJihkKGUsYSxmLDApLG0uYmluZEJ1ZmZlcihtLkVMRU1FTlRfQVJSQVlfQlVGRkVSLGguYnVmZmVyKSksbS5kcmF3RWxlbWVudHMoZyxoLmFycmF5Lmxlbmd0aCxrLDApLEIuaW5mby5yZW5kZXIuY2FsbHMrKyxCLmluZm8ucmVuZGVyLnBvaW50cys9aC5hcnJheS5sZW5ndGg7ZWxzZSBmb3IoMTxjLmxlbmd0aCYmKGI9ITApLGw9MCxwPWMubGVuZ3RoO2w8cDtsKyspcT1jW2xdLmluZGV4LGImJihkKGUsYSxmLHEpLG0uYmluZEJ1ZmZlcihtLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxyXG5oLmJ1ZmZlcikpLG0uZHJhd0VsZW1lbnRzKGcsY1tsXS5jb3VudCxrLGNbbF0uc3RhcnQqbiksQi5pbmZvLnJlbmRlci5jYWxscysrLEIuaW5mby5yZW5kZXIucG9pbnRzKz1jW2xdLmNvdW50O2Vsc2UgaWYoYiYmZChlLGEsZiwwKSxlPWYuYXR0cmlidXRlcy5wb3NpdGlvbixjPWYub2Zmc2V0cywwPT09Yy5sZW5ndGgpbS5kcmF3QXJyYXlzKGcsMCxlLmFycmF5Lmxlbmd0aC8zKSxCLmluZm8ucmVuZGVyLmNhbGxzKyssQi5pbmZvLnJlbmRlci5wb2ludHMrPWUuYXJyYXkubGVuZ3RoLzM7ZWxzZSBmb3IobD0wLHA9Yy5sZW5ndGg7bDxwO2wrKyltLmRyYXdBcnJheXMoZyxjW2xdLmluZGV4LGNbbF0uY291bnQpLEIuaW5mby5yZW5kZXIuY2FsbHMrKyxCLmluZm8ucmVuZGVyLnBvaW50cys9Y1tsXS5jb3VudDtlbHNlIGlmKGcgaW5zdGFuY2VvZiBUSFJFRS5MaW5lKWlmKGc9Zy5tb2RlPT09VEhSRUUuTGluZVN0cmlwP20uTElORV9TVFJJUDptLkxJTkVTLFcuc2V0TGluZVdpZHRoKGUubGluZXdpZHRoKlxyXG5IKSxoPWYuYXR0cmlidXRlcy5pbmRleClpZihoLmFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXk/KGs9bS5VTlNJR05FRF9JTlQsbj00KTooaz1tLlVOU0lHTkVEX1NIT1JULG49MiksYz1mLm9mZnNldHMsMD09PWMubGVuZ3RoKWImJihkKGUsYSxmLDApLG0uYmluZEJ1ZmZlcihtLkVMRU1FTlRfQVJSQVlfQlVGRkVSLGguYnVmZmVyKSksbS5kcmF3RWxlbWVudHMoZyxoLmFycmF5Lmxlbmd0aCxrLDApLEIuaW5mby5yZW5kZXIuY2FsbHMrKyxCLmluZm8ucmVuZGVyLnZlcnRpY2VzKz1oLmFycmF5Lmxlbmd0aDtlbHNlIGZvcigxPGMubGVuZ3RoJiYoYj0hMCksbD0wLHA9Yy5sZW5ndGg7bDxwO2wrKylxPWNbbF0uaW5kZXgsYiYmKGQoZSxhLGYscSksbS5iaW5kQnVmZmVyKG0uRUxFTUVOVF9BUlJBWV9CVUZGRVIsaC5idWZmZXIpKSxtLmRyYXdFbGVtZW50cyhnLGNbbF0uY291bnQsayxjW2xdLnN0YXJ0Km4pLEIuaW5mby5yZW5kZXIuY2FsbHMrKyxCLmluZm8ucmVuZGVyLnZlcnRpY2VzKz1cclxuY1tsXS5jb3VudDtlbHNlIGlmKGImJmQoZSxhLGYsMCksZT1mLmF0dHJpYnV0ZXMucG9zaXRpb24sYz1mLm9mZnNldHMsMD09PWMubGVuZ3RoKW0uZHJhd0FycmF5cyhnLDAsZS5hcnJheS5sZW5ndGgvMyksQi5pbmZvLnJlbmRlci5jYWxscysrLEIuaW5mby5yZW5kZXIudmVydGljZXMrPWUuYXJyYXkubGVuZ3RoLzM7ZWxzZSBmb3IobD0wLHA9Yy5sZW5ndGg7bDxwO2wrKyltLmRyYXdBcnJheXMoZyxjW2xdLmluZGV4LGNbbF0uY291bnQpLEIuaW5mby5yZW5kZXIuY2FsbHMrKyxCLmluZm8ucmVuZGVyLnZlcnRpY2VzKz1jW2xdLmNvdW50fTt0aGlzLnJlbmRlckJ1ZmZlcj1mdW5jdGlvbihhLGIsYyxkLGUsZil7aWYoITEhPT1kLnZpc2libGUpe3QoZik7Yz12KGEsYixjLGQsZik7Yj1jLmF0dHJpYnV0ZXM7YT0hMTtjPWUuaWQrXCJfXCIrYy5pZCtcIl9cIisoZC53aXJlZnJhbWU/MTowKTtjIT09dGEmJih0YT1jLGE9ITApO2EmJlcuaW5pdEF0dHJpYnV0ZXMoKTtpZighZC5tb3JwaFRhcmdldHMmJlxyXG4wPD1iLnBvc2l0aW9uKWEmJihtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsZS5fX3dlYmdsVmVydGV4QnVmZmVyKSxXLmVuYWJsZUF0dHJpYnV0ZShiLnBvc2l0aW9uKSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5wb3NpdGlvbiwzLG0uRkxPQVQsITEsMCwwKSk7ZWxzZSBpZihmLm1vcnBoVGFyZ2V0QmFzZSl7Yz1kLnByb2dyYW0uYXR0cmlidXRlczstMSE9PWYubW9ycGhUYXJnZXRCYXNlJiYwPD1jLnBvc2l0aW9uPyhtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsZS5fX3dlYmdsTW9ycGhUYXJnZXRzQnVmZmVyc1tmLm1vcnBoVGFyZ2V0QmFzZV0pLFcuZW5hYmxlQXR0cmlidXRlKGMucG9zaXRpb24pLG0udmVydGV4QXR0cmliUG9pbnRlcihjLnBvc2l0aW9uLDMsbS5GTE9BVCwhMSwwLDApKTowPD1jLnBvc2l0aW9uJiYobS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLGUuX193ZWJnbFZlcnRleEJ1ZmZlciksVy5lbmFibGVBdHRyaWJ1dGUoYy5wb3NpdGlvbiksbS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGMucG9zaXRpb24sXHJcbjMsbS5GTE9BVCwhMSwwLDApKTtpZihmLm1vcnBoVGFyZ2V0Rm9yY2VkT3JkZXIubGVuZ3RoKWZvcih2YXIgaD0wLGs9Zi5tb3JwaFRhcmdldEZvcmNlZE9yZGVyLG49Zi5tb3JwaFRhcmdldEluZmx1ZW5jZXMsbDtoPGQubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzJiZoPGsubGVuZ3RoOylsPWNbXCJtb3JwaFRhcmdldFwiK2hdLDA8PWwmJihtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsZS5fX3dlYmdsTW9ycGhUYXJnZXRzQnVmZmVyc1trW2hdXSksVy5lbmFibGVBdHRyaWJ1dGUobCksbS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGwsMyxtLkZMT0FULCExLDAsMCkpLGw9Y1tcIm1vcnBoTm9ybWFsXCIraF0sMDw9bCYmZC5tb3JwaE5vcm1hbHMmJihtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsZS5fX3dlYmdsTW9ycGhOb3JtYWxzQnVmZmVyc1trW2hdXSksVy5lbmFibGVBdHRyaWJ1dGUobCksbS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGwsMyxtLkZMT0FULCExLDAsMCkpLGYuX193ZWJnbE1vcnBoVGFyZ2V0SW5mbHVlbmNlc1toXT1cclxubltrW2hdXSxoKys7ZWxzZXtrPVtdO249Zi5tb3JwaFRhcmdldEluZmx1ZW5jZXM7aD1mLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cztuLmxlbmd0aD5oLmxlbmd0aCYmKGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IEluZmx1ZW5jZXMgYXJyYXkgaXMgYmlnZ2VyIHRoYW4gbW9ycGhUYXJnZXRzIGFycmF5LlwiKSxuLmxlbmd0aD1oLmxlbmd0aCk7aD0wO2ZvcihsPW4ubGVuZ3RoO2g8bDtoKyspay5wdXNoKFtuW2hdLGhdKTtrLmxlbmd0aD5kLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cz8oay5zb3J0KGcpLGsubGVuZ3RoPWQubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzKTprLmxlbmd0aD5kLm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscz9rLnNvcnQoZyk6MD09PWsubGVuZ3RoJiZrLnB1c2goWzAsMF0pO2Zvcih2YXIgaD0wLHA9ZC5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHM7aDxwO2grKylpZihrW2hdKXt2YXIgcT1rW2hdWzFdO2w9Y1tcIm1vcnBoVGFyZ2V0XCIraF07MDw9bCYmXHJcbihtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsZS5fX3dlYmdsTW9ycGhUYXJnZXRzQnVmZmVyc1txXSksVy5lbmFibGVBdHRyaWJ1dGUobCksbS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGwsMyxtLkZMT0FULCExLDAsMCkpO2w9Y1tcIm1vcnBoTm9ybWFsXCIraF07MDw9bCYmZC5tb3JwaE5vcm1hbHMmJihtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsZS5fX3dlYmdsTW9ycGhOb3JtYWxzQnVmZmVyc1txXSksVy5lbmFibGVBdHRyaWJ1dGUobCksbS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGwsMyxtLkZMT0FULCExLDAsMCkpO2YuX193ZWJnbE1vcnBoVGFyZ2V0SW5mbHVlbmNlc1toXT1uW3FdfWVsc2UgZi5fX3dlYmdsTW9ycGhUYXJnZXRJbmZsdWVuY2VzW2hdPTB9bnVsbCE9PWQucHJvZ3JhbS51bmlmb3Jtcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMmJm0udW5pZm9ybTFmdihkLnByb2dyYW0udW5pZm9ybXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLGYuX193ZWJnbE1vcnBoVGFyZ2V0SW5mbHVlbmNlcyl9aWYoYSl7aWYoZS5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3QpZm9yKGM9XHJcbjAsbj1lLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdC5sZW5ndGg7YzxuO2MrKylrPWUuX193ZWJnbEN1c3RvbUF0dHJpYnV0ZXNMaXN0W2NdLDA8PWJbay5idWZmZXIuYmVsb25nc1RvQXR0cmlidXRlXSYmKG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixrLmJ1ZmZlciksVy5lbmFibGVBdHRyaWJ1dGUoYltrLmJ1ZmZlci5iZWxvbmdzVG9BdHRyaWJ1dGVdKSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYltrLmJ1ZmZlci5iZWxvbmdzVG9BdHRyaWJ1dGVdLGsuc2l6ZSxtLkZMT0FULCExLDAsMCkpOzA8PWIuY29sb3ImJigwPGYuZ2VvbWV0cnkuY29sb3JzLmxlbmd0aHx8MDxmLmdlb21ldHJ5LmZhY2VzLmxlbmd0aD8obS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLGUuX193ZWJnbENvbG9yQnVmZmVyKSxXLmVuYWJsZUF0dHJpYnV0ZShiLmNvbG9yKSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5jb2xvciwzLG0uRkxPQVQsITEsMCwwKSk6dm9pZCAwIT09ZC5kZWZhdWx0QXR0cmlidXRlVmFsdWVzJiZcclxubS52ZXJ0ZXhBdHRyaWIzZnYoYi5jb2xvcixkLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMuY29sb3IpKTswPD1iLm5vcm1hbCYmKG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixlLl9fd2ViZ2xOb3JtYWxCdWZmZXIpLFcuZW5hYmxlQXR0cmlidXRlKGIubm9ybWFsKSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5ub3JtYWwsMyxtLkZMT0FULCExLDAsMCkpOzA8PWIudGFuZ2VudCYmKG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixlLl9fd2ViZ2xUYW5nZW50QnVmZmVyKSxXLmVuYWJsZUF0dHJpYnV0ZShiLnRhbmdlbnQpLG0udmVydGV4QXR0cmliUG9pbnRlcihiLnRhbmdlbnQsNCxtLkZMT0FULCExLDAsMCkpOzA8PWIudXYmJihmLmdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbMF0/KG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixlLl9fd2ViZ2xVVkJ1ZmZlciksVy5lbmFibGVBdHRyaWJ1dGUoYi51diksbS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIudXYsMixtLkZMT0FULCExLDAsXHJcbjApKTp2b2lkIDAhPT1kLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMmJm0udmVydGV4QXR0cmliMmZ2KGIudXYsZC5kZWZhdWx0QXR0cmlidXRlVmFsdWVzLnV2KSk7MDw9Yi51djImJihmLmdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbMV0/KG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixlLl9fd2ViZ2xVVjJCdWZmZXIpLFcuZW5hYmxlQXR0cmlidXRlKGIudXYyKSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi51djIsMixtLkZMT0FULCExLDAsMCkpOnZvaWQgMCE9PWQuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyYmbS52ZXJ0ZXhBdHRyaWIyZnYoYi51djIsZC5kZWZhdWx0QXR0cmlidXRlVmFsdWVzLnV2MikpO2Quc2tpbm5pbmcmJjA8PWIuc2tpbkluZGV4JiYwPD1iLnNraW5XZWlnaHQmJihtLmJpbmRCdWZmZXIobS5BUlJBWV9CVUZGRVIsZS5fX3dlYmdsU2tpbkluZGljZXNCdWZmZXIpLFcuZW5hYmxlQXR0cmlidXRlKGIuc2tpbkluZGV4KSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5za2luSW5kZXgsXHJcbjQsbS5GTE9BVCwhMSwwLDApLG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixlLl9fd2ViZ2xTa2luV2VpZ2h0c0J1ZmZlciksVy5lbmFibGVBdHRyaWJ1dGUoYi5za2luV2VpZ2h0KSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5za2luV2VpZ2h0LDQsbS5GTE9BVCwhMSwwLDApKTswPD1iLmxpbmVEaXN0YW5jZSYmKG0uYmluZEJ1ZmZlcihtLkFSUkFZX0JVRkZFUixlLl9fd2ViZ2xMaW5lRGlzdGFuY2VCdWZmZXIpLFcuZW5hYmxlQXR0cmlidXRlKGIubGluZURpc3RhbmNlKSxtLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5saW5lRGlzdGFuY2UsMSxtLkZMT0FULCExLDAsMCkpfVcuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtmIGluc3RhbmNlb2YgVEhSRUUuTWVzaD8oZj1lLl9fdHlwZUFycmF5PT09VWludDMyQXJyYXk/bS5VTlNJR05FRF9JTlQ6bS5VTlNJR05FRF9TSE9SVCxkLndpcmVmcmFtZT8oVy5zZXRMaW5lV2lkdGgoZC53aXJlZnJhbWVMaW5ld2lkdGgqSCksYSYmbS5iaW5kQnVmZmVyKG0uRUxFTUVOVF9BUlJBWV9CVUZGRVIsXHJcbmUuX193ZWJnbExpbmVCdWZmZXIpLG0uZHJhd0VsZW1lbnRzKG0uTElORVMsZS5fX3dlYmdsTGluZUNvdW50LGYsMCkpOihhJiZtLmJpbmRCdWZmZXIobS5FTEVNRU5UX0FSUkFZX0JVRkZFUixlLl9fd2ViZ2xGYWNlQnVmZmVyKSxtLmRyYXdFbGVtZW50cyhtLlRSSUFOR0xFUyxlLl9fd2ViZ2xGYWNlQ291bnQsZiwwKSksQi5pbmZvLnJlbmRlci5jYWxscysrLEIuaW5mby5yZW5kZXIudmVydGljZXMrPWUuX193ZWJnbEZhY2VDb3VudCxCLmluZm8ucmVuZGVyLmZhY2VzKz1lLl9fd2ViZ2xGYWNlQ291bnQvMyk6ZiBpbnN0YW5jZW9mIFRIUkVFLkxpbmU/KGY9Zi5tb2RlPT09VEhSRUUuTGluZVN0cmlwP20uTElORV9TVFJJUDptLkxJTkVTLFcuc2V0TGluZVdpZHRoKGQubGluZXdpZHRoKkgpLG0uZHJhd0FycmF5cyhmLDAsZS5fX3dlYmdsTGluZUNvdW50KSxCLmluZm8ucmVuZGVyLmNhbGxzKyspOmYgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludENsb3VkJiYobS5kcmF3QXJyYXlzKG0uUE9JTlRTLFxyXG4wLGUuX193ZWJnbFBhcnRpY2xlQ291bnQpLEIuaW5mby5yZW5kZXIuY2FsbHMrKyxCLmluZm8ucmVuZGVyLnBvaW50cys9ZS5fX3dlYmdsUGFydGljbGVDb3VudCl9fTt0aGlzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyxkKXtpZighMT09PWIgaW5zdGFuY2VvZiBUSFJFRS5DYW1lcmEpVEhSRUUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcjogY2FtZXJhIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5DYW1lcmEuXCIpO2Vsc2V7dmFyIGc9YS5mb2c7dGE9XCJcIjt1Yj0tMTt2Yj1udWxsO09iPSEwOyEwPT09YS5hdXRvVXBkYXRlJiZhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7dm9pZCAwPT09Yi5wYXJlbnQmJmIudXBkYXRlTWF0cml4V29ybGQoKTthLnRyYXZlcnNlKGZ1bmN0aW9uKGEpe2EgaW5zdGFuY2VvZiBUSFJFRS5Ta2lubmVkTWVzaCYmYS5za2VsZXRvbi51cGRhdGUoKX0pO2IubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoYi5tYXRyaXhXb3JsZCk7ZGIubXVsdGlwbHlNYXRyaWNlcyhiLnByb2plY3Rpb25NYXRyaXgsXHJcbmIubWF0cml4V29ybGRJbnZlcnNlKTtjYi5zZXRGcm9tTWF0cml4KGRiKTtjYS5sZW5ndGg9MDtLYS5sZW5ndGg9MDtRYS5sZW5ndGg9MDtYYS5sZW5ndGg9MDtZYS5sZW5ndGg9MDtoKGEpOyEwPT09Qi5zb3J0T2JqZWN0cyYmKEthLnNvcnQoZSksUWEuc29ydChmKSk7emMucmVuZGVyKGEsYik7Qi5pbmZvLnJlbmRlci5jYWxscz0wO0IuaW5mby5yZW5kZXIudmVydGljZXM9MDtCLmluZm8ucmVuZGVyLmZhY2VzPTA7Qi5pbmZvLnJlbmRlci5wb2ludHM9MDt0aGlzLnNldFJlbmRlclRhcmdldChjKTsodGhpcy5hdXRvQ2xlYXJ8fGQpJiZ0aGlzLmNsZWFyKHRoaXMuYXV0b0NsZWFyQ29sb3IsdGhpcy5hdXRvQ2xlYXJEZXB0aCx0aGlzLmF1dG9DbGVhclN0ZW5jaWwpO2Q9MDtmb3IodmFyIG49cWEubGVuZ3RoO2Q8bjtkKyspe3ZhciBtPXFhW2RdLHE9bS5vYmplY3Q7cS52aXNpYmxlJiYodyhxLGIpLHAobSkpfWEub3ZlcnJpZGVNYXRlcmlhbD8oZD1hLm92ZXJyaWRlTWF0ZXJpYWwsdShkKSxcclxuayhLYSxiLGNhLGcsZCksayhRYSxiLGNhLGcsZCksbChxYSxcIlwiLGIsY2EsZyxkKSk6KFcuc2V0QmxlbmRpbmcoVEhSRUUuTm9CbGVuZGluZyksayhLYSxiLGNhLGcsbnVsbCksbChxYSxcIm9wYXF1ZVwiLGIsY2EsZyxudWxsKSxrKFFhLGIsY2EsZyxudWxsKSxsKHFhLFwidHJhbnNwYXJlbnRcIixiLGNhLGcsbnVsbCkpO0FjLnJlbmRlcihhLGIpO0JjLnJlbmRlcihhLGIsWGIsZmMpO2MmJmMuZ2VuZXJhdGVNaXBtYXBzJiZjLm1pbkZpbHRlciE9PVRIUkVFLk5lYXJlc3RGaWx0ZXImJmMubWluRmlsdGVyIT09VEhSRUUuTGluZWFyRmlsdGVyJiZGKGMpO1cuc2V0RGVwdGhUZXN0KCEwKTtXLnNldERlcHRoV3JpdGUoITApO1cuc2V0Q29sb3JXcml0ZSghMCl9fTt0aGlzLnJlbmRlckltbWVkaWF0ZU9iamVjdD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPXYoYSxiLGMsZCxlKTt0YT1cIlwiO0Iuc2V0TWF0ZXJpYWxGYWNlcyhkKTtlLmltbWVkaWF0ZVJlbmRlckNhbGxiYWNrP2UuaW1tZWRpYXRlUmVuZGVyQ2FsbGJhY2soZixcclxubSxjYik6ZS5yZW5kZXIoZnVuY3Rpb24oYSl7Qi5yZW5kZXJCdWZmZXJJbW1lZGlhdGUoYSxmLGQpfSl9O3ZhciBVYT17fSxRYj0wLHBjPXtNZXNoRGVwdGhNYXRlcmlhbDpcImRlcHRoXCIsTWVzaE5vcm1hbE1hdGVyaWFsOlwibm9ybWFsXCIsTWVzaEJhc2ljTWF0ZXJpYWw6XCJiYXNpY1wiLE1lc2hMYW1iZXJ0TWF0ZXJpYWw6XCJsYW1iZXJ0XCIsTWVzaFBob25nTWF0ZXJpYWw6XCJwaG9uZ1wiLExpbmVCYXNpY01hdGVyaWFsOlwiYmFzaWNcIixMaW5lRGFzaGVkTWF0ZXJpYWw6XCJkYXNoZWRcIixQb2ludENsb3VkTWF0ZXJpYWw6XCJwYXJ0aWNsZV9iYXNpY1wifTt0aGlzLnNldEZhY2VDdWxsaW5nPWZ1bmN0aW9uKGEsYil7YT09PVRIUkVFLkN1bGxGYWNlTm9uZT9tLmRpc2FibGUobS5DVUxMX0ZBQ0UpOihiPT09VEhSRUUuRnJvbnRGYWNlRGlyZWN0aW9uQ1c/bS5mcm9udEZhY2UobS5DVyk6bS5mcm9udEZhY2UobS5DQ1cpLGE9PT1USFJFRS5DdWxsRmFjZUJhY2s/bS5jdWxsRmFjZShtLkJBQ0spOmE9PT1cclxuVEhSRUUuQ3VsbEZhY2VGcm9udD9tLmN1bGxGYWNlKG0uRlJPTlQpOm0uY3VsbEZhY2UobS5GUk9OVF9BTkRfQkFDSyksbS5lbmFibGUobS5DVUxMX0ZBQ0UpKX07dGhpcy5zZXRNYXRlcmlhbEZhY2VzPWZ1bmN0aW9uKGEpe1cuc2V0RG91YmxlU2lkZWQoYS5zaWRlPT09VEhSRUUuRG91YmxlU2lkZSk7Vy5zZXRGbGlwU2lkZWQoYS5zaWRlPT09VEhSRUUuQmFja1NpZGUpfTt0aGlzLnVwbG9hZFRleHR1cmU9ZnVuY3Rpb24oYSl7dm9pZCAwPT09YS5fX3dlYmdsSW5pdCYmKGEuX193ZWJnbEluaXQ9ITAsYS5hZGRFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLFBiKSxhLl9fd2ViZ2xUZXh0dXJlPW0uY3JlYXRlVGV4dHVyZSgpLEIuaW5mby5tZW1vcnkudGV4dHVyZXMrKyk7bS5iaW5kVGV4dHVyZShtLlRFWFRVUkVfMkQsYS5fX3dlYmdsVGV4dHVyZSk7bS5waXhlbFN0b3JlaShtLlVOUEFDS19GTElQX1lfV0VCR0wsYS5mbGlwWSk7bS5waXhlbFN0b3JlaShtLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCxcclxuYS5wcmVtdWx0aXBseUFscGhhKTttLnBpeGVsU3RvcmVpKG0uVU5QQUNLX0FMSUdOTUVOVCxhLnVucGFja0FsaWdubWVudCk7YS5pbWFnZT1FKGEuaW1hZ2UsdGMpO3ZhciBiPWEuaW1hZ2UsYz1USFJFRS5NYXRoLmlzUG93ZXJPZlR3byhiLndpZHRoKSYmVEhSRUUuTWF0aC5pc1Bvd2VyT2ZUd28oYi5oZWlnaHQpLGQ9SShhLmZvcm1hdCksZT1JKGEudHlwZSk7QShtLlRFWFRVUkVfMkQsYSxjKTt2YXIgZj1hLm1pcG1hcHM7aWYoYSBpbnN0YW5jZW9mIFRIUkVFLkRhdGFUZXh0dXJlKWlmKDA8Zi5sZW5ndGgmJmMpe2Zvcih2YXIgZz0wLGg9Zi5sZW5ndGg7ZzxoO2crKyliPWZbZ10sbS50ZXhJbWFnZTJEKG0uVEVYVFVSRV8yRCxnLGQsYi53aWR0aCxiLmhlaWdodCwwLGQsZSxiLmRhdGEpO2EuZ2VuZXJhdGVNaXBtYXBzPSExfWVsc2UgbS50ZXhJbWFnZTJEKG0uVEVYVFVSRV8yRCwwLGQsYi53aWR0aCxiLmhlaWdodCwwLGQsZSxiLmRhdGEpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIFRIUkVFLkNvbXByZXNzZWRUZXh0dXJlKWZvcihnPVxyXG4wLGg9Zi5sZW5ndGg7ZzxoO2crKyliPWZbZ10sYS5mb3JtYXQhPT1USFJFRS5SR0JBRm9ybWF0JiZhLmZvcm1hdCE9PVRIUkVFLlJHQkZvcm1hdD8tMTxrYygpLmluZGV4T2YoZCk/bS5jb21wcmVzc2VkVGV4SW1hZ2UyRChtLlRFWFRVUkVfMkQsZyxkLGIud2lkdGgsYi5oZWlnaHQsMCxiLmRhdGEpOlRIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpXCIpOm0udGV4SW1hZ2UyRChtLlRFWFRVUkVfMkQsZyxkLGIud2lkdGgsYi5oZWlnaHQsMCxkLGUsYi5kYXRhKTtlbHNlIGlmKDA8Zi5sZW5ndGgmJmMpe2c9MDtmb3IoaD1mLmxlbmd0aDtnPGg7ZysrKWI9ZltnXSxtLnRleEltYWdlMkQobS5URVhUVVJFXzJELGcsZCxkLGUsYik7YS5nZW5lcmF0ZU1pcG1hcHM9ITF9ZWxzZSBtLnRleEltYWdlMkQobS5URVhUVVJFXzJELDAsZCxkLGUsYS5pbWFnZSk7XHJcbmEuZ2VuZXJhdGVNaXBtYXBzJiZjJiZtLmdlbmVyYXRlTWlwbWFwKG0uVEVYVFVSRV8yRCk7YS5uZWVkc1VwZGF0ZT0hMTtpZihhLm9uVXBkYXRlKWEub25VcGRhdGUoKX07dGhpcy5zZXRUZXh0dXJlPWZ1bmN0aW9uKGEsYil7bS5hY3RpdmVUZXh0dXJlKG0uVEVYVFVSRTArYik7YS5uZWVkc1VwZGF0ZT9CLnVwbG9hZFRleHR1cmUoYSk6bS5iaW5kVGV4dHVyZShtLlRFWFRVUkVfMkQsYS5fX3dlYmdsVGV4dHVyZSl9O3RoaXMuc2V0UmVuZGVyVGFyZ2V0PWZ1bmN0aW9uKGEpe3ZhciBiPWEgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU7aWYoYSYmdm9pZCAwPT09YS5fX3dlYmdsRnJhbWVidWZmZXIpe3ZvaWQgMD09PWEuZGVwdGhCdWZmZXImJihhLmRlcHRoQnVmZmVyPSEwKTt2b2lkIDA9PT1hLnN0ZW5jaWxCdWZmZXImJihhLnN0ZW5jaWxCdWZmZXI9ITApO2EuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixvYyk7YS5fX3dlYmdsVGV4dHVyZT1tLmNyZWF0ZVRleHR1cmUoKTtcclxuQi5pbmZvLm1lbW9yeS50ZXh0dXJlcysrO3ZhciBjPVRIUkVFLk1hdGguaXNQb3dlck9mVHdvKGEud2lkdGgpJiZUSFJFRS5NYXRoLmlzUG93ZXJPZlR3byhhLmhlaWdodCksZD1JKGEuZm9ybWF0KSxlPUkoYS50eXBlKTtpZihiKXthLl9fd2ViZ2xGcmFtZWJ1ZmZlcj1bXTthLl9fd2ViZ2xSZW5kZXJidWZmZXI9W107bS5iaW5kVGV4dHVyZShtLlRFWFRVUkVfQ1VCRV9NQVAsYS5fX3dlYmdsVGV4dHVyZSk7QShtLlRFWFRVUkVfQ1VCRV9NQVAsYSxjKTtmb3IodmFyIGY9MDs2PmY7ZisrKXthLl9fd2ViZ2xGcmFtZWJ1ZmZlcltmXT1tLmNyZWF0ZUZyYW1lYnVmZmVyKCk7YS5fX3dlYmdsUmVuZGVyYnVmZmVyW2ZdPW0uY3JlYXRlUmVuZGVyYnVmZmVyKCk7bS50ZXhJbWFnZTJEKG0uVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YK2YsMCxkLGEud2lkdGgsYS5oZWlnaHQsMCxkLGUsbnVsbCk7dmFyIGc9YSxoPW0uVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YK2Y7bS5iaW5kRnJhbWVidWZmZXIobS5GUkFNRUJVRkZFUixcclxuYS5fX3dlYmdsRnJhbWVidWZmZXJbZl0pO20uZnJhbWVidWZmZXJUZXh0dXJlMkQobS5GUkFNRUJVRkZFUixtLkNPTE9SX0FUVEFDSE1FTlQwLGgsZy5fX3dlYmdsVGV4dHVyZSwwKTtHKGEuX193ZWJnbFJlbmRlcmJ1ZmZlcltmXSxhKX1jJiZtLmdlbmVyYXRlTWlwbWFwKG0uVEVYVFVSRV9DVUJFX01BUCl9ZWxzZSBhLl9fd2ViZ2xGcmFtZWJ1ZmZlcj1tLmNyZWF0ZUZyYW1lYnVmZmVyKCksYS5fX3dlYmdsUmVuZGVyYnVmZmVyPWEuc2hhcmVEZXB0aEZyb20/YS5zaGFyZURlcHRoRnJvbS5fX3dlYmdsUmVuZGVyYnVmZmVyOm0uY3JlYXRlUmVuZGVyYnVmZmVyKCksbS5iaW5kVGV4dHVyZShtLlRFWFRVUkVfMkQsYS5fX3dlYmdsVGV4dHVyZSksQShtLlRFWFRVUkVfMkQsYSxjKSxtLnRleEltYWdlMkQobS5URVhUVVJFXzJELDAsZCxhLndpZHRoLGEuaGVpZ2h0LDAsZCxlLG51bGwpLGQ9bS5URVhUVVJFXzJELG0uYmluZEZyYW1lYnVmZmVyKG0uRlJBTUVCVUZGRVIsYS5fX3dlYmdsRnJhbWVidWZmZXIpLFxyXG5tLmZyYW1lYnVmZmVyVGV4dHVyZTJEKG0uRlJBTUVCVUZGRVIsbS5DT0xPUl9BVFRBQ0hNRU5UMCxkLGEuX193ZWJnbFRleHR1cmUsMCksYS5zaGFyZURlcHRoRnJvbT9hLmRlcHRoQnVmZmVyJiYhYS5zdGVuY2lsQnVmZmVyP20uZnJhbWVidWZmZXJSZW5kZXJidWZmZXIobS5GUkFNRUJVRkZFUixtLkRFUFRIX0FUVEFDSE1FTlQsbS5SRU5ERVJCVUZGRVIsYS5fX3dlYmdsUmVuZGVyYnVmZmVyKTphLmRlcHRoQnVmZmVyJiZhLnN0ZW5jaWxCdWZmZXImJm0uZnJhbWVidWZmZXJSZW5kZXJidWZmZXIobS5GUkFNRUJVRkZFUixtLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCxtLlJFTkRFUkJVRkZFUixhLl9fd2ViZ2xSZW5kZXJidWZmZXIpOkcoYS5fX3dlYmdsUmVuZGVyYnVmZmVyLGEpLGMmJm0uZ2VuZXJhdGVNaXBtYXAobS5URVhUVVJFXzJEKTtiP20uYmluZFRleHR1cmUobS5URVhUVVJFX0NVQkVfTUFQLG51bGwpOm0uYmluZFRleHR1cmUobS5URVhUVVJFXzJELG51bGwpO20uYmluZFJlbmRlcmJ1ZmZlcihtLlJFTkRFUkJVRkZFUixcclxubnVsbCk7bS5iaW5kRnJhbWVidWZmZXIobS5GUkFNRUJVRkZFUixudWxsKX1hPyhiPWI/YS5fX3dlYmdsRnJhbWVidWZmZXJbYS5hY3RpdmVDdWJlRmFjZV06YS5fX3dlYmdsRnJhbWVidWZmZXIsYz1hLndpZHRoLGE9YS5oZWlnaHQsZT1kPTApOihiPW51bGwsYz1wYixhPXFiLGQ9aWIsZT1iYik7YiE9PWFiJiYobS5iaW5kRnJhbWVidWZmZXIobS5GUkFNRUJVRkZFUixiKSxtLnZpZXdwb3J0KGQsZSxjLGEpLGFiPWIpO1hiPWM7ZmM9YX07dGhpcy5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtpZighKGEgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldCkpY29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBUSFJFRS5XZWJHTFJlbmRlclRhcmdldC5cIik7ZWxzZSBpZihhLl9fd2ViZ2xGcmFtZWJ1ZmZlcilpZihhLmZvcm1hdCE9PVRIUkVFLlJHQkFGb3JtYXQpY29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIGZvcm1hdC4gcmVhZFBpeGVscyBjYW4gcmVhZCBvbmx5IFJHQkEgZm9ybWF0LlwiKTtcclxuZWxzZXt2YXIgZz0hMTthLl9fd2ViZ2xGcmFtZWJ1ZmZlciE9PWFiJiYobS5iaW5kRnJhbWVidWZmZXIobS5GUkFNRUJVRkZFUixhLl9fd2ViZ2xGcmFtZWJ1ZmZlciksZz0hMCk7bS5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKG0uRlJBTUVCVUZGRVIpPT09bS5GUkFNRUJVRkZFUl9DT01QTEVURT9tLnJlYWRQaXhlbHMoYixjLGQsZSxtLlJHQkEsbS5VTlNJR05FRF9CWVRFLGYpOmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlYWRQaXhlbHMgZnJvbSByZW5kZXJUYXJnZXQgZmFpbGVkLiBGcmFtZWJ1ZmZlciBub3QgY29tcGxldGUuXCIpO2cmJm0uYmluZEZyYW1lYnVmZmVyKG0uRlJBTUVCVUZGRVIsYWIpfX07dGhpcy5pbml0TWF0ZXJpYWw9ZnVuY3Rpb24oKXtUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLmluaXRNYXRlcmlhbCgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfTt0aGlzLmFkZFByZVBsdWdpbj1mdW5jdGlvbigpe1RIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUHJlUGx1Z2luKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9O1xyXG50aGlzLmFkZFBvc3RQbHVnaW49ZnVuY3Rpb24oKXtUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFBvc3RQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLlwiKX07dGhpcy51cGRhdGVTaGFkb3dNYXA9ZnVuY3Rpb24oKXtUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnVwZGF0ZVNoYWRvd01hcCgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfX07XHJcblRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0PWZ1bmN0aW9uKGEsYixjKXt0aGlzLndpZHRoPWE7dGhpcy5oZWlnaHQ9YjtjPWN8fHt9O3RoaXMud3JhcFM9dm9pZCAwIT09Yy53cmFwUz9jLndyYXBTOlRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmc7dGhpcy53cmFwVD12b2lkIDAhPT1jLndyYXBUP2Mud3JhcFQ6VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZzt0aGlzLm1hZ0ZpbHRlcj12b2lkIDAhPT1jLm1hZ0ZpbHRlcj9jLm1hZ0ZpbHRlcjpUSFJFRS5MaW5lYXJGaWx0ZXI7dGhpcy5taW5GaWx0ZXI9dm9pZCAwIT09Yy5taW5GaWx0ZXI/Yy5taW5GaWx0ZXI6VEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyO3RoaXMuYW5pc290cm9weT12b2lkIDAhPT1jLmFuaXNvdHJvcHk/Yy5hbmlzb3Ryb3B5OjE7dGhpcy5vZmZzZXQ9bmV3IFRIUkVFLlZlY3RvcjIoMCwwKTt0aGlzLnJlcGVhdD1uZXcgVEhSRUUuVmVjdG9yMigxLDEpO3RoaXMuZm9ybWF0PXZvaWQgMCE9PWMuZm9ybWF0P2MuZm9ybWF0OlxyXG5USFJFRS5SR0JBRm9ybWF0O3RoaXMudHlwZT12b2lkIDAhPT1jLnR5cGU/Yy50eXBlOlRIUkVFLlVuc2lnbmVkQnl0ZVR5cGU7dGhpcy5kZXB0aEJ1ZmZlcj12b2lkIDAhPT1jLmRlcHRoQnVmZmVyP2MuZGVwdGhCdWZmZXI6ITA7dGhpcy5zdGVuY2lsQnVmZmVyPXZvaWQgMCE9PWMuc3RlbmNpbEJ1ZmZlcj9jLnN0ZW5jaWxCdWZmZXI6ITA7dGhpcy5nZW5lcmF0ZU1pcG1hcHM9ITA7dGhpcy5zaGFyZURlcHRoRnJvbT12b2lkIDAhPT1jLnNoYXJlRGVwdGhGcm9tP2Muc2hhcmVEZXB0aEZyb206bnVsbH07XHJcblRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQsc2V0U2l6ZTpmdW5jdGlvbihhLGIpe3RoaXMud2lkdGg9YTt0aGlzLmhlaWdodD1ifSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5XZWJHTFJlbmRlclRhcmdldCh0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KTthLndyYXBTPXRoaXMud3JhcFM7YS53cmFwVD10aGlzLndyYXBUO2EubWFnRmlsdGVyPXRoaXMubWFnRmlsdGVyO2EubWluRmlsdGVyPXRoaXMubWluRmlsdGVyO2EuYW5pc290cm9weT10aGlzLmFuaXNvdHJvcHk7YS5vZmZzZXQuY29weSh0aGlzLm9mZnNldCk7YS5yZXBlYXQuY29weSh0aGlzLnJlcGVhdCk7YS5mb3JtYXQ9dGhpcy5mb3JtYXQ7YS50eXBlPXRoaXMudHlwZTthLmRlcHRoQnVmZmVyPXRoaXMuZGVwdGhCdWZmZXI7YS5zdGVuY2lsQnVmZmVyPXRoaXMuc3RlbmNpbEJ1ZmZlcjthLmdlbmVyYXRlTWlwbWFwcz10aGlzLmdlbmVyYXRlTWlwbWFwcztcclxuYS5zaGFyZURlcHRoRnJvbT10aGlzLnNoYXJlRGVwdGhGcm9tO3JldHVybiBhfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZGlzcG9zZVwifSl9fTtUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmFwcGx5KFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSk7VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlPWZ1bmN0aW9uKGEsYixjKXtUSFJFRS5XZWJHTFJlbmRlclRhcmdldC5jYWxsKHRoaXMsYSxiLGMpO3RoaXMuYWN0aXZlQ3ViZUZhY2U9MH07VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSk7VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU7XHJcblRIUkVFLldlYkdMRXh0ZW5zaW9ucz1mdW5jdGlvbihhKXt2YXIgYj17fTt0aGlzLmdldD1mdW5jdGlvbihjKXtpZih2b2lkIDAhPT1iW2NdKXJldHVybiBiW2NdO3ZhciBkO3N3aXRjaChjKXtjYXNlIFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCI6ZD1hLmdldEV4dGVuc2lvbihcIkVYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKXx8YS5nZXRFeHRlbnNpb24oXCJNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpfHxhLmdldEV4dGVuc2lvbihcIldFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIik7YnJlYWs7Y2FzZSBcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCI6ZD1hLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpfHxhLmdldEV4dGVuc2lvbihcIk1PWl9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKXx8YS5nZXRFeHRlbnNpb24oXCJXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIik7XHJcbmJyZWFrO2Nhc2UgXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfHxhLmdldEV4dGVuc2lvbihcIldFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIik7YnJlYWs7ZGVmYXVsdDpkPWEuZ2V0RXh0ZW5zaW9uKGMpfW51bGw9PT1kJiZUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogXCIrYytcIiBleHRlbnNpb24gbm90IHN1cHBvcnRlZC5cIik7cmV0dXJuIGJbY109ZH19O1xyXG5USFJFRS5XZWJHTFByb2dyYW09ZnVuY3Rpb24oKXt2YXIgYT0wO3JldHVybiBmdW5jdGlvbihiLGMsZCxlKXt2YXIgZj1iLmNvbnRleHQsZz1kLmRlZmluZXMsaD1kLl9fd2ViZ2xTaGFkZXIudW5pZm9ybXMsaz1kLmF0dHJpYnV0ZXMsbD1kLl9fd2ViZ2xTaGFkZXIudmVydGV4U2hhZGVyLHA9ZC5fX3dlYmdsU2hhZGVyLmZyYWdtZW50U2hhZGVyLHE9ZC5pbmRleDBBdHRyaWJ1dGVOYW1lO3ZvaWQgMD09PXEmJiEwPT09ZS5tb3JwaFRhcmdldHMmJihxPVwicG9zaXRpb25cIik7dmFyIG49XCJTSEFET1dNQVBfVFlQRV9CQVNJQ1wiO2Uuc2hhZG93TWFwVHlwZT09PVRIUkVFLlBDRlNoYWRvd01hcD9uPVwiU0hBRE9XTUFQX1RZUEVfUENGXCI6ZS5zaGFkb3dNYXBUeXBlPT09VEhSRUUuUENGU29mdFNoYWRvd01hcCYmKG49XCJTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVFwiKTt2YXIgdD1cIkVOVk1BUF9UWVBFX0NVQkVcIixyPVwiRU5WTUFQX01PREVfUkVGTEVDVElPTlwiLHM9XCJFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcIjtcclxuaWYoZS5lbnZNYXApe3N3aXRjaChkLmVudk1hcC5tYXBwaW5nKXtjYXNlIFRIUkVFLkN1YmVSZWZsZWN0aW9uTWFwcGluZzpjYXNlIFRIUkVFLkN1YmVSZWZyYWN0aW9uTWFwcGluZzp0PVwiRU5WTUFQX1RZUEVfQ1VCRVwiO2JyZWFrO2Nhc2UgVEhSRUUuRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6Y2FzZSBUSFJFRS5FcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZzp0PVwiRU5WTUFQX1RZUEVfRVFVSVJFQ1wiO2JyZWFrO2Nhc2UgVEhSRUUuU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc6dD1cIkVOVk1BUF9UWVBFX1NQSEVSRVwifXN3aXRjaChkLmVudk1hcC5tYXBwaW5nKXtjYXNlIFRIUkVFLkN1YmVSZWZyYWN0aW9uTWFwcGluZzpjYXNlIFRIUkVFLkVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOnI9XCJFTlZNQVBfTU9ERV9SRUZSQUNUSU9OXCJ9c3dpdGNoKGQuY29tYmluZSl7Y2FzZSBUSFJFRS5NdWx0aXBseU9wZXJhdGlvbjpzPVwiRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZXCI7XHJcbmJyZWFrO2Nhc2UgVEhSRUUuTWl4T3BlcmF0aW9uOnM9XCJFTlZNQVBfQkxFTkRJTkdfTUlYXCI7YnJlYWs7Y2FzZSBUSFJFRS5BZGRPcGVyYXRpb246cz1cIkVOVk1BUF9CTEVORElOR19BRERcIn19dmFyIHU9MDxiLmdhbW1hRmFjdG9yP2IuZ2FtbWFGYWN0b3I6MSx2LHg7dj1bXTtmb3IodmFyIEQgaW4gZyl4PWdbRF0sITEhPT14JiYoeD1cIiNkZWZpbmUgXCIrRCtcIiBcIit4LHYucHVzaCh4KSk7dj12LmpvaW4oXCJcXG5cIik7Zz1mLmNyZWF0ZVByb2dyYW0oKTtkIGluc3RhbmNlb2YgVEhSRUUuUmF3U2hhZGVyTWF0ZXJpYWw/Yj1kPVwiXCI6KGQ9W1wicHJlY2lzaW9uIFwiK2UucHJlY2lzaW9uK1wiIGZsb2F0O1wiLFwicHJlY2lzaW9uIFwiK2UucHJlY2lzaW9uK1wiIGludDtcIix2LGUuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcz9cIiNkZWZpbmUgVkVSVEVYX1RFWFRVUkVTXCI6XCJcIixiLmdhbW1hSW5wdXQ/XCIjZGVmaW5lIEdBTU1BX0lOUFVUXCI6XCJcIixiLmdhbW1hT3V0cHV0P1wiI2RlZmluZSBHQU1NQV9PVVRQVVRcIjpcclxuXCJcIixcIiNkZWZpbmUgR0FNTUFfRkFDVE9SIFwiK3UsXCIjZGVmaW5lIE1BWF9ESVJfTElHSFRTIFwiK2UubWF4RGlyTGlnaHRzLFwiI2RlZmluZSBNQVhfUE9JTlRfTElHSFRTIFwiK2UubWF4UG9pbnRMaWdodHMsXCIjZGVmaW5lIE1BWF9TUE9UX0xJR0hUUyBcIitlLm1heFNwb3RMaWdodHMsXCIjZGVmaW5lIE1BWF9IRU1JX0xJR0hUUyBcIitlLm1heEhlbWlMaWdodHMsXCIjZGVmaW5lIE1BWF9TSEFET1dTIFwiK2UubWF4U2hhZG93cyxcIiNkZWZpbmUgTUFYX0JPTkVTIFwiK2UubWF4Qm9uZXMsZS5tYXA/XCIjZGVmaW5lIFVTRV9NQVBcIjpcIlwiLGUuZW52TWFwP1wiI2RlZmluZSBVU0VfRU5WTUFQXCI6XCJcIixlLmVudk1hcD9cIiNkZWZpbmUgXCIrcjpcIlwiLGUubGlnaHRNYXA/XCIjZGVmaW5lIFVTRV9MSUdIVE1BUFwiOlwiXCIsZS5idW1wTWFwP1wiI2RlZmluZSBVU0VfQlVNUE1BUFwiOlwiXCIsZS5ub3JtYWxNYXA/XCIjZGVmaW5lIFVTRV9OT1JNQUxNQVBcIjpcIlwiLGUuc3BlY3VsYXJNYXA/XCIjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUFwiOlxyXG5cIlwiLGUuYWxwaGFNYXA/XCIjZGVmaW5lIFVTRV9BTFBIQU1BUFwiOlwiXCIsZS52ZXJ0ZXhDb2xvcnM/XCIjZGVmaW5lIFVTRV9DT0xPUlwiOlwiXCIsZS5mbGF0U2hhZGluZz9cIiNkZWZpbmUgRkxBVF9TSEFERURcIjpcIlwiLGUuc2tpbm5pbmc/XCIjZGVmaW5lIFVTRV9TS0lOTklOR1wiOlwiXCIsZS51c2VWZXJ0ZXhUZXh0dXJlP1wiI2RlZmluZSBCT05FX1RFWFRVUkVcIjpcIlwiLGUubW9ycGhUYXJnZXRzP1wiI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTXCI6XCJcIixlLm1vcnBoTm9ybWFscz9cIiNkZWZpbmUgVVNFX01PUlBITk9STUFMU1wiOlwiXCIsZS53cmFwQXJvdW5kP1wiI2RlZmluZSBXUkFQX0FST1VORFwiOlwiXCIsZS5kb3VibGVTaWRlZD9cIiNkZWZpbmUgRE9VQkxFX1NJREVEXCI6XCJcIixlLmZsaXBTaWRlZD9cIiNkZWZpbmUgRkxJUF9TSURFRFwiOlwiXCIsZS5zaGFkb3dNYXBFbmFibGVkP1wiI2RlZmluZSBVU0VfU0hBRE9XTUFQXCI6XCJcIixlLnNoYWRvd01hcEVuYWJsZWQ/XCIjZGVmaW5lIFwiK246XCJcIixlLnNoYWRvd01hcERlYnVnP1xyXG5cIiNkZWZpbmUgU0hBRE9XTUFQX0RFQlVHXCI6XCJcIixlLnNoYWRvd01hcENhc2NhZGU/XCIjZGVmaW5lIFNIQURPV01BUF9DQVNDQURFXCI6XCJcIixlLnNpemVBdHRlbnVhdGlvbj9cIiNkZWZpbmUgVVNFX1NJWkVBVFRFTlVBVElPTlwiOlwiXCIsZS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyP1wiI2RlZmluZSBVU0VfTE9HREVQVEhCVUZcIjpcIlwiLFwidW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1xcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcXG51bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzMgbm9ybWFsO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcbmF0dHJpYnV0ZSB2ZWMyIHV2MjtcXG4jaWZkZWYgVVNFX0NPTE9SXFxuXFx0YXR0cmlidXRlIHZlYzMgY29sb3I7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDA7XFxuXFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQxO1xcblxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MjtcXG5cXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDM7XFxuXFx0I2lmZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDA7XFxuXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwxO1xcblxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMjtcXG5cXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDM7XFxuXFx0I2Vsc2VcXG5cXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDQ7XFxuXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ1O1xcblxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NjtcXG5cXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDc7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdGF0dHJpYnV0ZSB2ZWM0IHNraW5JbmRleDtcXG5cXHRhdHRyaWJ1dGUgdmVjNCBza2luV2VpZ2h0O1xcbiNlbmRpZlxcblwiXS5qb2luKFwiXFxuXCIpLFxyXG5iPVtcInByZWNpc2lvbiBcIitlLnByZWNpc2lvbitcIiBmbG9hdDtcIixcInByZWNpc2lvbiBcIitlLnByZWNpc2lvbitcIiBpbnQ7XCIsZS5idW1wTWFwfHxlLm5vcm1hbE1hcHx8ZS5mbGF0U2hhZGluZz9cIiNleHRlbnNpb24gR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzIDogZW5hYmxlXCI6XCJcIix2LFwiI2RlZmluZSBNQVhfRElSX0xJR0hUUyBcIitlLm1heERpckxpZ2h0cyxcIiNkZWZpbmUgTUFYX1BPSU5UX0xJR0hUUyBcIitlLm1heFBvaW50TGlnaHRzLFwiI2RlZmluZSBNQVhfU1BPVF9MSUdIVFMgXCIrZS5tYXhTcG90TGlnaHRzLFwiI2RlZmluZSBNQVhfSEVNSV9MSUdIVFMgXCIrZS5tYXhIZW1pTGlnaHRzLFwiI2RlZmluZSBNQVhfU0hBRE9XUyBcIitlLm1heFNoYWRvd3MsZS5hbHBoYVRlc3Q/XCIjZGVmaW5lIEFMUEhBVEVTVCBcIitlLmFscGhhVGVzdDpcIlwiLGIuZ2FtbWFJbnB1dD9cIiNkZWZpbmUgR0FNTUFfSU5QVVRcIjpcIlwiLGIuZ2FtbWFPdXRwdXQ/XCIjZGVmaW5lIEdBTU1BX09VVFBVVFwiOlwiXCIsXCIjZGVmaW5lIEdBTU1BX0ZBQ1RPUiBcIitcclxudSxlLnVzZUZvZyYmZS5mb2c/XCIjZGVmaW5lIFVTRV9GT0dcIjpcIlwiLGUudXNlRm9nJiZlLmZvZ0V4cD9cIiNkZWZpbmUgRk9HX0VYUDJcIjpcIlwiLGUubWFwP1wiI2RlZmluZSBVU0VfTUFQXCI6XCJcIixlLmVudk1hcD9cIiNkZWZpbmUgVVNFX0VOVk1BUFwiOlwiXCIsZS5lbnZNYXA/XCIjZGVmaW5lIFwiK3Q6XCJcIixlLmVudk1hcD9cIiNkZWZpbmUgXCIrcjpcIlwiLGUuZW52TWFwP1wiI2RlZmluZSBcIitzOlwiXCIsZS5saWdodE1hcD9cIiNkZWZpbmUgVVNFX0xJR0hUTUFQXCI6XCJcIixlLmJ1bXBNYXA/XCIjZGVmaW5lIFVTRV9CVU1QTUFQXCI6XCJcIixlLm5vcm1hbE1hcD9cIiNkZWZpbmUgVVNFX05PUk1BTE1BUFwiOlwiXCIsZS5zcGVjdWxhck1hcD9cIiNkZWZpbmUgVVNFX1NQRUNVTEFSTUFQXCI6XCJcIixlLmFscGhhTWFwP1wiI2RlZmluZSBVU0VfQUxQSEFNQVBcIjpcIlwiLGUudmVydGV4Q29sb3JzP1wiI2RlZmluZSBVU0VfQ09MT1JcIjpcIlwiLGUuZmxhdFNoYWRpbmc/XCIjZGVmaW5lIEZMQVRfU0hBREVEXCI6XCJcIixlLm1ldGFsP1wiI2RlZmluZSBNRVRBTFwiOlxyXG5cIlwiLGUud3JhcEFyb3VuZD9cIiNkZWZpbmUgV1JBUF9BUk9VTkRcIjpcIlwiLGUuZG91YmxlU2lkZWQ/XCIjZGVmaW5lIERPVUJMRV9TSURFRFwiOlwiXCIsZS5mbGlwU2lkZWQ/XCIjZGVmaW5lIEZMSVBfU0lERURcIjpcIlwiLGUuc2hhZG93TWFwRW5hYmxlZD9cIiNkZWZpbmUgVVNFX1NIQURPV01BUFwiOlwiXCIsZS5zaGFkb3dNYXBFbmFibGVkP1wiI2RlZmluZSBcIituOlwiXCIsZS5zaGFkb3dNYXBEZWJ1Zz9cIiNkZWZpbmUgU0hBRE9XTUFQX0RFQlVHXCI6XCJcIixlLnNoYWRvd01hcENhc2NhZGU/XCIjZGVmaW5lIFNIQURPV01BUF9DQVNDQURFXCI6XCJcIixlLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI/XCIjZGVmaW5lIFVTRV9MT0dERVBUSEJVRlwiOlwiXCIsXCJ1bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcXG51bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247XFxuXCJdLmpvaW4oXCJcXG5cIikpO2w9bmV3IFRIUkVFLldlYkdMU2hhZGVyKGYsZi5WRVJURVhfU0hBREVSLGQrbCk7cD1uZXcgVEhSRUUuV2ViR0xTaGFkZXIoZixmLkZSQUdNRU5UX1NIQURFUixcclxuYitwKTtmLmF0dGFjaFNoYWRlcihnLGwpO2YuYXR0YWNoU2hhZGVyKGcscCk7dm9pZCAwIT09cSYmZi5iaW5kQXR0cmliTG9jYXRpb24oZywwLHEpO2YubGlua1Byb2dyYW0oZyk7cT1mLmdldFByb2dyYW1JbmZvTG9nKGcpOyExPT09Zi5nZXRQcm9ncmFtUGFyYW1ldGVyKGcsZi5MSU5LX1NUQVRVUykmJlRIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xQcm9ncmFtOiBzaGFkZXIgZXJyb3I6IFwiK2YuZ2V0RXJyb3IoKSxcImdsLlZBTElEQVRFX1NUQVRVU1wiLGYuZ2V0UHJvZ3JhbVBhcmFtZXRlcihnLGYuVkFMSURBVEVfU1RBVFVTKSxcImdsLmdldFBSb2dyYW1JbmZvTG9nXCIscSk7XCJcIiE9PXEmJlRIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFByb2dyYW06IGdsLmdldFByb2dyYW1JbmZvTG9nKClcIitxKTtmLmRlbGV0ZVNoYWRlcihsKTtmLmRlbGV0ZVNoYWRlcihwKTtxPVwidmlld01hdHJpeCBtb2RlbFZpZXdNYXRyaXggcHJvamVjdGlvbk1hdHJpeCBub3JtYWxNYXRyaXggbW9kZWxNYXRyaXggY2FtZXJhUG9zaXRpb24gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJpbmRNYXRyaXggYmluZE1hdHJpeEludmVyc2VcIi5zcGxpdChcIiBcIik7XHJcbmUudXNlVmVydGV4VGV4dHVyZT8ocS5wdXNoKFwiYm9uZVRleHR1cmVcIikscS5wdXNoKFwiYm9uZVRleHR1cmVXaWR0aFwiKSxxLnB1c2goXCJib25lVGV4dHVyZUhlaWdodFwiKSk6cS5wdXNoKFwiYm9uZUdsb2JhbE1hdHJpY2VzXCIpO2UubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciYmcS5wdXNoKFwibG9nRGVwdGhCdWZGQ1wiKTtmb3IodmFyIHcgaW4gaClxLnB1c2godyk7aD1xO3c9e307cT0wO2ZvcihiPWgubGVuZ3RoO3E8YjtxKyspbj1oW3FdLHdbbl09Zi5nZXRVbmlmb3JtTG9jYXRpb24oZyxuKTt0aGlzLnVuaWZvcm1zPXc7cT1cInBvc2l0aW9uIG5vcm1hbCB1diB1djIgdGFuZ2VudCBjb2xvciBza2luSW5kZXggc2tpbldlaWdodCBsaW5lRGlzdGFuY2VcIi5zcGxpdChcIiBcIik7Zm9yKGg9MDtoPGUubWF4TW9ycGhUYXJnZXRzO2grKylxLnB1c2goXCJtb3JwaFRhcmdldFwiK2gpO2ZvcihoPTA7aDxlLm1heE1vcnBoTm9ybWFscztoKyspcS5wdXNoKFwibW9ycGhOb3JtYWxcIitoKTtmb3IodmFyIHkgaW4gaylxLnB1c2goeSk7XHJcbmU9cTtrPXt9O3k9MDtmb3IoaD1lLmxlbmd0aDt5PGg7eSsrKXc9ZVt5XSxrW3ddPWYuZ2V0QXR0cmliTG9jYXRpb24oZyx3KTt0aGlzLmF0dHJpYnV0ZXM9azt0aGlzLmF0dHJpYnV0ZXNLZXlzPU9iamVjdC5rZXlzKHRoaXMuYXR0cmlidXRlcyk7dGhpcy5pZD1hKys7dGhpcy5jb2RlPWM7dGhpcy51c2VkVGltZXM9MTt0aGlzLnByb2dyYW09Zzt0aGlzLnZlcnRleFNoYWRlcj1sO3RoaXMuZnJhZ21lbnRTaGFkZXI9cDtyZXR1cm4gdGhpc319KCk7XHJcblRIUkVFLldlYkdMU2hhZGVyPWZ1bmN0aW9uKCl7dmFyIGE9ZnVuY3Rpb24oYSl7YT1hLnNwbGl0KFwiXFxuXCIpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKWFbY109YysxK1wiOiBcIithW2NdO3JldHVybiBhLmpvaW4oXCJcXG5cIil9O3JldHVybiBmdW5jdGlvbihiLGMsZCl7Yz1iLmNyZWF0ZVNoYWRlcihjKTtiLnNoYWRlclNvdXJjZShjLGQpO2IuY29tcGlsZVNoYWRlcihjKTshMT09PWIuZ2V0U2hhZGVyUGFyYW1ldGVyKGMsYi5DT01QSUxFX1NUQVRVUykmJlRIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xTaGFkZXI6IFNoYWRlciBjb3VsZG4ndCBjb21waWxlLlwiKTtcIlwiIT09Yi5nZXRTaGFkZXJJbmZvTG9nKGMpJiZUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xTaGFkZXI6IGdsLmdldFNoYWRlckluZm9Mb2coKVwiLGIuZ2V0U2hhZGVySW5mb0xvZyhjKSxhKGQpKTtyZXR1cm4gY319KCk7XHJcblRIUkVFLldlYkdMU3RhdGU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgVWludDhBcnJheSgxNiksZD1uZXcgVWludDhBcnJheSgxNiksZT1udWxsLGY9bnVsbCxnPW51bGwsaD1udWxsLGs9bnVsbCxsPW51bGwscD1udWxsLHE9bnVsbCxuPW51bGwsdD1udWxsLHI9bnVsbCxzPW51bGwsdT1udWxsLHY9bnVsbCx4PW51bGwsRD1udWxsO3RoaXMuaW5pdEF0dHJpYnV0ZXM9ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPWMubGVuZ3RoO2E8YjthKyspY1thXT0wfTt0aGlzLmVuYWJsZUF0dHJpYnV0ZT1mdW5jdGlvbihiKXtjW2JdPTE7MD09PWRbYl0mJihhLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGIpLGRbYl09MSl9O3RoaXMuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXM9ZnVuY3Rpb24oKXtmb3IodmFyIGI9MCxlPWQubGVuZ3RoO2I8ZTtiKyspZFtiXSE9PWNbYl0mJihhLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheShiKSxkW2JdPTApfTt0aGlzLnNldEJsZW5kaW5nPWZ1bmN0aW9uKGMsZCxcclxubixxLHIscyx0KXtjIT09ZSYmKGM9PT1USFJFRS5Ob0JsZW5kaW5nP2EuZGlzYWJsZShhLkJMRU5EKTpjPT09VEhSRUUuQWRkaXRpdmVCbGVuZGluZz8oYS5lbmFibGUoYS5CTEVORCksYS5ibGVuZEVxdWF0aW9uKGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jKGEuU1JDX0FMUEhBLGEuT05FKSk6Yz09PVRIUkVFLlN1YnRyYWN0aXZlQmxlbmRpbmc/KGEuZW5hYmxlKGEuQkxFTkQpLGEuYmxlbmRFcXVhdGlvbihhLkZVTkNfQUREKSxhLmJsZW5kRnVuYyhhLlpFUk8sYS5PTkVfTUlOVVNfU1JDX0NPTE9SKSk6Yz09PVRIUkVFLk11bHRpcGx5QmxlbmRpbmc/KGEuZW5hYmxlKGEuQkxFTkQpLGEuYmxlbmRFcXVhdGlvbihhLkZVTkNfQUREKSxhLmJsZW5kRnVuYyhhLlpFUk8sYS5TUkNfQ09MT1IpKTpjPT09VEhSRUUuQ3VzdG9tQmxlbmRpbmc/YS5lbmFibGUoYS5CTEVORCk6KGEuZW5hYmxlKGEuQkxFTkQpLGEuYmxlbmRFcXVhdGlvblNlcGFyYXRlKGEuRlVOQ19BREQsYS5GVU5DX0FERCksXHJcbmEuYmxlbmRGdW5jU2VwYXJhdGUoYS5TUkNfQUxQSEEsYS5PTkVfTUlOVVNfU1JDX0FMUEhBLGEuT05FLGEuT05FX01JTlVTX1NSQ19BTFBIQSkpLGU9Yyk7aWYoYz09PVRIUkVFLkN1c3RvbUJsZW5kaW5nKXtyPXJ8fGQ7cz1zfHxuO3Q9dHx8cTtpZihkIT09Znx8ciE9PWspYS5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoYihkKSxiKHIpKSxmPWQsaz1yO2lmKG4hPT1nfHxxIT09aHx8cyE9PWx8fHQhPT1wKWEuYmxlbmRGdW5jU2VwYXJhdGUoYihuKSxiKHEpLGIocyksYih0KSksZz1uLGg9cSxsPXMscD10fWVsc2UgcD1sPWs9aD1nPWY9bnVsbH07dGhpcy5zZXREZXB0aFRlc3Q9ZnVuY3Rpb24oYil7cSE9PWImJihiP2EuZW5hYmxlKGEuREVQVEhfVEVTVCk6YS5kaXNhYmxlKGEuREVQVEhfVEVTVCkscT1iKX07dGhpcy5zZXREZXB0aFdyaXRlPWZ1bmN0aW9uKGIpe24hPT1iJiYoYS5kZXB0aE1hc2soYiksbj1iKX07dGhpcy5zZXRDb2xvcldyaXRlPWZ1bmN0aW9uKGIpe3QhPT1iJiYoYS5jb2xvck1hc2soYixcclxuYixiLGIpLHQ9Yil9O3RoaXMuc2V0RG91YmxlU2lkZWQ9ZnVuY3Rpb24oYil7ciE9PWImJihiP2EuZGlzYWJsZShhLkNVTExfRkFDRSk6YS5lbmFibGUoYS5DVUxMX0ZBQ0UpLHI9Yil9O3RoaXMuc2V0RmxpcFNpZGVkPWZ1bmN0aW9uKGIpe3MhPT1iJiYoYj9hLmZyb250RmFjZShhLkNXKTphLmZyb250RmFjZShhLkNDVykscz1iKX07dGhpcy5zZXRMaW5lV2lkdGg9ZnVuY3Rpb24oYil7YiE9PXUmJihhLmxpbmVXaWR0aChiKSx1PWIpfTt0aGlzLnNldFBvbHlnb25PZmZzZXQ9ZnVuY3Rpb24oYixjLGQpe3YhPT1iJiYoYj9hLmVuYWJsZShhLlBPTFlHT05fT0ZGU0VUX0ZJTEwpOmEuZGlzYWJsZShhLlBPTFlHT05fT0ZGU0VUX0ZJTEwpLHY9Yik7IWJ8fHg9PT1jJiZEPT09ZHx8KGEucG9seWdvbk9mZnNldChjLGQpLHg9YyxEPWQpfTt0aGlzLnJlc2V0PWZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTxkLmxlbmd0aDthKyspZFthXT0wO3M9cj10PW49cT1lPW51bGx9fTtcclxuVEhSRUUuTGVuc0ZsYXJlUGx1Z2luPWZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZyxoLGssbCxwLHEsbj1hLmNvbnRleHQsdCxyLHMsdSx2LHg7dGhpcy5yZW5kZXI9ZnVuY3Rpb24oRCx3LHksQSl7aWYoMCE9PWIubGVuZ3RoKXtEPW5ldyBUSFJFRS5WZWN0b3IzO3ZhciBFPUEveSxHPS41KnksRj0uNSpBLHo9MTYvQSxJPW5ldyBUSFJFRS5WZWN0b3IyKHoqRSx6KSxVPW5ldyBUSFJFRS5WZWN0b3IzKDEsMSwwKSxNPW5ldyBUSFJFRS5WZWN0b3IyKDEsMSk7aWYodm9pZCAwPT09cyl7dmFyIHo9bmV3IEZsb2F0MzJBcnJheShbLTEsLTEsMCwwLDEsLTEsMSwwLDEsMSwxLDEsLTEsMSwwLDFdKSxIPW5ldyBVaW50MTZBcnJheShbMCwxLDIsMCwyLDNdKTt0PW4uY3JlYXRlQnVmZmVyKCk7cj1uLmNyZWF0ZUJ1ZmZlcigpO24uYmluZEJ1ZmZlcihuLkFSUkFZX0JVRkZFUix0KTtuLmJ1ZmZlckRhdGEobi5BUlJBWV9CVUZGRVIseixuLlNUQVRJQ19EUkFXKTtuLmJpbmRCdWZmZXIobi5FTEVNRU5UX0FSUkFZX0JVRkZFUixcclxucik7bi5idWZmZXJEYXRhKG4uRUxFTUVOVF9BUlJBWV9CVUZGRVIsSCxuLlNUQVRJQ19EUkFXKTt2PW4uY3JlYXRlVGV4dHVyZSgpO3g9bi5jcmVhdGVUZXh0dXJlKCk7bi5iaW5kVGV4dHVyZShuLlRFWFRVUkVfMkQsdik7bi50ZXhJbWFnZTJEKG4uVEVYVFVSRV8yRCwwLG4uUkdCLDE2LDE2LDAsbi5SR0Isbi5VTlNJR05FRF9CWVRFLG51bGwpO24udGV4UGFyYW1ldGVyaShuLlRFWFRVUkVfMkQsbi5URVhUVVJFX1dSQVBfUyxuLkNMQU1QX1RPX0VER0UpO24udGV4UGFyYW1ldGVyaShuLlRFWFRVUkVfMkQsbi5URVhUVVJFX1dSQVBfVCxuLkNMQU1QX1RPX0VER0UpO24udGV4UGFyYW1ldGVyaShuLlRFWFRVUkVfMkQsbi5URVhUVVJFX01BR19GSUxURVIsbi5ORUFSRVNUKTtuLnRleFBhcmFtZXRlcmkobi5URVhUVVJFXzJELG4uVEVYVFVSRV9NSU5fRklMVEVSLG4uTkVBUkVTVCk7bi5iaW5kVGV4dHVyZShuLlRFWFRVUkVfMkQseCk7bi50ZXhJbWFnZTJEKG4uVEVYVFVSRV8yRCwwLFxyXG5uLlJHQkEsMTYsMTYsMCxuLlJHQkEsbi5VTlNJR05FRF9CWVRFLG51bGwpO24udGV4UGFyYW1ldGVyaShuLlRFWFRVUkVfMkQsbi5URVhUVVJFX1dSQVBfUyxuLkNMQU1QX1RPX0VER0UpO24udGV4UGFyYW1ldGVyaShuLlRFWFRVUkVfMkQsbi5URVhUVVJFX1dSQVBfVCxuLkNMQU1QX1RPX0VER0UpO24udGV4UGFyYW1ldGVyaShuLlRFWFRVUkVfMkQsbi5URVhUVVJFX01BR19GSUxURVIsbi5ORUFSRVNUKTtuLnRleFBhcmFtZXRlcmkobi5URVhUVVJFXzJELG4uVEVYVFVSRV9NSU5fRklMVEVSLG4uTkVBUkVTVCk7dmFyIHo9KHU9MDxuLmdldFBhcmFtZXRlcihuLk1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUykpP3t2ZXJ0ZXhTaGFkZXI6XCJ1bmlmb3JtIGxvd3AgaW50IHJlbmRlclR5cGU7XFxudW5pZm9ybSB2ZWMzIHNjcmVlblBvc2l0aW9uO1xcbnVuaWZvcm0gdmVjMiBzY2FsZTtcXG51bmlmb3JtIGZsb2F0IHJvdGF0aW9uO1xcbnVuaWZvcm0gc2FtcGxlcjJEIG9jY2x1c2lvbk1hcDtcXG5hdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiB1djtcXG52YXJ5aW5nIHZlYzIgdlVWO1xcbnZhcnlpbmcgZmxvYXQgdlZpc2liaWxpdHk7XFxudm9pZCBtYWluKCkge1xcbnZVViA9IHV2O1xcbnZlYzIgcG9zID0gcG9zaXRpb247XFxuaWYoIHJlbmRlclR5cGUgPT0gMiApIHtcXG52ZWM0IHZpc2liaWxpdHkgPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC4xLCAwLjEgKSApO1xcbnZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuNSwgMC4xICkgKTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjksIDAuMSApICk7XFxudmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC45LCAwLjUgKSApO1xcbnZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuOSwgMC45ICkgKTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuOSApICk7XFxudmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC4xLCAwLjkgKSApO1xcbnZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuMSwgMC41ICkgKTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuNSApICk7XFxudlZpc2liaWxpdHkgPSAgICAgICAgdmlzaWJpbGl0eS5yIC8gOS4wO1xcbnZWaXNpYmlsaXR5ICo9IDEuMCAtIHZpc2liaWxpdHkuZyAvIDkuMDtcXG52VmlzaWJpbGl0eSAqPSAgICAgICB2aXNpYmlsaXR5LmIgLyA5LjA7XFxudlZpc2liaWxpdHkgKj0gMS4wIC0gdmlzaWJpbGl0eS5hIC8gOS4wO1xcbnBvcy54ID0gY29zKCByb3RhdGlvbiApICogcG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIHBvc2l0aW9uLnk7XFxucG9zLnkgPSBzaW4oIHJvdGF0aW9uICkgKiBwb3NpdGlvbi54ICsgY29zKCByb3RhdGlvbiApICogcG9zaXRpb24ueTtcXG59XFxuZ2xfUG9zaXRpb24gPSB2ZWM0KCAoIHBvcyAqIHNjYWxlICsgc2NyZWVuUG9zaXRpb24ueHkgKS54eSwgc2NyZWVuUG9zaXRpb24ueiwgMS4wICk7XFxufVwiLFxyXG5mcmFnbWVudFNoYWRlcjpcInVuaWZvcm0gbG93cCBpbnQgcmVuZGVyVHlwZTtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gdmVjMyBjb2xvcjtcXG52YXJ5aW5nIHZlYzIgdlVWO1xcbnZhcnlpbmcgZmxvYXQgdlZpc2liaWxpdHk7XFxudm9pZCBtYWluKCkge1xcbmlmKCByZW5kZXJUeXBlID09IDAgKSB7XFxuZ2xfRnJhZ0NvbG9yID0gdmVjNCggMS4wLCAwLjAsIDEuMCwgMC4wICk7XFxufSBlbHNlIGlmKCByZW5kZXJUeXBlID09IDEgKSB7XFxuZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbn0gZWxzZSB7XFxudmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbnRleHR1cmUuYSAqPSBvcGFjaXR5ICogdlZpc2liaWxpdHk7XFxuZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG5nbF9GcmFnQ29sb3IucmdiICo9IGNvbG9yO1xcbn1cXG59XCJ9Ont2ZXJ0ZXhTaGFkZXI6XCJ1bmlmb3JtIGxvd3AgaW50IHJlbmRlclR5cGU7XFxudW5pZm9ybSB2ZWMzIHNjcmVlblBvc2l0aW9uO1xcbnVuaWZvcm0gdmVjMiBzY2FsZTtcXG51bmlmb3JtIGZsb2F0IHJvdGF0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcbnZhcnlpbmcgdmVjMiB2VVY7XFxudm9pZCBtYWluKCkge1xcbnZVViA9IHV2O1xcbnZlYzIgcG9zID0gcG9zaXRpb247XFxuaWYoIHJlbmRlclR5cGUgPT0gMiApIHtcXG5wb3MueCA9IGNvcyggcm90YXRpb24gKSAqIHBvc2l0aW9uLnggLSBzaW4oIHJvdGF0aW9uICkgKiBwb3NpdGlvbi55O1xcbnBvcy55ID0gc2luKCByb3RhdGlvbiApICogcG9zaXRpb24ueCArIGNvcyggcm90YXRpb24gKSAqIHBvc2l0aW9uLnk7XFxufVxcbmdsX1Bvc2l0aW9uID0gdmVjNCggKCBwb3MgKiBzY2FsZSArIHNjcmVlblBvc2l0aW9uLnh5ICkueHksIHNjcmVlblBvc2l0aW9uLnosIDEuMCApO1xcbn1cIixcclxuZnJhZ21lbnRTaGFkZXI6XCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG51bmlmb3JtIGxvd3AgaW50IHJlbmRlclR5cGU7XFxudW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcbnVuaWZvcm0gc2FtcGxlcjJEIG9jY2x1c2lvbk1hcDtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSB2ZWMzIGNvbG9yO1xcbnZhcnlpbmcgdmVjMiB2VVY7XFxudm9pZCBtYWluKCkge1xcbmlmKCByZW5kZXJUeXBlID09IDAgKSB7XFxuZ2xfRnJhZ0NvbG9yID0gdmVjNCggdGV4dHVyZTJEKCBtYXAsIHZVViApLnJnYiwgMC4wICk7XFxufSBlbHNlIGlmKCByZW5kZXJUeXBlID09IDEgKSB7XFxuZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbn0gZWxzZSB7XFxuZmxvYXQgdmlzaWJpbGl0eSA9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuMSApICkuYTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjksIDAuNSApICkuYTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuOSApICkuYTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjEsIDAuNSApICkuYTtcXG52aXNpYmlsaXR5ID0gKCAxLjAgLSB2aXNpYmlsaXR5IC8gNC4wICk7XFxudmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbnRleHR1cmUuYSAqPSBvcGFjaXR5ICogdmlzaWJpbGl0eTtcXG5nbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbmdsX0ZyYWdDb2xvci5yZ2IgKj0gY29sb3I7XFxufVxcbn1cIn0sXHJcbkg9bi5jcmVhdGVQcm9ncmFtKCksTD1uLmNyZWF0ZVNoYWRlcihuLkZSQUdNRU5UX1NIQURFUiksUD1uLmNyZWF0ZVNoYWRlcihuLlZFUlRFWF9TSEFERVIpLE49XCJwcmVjaXNpb24gXCIrYS5nZXRQcmVjaXNpb24oKStcIiBmbG9hdDtcXG5cIjtuLnNoYWRlclNvdXJjZShMLE4rei5mcmFnbWVudFNoYWRlcik7bi5zaGFkZXJTb3VyY2UoUCxOK3oudmVydGV4U2hhZGVyKTtuLmNvbXBpbGVTaGFkZXIoTCk7bi5jb21waWxlU2hhZGVyKFApO24uYXR0YWNoU2hhZGVyKEgsTCk7bi5hdHRhY2hTaGFkZXIoSCxQKTtuLmxpbmtQcm9ncmFtKEgpO3M9SDtwPW4uZ2V0QXR0cmliTG9jYXRpb24ocyxcInBvc2l0aW9uXCIpO3E9bi5nZXRBdHRyaWJMb2NhdGlvbihzLFwidXZcIik7Yz1uLmdldFVuaWZvcm1Mb2NhdGlvbihzLFwicmVuZGVyVHlwZVwiKTtkPW4uZ2V0VW5pZm9ybUxvY2F0aW9uKHMsXCJtYXBcIik7ZT1uLmdldFVuaWZvcm1Mb2NhdGlvbihzLFwib2NjbHVzaW9uTWFwXCIpO2Y9bi5nZXRVbmlmb3JtTG9jYXRpb24ocyxcclxuXCJvcGFjaXR5XCIpO2c9bi5nZXRVbmlmb3JtTG9jYXRpb24ocyxcImNvbG9yXCIpO2g9bi5nZXRVbmlmb3JtTG9jYXRpb24ocyxcInNjYWxlXCIpO2s9bi5nZXRVbmlmb3JtTG9jYXRpb24ocyxcInJvdGF0aW9uXCIpO2w9bi5nZXRVbmlmb3JtTG9jYXRpb24ocyxcInNjcmVlblBvc2l0aW9uXCIpfW4udXNlUHJvZ3JhbShzKTtuLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHApO24uZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocSk7bi51bmlmb3JtMWkoZSwwKTtuLnVuaWZvcm0xaShkLDEpO24uYmluZEJ1ZmZlcihuLkFSUkFZX0JVRkZFUix0KTtuLnZlcnRleEF0dHJpYlBvaW50ZXIocCwyLG4uRkxPQVQsITEsMTYsMCk7bi52ZXJ0ZXhBdHRyaWJQb2ludGVyKHEsMixuLkZMT0FULCExLDE2LDgpO24uYmluZEJ1ZmZlcihuLkVMRU1FTlRfQVJSQVlfQlVGRkVSLHIpO24uZGlzYWJsZShuLkNVTExfRkFDRSk7bi5kZXB0aE1hc2soITEpO0g9MDtmb3IoTD1iLmxlbmd0aDtIPEw7SCsrKWlmKHo9MTYvQSxJLnNldCh6KlxyXG5FLHopLFA9YltIXSxELnNldChQLm1hdHJpeFdvcmxkLmVsZW1lbnRzWzEyXSxQLm1hdHJpeFdvcmxkLmVsZW1lbnRzWzEzXSxQLm1hdHJpeFdvcmxkLmVsZW1lbnRzWzE0XSksRC5hcHBseU1hdHJpeDQody5tYXRyaXhXb3JsZEludmVyc2UpLEQuYXBwbHlQcm9qZWN0aW9uKHcucHJvamVjdGlvbk1hdHJpeCksVS5jb3B5KEQpLE0ueD1VLngqRytHLE0ueT1VLnkqRitGLHV8fDA8TS54JiZNLng8eSYmMDxNLnkmJk0ueTxBKXtuLmFjdGl2ZVRleHR1cmUobi5URVhUVVJFMSk7bi5iaW5kVGV4dHVyZShuLlRFWFRVUkVfMkQsdik7bi5jb3B5VGV4SW1hZ2UyRChuLlRFWFRVUkVfMkQsMCxuLlJHQixNLngtOCxNLnktOCwxNiwxNiwwKTtuLnVuaWZvcm0xaShjLDApO24udW5pZm9ybTJmKGgsSS54LEkueSk7bi51bmlmb3JtM2YobCxVLngsVS55LFUueik7bi5kaXNhYmxlKG4uQkxFTkQpO24uZW5hYmxlKG4uREVQVEhfVEVTVCk7bi5kcmF3RWxlbWVudHMobi5UUklBTkdMRVMsNixuLlVOU0lHTkVEX1NIT1JULFxyXG4wKTtuLmFjdGl2ZVRleHR1cmUobi5URVhUVVJFMCk7bi5iaW5kVGV4dHVyZShuLlRFWFRVUkVfMkQseCk7bi5jb3B5VGV4SW1hZ2UyRChuLlRFWFRVUkVfMkQsMCxuLlJHQkEsTS54LTgsTS55LTgsMTYsMTYsMCk7bi51bmlmb3JtMWkoYywxKTtuLmRpc2FibGUobi5ERVBUSF9URVNUKTtuLmFjdGl2ZVRleHR1cmUobi5URVhUVVJFMSk7bi5iaW5kVGV4dHVyZShuLlRFWFRVUkVfMkQsdik7bi5kcmF3RWxlbWVudHMobi5UUklBTkdMRVMsNixuLlVOU0lHTkVEX1NIT1JULDApO1AucG9zaXRpb25TY3JlZW4uY29weShVKTtQLmN1c3RvbVVwZGF0ZUNhbGxiYWNrP1AuY3VzdG9tVXBkYXRlQ2FsbGJhY2soUCk6UC51cGRhdGVMZW5zRmxhcmVzKCk7bi51bmlmb3JtMWkoYywyKTtuLmVuYWJsZShuLkJMRU5EKTtmb3IodmFyIE49MCxSPVAubGVuc0ZsYXJlcy5sZW5ndGg7TjxSO04rKyl7dmFyIFY9UC5sZW5zRmxhcmVzW05dOy4wMDE8Vi5vcGFjaXR5JiYuMDAxPFYuc2NhbGUmJihVLng9Vi54LFxyXG5VLnk9Vi55LFUuej1WLnosej1WLnNpemUqVi5zY2FsZS9BLEkueD16KkUsSS55PXosbi51bmlmb3JtM2YobCxVLngsVS55LFUueiksbi51bmlmb3JtMmYoaCxJLngsSS55KSxuLnVuaWZvcm0xZihrLFYucm90YXRpb24pLG4udW5pZm9ybTFmKGYsVi5vcGFjaXR5KSxuLnVuaWZvcm0zZihnLFYuY29sb3IucixWLmNvbG9yLmcsVi5jb2xvci5iKSxhLnN0YXRlLnNldEJsZW5kaW5nKFYuYmxlbmRpbmcsVi5ibGVuZEVxdWF0aW9uLFYuYmxlbmRTcmMsVi5ibGVuZERzdCksYS5zZXRUZXh0dXJlKFYudGV4dHVyZSwxKSxuLmRyYXdFbGVtZW50cyhuLlRSSUFOR0xFUyw2LG4uVU5TSUdORURfU0hPUlQsMCkpfX1uLmVuYWJsZShuLkNVTExfRkFDRSk7bi5lbmFibGUobi5ERVBUSF9URVNUKTtuLmRlcHRoTWFzayghMCk7YS5yZXNldEdMU3RhdGUoKX19fTtcclxuVEhSRUUuU2hhZG93TWFwUGx1Z2luPWZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSxiLGQpe2lmKGIudmlzaWJsZSl7dmFyIGY9Y1tiLmlkXTtpZihmJiZiLmNhc3RTaGFkb3cmJighMT09PWIuZnJ1c3R1bUN1bGxlZHx8ITA9PT1wLmludGVyc2VjdHNPYmplY3QoYikpKWZvcih2YXIgZz0wLGg9Zi5sZW5ndGg7ZzxoO2crKyl7dmFyIGs9ZltnXTtiLl9tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhkLm1hdHJpeFdvcmxkSW52ZXJzZSxiLm1hdHJpeFdvcmxkKTtzLnB1c2goayl9Zz0wO2ZvcihoPWIuY2hpbGRyZW4ubGVuZ3RoO2c8aDtnKyspZShhLGIuY2hpbGRyZW5bZ10sZCl9fXZhciBmPWEuY29udGV4dCxnLGgsayxsLHA9bmV3IFRIUkVFLkZydXN0dW0scT1uZXcgVEhSRUUuTWF0cml4NCxuPW5ldyBUSFJFRS5WZWN0b3IzLHQ9bmV3IFRIUkVFLlZlY3RvcjMscj1uZXcgVEhSRUUuVmVjdG9yMyxzPVtdLHU9VEhSRUUuU2hhZGVyTGliLmRlcHRoUkdCQSx2PVRIUkVFLlVuaWZvcm1zVXRpbHMuY2xvbmUodS51bmlmb3Jtcyk7XHJcbmc9bmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHt1bmlmb3Jtczp2LHZlcnRleFNoYWRlcjp1LnZlcnRleFNoYWRlcixmcmFnbWVudFNoYWRlcjp1LmZyYWdtZW50U2hhZGVyfSk7aD1uZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe3VuaWZvcm1zOnYsdmVydGV4U2hhZGVyOnUudmVydGV4U2hhZGVyLGZyYWdtZW50U2hhZGVyOnUuZnJhZ21lbnRTaGFkZXIsbW9ycGhUYXJnZXRzOiEwfSk7az1uZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe3VuaWZvcm1zOnYsdmVydGV4U2hhZGVyOnUudmVydGV4U2hhZGVyLGZyYWdtZW50U2hhZGVyOnUuZnJhZ21lbnRTaGFkZXIsc2tpbm5pbmc6ITB9KTtsPW5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7dW5pZm9ybXM6dix2ZXJ0ZXhTaGFkZXI6dS52ZXJ0ZXhTaGFkZXIsZnJhZ21lbnRTaGFkZXI6dS5mcmFnbWVudFNoYWRlcixtb3JwaFRhcmdldHM6ITAsc2tpbm5pbmc6ITB9KTtnLl9zaGFkb3dQYXNzPSEwO2guX3NoYWRvd1Bhc3M9ITA7ay5fc2hhZG93UGFzcz1cclxuITA7bC5fc2hhZG93UGFzcz0hMDt0aGlzLnJlbmRlcj1mdW5jdGlvbihjLHYpe2lmKCExIT09YS5zaGFkb3dNYXBFbmFibGVkKXt2YXIgdSx5LEEsRSxHLEYseixJLFU9W107RT0wO2YuY2xlYXJDb2xvcigxLDEsMSwxKTtmLmRpc2FibGUoZi5CTEVORCk7Zi5lbmFibGUoZi5DVUxMX0ZBQ0UpO2YuZnJvbnRGYWNlKGYuQ0NXKTthLnNoYWRvd01hcEN1bGxGYWNlPT09VEhSRUUuQ3VsbEZhY2VGcm9udD9mLmN1bGxGYWNlKGYuRlJPTlQpOmYuY3VsbEZhY2UoZi5CQUNLKTthLnN0YXRlLnNldERlcHRoVGVzdCghMCk7dT0wO2Zvcih5PWIubGVuZ3RoO3U8eTt1KyspaWYoQT1iW3VdLEEuY2FzdFNoYWRvdylpZihBIGluc3RhbmNlb2YgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCYmQS5zaGFkb3dDYXNjYWRlKWZvcihHPTA7RzxBLnNoYWRvd0Nhc2NhZGVDb3VudDtHKyspe3ZhciBNO2lmKEEuc2hhZG93Q2FzY2FkZUFycmF5W0ddKU09QS5zaGFkb3dDYXNjYWRlQXJyYXlbR107ZWxzZXt6PUE7XHJcbnZhciBIPUc7TT1uZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodDtNLmlzVmlydHVhbD0hMDtNLm9ubHlTaGFkb3c9ITA7TS5jYXN0U2hhZG93PSEwO00uc2hhZG93Q2FtZXJhTmVhcj16LnNoYWRvd0NhbWVyYU5lYXI7TS5zaGFkb3dDYW1lcmFGYXI9ei5zaGFkb3dDYW1lcmFGYXI7TS5zaGFkb3dDYW1lcmFMZWZ0PXouc2hhZG93Q2FtZXJhTGVmdDtNLnNoYWRvd0NhbWVyYVJpZ2h0PXouc2hhZG93Q2FtZXJhUmlnaHQ7TS5zaGFkb3dDYW1lcmFCb3R0b209ei5zaGFkb3dDYW1lcmFCb3R0b207TS5zaGFkb3dDYW1lcmFUb3A9ei5zaGFkb3dDYW1lcmFUb3A7TS5zaGFkb3dDYW1lcmFWaXNpYmxlPXouc2hhZG93Q2FtZXJhVmlzaWJsZTtNLnNoYWRvd0RhcmtuZXNzPXouc2hhZG93RGFya25lc3M7TS5zaGFkb3dCaWFzPXouc2hhZG93Q2FzY2FkZUJpYXNbSF07TS5zaGFkb3dNYXBXaWR0aD16LnNoYWRvd0Nhc2NhZGVXaWR0aFtIXTtNLnNoYWRvd01hcEhlaWdodD16LnNoYWRvd0Nhc2NhZGVIZWlnaHRbSF07XHJcbk0ucG9pbnRzV29ybGQ9W107TS5wb2ludHNGcnVzdHVtPVtdO0k9TS5wb2ludHNXb3JsZDtGPU0ucG9pbnRzRnJ1c3R1bTtmb3IodmFyIEw9MDs4Pkw7TCsrKUlbTF09bmV3IFRIUkVFLlZlY3RvcjMsRltMXT1uZXcgVEhSRUUuVmVjdG9yMztJPXouc2hhZG93Q2FzY2FkZU5lYXJaW0hdO3o9ei5zaGFkb3dDYXNjYWRlRmFyWltIXTtGWzBdLnNldCgtMSwtMSxJKTtGWzFdLnNldCgxLC0xLEkpO0ZbMl0uc2V0KC0xLDEsSSk7RlszXS5zZXQoMSwxLEkpO0ZbNF0uc2V0KC0xLC0xLHopO0ZbNV0uc2V0KDEsLTEseik7Rls2XS5zZXQoLTEsMSx6KTtGWzddLnNldCgxLDEseik7TS5vcmlnaW5hbENhbWVyYT12O0Y9bmV3IFRIUkVFLkd5cm9zY29wZTtGLnBvc2l0aW9uLmNvcHkoQS5zaGFkb3dDYXNjYWRlT2Zmc2V0KTtGLmFkZChNKTtGLmFkZChNLnRhcmdldCk7di5hZGQoRik7QS5zaGFkb3dDYXNjYWRlQXJyYXlbR109TX1IPUE7ST1HO3o9SC5zaGFkb3dDYXNjYWRlQXJyYXlbSV07ei5wb3NpdGlvbi5jb3B5KEgucG9zaXRpb24pO1xyXG56LnRhcmdldC5wb3NpdGlvbi5jb3B5KEgudGFyZ2V0LnBvc2l0aW9uKTt6Lmxvb2tBdCh6LnRhcmdldCk7ei5zaGFkb3dDYW1lcmFWaXNpYmxlPUguc2hhZG93Q2FtZXJhVmlzaWJsZTt6LnNoYWRvd0RhcmtuZXNzPUguc2hhZG93RGFya25lc3M7ei5zaGFkb3dCaWFzPUguc2hhZG93Q2FzY2FkZUJpYXNbSV07Rj1ILnNoYWRvd0Nhc2NhZGVOZWFyWltJXTtIPUguc2hhZG93Q2FzY2FkZUZhclpbSV07ej16LnBvaW50c0ZydXN0dW07elswXS56PUY7elsxXS56PUY7elsyXS56PUY7elszXS56PUY7els0XS56PUg7els1XS56PUg7els2XS56PUg7els3XS56PUg7VVtFXT1NO0UrK31lbHNlIFVbRV09QSxFKys7dT0wO2Zvcih5PVUubGVuZ3RoO3U8eTt1Kyspe0E9VVt1XTtBLnNoYWRvd01hcHx8KEc9VEhSRUUuTGluZWFyRmlsdGVyLGEuc2hhZG93TWFwVHlwZT09PVRIUkVFLlBDRlNvZnRTaGFkb3dNYXAmJihHPVRIUkVFLk5lYXJlc3RGaWx0ZXIpLEEuc2hhZG93TWFwPW5ldyBUSFJFRS5XZWJHTFJlbmRlclRhcmdldChBLnNoYWRvd01hcFdpZHRoLFxyXG5BLnNoYWRvd01hcEhlaWdodCx7bWluRmlsdGVyOkcsbWFnRmlsdGVyOkcsZm9ybWF0OlRIUkVFLlJHQkFGb3JtYXR9KSxBLnNoYWRvd01hcFNpemU9bmV3IFRIUkVFLlZlY3RvcjIoQS5zaGFkb3dNYXBXaWR0aCxBLnNoYWRvd01hcEhlaWdodCksQS5zaGFkb3dNYXRyaXg9bmV3IFRIUkVFLk1hdHJpeDQpO2lmKCFBLnNoYWRvd0NhbWVyYSl7aWYoQSBpbnN0YW5jZW9mIFRIUkVFLlNwb3RMaWdodClBLnNoYWRvd0NhbWVyYT1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoQS5zaGFkb3dDYW1lcmFGb3YsQS5zaGFkb3dNYXBXaWR0aC9BLnNoYWRvd01hcEhlaWdodCxBLnNoYWRvd0NhbWVyYU5lYXIsQS5zaGFkb3dDYW1lcmFGYXIpO2Vsc2UgaWYoQSBpbnN0YW5jZW9mIFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQpQS5zaGFkb3dDYW1lcmE9bmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYShBLnNoYWRvd0NhbWVyYUxlZnQsQS5zaGFkb3dDYW1lcmFSaWdodCxBLnNoYWRvd0NhbWVyYVRvcCxcclxuQS5zaGFkb3dDYW1lcmFCb3R0b20sQS5zaGFkb3dDYW1lcmFOZWFyLEEuc2hhZG93Q2FtZXJhRmFyKTtlbHNle1RIUkVFLmVycm9yKFwiVEhSRUUuU2hhZG93TWFwUGx1Z2luOiBVbnN1cHBvcnRlZCBsaWdodCB0eXBlIGZvciBzaGFkb3dcIixBKTtjb250aW51ZX1jLmFkZChBLnNoYWRvd0NhbWVyYSk7ITA9PT1jLmF1dG9VcGRhdGUmJmMudXBkYXRlTWF0cml4V29ybGQoKX1BLnNoYWRvd0NhbWVyYVZpc2libGUmJiFBLmNhbWVyYUhlbHBlciYmKEEuY2FtZXJhSGVscGVyPW5ldyBUSFJFRS5DYW1lcmFIZWxwZXIoQS5zaGFkb3dDYW1lcmEpLGMuYWRkKEEuY2FtZXJhSGVscGVyKSk7aWYoQS5pc1ZpcnR1YWwmJk0ub3JpZ2luYWxDYW1lcmE9PXYpe0c9djtFPUEuc2hhZG93Q2FtZXJhO0Y9QS5wb2ludHNGcnVzdHVtO3o9QS5wb2ludHNXb3JsZDtuLnNldChJbmZpbml0eSxJbmZpbml0eSxJbmZpbml0eSk7dC5zZXQoLUluZmluaXR5LC1JbmZpbml0eSwtSW5maW5pdHkpO2ZvcihIPTA7OD5cclxuSDtIKyspST16W0hdLEkuY29weShGW0hdKSxJLnVucHJvamVjdChHKSxJLmFwcGx5TWF0cml4NChFLm1hdHJpeFdvcmxkSW52ZXJzZSksSS54PG4ueCYmKG4ueD1JLngpLEkueD50LngmJih0Lng9SS54KSxJLnk8bi55JiYobi55PUkueSksSS55PnQueSYmKHQueT1JLnkpLEkuejxuLnomJihuLno9SS56KSxJLno+dC56JiYodC56PUkueik7RS5sZWZ0PW4ueDtFLnJpZ2h0PXQueDtFLnRvcD10Lnk7RS5ib3R0b209bi55O0UudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpfUU9QS5zaGFkb3dNYXA7Rj1BLnNoYWRvd01hdHJpeDtHPUEuc2hhZG93Q2FtZXJhO0cucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKEEubWF0cml4V29ybGQpO3Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKEEudGFyZ2V0Lm1hdHJpeFdvcmxkKTtHLmxvb2tBdChyKTtHLnVwZGF0ZU1hdHJpeFdvcmxkKCk7Ry5tYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZShHLm1hdHJpeFdvcmxkKTtBLmNhbWVyYUhlbHBlciYmXHJcbihBLmNhbWVyYUhlbHBlci52aXNpYmxlPUEuc2hhZG93Q2FtZXJhVmlzaWJsZSk7QS5zaGFkb3dDYW1lcmFWaXNpYmxlJiZBLmNhbWVyYUhlbHBlci51cGRhdGUoKTtGLnNldCguNSwwLDAsLjUsMCwuNSwwLC41LDAsMCwuNSwuNSwwLDAsMCwxKTtGLm11bHRpcGx5KEcucHJvamVjdGlvbk1hdHJpeCk7Ri5tdWx0aXBseShHLm1hdHJpeFdvcmxkSW52ZXJzZSk7cS5tdWx0aXBseU1hdHJpY2VzKEcucHJvamVjdGlvbk1hdHJpeCxHLm1hdHJpeFdvcmxkSW52ZXJzZSk7cC5zZXRGcm9tTWF0cml4KHEpO2Euc2V0UmVuZGVyVGFyZ2V0KEUpO2EuY2xlYXIoKTtzLmxlbmd0aD0wO2UoYyxjLEcpO0E9MDtmb3IoRT1zLmxlbmd0aDtBPEU7QSsrKXo9c1tBXSxGPXoub2JqZWN0LHo9ei5idWZmZXIsSD1GLm1hdGVyaWFsIGluc3RhbmNlb2YgVEhSRUUuTWVzaEZhY2VNYXRlcmlhbD9GLm1hdGVyaWFsLm1hdGVyaWFsc1swXTpGLm1hdGVyaWFsLEk9dm9pZCAwIT09Ri5nZW9tZXRyeS5tb3JwaFRhcmdldHMmJlxyXG4wPEYuZ2VvbWV0cnkubW9ycGhUYXJnZXRzLmxlbmd0aCYmSC5tb3JwaFRhcmdldHMsTD1GIGluc3RhbmNlb2YgVEhSRUUuU2tpbm5lZE1lc2gmJkguc2tpbm5pbmcsST1GLmN1c3RvbURlcHRoTWF0ZXJpYWw/Ri5jdXN0b21EZXB0aE1hdGVyaWFsOkw/ST9sOms6ST9oOmcsYS5zZXRNYXRlcmlhbEZhY2VzKEgpLHogaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeT9hLnJlbmRlckJ1ZmZlckRpcmVjdChHLGIsbnVsbCxJLHosRik6YS5yZW5kZXJCdWZmZXIoRyxiLG51bGwsSSx6LEYpO0E9MDtmb3IoRT1kLmxlbmd0aDtBPEU7QSsrKXo9ZFtBXSxGPXoub2JqZWN0LEYudmlzaWJsZSYmRi5jYXN0U2hhZG93JiYoRi5fbW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoRy5tYXRyaXhXb3JsZEludmVyc2UsRi5tYXRyaXhXb3JsZCksYS5yZW5kZXJJbW1lZGlhdGVPYmplY3QoRyxiLG51bGwsZyxGKSl9dT1hLmdldENsZWFyQ29sb3IoKTt5PWEuZ2V0Q2xlYXJBbHBoYSgpO2YuY2xlYXJDb2xvcih1LnIsXHJcbnUuZyx1LmIseSk7Zi5lbmFibGUoZi5CTEVORCk7YS5zaGFkb3dNYXBDdWxsRmFjZT09PVRIUkVFLkN1bGxGYWNlRnJvbnQmJmYuY3VsbEZhY2UoZi5CQUNLKTthLnJlc2V0R0xTdGF0ZSgpfX19O1xyXG5USFJFRS5TcHJpdGVQbHVnaW49ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZixnLGgsayxsLHAscSxuLHQscixzLHUsdix4O2Z1bmN0aW9uIEQoYSxiKXtyZXR1cm4gYS56IT09Yi56P2Iuei1hLno6Yi5pZC1hLmlkfXZhciB3PWEuY29udGV4dCx5LEEsRSxHLEY9bmV3IFRIUkVFLlZlY3RvcjMsej1uZXcgVEhSRUUuUXVhdGVybmlvbixJPW5ldyBUSFJFRS5WZWN0b3IzO3RoaXMucmVuZGVyPWZ1bmN0aW9uKFUsTSl7aWYoMCE9PWIubGVuZ3RoKXtpZih2b2lkIDA9PT1FKXt2YXIgSD1uZXcgRmxvYXQzMkFycmF5KFstLjUsLS41LDAsMCwuNSwtLjUsMSwwLC41LC41LDEsMSwtLjUsLjUsMCwxXSksTD1uZXcgVWludDE2QXJyYXkoWzAsMSwyLDAsMiwzXSk7eT13LmNyZWF0ZUJ1ZmZlcigpO0E9dy5jcmVhdGVCdWZmZXIoKTt3LmJpbmRCdWZmZXIody5BUlJBWV9CVUZGRVIseSk7dy5idWZmZXJEYXRhKHcuQVJSQVlfQlVGRkVSLEgsdy5TVEFUSUNfRFJBVyk7dy5iaW5kQnVmZmVyKHcuRUxFTUVOVF9BUlJBWV9CVUZGRVIsXHJcbkEpO3cuYnVmZmVyRGF0YSh3LkVMRU1FTlRfQVJSQVlfQlVGRkVSLEwsdy5TVEFUSUNfRFJBVyk7dmFyIEg9dy5jcmVhdGVQcm9ncmFtKCksTD13LmNyZWF0ZVNoYWRlcih3LlZFUlRFWF9TSEFERVIpLFA9dy5jcmVhdGVTaGFkZXIody5GUkFHTUVOVF9TSEFERVIpO3cuc2hhZGVyU291cmNlKEwsW1wicHJlY2lzaW9uIFwiK2EuZ2V0UHJlY2lzaW9uKCkrXCIgZmxvYXQ7XCIsXCJ1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4O1xcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcbnVuaWZvcm0gZmxvYXQgcm90YXRpb247XFxudW5pZm9ybSB2ZWMyIHNjYWxlO1xcbnVuaWZvcm0gdmVjMiB1dk9mZnNldDtcXG51bmlmb3JtIHZlYzIgdXZTY2FsZTtcXG5hdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiB1djtcXG52YXJ5aW5nIHZlYzIgdlVWO1xcbnZvaWQgbWFpbigpIHtcXG52VVYgPSB1dk9mZnNldCArIHV2ICogdXZTY2FsZTtcXG52ZWMyIGFsaWduZWRQb3NpdGlvbiA9IHBvc2l0aW9uICogc2NhbGU7XFxudmVjMiByb3RhdGVkUG9zaXRpb247XFxucm90YXRlZFBvc2l0aW9uLnggPSBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcbnJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcXG52ZWM0IGZpbmFsUG9zaXRpb247XFxuZmluYWxQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xcbmZpbmFsUG9zaXRpb24ueHkgKz0gcm90YXRlZFBvc2l0aW9uO1xcbmZpbmFsUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogZmluYWxQb3NpdGlvbjtcXG5nbF9Qb3NpdGlvbiA9IGZpbmFsUG9zaXRpb247XFxufVwiXS5qb2luKFwiXFxuXCIpKTtcclxudy5zaGFkZXJTb3VyY2UoUCxbXCJwcmVjaXNpb24gXCIrYS5nZXRQcmVjaXNpb24oKStcIiBmbG9hdDtcIixcInVuaWZvcm0gdmVjMyBjb2xvcjtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gaW50IGZvZ1R5cGU7XFxudW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcbnVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG51bmlmb3JtIGZsb2F0IGZvZ05lYXI7XFxudW5pZm9ybSBmbG9hdCBmb2dGYXI7XFxudW5pZm9ybSBmbG9hdCBhbHBoYVRlc3Q7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52b2lkIG1haW4oKSB7XFxudmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbmlmICggdGV4dHVyZS5hIDwgYWxwaGFUZXN0ICkgZGlzY2FyZDtcXG5nbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciAqIHRleHR1cmUueHl6LCB0ZXh0dXJlLmEgKiBvcGFjaXR5ICk7XFxuaWYgKCBmb2dUeXBlID4gMCApIHtcXG5mbG9hdCBkZXB0aCA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7XFxuZmxvYXQgZm9nRmFjdG9yID0gMC4wO1xcbmlmICggZm9nVHlwZSA9PSAxICkge1xcbmZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgZGVwdGggKTtcXG59IGVsc2Uge1xcbmNvbnN0IGZsb2F0IExPRzIgPSAxLjQ0MjY5NTtcXG5mbG9hdCBmb2dGYWN0b3IgPSBleHAyKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogZGVwdGggKiBkZXB0aCAqIExPRzIgKTtcXG5mb2dGYWN0b3IgPSAxLjAgLSBjbGFtcCggZm9nRmFjdG9yLCAwLjAsIDEuMCApO1xcbn1cXG5nbF9GcmFnQ29sb3IgPSBtaXgoIGdsX0ZyYWdDb2xvciwgdmVjNCggZm9nQ29sb3IsIGdsX0ZyYWdDb2xvci53ICksIGZvZ0ZhY3RvciApO1xcbn1cXG59XCJdLmpvaW4oXCJcXG5cIikpO1xyXG53LmNvbXBpbGVTaGFkZXIoTCk7dy5jb21waWxlU2hhZGVyKFApO3cuYXR0YWNoU2hhZGVyKEgsTCk7dy5hdHRhY2hTaGFkZXIoSCxQKTt3LmxpbmtQcm9ncmFtKEgpO0U9SDt2PXcuZ2V0QXR0cmliTG9jYXRpb24oRSxcInBvc2l0aW9uXCIpO3g9dy5nZXRBdHRyaWJMb2NhdGlvbihFLFwidXZcIik7Yz13LmdldFVuaWZvcm1Mb2NhdGlvbihFLFwidXZPZmZzZXRcIik7ZD13LmdldFVuaWZvcm1Mb2NhdGlvbihFLFwidXZTY2FsZVwiKTtlPXcuZ2V0VW5pZm9ybUxvY2F0aW9uKEUsXCJyb3RhdGlvblwiKTtmPXcuZ2V0VW5pZm9ybUxvY2F0aW9uKEUsXCJzY2FsZVwiKTtnPXcuZ2V0VW5pZm9ybUxvY2F0aW9uKEUsXCJjb2xvclwiKTtoPXcuZ2V0VW5pZm9ybUxvY2F0aW9uKEUsXCJtYXBcIik7az13LmdldFVuaWZvcm1Mb2NhdGlvbihFLFwib3BhY2l0eVwiKTtsPXcuZ2V0VW5pZm9ybUxvY2F0aW9uKEUsXCJtb2RlbFZpZXdNYXRyaXhcIik7cD13LmdldFVuaWZvcm1Mb2NhdGlvbihFLFwicHJvamVjdGlvbk1hdHJpeFwiKTtxPVxyXG53LmdldFVuaWZvcm1Mb2NhdGlvbihFLFwiZm9nVHlwZVwiKTtuPXcuZ2V0VW5pZm9ybUxvY2F0aW9uKEUsXCJmb2dEZW5zaXR5XCIpO3Q9dy5nZXRVbmlmb3JtTG9jYXRpb24oRSxcImZvZ05lYXJcIik7cj13LmdldFVuaWZvcm1Mb2NhdGlvbihFLFwiZm9nRmFyXCIpO3M9dy5nZXRVbmlmb3JtTG9jYXRpb24oRSxcImZvZ0NvbG9yXCIpO3U9dy5nZXRVbmlmb3JtTG9jYXRpb24oRSxcImFscGhhVGVzdFwiKTtIPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7SC53aWR0aD04O0guaGVpZ2h0PTg7TD1ILmdldENvbnRleHQoXCIyZFwiKTtMLmZpbGxTdHlsZT1cIndoaXRlXCI7TC5maWxsUmVjdCgwLDAsOCw4KTtHPW5ldyBUSFJFRS5UZXh0dXJlKEgpO0cubmVlZHNVcGRhdGU9ITB9dy51c2VQcm9ncmFtKEUpO3cuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodik7dy5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh4KTt3LmRpc2FibGUody5DVUxMX0ZBQ0UpO3cuZW5hYmxlKHcuQkxFTkQpO3cuYmluZEJ1ZmZlcih3LkFSUkFZX0JVRkZFUixcclxueSk7dy52ZXJ0ZXhBdHRyaWJQb2ludGVyKHYsMix3LkZMT0FULCExLDE2LDApO3cudmVydGV4QXR0cmliUG9pbnRlcih4LDIsdy5GTE9BVCwhMSwxNiw4KTt3LmJpbmRCdWZmZXIody5FTEVNRU5UX0FSUkFZX0JVRkZFUixBKTt3LnVuaWZvcm1NYXRyaXg0ZnYocCwhMSxNLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHMpO3cuYWN0aXZlVGV4dHVyZSh3LlRFWFRVUkUwKTt3LnVuaWZvcm0xaShoLDApO0w9SD0wOyhQPVUuZm9nKT8ody51bmlmb3JtM2YocyxQLmNvbG9yLnIsUC5jb2xvci5nLFAuY29sb3IuYiksUCBpbnN0YW5jZW9mIFRIUkVFLkZvZz8ody51bmlmb3JtMWYodCxQLm5lYXIpLHcudW5pZm9ybTFmKHIsUC5mYXIpLHcudW5pZm9ybTFpKHEsMSksTD1IPTEpOlAgaW5zdGFuY2VvZiBUSFJFRS5Gb2dFeHAyJiYody51bmlmb3JtMWYobixQLmRlbnNpdHkpLHcudW5pZm9ybTFpKHEsMiksTD1IPTIpKToody51bmlmb3JtMWkocSwwKSxMPUg9MCk7Zm9yKHZhciBQPTAsTj1iLmxlbmd0aDtQPFxyXG5OO1ArKyl7dmFyIFI9YltQXTtSLl9tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhNLm1hdHJpeFdvcmxkSW52ZXJzZSxSLm1hdHJpeFdvcmxkKTtSLno9LVIuX21vZGVsVmlld01hdHJpeC5lbGVtZW50c1sxNF19Yi5zb3J0KEQpO2Zvcih2YXIgVj1bXSxQPTAsTj1iLmxlbmd0aDtQPE47UCsrKXt2YXIgUj1iW1BdLEo9Ui5tYXRlcmlhbDt3LnVuaWZvcm0xZih1LEouYWxwaGFUZXN0KTt3LnVuaWZvcm1NYXRyaXg0ZnYobCwhMSxSLl9tb2RlbFZpZXdNYXRyaXguZWxlbWVudHMpO1IubWF0cml4V29ybGQuZGVjb21wb3NlKEYseixJKTtWWzBdPUkueDtWWzFdPUkueTtSPTA7VS5mb2cmJkouZm9nJiYoUj1MKTtIIT09UiYmKHcudW5pZm9ybTFpKHEsUiksSD1SKTtudWxsIT09Si5tYXA/KHcudW5pZm9ybTJmKGMsSi5tYXAub2Zmc2V0LngsSi5tYXAub2Zmc2V0LnkpLHcudW5pZm9ybTJmKGQsSi5tYXAucmVwZWF0LngsSi5tYXAucmVwZWF0LnkpKToody51bmlmb3JtMmYoYyxcclxuMCwwKSx3LnVuaWZvcm0yZihkLDEsMSkpO3cudW5pZm9ybTFmKGssSi5vcGFjaXR5KTt3LnVuaWZvcm0zZihnLEouY29sb3IucixKLmNvbG9yLmcsSi5jb2xvci5iKTt3LnVuaWZvcm0xZihlLEoucm90YXRpb24pO3cudW5pZm9ybTJmdihmLFYpO2Euc3RhdGUuc2V0QmxlbmRpbmcoSi5ibGVuZGluZyxKLmJsZW5kRXF1YXRpb24sSi5ibGVuZFNyYyxKLmJsZW5kRHN0KTthLnN0YXRlLnNldERlcHRoVGVzdChKLmRlcHRoVGVzdCk7YS5zdGF0ZS5zZXREZXB0aFdyaXRlKEouZGVwdGhXcml0ZSk7Si5tYXAmJkoubWFwLmltYWdlJiZKLm1hcC5pbWFnZS53aWR0aD9hLnNldFRleHR1cmUoSi5tYXAsMCk6YS5zZXRUZXh0dXJlKEcsMCk7dy5kcmF3RWxlbWVudHMody5UUklBTkdMRVMsNix3LlVOU0lHTkVEX1NIT1JULDApfXcuZW5hYmxlKHcuQ1VMTF9GQUNFKTthLnJlc2V0R0xTdGF0ZSgpfX19O1xyXG5USFJFRS5HZW9tZXRyeVV0aWxzPXttZXJnZTpmdW5jdGlvbihhLGIsYyl7VEhSRUUud2FybihcIlRIUkVFLkdlb21ldHJ5VXRpbHM6IC5tZXJnZSgpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkubWVyZ2UoIGdlb21ldHJ5MiwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkgaW5zdGVhZC5cIik7dmFyIGQ7YiBpbnN0YW5jZW9mIFRIUkVFLk1lc2gmJihiLm1hdHJpeEF1dG9VcGRhdGUmJmIudXBkYXRlTWF0cml4KCksZD1iLm1hdHJpeCxiPWIuZ2VvbWV0cnkpO2EubWVyZ2UoYixkLGMpfSxjZW50ZXI6ZnVuY3Rpb24oYSl7VEhSRUUud2FybihcIlRIUkVFLkdlb21ldHJ5VXRpbHM6IC5jZW50ZXIoKSBoYXMgYmVlbiBtb3ZlZCB0byBHZW9tZXRyeS4gVXNlIGdlb21ldHJ5LmNlbnRlcigpIGluc3RlYWQuXCIpO3JldHVybiBhLmNlbnRlcigpfX07XHJcblRIUkVFLkltYWdlVXRpbHM9e2Nyb3NzT3JpZ2luOnZvaWQgMCxsb2FkVGV4dHVyZTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1uZXcgVEhSRUUuSW1hZ2VMb2FkZXI7ZS5jcm9zc09yaWdpbj10aGlzLmNyb3NzT3JpZ2luO3ZhciBmPW5ldyBUSFJFRS5UZXh0dXJlKHZvaWQgMCxiKTtlLmxvYWQoYSxmdW5jdGlvbihhKXtmLmltYWdlPWE7Zi5uZWVkc1VwZGF0ZT0hMDtjJiZjKGYpfSx2b2lkIDAsZnVuY3Rpb24oYSl7ZCYmZChhKX0pO2Yuc291cmNlRmlsZT1hO3JldHVybiBmfSxsb2FkVGV4dHVyZUN1YmU6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IFRIUkVFLkltYWdlTG9hZGVyO2UuY3Jvc3NPcmlnaW49dGhpcy5jcm9zc09yaWdpbjt2YXIgZj1uZXcgVEhSRUUuQ3ViZVRleHR1cmUoW10sYik7Zi5mbGlwWT0hMTt2YXIgZz0wO2I9ZnVuY3Rpb24oYil7ZS5sb2FkKGFbYl0sZnVuY3Rpb24oYSl7Zi5pbWFnZXNbYl09YTtnKz0xOzY9PT1nJiYoZi5uZWVkc1VwZGF0ZT0hMCxjJiZcclxuYyhmKSl9LHZvaWQgMCxkKX07Zm9yKHZhciBoPTAsaz1hLmxlbmd0aDtoPGs7KytoKWIoaCk7cmV0dXJuIGZ9LGxvYWRDb21wcmVzc2VkVGV4dHVyZTpmdW5jdGlvbigpe1RIUkVFLmVycm9yKFwiVEhSRUUuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkREU0xvYWRlciBpbnN0ZWFkLlwiKX0sbG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZTpmdW5jdGlvbigpe1RIUkVFLmVycm9yKFwiVEhSRUUuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5ERFNMb2FkZXIgaW5zdGVhZC5cIil9LGdldE5vcm1hbE1hcDpmdW5jdGlvbihhLGIpe3ZhciBjPWZ1bmN0aW9uKGEpe3ZhciBiPU1hdGguc3FydChhWzBdKmFbMF0rYVsxXSphWzFdK2FbMl0qYVsyXSk7cmV0dXJuW2FbMF0vYixhWzFdL2IsYVsyXS9iXX07Ynw9MTt2YXIgZD1hLndpZHRoLGU9YS5oZWlnaHQsZj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG5mLndpZHRoPWQ7Zi5oZWlnaHQ9ZTt2YXIgZz1mLmdldENvbnRleHQoXCIyZFwiKTtnLmRyYXdJbWFnZShhLDAsMCk7Zm9yKHZhciBoPWcuZ2V0SW1hZ2VEYXRhKDAsMCxkLGUpLmRhdGEsaz1nLmNyZWF0ZUltYWdlRGF0YShkLGUpLGw9ay5kYXRhLHA9MDtwPGQ7cCsrKWZvcih2YXIgcT0wO3E8ZTtxKyspe3ZhciBuPTA+cS0xPzA6cS0xLHQ9cSsxPmUtMT9lLTE6cSsxLHI9MD5wLTE/MDpwLTEscz1wKzE+ZC0xP2QtMTpwKzEsdT1bXSx2PVswLDAsaFs0KihxKmQrcCldLzI1NSpiXTt1LnB1c2goWy0xLDAsaFs0KihxKmQrcildLzI1NSpiXSk7dS5wdXNoKFstMSwtMSxoWzQqKG4qZCtyKV0vMjU1KmJdKTt1LnB1c2goWzAsLTEsaFs0KihuKmQrcCldLzI1NSpiXSk7dS5wdXNoKFsxLC0xLGhbNCoobipkK3MpXS8yNTUqYl0pO3UucHVzaChbMSwwLGhbNCoocSpkK3MpXS8yNTUqYl0pO3UucHVzaChbMSwxLGhbNCoodCpkK3MpXS8yNTUqYl0pO3UucHVzaChbMCwxLGhbNCoodCpkK3ApXS8yNTUqXHJcbmJdKTt1LnB1c2goWy0xLDEsaFs0Kih0KmQrcildLzI1NSpiXSk7bj1bXTtyPXUubGVuZ3RoO2Zvcih0PTA7dDxyO3QrKyl7dmFyIHM9dVt0XSx4PXVbKHQrMSklcl0scz1bc1swXS12WzBdLHNbMV0tdlsxXSxzWzJdLXZbMl1dLHg9W3hbMF0tdlswXSx4WzFdLXZbMV0seFsyXS12WzJdXTtuLnB1c2goYyhbc1sxXSp4WzJdLXNbMl0qeFsxXSxzWzJdKnhbMF0tc1swXSp4WzJdLHNbMF0qeFsxXS1zWzFdKnhbMF1dKSl9dT1bMCwwLDBdO2Zvcih0PTA7dDxuLmxlbmd0aDt0KyspdVswXSs9blt0XVswXSx1WzFdKz1uW3RdWzFdLHVbMl0rPW5bdF1bMl07dVswXS89bi5sZW5ndGg7dVsxXS89bi5sZW5ndGg7dVsyXS89bi5sZW5ndGg7dj00KihxKmQrcCk7bFt2XT0odVswXSsxKS8yKjI1NXwwO2xbdisxXT0odVsxXSsxKS8yKjI1NXwwO2xbdisyXT0yNTUqdVsyXXwwO2xbdiszXT0yNTV9Zy5wdXRJbWFnZURhdGEoaywwLDApO3JldHVybiBmfSxnZW5lcmF0ZURhdGFUZXh0dXJlOmZ1bmN0aW9uKGEsXHJcbmIsYyl7dmFyIGQ9YSpiLGU9bmV3IFVpbnQ4QXJyYXkoMypkKSxmPU1hdGguZmxvb3IoMjU1KmMuciksZz1NYXRoLmZsb29yKDI1NSpjLmcpO2M9TWF0aC5mbG9vcigyNTUqYy5iKTtmb3IodmFyIGg9MDtoPGQ7aCsrKWVbMypoXT1mLGVbMypoKzFdPWcsZVszKmgrMl09YzthPW5ldyBUSFJFRS5EYXRhVGV4dHVyZShlLGEsYixUSFJFRS5SR0JGb3JtYXQpO2EubmVlZHNVcGRhdGU9ITA7cmV0dXJuIGF9fTtcclxuVEhSRUUuU2NlbmVVdGlscz17Y3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdDpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1uZXcgVEhSRUUuT2JqZWN0M0QsZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrKyljLmFkZChuZXcgVEhSRUUuTWVzaChhLGJbZF0pKTtyZXR1cm4gY30sZGV0YWNoOmZ1bmN0aW9uKGEsYixjKXthLmFwcGx5TWF0cml4KGIubWF0cml4V29ybGQpO2IucmVtb3ZlKGEpO2MuYWRkKGEpfSxhdHRhY2g6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW5ldyBUSFJFRS5NYXRyaXg0O2QuZ2V0SW52ZXJzZShjLm1hdHJpeFdvcmxkKTthLmFwcGx5TWF0cml4KGQpO2IucmVtb3ZlKGEpO2MuYWRkKGEpfX07XHJcblRIUkVFLkZvbnRVdGlscz17ZmFjZXM6e30sZmFjZTpcImhlbHZldGlrZXJcIix3ZWlnaHQ6XCJub3JtYWxcIixzdHlsZTpcIm5vcm1hbFwiLHNpemU6MTUwLGRpdmlzaW9uczoxMCxnZXRGYWNlOmZ1bmN0aW9uKCl7dHJ5e3JldHVybiB0aGlzLmZhY2VzW3RoaXMuZmFjZV1bdGhpcy53ZWlnaHRdW3RoaXMuc3R5bGVdfWNhdGNoKGEpe3Rocm93XCJUaGUgZm9udCBcIit0aGlzLmZhY2UrXCIgd2l0aCBcIit0aGlzLndlaWdodCtcIiB3ZWlnaHQgYW5kIFwiK3RoaXMuc3R5bGUrXCIgc3R5bGUgaXMgbWlzc2luZy5cIjt9fSxsb2FkRmFjZTpmdW5jdGlvbihhKXt2YXIgYj1hLmZhbWlseU5hbWUudG9Mb3dlckNhc2UoKTt0aGlzLmZhY2VzW2JdPXRoaXMuZmFjZXNbYl18fHt9O3RoaXMuZmFjZXNbYl1bYS5jc3NGb250V2VpZ2h0XT10aGlzLmZhY2VzW2JdW2EuY3NzRm9udFdlaWdodF18fHt9O3RoaXMuZmFjZXNbYl1bYS5jc3NGb250V2VpZ2h0XVthLmNzc0ZvbnRTdHlsZV09YTtyZXR1cm4gdGhpcy5mYWNlc1tiXVthLmNzc0ZvbnRXZWlnaHRdW2EuY3NzRm9udFN0eWxlXT1cclxuYX0sZHJhd1RleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5nZXRGYWNlKCksYz10aGlzLnNpemUvYi5yZXNvbHV0aW9uLGQ9MCxlPVN0cmluZyhhKS5zcGxpdChcIlwiKSxmPWUubGVuZ3RoLGc9W107Zm9yKGE9MDthPGY7YSsrKXt2YXIgaD1uZXcgVEhSRUUuUGF0aCxoPXRoaXMuZXh0cmFjdEdseXBoUG9pbnRzKGVbYV0sYixjLGQsaCksZD1kK2gub2Zmc2V0O2cucHVzaChoLnBhdGgpfXJldHVybntwYXRoczpnLG9mZnNldDpkLzJ9fSxleHRyYWN0R2x5cGhQb2ludHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1bXSxnLGgsayxsLHAscSxuLHQscixzLHUsdj1iLmdseXBoc1thXXx8Yi5nbHlwaHNbXCI/XCJdO2lmKHYpe2lmKHYubylmb3IoYj12Ll9jYWNoZWRPdXRsaW5lfHwodi5fY2FjaGVkT3V0bGluZT12Lm8uc3BsaXQoXCIgXCIpKSxsPWIubGVuZ3RoLGE9MDthPGw7KXN3aXRjaChrPWJbYSsrXSxrKXtjYXNlIFwibVwiOms9YlthKytdKmMrZDtwPWJbYSsrXSpjO2UubW92ZVRvKGsscCk7XHJcbmJyZWFrO2Nhc2UgXCJsXCI6az1iW2ErK10qYytkO3A9YlthKytdKmM7ZS5saW5lVG8oayxwKTticmVhaztjYXNlIFwicVwiOms9YlthKytdKmMrZDtwPWJbYSsrXSpjO3Q9YlthKytdKmMrZDtyPWJbYSsrXSpjO2UucXVhZHJhdGljQ3VydmVUbyh0LHIsayxwKTtpZihnPWZbZi5sZW5ndGgtMV0pZm9yKHE9Zy54LG49Zy55LGc9MSxoPXRoaXMuZGl2aXNpb25zO2c8PWg7ZysrKXt2YXIgeD1nL2g7VEhSRUUuU2hhcGUuVXRpbHMuYjIoeCxxLHQsayk7VEhSRUUuU2hhcGUuVXRpbHMuYjIoeCxuLHIscCl9YnJlYWs7Y2FzZSBcImJcIjppZihrPWJbYSsrXSpjK2QscD1iW2ErK10qYyx0PWJbYSsrXSpjK2Qscj1iW2ErK10qYyxzPWJbYSsrXSpjK2QsdT1iW2ErK10qYyxlLmJlemllckN1cnZlVG8odCxyLHMsdSxrLHApLGc9ZltmLmxlbmd0aC0xXSlmb3IocT1nLngsbj1nLnksZz0xLGg9dGhpcy5kaXZpc2lvbnM7Zzw9aDtnKyspeD1nL2gsVEhSRUUuU2hhcGUuVXRpbHMuYjMoeCxxLHQscyxrKSxUSFJFRS5TaGFwZS5VdGlscy5iMyh4LFxyXG5uLHIsdSxwKX1yZXR1cm57b2Zmc2V0OnYuaGEqYyxwYXRoOmV9fX19O1xyXG5USFJFRS5Gb250VXRpbHMuZ2VuZXJhdGVTaGFwZXM9ZnVuY3Rpb24oYSxiKXtiPWJ8fHt9O3ZhciBjPXZvaWQgMCE9PWIuY3VydmVTZWdtZW50cz9iLmN1cnZlU2VnbWVudHM6NCxkPXZvaWQgMCE9PWIuZm9udD9iLmZvbnQ6XCJoZWx2ZXRpa2VyXCIsZT12b2lkIDAhPT1iLndlaWdodD9iLndlaWdodDpcIm5vcm1hbFwiLGY9dm9pZCAwIT09Yi5zdHlsZT9iLnN0eWxlOlwibm9ybWFsXCI7VEhSRUUuRm9udFV0aWxzLnNpemU9dm9pZCAwIT09Yi5zaXplP2Iuc2l6ZToxMDA7VEhSRUUuRm9udFV0aWxzLmRpdmlzaW9ucz1jO1RIUkVFLkZvbnRVdGlscy5mYWNlPWQ7VEhSRUUuRm9udFV0aWxzLndlaWdodD1lO1RIUkVFLkZvbnRVdGlscy5zdHlsZT1mO2M9VEhSRUUuRm9udFV0aWxzLmRyYXdUZXh0KGEpLnBhdGhzO2Q9W107ZT0wO2ZvcihmPWMubGVuZ3RoO2U8ZjtlKyspQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoZCxjW2VdLnRvU2hhcGVzKCkpO3JldHVybiBkfTtcclxuKGZ1bmN0aW9uKGEpe3ZhciBiPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxlPTAsZj1iLTEsZz0wO2c8YjtmPWcrKyllKz1hW2ZdLngqYVtnXS55LWFbZ10ueCphW2ZdLnk7cmV0dXJuLjUqZX07YS5Ucmlhbmd1bGF0ZT1mdW5jdGlvbihhLGQpe3ZhciBlPWEubGVuZ3RoO2lmKDM+ZSlyZXR1cm4gbnVsbDt2YXIgZj1bXSxnPVtdLGg9W10sayxsLHA7aWYoMDxiKGEpKWZvcihsPTA7bDxlO2wrKylnW2xdPWw7ZWxzZSBmb3IobD0wO2w8ZTtsKyspZ1tsXT1lLTEtbDt2YXIgcT0yKmU7Zm9yKGw9ZS0xOzI8ZTspe2lmKDA+PXEtLSl7VEhSRUUud2FybihcIlRIUkVFLkZvbnRVdGlsczogV2FybmluZywgdW5hYmxlIHRvIHRyaWFuZ3VsYXRlIHBvbHlnb24hIGluIFRyaWFuZ3VsYXRlLnByb2Nlc3MoKVwiKTticmVha31rPWw7ZTw9ayYmKGs9MCk7bD1rKzE7ZTw9bCYmKGw9MCk7cD1sKzE7ZTw9cCYmKHA9MCk7dmFyIG47YTp7dmFyIHQ9bj12b2lkIDAscj12b2lkIDAscz12b2lkIDAsXHJcbnU9dm9pZCAwLHY9dm9pZCAwLHg9dm9pZCAwLEQ9dm9pZCAwLHc9dm9pZCAwLHQ9YVtnW2tdXS54LHI9YVtnW2tdXS55LHM9YVtnW2xdXS54LHU9YVtnW2xdXS55LHY9YVtnW3BdXS54LHg9YVtnW3BdXS55O2lmKDFFLTEwPihzLXQpKih4LXIpLSh1LXIpKih2LXQpKW49ITE7ZWxzZXt2YXIgeT12b2lkIDAsQT12b2lkIDAsRT12b2lkIDAsRz12b2lkIDAsRj12b2lkIDAsej12b2lkIDAsST12b2lkIDAsVT12b2lkIDAsTT12b2lkIDAsSD12b2lkIDAsTT1VPUk9dz1EPXZvaWQgMCx5PXYtcyxBPXgtdSxFPXQtdixHPXIteCxGPXMtdCx6PXUtcjtmb3Iobj0wO248ZTtuKyspaWYoRD1hW2dbbl1dLngsdz1hW2dbbl1dLnksIShEPT09dCYmdz09PXJ8fEQ9PT1zJiZ3PT09dXx8RD09PXYmJnc9PT14KSYmKEk9RC10LFU9dy1yLE09RC1zLEg9dy11LEQtPXYsdy09eCxNPXkqSC1BKk0sST1GKlUteipJLFU9RSp3LUcqRCwtMUUtMTA8PU0mJi0xRS0xMDw9VSYmLTFFLTEwPD1JKSl7bj0hMTticmVhayBhfW49XHJcbiEwfX1pZihuKXtmLnB1c2goW2FbZ1trXV0sYVtnW2xdXSxhW2dbcF1dXSk7aC5wdXNoKFtnW2tdLGdbbF0sZ1twXV0pO2s9bDtmb3IocD1sKzE7cDxlO2srKyxwKyspZ1trXT1nW3BdO2UtLTtxPTIqZX19cmV0dXJuIGQ/aDpmfTthLlRyaWFuZ3VsYXRlLmFyZWE9YjtyZXR1cm4gYX0pKFRIUkVFLkZvbnRVdGlscyk7c2VsZi5fdHlwZWZhY2VfanM9e2ZhY2VzOlRIUkVFLkZvbnRVdGlscy5mYWNlcyxsb2FkRmFjZTpUSFJFRS5Gb250VXRpbHMubG9hZEZhY2V9O1RIUkVFLnR5cGVmYWNlX2pzPXNlbGYuX3R5cGVmYWNlX2pzO1xyXG5USFJFRS5BdWRpbz1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkF1ZGlvXCI7dGhpcy5jb250ZXh0PWEuY29udGV4dDt0aGlzLnNvdXJjZT10aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7dGhpcy5zb3VyY2Uub25lbmRlZD10aGlzLm9uRW5kZWQuYmluZCh0aGlzKTt0aGlzLmdhaW49dGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTt0aGlzLmdhaW4uY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO3RoaXMucGFubmVyPXRoaXMuY29udGV4dC5jcmVhdGVQYW5uZXIoKTt0aGlzLnBhbm5lci5jb25uZWN0KHRoaXMuZ2Fpbik7dGhpcy5hdXRvcGxheT0hMTt0aGlzLnN0YXJ0VGltZT0wO3RoaXMuaXNQbGF5aW5nPSExfTtUSFJFRS5BdWRpby5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5BdWRpbztcclxuVEhSRUUuQXVkaW8ucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPW5ldyBYTUxIdHRwUmVxdWVzdDtjLm9wZW4oXCJHRVRcIixhLCEwKTtjLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7Yy5vbmxvYWQ9ZnVuY3Rpb24oYSl7Yi5jb250ZXh0LmRlY29kZUF1ZGlvRGF0YSh0aGlzLnJlc3BvbnNlLGZ1bmN0aW9uKGEpe2Iuc291cmNlLmJ1ZmZlcj1hO2IuYXV0b3BsYXkmJmIucGxheSgpfSl9O2Muc2VuZCgpO3JldHVybiB0aGlzfTtcclxuVEhSRUUuQXVkaW8ucHJvdG90eXBlLnBsYXk9ZnVuY3Rpb24oKXtpZighMD09PXRoaXMuaXNQbGF5aW5nKVRIUkVFLndhcm4oXCJUSFJFRS5BdWRpbzogQXVkaW8gaXMgYWxyZWFkeSBwbGF5aW5nLlwiKTtlbHNle3ZhciBhPXRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTthLmJ1ZmZlcj10aGlzLnNvdXJjZS5idWZmZXI7YS5sb29wPXRoaXMuc291cmNlLmxvb3A7YS5vbmVuZGVkPXRoaXMuc291cmNlLm9uZW5kZWQ7YS5jb25uZWN0KHRoaXMucGFubmVyKTthLnN0YXJ0KDAsdGhpcy5zdGFydFRpbWUpO3RoaXMuaXNQbGF5aW5nPSEwO3RoaXMuc291cmNlPWF9fTtUSFJFRS5BdWRpby5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXt0aGlzLnNvdXJjZS5zdG9wKCk7dGhpcy5zdGFydFRpbWU9dGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lfTtUSFJFRS5BdWRpby5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3RoaXMuc291cmNlLnN0b3AoKTt0aGlzLnN0YXJ0VGltZT0wfTtcclxuVEhSRUUuQXVkaW8ucHJvdG90eXBlLm9uRW5kZWQ9ZnVuY3Rpb24oKXt0aGlzLmlzUGxheWluZz0hMX07VEhSRUUuQXVkaW8ucHJvdG90eXBlLnNldExvb3A9ZnVuY3Rpb24oYSl7dGhpcy5zb3VyY2UubG9vcD1hfTtUSFJFRS5BdWRpby5wcm90b3R5cGUuc2V0UmVmRGlzdGFuY2U9ZnVuY3Rpb24oYSl7dGhpcy5wYW5uZXIucmVmRGlzdGFuY2U9YX07VEhSRUUuQXVkaW8ucHJvdG90eXBlLnNldFJvbGxvZmZGYWN0b3I9ZnVuY3Rpb24oYSl7dGhpcy5wYW5uZXIucm9sbG9mZkZhY3Rvcj1hfTtUSFJFRS5BdWRpby5wcm90b3R5cGUuc2V0Vm9sdW1lPWZ1bmN0aW9uKGEpe3RoaXMuZ2Fpbi5nYWluLnZhbHVlPWF9O1xyXG5USFJFRS5BdWRpby5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQ9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYil7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcyxiKTthLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLm1hdHJpeFdvcmxkKTt0aGlzLnBhbm5lci5zZXRQb3NpdGlvbihhLngsYS55LGEueil9fSgpO1RIUkVFLkF1ZGlvTGlzdGVuZXI9ZnVuY3Rpb24oKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkF1ZGlvTGlzdGVuZXJcIjt0aGlzLmNvbnRleHQ9bmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0fHx3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KX07VEhSRUUuQXVkaW9MaXN0ZW5lci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkF1ZGlvTGlzdGVuZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkF1ZGlvTGlzdGVuZXI7XHJcblRIUkVFLkF1ZGlvTGlzdGVuZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuUXVhdGVybmlvbixjPW5ldyBUSFJFRS5WZWN0b3IzLGQ9bmV3IFRIUkVFLlZlY3RvcjMsZT1uZXcgVEhSRUUuVmVjdG9yMyxmPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihnKXtUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCh0aGlzLGcpO2c9dGhpcy5jb250ZXh0Lmxpc3RlbmVyO3ZhciBoPXRoaXMudXA7dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoYSxiLGMpO2Quc2V0KDAsMCwtMSkuYXBwbHlRdWF0ZXJuaW9uKGIpO2Uuc3ViVmVjdG9ycyhhLGYpO2cuc2V0UG9zaXRpb24oYS54LGEueSxhLnopO2cuc2V0T3JpZW50YXRpb24oZC54LGQueSxkLnosaC54LGgueSxoLnopO2cuc2V0VmVsb2NpdHkoZS54LGUueSxlLnopO2YuY29weShhKX19KCk7XHJcblRIUkVFLkN1cnZlPWZ1bmN0aW9uKCl7fTtUSFJFRS5DdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7VEhSRUUud2FybihcIlRIUkVFLkN1cnZlOiBXYXJuaW5nLCBnZXRQb2ludCgpIG5vdCBpbXBsZW1lbnRlZCFcIik7cmV0dXJuIG51bGx9O1RIUkVFLkN1cnZlLnByb3RvdHlwZS5nZXRQb2ludEF0PWZ1bmN0aW9uKGEpe2E9dGhpcy5nZXRVdG9UbWFwcGluZyhhKTtyZXR1cm4gdGhpcy5nZXRQb2ludChhKX07VEhSRUUuQ3VydmUucHJvdG90eXBlLmdldFBvaW50cz1mdW5jdGlvbihhKXthfHwoYT01KTt2YXIgYixjPVtdO2ZvcihiPTA7Yjw9YTtiKyspYy5wdXNoKHRoaXMuZ2V0UG9pbnQoYi9hKSk7cmV0dXJuIGN9O1RIUkVFLkN1cnZlLnByb3RvdHlwZS5nZXRTcGFjZWRQb2ludHM9ZnVuY3Rpb24oYSl7YXx8KGE9NSk7dmFyIGIsYz1bXTtmb3IoYj0wO2I8PWE7YisrKWMucHVzaCh0aGlzLmdldFBvaW50QXQoYi9hKSk7cmV0dXJuIGN9O1xyXG5USFJFRS5DdXJ2ZS5wcm90b3R5cGUuZ2V0TGVuZ3RoPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5nZXRMZW5ndGhzKCk7cmV0dXJuIGFbYS5sZW5ndGgtMV19O1RIUkVFLkN1cnZlLnByb3RvdHlwZS5nZXRMZW5ndGhzPWZ1bmN0aW9uKGEpe2F8fChhPXRoaXMuX19hcmNMZW5ndGhEaXZpc2lvbnM/dGhpcy5fX2FyY0xlbmd0aERpdmlzaW9uczoyMDApO2lmKHRoaXMuY2FjaGVBcmNMZW5ndGhzJiZ0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGg9PWErMSYmIXRoaXMubmVlZHNVcGRhdGUpcmV0dXJuIHRoaXMuY2FjaGVBcmNMZW5ndGhzO3RoaXMubmVlZHNVcGRhdGU9ITE7dmFyIGI9W10sYyxkPXRoaXMuZ2V0UG9pbnQoMCksZSxmPTA7Yi5wdXNoKDApO2ZvcihlPTE7ZTw9YTtlKyspYz10aGlzLmdldFBvaW50KGUvYSksZis9Yy5kaXN0YW5jZVRvKGQpLGIucHVzaChmKSxkPWM7cmV0dXJuIHRoaXMuY2FjaGVBcmNMZW5ndGhzPWJ9O1xyXG5USFJFRS5DdXJ2ZS5wcm90b3R5cGUudXBkYXRlQXJjTGVuZ3Rocz1mdW5jdGlvbigpe3RoaXMubmVlZHNVcGRhdGU9ITA7dGhpcy5nZXRMZW5ndGhzKCl9O1RIUkVFLkN1cnZlLnByb3RvdHlwZS5nZXRVdG9UbWFwcGluZz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZ2V0TGVuZ3RocygpLGQ9MCxlPWMubGVuZ3RoLGY7Zj1iP2I6YSpjW2UtMV07Zm9yKHZhciBnPTAsaD1lLTEsaztnPD1oOylpZihkPU1hdGguZmxvb3IoZysoaC1nKS8yKSxrPWNbZF0tZiwwPmspZz1kKzE7ZWxzZSBpZigwPGspaD1kLTE7ZWxzZXtoPWQ7YnJlYWt9ZD1oO2lmKGNbZF09PWYpcmV0dXJuIGQvKGUtMSk7Zz1jW2RdO3JldHVybiBjPShkKyhmLWcpLyhjW2QrMV0tZykpLyhlLTEpfTtUSFJFRS5DdXJ2ZS5wcm90b3R5cGUuZ2V0VGFuZ2VudD1mdW5jdGlvbihhKXt2YXIgYj1hLTFFLTQ7YSs9MUUtNDswPmImJihiPTApOzE8YSYmKGE9MSk7Yj10aGlzLmdldFBvaW50KGIpO3JldHVybiB0aGlzLmdldFBvaW50KGEpLmNsb25lKCkuc3ViKGIpLm5vcm1hbGl6ZSgpfTtcclxuVEhSRUUuQ3VydmUucHJvdG90eXBlLmdldFRhbmdlbnRBdD1mdW5jdGlvbihhKXthPXRoaXMuZ2V0VXRvVG1hcHBpbmcoYSk7cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudChhKX07XHJcblRIUkVFLkN1cnZlLlV0aWxzPXt0YW5nZW50UXVhZHJhdGljQmV6aWVyOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiAyKigxLWEpKihjLWIpKzIqYSooZC1jKX0sdGFuZ2VudEN1YmljQmV6aWVyOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuLTMqYiooMS1hKSooMS1hKSszKmMqKDEtYSkqKDEtYSktNiphKmMqKDEtYSkrNiphKmQqKDEtYSktMyphKmEqZCszKmEqYSplfSx0YW5nZW50U3BsaW5lOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIDYqYSphLTYqYSsoMyphKmEtNCphKzEpKygtNiphKmErNiphKSsoMyphKmEtMiphKX0saW50ZXJwb2xhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPS41KihjLWEpO2Q9LjUqKGQtYik7dmFyIGY9ZSplO3JldHVybigyKmItMipjK2ErZCkqZSpmKygtMypiKzMqYy0yKmEtZCkqZithKmUrYn19O1xyXG5USFJFRS5DdXJ2ZS5jcmVhdGU9ZnVuY3Rpb24oYSxiKXthLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkN1cnZlLnByb3RvdHlwZSk7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTthLnByb3RvdHlwZS5nZXRQb2ludD1iO3JldHVybiBhfTtUSFJFRS5DdXJ2ZVBhdGg9ZnVuY3Rpb24oKXt0aGlzLmN1cnZlcz1bXTt0aGlzLmJlbmRzPVtdO3RoaXMuYXV0b0Nsb3NlPSExfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQ3VydmUucHJvdG90eXBlKTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkN1cnZlUGF0aDtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmFkZD1mdW5jdGlvbihhKXt0aGlzLmN1cnZlcy5wdXNoKGEpfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmNoZWNrQ29ubmVjdGlvbj1mdW5jdGlvbigpe307XHJcblRIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuY2xvc2VQYXRoPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jdXJ2ZXNbMF0uZ2V0UG9pbnQoMCksYj10aGlzLmN1cnZlc1t0aGlzLmN1cnZlcy5sZW5ndGgtMV0uZ2V0UG9pbnQoMSk7YS5lcXVhbHMoYil8fHRoaXMuY3VydmVzLnB1c2gobmV3IFRIUkVFLkxpbmVDdXJ2ZShiLGEpKX07VEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhKXt2YXIgYj1hKnRoaXMuZ2V0TGVuZ3RoKCksYz10aGlzLmdldEN1cnZlTGVuZ3RocygpO2ZvcihhPTA7YTxjLmxlbmd0aDspe2lmKGNbYV0+PWIpcmV0dXJuIGI9Y1thXS1iLGE9dGhpcy5jdXJ2ZXNbYV0sYj0xLWIvYS5nZXRMZW5ndGgoKSxhLmdldFBvaW50QXQoYik7YSsrfXJldHVybiBudWxsfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmdldExlbmd0aD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7cmV0dXJuIGFbYS5sZW5ndGgtMV19O1xyXG5USFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmdldEN1cnZlTGVuZ3Rocz1mdW5jdGlvbigpe2lmKHRoaXMuY2FjaGVMZW5ndGhzJiZ0aGlzLmNhY2hlTGVuZ3Rocy5sZW5ndGg9PXRoaXMuY3VydmVzLmxlbmd0aClyZXR1cm4gdGhpcy5jYWNoZUxlbmd0aHM7dmFyIGE9W10sYj0wLGMsZD10aGlzLmN1cnZlcy5sZW5ndGg7Zm9yKGM9MDtjPGQ7YysrKWIrPXRoaXMuY3VydmVzW2NdLmdldExlbmd0aCgpLGEucHVzaChiKTtyZXR1cm4gdGhpcy5jYWNoZUxlbmd0aHM9YX07XHJcblRIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuZ2V0Qm91bmRpbmdCb3g9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldFBvaW50cygpLGIsYyxkLGUsZixnO2I9Yz1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7ZT1mPU51bWJlci5QT1NJVElWRV9JTkZJTklUWTt2YXIgaCxrLGwscCxxPWFbMF1pbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjM7cD1xP25ldyBUSFJFRS5WZWN0b3IzOm5ldyBUSFJFRS5WZWN0b3IyO2s9MDtmb3IobD1hLmxlbmd0aDtrPGw7aysrKWg9YVtrXSxoLng+Yj9iPWgueDpoLng8ZSYmKGU9aC54KSxoLnk+Yz9jPWgueTpoLnk8ZiYmKGY9aC55KSxxJiYoaC56PmQ/ZD1oLno6aC56PGcmJihnPWgueikpLHAuYWRkKGgpO2E9e21pblg6ZSxtaW5ZOmYsbWF4WDpiLG1heFk6Y307cSYmKGEubWF4Wj1kLGEubWluWj1nKTtyZXR1cm4gYX07XHJcblRIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuY3JlYXRlUG9pbnRzR2VvbWV0cnk9ZnVuY3Rpb24oYSl7YT10aGlzLmdldFBvaW50cyhhLCEwKTtyZXR1cm4gdGhpcy5jcmVhdGVHZW9tZXRyeShhKX07VEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5jcmVhdGVTcGFjZWRQb2ludHNHZW9tZXRyeT1mdW5jdGlvbihhKXthPXRoaXMuZ2V0U3BhY2VkUG9pbnRzKGEsITApO3JldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5KGEpfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmNyZWF0ZUdlb21ldHJ5PWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1uZXcgVEhSRUUuR2VvbWV0cnksYz0wO2M8YS5sZW5ndGg7YysrKWIudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyhhW2NdLngsYVtjXS55LGFbY10uenx8MCkpO3JldHVybiBifTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmFkZFdyYXBQYXRoPWZ1bmN0aW9uKGEpe3RoaXMuYmVuZHMucHVzaChhKX07XHJcblRIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuZ2V0VHJhbnNmb3JtZWRQb2ludHM9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmdldFBvaW50cyhhKSxkLGU7Ynx8KGI9dGhpcy5iZW5kcyk7ZD0wO2ZvcihlPWIubGVuZ3RoO2Q8ZTtkKyspYz10aGlzLmdldFdyYXBQb2ludHMoYyxiW2RdKTtyZXR1cm4gY307VEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5nZXRUcmFuc2Zvcm1lZFNwYWNlZFBvaW50cz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZ2V0U3BhY2VkUG9pbnRzKGEpLGQsZTtifHwoYj10aGlzLmJlbmRzKTtkPTA7Zm9yKGU9Yi5sZW5ndGg7ZDxlO2QrKyljPXRoaXMuZ2V0V3JhcFBvaW50cyhjLGJbZF0pO3JldHVybiBjfTtcclxuVEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5nZXRXcmFwUG9pbnRzPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5nZXRCb3VuZGluZ0JveCgpLGQsZSxmLGcsaCxrO2Q9MDtmb3IoZT1hLmxlbmd0aDtkPGU7ZCsrKWY9YVtkXSxnPWYueCxoPWYueSxrPWcvYy5tYXhYLGs9Yi5nZXRVdG9UbWFwcGluZyhrLGcpLGc9Yi5nZXRQb2ludChrKSxrPWIuZ2V0VGFuZ2VudChrKSxrLnNldCgtay55LGsueCkubXVsdGlwbHlTY2FsYXIoaCksZi54PWcueCtrLngsZi55PWcueStrLnk7cmV0dXJuIGF9O1RIUkVFLkd5cm9zY29wZT1mdW5jdGlvbigpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyl9O1RIUkVFLkd5cm9zY29wZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkd5cm9zY29wZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuR3lyb3Njb3BlO1xyXG5USFJFRS5HeXJvc2NvcGUucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuUXVhdGVybmlvbixjPW5ldyBUSFJFRS5WZWN0b3IzLGQ9bmV3IFRIUkVFLlZlY3RvcjMsZT1uZXcgVEhSRUUuUXVhdGVybmlvbixmPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihnKXt0aGlzLm1hdHJpeEF1dG9VcGRhdGUmJnRoaXMudXBkYXRlTWF0cml4KCk7aWYodGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlfHxnKXRoaXMucGFyZW50Pyh0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXModGhpcy5wYXJlbnQubWF0cml4V29ybGQsdGhpcy5tYXRyaXgpLHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKGQsZSxmKSx0aGlzLm1hdHJpeC5kZWNvbXBvc2UoYSxiLGMpLHRoaXMubWF0cml4V29ybGQuY29tcG9zZShkLGIsZikpOnRoaXMubWF0cml4V29ybGQuY29weSh0aGlzLm1hdHJpeCksdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPVxyXG4hMSxnPSEwO2Zvcih2YXIgaD0wLGs9dGhpcy5jaGlsZHJlbi5sZW5ndGg7aDxrO2grKyl0aGlzLmNoaWxkcmVuW2hdLnVwZGF0ZU1hdHJpeFdvcmxkKGcpfX0oKTtUSFJFRS5QYXRoPWZ1bmN0aW9uKGEpe1RIUkVFLkN1cnZlUGF0aC5jYWxsKHRoaXMpO3RoaXMuYWN0aW9ucz1bXTthJiZ0aGlzLmZyb21Qb2ludHMoYSl9O1RIUkVFLlBhdGgucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZSk7VEhSRUUuUGF0aC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuUGF0aDtUSFJFRS5QYXRoQWN0aW9ucz17TU9WRV9UTzpcIm1vdmVUb1wiLExJTkVfVE86XCJsaW5lVG9cIixRVUFEUkFUSUNfQ1VSVkVfVE86XCJxdWFkcmF0aWNDdXJ2ZVRvXCIsQkVaSUVSX0NVUlZFX1RPOlwiYmV6aWVyQ3VydmVUb1wiLENTUExJTkVfVEhSVTpcInNwbGluZVRocnVcIixBUkM6XCJhcmNcIixFTExJUFNFOlwiZWxsaXBzZVwifTtcclxuVEhSRUUuUGF0aC5wcm90b3R5cGUuZnJvbVBvaW50cz1mdW5jdGlvbihhKXt0aGlzLm1vdmVUbyhhWzBdLngsYVswXS55KTtmb3IodmFyIGI9MSxjPWEubGVuZ3RoO2I8YztiKyspdGhpcy5saW5lVG8oYVtiXS54LGFbYl0ueSl9O1RIUkVFLlBhdGgucHJvdG90eXBlLm1vdmVUbz1mdW5jdGlvbihhLGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7dGhpcy5hY3Rpb25zLnB1c2goe2FjdGlvbjpUSFJFRS5QYXRoQWN0aW9ucy5NT1ZFX1RPLGFyZ3M6Y30pfTtcclxuVEhSRUUuUGF0aC5wcm90b3R5cGUubGluZVRvPWZ1bmN0aW9uKGEsYil7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxkPXRoaXMuYWN0aW9uc1t0aGlzLmFjdGlvbnMubGVuZ3RoLTFdLmFyZ3MsZD1uZXcgVEhSRUUuTGluZUN1cnZlKG5ldyBUSFJFRS5WZWN0b3IyKGRbZC5sZW5ndGgtMl0sZFtkLmxlbmd0aC0xXSksbmV3IFRIUkVFLlZlY3RvcjIoYSxiKSk7dGhpcy5jdXJ2ZXMucHVzaChkKTt0aGlzLmFjdGlvbnMucHVzaCh7YWN0aW9uOlRIUkVFLlBhdGhBY3Rpb25zLkxJTkVfVE8sYXJnczpjfSl9O1xyXG5USFJFRS5QYXRoLnByb3RvdHlwZS5xdWFkcmF0aWNDdXJ2ZVRvPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksZj10aGlzLmFjdGlvbnNbdGhpcy5hY3Rpb25zLmxlbmd0aC0xXS5hcmdzLGY9bmV3IFRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlKG5ldyBUSFJFRS5WZWN0b3IyKGZbZi5sZW5ndGgtMl0sZltmLmxlbmd0aC0xXSksbmV3IFRIUkVFLlZlY3RvcjIoYSxiKSxuZXcgVEhSRUUuVmVjdG9yMihjLGQpKTt0aGlzLmN1cnZlcy5wdXNoKGYpO3RoaXMuYWN0aW9ucy5wdXNoKHthY3Rpb246VEhSRUUuUGF0aEFjdGlvbnMuUVVBRFJBVElDX0NVUlZFX1RPLGFyZ3M6ZX0pfTtcclxuVEhSRUUuUGF0aC5wcm90b3R5cGUuYmV6aWVyQ3VydmVUbz1mdW5jdGlvbihhLGIsYyxkLGUsZil7dmFyIGc9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxoPXRoaXMuYWN0aW9uc1t0aGlzLmFjdGlvbnMubGVuZ3RoLTFdLmFyZ3MsaD1uZXcgVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZShuZXcgVEhSRUUuVmVjdG9yMihoW2gubGVuZ3RoLTJdLGhbaC5sZW5ndGgtMV0pLG5ldyBUSFJFRS5WZWN0b3IyKGEsYiksbmV3IFRIUkVFLlZlY3RvcjIoYyxkKSxuZXcgVEhSRUUuVmVjdG9yMihlLGYpKTt0aGlzLmN1cnZlcy5wdXNoKGgpO3RoaXMuYWN0aW9ucy5wdXNoKHthY3Rpb246VEhSRUUuUGF0aEFjdGlvbnMuQkVaSUVSX0NVUlZFX1RPLGFyZ3M6Z30pfTtcclxuVEhSRUUuUGF0aC5wcm90b3R5cGUuc3BsaW5lVGhydT1mdW5jdGlvbihhKXt2YXIgYj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLGM9dGhpcy5hY3Rpb25zW3RoaXMuYWN0aW9ucy5sZW5ndGgtMV0uYXJncyxjPVtuZXcgVEhSRUUuVmVjdG9yMihjW2MubGVuZ3RoLTJdLGNbYy5sZW5ndGgtMV0pXTtBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShjLGEpO2M9bmV3IFRIUkVFLlNwbGluZUN1cnZlKGMpO3RoaXMuY3VydmVzLnB1c2goYyk7dGhpcy5hY3Rpb25zLnB1c2goe2FjdGlvbjpUSFJFRS5QYXRoQWN0aW9ucy5DU1BMSU5FX1RIUlUsYXJnczpifSl9O1RIUkVFLlBhdGgucHJvdG90eXBlLmFyYz1mdW5jdGlvbihhLGIsYyxkLGUsZil7dmFyIGc9dGhpcy5hY3Rpb25zW3RoaXMuYWN0aW9ucy5sZW5ndGgtMV0uYXJnczt0aGlzLmFic2FyYyhhK2dbZy5sZW5ndGgtMl0sYitnW2cubGVuZ3RoLTFdLGMsZCxlLGYpfTtcclxuVEhSRUUuUGF0aC5wcm90b3R5cGUuYWJzYXJjPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmFic2VsbGlwc2UoYSxiLGMsYyxkLGUsZil9O1RIUkVFLlBhdGgucHJvdG90eXBlLmVsbGlwc2U9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7dmFyIGg9dGhpcy5hY3Rpb25zW3RoaXMuYWN0aW9ucy5sZW5ndGgtMV0uYXJnczt0aGlzLmFic2VsbGlwc2UoYStoW2gubGVuZ3RoLTJdLGIraFtoLmxlbmd0aC0xXSxjLGQsZSxmLGcpfTtUSFJFRS5QYXRoLnByb3RvdHlwZS5hYnNlbGxpcHNlPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksaz1uZXcgVEhSRUUuRWxsaXBzZUN1cnZlKGEsYixjLGQsZSxmLGcpO3RoaXMuY3VydmVzLnB1c2goayk7az1rLmdldFBvaW50KDEpO2gucHVzaChrLngpO2gucHVzaChrLnkpO3RoaXMuYWN0aW9ucy5wdXNoKHthY3Rpb246VEhSRUUuUGF0aEFjdGlvbnMuRUxMSVBTRSxhcmdzOmh9KX07XHJcblRIUkVFLlBhdGgucHJvdG90eXBlLmdldFNwYWNlZFBvaW50cz1mdW5jdGlvbihhLGIpe2F8fChhPTQwKTtmb3IodmFyIGM9W10sZD0wO2Q8YTtkKyspYy5wdXNoKHRoaXMuZ2V0UG9pbnQoZC9hKSk7cmV0dXJuIGN9O1xyXG5USFJFRS5QYXRoLnByb3RvdHlwZS5nZXRQb2ludHM9ZnVuY3Rpb24oYSxiKXtpZih0aGlzLnVzZVNwYWNlZFBvaW50cylyZXR1cm4gY29uc29sZS5sb2coXCJ0YXRhXCIpLHRoaXMuZ2V0U3BhY2VkUG9pbnRzKGEsYik7YT1hfHwxMjt2YXIgYz1bXSxkLGUsZixnLGgsayxsLHAscSxuLHQscixzO2Q9MDtmb3IoZT10aGlzLmFjdGlvbnMubGVuZ3RoO2Q8ZTtkKyspc3dpdGNoKGY9dGhpcy5hY3Rpb25zW2RdLGc9Zi5hY3Rpb24sZj1mLmFyZ3MsZyl7Y2FzZSBUSFJFRS5QYXRoQWN0aW9ucy5NT1ZFX1RPOmMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihmWzBdLGZbMV0pKTticmVhaztjYXNlIFRIUkVFLlBhdGhBY3Rpb25zLkxJTkVfVE86Yy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKGZbMF0sZlsxXSkpO2JyZWFrO2Nhc2UgVEhSRUUuUGF0aEFjdGlvbnMuUVVBRFJBVElDX0NVUlZFX1RPOmg9ZlsyXTtrPWZbM107cT1mWzBdO249ZlsxXTswPGMubGVuZ3RoPyhnPWNbYy5sZW5ndGgtMV0sdD1nLngsXHJcbnI9Zy55KTooZz10aGlzLmFjdGlvbnNbZC0xXS5hcmdzLHQ9Z1tnLmxlbmd0aC0yXSxyPWdbZy5sZW5ndGgtMV0pO2ZvcihmPTE7Zjw9YTtmKyspcz1mL2EsZz1USFJFRS5TaGFwZS5VdGlscy5iMihzLHQscSxoKSxzPVRIUkVFLlNoYXBlLlV0aWxzLmIyKHMscixuLGspLGMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihnLHMpKTticmVhaztjYXNlIFRIUkVFLlBhdGhBY3Rpb25zLkJFWklFUl9DVVJWRV9UTzpoPWZbNF07az1mWzVdO3E9ZlswXTtuPWZbMV07bD1mWzJdO3A9ZlszXTswPGMubGVuZ3RoPyhnPWNbYy5sZW5ndGgtMV0sdD1nLngscj1nLnkpOihnPXRoaXMuYWN0aW9uc1tkLTFdLmFyZ3MsdD1nW2cubGVuZ3RoLTJdLHI9Z1tnLmxlbmd0aC0xXSk7Zm9yKGY9MTtmPD1hO2YrKylzPWYvYSxnPVRIUkVFLlNoYXBlLlV0aWxzLmIzKHMsdCxxLGwsaCkscz1USFJFRS5TaGFwZS5VdGlscy5iMyhzLHIsbixwLGspLGMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihnLHMpKTticmVhaztjYXNlIFRIUkVFLlBhdGhBY3Rpb25zLkNTUExJTkVfVEhSVTpnPVxyXG50aGlzLmFjdGlvbnNbZC0xXS5hcmdzO3M9W25ldyBUSFJFRS5WZWN0b3IyKGdbZy5sZW5ndGgtMl0sZ1tnLmxlbmd0aC0xXSldO2c9YSpmWzBdLmxlbmd0aDtzPXMuY29uY2F0KGZbMF0pO3M9bmV3IFRIUkVFLlNwbGluZUN1cnZlKHMpO2ZvcihmPTE7Zjw9ZztmKyspYy5wdXNoKHMuZ2V0UG9pbnRBdChmL2cpKTticmVhaztjYXNlIFRIUkVFLlBhdGhBY3Rpb25zLkFSQzpoPWZbMF07az1mWzFdO249ZlsyXTtsPWZbM107Zz1mWzRdO3E9ISFmWzVdO3Q9Zy1sO3I9MiphO2ZvcihmPTE7Zjw9cjtmKyspcz1mL3IscXx8KHM9MS1zKSxzPWwrcyp0LGc9aCtuKk1hdGguY29zKHMpLHM9aytuKk1hdGguc2luKHMpLGMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihnLHMpKTticmVhaztjYXNlIFRIUkVFLlBhdGhBY3Rpb25zLkVMTElQU0U6Zm9yKGg9ZlswXSxrPWZbMV0sbj1mWzJdLHA9ZlszXSxsPWZbNF0sZz1mWzVdLHE9ISFmWzZdLHQ9Zy1sLHI9MiphLGY9MTtmPD1yO2YrKylzPWYvcixxfHxcclxuKHM9MS1zKSxzPWwrcyp0LGc9aCtuKk1hdGguY29zKHMpLHM9aytwKk1hdGguc2luKHMpLGMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihnLHMpKX1kPWNbYy5sZW5ndGgtMV07MUUtMTA+TWF0aC5hYnMoZC54LWNbMF0ueCkmJjFFLTEwPk1hdGguYWJzKGQueS1jWzBdLnkpJiZjLnNwbGljZShjLmxlbmd0aC0xLDEpO2ImJmMucHVzaChjWzBdKTtyZXR1cm4gY307XHJcblRIUkVFLlBhdGgucHJvdG90eXBlLnRvU2hhcGVzPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtmb3IodmFyIGI9W10sYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9YVtjXSxmPW5ldyBUSFJFRS5TaGFwZTtmLmFjdGlvbnM9ZS5hY3Rpb25zO2YuY3VydmVzPWUuY3VydmVzO2IucHVzaChmKX1yZXR1cm4gYn1mdW5jdGlvbiBkKGEsYil7Zm9yKHZhciBjPWIubGVuZ3RoLGQ9ITEsZT1jLTEsZj0wO2Y8YztlPWYrKyl7dmFyIGc9YltlXSxoPWJbZl0saz1oLngtZy54LG49aC55LWcueTtpZigxRS0xMDxNYXRoLmFicyhuKSl7aWYoMD5uJiYoZz1iW2ZdLGs9LWssaD1iW2VdLG49LW4pLCEoYS55PGcueXx8YS55PmgueSkpaWYoYS55PT1nLnkpe2lmKGEueD09Zy54KXJldHVybiEwfWVsc2V7ZT1uKihhLngtZy54KS1rKihhLnktZy55KTtpZigwPT1lKXJldHVybiEwOzA+ZXx8KGQ9IWQpfX1lbHNlIGlmKGEueT09Zy55JiYoaC54PD1hLngmJmEueDw9Zy54fHxnLng8PWEueCYmYS54PD1cclxuaC54KSlyZXR1cm4hMH1yZXR1cm4gZH12YXIgZT1mdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmPVtdLGc9bmV3IFRIUkVFLlBhdGg7Yj0wO2ZvcihjPWEubGVuZ3RoO2I8YztiKyspZD1hW2JdLGU9ZC5hcmdzLGQ9ZC5hY3Rpb24sZD09VEhSRUUuUGF0aEFjdGlvbnMuTU9WRV9UTyYmMCE9Zy5hY3Rpb25zLmxlbmd0aCYmKGYucHVzaChnKSxnPW5ldyBUSFJFRS5QYXRoKSxnW2RdLmFwcGx5KGcsZSk7MCE9Zy5hY3Rpb25zLmxlbmd0aCYmZi5wdXNoKGcpO3JldHVybiBmfSh0aGlzLmFjdGlvbnMpO2lmKDA9PWUubGVuZ3RoKXJldHVybltdO2lmKCEwPT09YilyZXR1cm4gYyhlKTt2YXIgZixnLGgsaz1bXTtpZigxPT1lLmxlbmd0aClyZXR1cm4gZz1lWzBdLGg9bmV3IFRIUkVFLlNoYXBlLGguYWN0aW9ucz1nLmFjdGlvbnMsaC5jdXJ2ZXM9Zy5jdXJ2ZXMsay5wdXNoKGgpLGs7dmFyIGw9IVRIUkVFLlNoYXBlLlV0aWxzLmlzQ2xvY2tXaXNlKGVbMF0uZ2V0UG9pbnRzKCkpLGw9YT8hbDpsO1xyXG5oPVtdO3ZhciBwPVtdLHE9W10sbj0wLHQ7cFtuXT12b2lkIDA7cVtuXT1bXTt2YXIgcixzO3I9MDtmb3Iocz1lLmxlbmd0aDtyPHM7cisrKWc9ZVtyXSx0PWcuZ2V0UG9pbnRzKCksZj1USFJFRS5TaGFwZS5VdGlscy5pc0Nsb2NrV2lzZSh0KSwoZj1hPyFmOmYpPyghbCYmcFtuXSYmbisrLHBbbl09e3M6bmV3IFRIUkVFLlNoYXBlLHA6dH0scFtuXS5zLmFjdGlvbnM9Zy5hY3Rpb25zLHBbbl0ucy5jdXJ2ZXM9Zy5jdXJ2ZXMsbCYmbisrLHFbbl09W10pOnFbbl0ucHVzaCh7aDpnLHA6dFswXX0pO2lmKCFwWzBdKXJldHVybiBjKGUpO2lmKDE8cC5sZW5ndGgpe3I9ITE7cz1bXTtnPTA7Zm9yKGU9cC5sZW5ndGg7ZzxlO2crKyloW2ddPVtdO2c9MDtmb3IoZT1wLmxlbmd0aDtnPGU7ZysrKWZvcihmPXFbZ10sbD0wO2w8Zi5sZW5ndGg7bCsrKXtuPWZbbF07dD0hMDtmb3IodmFyIHU9MDt1PHAubGVuZ3RoO3UrKylkKG4ucCxwW3VdLnApJiYoZyE9dSYmcy5wdXNoKHtmcm9tczpnLHRvczp1LFxyXG5ob2xlOmx9KSx0Pyh0PSExLGhbdV0ucHVzaChuKSk6cj0hMCk7dCYmaFtnXS5wdXNoKG4pfTA8cy5sZW5ndGgmJihyfHwocT1oKSl9cj0wO2ZvcihzPXAubGVuZ3RoO3I8cztyKyspZm9yKGg9cFtyXS5zLGsucHVzaChoKSxnPXFbcl0sZT0wLGY9Zy5sZW5ndGg7ZTxmO2UrKyloLmhvbGVzLnB1c2goZ1tlXS5oKTtyZXR1cm4ga307VEhSRUUuU2hhcGU9ZnVuY3Rpb24oKXtUSFJFRS5QYXRoLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt0aGlzLmhvbGVzPVtdfTtUSFJFRS5TaGFwZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5QYXRoLnByb3RvdHlwZSk7VEhSRUUuU2hhcGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNoYXBlO1RIUkVFLlNoYXBlLnByb3RvdHlwZS5leHRydWRlPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgVEhSRUUuRXh0cnVkZUdlb21ldHJ5KHRoaXMsYSl9O1xyXG5USFJFRS5TaGFwZS5wcm90b3R5cGUubWFrZUdlb21ldHJ5PWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgVEhSRUUuU2hhcGVHZW9tZXRyeSh0aGlzLGEpfTtUSFJFRS5TaGFwZS5wcm90b3R5cGUuZ2V0UG9pbnRzSG9sZXM9ZnVuY3Rpb24oYSl7dmFyIGIsYz10aGlzLmhvbGVzLmxlbmd0aCxkPVtdO2ZvcihiPTA7YjxjO2IrKylkW2JdPXRoaXMuaG9sZXNbYl0uZ2V0VHJhbnNmb3JtZWRQb2ludHMoYSx0aGlzLmJlbmRzKTtyZXR1cm4gZH07VEhSRUUuU2hhcGUucHJvdG90eXBlLmdldFNwYWNlZFBvaW50c0hvbGVzPWZ1bmN0aW9uKGEpe3ZhciBiLGM9dGhpcy5ob2xlcy5sZW5ndGgsZD1bXTtmb3IoYj0wO2I8YztiKyspZFtiXT10aGlzLmhvbGVzW2JdLmdldFRyYW5zZm9ybWVkU3BhY2VkUG9pbnRzKGEsdGhpcy5iZW5kcyk7cmV0dXJuIGR9O1xyXG5USFJFRS5TaGFwZS5wcm90b3R5cGUuZXh0cmFjdEFsbFBvaW50cz1mdW5jdGlvbihhKXtyZXR1cm57c2hhcGU6dGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50cyhhKSxob2xlczp0aGlzLmdldFBvaW50c0hvbGVzKGEpfX07VEhSRUUuU2hhcGUucHJvdG90eXBlLmV4dHJhY3RQb2ludHM9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMudXNlU3BhY2VkUG9pbnRzP3RoaXMuZXh0cmFjdEFsbFNwYWNlZFBvaW50cyhhKTp0aGlzLmV4dHJhY3RBbGxQb2ludHMoYSl9O1RIUkVFLlNoYXBlLnByb3RvdHlwZS5leHRyYWN0QWxsU3BhY2VkUG9pbnRzPWZ1bmN0aW9uKGEpe3JldHVybntzaGFwZTp0aGlzLmdldFRyYW5zZm9ybWVkU3BhY2VkUG9pbnRzKGEpLGhvbGVzOnRoaXMuZ2V0U3BhY2VkUG9pbnRzSG9sZXMoYSl9fTtcclxuVEhSRUUuU2hhcGUuVXRpbHM9e3RyaWFuZ3VsYXRlU2hhcGU6ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYixjKXtyZXR1cm4gYS54IT1iLng/YS54PGIueD9hLng8PWMueCYmYy54PD1iLng6Yi54PD1jLngmJmMueDw9YS54OmEueTxiLnk/YS55PD1jLnkmJmMueTw9Yi55OmIueTw9Yy55JiZjLnk8PWEueX1mdW5jdGlvbiBkKGEsYixkLGUsZil7dmFyIGc9Yi54LWEueCxoPWIueS1hLnksaz1lLngtZC54LGw9ZS55LWQueSxwPWEueC1kLngscT1hLnktZC55LEU9aCprLWcqbCxHPWgqcC1nKnE7aWYoMUUtMTA8TWF0aC5hYnMoRSkpe2lmKDA8RSl7aWYoMD5HfHxHPkUpcmV0dXJuW107az1sKnAtaypxO2lmKDA+a3x8az5FKXJldHVybltdfWVsc2V7aWYoMDxHfHxHPEUpcmV0dXJuW107az1sKnAtaypxO2lmKDA8a3x8azxFKXJldHVybltdfWlmKDA9PWspcmV0dXJuIWZ8fDAhPUcmJkchPUU/W2FdOltdO2lmKGs9PUUpcmV0dXJuIWZ8fDAhPUcmJkchPUU/W2JdOltdO2lmKDA9PUcpcmV0dXJuW2RdO1xyXG5pZihHPT1FKXJldHVybltlXTtmPWsvRTtyZXR1cm5be3g6YS54K2YqZyx5OmEueStmKmh9XX1pZigwIT1HfHxsKnAhPWsqcSlyZXR1cm5bXTtoPTA9PWcmJjA9PWg7az0wPT1rJiYwPT1sO2lmKGgmJmspcmV0dXJuIGEueCE9ZC54fHxhLnkhPWQueT9bXTpbYV07aWYoaClyZXR1cm4gYyhkLGUsYSk/W2FdOltdO2lmKGspcmV0dXJuIGMoYSxiLGQpP1tkXTpbXTswIT1nPyhhLng8Yi54PyhnPWEsaz1hLngsaD1iLGE9Yi54KTooZz1iLGs9Yi54LGg9YSxhPWEueCksZC54PGUueD8oYj1kLEU9ZC54LGw9ZSxkPWUueCk6KGI9ZSxFPWUueCxsPWQsZD1kLngpKTooYS55PGIueT8oZz1hLGs9YS55LGg9YixhPWIueSk6KGc9YixrPWIueSxoPWEsYT1hLnkpLGQueTxlLnk/KGI9ZCxFPWQueSxsPWUsZD1lLnkpOihiPWUsRT1lLnksbD1kLGQ9ZC55KSk7cmV0dXJuIGs8PUU/YTxFP1tdOmE9PUU/Zj9bXTpbYl06YTw9ZD9bYixoXTpbYixsXTprPmQ/W106az09ZD9mP1tdOltnXTphPD1kP1tnLGhdOlxyXG5bZyxsXX1mdW5jdGlvbiBlKGEsYixjLGQpe3ZhciBlPWIueC1hLngsZj1iLnktYS55O2I9Yy54LWEueDtjPWMueS1hLnk7dmFyIGc9ZC54LWEueDtkPWQueS1hLnk7YT1lKmMtZipiO2U9ZSpkLWYqZztyZXR1cm4gMUUtMTA8TWF0aC5hYnMoYSk/KGI9ZypjLWQqYiwwPGE/MDw9ZSYmMDw9YjowPD1lfHwwPD1iKTowPGV9dmFyIGYsZyxoLGssbCxwPXt9O2g9YS5jb25jYXQoKTtmPTA7Zm9yKGc9Yi5sZW5ndGg7ZjxnO2YrKylBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShoLGJbZl0pO2Y9MDtmb3IoZz1oLmxlbmd0aDtmPGc7ZisrKWw9aFtmXS54K1wiOlwiK2hbZl0ueSx2b2lkIDAhPT1wW2xdJiZUSFJFRS53YXJuKFwiVEhSRUUuU2hhcGU6IER1cGxpY2F0ZSBwb2ludFwiLGwpLHBbbF09ZjtmPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhLGIpe3ZhciBkPWgubGVuZ3RoLTEsZj1hLTE7MD5mJiYoZj1kKTt2YXIgZz1hKzE7Zz5kJiYoZz0wKTtkPWUoaFthXSxoW2ZdLGhbZ10sa1tiXSk7XHJcbmlmKCFkKXJldHVybiExO2Q9ay5sZW5ndGgtMTtmPWItMTswPmYmJihmPWQpO2c9YisxO2c+ZCYmKGc9MCk7cmV0dXJuKGQ9ZShrW2JdLGtbZl0sa1tnXSxoW2FdKSk/ITA6ITF9ZnVuY3Rpb24gZihhLGIpe3ZhciBjLGU7Zm9yKGM9MDtjPGgubGVuZ3RoO2MrKylpZihlPWMrMSxlJT1oLmxlbmd0aCxlPWQoYSxiLGhbY10saFtlXSwhMCksMDxlLmxlbmd0aClyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBnKGEsYyl7dmFyIGUsZixoLGs7Zm9yKGU9MDtlPGwubGVuZ3RoO2UrKylmb3IoZj1iW2xbZV1dLGg9MDtoPGYubGVuZ3RoO2grKylpZihrPWgrMSxrJT1mLmxlbmd0aCxrPWQoYSxjLGZbaF0sZltrXSwhMCksMDxrLmxlbmd0aClyZXR1cm4hMDtyZXR1cm4hMX12YXIgaD1hLmNvbmNhdCgpLGssbD1bXSxwLHEsQSxFLEcsRj1bXSx6LEksVSxNPTA7Zm9yKHA9Yi5sZW5ndGg7TTxwO00rKylsLnB1c2goTSk7ej0wO2Zvcih2YXIgSD0yKmwubGVuZ3RoOzA8bC5sZW5ndGg7KXtILS07aWYoMD5cclxuSCl7Y29uc29sZS5sb2coXCJJbmZpbml0ZSBMb29wISBIb2xlcyBsZWZ0OlwiK2wubGVuZ3RoK1wiLCBQcm9iYWJseSBIb2xlIG91dHNpZGUgU2hhcGUhXCIpO2JyZWFrfWZvcihxPXo7cTxoLmxlbmd0aDtxKyspe0E9aFtxXTtwPS0xO2ZvcihNPTA7TTxsLmxlbmd0aDtNKyspaWYoRT1sW01dLEc9QS54K1wiOlwiK0EueStcIjpcIitFLHZvaWQgMD09PUZbR10pe2s9YltFXTtmb3IoST0wO0k8ay5sZW5ndGg7SSsrKWlmKEU9a1tJXSxjKHEsSSkmJiFmKEEsRSkmJiFnKEEsRSkpe3A9STtsLnNwbGljZShNLDEpO3o9aC5zbGljZSgwLHErMSk7RT1oLnNsaWNlKHEpO0k9ay5zbGljZShwKTtVPWsuc2xpY2UoMCxwKzEpO2g9ei5jb25jYXQoSSkuY29uY2F0KFUpLmNvbmNhdChFKTt6PXE7YnJlYWt9aWYoMDw9cClicmVhaztGW0ddPSEwfWlmKDA8PXApYnJlYWt9fXJldHVybiBofShhLGIpO3ZhciBxPVRIUkVFLkZvbnRVdGlscy5Ucmlhbmd1bGF0ZShmLCExKTtmPTA7Zm9yKGc9cS5sZW5ndGg7ZjxnO2YrKylmb3Ioaz1cclxucVtmXSxoPTA7Mz5oO2grKylsPWtbaF0ueCtcIjpcIitrW2hdLnksbD1wW2xdLHZvaWQgMCE9PWwmJihrW2hdPWwpO3JldHVybiBxLmNvbmNhdCgpfSxpc0Nsb2NrV2lzZTpmdW5jdGlvbihhKXtyZXR1cm4gMD5USFJFRS5Gb250VXRpbHMuVHJpYW5ndWxhdGUuYXJlYShhKX0sYjJwMDpmdW5jdGlvbihhLGIpe3ZhciBjPTEtYTtyZXR1cm4gYypjKmJ9LGIycDE6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMiooMS1hKSphKmJ9LGIycDI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYSphKmJ9LGIyOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmIycDAoYSxiKSt0aGlzLmIycDEoYSxjKSt0aGlzLmIycDIoYSxkKX0sYjNwMDpmdW5jdGlvbihhLGIpe3ZhciBjPTEtYTtyZXR1cm4gYypjKmMqYn0sYjNwMTpmdW5jdGlvbihhLGIpe3ZhciBjPTEtYTtyZXR1cm4gMypjKmMqYSpifSxiM3AyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDMqKDEtYSkqYSphKmJ9LGIzcDM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYSpcclxuYSphKmJ9LGIzOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIHRoaXMuYjNwMChhLGIpK3RoaXMuYjNwMShhLGMpK3RoaXMuYjNwMihhLGQpK3RoaXMuYjNwMyhhLGUpfX07VEhSRUUuTGluZUN1cnZlPWZ1bmN0aW9uKGEsYil7dGhpcy52MT1hO3RoaXMudjI9Yn07VEhSRUUuTGluZUN1cnZlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkN1cnZlLnByb3RvdHlwZSk7VEhSRUUuTGluZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5MaW5lQ3VydmU7VEhSRUUuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLnYyLmNsb25lKCkuc3ViKHRoaXMudjEpO2IubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMudjEpO3JldHVybiBifTtUSFJFRS5MaW5lQ3VydmUucHJvdG90eXBlLmdldFBvaW50QXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZ2V0UG9pbnQoYSl9O1xyXG5USFJFRS5MaW5lQ3VydmUucHJvdG90eXBlLmdldFRhbmdlbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMudjIuY2xvbmUoKS5zdWIodGhpcy52MSkubm9ybWFsaXplKCl9O1RIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlPWZ1bmN0aW9uKGEsYixjKXt0aGlzLnYwPWE7dGhpcy52MT1iO3RoaXMudjI9Y307VEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQ3VydmUucHJvdG90eXBlKTtUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmU7XHJcblRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgVEhSRUUuVmVjdG9yMjtiLng9VEhSRUUuU2hhcGUuVXRpbHMuYjIoYSx0aGlzLnYwLngsdGhpcy52MS54LHRoaXMudjIueCk7Yi55PVRIUkVFLlNoYXBlLlV0aWxzLmIyKGEsdGhpcy52MC55LHRoaXMudjEueSx0aGlzLnYyLnkpO3JldHVybiBifTtUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZ2V0VGFuZ2VudD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgVEhSRUUuVmVjdG9yMjtiLng9VEhSRUUuQ3VydmUuVXRpbHMudGFuZ2VudFF1YWRyYXRpY0JlemllcihhLHRoaXMudjAueCx0aGlzLnYxLngsdGhpcy52Mi54KTtiLnk9VEhSRUUuQ3VydmUuVXRpbHMudGFuZ2VudFF1YWRyYXRpY0JlemllcihhLHRoaXMudjAueSx0aGlzLnYxLnksdGhpcy52Mi55KTtyZXR1cm4gYi5ub3JtYWxpemUoKX07XHJcblRIUkVFLkN1YmljQmV6aWVyQ3VydmU9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy52MD1hO3RoaXMudjE9Yjt0aGlzLnYyPWM7dGhpcy52Mz1kfTtUSFJFRS5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkN1cnZlLnByb3RvdHlwZSk7VEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZTtUSFJFRS5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhKXt2YXIgYjtiPVRIUkVFLlNoYXBlLlV0aWxzLmIzKGEsdGhpcy52MC54LHRoaXMudjEueCx0aGlzLnYyLngsdGhpcy52My54KTthPVRIUkVFLlNoYXBlLlV0aWxzLmIzKGEsdGhpcy52MC55LHRoaXMudjEueSx0aGlzLnYyLnksdGhpcy52My55KTtyZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIoYixhKX07XHJcblRIUkVFLkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmdldFRhbmdlbnQ9ZnVuY3Rpb24oYSl7dmFyIGI7Yj1USFJFRS5DdXJ2ZS5VdGlscy50YW5nZW50Q3ViaWNCZXppZXIoYSx0aGlzLnYwLngsdGhpcy52MS54LHRoaXMudjIueCx0aGlzLnYzLngpO2E9VEhSRUUuQ3VydmUuVXRpbHMudGFuZ2VudEN1YmljQmV6aWVyKGEsdGhpcy52MC55LHRoaXMudjEueSx0aGlzLnYyLnksdGhpcy52My55KTtiPW5ldyBUSFJFRS5WZWN0b3IyKGIsYSk7Yi5ub3JtYWxpemUoKTtyZXR1cm4gYn07VEhSRUUuU3BsaW5lQ3VydmU9ZnVuY3Rpb24oYSl7dGhpcy5wb2ludHM9dm9pZCAwPT1hP1tdOmF9O1RIUkVFLlNwbGluZUN1cnZlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkN1cnZlLnByb3RvdHlwZSk7VEhSRUUuU3BsaW5lQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNwbGluZUN1cnZlO1xyXG5USFJFRS5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5wb2ludHM7YSo9Yi5sZW5ndGgtMTt2YXIgYz1NYXRoLmZsb29yKGEpO2EtPWM7dmFyIGQ9YlswPT1jP2M6Yy0xXSxlPWJbY10sZj1iW2M+Yi5sZW5ndGgtMj9iLmxlbmd0aC0xOmMrMV0sYj1iW2M+Yi5sZW5ndGgtMz9iLmxlbmd0aC0xOmMrMl0sYz1uZXcgVEhSRUUuVmVjdG9yMjtjLng9VEhSRUUuQ3VydmUuVXRpbHMuaW50ZXJwb2xhdGUoZC54LGUueCxmLngsYi54LGEpO2MueT1USFJFRS5DdXJ2ZS5VdGlscy5pbnRlcnBvbGF0ZShkLnksZS55LGYueSxiLnksYSk7cmV0dXJuIGN9O1RIUkVFLkVsbGlwc2VDdXJ2ZT1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXt0aGlzLmFYPWE7dGhpcy5hWT1iO3RoaXMueFJhZGl1cz1jO3RoaXMueVJhZGl1cz1kO3RoaXMuYVN0YXJ0QW5nbGU9ZTt0aGlzLmFFbmRBbmdsZT1mO3RoaXMuYUNsb2Nrd2lzZT1nfTtcclxuVEhSRUUuRWxsaXBzZUN1cnZlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkN1cnZlLnByb3RvdHlwZSk7VEhSRUUuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5FbGxpcHNlQ3VydmU7VEhSRUUuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmFFbmRBbmdsZS10aGlzLmFTdGFydEFuZ2xlOzA+YiYmKGIrPTIqTWF0aC5QSSk7Yj4yKk1hdGguUEkmJihiLT0yKk1hdGguUEkpO2E9ITA9PT10aGlzLmFDbG9ja3dpc2U/dGhpcy5hRW5kQW5nbGUrKDEtYSkqKDIqTWF0aC5QSS1iKTp0aGlzLmFTdGFydEFuZ2xlK2EqYjtiPW5ldyBUSFJFRS5WZWN0b3IyO2IueD10aGlzLmFYK3RoaXMueFJhZGl1cypNYXRoLmNvcyhhKTtiLnk9dGhpcy5hWSt0aGlzLnlSYWRpdXMqTWF0aC5zaW4oYSk7cmV0dXJuIGJ9O1xyXG5USFJFRS5BcmNDdXJ2ZT1mdW5jdGlvbihhLGIsYyxkLGUsZil7VEhSRUUuRWxsaXBzZUN1cnZlLmNhbGwodGhpcyxhLGIsYyxjLGQsZSxmKX07VEhSRUUuQXJjQ3VydmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuRWxsaXBzZUN1cnZlLnByb3RvdHlwZSk7VEhSRUUuQXJjQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkFyY0N1cnZlO1RIUkVFLkxpbmVDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEsYil7dGhpcy52MT1hO3RoaXMudjI9Yn0sZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFRIUkVFLlZlY3RvcjM7Yi5zdWJWZWN0b3JzKHRoaXMudjIsdGhpcy52MSk7Yi5tdWx0aXBseVNjYWxhcihhKTtiLmFkZCh0aGlzLnYxKTtyZXR1cm4gYn0pO1xyXG5USFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEsYixjKXt0aGlzLnYwPWE7dGhpcy52MT1iO3RoaXMudjI9Y30sZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFRIUkVFLlZlY3RvcjM7Yi54PVRIUkVFLlNoYXBlLlV0aWxzLmIyKGEsdGhpcy52MC54LHRoaXMudjEueCx0aGlzLnYyLngpO2IueT1USFJFRS5TaGFwZS5VdGlscy5iMihhLHRoaXMudjAueSx0aGlzLnYxLnksdGhpcy52Mi55KTtiLno9VEhSRUUuU2hhcGUuVXRpbHMuYjIoYSx0aGlzLnYwLnosdGhpcy52MS56LHRoaXMudjIueik7cmV0dXJuIGJ9KTtcclxuVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEsYixjLGQpe3RoaXMudjA9YTt0aGlzLnYxPWI7dGhpcy52Mj1jO3RoaXMudjM9ZH0sZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFRIUkVFLlZlY3RvcjM7Yi54PVRIUkVFLlNoYXBlLlV0aWxzLmIzKGEsdGhpcy52MC54LHRoaXMudjEueCx0aGlzLnYyLngsdGhpcy52My54KTtiLnk9VEhSRUUuU2hhcGUuVXRpbHMuYjMoYSx0aGlzLnYwLnksdGhpcy52MS55LHRoaXMudjIueSx0aGlzLnYzLnkpO2Iuej1USFJFRS5TaGFwZS5VdGlscy5iMyhhLHRoaXMudjAueix0aGlzLnYxLnosdGhpcy52Mi56LHRoaXMudjMueik7cmV0dXJuIGJ9KTtcclxuVEhSRUUuU3BsaW5lQ3VydmUzPVRIUkVFLkN1cnZlLmNyZWF0ZShmdW5jdGlvbihhKXt0aGlzLnBvaW50cz12b2lkIDA9PWE/W106YX0sZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5wb2ludHM7YSo9Yi5sZW5ndGgtMTt2YXIgYz1NYXRoLmZsb29yKGEpO2EtPWM7dmFyIGQ9YlswPT1jP2M6Yy0xXSxlPWJbY10sZj1iW2M+Yi5sZW5ndGgtMj9iLmxlbmd0aC0xOmMrMV0sYj1iW2M+Yi5sZW5ndGgtMz9iLmxlbmd0aC0xOmMrMl0sYz1uZXcgVEhSRUUuVmVjdG9yMztjLng9VEhSRUUuQ3VydmUuVXRpbHMuaW50ZXJwb2xhdGUoZC54LGUueCxmLngsYi54LGEpO2MueT1USFJFRS5DdXJ2ZS5VdGlscy5pbnRlcnBvbGF0ZShkLnksZS55LGYueSxiLnksYSk7Yy56PVRIUkVFLkN1cnZlLlV0aWxzLmludGVycG9sYXRlKGQueixlLnosZi56LGIueixhKTtyZXR1cm4gY30pO1xyXG5USFJFRS5DbG9zZWRTcGxpbmVDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEpe3RoaXMucG9pbnRzPXZvaWQgMD09YT9bXTphfSxmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBvaW50czthKj1iLmxlbmd0aC0wO3ZhciBjPU1hdGguZmxvb3IoYSk7YS09Yzt2YXIgYz1jKygwPGM/MDooTWF0aC5mbG9vcihNYXRoLmFicyhjKS9iLmxlbmd0aCkrMSkqYi5sZW5ndGgpLGQ9YlsoYy0xKSViLmxlbmd0aF0sZT1iW2MlYi5sZW5ndGhdLGY9YlsoYysxKSViLmxlbmd0aF0sYj1iWyhjKzIpJWIubGVuZ3RoXSxjPW5ldyBUSFJFRS5WZWN0b3IzO2MueD1USFJFRS5DdXJ2ZS5VdGlscy5pbnRlcnBvbGF0ZShkLngsZS54LGYueCxiLngsYSk7Yy55PVRIUkVFLkN1cnZlLlV0aWxzLmludGVycG9sYXRlKGQueSxlLnksZi55LGIueSxhKTtjLno9VEhSRUUuQ3VydmUuVXRpbHMuaW50ZXJwb2xhdGUoZC56LGUueixmLnosYi56LGEpO3JldHVybiBjfSk7XHJcblRIUkVFLkFuaW1hdGlvbkhhbmRsZXI9e0xJTkVBUjowLENBVE1VTExST006MSxDQVRNVUxMUk9NX0ZPUldBUkQ6MixhZGQ6ZnVuY3Rpb24oKXtUSFJFRS53YXJuKFwiVEhSRUUuQW5pbWF0aW9uSGFuZGxlci5hZGQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLlwiKX0sZ2V0OmZ1bmN0aW9uKCl7VEhSRUUud2FybihcIlRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuZ2V0KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC5cIil9LHJlbW92ZTpmdW5jdGlvbigpe1RIUkVFLndhcm4oXCJUSFJFRS5BbmltYXRpb25IYW5kbGVyLnJlbW92ZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuXCIpfSxhbmltYXRpb25zOltdLGluaXQ6ZnVuY3Rpb24oYSl7aWYoITA9PT1hLmluaXRpYWxpemVkKXJldHVybiBhO2Zvcih2YXIgYj0wO2I8YS5oaWVyYXJjaHkubGVuZ3RoO2IrKyl7Zm9yKHZhciBjPTA7YzxhLmhpZXJhcmNoeVtiXS5rZXlzLmxlbmd0aDtjKyspaWYoMD5hLmhpZXJhcmNoeVtiXS5rZXlzW2NdLnRpbWUmJihhLmhpZXJhcmNoeVtiXS5rZXlzW2NdLnRpbWU9XHJcbjApLHZvaWQgMCE9PWEuaGllcmFyY2h5W2JdLmtleXNbY10ucm90JiYhKGEuaGllcmFyY2h5W2JdLmtleXNbY10ucm90IGluc3RhbmNlb2YgVEhSRUUuUXVhdGVybmlvbikpe3ZhciBkPWEuaGllcmFyY2h5W2JdLmtleXNbY10ucm90O2EuaGllcmFyY2h5W2JdLmtleXNbY10ucm90PShuZXcgVEhSRUUuUXVhdGVybmlvbikuZnJvbUFycmF5KGQpfWlmKGEuaGllcmFyY2h5W2JdLmtleXMubGVuZ3RoJiZ2b2lkIDAhPT1hLmhpZXJhcmNoeVtiXS5rZXlzWzBdLm1vcnBoVGFyZ2V0cyl7ZD17fTtmb3IoYz0wO2M8YS5oaWVyYXJjaHlbYl0ua2V5cy5sZW5ndGg7YysrKWZvcih2YXIgZT0wO2U8YS5oaWVyYXJjaHlbYl0ua2V5c1tjXS5tb3JwaFRhcmdldHMubGVuZ3RoO2UrKyl7dmFyIGY9YS5oaWVyYXJjaHlbYl0ua2V5c1tjXS5tb3JwaFRhcmdldHNbZV07ZFtmXT0tMX1hLmhpZXJhcmNoeVtiXS51c2VkTW9ycGhUYXJnZXRzPWQ7Zm9yKGM9MDtjPGEuaGllcmFyY2h5W2JdLmtleXMubGVuZ3RoO2MrKyl7dmFyIGc9XHJcbnt9O2ZvcihmIGluIGQpe2ZvcihlPTA7ZTxhLmhpZXJhcmNoeVtiXS5rZXlzW2NdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ZSsrKWlmKGEuaGllcmFyY2h5W2JdLmtleXNbY10ubW9ycGhUYXJnZXRzW2VdPT09Zil7Z1tmXT1hLmhpZXJhcmNoeVtiXS5rZXlzW2NdLm1vcnBoVGFyZ2V0c0luZmx1ZW5jZXNbZV07YnJlYWt9ZT09PWEuaGllcmFyY2h5W2JdLmtleXNbY10ubW9ycGhUYXJnZXRzLmxlbmd0aCYmKGdbZl09MCl9YS5oaWVyYXJjaHlbYl0ua2V5c1tjXS5tb3JwaFRhcmdldHNJbmZsdWVuY2VzPWd9fWZvcihjPTE7YzxhLmhpZXJhcmNoeVtiXS5rZXlzLmxlbmd0aDtjKyspYS5oaWVyYXJjaHlbYl0ua2V5c1tjXS50aW1lPT09YS5oaWVyYXJjaHlbYl0ua2V5c1tjLTFdLnRpbWUmJihhLmhpZXJhcmNoeVtiXS5rZXlzLnNwbGljZShjLDEpLGMtLSk7Zm9yKGM9MDtjPGEuaGllcmFyY2h5W2JdLmtleXMubGVuZ3RoO2MrKylhLmhpZXJhcmNoeVtiXS5rZXlzW2NdLmluZGV4PWN9YS5pbml0aWFsaXplZD1cclxuITA7cmV0dXJuIGF9LHBhcnNlOmZ1bmN0aW9uKGEpe3ZhciBiPWZ1bmN0aW9uKGEsYyl7Yy5wdXNoKGEpO2Zvcih2YXIgZD0wO2Q8YS5jaGlsZHJlbi5sZW5ndGg7ZCsrKWIoYS5jaGlsZHJlbltkXSxjKX0sYz1bXTtpZihhIGluc3RhbmNlb2YgVEhSRUUuU2tpbm5lZE1lc2gpZm9yKHZhciBkPTA7ZDxhLnNrZWxldG9uLmJvbmVzLmxlbmd0aDtkKyspYy5wdXNoKGEuc2tlbGV0b24uYm9uZXNbZF0pO2Vsc2UgYihhLGMpO3JldHVybiBjfSxwbGF5OmZ1bmN0aW9uKGEpey0xPT09dGhpcy5hbmltYXRpb25zLmluZGV4T2YoYSkmJnRoaXMuYW5pbWF0aW9ucy5wdXNoKGEpfSxzdG9wOmZ1bmN0aW9uKGEpe2E9dGhpcy5hbmltYXRpb25zLmluZGV4T2YoYSk7LTEhPT1hJiZ0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKGEsMSl9LHVwZGF0ZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9MDtiPHRoaXMuYW5pbWF0aW9ucy5sZW5ndGg7YisrKXRoaXMuYW5pbWF0aW9uc1tiXS5yZXNldEJsZW5kV2VpZ2h0cygpO1xyXG5mb3IoYj0wO2I8dGhpcy5hbmltYXRpb25zLmxlbmd0aDtiKyspdGhpcy5hbmltYXRpb25zW2JdLnVwZGF0ZShhKX19O1RIUkVFLkFuaW1hdGlvbj1mdW5jdGlvbihhLGIpe3RoaXMucm9vdD1hO3RoaXMuZGF0YT1USFJFRS5BbmltYXRpb25IYW5kbGVyLmluaXQoYik7dGhpcy5oaWVyYXJjaHk9VEhSRUUuQW5pbWF0aW9uSGFuZGxlci5wYXJzZShhKTt0aGlzLmN1cnJlbnRUaW1lPTA7dGhpcy50aW1lU2NhbGU9MTt0aGlzLmlzUGxheWluZz0hMTt0aGlzLmxvb3A9ITA7dGhpcy53ZWlnaHQ9MDt0aGlzLmludGVycG9sYXRpb25UeXBlPVRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuTElORUFSfTtcclxuVEhSRUUuQW5pbWF0aW9uLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuQW5pbWF0aW9uLGtleVR5cGVzOltcInBvc1wiLFwicm90XCIsXCJzY2xcIl0scGxheTpmdW5jdGlvbihhLGIpe3RoaXMuY3VycmVudFRpbWU9dm9pZCAwIT09YT9hOjA7dGhpcy53ZWlnaHQ9dm9pZCAwIT09Yj9iOjE7dGhpcy5pc1BsYXlpbmc9ITA7dGhpcy5yZXNldCgpO1RIUkVFLkFuaW1hdGlvbkhhbmRsZXIucGxheSh0aGlzKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuaXNQbGF5aW5nPSExO1RIUkVFLkFuaW1hdGlvbkhhbmRsZXIuc3RvcCh0aGlzKX0scmVzZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPXRoaXMuaGllcmFyY2h5Lmxlbmd0aDthPGI7YSsrKXt2YXIgYz10aGlzLmhpZXJhcmNoeVthXTt2b2lkIDA9PT1jLmFuaW1hdGlvbkNhY2hlJiYoYy5hbmltYXRpb25DYWNoZT17YW5pbWF0aW9uczp7fSxibGVuZGluZzp7cG9zaXRpb25XZWlnaHQ6MCxxdWF0ZXJuaW9uV2VpZ2h0OjAsc2NhbGVXZWlnaHQ6MH19KTtcclxudmFyIGQ9dGhpcy5kYXRhLm5hbWUsZT1jLmFuaW1hdGlvbkNhY2hlLmFuaW1hdGlvbnMsZj1lW2RdO3ZvaWQgMD09PWYmJihmPXtwcmV2S2V5Ontwb3M6MCxyb3Q6MCxzY2w6MH0sbmV4dEtleTp7cG9zOjAscm90OjAsc2NsOjB9LG9yaWdpbmFsTWF0cml4OmMubWF0cml4fSxlW2RdPWYpO2ZvcihjPTA7Mz5jO2MrKyl7Zm9yKHZhciBkPXRoaXMua2V5VHlwZXNbY10sZT10aGlzLmRhdGEuaGllcmFyY2h5W2FdLmtleXNbMF0sZz10aGlzLmdldE5leHRLZXlXaXRoKGQsYSwxKTtnLnRpbWU8dGhpcy5jdXJyZW50VGltZSYmZy5pbmRleD5lLmluZGV4OyllPWcsZz10aGlzLmdldE5leHRLZXlXaXRoKGQsYSxnLmluZGV4KzEpO2YucHJldktleVtkXT1lO2YubmV4dEtleVtkXT1nfX19LHJlc2V0QmxlbmRXZWlnaHRzOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj10aGlzLmhpZXJhcmNoeS5sZW5ndGg7YTxiO2ErKyl7dmFyIGM9dGhpcy5oaWVyYXJjaHlbYV0uYW5pbWF0aW9uQ2FjaGU7dm9pZCAwIT09XHJcbmMmJihjPWMuYmxlbmRpbmcsYy5wb3NpdGlvbldlaWdodD0wLGMucXVhdGVybmlvbldlaWdodD0wLGMuc2NhbGVXZWlnaHQ9MCl9fSx1cGRhdGU6ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPW5ldyBUSFJFRS5WZWN0b3IzLGM9bmV3IFRIUkVFLlZlY3RvcjMsZD1uZXcgVEhSRUUuUXVhdGVybmlvbixlPWZ1bmN0aW9uKGEsYil7dmFyIGM9W10sZD1bXSxlLHEsbix0LHIscztlPShhLmxlbmd0aC0xKSpiO3E9TWF0aC5mbG9vcihlKTtlLT1xO2NbMF09MD09PXE/cTpxLTE7Y1sxXT1xO2NbMl09cT5hLmxlbmd0aC0yP3E6cSsxO2NbM109cT5hLmxlbmd0aC0zP3E6cSsyO3E9YVtjWzBdXTt0PWFbY1sxXV07cj1hW2NbMl1dO3M9YVtjWzNdXTtjPWUqZTtuPWUqYztkWzBdPWYocVswXSx0WzBdLHJbMF0sc1swXSxlLGMsbik7ZFsxXT1mKHFbMV0sdFsxXSxyWzFdLHNbMV0sZSxjLG4pO2RbMl09ZihxWzJdLHRbMl0sclsyXSxzWzJdLGUsYyxuKTtyZXR1cm4gZH0sZj1mdW5jdGlvbihhLGIsYyxkLFxyXG5lLGYsbil7YT0uNSooYy1hKTtkPS41KihkLWIpO3JldHVybigyKihiLWMpK2ErZCkqbisoLTMqKGItYyktMiphLWQpKmYrYSplK2J9O3JldHVybiBmdW5jdGlvbihmKXtpZighMSE9PXRoaXMuaXNQbGF5aW5nJiYodGhpcy5jdXJyZW50VGltZSs9Zip0aGlzLnRpbWVTY2FsZSwwIT09dGhpcy53ZWlnaHQpKXtmPXRoaXMuZGF0YS5sZW5ndGg7aWYodGhpcy5jdXJyZW50VGltZT5mfHwwPnRoaXMuY3VycmVudFRpbWUpdGhpcy5sb29wPyh0aGlzLmN1cnJlbnRUaW1lJT1mLDA+dGhpcy5jdXJyZW50VGltZSYmKHRoaXMuY3VycmVudFRpbWUrPWYpLHRoaXMucmVzZXQoKSk6dGhpcy5zdG9wKCk7Zj0wO2Zvcih2YXIgaD10aGlzLmhpZXJhcmNoeS5sZW5ndGg7ZjxoO2YrKylmb3IodmFyIGs9dGhpcy5oaWVyYXJjaHlbZl0sbD1rLmFuaW1hdGlvbkNhY2hlLmFuaW1hdGlvbnNbdGhpcy5kYXRhLm5hbWVdLHA9ay5hbmltYXRpb25DYWNoZS5ibGVuZGluZyxxPTA7Mz5xO3ErKyl7dmFyIG49dGhpcy5rZXlUeXBlc1txXSxcclxudD1sLnByZXZLZXlbbl0scj1sLm5leHRLZXlbbl07aWYoMDx0aGlzLnRpbWVTY2FsZSYmci50aW1lPD10aGlzLmN1cnJlbnRUaW1lfHwwPnRoaXMudGltZVNjYWxlJiZ0LnRpbWU+PXRoaXMuY3VycmVudFRpbWUpe3Q9dGhpcy5kYXRhLmhpZXJhcmNoeVtmXS5rZXlzWzBdO2ZvcihyPXRoaXMuZ2V0TmV4dEtleVdpdGgobixmLDEpO3IudGltZTx0aGlzLmN1cnJlbnRUaW1lJiZyLmluZGV4PnQuaW5kZXg7KXQ9cixyPXRoaXMuZ2V0TmV4dEtleVdpdGgobixmLHIuaW5kZXgrMSk7bC5wcmV2S2V5W25dPXQ7bC5uZXh0S2V5W25dPXJ9dmFyIHM9KHRoaXMuY3VycmVudFRpbWUtdC50aW1lKS8oci50aW1lLXQudGltZSksdT10W25dLHY9cltuXTswPnMmJihzPTApOzE8cyYmKHM9MSk7aWYoXCJwb3NcIj09PW4paWYodGhpcy5pbnRlcnBvbGF0aW9uVHlwZT09PVRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuTElORUFSKWMueD11WzBdKyh2WzBdLXVbMF0pKnMsYy55PXVbMV0rKHZbMV0tdVsxXSkqcyxcclxuYy56PXVbMl0rKHZbMl0tdVsyXSkqcyx0PXRoaXMud2VpZ2h0Lyh0aGlzLndlaWdodCtwLnBvc2l0aW9uV2VpZ2h0KSxrLnBvc2l0aW9uLmxlcnAoYyx0KSxwLnBvc2l0aW9uV2VpZ2h0Kz10aGlzLndlaWdodDtlbHNle2lmKHRoaXMuaW50ZXJwb2xhdGlvblR5cGU9PT1USFJFRS5BbmltYXRpb25IYW5kbGVyLkNBVE1VTExST018fHRoaXMuaW50ZXJwb2xhdGlvblR5cGU9PT1USFJFRS5BbmltYXRpb25IYW5kbGVyLkNBVE1VTExST01fRk9SV0FSRClhWzBdPXRoaXMuZ2V0UHJldktleVdpdGgoXCJwb3NcIixmLHQuaW5kZXgtMSkucG9zLGFbMV09dSxhWzJdPXYsYVszXT10aGlzLmdldE5leHRLZXlXaXRoKFwicG9zXCIsZixyLmluZGV4KzEpLnBvcyxzPS4zMypzKy4zMyxyPWUoYSxzKSx0PXRoaXMud2VpZ2h0Lyh0aGlzLndlaWdodCtwLnBvc2l0aW9uV2VpZ2h0KSxwLnBvc2l0aW9uV2VpZ2h0Kz10aGlzLndlaWdodCxuPWsucG9zaXRpb24sbi54Kz0oclswXS1uLngpKnQsbi55Kz0oclsxXS1cclxubi55KSp0LG4ueis9KHJbMl0tbi56KSp0LHRoaXMuaW50ZXJwb2xhdGlvblR5cGU9PT1USFJFRS5BbmltYXRpb25IYW5kbGVyLkNBVE1VTExST01fRk9SV0FSRCYmKHM9ZShhLDEuMDEqcyksYi5zZXQoc1swXSxzWzFdLHNbMl0pLGIuc3ViKG4pLGIueT0wLGIubm9ybWFsaXplKCkscz1NYXRoLmF0YW4yKGIueCxiLnopLGsucm90YXRpb24uc2V0KDAscywwKSl9ZWxzZVwicm90XCI9PT1uPyhUSFJFRS5RdWF0ZXJuaW9uLnNsZXJwKHUsdixkLHMpLDA9PT1wLnF1YXRlcm5pb25XZWlnaHQ/KGsucXVhdGVybmlvbi5jb3B5KGQpLHAucXVhdGVybmlvbldlaWdodD10aGlzLndlaWdodCk6KHQ9dGhpcy53ZWlnaHQvKHRoaXMud2VpZ2h0K3AucXVhdGVybmlvbldlaWdodCksVEhSRUUuUXVhdGVybmlvbi5zbGVycChrLnF1YXRlcm5pb24sZCxrLnF1YXRlcm5pb24sdCkscC5xdWF0ZXJuaW9uV2VpZ2h0Kz10aGlzLndlaWdodCkpOlwic2NsXCI9PT1uJiYoYy54PXVbMF0rKHZbMF0tdVswXSkqcyxjLnk9XHJcbnVbMV0rKHZbMV0tdVsxXSkqcyxjLno9dVsyXSsodlsyXS11WzJdKSpzLHQ9dGhpcy53ZWlnaHQvKHRoaXMud2VpZ2h0K3Auc2NhbGVXZWlnaHQpLGsuc2NhbGUubGVycChjLHQpLHAuc2NhbGVXZWlnaHQrPXRoaXMud2VpZ2h0KX1yZXR1cm4hMH19fSgpLGdldE5leHRLZXlXaXRoOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLmRhdGEuaGllcmFyY2h5W2JdLmtleXM7Zm9yKGM9dGhpcy5pbnRlcnBvbGF0aW9uVHlwZT09PVRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuQ0FUTVVMTFJPTXx8dGhpcy5pbnRlcnBvbGF0aW9uVHlwZT09PVRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuQ0FUTVVMTFJPTV9GT1JXQVJEP2M8ZC5sZW5ndGgtMT9jOmQubGVuZ3RoLTE6YyVkLmxlbmd0aDtjPGQubGVuZ3RoO2MrKylpZih2b2lkIDAhPT1kW2NdW2FdKXJldHVybiBkW2NdO3JldHVybiB0aGlzLmRhdGEuaGllcmFyY2h5W2JdLmtleXNbMF19LGdldFByZXZLZXlXaXRoOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1cclxudGhpcy5kYXRhLmhpZXJhcmNoeVtiXS5rZXlzO2ZvcihjPXRoaXMuaW50ZXJwb2xhdGlvblR5cGU9PT1USFJFRS5BbmltYXRpb25IYW5kbGVyLkNBVE1VTExST018fHRoaXMuaW50ZXJwb2xhdGlvblR5cGU9PT1USFJFRS5BbmltYXRpb25IYW5kbGVyLkNBVE1VTExST01fRk9SV0FSRD8wPGM/YzowOjA8PWM/YzpjK2QubGVuZ3RoOzA8PWM7Yy0tKWlmKHZvaWQgMCE9PWRbY11bYV0pcmV0dXJuIGRbY107cmV0dXJuIHRoaXMuZGF0YS5oaWVyYXJjaHlbYl0ua2V5c1tkLmxlbmd0aC0xXX19O1xyXG5USFJFRS5LZXlGcmFtZUFuaW1hdGlvbj1mdW5jdGlvbihhKXt0aGlzLnJvb3Q9YS5ub2RlO3RoaXMuZGF0YT1USFJFRS5BbmltYXRpb25IYW5kbGVyLmluaXQoYSk7dGhpcy5oaWVyYXJjaHk9VEhSRUUuQW5pbWF0aW9uSGFuZGxlci5wYXJzZSh0aGlzLnJvb3QpO3RoaXMuY3VycmVudFRpbWU9MDt0aGlzLnRpbWVTY2FsZT0uMDAxO3RoaXMuaXNQbGF5aW5nPSExO3RoaXMubG9vcD10aGlzLmlzUGF1c2VkPSEwO2E9MDtmb3IodmFyIGI9dGhpcy5oaWVyYXJjaHkubGVuZ3RoO2E8YjthKyspe3ZhciBjPXRoaXMuZGF0YS5oaWVyYXJjaHlbYV0uc2lkcyxkPXRoaXMuaGllcmFyY2h5W2FdO2lmKHRoaXMuZGF0YS5oaWVyYXJjaHlbYV0ua2V5cy5sZW5ndGgmJmMpe2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXt2YXIgZj1jW2VdLGc9dGhpcy5nZXROZXh0S2V5V2l0aChmLGEsMCk7ZyYmZy5hcHBseShmKX1kLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5kYXRhLmhpZXJhcmNoeVthXS5ub2RlLnVwZGF0ZU1hdHJpeCgpO1xyXG5kLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITB9fX07XHJcblRIUkVFLktleUZyYW1lQW5pbWF0aW9uLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuS2V5RnJhbWVBbmltYXRpb24scGxheTpmdW5jdGlvbihhKXt0aGlzLmN1cnJlbnRUaW1lPXZvaWQgMCE9PWE/YTowO2lmKCExPT09dGhpcy5pc1BsYXlpbmcpe3RoaXMuaXNQbGF5aW5nPSEwO3ZhciBiPXRoaXMuaGllcmFyY2h5Lmxlbmd0aCxjLGQ7Zm9yKGE9MDthPGI7YSsrKWM9dGhpcy5oaWVyYXJjaHlbYV0sZD10aGlzLmRhdGEuaGllcmFyY2h5W2FdLHZvaWQgMD09PWQuYW5pbWF0aW9uQ2FjaGUmJihkLmFuaW1hdGlvbkNhY2hlPXt9LGQuYW5pbWF0aW9uQ2FjaGUucHJldktleT1udWxsLGQuYW5pbWF0aW9uQ2FjaGUubmV4dEtleT1udWxsLGQuYW5pbWF0aW9uQ2FjaGUub3JpZ2luYWxNYXRyaXg9Yy5tYXRyaXgpLGM9dGhpcy5kYXRhLmhpZXJhcmNoeVthXS5rZXlzLGMubGVuZ3RoJiYoZC5hbmltYXRpb25DYWNoZS5wcmV2S2V5PWNbMF0sZC5hbmltYXRpb25DYWNoZS5uZXh0S2V5PVxyXG5jWzFdLHRoaXMuc3RhcnRUaW1lPU1hdGgubWluKGNbMF0udGltZSx0aGlzLnN0YXJ0VGltZSksdGhpcy5lbmRUaW1lPU1hdGgubWF4KGNbYy5sZW5ndGgtMV0udGltZSx0aGlzLmVuZFRpbWUpKTt0aGlzLnVwZGF0ZSgwKX10aGlzLmlzUGF1c2VkPSExO1RIUkVFLkFuaW1hdGlvbkhhbmRsZXIucGxheSh0aGlzKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuaXNQYXVzZWQ9dGhpcy5pc1BsYXlpbmc9ITE7VEhSRUUuQW5pbWF0aW9uSGFuZGxlci5zdG9wKHRoaXMpO2Zvcih2YXIgYT0wO2E8dGhpcy5kYXRhLmhpZXJhcmNoeS5sZW5ndGg7YSsrKXt2YXIgYj10aGlzLmhpZXJhcmNoeVthXSxjPXRoaXMuZGF0YS5oaWVyYXJjaHlbYV07aWYodm9pZCAwIT09Yy5hbmltYXRpb25DYWNoZSl7dmFyIGQ9Yy5hbmltYXRpb25DYWNoZS5vcmlnaW5hbE1hdHJpeDtkLmNvcHkoYi5tYXRyaXgpO2IubWF0cml4PWQ7ZGVsZXRlIGMuYW5pbWF0aW9uQ2FjaGV9fX0sdXBkYXRlOmZ1bmN0aW9uKGEpe2lmKCExIT09XHJcbnRoaXMuaXNQbGF5aW5nKXt0aGlzLmN1cnJlbnRUaW1lKz1hKnRoaXMudGltZVNjYWxlO2E9dGhpcy5kYXRhLmxlbmd0aDshMD09PXRoaXMubG9vcCYmdGhpcy5jdXJyZW50VGltZT5hJiYodGhpcy5jdXJyZW50VGltZSU9YSk7dGhpcy5jdXJyZW50VGltZT1NYXRoLm1pbih0aGlzLmN1cnJlbnRUaW1lLGEpO2E9MDtmb3IodmFyIGI9dGhpcy5oaWVyYXJjaHkubGVuZ3RoO2E8YjthKyspe3ZhciBjPXRoaXMuaGllcmFyY2h5W2FdLGQ9dGhpcy5kYXRhLmhpZXJhcmNoeVthXSxlPWQua2V5cyxkPWQuYW5pbWF0aW9uQ2FjaGU7aWYoZS5sZW5ndGgpe3ZhciBmPWQucHJldktleSxnPWQubmV4dEtleTtpZihnLnRpbWU8PXRoaXMuY3VycmVudFRpbWUpe2Zvcig7Zy50aW1lPHRoaXMuY3VycmVudFRpbWUmJmcuaW5kZXg+Zi5pbmRleDspZj1nLGc9ZVtmLmluZGV4KzFdO2QucHJldktleT1mO2QubmV4dEtleT1nfWcudGltZT49dGhpcy5jdXJyZW50VGltZT9mLmludGVycG9sYXRlKGcsdGhpcy5jdXJyZW50VGltZSk6XHJcbmYuaW50ZXJwb2xhdGUoZyxnLnRpbWUpO3RoaXMuZGF0YS5oaWVyYXJjaHlbYV0ubm9kZS51cGRhdGVNYXRyaXgoKTtjLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITB9fX19LGdldE5leHRLZXlXaXRoOmZ1bmN0aW9uKGEsYixjKXtiPXRoaXMuZGF0YS5oaWVyYXJjaHlbYl0ua2V5cztmb3IoYyU9Yi5sZW5ndGg7YzxiLmxlbmd0aDtjKyspaWYoYltjXS5oYXNUYXJnZXQoYSkpcmV0dXJuIGJbY107cmV0dXJuIGJbMF19LGdldFByZXZLZXlXaXRoOmZ1bmN0aW9uKGEsYixjKXtiPXRoaXMuZGF0YS5oaWVyYXJjaHlbYl0ua2V5cztmb3IoYz0wPD1jP2M6YytiLmxlbmd0aDswPD1jO2MtLSlpZihiW2NdLmhhc1RhcmdldChhKSlyZXR1cm4gYltjXTtyZXR1cm4gYltiLmxlbmd0aC0xXX19O1xyXG5USFJFRS5Nb3JwaEFuaW1hdGlvbj1mdW5jdGlvbihhKXt0aGlzLm1lc2g9YTt0aGlzLmZyYW1lcz1hLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5sZW5ndGg7dGhpcy5jdXJyZW50VGltZT0wO3RoaXMuZHVyYXRpb249MUUzO3RoaXMubG9vcD0hMDt0aGlzLmN1cnJlbnRGcmFtZT10aGlzLmxhc3RGcmFtZT0wO3RoaXMuaXNQbGF5aW5nPSExfTtcclxuVEhSRUUuTW9ycGhBbmltYXRpb24ucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5Nb3JwaEFuaW1hdGlvbixwbGF5OmZ1bmN0aW9uKCl7dGhpcy5pc1BsYXlpbmc9ITB9LHBhdXNlOmZ1bmN0aW9uKCl7dGhpcy5pc1BsYXlpbmc9ITF9LHVwZGF0ZTpmdW5jdGlvbihhKXtpZighMSE9PXRoaXMuaXNQbGF5aW5nKXt0aGlzLmN1cnJlbnRUaW1lKz1hOyEwPT09dGhpcy5sb29wJiZ0aGlzLmN1cnJlbnRUaW1lPnRoaXMuZHVyYXRpb24mJih0aGlzLmN1cnJlbnRUaW1lJT10aGlzLmR1cmF0aW9uKTt0aGlzLmN1cnJlbnRUaW1lPU1hdGgubWluKHRoaXMuY3VycmVudFRpbWUsdGhpcy5kdXJhdGlvbik7YT10aGlzLmR1cmF0aW9uL3RoaXMuZnJhbWVzO3ZhciBiPU1hdGguZmxvb3IodGhpcy5jdXJyZW50VGltZS9hKSxjPXRoaXMubWVzaC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7YiE9dGhpcy5jdXJyZW50RnJhbWUmJihjW3RoaXMubGFzdEZyYW1lXT0wLGNbdGhpcy5jdXJyZW50RnJhbWVdPVxyXG4xLGNbYl09MCx0aGlzLmxhc3RGcmFtZT10aGlzLmN1cnJlbnRGcmFtZSx0aGlzLmN1cnJlbnRGcmFtZT1iKTtjW2JdPXRoaXMuY3VycmVudFRpbWUlYS9hO2NbdGhpcy5sYXN0RnJhbWVdPTEtY1tiXX19fTtcclxuVEhSRUUuQm94R2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2Z1bmN0aW9uIGcoYSxiLGMsZCxlLGYsZyxzKXt2YXIgdSx2PWgud2lkdGhTZWdtZW50cyx4PWguaGVpZ2h0U2VnbWVudHMsRD1lLzIsdz1mLzIseT1oLnZlcnRpY2VzLmxlbmd0aDtpZihcInhcIj09PWEmJlwieVwiPT09Ynx8XCJ5XCI9PT1hJiZcInhcIj09PWIpdT1cInpcIjtlbHNlIGlmKFwieFwiPT09YSYmXCJ6XCI9PT1ifHxcInpcIj09PWEmJlwieFwiPT09Yil1PVwieVwiLHg9aC5kZXB0aFNlZ21lbnRzO2Vsc2UgaWYoXCJ6XCI9PT1hJiZcInlcIj09PWJ8fFwieVwiPT09YSYmXCJ6XCI9PT1iKXU9XCJ4XCIsdj1oLmRlcHRoU2VnbWVudHM7dmFyIEE9disxLEU9eCsxLEc9ZS92LEY9Zi94LHo9bmV3IFRIUkVFLlZlY3RvcjM7elt1XT0wPGc/MTotMTtmb3IoZT0wO2U8RTtlKyspZm9yKGY9MDtmPEE7ZisrKXt2YXIgST1uZXcgVEhSRUUuVmVjdG9yMztJW2FdPShmKkctRCkqYztJW2JdPShlKkYtdykqZDtJW3VdPWc7aC52ZXJ0aWNlcy5wdXNoKEkpfWZvcihlPVxyXG4wO2U8eDtlKyspZm9yKGY9MDtmPHY7ZisrKXc9ZitBKmUsYT1mK0EqKGUrMSksYj1mKzErQSooZSsxKSxjPWYrMStBKmUsZD1uZXcgVEhSRUUuVmVjdG9yMihmL3YsMS1lL3gpLGc9bmV3IFRIUkVFLlZlY3RvcjIoZi92LDEtKGUrMSkveCksdT1uZXcgVEhSRUUuVmVjdG9yMigoZisxKS92LDEtKGUrMSkveCksRD1uZXcgVEhSRUUuVmVjdG9yMigoZisxKS92LDEtZS94KSx3PW5ldyBUSFJFRS5GYWNlMyh3K3ksYSt5LGMreSksdy5ub3JtYWwuY29weSh6KSx3LnZlcnRleE5vcm1hbHMucHVzaCh6LmNsb25lKCksei5jbG9uZSgpLHouY2xvbmUoKSksdy5tYXRlcmlhbEluZGV4PXMsaC5mYWNlcy5wdXNoKHcpLGguZmFjZVZlcnRleFV2c1swXS5wdXNoKFtkLGcsRF0pLHc9bmV3IFRIUkVFLkZhY2UzKGEreSxiK3ksYyt5KSx3Lm5vcm1hbC5jb3B5KHopLHcudmVydGV4Tm9ybWFscy5wdXNoKHouY2xvbmUoKSx6LmNsb25lKCksei5jbG9uZSgpKSx3Lm1hdGVyaWFsSW5kZXg9cyxoLmZhY2VzLnB1c2godyksXHJcbmguZmFjZVZlcnRleFV2c1swXS5wdXNoKFtnLmNsb25lKCksdSxELmNsb25lKCldKX1USFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkJveEdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXt3aWR0aDphLGhlaWdodDpiLGRlcHRoOmMsd2lkdGhTZWdtZW50czpkLGhlaWdodFNlZ21lbnRzOmUsZGVwdGhTZWdtZW50czpmfTt0aGlzLndpZHRoU2VnbWVudHM9ZHx8MTt0aGlzLmhlaWdodFNlZ21lbnRzPWV8fDE7dGhpcy5kZXB0aFNlZ21lbnRzPWZ8fDE7dmFyIGg9dGhpcztkPWEvMjtlPWIvMjtmPWMvMjtnKFwielwiLFwieVwiLC0xLC0xLGMsYixkLDApO2coXCJ6XCIsXCJ5XCIsMSwtMSxjLGIsLWQsMSk7ZyhcInhcIixcInpcIiwxLDEsYSxjLGUsMik7ZyhcInhcIixcInpcIiwxLC0xLGEsYywtZSwzKTtnKFwieFwiLFwieVwiLDEsLTEsYSxiLGYsNCk7ZyhcInhcIixcInlcIiwtMSwtMSxhLGIsLWYsNSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9O1RIUkVFLkJveEdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblRIUkVFLkJveEdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Cb3hHZW9tZXRyeTtcclxuVEhSRUUuQ2lyY2xlR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCl7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDaXJjbGVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsc2VnbWVudHM6Yix0aGV0YVN0YXJ0OmMsdGhldGFMZW5ndGg6ZH07YT1hfHw1MDtiPXZvaWQgMCE9PWI/TWF0aC5tYXgoMyxiKTo4O2M9dm9pZCAwIT09Yz9jOjA7ZD12b2lkIDAhPT1kP2Q6MipNYXRoLlBJO3ZhciBlLGY9W107ZT1uZXcgVEhSRUUuVmVjdG9yMzt2YXIgZz1uZXcgVEhSRUUuVmVjdG9yMiguNSwuNSk7dGhpcy52ZXJ0aWNlcy5wdXNoKGUpO2YucHVzaChnKTtmb3IoZT0wO2U8PWI7ZSsrKXt2YXIgaD1uZXcgVEhSRUUuVmVjdG9yMyxrPWMrZS9iKmQ7aC54PWEqTWF0aC5jb3Moayk7aC55PWEqTWF0aC5zaW4oayk7dGhpcy52ZXJ0aWNlcy5wdXNoKGgpO2YucHVzaChuZXcgVEhSRUUuVmVjdG9yMigoaC54L2ErMSkvMiwoaC55L2ErMSkvMikpfWM9bmV3IFRIUkVFLlZlY3RvcjMoMCxcclxuMCwxKTtmb3IoZT0xO2U8PWI7ZSsrKXRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoZSxlKzEsMCxbYy5jbG9uZSgpLGMuY2xvbmUoKSxjLmNsb25lKCldKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2ZbZV0uY2xvbmUoKSxmW2UrMV0uY2xvbmUoKSxnLmNsb25lKCldKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO3RoaXMuYm91bmRpbmdTcGhlcmU9bmV3IFRIUkVFLlNwaGVyZShuZXcgVEhSRUUuVmVjdG9yMyxhKX07VEhSRUUuQ2lyY2xlR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5DaXJjbGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ2lyY2xlR2VvbWV0cnk7XHJcblRIUkVFLkN1YmVHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkLGUsZil7VEhSRUUud2FybihcIlRIUkVFLkN1YmVHZW9tZXRyeSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkJveEdlb21ldHJ5LlwiKTtyZXR1cm4gbmV3IFRIUkVFLkJveEdlb21ldHJ5KGEsYixjLGQsZSxmKX07XHJcblRIUkVFLkN5bGluZGVyR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkN5bGluZGVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1c1RvcDphLHJhZGl1c0JvdHRvbTpiLGhlaWdodDpjLHJhZGlhbFNlZ21lbnRzOmQsaGVpZ2h0U2VnbWVudHM6ZSxvcGVuRW5kZWQ6Zix0aGV0YVN0YXJ0OmcsdGhldGFMZW5ndGg6aH07YT12b2lkIDAhPT1hP2E6MjA7Yj12b2lkIDAhPT1iP2I6MjA7Yz12b2lkIDAhPT1jP2M6MTAwO2Q9ZHx8ODtlPWV8fDE7Zj12b2lkIDAhPT1mP2Y6ITE7Zz12b2lkIDAhPT1nP2c6MDtoPXZvaWQgMCE9PWg/aDoyKk1hdGguUEk7dmFyIGs9Yy8yLGwscCxxPVtdLG49W107Zm9yKHA9MDtwPD1lO3ArKyl7dmFyIHQ9W10scj1bXSxzPXAvZSx1PXMqKGItYSkrYTtmb3IobD0wO2w8PWQ7bCsrKXt2YXIgdj1sL2QseD1uZXcgVEhSRUUuVmVjdG9yMzt4Lng9dSpNYXRoLnNpbih2KmgrXHJcbmcpO3gueT0tcypjK2s7eC56PXUqTWF0aC5jb3ModipoK2cpO3RoaXMudmVydGljZXMucHVzaCh4KTt0LnB1c2godGhpcy52ZXJ0aWNlcy5sZW5ndGgtMSk7ci5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKHYsMS1zKSl9cS5wdXNoKHQpO24ucHVzaChyKX1jPShiLWEpL2M7Zm9yKGw9MDtsPGQ7bCsrKWZvcigwIT09YT8oZz10aGlzLnZlcnRpY2VzW3FbMF1bbF1dLmNsb25lKCksaD10aGlzLnZlcnRpY2VzW3FbMF1bbCsxXV0uY2xvbmUoKSk6KGc9dGhpcy52ZXJ0aWNlc1txWzFdW2xdXS5jbG9uZSgpLGg9dGhpcy52ZXJ0aWNlc1txWzFdW2wrMV1dLmNsb25lKCkpLGcuc2V0WShNYXRoLnNxcnQoZy54KmcueCtnLnoqZy56KSpjKS5ub3JtYWxpemUoKSxoLnNldFkoTWF0aC5zcXJ0KGgueCpoLngraC56KmgueikqYykubm9ybWFsaXplKCkscD0wO3A8ZTtwKyspe3ZhciB0PXFbcF1bbF0scj1xW3ArMV1bbF0scz1xW3ArMV1bbCsxXSx1PXFbcF1bbCsxXSx2PWcuY2xvbmUoKSx4PWcuY2xvbmUoKSxcclxuRD1oLmNsb25lKCksdz1oLmNsb25lKCkseT1uW3BdW2xdLmNsb25lKCksQT1uW3ArMV1bbF0uY2xvbmUoKSxFPW5bcCsxXVtsKzFdLmNsb25lKCksRz1uW3BdW2wrMV0uY2xvbmUoKTt0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHQscix1LFt2LHgsd10pKTt0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbeSxBLEddKTt0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHIscyx1LFt4LmNsb25lKCksRCx3LmNsb25lKCldKSk7dGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW0EuY2xvbmUoKSxFLEcuY2xvbmUoKV0pfWlmKCExPT09ZiYmMDxhKWZvcih0aGlzLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoMCxrLDApKSxsPTA7bDxkO2wrKyl0PXFbMF1bbF0scj1xWzBdW2wrMV0scz10aGlzLnZlcnRpY2VzLmxlbmd0aC0xLHY9bmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApLHg9bmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApLEQ9bmV3IFRIUkVFLlZlY3RvcjMoMCxcclxuMSwwKSx5PW5bMF1bbF0uY2xvbmUoKSxBPW5bMF1bbCsxXS5jbG9uZSgpLEU9bmV3IFRIUkVFLlZlY3RvcjIoQS54LDApLHRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTModCxyLHMsW3YseCxEXSkpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFt5LEEsRV0pO2lmKCExPT09ZiYmMDxiKWZvcih0aGlzLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoMCwtaywwKSksbD0wO2w8ZDtsKyspdD1xW2VdW2wrMV0scj1xW2VdW2xdLHM9dGhpcy52ZXJ0aWNlcy5sZW5ndGgtMSx2PW5ldyBUSFJFRS5WZWN0b3IzKDAsLTEsMCkseD1uZXcgVEhSRUUuVmVjdG9yMygwLC0xLDApLEQ9bmV3IFRIUkVFLlZlY3RvcjMoMCwtMSwwKSx5PW5bZV1bbCsxXS5jbG9uZSgpLEE9bltlXVtsXS5jbG9uZSgpLEU9bmV3IFRIUkVFLlZlY3RvcjIoQS54LDEpLHRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTModCxyLHMsW3YseCxEXSkpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFt5LFxyXG5BLEVdKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpfTtUSFJFRS5DeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuQ3lsaW5kZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ3lsaW5kZXJHZW9tZXRyeTtUSFJFRS5FeHRydWRlR2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEmJihUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpLHRoaXMudHlwZT1cIkV4dHJ1ZGVHZW9tZXRyeVwiLGE9YSBpbnN0YW5jZW9mIEFycmF5P2E6W2FdLHRoaXMuYWRkU2hhcGVMaXN0KGEsYiksdGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKSl9O1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuRXh0cnVkZUdlb21ldHJ5O1xyXG5USFJFRS5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLmFkZFNoYXBlTGlzdD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPTA7ZDxjO2QrKyl0aGlzLmFkZFNoYXBlKGFbZF0sYil9O1xyXG5USFJFRS5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLmFkZFNoYXBlPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhLGIsYyl7Ynx8VEhSRUUuZXJyb3IoXCJUSFJFRS5FeHRydWRlR2VvbWV0cnk6IHZlYyBkb2VzIG5vdCBleGlzdFwiKTtyZXR1cm4gYi5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKGMpLmFkZChhKX1mdW5jdGlvbiBkKGEsYixjKXt2YXIgZD0xLGQ9YS54LWIueCxlPWEueS1iLnksZj1jLngtYS54LGc9Yy55LWEueSxoPWQqZCtlKmU7aWYoMUUtMTA8TWF0aC5hYnMoZCpnLWUqZikpe3ZhciBrPU1hdGguc3FydChoKSxsPU1hdGguc3FydChmKmYrZypnKSxoPWIueC1lL2s7Yj1iLnkrZC9rO2Y9KChjLngtZy9sLWgpKmctKGMueStmL2wtYikqZikvKGQqZy1lKmYpO2M9aCtkKmYtYS54O2E9YitlKmYtYS55O2Q9YypjK2EqYTtpZigyPj1kKXJldHVybiBuZXcgVEhSRUUuVmVjdG9yMihjLGEpO2Q9TWF0aC5zcXJ0KGQvMil9ZWxzZSBhPSExLDFFLTEwPGQ/MUUtMTA8ZiYmKGE9ITApOlxyXG4tMUUtMTA+ZD8tMUUtMTA+ZiYmKGE9ITApOk1hdGguc2lnbihlKT09TWF0aC5zaWduKGcpJiYoYT0hMCksYT8oYz0tZSxhPWQsZD1NYXRoLnNxcnQoaCkpOihjPWQsYT1lLGQ9TWF0aC5zcXJ0KGgvMikpO3JldHVybiBuZXcgVEhSRUUuVmVjdG9yMihjL2QsYS9kKX1mdW5jdGlvbiBlKGEsYil7dmFyIGMsZDtmb3IoTz1hLmxlbmd0aDswPD0tLU87KXtjPU87ZD1PLTE7MD5kJiYoZD1hLmxlbmd0aC0xKTtmb3IodmFyIGU9MCxmPXQrMipwLGU9MDtlPGY7ZSsrKXt2YXIgZz1vYSplLGg9b2EqKGUrMSksaz1iK2MrZyxnPWIrZCtnLGw9YitkK2gsaD1iK2MraCxrPWsrVSxnPWcrVSxsPWwrVSxoPWgrVTtJLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGssZyxoLG51bGwsbnVsbCx4KSk7SS5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhnLGwsaCxudWxsLG51bGwseCkpO2s9RC5nZW5lcmF0ZVNpZGVXYWxsVVYoSSxrLGcsbCxoKTtJLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChba1swXSxcclxua1sxXSxrWzNdXSk7SS5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2tbMV0sa1syXSxrWzNdXSl9fX1mdW5jdGlvbiBmKGEsYixjKXtJLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoYSxiLGMpKX1mdW5jdGlvbiBnKGEsYixjKXthKz1VO2IrPVU7Yys9VTtJLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGEsYixjLG51bGwsbnVsbCx2KSk7YT1ELmdlbmVyYXRlVG9wVVYoSSxhLGIsYyk7SS5mYWNlVmVydGV4VXZzWzBdLnB1c2goYSl9dmFyIGg9dm9pZCAwIT09Yi5hbW91bnQ/Yi5hbW91bnQ6MTAwLGs9dm9pZCAwIT09Yi5iZXZlbFRoaWNrbmVzcz9iLmJldmVsVGhpY2tuZXNzOjYsbD12b2lkIDAhPT1iLmJldmVsU2l6ZT9iLmJldmVsU2l6ZTprLTIscD12b2lkIDAhPT1iLmJldmVsU2VnbWVudHM/Yi5iZXZlbFNlZ21lbnRzOjMscT12b2lkIDAhPT1iLmJldmVsRW5hYmxlZD9iLmJldmVsRW5hYmxlZDohMCxuPXZvaWQgMCE9PWIuY3VydmVTZWdtZW50cz9iLmN1cnZlU2VnbWVudHM6XHJcbjEyLHQ9dm9pZCAwIT09Yi5zdGVwcz9iLnN0ZXBzOjEscj1iLmV4dHJ1ZGVQYXRoLHMsdT0hMSx2PWIubWF0ZXJpYWwseD1iLmV4dHJ1ZGVNYXRlcmlhbCxEPXZvaWQgMCE9PWIuVVZHZW5lcmF0b3I/Yi5VVkdlbmVyYXRvcjpUSFJFRS5FeHRydWRlR2VvbWV0cnkuV29ybGRVVkdlbmVyYXRvcix3LHksQSxFO3ImJihzPXIuZ2V0U3BhY2VkUG9pbnRzKHQpLHU9ITAscT0hMSx3PXZvaWQgMCE9PWIuZnJhbWVzP2IuZnJhbWVzOm5ldyBUSFJFRS5UdWJlR2VvbWV0cnkuRnJlbmV0RnJhbWVzKHIsdCwhMSkseT1uZXcgVEhSRUUuVmVjdG9yMyxBPW5ldyBUSFJFRS5WZWN0b3IzLEU9bmV3IFRIUkVFLlZlY3RvcjMpO3F8fChsPWs9cD0wKTt2YXIgRyxGLHosST10aGlzLFU9dGhpcy52ZXJ0aWNlcy5sZW5ndGgscj1hLmV4dHJhY3RQb2ludHMobiksbj1yLnNoYXBlLE09ci5ob2xlcztpZihyPSFUSFJFRS5TaGFwZS5VdGlscy5pc0Nsb2NrV2lzZShuKSl7bj1uLnJldmVyc2UoKTtGPTA7Zm9yKHo9XHJcbk0ubGVuZ3RoO0Y8ejtGKyspRz1NW0ZdLFRIUkVFLlNoYXBlLlV0aWxzLmlzQ2xvY2tXaXNlKEcpJiYoTVtGXT1HLnJldmVyc2UoKSk7cj0hMX12YXIgSD1USFJFRS5TaGFwZS5VdGlscy50cmlhbmd1bGF0ZVNoYXBlKG4sTSksTD1uO0Y9MDtmb3Ioej1NLmxlbmd0aDtGPHo7RisrKUc9TVtGXSxuPW4uY29uY2F0KEcpO3ZhciBQLE4sUixWLEosb2E9bi5sZW5ndGgsamEsaGE9SC5sZW5ndGgscj1bXSxPPTA7Uj1MLmxlbmd0aDtQPVItMTtmb3IoTj1PKzE7TzxSO08rKyxQKyssTisrKVA9PT1SJiYoUD0wKSxOPT09UiYmKE49MCkscltPXT1kKExbT10sTFtQXSxMW05dKTt2YXIgY2E9W10sYmEscWE9ci5jb25jYXQoKTtGPTA7Zm9yKHo9TS5sZW5ndGg7Rjx6O0YrKyl7Rz1NW0ZdO2JhPVtdO089MDtSPUcubGVuZ3RoO1A9Ui0xO2ZvcihOPU8rMTtPPFI7TysrLFArKyxOKyspUD09PVImJihQPTApLE49PT1SJiYoTj0wKSxiYVtPXT1kKEdbT10sR1tQXSxHW05dKTtjYS5wdXNoKGJhKTtxYT1cclxucWEuY29uY2F0KGJhKX1mb3IoUD0wO1A8cDtQKyspe1I9UC9wO1Y9ayooMS1SKTtOPWwqTWF0aC5zaW4oUipNYXRoLlBJLzIpO089MDtmb3IoUj1MLmxlbmd0aDtPPFI7TysrKUo9YyhMW09dLHJbT10sTiksZihKLngsSi55LC1WKTtGPTA7Zm9yKHo9TS5sZW5ndGg7Rjx6O0YrKylmb3IoRz1NW0ZdLGJhPWNhW0ZdLE89MCxSPUcubGVuZ3RoO088UjtPKyspSj1jKEdbT10sYmFbT10sTiksZihKLngsSi55LC1WKX1OPWw7Zm9yKE89MDtPPG9hO08rKylKPXE/YyhuW09dLHFhW09dLE4pOm5bT10sdT8oQS5jb3B5KHcubm9ybWFsc1swXSkubXVsdGlwbHlTY2FsYXIoSi54KSx5LmNvcHkody5iaW5vcm1hbHNbMF0pLm11bHRpcGx5U2NhbGFyKEoueSksRS5jb3B5KHNbMF0pLmFkZChBKS5hZGQoeSksZihFLngsRS55LEUueikpOmYoSi54LEoueSwwKTtmb3IoUj0xO1I8PXQ7UisrKWZvcihPPTA7TzxvYTtPKyspSj1xP2MobltPXSxxYVtPXSxOKTpuW09dLHU/KEEuY29weSh3Lm5vcm1hbHNbUl0pLm11bHRpcGx5U2NhbGFyKEoueCksXHJcbnkuY29weSh3LmJpbm9ybWFsc1tSXSkubXVsdGlwbHlTY2FsYXIoSi55KSxFLmNvcHkoc1tSXSkuYWRkKEEpLmFkZCh5KSxmKEUueCxFLnksRS56KSk6ZihKLngsSi55LGgvdCpSKTtmb3IoUD1wLTE7MDw9UDtQLS0pe1I9UC9wO1Y9ayooMS1SKTtOPWwqTWF0aC5zaW4oUipNYXRoLlBJLzIpO089MDtmb3IoUj1MLmxlbmd0aDtPPFI7TysrKUo9YyhMW09dLHJbT10sTiksZihKLngsSi55LGgrVik7Rj0wO2Zvcih6PU0ubGVuZ3RoO0Y8ejtGKyspZm9yKEc9TVtGXSxiYT1jYVtGXSxPPTAsUj1HLmxlbmd0aDtPPFI7TysrKUo9YyhHW09dLGJhW09dLE4pLHU/ZihKLngsSi55K3NbdC0xXS55LHNbdC0xXS54K1YpOmYoSi54LEoueSxoK1YpfShmdW5jdGlvbigpe2lmKHEpe3ZhciBhO2E9MCpvYTtmb3IoTz0wO088aGE7TysrKWphPUhbT10sZyhqYVsyXSthLGphWzFdK2EsamFbMF0rYSk7YT10KzIqcDthKj1vYTtmb3IoTz0wO088aGE7TysrKWphPUhbT10sZyhqYVswXSthLGphWzFdK2EsamFbMl0rXHJcbmEpfWVsc2V7Zm9yKE89MDtPPGhhO08rKylqYT1IW09dLGcoamFbMl0samFbMV0samFbMF0pO2ZvcihPPTA7TzxoYTtPKyspamE9SFtPXSxnKGphWzBdK29hKnQsamFbMV0rb2EqdCxqYVsyXStvYSp0KX19KSgpOyhmdW5jdGlvbigpe3ZhciBhPTA7ZShMLGEpO2ErPUwubGVuZ3RoO0Y9MDtmb3Ioej1NLmxlbmd0aDtGPHo7RisrKUc9TVtGXSxlKEcsYSksYSs9Ry5sZW5ndGh9KSgpfTtcclxuVEhSRUUuRXh0cnVkZUdlb21ldHJ5LldvcmxkVVZHZW5lcmF0b3I9e2dlbmVyYXRlVG9wVVY6ZnVuY3Rpb24oYSxiLGMsZCl7YT1hLnZlcnRpY2VzO2I9YVtiXTtjPWFbY107ZD1hW2RdO3JldHVybltuZXcgVEhSRUUuVmVjdG9yMihiLngsYi55KSxuZXcgVEhSRUUuVmVjdG9yMihjLngsYy55KSxuZXcgVEhSRUUuVmVjdG9yMihkLngsZC55KV19LGdlbmVyYXRlU2lkZVdhbGxVVjpmdW5jdGlvbihhLGIsYyxkLGUpe2E9YS52ZXJ0aWNlcztiPWFbYl07Yz1hW2NdO2Q9YVtkXTtlPWFbZV07cmV0dXJuLjAxPk1hdGguYWJzKGIueS1jLnkpP1tuZXcgVEhSRUUuVmVjdG9yMihiLngsMS1iLnopLG5ldyBUSFJFRS5WZWN0b3IyKGMueCwxLWMueiksbmV3IFRIUkVFLlZlY3RvcjIoZC54LDEtZC56KSxuZXcgVEhSRUUuVmVjdG9yMihlLngsMS1lLnopXTpbbmV3IFRIUkVFLlZlY3RvcjIoYi55LDEtYi56KSxuZXcgVEhSRUUuVmVjdG9yMihjLnksMS1jLnopLG5ldyBUSFJFRS5WZWN0b3IyKGQueSxcclxuMS1kLnopLG5ldyBUSFJFRS5WZWN0b3IyKGUueSwxLWUueildfX07VEhSRUUuU2hhcGVHZW9tZXRyeT1mdW5jdGlvbihhLGIpe1RIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU2hhcGVHZW9tZXRyeVwiOyExPT09YSBpbnN0YW5jZW9mIEFycmF5JiYoYT1bYV0pO3RoaXMuYWRkU2hhcGVMaXN0KGEsYik7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKX07VEhSRUUuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlNoYXBlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNoYXBlR2VvbWV0cnk7VEhSRUUuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUuYWRkU2hhcGVMaXN0PWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKXRoaXMuYWRkU2hhcGUoYVtjXSxiKTtyZXR1cm4gdGhpc307XHJcblRIUkVFLlNoYXBlR2VvbWV0cnkucHJvdG90eXBlLmFkZFNoYXBlPWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9e30pO3ZhciBjPWIubWF0ZXJpYWwsZD12b2lkIDA9PT1iLlVWR2VuZXJhdG9yP1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeS5Xb3JsZFVWR2VuZXJhdG9yOmIuVVZHZW5lcmF0b3IsZSxmLGcsaD10aGlzLnZlcnRpY2VzLmxlbmd0aDtlPWEuZXh0cmFjdFBvaW50cyh2b2lkIDAhPT1iLmN1cnZlU2VnbWVudHM/Yi5jdXJ2ZVNlZ21lbnRzOjEyKTt2YXIgaz1lLnNoYXBlLGw9ZS5ob2xlcztpZighVEhSRUUuU2hhcGUuVXRpbHMuaXNDbG9ja1dpc2UoaykpZm9yKGs9ay5yZXZlcnNlKCksZT0wLGY9bC5sZW5ndGg7ZTxmO2UrKylnPWxbZV0sVEhSRUUuU2hhcGUuVXRpbHMuaXNDbG9ja1dpc2UoZykmJihsW2VdPWcucmV2ZXJzZSgpKTt2YXIgcD1USFJFRS5TaGFwZS5VdGlscy50cmlhbmd1bGF0ZVNoYXBlKGssbCk7ZT0wO2ZvcihmPWwubGVuZ3RoO2U8ZjtlKyspZz1sW2VdLFxyXG5rPWsuY29uY2F0KGcpO2w9ay5sZW5ndGg7Zj1wLmxlbmd0aDtmb3IoZT0wO2U8bDtlKyspZz1rW2VdLHRoaXMudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyhnLngsZy55LDApKTtmb3IoZT0wO2U8ZjtlKyspbD1wW2VdLGs9bFswXStoLGc9bFsxXStoLGw9bFsyXStoLHRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoayxnLGwsbnVsbCxudWxsLGMpKSx0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChkLmdlbmVyYXRlVG9wVVYodGhpcyxrLGcsbCkpfTtcclxuVEhSRUUuTGF0aGVHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxhdGhlR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3BvaW50czphLHNlZ21lbnRzOmIscGhpU3RhcnQ6YyxwaGlMZW5ndGg6ZH07Yj1ifHwxMjtjPWN8fDA7ZD1kfHwyKk1hdGguUEk7Zm9yKHZhciBlPTEvKGEubGVuZ3RoLTEpLGY9MS9iLGc9MCxoPWI7Zzw9aDtnKyspZm9yKHZhciBrPWMrZypmKmQsbD1NYXRoLmNvcyhrKSxwPU1hdGguc2luKGspLGs9MCxxPWEubGVuZ3RoO2s8cTtrKyspe3ZhciBuPWFba10sdD1uZXcgVEhSRUUuVmVjdG9yMzt0Lng9bCpuLngtcCpuLnk7dC55PXAqbi54K2wqbi55O3Quej1uLno7dGhpcy52ZXJ0aWNlcy5wdXNoKHQpfWM9YS5sZW5ndGg7Zz0wO2ZvcihoPWI7ZzxoO2crKylmb3Ioaz0wLHE9YS5sZW5ndGgtMTtrPHE7aysrKXtiPXA9aytjKmc7ZD1wK2M7dmFyIGw9cCsxK2MscD1wKzEsbj1nKmYsdD1rKmUscj1cclxubitmLHM9dCtlO3RoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoYixkLHApKTt0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbbmV3IFRIUkVFLlZlY3RvcjIobix0KSxuZXcgVEhSRUUuVmVjdG9yMihyLHQpLG5ldyBUSFJFRS5WZWN0b3IyKG4scyldKTt0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGQsbCxwKSk7dGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW25ldyBUSFJFRS5WZWN0b3IyKHIsdCksbmV3IFRIUkVFLlZlY3RvcjIocixzKSxuZXcgVEhSRUUuVmVjdG9yMihuLHMpXSl9dGhpcy5tZXJnZVZlcnRpY2VzKCk7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCl9O1RIUkVFLkxhdGhlR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5MYXRoZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5MYXRoZUdlb21ldHJ5O1xyXG5USFJFRS5QbGFuZUdlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQpe2NvbnNvbGUuaW5mbyhcIlRIUkVFLlBsYW5lR2VvbWV0cnk6IENvbnNpZGVyIHVzaW5nIFRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkgZm9yIGxvd2VyIG1lbW9yeSBmb290cHJpbnQuXCIpO1RIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUGxhbmVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17d2lkdGg6YSxoZWlnaHQ6Yix3aWR0aFNlZ21lbnRzOmMsaGVpZ2h0U2VnbWVudHM6ZH07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IFRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkoYSxiLGMsZCkpfTtUSFJFRS5QbGFuZUdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuUGxhbmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuUGxhbmVHZW9tZXRyeTtcclxuVEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5CdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBsYW5lQnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3dpZHRoOmEsaGVpZ2h0OmIsd2lkdGhTZWdtZW50czpjLGhlaWdodFNlZ21lbnRzOmR9O3ZhciBlPWEvMixmPWIvMjtjPWN8fDE7ZD1kfHwxO3ZhciBnPWMrMSxoPWQrMSxrPWEvYyxsPWIvZDtiPW5ldyBGbG9hdDMyQXJyYXkoZypoKjMpO2E9bmV3IEZsb2F0MzJBcnJheShnKmgqMyk7Zm9yKHZhciBwPW5ldyBGbG9hdDMyQXJyYXkoZypoKjIpLHE9MCxuPTAsdD0wO3Q8aDt0KyspZm9yKHZhciByPXQqbC1mLHM9MDtzPGc7cysrKWJbcV09cyprLWUsYltxKzFdPS1yLGFbcSsyXT0xLHBbbl09cy9jLHBbbisxXT0xLXQvZCxxKz0zLG4rPTI7cT0wO2U9bmV3ICg2NTUzNTxiLmxlbmd0aC8zP1VpbnQzMkFycmF5OlVpbnQxNkFycmF5KShjKmQqNik7Zm9yKHQ9MDt0PGQ7dCsrKWZvcihzPVxyXG4wO3M8YztzKyspZj1zK2cqKHQrMSksaD1zKzErZyoodCsxKSxrPXMrMStnKnQsZVtxXT1zK2cqdCxlW3ErMV09ZixlW3ErMl09ayxlW3ErM109ZixlW3ErNF09aCxlW3ErNV09ayxxKz02O3RoaXMuYWRkQXR0cmlidXRlKFwiaW5kZXhcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGUsMSkpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShhLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwLDIpKX07VEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLlJpbmdHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkLGUsZil7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJSaW5nR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e2lubmVyUmFkaXVzOmEsb3V0ZXJSYWRpdXM6Yix0aGV0YVNlZ21lbnRzOmMscGhpU2VnbWVudHM6ZCx0aGV0YVN0YXJ0OmUsdGhldGFMZW5ndGg6Zn07YT1hfHwwO2I9Ynx8NTA7ZT12b2lkIDAhPT1lP2U6MDtmPXZvaWQgMCE9PWY/ZjoyKk1hdGguUEk7Yz12b2lkIDAhPT1jP01hdGgubWF4KDMsYyk6ODtkPXZvaWQgMCE9PWQ/TWF0aC5tYXgoMSxkKTo4O3ZhciBnLGg9W10saz1hLGw9KGItYSkvZDtmb3IoYT0wO2E8ZCsxO2ErKyl7Zm9yKGc9MDtnPGMrMTtnKyspe3ZhciBwPW5ldyBUSFJFRS5WZWN0b3IzLHE9ZStnL2MqZjtwLng9aypNYXRoLmNvcyhxKTtwLnk9aypNYXRoLnNpbihxKTt0aGlzLnZlcnRpY2VzLnB1c2gocCk7aC5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKChwLngvYisxKS8yLFxyXG4ocC55L2IrMSkvMikpfWsrPWx9Yj1uZXcgVEhSRUUuVmVjdG9yMygwLDAsMSk7Zm9yKGE9MDthPGQ7YSsrKWZvcihlPWEqKGMrMSksZz0wO2c8YztnKyspZj1xPWcrZSxsPXErYysxLHA9cStjKzIsdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhmLGwscCxbYi5jbG9uZSgpLGIuY2xvbmUoKSxiLmNsb25lKCldKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2hbZl0uY2xvbmUoKSxoW2xdLmNsb25lKCksaFtwXS5jbG9uZSgpXSksZj1xLGw9cStjKzIscD1xKzEsdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhmLGwscCxbYi5jbG9uZSgpLGIuY2xvbmUoKSxiLmNsb25lKCldKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2hbZl0uY2xvbmUoKSxoW2xdLmNsb25lKCksaFtwXS5jbG9uZSgpXSk7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt0aGlzLmJvdW5kaW5nU3BoZXJlPW5ldyBUSFJFRS5TcGhlcmUobmV3IFRIUkVFLlZlY3RvcjMsayl9O1xyXG5USFJFRS5SaW5nR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5SaW5nR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlJpbmdHZW9tZXRyeTtcclxuVEhSRUUuU3BoZXJlR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTcGhlcmVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsd2lkdGhTZWdtZW50czpiLGhlaWdodFNlZ21lbnRzOmMscGhpU3RhcnQ6ZCxwaGlMZW5ndGg6ZSx0aGV0YVN0YXJ0OmYsdGhldGFMZW5ndGg6Z307YT1hfHw1MDtiPU1hdGgubWF4KDMsTWF0aC5mbG9vcihiKXx8OCk7Yz1NYXRoLm1heCgyLE1hdGguZmxvb3IoYyl8fDYpO2Q9dm9pZCAwIT09ZD9kOjA7ZT12b2lkIDAhPT1lP2U6MipNYXRoLlBJO2Y9dm9pZCAwIT09Zj9mOjA7Zz12b2lkIDAhPT1nP2c6TWF0aC5QSTt2YXIgaCxrLGw9W10scD1bXTtmb3Ioaz0wO2s8PWM7aysrKXt2YXIgcT1bXSxuPVtdO2ZvcihoPTA7aDw9YjtoKyspe3ZhciB0PWgvYixyPWsvYyxzPW5ldyBUSFJFRS5WZWN0b3IzO3MueD0tYSpNYXRoLmNvcyhkK3QqZSkqTWF0aC5zaW4oZityKmcpO1xyXG5zLnk9YSpNYXRoLmNvcyhmK3IqZyk7cy56PWEqTWF0aC5zaW4oZCt0KmUpKk1hdGguc2luKGYrcipnKTt0aGlzLnZlcnRpY2VzLnB1c2gocyk7cS5wdXNoKHRoaXMudmVydGljZXMubGVuZ3RoLTEpO24ucHVzaChuZXcgVEhSRUUuVmVjdG9yMih0LDEtcikpfWwucHVzaChxKTtwLnB1c2gobil9Zm9yKGs9MDtrPGM7aysrKWZvcihoPTA7aDxiO2grKyl7ZD1sW2tdW2grMV07ZT1sW2tdW2hdO2Y9bFtrKzFdW2hdO2c9bFtrKzFdW2grMV07dmFyIHE9dGhpcy52ZXJ0aWNlc1tkXS5jbG9uZSgpLm5vcm1hbGl6ZSgpLG49dGhpcy52ZXJ0aWNlc1tlXS5jbG9uZSgpLm5vcm1hbGl6ZSgpLHQ9dGhpcy52ZXJ0aWNlc1tmXS5jbG9uZSgpLm5vcm1hbGl6ZSgpLHI9dGhpcy52ZXJ0aWNlc1tnXS5jbG9uZSgpLm5vcm1hbGl6ZSgpLHM9cFtrXVtoKzFdLmNsb25lKCksdT1wW2tdW2hdLmNsb25lKCksdj1wW2srMV1baF0uY2xvbmUoKSx4PXBbaysxXVtoKzFdLmNsb25lKCk7TWF0aC5hYnModGhpcy52ZXJ0aWNlc1tkXS55KT09PVxyXG5hPyhzLng9KHMueCt1LngpLzIsdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhkLGYsZyxbcSx0LHJdKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW3Msdix4XSkpOk1hdGguYWJzKHRoaXMudmVydGljZXNbZl0ueSk9PT1hPyh2Lng9KHYueCt4LngpLzIsdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhkLGUsZixbcSxuLHRdKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW3MsdSx2XSkpOih0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGQsZSxnLFtxLG4scl0pKSx0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbcyx1LHhdKSx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGUsZixnLFtuLmNsb25lKCksdCxyLmNsb25lKCldKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW3UuY2xvbmUoKSx2LHguY2xvbmUoKV0pKX10aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO3RoaXMuYm91bmRpbmdTcGhlcmU9bmV3IFRIUkVFLlNwaGVyZShuZXcgVEhSRUUuVmVjdG9yMyxcclxuYSl9O1RIUkVFLlNwaGVyZUdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuU3BoZXJlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNwaGVyZUdlb21ldHJ5O1RIUkVFLlRleHRHZW9tZXRyeT1mdW5jdGlvbihhLGIpe2I9Ynx8e307dmFyIGM9VEhSRUUuRm9udFV0aWxzLmdlbmVyYXRlU2hhcGVzKGEsYik7Yi5hbW91bnQ9dm9pZCAwIT09Yi5oZWlnaHQ/Yi5oZWlnaHQ6NTA7dm9pZCAwPT09Yi5iZXZlbFRoaWNrbmVzcyYmKGIuYmV2ZWxUaGlja25lc3M9MTApO3ZvaWQgMD09PWIuYmV2ZWxTaXplJiYoYi5iZXZlbFNpemU9OCk7dm9pZCAwPT09Yi5iZXZlbEVuYWJsZWQmJihiLmJldmVsRW5hYmxlZD0hMSk7VEhSRUUuRXh0cnVkZUdlb21ldHJ5LmNhbGwodGhpcyxjLGIpO3RoaXMudHlwZT1cIlRleHRHZW9tZXRyeVwifTtUSFJFRS5UZXh0R2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblRIUkVFLlRleHRHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVGV4dEdlb21ldHJ5O1xyXG5USFJFRS5Ub3J1c0dlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQsZSl7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUb3J1c0dlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSx0dWJlOmIscmFkaWFsU2VnbWVudHM6Yyx0dWJ1bGFyU2VnbWVudHM6ZCxhcmM6ZX07YT1hfHwxMDA7Yj1ifHw0MDtjPWN8fDg7ZD1kfHw2O2U9ZXx8MipNYXRoLlBJO2Zvcih2YXIgZj1uZXcgVEhSRUUuVmVjdG9yMyxnPVtdLGg9W10saz0wO2s8PWM7aysrKWZvcih2YXIgbD0wO2w8PWQ7bCsrKXt2YXIgcD1sL2QqZSxxPWsvYypNYXRoLlBJKjI7Zi54PWEqTWF0aC5jb3MocCk7Zi55PWEqTWF0aC5zaW4ocCk7dmFyIG49bmV3IFRIUkVFLlZlY3RvcjM7bi54PShhK2IqTWF0aC5jb3MocSkpKk1hdGguY29zKHApO24ueT0oYStiKk1hdGguY29zKHEpKSpNYXRoLnNpbihwKTtuLno9YipNYXRoLnNpbihxKTt0aGlzLnZlcnRpY2VzLnB1c2gobik7Zy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKGwvXHJcbmQsay9jKSk7aC5wdXNoKG4uY2xvbmUoKS5zdWIoZikubm9ybWFsaXplKCkpfWZvcihrPTE7azw9YztrKyspZm9yKGw9MTtsPD1kO2wrKylhPShkKzEpKmsrbC0xLGI9KGQrMSkqKGstMSkrbC0xLGU9KGQrMSkqKGstMSkrbCxmPShkKzEpKmsrbCxwPW5ldyBUSFJFRS5GYWNlMyhhLGIsZixbaFthXS5jbG9uZSgpLGhbYl0uY2xvbmUoKSxoW2ZdLmNsb25lKCldKSx0aGlzLmZhY2VzLnB1c2gocCksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2dbYV0uY2xvbmUoKSxnW2JdLmNsb25lKCksZ1tmXS5jbG9uZSgpXSkscD1uZXcgVEhSRUUuRmFjZTMoYixlLGYsW2hbYl0uY2xvbmUoKSxoW2VdLmNsb25lKCksaFtmXS5jbG9uZSgpXSksdGhpcy5mYWNlcy5wdXNoKHApLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtnW2JdLmNsb25lKCksZ1tlXS5jbG9uZSgpLGdbZl0uY2xvbmUoKV0pO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCl9O1xyXG5USFJFRS5Ub3J1c0dlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuVG9ydXNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVG9ydXNHZW9tZXRyeTtcclxuVEhSRUUuVG9ydXNLbm90R2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7ZnVuY3Rpb24gaChhLGIsYyxkLGUpe3ZhciBmPU1hdGguY29zKGEpLGc9TWF0aC5zaW4oYSk7YSo9Yi9jO2I9TWF0aC5jb3MoYSk7Zio9ZCooMitiKSouNTtnPWQqKDIrYikqZyouNTtkPWUqZCpNYXRoLnNpbihhKSouNTtyZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjMoZixnLGQpfVRIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVG9ydXNLbm90R2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLHR1YmU6YixyYWRpYWxTZWdtZW50czpjLHR1YnVsYXJTZWdtZW50czpkLHA6ZSxxOmYsaGVpZ2h0U2NhbGU6Z307YT1hfHwxMDA7Yj1ifHw0MDtjPWN8fDY0O2Q9ZHx8ODtlPWV8fDI7Zj1mfHwzO2c9Z3x8MTtmb3IodmFyIGs9QXJyYXkoYyksbD1uZXcgVEhSRUUuVmVjdG9yMyxwPW5ldyBUSFJFRS5WZWN0b3IzLHE9bmV3IFRIUkVFLlZlY3RvcjMsbj0wO248YzsrK24pe2tbbl09XHJcbkFycmF5KGQpO3ZhciB0PW4vYyoyKmUqTWF0aC5QSSxyPWgodCxmLGUsYSxnKSx0PWgodCsuMDEsZixlLGEsZyk7bC5zdWJWZWN0b3JzKHQscik7cC5hZGRWZWN0b3JzKHQscik7cS5jcm9zc1ZlY3RvcnMobCxwKTtwLmNyb3NzVmVjdG9ycyhxLGwpO3Eubm9ybWFsaXplKCk7cC5ub3JtYWxpemUoKTtmb3IodD0wO3Q8ZDsrK3Qpe3ZhciBzPXQvZCoyKk1hdGguUEksdT0tYipNYXRoLmNvcyhzKSxzPWIqTWF0aC5zaW4ocyksdj1uZXcgVEhSRUUuVmVjdG9yMzt2Lng9ci54K3UqcC54K3MqcS54O3YueT1yLnkrdSpwLnkrcypxLnk7di56PXIueit1KnAueitzKnEuejtrW25dW3RdPXRoaXMudmVydGljZXMucHVzaCh2KS0xfX1mb3Iobj0wO248YzsrK24pZm9yKHQ9MDt0PGQ7Kyt0KWU9KG4rMSklYyxmPSh0KzEpJWQsYT1rW25dW3RdLGI9a1tlXVt0XSxlPWtbZV1bZl0sZj1rW25dW2ZdLGc9bmV3IFRIUkVFLlZlY3RvcjIobi9jLHQvZCksbD1uZXcgVEhSRUUuVmVjdG9yMigobisxKS9jLFxyXG50L2QpLHA9bmV3IFRIUkVFLlZlY3RvcjIoKG4rMSkvYywodCsxKS9kKSxxPW5ldyBUSFJFRS5WZWN0b3IyKG4vYywodCsxKS9kKSx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGEsYixmKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2csbCxxXSksdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhiLGUsZikpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtsLmNsb25lKCkscCxxLmNsb25lKCldKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO3RoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKX07VEhSRUUuVG9ydXNLbm90R2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5Ub3J1c0tub3RHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVG9ydXNLbm90R2VvbWV0cnk7XHJcblRIUkVFLlR1YmVHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkLGUsZil7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUdWJlR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3BhdGg6YSxzZWdtZW50czpiLHJhZGl1czpjLHJhZGlhbFNlZ21lbnRzOmQsY2xvc2VkOmV9O2I9Ynx8NjQ7Yz1jfHwxO2Q9ZHx8ODtlPWV8fCExO2Y9Znx8VEhSRUUuVHViZUdlb21ldHJ5Lk5vVGFwZXI7dmFyIGc9W10saCxrLGw9YisxLHAscSxuLHQscixzPW5ldyBUSFJFRS5WZWN0b3IzLHUsdix4O3U9bmV3IFRIUkVFLlR1YmVHZW9tZXRyeS5GcmVuZXRGcmFtZXMoYSxiLGUpO3Y9dS5ub3JtYWxzO3g9dS5iaW5vcm1hbHM7dGhpcy50YW5nZW50cz11LnRhbmdlbnRzO3RoaXMubm9ybWFscz12O3RoaXMuYmlub3JtYWxzPXg7Zm9yKHU9MDt1PGw7dSsrKWZvcihnW3VdPVtdLHA9dS8obC0xKSxyPWEuZ2V0UG9pbnRBdChwKSxoPXZbdV0saz14W3VdLG49YypmKHApLHA9MDtwPGQ7cCsrKXE9XHJcbnAvZCoyKk1hdGguUEksdD0tbipNYXRoLmNvcyhxKSxxPW4qTWF0aC5zaW4ocSkscy5jb3B5KHIpLHMueCs9dCpoLngrcSprLngscy55Kz10KmgueStxKmsueSxzLnorPXQqaC56K3Eqay56LGdbdV1bcF09dGhpcy52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKHMueCxzLnkscy56KSktMTtmb3IodT0wO3U8Yjt1KyspZm9yKHA9MDtwPGQ7cCsrKWY9ZT8odSsxKSViOnUrMSxsPShwKzEpJWQsYT1nW3VdW3BdLGM9Z1tmXVtwXSxmPWdbZl1bbF0sbD1nW3VdW2xdLHM9bmV3IFRIUkVFLlZlY3RvcjIodS9iLHAvZCksdj1uZXcgVEhSRUUuVmVjdG9yMigodSsxKS9iLHAvZCkseD1uZXcgVEhSRUUuVmVjdG9yMigodSsxKS9iLChwKzEpL2QpLGg9bmV3IFRIUkVFLlZlY3RvcjIodS9iLChwKzEpL2QpLHRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoYSxjLGwpKSx0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbcyx2LGhdKSx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGMsXHJcbmYsbCkpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFt2LmNsb25lKCkseCxoLmNsb25lKCldKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO3RoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKX07VEhSRUUuVHViZUdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuVHViZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5UdWJlR2VvbWV0cnk7VEhSRUUuVHViZUdlb21ldHJ5Lk5vVGFwZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIDF9O1RIUkVFLlR1YmVHZW9tZXRyeS5TaW51c29pZGFsVGFwZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc2luKE1hdGguUEkqYSl9O1xyXG5USFJFRS5UdWJlR2VvbWV0cnkuRnJlbmV0RnJhbWVzPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1uZXcgVEhSRUUuVmVjdG9yMyxlPVtdLGY9W10sZz1bXSxoPW5ldyBUSFJFRS5WZWN0b3IzLGs9bmV3IFRIUkVFLk1hdHJpeDQ7Yis9MTt2YXIgbCxwLHE7dGhpcy50YW5nZW50cz1lO3RoaXMubm9ybWFscz1mO3RoaXMuYmlub3JtYWxzPWc7Zm9yKGw9MDtsPGI7bCsrKXA9bC8oYi0xKSxlW2xdPWEuZ2V0VGFuZ2VudEF0KHApLGVbbF0ubm9ybWFsaXplKCk7ZlswXT1uZXcgVEhSRUUuVmVjdG9yMztnWzBdPW5ldyBUSFJFRS5WZWN0b3IzO2E9TnVtYmVyLk1BWF9WQUxVRTtsPU1hdGguYWJzKGVbMF0ueCk7cD1NYXRoLmFicyhlWzBdLnkpO3E9TWF0aC5hYnMoZVswXS56KTtsPD1hJiYoYT1sLGQuc2V0KDEsMCwwKSk7cDw9YSYmKGE9cCxkLnNldCgwLDEsMCkpO3E8PWEmJmQuc2V0KDAsMCwxKTtoLmNyb3NzVmVjdG9ycyhlWzBdLGQpLm5vcm1hbGl6ZSgpO2ZbMF0uY3Jvc3NWZWN0b3JzKGVbMF0sXHJcbmgpO2dbMF0uY3Jvc3NWZWN0b3JzKGVbMF0sZlswXSk7Zm9yKGw9MTtsPGI7bCsrKWZbbF09ZltsLTFdLmNsb25lKCksZ1tsXT1nW2wtMV0uY2xvbmUoKSxoLmNyb3NzVmVjdG9ycyhlW2wtMV0sZVtsXSksMUUtNDxoLmxlbmd0aCgpJiYoaC5ub3JtYWxpemUoKSxkPU1hdGguYWNvcyhUSFJFRS5NYXRoLmNsYW1wKGVbbC0xXS5kb3QoZVtsXSksLTEsMSkpLGZbbF0uYXBwbHlNYXRyaXg0KGsubWFrZVJvdGF0aW9uQXhpcyhoLGQpKSksZ1tsXS5jcm9zc1ZlY3RvcnMoZVtsXSxmW2xdKTtpZihjKWZvcihkPU1hdGguYWNvcyhUSFJFRS5NYXRoLmNsYW1wKGZbMF0uZG90KGZbYi0xXSksLTEsMSkpLGQvPWItMSwwPGVbMF0uZG90KGguY3Jvc3NWZWN0b3JzKGZbMF0sZltiLTFdKSkmJihkPS1kKSxsPTE7bDxiO2wrKylmW2xdLmFwcGx5TWF0cml4NChrLm1ha2VSb3RhdGlvbkF4aXMoZVtsXSxkKmwpKSxnW2xdLmNyb3NzVmVjdG9ycyhlW2xdLGZbbF0pfTtcclxuVEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSl7dmFyIGI9YS5ub3JtYWxpemUoKS5jbG9uZSgpO2IuaW5kZXg9ay52ZXJ0aWNlcy5wdXNoKGIpLTE7dmFyIGM9TWF0aC5hdGFuMihhLnosLWEueCkvMi9NYXRoLlBJKy41O2E9TWF0aC5hdGFuMigtYS55LE1hdGguc3FydChhLngqYS54K2EueiphLnopKS9NYXRoLlBJKy41O2IudXY9bmV3IFRIUkVFLlZlY3RvcjIoYywxLWEpO3JldHVybiBifWZ1bmN0aW9uIGYoYSxiLGMpe3ZhciBkPW5ldyBUSFJFRS5GYWNlMyhhLmluZGV4LGIuaW5kZXgsYy5pbmRleCxbYS5jbG9uZSgpLGIuY2xvbmUoKSxjLmNsb25lKCldKTtrLmZhY2VzLnB1c2goZCk7dS5jb3B5KGEpLmFkZChiKS5hZGQoYykuZGl2aWRlU2NhbGFyKDMpO2Q9TWF0aC5hdGFuMih1LnosLXUueCk7ay5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2goYS51dixhLGQpLGgoYi51dixiLGQpLGgoYy51dixjLGQpXSl9ZnVuY3Rpb24gZyhhLFxyXG5iKXtmb3IodmFyIGM9TWF0aC5wb3coMixiKSxkPWUoay52ZXJ0aWNlc1thLmFdKSxnPWUoay52ZXJ0aWNlc1thLmJdKSxoPWUoay52ZXJ0aWNlc1thLmNdKSxsPVtdLG49MDtuPD1jO24rKyl7bFtuXT1bXTtmb3IodmFyIHA9ZShkLmNsb25lKCkubGVycChoLG4vYykpLHE9ZShnLmNsb25lKCkubGVycChoLG4vYykpLHM9Yy1uLHI9MDtyPD1zO3IrKylsW25dW3JdPTA9PXImJm49PWM/cDplKHAuY2xvbmUoKS5sZXJwKHEsci9zKSl9Zm9yKG49MDtuPGM7bisrKWZvcihyPTA7cjwyKihjLW4pLTE7cisrKWQ9TWF0aC5mbG9vcihyLzIpLDA9PXIlMj9mKGxbbl1bZCsxXSxsW24rMV1bZF0sbFtuXVtkXSk6ZihsW25dW2QrMV0sbFtuKzFdW2QrMV0sbFtuKzFdW2RdKX1mdW5jdGlvbiBoKGEsYixjKXswPmMmJjE9PT1hLngmJihhPW5ldyBUSFJFRS5WZWN0b3IyKGEueC0xLGEueSkpOzA9PT1iLngmJjA9PT1iLnomJihhPW5ldyBUSFJFRS5WZWN0b3IyKGMvMi9NYXRoLlBJKy41LGEueSkpO3JldHVybiBhLmNsb25lKCl9XHJcblRIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUG9seWhlZHJvbkdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXt2ZXJ0aWNlczphLGluZGljZXM6YixyYWRpdXM6YyxkZXRhaWw6ZH07Yz1jfHwxO2Q9ZHx8MDtmb3IodmFyIGs9dGhpcyxsPTAscD1hLmxlbmd0aDtsPHA7bCs9MyllKG5ldyBUSFJFRS5WZWN0b3IzKGFbbF0sYVtsKzFdLGFbbCsyXSkpO2E9dGhpcy52ZXJ0aWNlcztmb3IodmFyIHE9W10sbj1sPTAscD1iLmxlbmd0aDtsPHA7bCs9MyxuKyspe3ZhciB0PWFbYltsXV0scj1hW2JbbCsxXV0scz1hW2JbbCsyXV07cVtuXT1uZXcgVEhSRUUuRmFjZTModC5pbmRleCxyLmluZGV4LHMuaW5kZXgsW3QuY2xvbmUoKSxyLmNsb25lKCkscy5jbG9uZSgpXSl9Zm9yKHZhciB1PW5ldyBUSFJFRS5WZWN0b3IzLGw9MCxwPXEubGVuZ3RoO2w8cDtsKyspZyhxW2xdLGQpO2w9MDtmb3IocD10aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ubGVuZ3RoO2w8cDtsKyspYj10aGlzLmZhY2VWZXJ0ZXhVdnNbMF1bbF0sXHJcbmQ9YlswXS54LGE9YlsxXS54LHE9YlsyXS54LG49TWF0aC5tYXgoZCxNYXRoLm1heChhLHEpKSx0PU1hdGgubWluKGQsTWF0aC5taW4oYSxxKSksLjk8biYmLjE+dCYmKC4yPmQmJihiWzBdLngrPTEpLC4yPmEmJihiWzFdLngrPTEpLC4yPnEmJihiWzJdLngrPTEpKTtsPTA7Zm9yKHA9dGhpcy52ZXJ0aWNlcy5sZW5ndGg7bDxwO2wrKyl0aGlzLnZlcnRpY2VzW2xdLm11bHRpcGx5U2NhbGFyKGMpO3RoaXMubWVyZ2VWZXJ0aWNlcygpO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7dGhpcy5ib3VuZGluZ1NwaGVyZT1uZXcgVEhSRUUuU3BoZXJlKG5ldyBUSFJFRS5WZWN0b3IzLGMpfTtUSFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBvbHloZWRyb25HZW9tZXRyeTtcclxuVEhSRUUuRG9kZWNhaGVkcm9uR2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLGRldGFpbDpifTt2YXIgYz0oMStNYXRoLnNxcnQoNSkpLzIsZD0xL2M7VEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5LmNhbGwodGhpcyxbLTEsLTEsLTEsLTEsLTEsMSwtMSwxLC0xLC0xLDEsMSwxLC0xLC0xLDEsLTEsMSwxLDEsLTEsMSwxLDEsMCwtZCwtYywwLC1kLGMsMCxkLC1jLDAsZCxjLC1kLC1jLDAsLWQsYywwLGQsLWMsMCxkLGMsMCwtYywwLC1kLGMsMCwtZCwtYywwLGQsYywwLGRdLFszLDExLDcsMyw3LDE1LDMsMTUsMTMsNywxOSwxNyw3LDE3LDYsNyw2LDE1LDE3LDQsOCwxNyw4LDEwLDE3LDEwLDYsOCwwLDE2LDgsMTYsMiw4LDIsMTAsMCwxMiwxLDAsMSwxOCwwLDE4LDE2LDYsMTAsMiw2LDIsMTMsNiwxMywxNSwyLDE2LDE4LDIsMTgsMywyLDMsMTMsMTgsMSw5LDE4LDksMTEsMTgsMTEsMyw0LDE0LDEyLDQsMTIsMCw0LDAsOCwxMSw5LDUsMTEsNSwxOSxcclxuMTEsMTksNywxOSw1LDE0LDE5LDE0LDQsMTksNCwxNywxLDEyLDE0LDEsMTQsNSwxLDUsOV0sYSxiKX07VEhSRUUuRG9kZWNhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5Eb2RlY2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuRG9kZWNhaGVkcm9uR2VvbWV0cnk7XHJcblRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXt2YXIgYz0oMStNYXRoLnNxcnQoNSkpLzI7VEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5LmNhbGwodGhpcyxbLTEsYywwLDEsYywwLC0xLC1jLDAsMSwtYywwLDAsLTEsYywwLDEsYywwLC0xLC1jLDAsMSwtYyxjLDAsLTEsYywwLDEsLWMsMCwtMSwtYywwLDFdLFswLDExLDUsMCw1LDEsMCwxLDcsMCw3LDEwLDAsMTAsMTEsMSw1LDksNSwxMSw0LDExLDEwLDIsMTAsNyw2LDcsMSw4LDMsOSw0LDMsNCwyLDMsMiw2LDMsNiw4LDMsOCw5LDQsOSw1LDIsNCwxMSw2LDIsMTAsOCw2LDcsOSw4LDFdLGEsYik7dGhpcy50eXBlPVwiSWNvc2FoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fTtUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnk7VEhSRUUuT2N0YWhlZHJvbkdlb21ldHJ5PWZ1bmN0aW9uKGEsYil7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxkZXRhaWw6Yn07VEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5LmNhbGwodGhpcyxbMSwwLDAsLTEsMCwwLDAsMSwwLDAsLTEsMCwwLDAsMSwwLDAsLTFdLFswLDIsNCwwLDQsMywwLDMsNSwwLDUsMiwxLDIsNSwxLDUsMywxLDMsNCwxLDQsMl0sYSxiKTt0aGlzLnR5cGU9XCJPY3RhaGVkcm9uR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLGRldGFpbDpifX07VEhSRUUuT2N0YWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuT2N0YWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5PY3RhaGVkcm9uR2VvbWV0cnk7XHJcblRIUkVFLlRldHJhaGVkcm9uR2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXtUSFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkuY2FsbCh0aGlzLFsxLDEsMSwtMSwtMSwxLC0xLDEsLTEsMSwtMSwtMV0sWzIsMSwwLDAsMywyLDEsMywwLDIsMywxXSxhLGIpO3RoaXMudHlwZT1cIlRldHJhaGVkcm9uR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLGRldGFpbDpifX07VEhSRUUuVGV0cmFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlRldHJhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlRldHJhaGVkcm9uR2VvbWV0cnk7XHJcblRIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyl7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQYXJhbWV0cmljR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e2Z1bmM6YSxzbGljZXM6YixzdGFja3M6Y307dmFyIGQ9dGhpcy52ZXJ0aWNlcyxlPXRoaXMuZmFjZXMsZj10aGlzLmZhY2VWZXJ0ZXhVdnNbMF0sZyxoLGssbCxwPWIrMTtmb3IoZz0wO2c8PWM7ZysrKWZvcihsPWcvYyxoPTA7aDw9YjtoKyspaz1oL2Isaz1hKGssbCksZC5wdXNoKGspO3ZhciBxLG4sdCxyO2ZvcihnPTA7ZzxjO2crKylmb3IoaD0wO2g8YjtoKyspYT1nKnAraCxkPWcqcCtoKzEsbD0oZysxKSpwK2grMSxrPShnKzEpKnAraCxxPW5ldyBUSFJFRS5WZWN0b3IyKGgvYixnL2MpLG49bmV3IFRIUkVFLlZlY3RvcjIoKGgrMSkvYixnL2MpLHQ9bmV3IFRIUkVFLlZlY3RvcjIoKGgrMSkvYiwoZysxKS9jKSxyPW5ldyBUSFJFRS5WZWN0b3IyKGgvYiwoZysxKS9jKSxlLnB1c2gobmV3IFRIUkVFLkZhY2UzKGEsXHJcbmQsaykpLGYucHVzaChbcSxuLHJdKSxlLnB1c2gobmV3IFRIUkVFLkZhY2UzKGQsbCxrKSksZi5wdXNoKFtuLmNsb25lKCksdCxyLmNsb25lKCldKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO3RoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKX07VEhSRUUuUGFyYW1ldHJpY0dlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuUGFyYW1ldHJpY0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5QYXJhbWV0cmljR2VvbWV0cnk7XHJcblRIUkVFLkF4aXNIZWxwZXI9ZnVuY3Rpb24oYSl7YT1hfHwxO3ZhciBiPW5ldyBGbG9hdDMyQXJyYXkoWzAsMCwwLGEsMCwwLDAsMCwwLDAsYSwwLDAsMCwwLDAsMCxhXSksYz1uZXcgRmxvYXQzMkFycmF5KFsxLDAsMCwxLC42LDAsMCwxLDAsLjYsMSwwLDAsMCwxLDAsLjYsMV0pO2E9bmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5O2EuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMykpO2EuYWRkQXR0cmlidXRlKFwiY29sb3JcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGMsMykpO2I9bmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHt2ZXJ0ZXhDb2xvcnM6VEhSRUUuVmVydGV4Q29sb3JzfSk7VEhSRUUuTGluZS5jYWxsKHRoaXMsYSxiLFRIUkVFLkxpbmVQaWVjZXMpfTtUSFJFRS5BeGlzSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtcclxuVEhSRUUuQXhpc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQXhpc0hlbHBlcjtcclxuVEhSRUUuQXJyb3dIZWxwZXI9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuR2VvbWV0cnk7YS52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwwKSxuZXcgVEhSRUUuVmVjdG9yMygwLDEsMCkpO3ZhciBiPW5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KDAsLjUsMSw1LDEpO2IuYXBwbHlNYXRyaXgoKG5ldyBUSFJFRS5NYXRyaXg0KS5tYWtlVHJhbnNsYXRpb24oMCwtLjUsMCkpO3JldHVybiBmdW5jdGlvbihjLGQsZSxmLGcsaCl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt2b2lkIDA9PT1mJiYoZj0xNjc3Njk2MCk7dm9pZCAwPT09ZSYmKGU9MSk7dm9pZCAwPT09ZyYmKGc9LjIqZSk7dm9pZCAwPT09aCYmKGg9LjIqZyk7dGhpcy5wb3NpdGlvbi5jb3B5KGQpO3RoaXMubGluZT1uZXcgVEhSRUUuTGluZShhLG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Y29sb3I6Zn0pKTt0aGlzLmxpbmUubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLmFkZCh0aGlzLmxpbmUpO1xyXG50aGlzLmNvbmU9bmV3IFRIUkVFLk1lc2goYixuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe2NvbG9yOmZ9KSk7dGhpcy5jb25lLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5hZGQodGhpcy5jb25lKTt0aGlzLnNldERpcmVjdGlvbihjKTt0aGlzLnNldExlbmd0aChlLGcsaCl9fSgpO1RIUkVFLkFycm93SGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuQXJyb3dIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkFycm93SGVscGVyO1xyXG5USFJFRS5BcnJvd0hlbHBlci5wcm90b3R5cGUuc2V0RGlyZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYjtyZXR1cm4gZnVuY3Rpb24oYyl7Ljk5OTk5PGMueT90aGlzLnF1YXRlcm5pb24uc2V0KDAsMCwwLDEpOi0uOTk5OTk+Yy55P3RoaXMucXVhdGVybmlvbi5zZXQoMSwwLDAsMCk6KGEuc2V0KGMueiwwLC1jLngpLm5vcm1hbGl6ZSgpLGI9TWF0aC5hY29zKGMueSksdGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoYSxiKSl9fSgpO1RIUkVFLkFycm93SGVscGVyLnByb3RvdHlwZS5zZXRMZW5ndGg9ZnVuY3Rpb24oYSxiLGMpe3ZvaWQgMD09PWImJihiPS4yKmEpO3ZvaWQgMD09PWMmJihjPS4yKmIpO3RoaXMubGluZS5zY2FsZS5zZXQoMSxhLWIsMSk7dGhpcy5saW5lLnVwZGF0ZU1hdHJpeCgpO3RoaXMuY29uZS5zY2FsZS5zZXQoYyxiLGMpO3RoaXMuY29uZS5wb3NpdGlvbi55PWE7dGhpcy5jb25lLnVwZGF0ZU1hdHJpeCgpfTtcclxuVEhSRUUuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldENvbG9yPWZ1bmN0aW9uKGEpe3RoaXMubGluZS5tYXRlcmlhbC5jb2xvci5zZXQoYSk7dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldChhKX07VEhSRUUuQm94SGVscGVyPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeTtiLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KDcyKSwzKSk7VEhSRUUuTGluZS5jYWxsKHRoaXMsYixuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOjE2Nzc2OTYwfSksVEhSRUUuTGluZVBpZWNlcyk7dm9pZCAwIT09YSYmdGhpcy51cGRhdGUoYSl9O1RIUkVFLkJveEhlbHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaW5lLnByb3RvdHlwZSk7VEhSRUUuQm94SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Cb3hIZWxwZXI7XHJcblRIUkVFLkJveEhlbHBlci5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGEpe3ZhciBiPWEuZ2VvbWV0cnk7bnVsbD09PWIuYm91bmRpbmdCb3gmJmIuY29tcHV0ZUJvdW5kaW5nQm94KCk7dmFyIGM9Yi5ib3VuZGluZ0JveC5taW4sYj1iLmJvdW5kaW5nQm94Lm1heCxkPXRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtkWzBdPWIueDtkWzFdPWIueTtkWzJdPWIuejtkWzNdPWMueDtkWzRdPWIueTtkWzVdPWIuejtkWzZdPWMueDtkWzddPWIueTtkWzhdPWIuejtkWzldPWMueDtkWzEwXT1jLnk7ZFsxMV09Yi56O2RbMTJdPWMueDtkWzEzXT1jLnk7ZFsxNF09Yi56O2RbMTVdPWIueDtkWzE2XT1jLnk7ZFsxN109Yi56O2RbMThdPWIueDtkWzE5XT1jLnk7ZFsyMF09Yi56O2RbMjFdPWIueDtkWzIyXT1iLnk7ZFsyM109Yi56O2RbMjRdPWIueDtkWzI1XT1iLnk7ZFsyNl09Yy56O2RbMjddPWMueDtkWzI4XT1iLnk7ZFsyOV09Yy56O2RbMzBdPWMueDtkWzMxXT1iLnk7XHJcbmRbMzJdPWMuejtkWzMzXT1jLng7ZFszNF09Yy55O2RbMzVdPWMuejtkWzM2XT1jLng7ZFszN109Yy55O2RbMzhdPWMuejtkWzM5XT1iLng7ZFs0MF09Yy55O2RbNDFdPWMuejtkWzQyXT1iLng7ZFs0M109Yy55O2RbNDRdPWMuejtkWzQ1XT1iLng7ZFs0Nl09Yi55O2RbNDddPWMuejtkWzQ4XT1iLng7ZFs0OV09Yi55O2RbNTBdPWIuejtkWzUxXT1iLng7ZFs1Ml09Yi55O2RbNTNdPWMuejtkWzU0XT1jLng7ZFs1NV09Yi55O2RbNTZdPWIuejtkWzU3XT1jLng7ZFs1OF09Yi55O2RbNTldPWMuejtkWzYwXT1jLng7ZFs2MV09Yy55O2RbNjJdPWIuejtkWzYzXT1jLng7ZFs2NF09Yy55O2RbNjVdPWMuejtkWzY2XT1iLng7ZFs2N109Yy55O2RbNjhdPWIuejtkWzY5XT1iLng7ZFs3MF09Yy55O2RbNzFdPWMuejt0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24ubmVlZHNVcGRhdGU9ITA7dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO1xyXG50aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITF9O1RIUkVFLkJvdW5kaW5nQm94SGVscGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dm9pZCAwIT09Yj9iOjg5NDc4NDg7dGhpcy5vYmplY3Q9YTt0aGlzLmJveD1uZXcgVEhSRUUuQm94MztUSFJFRS5NZXNoLmNhbGwodGhpcyxuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwxLDEpLG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7Y29sb3I6Yyx3aXJlZnJhbWU6ITB9KSl9O1RIUkVFLkJvdW5kaW5nQm94SGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1lc2gucHJvdG90eXBlKTtUSFJFRS5Cb3VuZGluZ0JveEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQm91bmRpbmdCb3hIZWxwZXI7VEhSRUUuQm91bmRpbmdCb3hIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuYm94LnNldEZyb21PYmplY3QodGhpcy5vYmplY3QpO3RoaXMuYm94LnNpemUodGhpcy5zY2FsZSk7dGhpcy5ib3guY2VudGVyKHRoaXMucG9zaXRpb24pfTtcclxuVEhSRUUuQ2FtZXJhSGVscGVyPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSxiLGQpe2MoYSxkKTtjKGIsZCl9ZnVuY3Rpb24gYyhhLGIpe2QudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyk7ZC5jb2xvcnMucHVzaChuZXcgVEhSRUUuQ29sb3IoYikpO3ZvaWQgMD09PWZbYV0mJihmW2FdPVtdKTtmW2FdLnB1c2goZC52ZXJ0aWNlcy5sZW5ndGgtMSl9dmFyIGQ9bmV3IFRIUkVFLkdlb21ldHJ5LGU9bmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtjb2xvcjoxNjc3NzIxNSx2ZXJ0ZXhDb2xvcnM6VEhSRUUuRmFjZUNvbG9yc30pLGY9e307YihcIm4xXCIsXCJuMlwiLDE2NzU1MjAwKTtiKFwibjJcIixcIm40XCIsMTY3NTUyMDApO2IoXCJuNFwiLFwibjNcIiwxNjc1NTIwMCk7YihcIm4zXCIsXCJuMVwiLDE2NzU1MjAwKTtiKFwiZjFcIixcImYyXCIsMTY3NTUyMDApO2IoXCJmMlwiLFwiZjRcIiwxNjc1NTIwMCk7YihcImY0XCIsXCJmM1wiLDE2NzU1MjAwKTtiKFwiZjNcIixcImYxXCIsMTY3NTUyMDApO2IoXCJuMVwiLFwiZjFcIiwxNjc1NTIwMCk7XHJcbmIoXCJuMlwiLFwiZjJcIiwxNjc1NTIwMCk7YihcIm4zXCIsXCJmM1wiLDE2NzU1MjAwKTtiKFwibjRcIixcImY0XCIsMTY3NTUyMDApO2IoXCJwXCIsXCJuMVwiLDE2NzExNjgwKTtiKFwicFwiLFwibjJcIiwxNjcxMTY4MCk7YihcInBcIixcIm4zXCIsMTY3MTE2ODApO2IoXCJwXCIsXCJuNFwiLDE2NzExNjgwKTtiKFwidTFcIixcInUyXCIsNDM3NzUpO2IoXCJ1MlwiLFwidTNcIiw0Mzc3NSk7YihcInUzXCIsXCJ1MVwiLDQzNzc1KTtiKFwiY1wiLFwidFwiLDE2Nzc3MjE1KTtiKFwicFwiLFwiY1wiLDMzNTU0NDMpO2IoXCJjbjFcIixcImNuMlwiLDMzNTU0NDMpO2IoXCJjbjNcIixcImNuNFwiLDMzNTU0NDMpO2IoXCJjZjFcIixcImNmMlwiLDMzNTU0NDMpO2IoXCJjZjNcIixcImNmNFwiLDMzNTU0NDMpO1RIUkVFLkxpbmUuY2FsbCh0aGlzLGQsZSxUSFJFRS5MaW5lUGllY2VzKTt0aGlzLmNhbWVyYT1hO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMucG9pbnRNYXA9Zjt0aGlzLnVwZGF0ZSgpfTtcclxuVEhSRUUuQ2FtZXJhSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtUSFJFRS5DYW1lcmFIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkNhbWVyYUhlbHBlcjtcclxuVEhSRUUuQ2FtZXJhSGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYSxiLGM9bmV3IFRIUkVFLlZlY3RvcjMsZD1uZXcgVEhSRUUuQ2FtZXJhLGU9ZnVuY3Rpb24oZSxnLGgsayl7Yy5zZXQoZyxoLGspLnVucHJvamVjdChkKTtlPWJbZV07aWYodm9pZCAwIT09ZSlmb3IoZz0wLGg9ZS5sZW5ndGg7ZzxoO2crKylhLnZlcnRpY2VzW2VbZ11dLmNvcHkoYyl9O3JldHVybiBmdW5jdGlvbigpe2E9dGhpcy5nZW9tZXRyeTtiPXRoaXMucG9pbnRNYXA7ZC5wcm9qZWN0aW9uTWF0cml4LmNvcHkodGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeCk7ZShcImNcIiwwLDAsLTEpO2UoXCJ0XCIsMCwwLDEpO2UoXCJuMVwiLC0xLC0xLC0xKTtlKFwibjJcIiwxLC0xLC0xKTtlKFwibjNcIiwtMSwxLC0xKTtlKFwibjRcIiwxLDEsLTEpO2UoXCJmMVwiLC0xLC0xLDEpO2UoXCJmMlwiLDEsLTEsMSk7ZShcImYzXCIsLTEsMSwxKTtlKFwiZjRcIiwxLDEsMSk7ZShcInUxXCIsLjcsMS4xLC0xKTtlKFwidTJcIiwtLjcsMS4xLFxyXG4tMSk7ZShcInUzXCIsMCwyLC0xKTtlKFwiY2YxXCIsLTEsMCwxKTtlKFwiY2YyXCIsMSwwLDEpO2UoXCJjZjNcIiwwLC0xLDEpO2UoXCJjZjRcIiwwLDEsMSk7ZShcImNuMVwiLC0xLDAsLTEpO2UoXCJjbjJcIiwxLDAsLTEpO2UoXCJjbjNcIiwwLC0xLC0xKTtlKFwiY240XCIsMCwxLC0xKTthLnZlcnRpY2VzTmVlZFVwZGF0ZT0hMH19KCk7XHJcblRIUkVFLkRpcmVjdGlvbmFsTGlnaHRIZWxwZXI9ZnVuY3Rpb24oYSxiKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMubGlnaHQ9YTt0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7Yj1ifHwxO3ZhciBjPW5ldyBUSFJFRS5HZW9tZXRyeTtjLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoLWIsYiwwKSxuZXcgVEhSRUUuVmVjdG9yMyhiLGIsMCksbmV3IFRIUkVFLlZlY3RvcjMoYiwtYiwwKSxuZXcgVEhSRUUuVmVjdG9yMygtYiwtYiwwKSxuZXcgVEhSRUUuVmVjdG9yMygtYixiLDApKTt2YXIgZD1uZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2ZvZzohMX0pO2QuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSk7dGhpcy5saWdodFBsYW5lPW5ldyBUSFJFRS5MaW5lKGMsZCk7dGhpcy5hZGQodGhpcy5saWdodFBsYW5lKTtcclxuYz1uZXcgVEhSRUUuR2VvbWV0cnk7Yy52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzKTtkPW5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Zm9nOiExfSk7ZC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLnRhcmdldExpbmU9bmV3IFRIUkVFLkxpbmUoYyxkKTt0aGlzLmFkZCh0aGlzLnRhcmdldExpbmUpO3RoaXMudXBkYXRlKCl9O1RIUkVFLkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5EaXJlY3Rpb25hbExpZ2h0SGVscGVyO1xyXG5USFJFRS5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5saWdodFBsYW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTt0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuZGlzcG9zZSgpO3RoaXMudGFyZ2V0TGluZS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmRpc3Bvc2UoKX07XHJcblRIUkVFLkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjMsYz1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXthLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkKTtiLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCk7Yy5zdWJWZWN0b3JzKGIsYSk7dGhpcy5saWdodFBsYW5lLmxvb2tBdChjKTt0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSk7dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LnZlcnRpY2VzWzFdLmNvcHkoYyk7dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZT0hMDt0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IpfX0oKTtcclxuVEhSRUUuRWRnZXNIZWxwZXI9ZnVuY3Rpb24oYSxiLGMpe2I9dm9pZCAwIT09Yj9iOjE2Nzc3MjE1O2M9TWF0aC5jb3MoVEhSRUUuTWF0aC5kZWdUb1JhZCh2b2lkIDAhPT1jP2M6MSkpO3ZhciBkPVswLDBdLGU9e30sZj1mdW5jdGlvbihhLGIpe3JldHVybiBhLWJ9LGc9W1wiYVwiLFwiYlwiLFwiY1wiXSxoPW5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSxrO2EuZ2VvbWV0cnkgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeT8oaz1uZXcgVEhSRUUuR2VvbWV0cnksay5mcm9tQnVmZmVyR2VvbWV0cnkoYS5nZW9tZXRyeSkpOms9YS5nZW9tZXRyeS5jbG9uZSgpO2subWVyZ2VWZXJ0aWNlcygpO2suY29tcHV0ZUZhY2VOb3JtYWxzKCk7dmFyIGw9ay52ZXJ0aWNlcztrPWsuZmFjZXM7Zm9yKHZhciBwPTAscT0wLG49ay5sZW5ndGg7cTxuO3ErKylmb3IodmFyIHQ9a1txXSxyPTA7Mz5yO3IrKyl7ZFswXT10W2dbcl1dO2RbMV09dFtnWyhyKzEpJTNdXTtkLnNvcnQoZik7dmFyIHM9ZC50b1N0cmluZygpO1xyXG52b2lkIDA9PT1lW3NdPyhlW3NdPXt2ZXJ0MTpkWzBdLHZlcnQyOmRbMV0sZmFjZTE6cSxmYWNlMjp2b2lkIDB9LHArKyk6ZVtzXS5mYWNlMj1xfWQ9bmV3IEZsb2F0MzJBcnJheSg2KnApO2Y9MDtmb3IocyBpbiBlKWlmKGc9ZVtzXSx2b2lkIDA9PT1nLmZhY2UyfHxrW2cuZmFjZTFdLm5vcm1hbC5kb3Qoa1tnLmZhY2UyXS5ub3JtYWwpPD1jKXA9bFtnLnZlcnQxXSxkW2YrK109cC54LGRbZisrXT1wLnksZFtmKytdPXAueixwPWxbZy52ZXJ0Ml0sZFtmKytdPXAueCxkW2YrK109cC55LGRbZisrXT1wLno7aC5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoZCwzKSk7VEhSRUUuTGluZS5jYWxsKHRoaXMsaCxuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOmJ9KSxUSFJFRS5MaW5lUGllY2VzKTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMX07XHJcblRIUkVFLkVkZ2VzSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtUSFJFRS5FZGdlc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuRWRnZXNIZWxwZXI7XHJcblRIUkVFLkZhY2VOb3JtYWxzSGVscGVyPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMub2JqZWN0PWE7dGhpcy5zaXplPXZvaWQgMCE9PWI/YjoxO2E9dm9pZCAwIT09Yz9jOjE2Nzc2OTYwO2Q9dm9pZCAwIT09ZD9kOjE7Yj1uZXcgVEhSRUUuR2VvbWV0cnk7Yz0wO2Zvcih2YXIgZT10aGlzLm9iamVjdC5nZW9tZXRyeS5mYWNlcy5sZW5ndGg7YzxlO2MrKyliLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjMpO1RIUkVFLkxpbmUuY2FsbCh0aGlzLGIsbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtjb2xvcjphLGxpbmV3aWR0aDpkfSksVEhSRUUuTGluZVBpZWNlcyk7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMubm9ybWFsTWF0cml4PW5ldyBUSFJFRS5NYXRyaXgzO3RoaXMudXBkYXRlKCl9O1RIUkVFLkZhY2VOb3JtYWxzSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtcclxuVEhSRUUuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkZhY2VOb3JtYWxzSGVscGVyO1xyXG5USFJFRS5GYWNlTm9ybWFsc0hlbHBlci5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcyxiPXRoaXMub2JqZWN0LGM9Yi5nZW9tZXRyeS52ZXJ0aWNlcyxkPWIuZ2VvbWV0cnkuZmFjZXMsZT1iLm1hdHJpeFdvcmxkO2IudXBkYXRlTWF0cml4V29ybGQoITApO3RoaXMubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeChlKTtmb3IodmFyIGY9Yj0wLGc9ZC5sZW5ndGg7YjxnO2IrKyxmKz0yKXt2YXIgaD1kW2JdO2FbZl0uY29weShjW2guYV0pLmFkZChjW2guYl0pLmFkZChjW2guY10pLmRpdmlkZVNjYWxhcigzKS5hcHBseU1hdHJpeDQoZSk7YVtmKzFdLmNvcHkoaC5ub3JtYWwpLmFwcGx5TWF0cml4Myh0aGlzLm5vcm1hbE1hdHJpeCkubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKS5hZGQoYVtmXSl9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGU9ITA7cmV0dXJuIHRoaXN9O1xyXG5USFJFRS5HcmlkSGVscGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IFRIUkVFLkdlb21ldHJ5LGQ9bmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHt2ZXJ0ZXhDb2xvcnM6VEhSRUUuVmVydGV4Q29sb3JzfSk7dGhpcy5jb2xvcjE9bmV3IFRIUkVFLkNvbG9yKDQ0NzM5MjQpO3RoaXMuY29sb3IyPW5ldyBUSFJFRS5Db2xvcig4OTQ3ODQ4KTtmb3IodmFyIGU9LWE7ZTw9YTtlKz1iKXtjLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoLWEsMCxlKSxuZXcgVEhSRUUuVmVjdG9yMyhhLDAsZSksbmV3IFRIUkVFLlZlY3RvcjMoZSwwLC1hKSxuZXcgVEhSRUUuVmVjdG9yMyhlLDAsYSkpO3ZhciBmPTA9PT1lP3RoaXMuY29sb3IxOnRoaXMuY29sb3IyO2MuY29sb3JzLnB1c2goZixmLGYsZil9VEhSRUUuTGluZS5jYWxsKHRoaXMsYyxkLFRIUkVFLkxpbmVQaWVjZXMpfTtUSFJFRS5HcmlkSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtcclxuVEhSRUUuR3JpZEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuR3JpZEhlbHBlcjtUSFJFRS5HcmlkSGVscGVyLnByb3RvdHlwZS5zZXRDb2xvcnM9ZnVuY3Rpb24oYSxiKXt0aGlzLmNvbG9yMS5zZXQoYSk7dGhpcy5jb2xvcjIuc2V0KGIpO3RoaXMuZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZT0hMH07XHJcblRIUkVFLkhlbWlzcGhlcmVMaWdodEhlbHBlcj1mdW5jdGlvbihhLGIpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy5saWdodD1hO3RoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLmNvbG9ycz1bbmV3IFRIUkVFLkNvbG9yLG5ldyBUSFJFRS5Db2xvcl07dmFyIGM9bmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KGIsNCwyKTtjLmFwcGx5TWF0cml4KChuZXcgVEhSRUUuTWF0cml4NCkubWFrZVJvdGF0aW9uWCgtTWF0aC5QSS8yKSk7Zm9yKHZhciBkPTA7OD5kO2QrKyljLmZhY2VzW2RdLmNvbG9yPXRoaXMuY29sb3JzWzQ+ZD8wOjFdO2Q9bmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHt2ZXJ0ZXhDb2xvcnM6VEhSRUUuRmFjZUNvbG9ycyx3aXJlZnJhbWU6ITB9KTt0aGlzLmxpZ2h0U3BoZXJlPW5ldyBUSFJFRS5NZXNoKGMsZCk7dGhpcy5hZGQodGhpcy5saWdodFNwaGVyZSk7XHJcbnRoaXMudXBkYXRlKCl9O1RIUkVFLkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyO1RIUkVFLkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMubGlnaHRTcGhlcmUuZ2VvbWV0cnkuZGlzcG9zZSgpO3RoaXMubGlnaHRTcGhlcmUubWF0ZXJpYWwuZGlzcG9zZSgpfTtcclxuVEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXt0aGlzLmNvbG9yc1swXS5jb3B5KHRoaXMubGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLmNvbG9yc1sxXS5jb3B5KHRoaXMubGlnaHQuZ3JvdW5kQ29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLmxpZ2h0U3BoZXJlLmxvb2tBdChhLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkKS5uZWdhdGUoKSk7dGhpcy5saWdodFNwaGVyZS5nZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlPSEwfX0oKTtcclxuVEhSRUUuUG9pbnRMaWdodEhlbHBlcj1mdW5jdGlvbihhLGIpe3RoaXMubGlnaHQ9YTt0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7dmFyIGM9bmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KGIsNCwyKSxkPW5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7d2lyZWZyYW1lOiEwLGZvZzohMX0pO2QuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSk7VEhSRUUuTWVzaC5jYWxsKHRoaXMsYyxkKTt0aGlzLm1hdHJpeD10aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMX07VEhSRUUuUG9pbnRMaWdodEhlbHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NZXNoLnByb3RvdHlwZSk7VEhSRUUuUG9pbnRMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuUG9pbnRMaWdodEhlbHBlcjtcclxuVEhSRUUuUG9pbnRMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO3RoaXMubWF0ZXJpYWwuZGlzcG9zZSgpfTtUSFJFRS5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt0aGlzLm1hdGVyaWFsLmNvbG9yLmNvcHkodGhpcy5saWdodC5jb2xvcikubXVsdGlwbHlTY2FsYXIodGhpcy5saWdodC5pbnRlbnNpdHkpfTtcclxuVEhSRUUuU2tlbGV0b25IZWxwZXI9ZnVuY3Rpb24oYSl7dGhpcy5ib25lcz10aGlzLmdldEJvbmVMaXN0KGEpO2Zvcih2YXIgYj1uZXcgVEhSRUUuR2VvbWV0cnksYz0wO2M8dGhpcy5ib25lcy5sZW5ndGg7YysrKXRoaXMuYm9uZXNbY10ucGFyZW50IGluc3RhbmNlb2YgVEhSRUUuQm9uZSYmKGIudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyksYi52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKSxiLmNvbG9ycy5wdXNoKG5ldyBUSFJFRS5Db2xvcigwLDAsMSkpLGIuY29sb3JzLnB1c2gobmV3IFRIUkVFLkNvbG9yKDAsMSwwKSkpO2M9bmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHt2ZXJ0ZXhDb2xvcnM6VEhSRUUuVmVydGV4Q29sb3JzLGRlcHRoVGVzdDohMSxkZXB0aFdyaXRlOiExLHRyYW5zcGFyZW50OiEwfSk7VEhSRUUuTGluZS5jYWxsKHRoaXMsYixjLFRIUkVFLkxpbmVQaWVjZXMpO3RoaXMucm9vdD1hO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7XHJcbnRoaXMubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLnVwZGF0ZSgpfTtUSFJFRS5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaW5lLnByb3RvdHlwZSk7VEhSRUUuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNrZWxldG9uSGVscGVyO1RIUkVFLlNrZWxldG9uSGVscGVyLnByb3RvdHlwZS5nZXRCb25lTGlzdD1mdW5jdGlvbihhKXt2YXIgYj1bXTthIGluc3RhbmNlb2YgVEhSRUUuQm9uZSYmYi5wdXNoKGEpO2Zvcih2YXIgYz0wO2M8YS5jaGlsZHJlbi5sZW5ndGg7YysrKWIucHVzaC5hcHBseShiLHRoaXMuZ2V0Qm9uZUxpc3QoYS5jaGlsZHJlbltjXSkpO3JldHVybiBifTtcclxuVEhSRUUuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmdlb21ldHJ5LGI9KG5ldyBUSFJFRS5NYXRyaXg0KS5nZXRJbnZlcnNlKHRoaXMucm9vdC5tYXRyaXhXb3JsZCksYz1uZXcgVEhSRUUuTWF0cml4NCxkPTAsZT0wO2U8dGhpcy5ib25lcy5sZW5ndGg7ZSsrKXt2YXIgZj10aGlzLmJvbmVzW2VdO2YucGFyZW50IGluc3RhbmNlb2YgVEhSRUUuQm9uZSYmKGMubXVsdGlwbHlNYXRyaWNlcyhiLGYubWF0cml4V29ybGQpLGEudmVydGljZXNbZF0uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGMpLGMubXVsdGlwbHlNYXRyaWNlcyhiLGYucGFyZW50Lm1hdHJpeFdvcmxkKSxhLnZlcnRpY2VzW2QrMV0uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGMpLGQrPTIpfWEudmVydGljZXNOZWVkVXBkYXRlPSEwO2EuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCl9O1xyXG5USFJFRS5TcG90TGlnaHRIZWxwZXI9ZnVuY3Rpb24oYSl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLmxpZ2h0PWE7dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO2E9bmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMCwxLDEsOCwxLCEwKTthLmFwcGx5TWF0cml4KChuZXcgVEhSRUUuTWF0cml4NCkubWFrZVRyYW5zbGF0aW9uKDAsLS41LDApKTthLmFwcGx5TWF0cml4KChuZXcgVEhSRUUuTWF0cml4NCkubWFrZVJvdGF0aW9uWCgtTWF0aC5QSS8yKSk7dmFyIGI9bmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHt3aXJlZnJhbWU6ITAsZm9nOiExfSk7dGhpcy5jb25lPW5ldyBUSFJFRS5NZXNoKGEsYik7dGhpcy5hZGQodGhpcy5jb25lKTt0aGlzLnVwZGF0ZSgpfTtUSFJFRS5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtcclxuVEhSRUUuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5TcG90TGlnaHRIZWxwZXI7VEhSRUUuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5jb25lLmdlb21ldHJ5LmRpc3Bvc2UoKTt0aGlzLmNvbmUubWF0ZXJpYWwuZGlzcG9zZSgpfTtcclxuVEhSRUUuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXRoaXMubGlnaHQuZGlzdGFuY2U/dGhpcy5saWdodC5kaXN0YW5jZToxRTQsZD1jKk1hdGgudGFuKHRoaXMubGlnaHQuYW5nbGUpO3RoaXMuY29uZS5zY2FsZS5zZXQoZCxkLGMpO2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQubWF0cml4V29ybGQpO2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkKTt0aGlzLmNvbmUubG9va0F0KGIuc3ViKGEpKTt0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSl9fSgpO1xyXG5USFJFRS5WZXJ0ZXhOb3JtYWxzSGVscGVyPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMub2JqZWN0PWE7dGhpcy5zaXplPXZvaWQgMCE9PWI/YjoxO2I9dm9pZCAwIT09Yz9jOjE2NzExNjgwO2Q9dm9pZCAwIT09ZD9kOjE7Yz1uZXcgVEhSRUUuR2VvbWV0cnk7YT1hLmdlb21ldHJ5LmZhY2VzO2Zvcih2YXIgZT0wLGY9YS5sZW5ndGg7ZTxmO2UrKylmb3IodmFyIGc9MCxoPWFbZV0udmVydGV4Tm9ybWFscy5sZW5ndGg7ZzxoO2crKyljLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjMpO1RIUkVFLkxpbmUuY2FsbCh0aGlzLGMsbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtjb2xvcjpiLGxpbmV3aWR0aDpkfSksVEhSRUUuTGluZVBpZWNlcyk7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMubm9ybWFsTWF0cml4PW5ldyBUSFJFRS5NYXRyaXgzO3RoaXMudXBkYXRlKCl9O1RIUkVFLlZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGluZS5wcm90b3R5cGUpO1xyXG5USFJFRS5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5WZXJ0ZXhOb3JtYWxzSGVscGVyO1xyXG5USFJFRS5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGEpe2E9W1wiYVwiLFwiYlwiLFwiY1wiLFwiZFwiXTt0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCghMCk7dGhpcy5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkKTtmb3IodmFyIGQ9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcyxlPXRoaXMub2JqZWN0Lmdlb21ldHJ5LnZlcnRpY2VzLGY9dGhpcy5vYmplY3QuZ2VvbWV0cnkuZmFjZXMsZz10aGlzLm9iamVjdC5tYXRyaXhXb3JsZCxoPTAsaz0wLGw9Zi5sZW5ndGg7azxsO2srKylmb3IodmFyIHA9ZltrXSxxPTAsbj1wLnZlcnRleE5vcm1hbHMubGVuZ3RoO3E8bjtxKyspe3ZhciB0PXAudmVydGV4Tm9ybWFsc1txXTtkW2hdLmNvcHkoZVtwW2FbcV1dXSkuYXBwbHlNYXRyaXg0KGcpO2IuY29weSh0KS5hcHBseU1hdHJpeDModGhpcy5ub3JtYWxNYXRyaXgpLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHRoaXMuc2l6ZSk7XHJcbmIuYWRkKGRbaF0pO2grPTE7ZFtoXS5jb3B5KGIpO2grPTF9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGU9ITA7cmV0dXJuIHRoaXN9fSgpO1xyXG5USFJFRS5WZXJ0ZXhUYW5nZW50c0hlbHBlcj1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLm9iamVjdD1hO3RoaXMuc2l6ZT12b2lkIDAhPT1iP2I6MTtiPXZvaWQgMCE9PWM/YzoyNTU7ZD12b2lkIDAhPT1kP2Q6MTtjPW5ldyBUSFJFRS5HZW9tZXRyeTthPWEuZ2VvbWV0cnkuZmFjZXM7Zm9yKHZhciBlPTAsZj1hLmxlbmd0aDtlPGY7ZSsrKWZvcih2YXIgZz0wLGg9YVtlXS52ZXJ0ZXhUYW5nZW50cy5sZW5ndGg7ZzxoO2crKyljLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMpLGMudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyk7VEhSRUUuTGluZS5jYWxsKHRoaXMsYyxuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOmIsbGluZXdpZHRoOmR9KSxUSFJFRS5MaW5lUGllY2VzKTt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy51cGRhdGUoKX07VEhSRUUuVmVydGV4VGFuZ2VudHNIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGluZS5wcm90b3R5cGUpO1xyXG5USFJFRS5WZXJ0ZXhUYW5nZW50c0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVmVydGV4VGFuZ2VudHNIZWxwZXI7XHJcblRIUkVFLlZlcnRleFRhbmdlbnRzSGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGEpe2E9W1wiYVwiLFwiYlwiLFwiY1wiLFwiZFwiXTt0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCghMCk7Zm9yKHZhciBkPXRoaXMuZ2VvbWV0cnkudmVydGljZXMsZT10aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlcyxmPXRoaXMub2JqZWN0Lmdlb21ldHJ5LmZhY2VzLGc9dGhpcy5vYmplY3QubWF0cml4V29ybGQsaD0wLGs9MCxsPWYubGVuZ3RoO2s8bDtrKyspZm9yKHZhciBwPWZba10scT0wLG49cC52ZXJ0ZXhUYW5nZW50cy5sZW5ndGg7cTxuO3ErKyl7dmFyIHQ9cC52ZXJ0ZXhUYW5nZW50c1txXTtkW2hdLmNvcHkoZVtwW2FbcV1dXSkuYXBwbHlNYXRyaXg0KGcpO2IuY29weSh0KS50cmFuc2Zvcm1EaXJlY3Rpb24oZykubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKTtiLmFkZChkW2hdKTtoKz0xO2RbaF0uY29weShiKTtcclxuaCs9MX10aGlzLmdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZT0hMDtyZXR1cm4gdGhpc319KCk7XHJcblRIUkVFLldpcmVmcmFtZUhlbHBlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXZvaWQgMCE9PWI/YjoxNjc3NzIxNSxkPVswLDBdLGU9e30sZj1mdW5jdGlvbihhLGIpe3JldHVybiBhLWJ9LGc9W1wiYVwiLFwiYlwiLFwiY1wiXSxoPW5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeTtpZihhLmdlb21ldHJ5IGluc3RhbmNlb2YgVEhSRUUuR2VvbWV0cnkpe2Zvcih2YXIgaz1hLmdlb21ldHJ5LnZlcnRpY2VzLGw9YS5nZW9tZXRyeS5mYWNlcyxwPTAscT1uZXcgVWludDMyQXJyYXkoNipsLmxlbmd0aCksbj0wLHQ9bC5sZW5ndGg7bjx0O24rKylmb3IodmFyIHI9bFtuXSxzPTA7Mz5zO3MrKyl7ZFswXT1yW2dbc11dO2RbMV09cltnWyhzKzEpJTNdXTtkLnNvcnQoZik7dmFyIHU9ZC50b1N0cmluZygpO3ZvaWQgMD09PWVbdV0mJihxWzIqcF09ZFswXSxxWzIqcCsxXT1kWzFdLGVbdV09ITAscCsrKX1kPW5ldyBGbG9hdDMyQXJyYXkoNipwKTtuPTA7Zm9yKHQ9cDtuPHQ7bisrKWZvcihzPTA7Mj5zO3MrKylwPVxyXG5rW3FbMipuK3NdXSxnPTYqbiszKnMsZFtnKzBdPXAueCxkW2crMV09cC55LGRbZysyXT1wLno7aC5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoZCwzKSl9ZWxzZSBpZihhLmdlb21ldHJ5IGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpe2lmKHZvaWQgMCE9PWEuZ2VvbWV0cnkuYXR0cmlidXRlcy5pbmRleCl7az1hLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7dD1hLmdlb21ldHJ5LmF0dHJpYnV0ZXMuaW5kZXguYXJyYXk7bD1hLmdlb21ldHJ5LmRyYXdjYWxscztwPTA7MD09PWwubGVuZ3RoJiYobD1be2NvdW50OnQubGVuZ3RoLGluZGV4OjAsc3RhcnQ6MH1dKTtmb3IodmFyIHE9bmV3IFVpbnQzMkFycmF5KDIqdC5sZW5ndGgpLHI9MCx2PWwubGVuZ3RoO3I8djsrK3IpZm9yKHZhciBzPWxbcl0uc3RhcnQsdT1sW3JdLmNvdW50LGc9bFtyXS5pbmRleCxuPXMseD1zK3U7bjx4O24rPTMpZm9yKHM9MDszPnM7cysrKWRbMF09XHJcbmcrdFtuK3NdLGRbMV09Zyt0W24rKHMrMSklM10sZC5zb3J0KGYpLHU9ZC50b1N0cmluZygpLHZvaWQgMD09PWVbdV0mJihxWzIqcF09ZFswXSxxWzIqcCsxXT1kWzFdLGVbdV09ITAscCsrKTtkPW5ldyBGbG9hdDMyQXJyYXkoNipwKTtuPTA7Zm9yKHQ9cDtuPHQ7bisrKWZvcihzPTA7Mj5zO3MrKylnPTYqbiszKnMscD0zKnFbMipuK3NdLGRbZyswXT1rW3BdLGRbZysxXT1rW3ArMV0sZFtnKzJdPWtbcCsyXX1lbHNlIGZvcihrPWEuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheSxwPWsubGVuZ3RoLzMscT1wLzMsZD1uZXcgRmxvYXQzMkFycmF5KDYqcCksbj0wLHQ9cTtuPHQ7bisrKWZvcihzPTA7Mz5zO3MrKylnPTE4Km4rNipzLHE9OSpuKzMqcyxkW2crMF09a1txXSxkW2crMV09a1txKzFdLGRbZysyXT1rW3ErMl0scD05Km4rKHMrMSklMyozLGRbZyszXT1rW3BdLGRbZys0XT1rW3ArMV0sZFtnKzVdPWtbcCsyXTtoLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShkLFxyXG4zKSl9VEhSRUUuTGluZS5jYWxsKHRoaXMsaCxuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOmN9KSxUSFJFRS5MaW5lUGllY2VzKTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMX07VEhSRUUuV2lyZWZyYW1lSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtUSFJFRS5XaXJlZnJhbWVIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLldpcmVmcmFtZUhlbHBlcjtUSFJFRS5JbW1lZGlhdGVSZW5kZXJPYmplY3Q9ZnVuY3Rpb24oKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMucmVuZGVyPWZ1bmN0aW9uKGEpe319O1RIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuSW1tZWRpYXRlUmVuZGVyT2JqZWN0O1xyXG5USFJFRS5Nb3JwaEJsZW5kTWVzaD1mdW5jdGlvbihhLGIpe1RIUkVFLk1lc2guY2FsbCh0aGlzLGEsYik7dGhpcy5hbmltYXRpb25zTWFwPXt9O3RoaXMuYW5pbWF0aW9uc0xpc3Q9W107dmFyIGM9dGhpcy5nZW9tZXRyeS5tb3JwaFRhcmdldHMubGVuZ3RoO3RoaXMuY3JlYXRlQW5pbWF0aW9uKFwiX19kZWZhdWx0XCIsMCxjLTEsYy8xKTt0aGlzLnNldEFuaW1hdGlvbldlaWdodChcIl9fZGVmYXVsdFwiLDEpfTtUSFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NZXNoLnByb3RvdHlwZSk7VEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1vcnBoQmxlbmRNZXNoO1xyXG5USFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuY3JlYXRlQW5pbWF0aW9uPWZ1bmN0aW9uKGEsYixjLGQpe2I9e3N0YXJ0RnJhbWU6YixlbmRGcmFtZTpjLGxlbmd0aDpjLWIrMSxmcHM6ZCxkdXJhdGlvbjooYy1iKS9kLGxhc3RGcmFtZTowLGN1cnJlbnRGcmFtZTowLGFjdGl2ZTohMSx0aW1lOjAsZGlyZWN0aW9uOjEsd2VpZ2h0OjEsZGlyZWN0aW9uQmFja3dhcmRzOiExLG1pcnJvcmVkTG9vcDohMX07dGhpcy5hbmltYXRpb25zTWFwW2FdPWI7dGhpcy5hbmltYXRpb25zTGlzdC5wdXNoKGIpfTtcclxuVEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLmF1dG9DcmVhdGVBbmltYXRpb25zPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0vKFthLXpdKylfPyhcXGQrKS8sYyxkPXt9LGU9dGhpcy5nZW9tZXRyeSxmPTAsZz1lLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ZjxnO2YrKyl7dmFyIGg9ZS5tb3JwaFRhcmdldHNbZl0ubmFtZS5tYXRjaChiKTtpZihoJiYxPGgubGVuZ3RoKXt2YXIgaz1oWzFdO2Rba118fChkW2tdPXtzdGFydDpJbmZpbml0eSxlbmQ6LUluZmluaXR5fSk7aD1kW2tdO2Y8aC5zdGFydCYmKGguc3RhcnQ9Zik7Zj5oLmVuZCYmKGguZW5kPWYpO2N8fChjPWspfX1mb3IoayBpbiBkKWg9ZFtrXSx0aGlzLmNyZWF0ZUFuaW1hdGlvbihrLGguc3RhcnQsaC5lbmQsYSk7dGhpcy5maXJzdEFuaW1hdGlvbj1jfTtcclxuVEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnNldEFuaW1hdGlvbkRpcmVjdGlvbkZvcndhcmQ9ZnVuY3Rpb24oYSl7aWYoYT10aGlzLmFuaW1hdGlvbnNNYXBbYV0pYS5kaXJlY3Rpb249MSxhLmRpcmVjdGlvbkJhY2t3YXJkcz0hMX07VEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnNldEFuaW1hdGlvbkRpcmVjdGlvbkJhY2t3YXJkPWZ1bmN0aW9uKGEpe2lmKGE9dGhpcy5hbmltYXRpb25zTWFwW2FdKWEuZGlyZWN0aW9uPS0xLGEuZGlyZWN0aW9uQmFja3dhcmRzPSEwfTtUSFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuc2V0QW5pbWF0aW9uRlBTPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5hbmltYXRpb25zTWFwW2FdO2MmJihjLmZwcz1iLGMuZHVyYXRpb249KGMuZW5kLWMuc3RhcnQpL2MuZnBzKX07XHJcblRIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5zZXRBbmltYXRpb25EdXJhdGlvbj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYW5pbWF0aW9uc01hcFthXTtjJiYoYy5kdXJhdGlvbj1iLGMuZnBzPShjLmVuZC1jLnN0YXJ0KS9jLmR1cmF0aW9uKX07VEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnNldEFuaW1hdGlvbldlaWdodD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYW5pbWF0aW9uc01hcFthXTtjJiYoYy53ZWlnaHQ9Yil9O1RIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5zZXRBbmltYXRpb25UaW1lPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5hbmltYXRpb25zTWFwW2FdO2MmJihjLnRpbWU9Yil9O1RIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5nZXRBbmltYXRpb25UaW1lPWZ1bmN0aW9uKGEpe3ZhciBiPTA7aWYoYT10aGlzLmFuaW1hdGlvbnNNYXBbYV0pYj1hLnRpbWU7cmV0dXJuIGJ9O1xyXG5USFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuZ2V0QW5pbWF0aW9uRHVyYXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9LTE7aWYoYT10aGlzLmFuaW1hdGlvbnNNYXBbYV0pYj1hLmR1cmF0aW9uO3JldHVybiBifTtUSFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUucGxheUFuaW1hdGlvbj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmFuaW1hdGlvbnNNYXBbYV07Yj8oYi50aW1lPTAsYi5hY3RpdmU9ITApOlRIUkVFLndhcm4oXCJUSFJFRS5Nb3JwaEJsZW5kTWVzaDogYW5pbWF0aW9uW1wiK2ErXCJdIHVuZGVmaW5lZCBpbiAucGxheUFuaW1hdGlvbigpXCIpfTtUSFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuc3RvcEFuaW1hdGlvbj1mdW5jdGlvbihhKXtpZihhPXRoaXMuYW5pbWF0aW9uc01hcFthXSlhLmFjdGl2ZT0hMX07XHJcblRIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTAsYz10aGlzLmFuaW1hdGlvbnNMaXN0Lmxlbmd0aDtiPGM7YisrKXt2YXIgZD10aGlzLmFuaW1hdGlvbnNMaXN0W2JdO2lmKGQuYWN0aXZlKXt2YXIgZT1kLmR1cmF0aW9uL2QubGVuZ3RoO2QudGltZSs9ZC5kaXJlY3Rpb24qYTtpZihkLm1pcnJvcmVkTG9vcCl7aWYoZC50aW1lPmQuZHVyYXRpb258fDA+ZC50aW1lKWQuZGlyZWN0aW9uKj0tMSxkLnRpbWU+ZC5kdXJhdGlvbiYmKGQudGltZT1kLmR1cmF0aW9uLGQuZGlyZWN0aW9uQmFja3dhcmRzPSEwKSwwPmQudGltZSYmKGQudGltZT0wLGQuZGlyZWN0aW9uQmFja3dhcmRzPSExKX1lbHNlIGQudGltZSU9ZC5kdXJhdGlvbiwwPmQudGltZSYmKGQudGltZSs9ZC5kdXJhdGlvbik7dmFyIGY9ZC5zdGFydEZyYW1lK1RIUkVFLk1hdGguY2xhbXAoTWF0aC5mbG9vcihkLnRpbWUvZSksMCxkLmxlbmd0aC0xKSxnPWQud2VpZ2h0O1xyXG5mIT09ZC5jdXJyZW50RnJhbWUmJih0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1tkLmxhc3RGcmFtZV09MCx0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1tkLmN1cnJlbnRGcmFtZV09MSpnLHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW2ZdPTAsZC5sYXN0RnJhbWU9ZC5jdXJyZW50RnJhbWUsZC5jdXJyZW50RnJhbWU9Zik7ZT1kLnRpbWUlZS9lO2QuZGlyZWN0aW9uQmFja3dhcmRzJiYoZT0xLWUpO3RoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW2QuY3VycmVudEZyYW1lXT1lKmc7dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbZC5sYXN0RnJhbWVdPSgxLWUpKmd9fX07XHJcbiIsIi8vIFRoaXMgVEhSRUV4IGhlbHBlciBtYWtlcyBpdCBlYXN5IHRvIGhhbmRsZSB3aW5kb3cgcmVzaXplLlxyXG4vLyBJdCB3aWxsIHVwZGF0ZSByZW5kZXJlciBhbmQgY2FtZXJhIHdoZW4gd2luZG93IGlzIHJlc2l6ZWQuXHJcbi8vXHJcbi8vICMgVXNhZ2VcclxuLy9cclxuLy8gKipTdGVwIDEqKjogU3RhcnQgdXBkYXRpbmcgcmVuZGVyZXIgYW5kIGNhbWVyYVxyXG4vL1xyXG4vLyBgYGB2YXIgd2luZG93UmVzaXplID0gbmV3IFRIUkVFeC5XaW5kb3dSZXNpemUoYVJlbmRlcmVyLCBhQ2FtZXJhKWBgYFxyXG4vLyAgICBcclxuLy8gKipTdGVwIDIqKjogc3RvcCB1cGRhdGluZyByZW5kZXJlciBhbmQgY2FtZXJhXHJcbi8vXHJcbi8vIGBgYHdpbmRvd1Jlc2l6ZS5kZXN0cm95KClgYGBcclxuLy8gIyBDb2RlXHJcblxyXG4vL1xyXG5cclxuLyoqIEBuYW1lc3BhY2UgKi9cclxudmFyIFRIUkVFeFx0PSBUSFJFRXggfHwge31cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgcmVuZGVyZXIgYW5kIGNhbWVyYSB3aGVuIHRoZSB3aW5kb3cgaXMgcmVzaXplZFxyXG4gKiBcclxuICogQHBhcmFtIHtPYmplY3R9IHJlbmRlcmVyIHRoZSByZW5kZXJlciB0byB1cGRhdGVcclxuICogQHBhcmFtIHtPYmplY3R9IENhbWVyYSB0aGUgY2FtZXJhIHRvIHVwZGF0ZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaW1lbnNpb24gY2FsbGJhY2sgZm9yIHJlbmRlcmVyIHNpemVcclxuKi9cclxuVEhSRUV4LldpbmRvd1Jlc2l6ZVx0PSBmdW5jdGlvbihyZW5kZXJlciwgY2FtZXJhLCBkaW1lbnNpb24pe1xyXG5cdGRpbWVuc2lvbiBcdD0gZGltZW5zaW9uIHx8IGZ1bmN0aW9uKCl7IHJldHVybiB7IHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCwgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgfSB9XHJcblx0dmFyIGNhbGxiYWNrXHQ9IGZ1bmN0aW9uKCl7XHJcblx0XHQvLyBmZXRjaCB0YXJnZXQgcmVuZGVyZXIgc2l6ZVxyXG5cdFx0dmFyIHJlbmRlcmVyU2l6ZSA9IGRpbWVuc2lvbigpO1xyXG5cdFx0Ly8gbm90aWZ5IHRoZSByZW5kZXJlciBvZiB0aGUgc2l6ZSBjaGFuZ2VcclxuXHRcdHJlbmRlcmVyLnNldFNpemUoIHJlbmRlcmVyU2l6ZS53aWR0aCwgcmVuZGVyZXJTaXplLmhlaWdodCApXHJcblx0XHQvLyB1cGRhdGUgdGhlIGNhbWVyYVxyXG5cdFx0Y2FtZXJhLmFzcGVjdFx0PSByZW5kZXJlclNpemUud2lkdGggLyByZW5kZXJlclNpemUuaGVpZ2h0XHJcblx0XHRjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpXHJcblx0fVxyXG5cdC8vIGJpbmQgdGhlIHJlc2l6ZSBldmVudFxyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBjYWxsYmFjaywgZmFsc2UpXHJcblx0Ly8gcmV0dXJuIC5zdG9wKCkgdGhlIGZ1bmN0aW9uIHRvIHN0b3Agd2F0Y2hpbmcgd2luZG93IHJlc2l6ZVxyXG5cdHJldHVybiB7XHJcblx0XHR0cmlnZ2VyXHQ6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdGNhbGxiYWNrKClcclxuXHRcdH0sXHJcblx0XHQvKipcclxuXHRcdCAqIFN0b3Agd2F0Y2hpbmcgd2luZG93IHJlc2l6ZVxyXG5cdFx0Ki9cclxuXHRcdGRlc3Ryb3lcdDogZnVuY3Rpb24oKXtcclxuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGNhbGxiYWNrKVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=